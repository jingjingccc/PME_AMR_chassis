
PME_AMR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef2c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  0800f1fc  0800f1fc  0001f1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f4e8  0800f4e8  0001f4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f4f0  0800f4f0  0001f4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f4f8  0800f4f8  0001f4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800f4fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001a10  24000078  0800f574  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001a88  0800f574  00021a88  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021b03  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003aba  00000000  00000000  00041ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014e8  00000000  00000000  00045668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013a8  00000000  00000000  00046b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035f2d  00000000  00000000  00047ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d398  00000000  00000000  0007de25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001538b6  00000000  00000000  0009b1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001eea73  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c8c  00000000  00000000  001eeac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f1e4 	.word	0x0800f1e4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800f1e4 	.word	0x0800f1e4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <Control_Init>:
/**
 * @ brief Include all the initial function
 * @ retval None
 * */
void Control_Init()
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b0ab      	sub	sp, #172	; 0xac
 8000684:	af28      	add	r7, sp, #160	; 0xa0
	Hardware_Info_Init();
 8000686:	f000 fae5 	bl	8000c54 <Hardware_Info_Init>
	Control_Timer_Init();
 800068a:	f000 fab3 	bl	8000bf4 <Control_Timer_Init>
	Motor_Driver_Init(&WheelA, M1_PHASE_Pin, M1_PHASE_GPIO_port, M1_Encoder_timer, M1_Encoder_timerchannel, M1_Encoder_dir, M1_PWM_timer, M1_PWM_timerchannel);
	Motor_Driver_Init(&WheelB, M2_PHASE_Pin, M2_PHASE_GPIO_port, M2_Encoder_timer, M2_Encoder_timerchannel, M2_Encoder_dir, M2_PWM_timer, M2_PWM_timerchannel);
	Motor_Driver_Init(&WheelC, M3_PHASE_Pin, M3_PHASE_GPIO_port, M3_Encoder_timer, M3_Encoder_timerchannel, M3_Encoder_dir, M3_PWM_timer, M3_PWM_timerchannel);
#endif
#ifdef G2_18V17
	Motor_Driver_Init(&WheelA, M1_DIR_Pin, M1_DIR_GPIO_port, M1_Encoder_timer, M1_Encoder_timerchannel, M1_Encoder_dir, M1_PWM_timer, M1_PWM_timerchannel);
 800068e:	4cb8      	ldr	r4, [pc, #736]	; (8000970 <Control_Init+0x2f0>)
 8000690:	2304      	movs	r3, #4
 8000692:	9327      	str	r3, [sp, #156]	; 0x9c
 8000694:	4ab7      	ldr	r2, [pc, #732]	; (8000974 <Control_Init+0x2f4>)
 8000696:	ab14      	add	r3, sp, #80	; 0x50
 8000698:	4611      	mov	r1, r2
 800069a:	224c      	movs	r2, #76	; 0x4c
 800069c:	4618      	mov	r0, r3
 800069e:	f00e fc09 	bl	800eeb4 <memcpy>
 80006a2:	2301      	movs	r3, #1
 80006a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80006a6:	2304      	movs	r3, #4
 80006a8:	9312      	str	r3, [sp, #72]	; 0x48
 80006aa:	4668      	mov	r0, sp
 80006ac:	1d23      	adds	r3, r4, #4
 80006ae:	2248      	movs	r2, #72	; 0x48
 80006b0:	4619      	mov	r1, r3
 80006b2:	f00e fbff 	bl	800eeb4 <memcpy>
 80006b6:	6823      	ldr	r3, [r4, #0]
 80006b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006bc:	49ae      	ldr	r1, [pc, #696]	; (8000978 <Control_Init+0x2f8>)
 80006be:	48af      	ldr	r0, [pc, #700]	; (800097c <Control_Init+0x2fc>)
 80006c0:	f000 fa63 	bl	8000b8a <Motor_Driver_Init>
	Motor_Driver_Init(&WheelB, M2_DIR_Pin, M2_DIR_GPIO_port, M2_Encoder_timer, M2_Encoder_timerchannel, M2_Encoder_dir, M2_PWM_timer, M2_PWM_timerchannel);
 80006c4:	4cae      	ldr	r4, [pc, #696]	; (8000980 <Control_Init+0x300>)
 80006c6:	2300      	movs	r3, #0
 80006c8:	9327      	str	r3, [sp, #156]	; 0x9c
 80006ca:	4aaa      	ldr	r2, [pc, #680]	; (8000974 <Control_Init+0x2f4>)
 80006cc:	ab14      	add	r3, sp, #80	; 0x50
 80006ce:	4611      	mov	r1, r2
 80006d0:	224c      	movs	r2, #76	; 0x4c
 80006d2:	4618      	mov	r0, r3
 80006d4:	f00e fbee 	bl	800eeb4 <memcpy>
 80006d8:	2301      	movs	r3, #1
 80006da:	9313      	str	r3, [sp, #76]	; 0x4c
 80006dc:	2304      	movs	r3, #4
 80006de:	9312      	str	r3, [sp, #72]	; 0x48
 80006e0:	4668      	mov	r0, sp
 80006e2:	1d23      	adds	r3, r4, #4
 80006e4:	2248      	movs	r2, #72	; 0x48
 80006e6:	4619      	mov	r1, r3
 80006e8:	f00e fbe4 	bl	800eeb4 <memcpy>
 80006ec:	6823      	ldr	r3, [r4, #0]
 80006ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006f2:	49a4      	ldr	r1, [pc, #656]	; (8000984 <Control_Init+0x304>)
 80006f4:	48a4      	ldr	r0, [pc, #656]	; (8000988 <Control_Init+0x308>)
 80006f6:	f000 fa48 	bl	8000b8a <Motor_Driver_Init>
	Motor_Driver_Init(&WheelC, M3_DIR_Pin, M3_DIR_GPIO_port, M3_Encoder_timer, M3_Encoder_timerchannel, M3_Encoder_dir, M3_PWM_timer, M3_PWM_timerchannel);
 80006fa:	4ca4      	ldr	r4, [pc, #656]	; (800098c <Control_Init+0x30c>)
 80006fc:	2300      	movs	r3, #0
 80006fe:	9327      	str	r3, [sp, #156]	; 0x9c
 8000700:	4aa3      	ldr	r2, [pc, #652]	; (8000990 <Control_Init+0x310>)
 8000702:	ab14      	add	r3, sp, #80	; 0x50
 8000704:	4611      	mov	r1, r2
 8000706:	224c      	movs	r2, #76	; 0x4c
 8000708:	4618      	mov	r0, r3
 800070a:	f00e fbd3 	bl	800eeb4 <memcpy>
 800070e:	2301      	movs	r3, #1
 8000710:	9313      	str	r3, [sp, #76]	; 0x4c
 8000712:	2304      	movs	r3, #4
 8000714:	9312      	str	r3, [sp, #72]	; 0x48
 8000716:	4668      	mov	r0, sp
 8000718:	1d23      	adds	r3, r4, #4
 800071a:	2248      	movs	r2, #72	; 0x48
 800071c:	4619      	mov	r1, r3
 800071e:	f00e fbc9 	bl	800eeb4 <memcpy>
 8000722:	6823      	ldr	r3, [r4, #0]
 8000724:	2208      	movs	r2, #8
 8000726:	499b      	ldr	r1, [pc, #620]	; (8000994 <Control_Init+0x314>)
 8000728:	489b      	ldr	r0, [pc, #620]	; (8000998 <Control_Init+0x318>)
 800072a:	f000 fa2e 	bl	8000b8a <Motor_Driver_Init>
	Motor_Driver_Init(&WheelD, M4_DIR_Pin, M4_DIR_GPIO_port, M4_Encoder_timer, M4_Encoder_timerchannel, M4_Encoder_dir, M4_PWM_timer, M4_PWM_timerchannel);
 800072e:	4c9b      	ldr	r4, [pc, #620]	; (800099c <Control_Init+0x31c>)
 8000730:	2304      	movs	r3, #4
 8000732:	9327      	str	r3, [sp, #156]	; 0x9c
 8000734:	4a96      	ldr	r2, [pc, #600]	; (8000990 <Control_Init+0x310>)
 8000736:	ab14      	add	r3, sp, #80	; 0x50
 8000738:	4611      	mov	r1, r2
 800073a:	224c      	movs	r2, #76	; 0x4c
 800073c:	4618      	mov	r0, r3
 800073e:	f00e fbb9 	bl	800eeb4 <memcpy>
 8000742:	2301      	movs	r3, #1
 8000744:	9313      	str	r3, [sp, #76]	; 0x4c
 8000746:	2304      	movs	r3, #4
 8000748:	9312      	str	r3, [sp, #72]	; 0x48
 800074a:	4668      	mov	r0, sp
 800074c:	1d23      	adds	r3, r4, #4
 800074e:	2248      	movs	r2, #72	; 0x48
 8000750:	4619      	mov	r1, r3
 8000752:	f00e fbaf 	bl	800eeb4 <memcpy>
 8000756:	6823      	ldr	r3, [r4, #0]
 8000758:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800075c:	4990      	ldr	r1, [pc, #576]	; (80009a0 <Control_Init+0x320>)
 800075e:	4891      	ldr	r0, [pc, #580]	; (80009a4 <Control_Init+0x324>)
 8000760:	f000 fa13 	bl	8000b8a <Motor_Driver_Init>
#endif

	Pid_Param_Init(&WheelA, M1_KP, M1_KI, M1_KD);
 8000764:	ed9f 2b7e 	vldr	d2, [pc, #504]	; 8000960 <Control_Init+0x2e0>
 8000768:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 8000960 <Control_Init+0x2e0>
 800076c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8000770:	4882      	ldr	r0, [pc, #520]	; (800097c <Control_Init+0x2fc>)
 8000772:	f000 f9eb 	bl	8000b4c <Pid_Param_Init>
	Pid_Param_Init(&WheelB, M2_KP, M2_KI, M2_KD);
 8000776:	ed9f 2b7a 	vldr	d2, [pc, #488]	; 8000960 <Control_Init+0x2e0>
 800077a:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8000960 <Control_Init+0x2e0>
 800077e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8000782:	4881      	ldr	r0, [pc, #516]	; (8000988 <Control_Init+0x308>)
 8000784:	f000 f9e2 	bl	8000b4c <Pid_Param_Init>
	Pid_Param_Init(&WheelC, M3_KP, M3_KI, M3_KD);
 8000788:	ed9f 2b75 	vldr	d2, [pc, #468]	; 8000960 <Control_Init+0x2e0>
 800078c:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8000960 <Control_Init+0x2e0>
 8000790:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8000794:	4880      	ldr	r0, [pc, #512]	; (8000998 <Control_Init+0x318>)
 8000796:	f000 f9d9 	bl	8000b4c <Pid_Param_Init>
	Pid_Param_Init(&WheelD, M4_KP, M4_KI, M4_KD);
 800079a:	ed9f 2b71 	vldr	d2, [pc, #452]	; 8000960 <Control_Init+0x2e0>
 800079e:	ed9f 1b70 	vldr	d1, [pc, #448]	; 8000960 <Control_Init+0x2e0>
 80007a2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80007a6:	487f      	ldr	r0, [pc, #508]	; (80009a4 <Control_Init+0x324>)
 80007a8:	f000 f9d0 	bl	8000b4c <Pid_Param_Init>

	i = 0;
 80007ac:	4b7e      	ldr	r3, [pc, #504]	; (80009a8 <Control_Init+0x328>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
	limit_integral = 0.6;
 80007b2:	497e      	ldr	r1, [pc, #504]	; (80009ac <Control_Init+0x32c>)
 80007b4:	a36c      	add	r3, pc, #432	; (adr r3, 8000968 <Control_Init+0x2e8>)
 80007b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007ba:	e9c1 2300 	strd	r2, r3, [r1]
	pwm_arr = M1_PWM_timer.Init.Period;
 80007be:	4b6d      	ldr	r3, [pc, #436]	; (8000974 <Control_Init+0x2f4>)
 80007c0:	68db      	ldr	r3, [r3, #12]
 80007c2:	ee07 3a90 	vmov	s15, r3
 80007c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007ca:	4b79      	ldr	r3, [pc, #484]	; (80009b0 <Control_Init+0x330>)
 80007cc:	ed83 7b00 	vstr	d7, [r3]

	// PCLK1_freq, APB1 timer frequency
	int32_t PCLK1_freq = HAL_RCC_GetPCLK1Freq();
 80007d0:	f008 ff6c 	bl	80096ac <HAL_RCC_GetPCLK1Freq>
 80007d4:	4603      	mov	r3, r0
 80007d6:	607b      	str	r3, [r7, #4]
//	if((RCC->CFGR & RCC_CFGR_PPRE1) != 0)
//	{
//		PCLK1_freq *=2;
//	}
	if((RCC->CFGR & RCC_D2CFGR_D2PPRE1) != 0)
 80007d8:	4b76      	ldr	r3, [pc, #472]	; (80009b4 <Control_Init+0x334>)
 80007da:	691b      	ldr	r3, [r3, #16]
 80007dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <Control_Init+0x16a>
	{
		PCLK1_freq *=2;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
	}

	int32_t timer_interrupt_freq = (double)PCLK1_freq / (Encoder_Interrupt_timer.Init.Prescaler + 1) / Encoder_Interrupt_timer.Init.Period;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	ee07 3a90 	vmov	s15, r3
 80007f0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007f4:	4b70      	ldr	r3, [pc, #448]	; (80009b8 <Control_Init+0x338>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	3301      	adds	r3, #1
 80007fa:	ee07 3a90 	vmov	s15, r3
 80007fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000802:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000806:	4b6c      	ldr	r3, [pc, #432]	; (80009b8 <Control_Init+0x338>)
 8000808:	68db      	ldr	r3, [r3, #12]
 800080a:	ee07 3a90 	vmov	s15, r3
 800080e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000812:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000816:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800081a:	ee17 3a90 	vmov	r3, s15
 800081e:	603b      	str	r3, [r7, #0]
	control_period = (double)(1 / (double)timer_interrupt_freq);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	ee07 3a90 	vmov	s15, r3
 8000826:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800082a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800082e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000832:	4b62      	ldr	r3, [pc, #392]	; (80009bc <Control_Init+0x33c>)
 8000834:	ed83 7b00 	vstr	d7, [r3]

	WheelA.integral = 0.0;
 8000838:	4950      	ldr	r1, [pc, #320]	; (800097c <Control_Init+0x2fc>)
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	WheelB.integral = 0.0;
 8000846:	4950      	ldr	r1, [pc, #320]	; (8000988 <Control_Init+0x308>)
 8000848:	f04f 0200 	mov.w	r2, #0
 800084c:	f04f 0300 	mov.w	r3, #0
 8000850:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	WheelC.integral = 0.0;
 8000854:	4950      	ldr	r1, [pc, #320]	; (8000998 <Control_Init+0x318>)
 8000856:	f04f 0200 	mov.w	r2, #0
 800085a:	f04f 0300 	mov.w	r3, #0
 800085e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	WheelD.integral = 0.0;
 8000862:	4950      	ldr	r1, [pc, #320]	; (80009a4 <Control_Init+0x324>)
 8000864:	f04f 0200 	mov.w	r2, #0
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	WheelA.goal = 0.0;
 8000870:	4942      	ldr	r1, [pc, #264]	; (800097c <Control_Init+0x2fc>)
 8000872:	f04f 0200 	mov.w	r2, #0
 8000876:	f04f 0300 	mov.w	r3, #0
 800087a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	WheelB.goal = 0.0;
 800087e:	4942      	ldr	r1, [pc, #264]	; (8000988 <Control_Init+0x308>)
 8000880:	f04f 0200 	mov.w	r2, #0
 8000884:	f04f 0300 	mov.w	r3, #0
 8000888:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	WheelC.goal = 0.0;
 800088c:	4942      	ldr	r1, [pc, #264]	; (8000998 <Control_Init+0x318>)
 800088e:	f04f 0200 	mov.w	r2, #0
 8000892:	f04f 0300 	mov.w	r3, #0
 8000896:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	WheelD.goal = 0.0;
 800089a:	4942      	ldr	r1, [pc, #264]	; (80009a4 <Control_Init+0x324>)
 800089c:	f04f 0200 	mov.w	r2, #0
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	// stop chassis
	HAL_GPIO_WritePin(WheelA.DIR_pin_type, WheelA.DIR_pin_Num, GPIO_PIN_RESET);
 80008a8:	4b34      	ldr	r3, [pc, #208]	; (800097c <Control_Init+0x2fc>)
 80008aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ac:	4a33      	ldr	r2, [pc, #204]	; (800097c <Control_Init+0x2fc>)
 80008ae:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 80008b2:	2200      	movs	r2, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f007 ff6b 	bl	8008790 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelA.pwm_timer), WheelA.pwm_timer_channel, 0);
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <Control_Init+0x2fc>)
 80008bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d105      	bne.n	80008d0 <Control_Init+0x250>
 80008c4:	4b2d      	ldr	r3, [pc, #180]	; (800097c <Control_Init+0x2fc>)
 80008c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80008ca:	2200      	movs	r2, #0
 80008cc:	635a      	str	r2, [r3, #52]	; 0x34
 80008ce:	e030      	b.n	8000932 <Control_Init+0x2b2>
 80008d0:	4b2a      	ldr	r3, [pc, #168]	; (800097c <Control_Init+0x2fc>)
 80008d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	d105      	bne.n	80008e6 <Control_Init+0x266>
 80008da:	4b28      	ldr	r3, [pc, #160]	; (800097c <Control_Init+0x2fc>)
 80008dc:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80008e0:	2300      	movs	r3, #0
 80008e2:	6393      	str	r3, [r2, #56]	; 0x38
 80008e4:	e025      	b.n	8000932 <Control_Init+0x2b2>
 80008e6:	4b25      	ldr	r3, [pc, #148]	; (800097c <Control_Init+0x2fc>)
 80008e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008ec:	2b08      	cmp	r3, #8
 80008ee:	d105      	bne.n	80008fc <Control_Init+0x27c>
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <Control_Init+0x2fc>)
 80008f2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80008f6:	2300      	movs	r3, #0
 80008f8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008fa:	e01a      	b.n	8000932 <Control_Init+0x2b2>
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <Control_Init+0x2fc>)
 80008fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000902:	2b0c      	cmp	r3, #12
 8000904:	d105      	bne.n	8000912 <Control_Init+0x292>
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <Control_Init+0x2fc>)
 8000908:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800090c:	2300      	movs	r3, #0
 800090e:	6413      	str	r3, [r2, #64]	; 0x40
 8000910:	e00f      	b.n	8000932 <Control_Init+0x2b2>
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <Control_Init+0x2fc>)
 8000914:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000918:	2b10      	cmp	r3, #16
 800091a:	d105      	bne.n	8000928 <Control_Init+0x2a8>
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <Control_Init+0x2fc>)
 800091e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000922:	2300      	movs	r3, #0
 8000924:	6593      	str	r3, [r2, #88]	; 0x58
 8000926:	e004      	b.n	8000932 <Control_Init+0x2b2>
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <Control_Init+0x2fc>)
 800092a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800092e:	2300      	movs	r3, #0
 8000930:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_GPIO_WritePin(WheelB.DIR_pin_type, WheelB.DIR_pin_Num, GPIO_PIN_RESET);
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <Control_Init+0x308>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000936:	4a14      	ldr	r2, [pc, #80]	; (8000988 <Control_Init+0x308>)
 8000938:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 800093c:	2200      	movs	r2, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f007 ff26 	bl	8008790 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelB.pwm_timer), WheelB.pwm_timer_channel, 0);
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <Control_Init+0x308>)
 8000946:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800094a:	2b00      	cmp	r3, #0
 800094c:	d138      	bne.n	80009c0 <Control_Init+0x340>
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <Control_Init+0x308>)
 8000950:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000954:	2200      	movs	r2, #0
 8000956:	635a      	str	r2, [r3, #52]	; 0x34
 8000958:	e063      	b.n	8000a22 <Control_Init+0x3a2>
 800095a:	bf00      	nop
 800095c:	f3af 8000 	nop.w
	...
 8000968:	33333333 	.word	0x33333333
 800096c:	3fe33333 	.word	0x3fe33333
 8000970:	240016dc 	.word	0x240016dc
 8000974:	2400180c 	.word	0x2400180c
 8000978:	58020c00 	.word	0x58020c00
 800097c:	240000f0 	.word	0x240000f0
 8000980:	240017c0 	.word	0x240017c0
 8000984:	58020400 	.word	0x58020400
 8000988:	24000200 	.word	0x24000200
 800098c:	24001728 	.word	0x24001728
 8000990:	24001858 	.word	0x24001858
 8000994:	58021000 	.word	0x58021000
 8000998:	24000310 	.word	0x24000310
 800099c:	24001774 	.word	0x24001774
 80009a0:	58020800 	.word	0x58020800
 80009a4:	24000420 	.word	0x24000420
 80009a8:	24000530 	.word	0x24000530
 80009ac:	240000d8 	.word	0x240000d8
 80009b0:	240000e0 	.word	0x240000e0
 80009b4:	58024400 	.word	0x58024400
 80009b8:	240018a4 	.word	0x240018a4
 80009bc:	240000e8 	.word	0x240000e8
 80009c0:	4b5f      	ldr	r3, [pc, #380]	; (8000b40 <Control_Init+0x4c0>)
 80009c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	d105      	bne.n	80009d6 <Control_Init+0x356>
 80009ca:	4b5d      	ldr	r3, [pc, #372]	; (8000b40 <Control_Init+0x4c0>)
 80009cc:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80009d0:	2300      	movs	r3, #0
 80009d2:	6393      	str	r3, [r2, #56]	; 0x38
 80009d4:	e025      	b.n	8000a22 <Control_Init+0x3a2>
 80009d6:	4b5a      	ldr	r3, [pc, #360]	; (8000b40 <Control_Init+0x4c0>)
 80009d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009dc:	2b08      	cmp	r3, #8
 80009de:	d105      	bne.n	80009ec <Control_Init+0x36c>
 80009e0:	4b57      	ldr	r3, [pc, #348]	; (8000b40 <Control_Init+0x4c0>)
 80009e2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80009e6:	2300      	movs	r3, #0
 80009e8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80009ea:	e01a      	b.n	8000a22 <Control_Init+0x3a2>
 80009ec:	4b54      	ldr	r3, [pc, #336]	; (8000b40 <Control_Init+0x4c0>)
 80009ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009f2:	2b0c      	cmp	r3, #12
 80009f4:	d105      	bne.n	8000a02 <Control_Init+0x382>
 80009f6:	4b52      	ldr	r3, [pc, #328]	; (8000b40 <Control_Init+0x4c0>)
 80009f8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80009fc:	2300      	movs	r3, #0
 80009fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000a00:	e00f      	b.n	8000a22 <Control_Init+0x3a2>
 8000a02:	4b4f      	ldr	r3, [pc, #316]	; (8000b40 <Control_Init+0x4c0>)
 8000a04:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a08:	2b10      	cmp	r3, #16
 8000a0a:	d105      	bne.n	8000a18 <Control_Init+0x398>
 8000a0c:	4b4c      	ldr	r3, [pc, #304]	; (8000b40 <Control_Init+0x4c0>)
 8000a0e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a12:	2300      	movs	r3, #0
 8000a14:	6593      	str	r3, [r2, #88]	; 0x58
 8000a16:	e004      	b.n	8000a22 <Control_Init+0x3a2>
 8000a18:	4b49      	ldr	r3, [pc, #292]	; (8000b40 <Control_Init+0x4c0>)
 8000a1a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a1e:	2300      	movs	r3, #0
 8000a20:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_GPIO_WritePin(WheelC.DIR_pin_type, WheelC.DIR_pin_Num, GPIO_PIN_RESET);
 8000a22:	4b48      	ldr	r3, [pc, #288]	; (8000b44 <Control_Init+0x4c4>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a26:	4a47      	ldr	r2, [pc, #284]	; (8000b44 <Control_Init+0x4c4>)
 8000a28:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f007 feae 	bl	8008790 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelC.pwm_timer), WheelC.pwm_timer_channel, 0);
 8000a34:	4b43      	ldr	r3, [pc, #268]	; (8000b44 <Control_Init+0x4c4>)
 8000a36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d105      	bne.n	8000a4a <Control_Init+0x3ca>
 8000a3e:	4b41      	ldr	r3, [pc, #260]	; (8000b44 <Control_Init+0x4c4>)
 8000a40:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000a44:	2200      	movs	r2, #0
 8000a46:	635a      	str	r2, [r3, #52]	; 0x34
 8000a48:	e030      	b.n	8000aac <Control_Init+0x42c>
 8000a4a:	4b3e      	ldr	r3, [pc, #248]	; (8000b44 <Control_Init+0x4c4>)
 8000a4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a50:	2b04      	cmp	r3, #4
 8000a52:	d105      	bne.n	8000a60 <Control_Init+0x3e0>
 8000a54:	4b3b      	ldr	r3, [pc, #236]	; (8000b44 <Control_Init+0x4c4>)
 8000a56:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	6393      	str	r3, [r2, #56]	; 0x38
 8000a5e:	e025      	b.n	8000aac <Control_Init+0x42c>
 8000a60:	4b38      	ldr	r3, [pc, #224]	; (8000b44 <Control_Init+0x4c4>)
 8000a62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a66:	2b08      	cmp	r3, #8
 8000a68:	d105      	bne.n	8000a76 <Control_Init+0x3f6>
 8000a6a:	4b36      	ldr	r3, [pc, #216]	; (8000b44 <Control_Init+0x4c4>)
 8000a6c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a70:	2300      	movs	r3, #0
 8000a72:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000a74:	e01a      	b.n	8000aac <Control_Init+0x42c>
 8000a76:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <Control_Init+0x4c4>)
 8000a78:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a7c:	2b0c      	cmp	r3, #12
 8000a7e:	d105      	bne.n	8000a8c <Control_Init+0x40c>
 8000a80:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <Control_Init+0x4c4>)
 8000a82:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a86:	2300      	movs	r3, #0
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	e00f      	b.n	8000aac <Control_Init+0x42c>
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <Control_Init+0x4c4>)
 8000a8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a92:	2b10      	cmp	r3, #16
 8000a94:	d105      	bne.n	8000aa2 <Control_Init+0x422>
 8000a96:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <Control_Init+0x4c4>)
 8000a98:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa0:	e004      	b.n	8000aac <Control_Init+0x42c>
 8000aa2:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <Control_Init+0x4c4>)
 8000aa4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_GPIO_WritePin(WheelD.DIR_pin_type, WheelD.DIR_pin_Num, GPIO_PIN_RESET);
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <Control_Init+0x4c8>)
 8000aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab0:	4a25      	ldr	r2, [pc, #148]	; (8000b48 <Control_Init+0x4c8>)
 8000ab2:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f007 fe69 	bl	8008790 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000abe:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <Control_Init+0x4c8>)
 8000ac0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d105      	bne.n	8000ad4 <Control_Init+0x454>
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <Control_Init+0x4c8>)
 8000aca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000ace:	2200      	movs	r2, #0
 8000ad0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ad2:	e030      	b.n	8000b36 <Control_Init+0x4b6>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <Control_Init+0x4c8>)
 8000ad6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	d105      	bne.n	8000aea <Control_Init+0x46a>
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <Control_Init+0x4c8>)
 8000ae0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000ae8:	e025      	b.n	8000b36 <Control_Init+0x4b6>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <Control_Init+0x4c8>)
 8000aec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000af0:	2b08      	cmp	r3, #8
 8000af2:	d105      	bne.n	8000b00 <Control_Init+0x480>
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <Control_Init+0x4c8>)
 8000af6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000afa:	2300      	movs	r3, #0
 8000afc:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000afe:	e01a      	b.n	8000b36 <Control_Init+0x4b6>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <Control_Init+0x4c8>)
 8000b02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000b06:	2b0c      	cmp	r3, #12
 8000b08:	d105      	bne.n	8000b16 <Control_Init+0x496>
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <Control_Init+0x4c8>)
 8000b0c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b10:	2300      	movs	r3, #0
 8000b12:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b14:	e00f      	b.n	8000b36 <Control_Init+0x4b6>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <Control_Init+0x4c8>)
 8000b18:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000b1c:	2b10      	cmp	r3, #16
 8000b1e:	d105      	bne.n	8000b2c <Control_Init+0x4ac>
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <Control_Init+0x4c8>)
 8000b22:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b26:	2300      	movs	r3, #0
 8000b28:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000b2a:	e004      	b.n	8000b36 <Control_Init+0x4b6>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <Control_Init+0x4c8>)
 8000b2e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b32:	2300      	movs	r3, #0
 8000b34:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd90      	pop	{r4, r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	24000200 	.word	0x24000200
 8000b44:	24000310 	.word	0x24000310
 8000b48:	24000420 	.word	0x24000420

08000b4c <Pid_Param_Init>:
/**
 * @ brief assign the pid gain value into the PID_Controll object
 * @ retval None
 * */
void Pid_Param_Init(PID_Control *Wheel_, double kp, double ki, double kd)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	61f8      	str	r0, [r7, #28]
 8000b54:	ed87 0b04 	vstr	d0, [r7, #16]
 8000b58:	ed87 1b02 	vstr	d1, [r7, #8]
 8000b5c:	ed87 2b00 	vstr	d2, [r7]
	Wheel_->Kp = kp;
 8000b60:	69f9      	ldr	r1, [r7, #28]
 8000b62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b66:	e9c1 2300 	strd	r2, r3, [r1]
	Wheel_->Ki = ki;
 8000b6a:	69f9      	ldr	r1, [r7, #28]
 8000b6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b70:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Wheel_->Kd = kd;
 8000b74:	69f9      	ldr	r1, [r7, #28]
 8000b76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b7a:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8000b7e:	bf00      	nop
 8000b80:	3724      	adds	r7, #36	; 0x24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <Motor_Driver_Init>:
#ifdef G2_18V17
void Motor_Driver_Init(PID_Control *Wheel_,
		GPIO_TypeDef *DIR_pin_type, uint16_t DIR_pin_num_,
		TIM_HandleTypeDef encoder_timer_, uint32_t encoder_timer_channel_, int encoder_dir_,
		TIM_HandleTypeDef pwm_timer_, uint32_t pwm_timer_channel_)
{
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	61fb      	str	r3, [r7, #28]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	80fb      	strh	r3, [r7, #6]
	Wheel_->DIR_pin_type = DIR_pin_type;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	661a      	str	r2, [r3, #96]	; 0x60
	Wheel_->DIR_pin_Num = DIR_pin_num_;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	88fa      	ldrh	r2, [r7, #6]
 8000ba6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	Wheel_->encoder_timer = encoder_timer_;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	3368      	adds	r3, #104	; 0x68
 8000bae:	f107 011c 	add.w	r1, r7, #28
 8000bb2:	224c      	movs	r2, #76	; 0x4c
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f00e f97d 	bl	800eeb4 <memcpy>
	Wheel_->encoder_timer_channel = encoder_timer_channel_;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000bbe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	Wheel_->encoder_dir = encoder_dir_;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000bc6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	Wheel_->pwm_timer = pwm_timer_;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	33bc      	adds	r3, #188	; 0xbc
 8000bce:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000bd2:	224c      	movs	r2, #76	; 0x4c
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f00e f96d 	bl	800eeb4 <memcpy>
	Wheel_->pwm_timer_channel = pwm_timer_channel_;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000be0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bee:	b002      	add	sp, #8
 8000bf0:	4770      	bx	lr
	...

08000bf4 <Control_Timer_Init>:
 * @ brief initialize the timers that encoder and pwm used
 * @ all the definition in the function are in "control.h"
 * @ retval None
 * */
void Control_Timer_Init()
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&M1_Encoder_timer, M1_Encoder_timerchannel);
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	4810      	ldr	r0, [pc, #64]	; (8000c3c <Control_Timer_Init+0x48>)
 8000bfc:	f00a fe3c 	bl	800b878 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M1_PWM_timer, M1_PWM_timerchannel);
 8000c00:	2104      	movs	r1, #4
 8000c02:	480f      	ldr	r0, [pc, #60]	; (8000c40 <Control_Timer_Init+0x4c>)
 8000c04:	f00a fc76 	bl	800b4f4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M2_Encoder_timer, M2_Encoder_timerchannel);
 8000c08:	2104      	movs	r1, #4
 8000c0a:	480e      	ldr	r0, [pc, #56]	; (8000c44 <Control_Timer_Init+0x50>)
 8000c0c:	f00a fe34 	bl	800b878 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M2_PWM_timer, M2_PWM_timerchannel);
 8000c10:	2100      	movs	r1, #0
 8000c12:	480b      	ldr	r0, [pc, #44]	; (8000c40 <Control_Timer_Init+0x4c>)
 8000c14:	f00a fc6e 	bl	800b4f4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M3_Encoder_timer, M3_Encoder_timerchannel);
 8000c18:	2104      	movs	r1, #4
 8000c1a:	480b      	ldr	r0, [pc, #44]	; (8000c48 <Control_Timer_Init+0x54>)
 8000c1c:	f00a fe2c 	bl	800b878 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M3_PWM_timer, M3_PWM_timerchannel);
 8000c20:	2100      	movs	r1, #0
 8000c22:	480a      	ldr	r0, [pc, #40]	; (8000c4c <Control_Timer_Init+0x58>)
 8000c24:	f00a fc66 	bl	800b4f4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M4_Encoder_timer, M4_Encoder_timerchannel);
 8000c28:	2104      	movs	r1, #4
 8000c2a:	4809      	ldr	r0, [pc, #36]	; (8000c50 <Control_Timer_Init+0x5c>)
 8000c2c:	f00a fe24 	bl	800b878 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M4_PWM_timer, M4_PWM_timerchannel);
 8000c30:	2104      	movs	r1, #4
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <Control_Timer_Init+0x58>)
 8000c34:	f00a fc5e 	bl	800b4f4 <HAL_TIM_PWM_Start>
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	240016dc 	.word	0x240016dc
 8000c40:	2400180c 	.word	0x2400180c
 8000c44:	240017c0 	.word	0x240017c0
 8000c48:	24001728 	.word	0x24001728
 8000c4c:	24001858 	.word	0x24001858
 8000c50:	24001774 	.word	0x24001774

08000c54 <Hardware_Info_Init>:
/**
 * @ brief assign the hardware value for motor and chassis radius error
 * @ retval None
 * */
void Hardware_Info_Init()
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
	radius_error_a = 1.0;
 8000c58:	4911      	ldr	r1, [pc, #68]	; (8000ca0 <Hardware_Info_Init+0x4c>)
 8000c5a:	f04f 0200 	mov.w	r2, #0
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <Hardware_Info_Init+0x50>)
 8000c60:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_b = 1.0;
 8000c64:	4910      	ldr	r1, [pc, #64]	; (8000ca8 <Hardware_Info_Init+0x54>)
 8000c66:	f04f 0200 	mov.w	r2, #0
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <Hardware_Info_Init+0x50>)
 8000c6c:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_c = 1.0;
 8000c70:	490e      	ldr	r1, [pc, #56]	; (8000cac <Hardware_Info_Init+0x58>)
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <Hardware_Info_Init+0x50>)
 8000c78:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_d = 1.0;
 8000c7c:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <Hardware_Info_Init+0x5c>)
 8000c7e:	f04f 0200 	mov.w	r2, #0
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <Hardware_Info_Init+0x50>)
 8000c84:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_chassis = 1.0;
 8000c88:	490a      	ldr	r1, [pc, #40]	; (8000cb4 <Hardware_Info_Init+0x60>)
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <Hardware_Info_Init+0x50>)
 8000c90:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	24000098 	.word	0x24000098
 8000ca4:	3ff00000 	.word	0x3ff00000
 8000ca8:	240000a0 	.word	0x240000a0
 8000cac:	240000a8 	.word	0x240000a8
 8000cb0:	240000b0 	.word	0x240000b0
 8000cb4:	240000b8 	.word	0x240000b8

08000cb8 <PID_Controller>:
 * @ brief PID control for the motor
 * @ param Wheel_ the object declare for each motor (WheelA, WheelB, WheelC)
 * @ retval None
 * */
void PID_Controller(PID_Control *Wheel_)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	Wheel_->CountNum = __HAL_TIM_GetCounter(&Wheel_->encoder_timer)* Wheel_->encoder_dir;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	fb12 f303 	smulbb	r3, r2, r3
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	b21a      	sxth	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	831a      	strh	r2, [r3, #24]
	Wheel_->rps = (double)Wheel_->CountNum / ((double)4 * encoder_resolution * speed_reduction_ratio * control_period);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000ce2:	ee07 3a90 	vmov	s15, r3
 8000ce6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000cea:	4bad      	ldr	r3, [pc, #692]	; (8000fa0 <PID_Controller+0x2e8>)
 8000cec:	ed93 7b00 	vldr	d7, [r3]
 8000cf0:	ed9f 6ba9 	vldr	d6, [pc, #676]	; 8000f98 <PID_Controller+0x2e0>
 8000cf4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000cf8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	ed83 7b08 	vstr	d7, [r3, #32]
	__HAL_TIM_SetCounter(&Wheel_->encoder_timer ,0);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
//		{
//			sssss[i] = Wheel_->rps;
//			i++;
//		}

	Wheel_->err = Wheel_->goal - Wheel_->rps;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	ed93 7b08 	vldr	d7, [r3, #32]
 8000d16:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	Wheel_->propotional = (double)Wheel_->err * Wheel_->Kp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	ed93 7b00 	vldr	d7, [r3]
 8000d2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	Wheel_->integral += (double)Wheel_->err * Wheel_->Ki * control_period;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	ed93 7b02 	vldr	d7, [r3, #8]
 8000d48:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000d4c:	4b94      	ldr	r3, [pc, #592]	; (8000fa0 <PID_Controller+0x2e8>)
 8000d4e:	ed93 7b00 	vldr	d7, [r3]
 8000d52:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d56:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	Wheel_->integral = (Wheel_->integral > limit_integral)? limit_integral : Wheel_->integral;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000d66:	4b8f      	ldr	r3, [pc, #572]	; (8000fa4 <PID_Controller+0x2ec>)
 8000d68:	ed93 7b00 	vldr	d7, [r3]
 8000d6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d74:	dd03      	ble.n	8000d7e <PID_Controller+0xc6>
 8000d76:	4b8b      	ldr	r3, [pc, #556]	; (8000fa4 <PID_Controller+0x2ec>)
 8000d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7c:	e002      	b.n	8000d84 <PID_Controller+0xcc>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8000d84:	6879      	ldr	r1, [r7, #4]
 8000d86:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	Wheel_->integral = (Wheel_->integral < (double)(-1) * limit_integral)? (double)(-1) * limit_integral : Wheel_->integral;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000d90:	4b84      	ldr	r3, [pc, #528]	; (8000fa4 <PID_Controller+0x2ec>)
 8000d92:	ed93 7b00 	vldr	d7, [r3]
 8000d96:	eeb1 7b47 	vneg.f64	d7, d7
 8000d9a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da2:	d505      	bpl.n	8000db0 <PID_Controller+0xf8>
 8000da4:	4b7f      	ldr	r3, [pc, #508]	; (8000fa4 <PID_Controller+0x2ec>)
 8000da6:	ed93 7b00 	vldr	d7, [r3]
 8000daa:	eeb1 7b47 	vneg.f64	d7, d7
 8000dae:	e002      	b.n	8000db6 <PID_Controller+0xfe>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	Wheel_->differential = (double) Wheel_->Kd * (-1) * (Wheel_->rps - Wheel_->rps_before) / control_period;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	ed93 7b04 	vldr	d7, [r3, #16]
 8000dc2:	eeb1 6b47 	vneg.f64	d6, d7
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	ed93 5b08 	vldr	d5, [r3, #32]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8000dd2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000dd6:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000dda:	4b71      	ldr	r3, [pc, #452]	; (8000fa0 <PID_Controller+0x2e8>)
 8000ddc:	ed93 6b00 	vldr	d6, [r3]
 8000de0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50


	Wheel_->duty = Wheel_->propotional + Wheel_->integral + Wheel_->differential;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000df6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8000e00:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	Wheel_->duty = (Wheel_->duty > 1)? 1 : Wheel_->duty;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000e10:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e14:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e1c:	dd03      	ble.n	8000e26 <PID_Controller+0x16e>
 8000e1e:	f04f 0200 	mov.w	r2, #0
 8000e22:	4b61      	ldr	r3, [pc, #388]	; (8000fa8 <PID_Controller+0x2f0>)
 8000e24:	e002      	b.n	8000e2c <PID_Controller+0x174>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000e2c:	6879      	ldr	r1, [r7, #4]
 8000e2e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	Wheel_->duty = (Wheel_->duty < -1)? -1 : Wheel_->duty;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000e38:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000e3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e44:	d503      	bpl.n	8000e4e <PID_Controller+0x196>
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	4b58      	ldr	r3, [pc, #352]	; (8000fac <PID_Controller+0x2f4>)
 8000e4c:	e002      	b.n	8000e54 <PID_Controller+0x19c>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		HAL_GPIO_WritePin(Wheel_->PHASE_pin_type, Wheel_->PHASE_pin_Num, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
	}
#endif
#ifdef G2_18V17
	if(Wheel_->duty >= 0)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000e60:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e68:	f2c0 80a4 	blt.w	8000fb4 <PID_Controller+0x2fc>
	{
		HAL_GPIO_WritePin(Wheel_->DIR_pin_type, Wheel_->DIR_pin_Num, GPIO_PIN_RESET);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000e76:	2200      	movs	r2, #0
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f007 fc89 	bl	8008790 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d112      	bne.n	8000eae <PID_Controller+0x1f6>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000e8e:	4b48      	ldr	r3, [pc, #288]	; (8000fb0 <PID_Controller+0x2f8>)
 8000e90:	ed93 7b00 	vldr	d7, [r3]
 8000e94:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e98:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000ea2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ea6:	ee17 2a90 	vmov	r2, s15
 8000eaa:	635a      	str	r2, [r3, #52]	; 0x34
 8000eac:	e115      	b.n	80010da <PID_Controller+0x422>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d112      	bne.n	8000ede <PID_Controller+0x226>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000ebe:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <PID_Controller+0x2f8>)
 8000ec0:	ed93 7b00 	vldr	d7, [r3]
 8000ec4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ec8:	eeb0 7bc7 	vabs.f64	d7, d7
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000ed2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ed6:	ee17 3a90 	vmov	r3, s15
 8000eda:	6393      	str	r3, [r2, #56]	; 0x38
 8000edc:	e0fd      	b.n	80010da <PID_Controller+0x422>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ee4:	2b08      	cmp	r3, #8
 8000ee6:	d112      	bne.n	8000f0e <PID_Controller+0x256>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000eee:	4b30      	ldr	r3, [pc, #192]	; (8000fb0 <PID_Controller+0x2f8>)
 8000ef0:	ed93 7b00 	vldr	d7, [r3]
 8000ef4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ef8:	eeb0 7bc7 	vabs.f64	d7, d7
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000f02:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f06:	ee17 3a90 	vmov	r3, s15
 8000f0a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000f0c:	e0e5      	b.n	80010da <PID_Controller+0x422>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f14:	2b0c      	cmp	r3, #12
 8000f16:	d112      	bne.n	8000f3e <PID_Controller+0x286>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f1e:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <PID_Controller+0x2f8>)
 8000f20:	ed93 7b00 	vldr	d7, [r3]
 8000f24:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f28:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000f32:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f36:	ee17 3a90 	vmov	r3, s15
 8000f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3c:	e0cd      	b.n	80010da <PID_Controller+0x422>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f44:	2b10      	cmp	r3, #16
 8000f46:	d112      	bne.n	8000f6e <PID_Controller+0x2b6>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <PID_Controller+0x2f8>)
 8000f50:	ed93 7b00 	vldr	d7, [r3]
 8000f54:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f58:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000f62:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f66:	ee17 3a90 	vmov	r3, s15
 8000f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f6c:	e0b5      	b.n	80010da <PID_Controller+0x422>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <PID_Controller+0x2f8>)
 8000f76:	ed93 7b00 	vldr	d7, [r3]
 8000f7a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f7e:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000f88:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f8c:	ee17 3a90 	vmov	r3, s15
 8000f90:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000f92:	e0a2      	b.n	80010da <PID_Controller+0x422>
 8000f94:	f3af 8000 	nop.w
 8000f98:	33333333 	.word	0x33333333
 8000f9c:	40ae6333 	.word	0x40ae6333
 8000fa0:	240000e8 	.word	0x240000e8
 8000fa4:	240000d8 	.word	0x240000d8
 8000fa8:	3ff00000 	.word	0x3ff00000
 8000fac:	bff00000 	.word	0xbff00000
 8000fb0:	240000e0 	.word	0x240000e0
	}
	else
	{
		HAL_GPIO_WritePin(Wheel_->DIR_pin_type, Wheel_->DIR_pin_Num, GPIO_PIN_SET);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f007 fbe5 	bl	8008790 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d112      	bne.n	8000ff6 <PID_Controller+0x33e>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000fd6:	4b46      	ldr	r3, [pc, #280]	; (80010f0 <PID_Controller+0x438>)
 8000fd8:	ed93 7b00 	vldr	d7, [r3]
 8000fdc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000fe0:	eeb0 7bc7 	vabs.f64	d7, d7
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000fea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fee:	ee17 2a90 	vmov	r2, s15
 8000ff2:	635a      	str	r2, [r3, #52]	; 0x34
 8000ff4:	e071      	b.n	80010da <PID_Controller+0x422>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ffc:	2b04      	cmp	r3, #4
 8000ffe:	d112      	bne.n	8001026 <PID_Controller+0x36e>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8001006:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <PID_Controller+0x438>)
 8001008:	ed93 7b00 	vldr	d7, [r3]
 800100c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001010:	eeb0 7bc7 	vabs.f64	d7, d7
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800101a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800101e:	ee17 3a90 	vmov	r3, s15
 8001022:	6393      	str	r3, [r2, #56]	; 0x38
 8001024:	e059      	b.n	80010da <PID_Controller+0x422>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800102c:	2b08      	cmp	r3, #8
 800102e:	d112      	bne.n	8001056 <PID_Controller+0x39e>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8001036:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <PID_Controller+0x438>)
 8001038:	ed93 7b00 	vldr	d7, [r3]
 800103c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001040:	eeb0 7bc7 	vabs.f64	d7, d7
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800104a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800104e:	ee17 3a90 	vmov	r3, s15
 8001052:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001054:	e041      	b.n	80010da <PID_Controller+0x422>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800105c:	2b0c      	cmp	r3, #12
 800105e:	d112      	bne.n	8001086 <PID_Controller+0x3ce>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8001066:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <PID_Controller+0x438>)
 8001068:	ed93 7b00 	vldr	d7, [r3]
 800106c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001070:	eeb0 7bc7 	vabs.f64	d7, d7
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800107a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800107e:	ee17 3a90 	vmov	r3, s15
 8001082:	6413      	str	r3, [r2, #64]	; 0x40
 8001084:	e029      	b.n	80010da <PID_Controller+0x422>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800108c:	2b10      	cmp	r3, #16
 800108e:	d112      	bne.n	80010b6 <PID_Controller+0x3fe>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <PID_Controller+0x438>)
 8001098:	ed93 7b00 	vldr	d7, [r3]
 800109c:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010a0:	eeb0 7bc7 	vabs.f64	d7, d7
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80010aa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010ae:	ee17 3a90 	vmov	r3, s15
 80010b2:	6593      	str	r3, [r2, #88]	; 0x58
 80010b4:	e011      	b.n	80010da <PID_Controller+0x422>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <PID_Controller+0x438>)
 80010be:	ed93 7b00 	vldr	d7, [r3]
 80010c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010c6:	eeb0 7bc7 	vabs.f64	d7, d7
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80010d0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010d4:	ee17 3a90 	vmov	r3, s15
 80010d8:	65d3      	str	r3, [r2, #92]	; 0x5c
	}
#endif

	Wheel_->rps_before = Wheel_->rps;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	240000e0 	.word	0x240000e0
 80010f4:	00000000 	.word	0x00000000

080010f8 <Forward_Kinematics>:
 *       /     \        y(+) ←---
 *      B-------C
 * @ retval None
 * */
void Forward_Kinematics(double x, double y, double w)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b08f      	sub	sp, #60	; 0x3c
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	ed87 0b04 	vstr	d0, [r7, #16]
 8001102:	ed87 1b02 	vstr	d1, [r7, #8]
 8001106:	ed87 2b00 	vstr	d2, [r7]
	double omega_a = (y + w * chassis_radius * radius_error_chassis)/(wheel_radius * radius_error_a);
 800110a:	ed97 7b00 	vldr	d7, [r7]
 800110e:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8001230 <Forward_Kinematics+0x138>
 8001112:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001116:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <Forward_Kinematics+0x150>)
 8001118:	ed93 7b00 	vldr	d7, [r3]
 800111c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001120:	ed97 7b02 	vldr	d7, [r7, #8]
 8001124:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001128:	4b48      	ldr	r3, [pc, #288]	; (800124c <Forward_Kinematics+0x154>)
 800112a:	ed93 7b00 	vldr	d7, [r3]
 800112e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8001238 <Forward_Kinematics+0x140>
 8001132:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001136:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800113a:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	double omega_b = (-x + w * chassis_radius * radius_error_chassis)/(wheel_radius * radius_error_b);
 800113e:	ed97 7b00 	vldr	d7, [r7]
 8001142:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8001230 <Forward_Kinematics+0x138>
 8001146:	ee27 6b06 	vmul.f64	d6, d7, d6
 800114a:	4b3f      	ldr	r3, [pc, #252]	; (8001248 <Forward_Kinematics+0x150>)
 800114c:	ed93 7b00 	vldr	d7, [r3]
 8001150:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001154:	ed97 7b04 	vldr	d7, [r7, #16]
 8001158:	ee36 5b47 	vsub.f64	d5, d6, d7
 800115c:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <Forward_Kinematics+0x158>)
 800115e:	ed93 7b00 	vldr	d7, [r3]
 8001162:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8001238 <Forward_Kinematics+0x140>
 8001166:	ee27 6b06 	vmul.f64	d6, d7, d6
 800116a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800116e:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	double omega_c = (-y + w * chassis_radius * radius_error_chassis)/(wheel_radius * radius_error_c);
 8001172:	ed97 7b00 	vldr	d7, [r7]
 8001176:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8001230 <Forward_Kinematics+0x138>
 800117a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800117e:	4b32      	ldr	r3, [pc, #200]	; (8001248 <Forward_Kinematics+0x150>)
 8001180:	ed93 7b00 	vldr	d7, [r3]
 8001184:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001188:	ed97 7b02 	vldr	d7, [r7, #8]
 800118c:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001190:	4b30      	ldr	r3, [pc, #192]	; (8001254 <Forward_Kinematics+0x15c>)
 8001192:	ed93 7b00 	vldr	d7, [r3]
 8001196:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8001238 <Forward_Kinematics+0x140>
 800119a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800119e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011a2:	ed87 7b08 	vstr	d7, [r7, #32]
	double omega_d = (x + w * chassis_radius * radius_error_chassis)/(wheel_radius * radius_error_d);
 80011a6:	ed97 7b00 	vldr	d7, [r7]
 80011aa:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001230 <Forward_Kinematics+0x138>
 80011ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011b2:	4b25      	ldr	r3, [pc, #148]	; (8001248 <Forward_Kinematics+0x150>)
 80011b4:	ed93 7b00 	vldr	d7, [r3]
 80011b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011bc:	ed97 7b04 	vldr	d7, [r7, #16]
 80011c0:	ee36 5b07 	vadd.f64	d5, d6, d7
 80011c4:	4b24      	ldr	r3, [pc, #144]	; (8001258 <Forward_Kinematics+0x160>)
 80011c6:	ed93 7b00 	vldr	d7, [r3]
 80011ca:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8001238 <Forward_Kinematics+0x140>
 80011ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011d6:	ed87 7b06 	vstr	d7, [r7, #24]

	WheelA.goal = omega_a / (2 * M_PI);
 80011da:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 80011de:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8001240 <Forward_Kinematics+0x148>
 80011e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <Forward_Kinematics+0x164>)
 80011e8:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	WheelB.goal = omega_b / (2 * M_PI);
 80011ec:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80011f0:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8001240 <Forward_Kinematics+0x148>
 80011f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <Forward_Kinematics+0x168>)
 80011fa:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	WheelC.goal = omega_c / (2 * M_PI);
 80011fe:	ed97 6b08 	vldr	d6, [r7, #32]
 8001202:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8001240 <Forward_Kinematics+0x148>
 8001206:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <Forward_Kinematics+0x16c>)
 800120c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	WheelD.goal = omega_d / (2 * M_PI);
 8001210:	ed97 6b06 	vldr	d6, [r7, #24]
 8001214:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8001240 <Forward_Kinematics+0x148>
 8001218:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <Forward_Kinematics+0x170>)
 800121e:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
}
 8001222:	bf00      	nop
 8001224:	373c      	adds	r7, #60	; 0x3c
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	33333333 	.word	0x33333333
 8001234:	3fd33333 	.word	0x3fd33333
 8001238:	6c8b4396 	.word	0x6c8b4396
 800123c:	3fa9fbe7 	.word	0x3fa9fbe7
 8001240:	54442d18 	.word	0x54442d18
 8001244:	401921fb 	.word	0x401921fb
 8001248:	240000b8 	.word	0x240000b8
 800124c:	24000098 	.word	0x24000098
 8001250:	240000a0 	.word	0x240000a0
 8001254:	240000a8 	.word	0x240000a8
 8001258:	240000b0 	.word	0x240000b0
 800125c:	240000f0 	.word	0x240000f0
 8001260:	24000200 	.word	0x24000200
 8001264:	24000310 	.word	0x24000310
 8001268:	24000420 	.word	0x24000420

0800126c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_DMA_Init+0x4c>)
 8001274:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001278:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <MX_DMA_Init+0x4c>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <MX_DMA_Init+0x4c>)
 8001284:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	200b      	movs	r0, #11
 8001296:	f003 ff9e 	bl	80051d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800129a:	200b      	movs	r0, #11
 800129c:	f003 ffb5 	bl	800520a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	200c      	movs	r0, #12
 80012a6:	f003 ff96 	bl	80051d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012aa:	200c      	movs	r0, #12
 80012ac:	f003 ffad 	bl	800520a <HAL_NVIC_EnableIRQ>

}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	58024400 	.word	0x58024400

080012bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08c      	sub	sp, #48	; 0x30
 80012c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012d2:	4b58      	ldr	r3, [pc, #352]	; (8001434 <MX_GPIO_Init+0x178>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d8:	4a56      	ldr	r2, [pc, #344]	; (8001434 <MX_GPIO_Init+0x178>)
 80012da:	f043 0310 	orr.w	r3, r3, #16
 80012de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e2:	4b54      	ldr	r3, [pc, #336]	; (8001434 <MX_GPIO_Init+0x178>)
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	61bb      	str	r3, [r7, #24]
 80012ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f0:	4b50      	ldr	r3, [pc, #320]	; (8001434 <MX_GPIO_Init+0x178>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f6:	4a4f      	ldr	r2, [pc, #316]	; (8001434 <MX_GPIO_Init+0x178>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001300:	4b4c      	ldr	r3, [pc, #304]	; (8001434 <MX_GPIO_Init+0x178>)
 8001302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130e:	4b49      	ldr	r3, [pc, #292]	; (8001434 <MX_GPIO_Init+0x178>)
 8001310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001314:	4a47      	ldr	r2, [pc, #284]	; (8001434 <MX_GPIO_Init+0x178>)
 8001316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800131a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800131e:	4b45      	ldr	r3, [pc, #276]	; (8001434 <MX_GPIO_Init+0x178>)
 8001320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132c:	4b41      	ldr	r3, [pc, #260]	; (8001434 <MX_GPIO_Init+0x178>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001332:	4a40      	ldr	r2, [pc, #256]	; (8001434 <MX_GPIO_Init+0x178>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800133c:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <MX_GPIO_Init+0x178>)
 800133e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	4b3a      	ldr	r3, [pc, #232]	; (8001434 <MX_GPIO_Init+0x178>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001350:	4a38      	ldr	r2, [pc, #224]	; (8001434 <MX_GPIO_Init+0x178>)
 8001352:	f043 0302 	orr.w	r3, r3, #2
 8001356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800135a:	4b36      	ldr	r3, [pc, #216]	; (8001434 <MX_GPIO_Init+0x178>)
 800135c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001368:	4b32      	ldr	r3, [pc, #200]	; (8001434 <MX_GPIO_Init+0x178>)
 800136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136e:	4a31      	ldr	r2, [pc, #196]	; (8001434 <MX_GPIO_Init+0x178>)
 8001370:	f043 0308 	orr.w	r3, r3, #8
 8001374:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001378:	4b2e      	ldr	r3, [pc, #184]	; (8001434 <MX_GPIO_Init+0x178>)
 800137a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2108      	movs	r1, #8
 800138a:	482b      	ldr	r0, [pc, #172]	; (8001438 <MX_GPIO_Init+0x17c>)
 800138c:	f007 fa00 	bl	8008790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001396:	4829      	ldr	r0, [pc, #164]	; (800143c <MX_GPIO_Init+0x180>)
 8001398:	f007 f9fa 	bl	8008790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a2:	4827      	ldr	r0, [pc, #156]	; (8001440 <MX_GPIO_Init+0x184>)
 80013a4:	f007 f9f4 	bl	8008790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ae:	4825      	ldr	r0, [pc, #148]	; (8001444 <MX_GPIO_Init+0x188>)
 80013b0:	f007 f9ee 	bl	8008790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013b4:	2308      	movs	r3, #8
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	481b      	ldr	r0, [pc, #108]	; (8001438 <MX_GPIO_Init+0x17c>)
 80013cc:	f006 ff36 	bl	800823c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	4814      	ldr	r0, [pc, #80]	; (800143c <MX_GPIO_Init+0x180>)
 80013ea:	f006 ff27 	bl	800823c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4619      	mov	r1, r3
 8001406:	480e      	ldr	r0, [pc, #56]	; (8001440 <MX_GPIO_Init+0x184>)
 8001408:	f006 ff18 	bl	800823c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800140c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	2301      	movs	r3, #1
 8001414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800141e:	f107 031c 	add.w	r3, r7, #28
 8001422:	4619      	mov	r1, r3
 8001424:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_GPIO_Init+0x188>)
 8001426:	f006 ff09 	bl	800823c <HAL_GPIO_Init>

}
 800142a:	bf00      	nop
 800142c:	3730      	adds	r7, #48	; 0x30
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	58024400 	.word	0x58024400
 8001438:	58021000 	.word	0x58021000
 800143c:	58020800 	.word	0x58020800
 8001440:	58020400 	.word	0x58020400
 8001444:	58020c00 	.word	0x58020c00

08001448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144c:	f003 fd32 	bl	8004eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001450:	f000 f81e 	bl	8001490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001454:	f7ff ff32 	bl	80012bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001458:	f7ff ff08 	bl	800126c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800145c:	f003 fbae 	bl	8004bbc <MX_USART1_UART_Init>
  MX_TIM12_Init();
 8001460:	f003 f892 	bl	8004588 <MX_TIM12_Init>
  MX_TIM15_Init();
 8001464:	f003 f8f6 	bl	8004654 <MX_TIM15_Init>
  MX_TIM2_Init();
 8001468:	f002 ff38 	bl	80042dc <MX_TIM2_Init>
  MX_TIM3_Init();
 800146c:	f002 ff8a 	bl	8004384 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001470:	f002 ffde 	bl	8004430 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001474:	f003 f832 	bl	80044dc <MX_TIM5_Init>
  MX_TIM23_Init();
 8001478:	f003 f97e 	bl	8004778 <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&Encoder_Interrupt_timer);
 800147c:	4803      	ldr	r0, [pc, #12]	; (800148c <main+0x44>)
 800147e:	f009 ff5b 	bl	800b338 <HAL_TIM_Base_Start_IT>
  Control_Init();
 8001482:	f7ff f8fd 	bl	8000680 <Control_Init>
  Rosserial_Init();
 8001486:	f001 fef7 	bl	8003278 <Rosserial_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800148a:	e7fe      	b.n	800148a <main+0x42>
 800148c:	240018a4 	.word	0x240018a4

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b09c      	sub	sp, #112	; 0x70
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149a:	224c      	movs	r2, #76	; 0x4c
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f00d fd16 	bl	800eed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2220      	movs	r2, #32
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f00d fd10 	bl	800eed0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014b0:	2002      	movs	r0, #2
 80014b2:	f007 f987 	bl	80087c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b6:	2300      	movs	r3, #0
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <SystemClock_Config+0xd8>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	4a2a      	ldr	r2, [pc, #168]	; (8001568 <SystemClock_Config+0xd8>)
 80014c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014c4:	6193      	str	r3, [r2, #24]
 80014c6:	4b28      	ldr	r3, [pc, #160]	; (8001568 <SystemClock_Config+0xd8>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014d2:	bf00      	nop
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <SystemClock_Config+0xd8>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014e0:	d1f8      	bne.n	80014d4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e2:	2301      	movs	r3, #1
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ec:	2302      	movs	r3, #2
 80014ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f0:	2302      	movs	r3, #2
 80014f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014f4:	2304      	movs	r3, #4
 80014f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014f8:	23a8      	movs	r3, #168	; 0xa8
 80014fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80014fc:	2301      	movs	r3, #1
 80014fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001500:	2304      	movs	r3, #4
 8001502:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001504:	2302      	movs	r3, #2
 8001506:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001508:	2304      	movs	r3, #4
 800150a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800150c:	2300      	movs	r3, #0
 800150e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	4618      	mov	r0, r3
 800151a:	f007 f98d 	bl	8008838 <HAL_RCC_OscConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001524:	f000 f8ac 	bl	8001680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001528:	233f      	movs	r3, #63	; 0x3f
 800152a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152c:	2303      	movs	r3, #3
 800152e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001534:	2308      	movs	r3, #8
 8001536:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001538:	2340      	movs	r3, #64	; 0x40
 800153a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800153c:	2340      	movs	r3, #64	; 0x40
 800153e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001544:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001546:	2340      	movs	r3, #64	; 0x40
 8001548:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2102      	movs	r1, #2
 800154e:	4618      	mov	r0, r3
 8001550:	f007 fd4c 	bl	8008fec <HAL_RCC_ClockConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800155a:	f000 f891 	bl	8001680 <Error_Handler>
  }
}
 800155e:	bf00      	nop
 8001560:	3770      	adds	r7, #112	; 0x70
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	58024800 	.word	0x58024800

0800156c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	if(htim->Instance == Encoder_Interrupt_timer.Instance)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d13b      	bne.n	80015f8 <HAL_TIM_PeriodElapsedCallback+0x8c>
//		WheelA.goal = 0.0;
//		WheelB.goal = 0.0;
//		WheelC.goal = 0.0;
//		WheelD.goal = 0.0;

		Rosserial_Spin();
 8001580:	f001 fe8a 	bl	8003298 <Rosserial_Spin>
		if (Rosserial_Checkconfigstate() == false)
 8001584:	f001 fe92 	bl	80032ac <Rosserial_Checkconfigstate>
 8001588:	4603      	mov	r3, r0
 800158a:	f083 0301 	eor.w	r3, r3, #1
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d014      	beq.n	80015be <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			linearvelocity_x = 0.0;
 8001594:	491b      	ldr	r1, [pc, #108]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	e9c1 2300 	strd	r2, r3, [r1]
			linearvelocity_y = 0.0;
 80015a2:	4919      	ldr	r1, [pc, #100]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	e9c1 2300 	strd	r2, r3, [r1]
			angularvelocity = 0.0;
 80015b0:	4916      	ldr	r1, [pc, #88]	; (800160c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	e9c1 2300 	strd	r2, r3, [r1]
		}
		Forward_Kinematics(linearvelocity_x, linearvelocity_y, angularvelocity);
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015c0:	ed93 7b00 	vldr	d7, [r3]
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80015c6:	ed93 6b00 	vldr	d6, [r3]
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015cc:	ed93 5b00 	vldr	d5, [r3]
 80015d0:	eeb0 2b45 	vmov.f64	d2, d5
 80015d4:	eeb0 1b46 	vmov.f64	d1, d6
 80015d8:	eeb0 0b47 	vmov.f64	d0, d7
 80015dc:	f7ff fd8c 	bl	80010f8 <Forward_Kinematics>
		PID_Controller(&WheelA);
 80015e0:	480b      	ldr	r0, [pc, #44]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80015e2:	f7ff fb69 	bl	8000cb8 <PID_Controller>
		PID_Controller(&WheelB);
 80015e6:	480b      	ldr	r0, [pc, #44]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80015e8:	f7ff fb66 	bl	8000cb8 <PID_Controller>
		PID_Controller(&WheelC);
 80015ec:	480a      	ldr	r0, [pc, #40]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80015ee:	f7ff fb63 	bl	8000cb8 <PID_Controller>
		PID_Controller(&WheelD);
 80015f2:	480a      	ldr	r0, [pc, #40]	; (800161c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80015f4:	f7ff fb60 	bl	8000cb8 <PID_Controller>
	}
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	240018a4 	.word	0x240018a4
 8001604:	240000c0 	.word	0x240000c0
 8001608:	240000c8 	.word	0x240000c8
 800160c:	240000d0 	.word	0x240000d0
 8001610:	240000f0 	.word	0x240000f0
 8001614:	24000200 	.word	0x24000200
 8001618:	24000310 	.word	0x24000310
 800161c:	24000420 	.word	0x24000420

08001620 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a11      	ldr	r2, [pc, #68]	; (8001670 <HAL_UART_ErrorCallback+0x50>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d11b      	bne.n	8001668 <HAL_UART_ErrorCallback+0x48>
	{
		linearvelocity_x = 0;
 8001630:	4910      	ldr	r1, [pc, #64]	; (8001674 <HAL_UART_ErrorCallback+0x54>)
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	e9c1 2300 	strd	r2, r3, [r1]
		linearvelocity_y = 0;
 800163e:	490e      	ldr	r1, [pc, #56]	; (8001678 <HAL_UART_ErrorCallback+0x58>)
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	e9c1 2300 	strd	r2, r3, [r1]
		angularvelocity = 0;
 800164c:	490b      	ldr	r1, [pc, #44]	; (800167c <HAL_UART_ErrorCallback+0x5c>)
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_UART_DeInit(&huart1);
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <HAL_UART_ErrorCallback+0x50>)
 800165c:	f00b fad8 	bl	800cc10 <HAL_UART_DeInit>
		MX_USART1_UART_Init();
 8001660:	f003 faac 	bl	8004bbc <MX_USART1_UART_Init>
		Rosserial_GetHardware();
 8001664:	f001 fe2c 	bl	80032c0 <Rosserial_GetHardware>
	}
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	240018f0 	.word	0x240018f0
 8001674:	240000c0 	.word	0x240000c0
 8001678:	240000c8 	.word	0x240000c8
 800167c:	240000d0 	.word	0x240000d0

08001680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001684:	b672      	cpsid	i
}
 8001686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001688:	e7fe      	b.n	8001688 <Error_Handler+0x8>

0800168a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <_ZN3ros3MsgC1Ev+0x1c>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	0800f498 	.word	0x0800f498

080016cc <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
      data()
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ffe8 	bl	80016ac <_ZN3ros3MsgC1Ev>
 80016dc:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3304      	adds	r3, #4
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ffcf 	bl	800168a <_ZN3ros4TimeC1Ev>
    {
    }
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	0800f480 	.word	0x0800f480

080016fc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6859      	ldr	r1, [r3, #4]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	4413      	add	r3, r2
 8001714:	b2ca      	uxtb	r2, r1
 8001716:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	0a19      	lsrs	r1, r3, #8
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3301      	adds	r3, #1
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	4413      	add	r3, r2
 8001726:	b2ca      	uxtb	r2, r1
 8001728:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	0c19      	lsrs	r1, r3, #16
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3302      	adds	r3, #2
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	4413      	add	r3, r2
 8001738:	b2ca      	uxtb	r2, r1
 800173a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	0e19      	lsrs	r1, r3, #24
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	3303      	adds	r3, #3
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	4413      	add	r3, r2
 800174a:	b2ca      	uxtb	r2, r1
 800174c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3304      	adds	r3, #4
 8001752:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6899      	ldr	r1, [r3, #8]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	4413      	add	r3, r2
 800175e:	b2ca      	uxtb	r2, r1
 8001760:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	0a19      	lsrs	r1, r3, #8
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	3301      	adds	r3, #1
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	4413      	add	r3, r2
 8001770:	b2ca      	uxtb	r2, r1
 8001772:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	0c19      	lsrs	r1, r3, #16
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3302      	adds	r3, #2
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	4413      	add	r3, r2
 8001782:	b2ca      	uxtb	r2, r1
 8001784:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	0e19      	lsrs	r1, r3, #24
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3303      	adds	r3, #3
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	4413      	add	r3, r2
 8001794:	b2ca      	uxtb	r2, r1
 8001796:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3304      	adds	r3, #4
 800179c:	60fb      	str	r3, [r7, #12]
      return offset;
 800179e:	68fb      	ldr	r3, [r7, #12]
    }
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	3301      	adds	r3, #1
 80017d0:	6839      	ldr	r1, [r7, #0]
 80017d2:	440b      	add	r3, r1
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	431a      	orrs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3302      	adds	r3, #2
 80017e6:	6839      	ldr	r1, [r7, #0]
 80017e8:	440b      	add	r3, r1
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	041b      	lsls	r3, r3, #16
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	3303      	adds	r3, #3
 80017fc:	6839      	ldr	r1, [r7, #0]
 80017fe:	440b      	add	r3, r1
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	061b      	lsls	r3, r3, #24
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3304      	adds	r3, #4
 800180e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	4413      	add	r3, r2
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	3301      	adds	r3, #1
 8001826:	6839      	ldr	r1, [r7, #0]
 8001828:	440b      	add	r3, r1
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3302      	adds	r3, #2
 800183c:	6839      	ldr	r1, [r7, #0]
 800183e:	440b      	add	r3, r1
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	041b      	lsls	r3, r3, #16
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3303      	adds	r3, #3
 8001852:	6839      	ldr	r1, [r7, #0]
 8001854:	440b      	add	r3, r1
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	061b      	lsls	r3, r3, #24
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3304      	adds	r3, #4
 8001864:	60fb      	str	r3, [r7, #12]
     return offset;
 8001866:	68fb      	ldr	r3, [r7, #12]
    }
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	0800f1fc 	.word	0x0800f1fc

08001890 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	0800f20c 	.word	0x0800f20c

080018ac <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fef8 	bl	80016ac <_ZN3ros3MsgC1Ev>
 80018bc:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	809a      	strh	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a06      	ldr	r2, [pc, #24]	; (80018f0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80018d8:	611a      	str	r2, [r3, #16]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	615a      	str	r2, [r3, #20]
    {
    }
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	0800f468 	.word	0x0800f468
 80018f0:	0800f230 	.word	0x0800f230

080018f4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	8899      	ldrh	r1, [r3, #4]
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	4413      	add	r3, r2
 800190c:	b2ca      	uxtb	r2, r1
 800190e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	889b      	ldrh	r3, [r3, #4]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	b299      	uxth	r1, r3
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	3301      	adds	r3, #1
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	4413      	add	r3, r2
 8001920:	b2ca      	uxtb	r2, r1
 8001922:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	3302      	adds	r3, #2
 8001928:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fcee 	bl	8000310 <strlen>
 8001934:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	4413      	add	r3, r2
 800193c:	69b9      	ldr	r1, [r7, #24]
 800193e:	4618      	mov	r0, r3
 8001940:	f001 fccc 	bl	80032dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	3304      	adds	r3, #4
 8001948:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	18d0      	adds	r0, r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4619      	mov	r1, r3
 8001958:	f00d faac 	bl	800eeb4 <memcpy>
      offset += length_topic_name;
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	4413      	add	r3, r2
 8001962:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fcd1 	bl	8000310 <strlen>
 800196e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	4413      	add	r3, r2
 8001976:	6979      	ldr	r1, [r7, #20]
 8001978:	4618      	mov	r0, r3
 800197a:	f001 fcaf 	bl	80032dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	18d0      	adds	r0, r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4619      	mov	r1, r3
 8001992:	f00d fa8f 	bl	800eeb4 <memcpy>
      offset += length_message_type;
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	4413      	add	r3, r2
 800199c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fcb4 	bl	8000310 <strlen>
 80019a8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	6939      	ldr	r1, [r7, #16]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f001 fc92 	bl	80032dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	3304      	adds	r3, #4
 80019bc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	18d0      	adds	r0, r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4619      	mov	r1, r3
 80019cc:	f00d fa72 	bl	800eeb4 <memcpy>
      offset += length_md5sum;
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4413      	add	r3, r2
 80019d6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80019de:	68f9      	ldr	r1, [r7, #12]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	b2ca      	uxtb	r2, r1
 80019e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	0a19      	lsrs	r1, r3, #8
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3301      	adds	r3, #1
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	4413      	add	r3, r2
 80019f6:	b2ca      	uxtb	r2, r1
 80019f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	0c19      	lsrs	r1, r3, #16
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3302      	adds	r3, #2
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	4413      	add	r3, r2
 8001a06:	b2ca      	uxtb	r2, r1
 8001a08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	0e19      	lsrs	r1, r3, #24
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3303      	adds	r3, #3
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	4413      	add	r3, r2
 8001a16:	b2ca      	uxtb	r2, r1
 8001a18:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	61fb      	str	r3, [r7, #28]
      return offset;
 8001a20:	69fb      	ldr	r3, [r7, #28]
    }
 8001a22:	4618      	mov	r0, r3
 8001a24:	3720      	adds	r7, #32
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b08a      	sub	sp, #40	; 0x28
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	889b      	ldrh	r3, [r3, #4]
 8001a4a:	b21a      	sxth	r2, r3
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	6839      	ldr	r1, [r7, #0]
 8001a52:	440b      	add	r3, r1
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	3302      	adds	r3, #2
 8001a68:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	441a      	add	r2, r3
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f001 fc4e 	bl	8003318 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	3304      	adds	r3, #4
 8001a80:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d20c      	bcs.n	8001aac <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	441a      	add	r2, r3
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	6839      	ldr	r1, [r7, #0]
 8001a9e:	440b      	add	r3, r1
 8001aa0:	7812      	ldrb	r2, [r2, #0]
 8001aa2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aaa:	e7ec      	b.n	8001a86 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	441a      	add	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	4413      	add	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	441a      	add	r2, r3
 8001ad6:	f107 0310 	add.w	r3, r7, #16
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f001 fc1b 	bl	8003318 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	623b      	str	r3, [r7, #32]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4413      	add	r3, r2
 8001af2:	6a3a      	ldr	r2, [r7, #32]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d20c      	bcs.n	8001b12 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	441a      	add	r2, r3
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	6839      	ldr	r1, [r7, #0]
 8001b04:	440b      	add	r3, r1
 8001b06:	7812      	ldrb	r2, [r2, #0]
 8001b08:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	623b      	str	r3, [r7, #32]
 8001b10:	e7ec      	b.n	8001aec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4413      	add	r3, r2
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	441a      	add	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4413      	add	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	441a      	add	r2, r3
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	4611      	mov	r1, r2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f001 fbe8 	bl	8003318 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d20c      	bcs.n	8001b78 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	441a      	add	r2, r3
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	6839      	ldr	r1, [r7, #0]
 8001b6a:	440b      	add	r3, r1
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	3301      	adds	r3, #1
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	e7ec      	b.n	8001b52 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	441a      	add	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4413      	add	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	6839      	ldr	r1, [r7, #0]
 8001ba6:	440a      	add	r2, r1
 8001ba8:	7812      	ldrb	r2, [r2, #0]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	6839      	ldr	r1, [r7, #0]
 8001bb6:	440b      	add	r3, r1
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	6839      	ldr	r1, [r7, #0]
 8001bc8:	440b      	add	r3, r1
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	041b      	lsls	r3, r3, #16
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	3303      	adds	r3, #3
 8001bd8:	6839      	ldr	r1, [r7, #0]
 8001bda:	440b      	add	r3, r1
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	061b      	lsls	r3, r3, #24
 8001be0:	4313      	orrs	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	3304      	adds	r3, #4
 8001bee:	61bb      	str	r3, [r7, #24]
     return offset;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
    }
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	0800f234 	.word	0x0800f234

08001c18 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	0800f250 	.word	0x0800f250

08001c34 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fd34 	bl	80016ac <_ZN3ros3MsgC1Ev>
 8001c44:	4a06      	ldr	r2, [pc, #24]	; (8001c60 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	711a      	strb	r2, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001c54:	609a      	str	r2, [r3, #8]
    {
    }
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	0800f450 	.word	0x0800f450
 8001c64:	0800f230 	.word	0x0800f230

08001c68 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	7912      	ldrb	r2, [r2, #4]
 8001c80:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	3301      	adds	r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fb3f 	bl	8000310 <strlen>
 8001c92:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	4413      	add	r3, r2
 8001c9a:	68b9      	ldr	r1, [r7, #8]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f001 fb1d 	bl	80032dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	18d0      	adds	r0, r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f00d f8fd 	bl	800eeb4 <memcpy>
      offset += length_msg;
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
      return offset;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
    }
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	781a      	ldrb	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	441a      	add	r2, r3
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 fb0d 	bl	8003318 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	3304      	adds	r3, #4
 8001d02:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d20c      	bcs.n	8001d2e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	441a      	add	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	6839      	ldr	r1, [r7, #0]
 8001d20:	440b      	add	r3, r1
 8001d22:	7812      	ldrb	r2, [r2, #0]
 8001d24:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	e7ec      	b.n	8001d08 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	3b01      	subs	r3, #1
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	4413      	add	r3, r2
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	441a      	add	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4413      	add	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
     return offset;
 8001d52:	693b      	ldr	r3, [r7, #16]
    }
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	0800f274 	.word	0x0800f274

08001d78 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	0800f288 	.word	0x0800f288

08001d94 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fc84 	bl	80016ac <_ZN3ros3MsgC1Ev>
 8001da4:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	619a      	str	r2, [r3, #24]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	61da      	str	r2, [r3, #28]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	0800f438 	.word	0x0800f438

08001ddc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6859      	ldr	r1, [r3, #4]
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	b2ca      	uxtb	r2, r1
 8001df6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	0a19      	lsrs	r1, r3, #8
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	3301      	adds	r3, #1
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	4413      	add	r3, r2
 8001e06:	b2ca      	uxtb	r2, r1
 8001e08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	0c19      	lsrs	r1, r3, #16
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	3302      	adds	r3, #2
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	b2ca      	uxtb	r2, r1
 8001e1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	0e19      	lsrs	r1, r3, #24
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	3303      	adds	r3, #3
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	4413      	add	r3, r2
 8001e2a:	b2ca      	uxtb	r2, r1
 8001e2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	3304      	adds	r3, #4
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	6a3a      	ldr	r2, [r7, #32]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d22b      	bcs.n	8001e9a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001e50:	6939      	ldr	r1, [r7, #16]
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	b2ca      	uxtb	r2, r1
 8001e5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	0a19      	lsrs	r1, r3, #8
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	3301      	adds	r3, #1
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	b2ca      	uxtb	r2, r1
 8001e6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	0c19      	lsrs	r1, r3, #16
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	3302      	adds	r3, #2
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	b2ca      	uxtb	r2, r1
 8001e7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	0e19      	lsrs	r1, r3, #24
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	3303      	adds	r3, #3
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	b2ca      	uxtb	r2, r1
 8001e8a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	3304      	adds	r3, #4
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	3301      	adds	r3, #1
 8001e96:	623b      	str	r3, [r7, #32]
 8001e98:	e7ce      	b.n	8001e38 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6919      	ldr	r1, [r3, #16]
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b2ca      	uxtb	r2, r1
 8001ea6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	0a19      	lsrs	r1, r3, #8
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	b2ca      	uxtb	r2, r1
 8001eb8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	0c19      	lsrs	r1, r3, #16
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	b2ca      	uxtb	r2, r1
 8001eca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	0e19      	lsrs	r1, r3, #24
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	3303      	adds	r3, #3
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	b2ca      	uxtb	r2, r1
 8001edc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	69fa      	ldr	r2, [r7, #28]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d22b      	bcs.n	8001f4a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699a      	ldr	r2, [r3, #24]
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001f00:	68f9      	ldr	r1, [r7, #12]
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	b2ca      	uxtb	r2, r1
 8001f0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	0a19      	lsrs	r1, r3, #8
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	3301      	adds	r3, #1
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	b2ca      	uxtb	r2, r1
 8001f1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	0c19      	lsrs	r1, r3, #16
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	3302      	adds	r3, #2
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	b2ca      	uxtb	r2, r1
 8001f2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	0e19      	lsrs	r1, r3, #24
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	3303      	adds	r3, #3
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	b2ca      	uxtb	r2, r1
 8001f3a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	3304      	adds	r3, #4
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3301      	adds	r3, #1
 8001f46:	61fb      	str	r3, [r7, #28]
 8001f48:	e7ce      	b.n	8001ee8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69d9      	ldr	r1, [r3, #28]
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	b2ca      	uxtb	r2, r1
 8001f56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	0a19      	lsrs	r1, r3, #8
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	3301      	adds	r3, #1
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	4413      	add	r3, r2
 8001f66:	b2ca      	uxtb	r2, r1
 8001f68:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	0c19      	lsrs	r1, r3, #16
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	3302      	adds	r3, #2
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	b2ca      	uxtb	r2, r1
 8001f7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	0e19      	lsrs	r1, r3, #24
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	3303      	adds	r3, #3
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	4413      	add	r3, r2
 8001f8a:	b2ca      	uxtb	r2, r1
 8001f8c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	3304      	adds	r3, #4
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d228      	bcs.n	8001ff4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe f9ae 	bl	8000310 <strlen>
 8001fb4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	6979      	ldr	r1, [r7, #20]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f001 f98c 	bl	80032dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	18d0      	adds	r0, r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f00c ff68 	bl	800eeb4 <memcpy>
      offset += length_stringsi;
 8001fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	4413      	add	r3, r2
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	e7d1      	b.n	8001f98 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3728      	adds	r7, #40	; 0x28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b08e      	sub	sp, #56	; 0x38
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800200c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	4413      	add	r3, r2
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002018:	3301      	adds	r3, #1
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	4413      	add	r3, r2
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	021b      	lsls	r3, r3, #8
 8002022:	6a3a      	ldr	r2, [r7, #32]
 8002024:	4313      	orrs	r3, r2
 8002026:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202a:	3302      	adds	r3, #2
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	4413      	add	r3, r2
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	041b      	lsls	r3, r3, #16
 8002034:	6a3a      	ldr	r2, [r7, #32]
 8002036:	4313      	orrs	r3, r2
 8002038:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800203a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203c:	3303      	adds	r3, #3
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	4413      	add	r3, r2
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	061b      	lsls	r3, r3, #24
 8002046:	6a3a      	ldr	r2, [r7, #32]
 8002048:	4313      	orrs	r3, r2
 800204a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800204c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204e:	3304      	adds	r3, #4
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	6a3a      	ldr	r2, [r7, #32]
 8002058:	429a      	cmp	r2, r3
 800205a:	d90a      	bls.n	8002072 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4619      	mov	r1, r3
 8002066:	4610      	mov	r0, r2
 8002068:	f00c ff3a 	bl	800eee0 <realloc>
 800206c:	4602      	mov	r2, r0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a3a      	ldr	r2, [r7, #32]
 8002076:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002078:	2300      	movs	r3, #0
 800207a:	633b      	str	r3, [r7, #48]	; 0x30
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002082:	429a      	cmp	r2, r3
 8002084:	d236      	bcs.n	80020f4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800208e:	6839      	ldr	r1, [r7, #0]
 8002090:	440a      	add	r2, r1
 8002092:	7812      	ldrb	r2, [r2, #0]
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209c:	3301      	adds	r3, #1
 800209e:	6839      	ldr	r1, [r7, #0]
 80020a0:	440b      	add	r3, r1
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	021b      	lsls	r3, r3, #8
 80020a6:	4313      	orrs	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ae:	3302      	adds	r3, #2
 80020b0:	6839      	ldr	r1, [r7, #0]
 80020b2:	440b      	add	r3, r1
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	041b      	lsls	r3, r3, #16
 80020b8:	4313      	orrs	r3, r2
 80020ba:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c0:	3303      	adds	r3, #3
 80020c2:	6839      	ldr	r1, [r7, #0]
 80020c4:	440b      	add	r3, r1
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	061b      	lsls	r3, r3, #24
 80020ca:	4313      	orrs	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80020d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d6:	3304      	adds	r3, #4
 80020d8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	3208      	adds	r2, #8
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80020ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ee:	3301      	adds	r3, #1
 80020f0:	633b      	str	r3, [r7, #48]	; 0x30
 80020f2:	e7c3      	b.n	800207c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80020f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	4413      	add	r3, r2
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80020fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002100:	3301      	adds	r3, #1
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	4413      	add	r3, r2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	4313      	orrs	r3, r2
 800210e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002112:	3302      	adds	r3, #2
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	4413      	add	r3, r2
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	041b      	lsls	r3, r3, #16
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	4313      	orrs	r3, r2
 8002120:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002124:	3303      	adds	r3, #3
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	4413      	add	r3, r2
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	061b      	lsls	r3, r3, #24
 800212e:	69fa      	ldr	r2, [r7, #28]
 8002130:	4313      	orrs	r3, r2
 8002132:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002136:	3304      	adds	r3, #4
 8002138:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	429a      	cmp	r2, r3
 8002142:	d90a      	bls.n	800215a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699a      	ldr	r2, [r3, #24]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f00c fec6 	bl	800eee0 <realloc>
 8002154:	4602      	mov	r2, r0
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69fa      	ldr	r2, [r7, #28]
 800215e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002160:	2300      	movs	r3, #0
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800216a:	429a      	cmp	r2, r3
 800216c:	d236      	bcs.n	80021dc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002176:	6839      	ldr	r1, [r7, #0]
 8002178:	440a      	add	r2, r1
 800217a:	7812      	ldrb	r2, [r2, #0]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002184:	3301      	adds	r3, #1
 8002186:	6839      	ldr	r1, [r7, #0]
 8002188:	440b      	add	r3, r1
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002196:	3302      	adds	r3, #2
 8002198:	6839      	ldr	r1, [r7, #0]
 800219a:	440b      	add	r3, r1
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	041b      	lsls	r3, r3, #16
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a8:	3303      	adds	r3, #3
 80021aa:	6839      	ldr	r1, [r7, #0]
 80021ac:	440b      	add	r3, r1
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	061b      	lsls	r3, r3, #24
 80021b2:	4313      	orrs	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80021bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021be:	3304      	adds	r3, #4
 80021c0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699a      	ldr	r2, [r3, #24]
 80021c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	3214      	adds	r2, #20
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80021d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d6:	3301      	adds	r3, #1
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021da:	e7c3      	b.n	8002164 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80021dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	4413      	add	r3, r2
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80021e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e8:	3301      	adds	r3, #1
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	4413      	add	r3, r2
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80021f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fa:	3302      	adds	r3, #2
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	041b      	lsls	r3, r3, #16
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800220a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220c:	3303      	adds	r3, #3
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	4413      	add	r3, r2
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	061b      	lsls	r3, r3, #24
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800221c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221e:	3304      	adds	r3, #4
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	429a      	cmp	r2, r3
 800222a:	d90a      	bls.n	8002242 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4619      	mov	r1, r3
 8002236:	4610      	mov	r0, r2
 8002238:	f00c fe52 	bl	800eee0 <realloc>
 800223c:	4602      	mov	r2, r0
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002248:	2300      	movs	r3, #0
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002252:	429a      	cmp	r2, r3
 8002254:	d23f      	bcs.n	80022d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	441a      	add	r2, r3
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f001 f858 	bl	8003318 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226a:	3304      	adds	r3, #4
 800226c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800226e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
 8002272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227a:	429a      	cmp	r2, r3
 800227c:	d20c      	bcs.n	8002298 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	441a      	add	r2, r3
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	3b01      	subs	r3, #1
 8002288:	6839      	ldr	r1, [r7, #0]
 800228a:	440b      	add	r3, r1
 800228c:	7812      	ldrb	r2, [r2, #0]
 800228e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	3301      	adds	r3, #1
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
 8002296:	e7ec      	b.n	8002272 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4413      	add	r3, r2
 800229e:	3b01      	subs	r3, #1
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80022a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022aa:	3b01      	subs	r3, #1
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	441a      	add	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80022b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4413      	add	r3, r2
 80022ba:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	3220      	adds	r2, #32
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80022ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d0:	3301      	adds	r3, #1
 80022d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022d4:	e7ba      	b.n	800224c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80022d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80022d8:	4618      	mov	r0, r3
 80022da:	3738      	adds	r7, #56	; 0x38
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	0800f38c 	.word	0x0800f38c

080022fc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	0800f2ac 	.word	0x0800f2ac

08002318 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
  }
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a4b      	ldr	r2, [pc, #300]	; (8002470 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d077      	beq.n	8002438 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a48      	ldr	r2, [pc, #288]	; (8002474 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d06f      	beq.n	8002438 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a45      	ldr	r2, [pc, #276]	; (8002478 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d067      	beq.n	8002438 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a42      	ldr	r2, [pc, #264]	; (800247c <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d05f      	beq.n	8002438 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a3f      	ldr	r2, [pc, #252]	; (8002480 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d057      	beq.n	8002438 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a3c      	ldr	r2, [pc, #240]	; (8002484 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d04f      	beq.n	8002438 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a39      	ldr	r2, [pc, #228]	; (8002488 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d047      	beq.n	8002438 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a36      	ldr	r2, [pc, #216]	; (800248c <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d03f      	beq.n	8002438 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a33      	ldr	r2, [pc, #204]	; (8002490 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d037      	beq.n	8002438 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a30      	ldr	r2, [pc, #192]	; (8002494 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d02f      	beq.n	8002438 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a2d      	ldr	r2, [pc, #180]	; (8002498 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d027      	beq.n	8002438 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a2a      	ldr	r2, [pc, #168]	; (800249c <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d01f      	beq.n	8002438 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a27      	ldr	r2, [pc, #156]	; (80024a0 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d017      	beq.n	8002438 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a24      	ldr	r2, [pc, #144]	; (80024a4 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00f      	beq.n	8002438 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a21      	ldr	r2, [pc, #132]	; (80024a8 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d007      	beq.n	8002438 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1e      	ldr	r2, [pc, #120]	; (80024ac <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d10a      	bne.n	800244e <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800244c:	e009      	b.n	8002462 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800245e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40020010 	.word	0x40020010
 8002474:	40020028 	.word	0x40020028
 8002478:	40020040 	.word	0x40020040
 800247c:	40020058 	.word	0x40020058
 8002480:	40020070 	.word	0x40020070
 8002484:	40020088 	.word	0x40020088
 8002488:	400200a0 	.word	0x400200a0
 800248c:	400200b8 	.word	0x400200b8
 8002490:	40020410 	.word	0x40020410
 8002494:	40020428 	.word	0x40020428
 8002498:	40020440 	.word	0x40020440
 800249c:	40020458 	.word	0x40020458
 80024a0:	40020470 	.word	0x40020470
 80024a4:	40020488 	.word	0x40020488
 80024a8:	400204a0 	.word	0x400204a0
 80024ac:	400204b8 	.word	0x400204b8

080024b0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <_ZN13STM32HardwareC1Ev+0x34>)
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    }
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	240018f0 	.word	0x240018f0

080024e8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f804 	bl	80024fe <_ZN13STM32Hardware10reset_rbufEv>
    }
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
    	HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6858      	ldr	r0, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3308      	adds	r3, #8
 800250e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002512:	4619      	mov	r1, r3
 8002514:	f00a fc3c 	bl	800cd90 <HAL_UART_Receive_DMA>
    }
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002528:	f04f 33ff 	mov.w	r3, #4294967295
 800252c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f8d3 4408 	ldr.w	r4, [r3, #1032]	; 0x408
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff fefb 	bl	8002330 <_ZN13STM32Hardware10getRdmaIndEv>
 800253a:	4603      	mov	r3, r0
 800253c:	429c      	cmp	r4, r3
 800253e:	bf14      	ite	ne
 8002540:	2301      	movne	r3, #1
 8002542:	2300      	moveq	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d012      	beq.n	8002570 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002550:	1c59      	adds	r1, r3, #1
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	4413      	add	r3, r2
 800255c:	7a1b      	ldrb	r3, [r3, #8]
 800255e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002566:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
      }
      return c;
 8002570:	68fb      	ldr	r3, [r7, #12]
    }
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	bd90      	pop	{r4, r7, pc}
	...

0800257c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258c:	2b20      	cmp	r3, #32
 800258e:	d108      	bne.n	80025a2 <_ZN13STM32Hardware5flushEv+0x26>
 8002590:	4b28      	ldr	r3, [pc, #160]	; (8002634 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	f083 0301 	eor.w	r3, r3, #1
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <_ZN13STM32Hardware5flushEv+0x26>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <_ZN13STM32Hardware5flushEv+0x28>
 80025a2:	2300      	movs	r3, #0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d040      	beq.n	800262a <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80025a8:	4b22      	ldr	r3, [pc, #136]	; (8002634 <_ZN13STM32Hardware5flushEv+0xb8>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d032      	beq.n	8002624 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d20a      	bcs.n	80025e4 <_ZN13STM32Hardware5flushEv+0x68>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80025dc:	b29b      	uxth	r3, r3
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	e006      	b.n	80025f2 <_ZN13STM32Hardware5flushEv+0x76>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6858      	ldr	r0, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80025fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	3304      	adds	r3, #4
 8002608:	89fa      	ldrh	r2, [r7, #14]
 800260a:	4619      	mov	r1, r3
 800260c:	f00a fb40 	bl	800cc90 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 8002616:	89fb      	ldrh	r3, [r7, #14]
 8002618:	4413      	add	r3, r2
 800261a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
        }
        mutex = false;
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
      }
    }
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	24000534 	.word	0x24000534

08002638 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
      int n = length;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800264e:	bfa8      	it	ge
 8002650:	f44f 6380 	movge.w	r3, #1024	; 0x400
 8002654:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800265c:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	4293      	cmp	r3, r2
 8002664:	bf28      	it	cs
 8002666:	4613      	movcs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002670:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4413      	add	r3, r2
 8002678:	3304      	adds	r3, #4
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	4618      	mov	r0, r3
 8002680:	f00c fc18 	bl	800eeb4 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	4413      	add	r3, r2
 800268e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c

      if(n != n_tail){
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	429a      	cmp	r2, r3
 800269e:	d00b      	beq.n	80026b8 <_ZN13STM32Hardware5writeEPhi+0x80>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	18d1      	adds	r1, r2, r3
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	f00c fbfe 	bl	800eeb4 <memcpy>
      }

      flush();
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f7ff ff5f 	bl	800257c <_ZN13STM32Hardware5flushEv>
    }
 80026be:	bf00      	nop
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	f002 fc77 	bl	8004fc0 <HAL_GetTick>
 80026d2:	4603      	mov	r3, r0
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe ffe0 	bl	80016ac <_ZN3ros3MsgC1Ev>
 80026ec:	4a0e      	ldr	r2, [pc, #56]	; (8002728 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	0800f3f4 	.word	0x0800f3f4

0800272c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800272c:	b480      	push	{r7}
 800272e:	b08b      	sub	sp, #44	; 0x2c
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002740:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002744:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800274a:	6838      	ldr	r0, [r7, #0]
 800274c:	4401      	add	r1, r0
 800274e:	b2d3      	uxtb	r3, r2
 8002750:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002752:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	0a02      	lsrs	r2, r0, #8
 8002760:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002764:	0a0b      	lsrs	r3, r1, #8
 8002766:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002768:	3101      	adds	r1, #1
 800276a:	6838      	ldr	r0, [r7, #0]
 800276c:	4401      	add	r1, r0
 800276e:	b2d3      	uxtb	r3, r2
 8002770:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002772:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	0c02      	lsrs	r2, r0, #16
 8002780:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002784:	0c0b      	lsrs	r3, r1, #16
 8002786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002788:	3102      	adds	r1, #2
 800278a:	6838      	ldr	r0, [r7, #0]
 800278c:	4401      	add	r1, r0
 800278e:	b2d3      	uxtb	r3, r2
 8002790:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002792:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	0e02      	lsrs	r2, r0, #24
 80027a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80027a4:	0e0b      	lsrs	r3, r1, #24
 80027a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a8:	3103      	adds	r1, #3
 80027aa:	6838      	ldr	r0, [r7, #0]
 80027ac:	4401      	add	r1, r0
 80027ae:	b2d3      	uxtb	r3, r2
 80027b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80027b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	000a      	movs	r2, r1
 80027c0:	2300      	movs	r3, #0
 80027c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c4:	3104      	adds	r1, #4
 80027c6:	6838      	ldr	r0, [r7, #0]
 80027c8:	4401      	add	r1, r0
 80027ca:	b2d3      	uxtb	r3, r2
 80027cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80027ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	0a0a      	lsrs	r2, r1, #8
 80027dc:	2300      	movs	r3, #0
 80027de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e0:	3105      	adds	r1, #5
 80027e2:	6838      	ldr	r0, [r7, #0]
 80027e4:	4401      	add	r1, r0
 80027e6:	b2d3      	uxtb	r3, r2
 80027e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80027ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	0c0a      	lsrs	r2, r1, #16
 80027f8:	2300      	movs	r3, #0
 80027fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027fc:	3106      	adds	r1, #6
 80027fe:	6838      	ldr	r0, [r7, #0]
 8002800:	4401      	add	r1, r0
 8002802:	b2d3      	uxtb	r3, r2
 8002804:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002806:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	0e0a      	lsrs	r2, r1, #24
 8002814:	2300      	movs	r3, #0
 8002816:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002818:	3107      	adds	r1, #7
 800281a:	6838      	ldr	r0, [r7, #0]
 800281c:	4401      	add	r1, r0
 800281e:	b2d3      	uxtb	r3, r2
 8002820:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	3308      	adds	r3, #8
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800282e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002832:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002836:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002838:	6838      	ldr	r0, [r7, #0]
 800283a:	4401      	add	r1, r0
 800283c:	b2d3      	uxtb	r3, r2
 800283e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002840:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	0a02      	lsrs	r2, r0, #8
 800284e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002852:	0a0b      	lsrs	r3, r1, #8
 8002854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002856:	3101      	adds	r1, #1
 8002858:	6838      	ldr	r0, [r7, #0]
 800285a:	4401      	add	r1, r0
 800285c:	b2d3      	uxtb	r3, r2
 800285e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002860:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	0c02      	lsrs	r2, r0, #16
 800286e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002872:	0c0b      	lsrs	r3, r1, #16
 8002874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002876:	3102      	adds	r1, #2
 8002878:	6838      	ldr	r0, [r7, #0]
 800287a:	4401      	add	r1, r0
 800287c:	b2d3      	uxtb	r3, r2
 800287e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002880:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	0e02      	lsrs	r2, r0, #24
 800288e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002892:	0e0b      	lsrs	r3, r1, #24
 8002894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002896:	3103      	adds	r1, #3
 8002898:	6838      	ldr	r0, [r7, #0]
 800289a:	4401      	add	r1, r0
 800289c:	b2d3      	uxtb	r3, r2
 800289e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80028a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	000a      	movs	r2, r1
 80028ae:	2300      	movs	r3, #0
 80028b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b2:	3104      	adds	r1, #4
 80028b4:	6838      	ldr	r0, [r7, #0]
 80028b6:	4401      	add	r1, r0
 80028b8:	b2d3      	uxtb	r3, r2
 80028ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80028bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	0a0a      	lsrs	r2, r1, #8
 80028ca:	2300      	movs	r3, #0
 80028cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ce:	3105      	adds	r1, #5
 80028d0:	6838      	ldr	r0, [r7, #0]
 80028d2:	4401      	add	r1, r0
 80028d4:	b2d3      	uxtb	r3, r2
 80028d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80028d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	0c0a      	lsrs	r2, r1, #16
 80028e6:	2300      	movs	r3, #0
 80028e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ea:	3106      	adds	r1, #6
 80028ec:	6838      	ldr	r0, [r7, #0]
 80028ee:	4401      	add	r1, r0
 80028f0:	b2d3      	uxtb	r3, r2
 80028f2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80028f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	0e0a      	lsrs	r2, r1, #24
 8002902:	2300      	movs	r3, #0
 8002904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002906:	3107      	adds	r1, #7
 8002908:	6838      	ldr	r0, [r7, #0]
 800290a:	4401      	add	r1, r0
 800290c:	b2d3      	uxtb	r3, r2
 800290e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	3308      	adds	r3, #8
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800291c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002924:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002926:	6838      	ldr	r0, [r7, #0]
 8002928:	4401      	add	r1, r0
 800292a:	b2d3      	uxtb	r3, r2
 800292c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800292e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	0a02      	lsrs	r2, r0, #8
 800293c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002940:	0a0b      	lsrs	r3, r1, #8
 8002942:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002944:	3101      	adds	r1, #1
 8002946:	6838      	ldr	r0, [r7, #0]
 8002948:	4401      	add	r1, r0
 800294a:	b2d3      	uxtb	r3, r2
 800294c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800294e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	0c02      	lsrs	r2, r0, #16
 800295c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002960:	0c0b      	lsrs	r3, r1, #16
 8002962:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002964:	3102      	adds	r1, #2
 8002966:	6838      	ldr	r0, [r7, #0]
 8002968:	4401      	add	r1, r0
 800296a:	b2d3      	uxtb	r3, r2
 800296c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800296e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	f04f 0300 	mov.w	r3, #0
 800297a:	0e02      	lsrs	r2, r0, #24
 800297c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002980:	0e0b      	lsrs	r3, r1, #24
 8002982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002984:	3103      	adds	r1, #3
 8002986:	6838      	ldr	r0, [r7, #0]
 8002988:	4401      	add	r1, r0
 800298a:	b2d3      	uxtb	r3, r2
 800298c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800298e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	000a      	movs	r2, r1
 800299c:	2300      	movs	r3, #0
 800299e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029a0:	3104      	adds	r1, #4
 80029a2:	6838      	ldr	r0, [r7, #0]
 80029a4:	4401      	add	r1, r0
 80029a6:	b2d3      	uxtb	r3, r2
 80029a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80029aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	0a0a      	lsrs	r2, r1, #8
 80029b8:	2300      	movs	r3, #0
 80029ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029bc:	3105      	adds	r1, #5
 80029be:	6838      	ldr	r0, [r7, #0]
 80029c0:	4401      	add	r1, r0
 80029c2:	b2d3      	uxtb	r3, r2
 80029c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80029c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	0c0a      	lsrs	r2, r1, #16
 80029d4:	2300      	movs	r3, #0
 80029d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029d8:	3106      	adds	r1, #6
 80029da:	6838      	ldr	r0, [r7, #0]
 80029dc:	4401      	add	r1, r0
 80029de:	b2d3      	uxtb	r3, r2
 80029e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80029e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	0e0a      	lsrs	r2, r1, #24
 80029f0:	2300      	movs	r3, #0
 80029f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029f4:	3107      	adds	r1, #7
 80029f6:	6838      	ldr	r0, [r7, #0]
 80029f8:	4401      	add	r1, r0
 80029fa:	b2d3      	uxtb	r3, r2
 80029fc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	3308      	adds	r3, #8
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002a06:	4618      	mov	r0, r3
 8002a08:	372c      	adds	r7, #44	; 0x2c
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a12:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002a16:	b0eb      	sub	sp, #428	; 0x1ac
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002a1e:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a34:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a38:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002a3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a40:	4413      	add	r3, r2
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2200      	movs	r2, #0
 8002a48:	461c      	mov	r4, r3
 8002a4a:	4615      	mov	r5, r2
 8002a4c:	ea40 0804 	orr.w	r8, r0, r4
 8002a50:	ea41 0905 	orr.w	r9, r1, r5
 8002a54:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a58:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a5c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a66:	4413      	add	r3, r2
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	469a      	mov	sl, r3
 8002a70:	4693      	mov	fp, r2
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002a7e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002a82:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002a86:	ea40 0402 	orr.w	r4, r0, r2
 8002a8a:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002a94:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002a98:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a9c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002aa0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002aa4:	1c9a      	adds	r2, r3, #2
 8002aa6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002aaa:	4413      	add	r3, r2
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002ab6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002ac6:	464c      	mov	r4, r9
 8002ac8:	0423      	lsls	r3, r4, #16
 8002aca:	4644      	mov	r4, r8
 8002acc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002ad0:	4644      	mov	r4, r8
 8002ad2:	0422      	lsls	r2, r4, #16
 8002ad4:	ea40 0402 	orr.w	r4, r0, r2
 8002ad8:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002adc:	430b      	orrs	r3, r1
 8002ade:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002ae2:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002ae6:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002aea:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002aee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002af2:	1cda      	adds	r2, r3, #3
 8002af4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002af8:	4413      	add	r3, r2
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2200      	movs	r2, #0
 8002b00:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002b04:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002b08:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002b0c:	4623      	mov	r3, r4
 8002b0e:	0a1b      	lsrs	r3, r3, #8
 8002b10:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002b14:	4623      	mov	r3, r4
 8002b16:	061b      	lsls	r3, r3, #24
 8002b18:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002b1c:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002b20:	4623      	mov	r3, r4
 8002b22:	4303      	orrs	r3, r0
 8002b24:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002b28:	462b      	mov	r3, r5
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002b30:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002b34:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002b38:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b3c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b40:	1d1a      	adds	r2, r3, #4
 8002b42:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b46:	4413      	add	r3, r2
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002b52:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002b62:	0023      	movs	r3, r4
 8002b64:	2200      	movs	r2, #0
 8002b66:	ea40 0402 	orr.w	r4, r0, r2
 8002b6a:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002b74:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002b78:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002b7c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b80:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b84:	1d5a      	adds	r2, r3, #5
 8002b86:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b8a:	4413      	add	r3, r2
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2200      	movs	r2, #0
 8002b92:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002b96:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002ba6:	0223      	lsls	r3, r4, #8
 8002ba8:	2200      	movs	r2, #0
 8002baa:	ea40 0402 	orr.w	r4, r0, r2
 8002bae:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002bb2:	430b      	orrs	r3, r1
 8002bb4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002bb8:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002bbc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002bc0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002bc4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bc8:	1d9a      	adds	r2, r3, #6
 8002bca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bce:	4413      	add	r3, r2
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002bda:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002bea:	0423      	lsls	r3, r4, #16
 8002bec:	2200      	movs	r2, #0
 8002bee:	ea40 0402 	orr.w	r4, r0, r2
 8002bf2:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002bf6:	430b      	orrs	r3, r1
 8002bf8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002bfc:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002c00:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002c04:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c0c:	1dda      	adds	r2, r3, #7
 8002c0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c12:	4413      	add	r3, r2
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002c1e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002c2e:	0623      	lsls	r3, r4, #24
 8002c30:	2200      	movs	r2, #0
 8002c32:	ea40 0402 	orr.w	r4, r0, r2
 8002c36:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002c3a:	430b      	orrs	r3, r1
 8002c3c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002c40:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002c44:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002c48:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c4c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002c50:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002c54:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c58:	3308      	adds	r3, #8
 8002c5a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c6a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c6e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002c72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c76:	4413      	add	r3, r2
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002c82:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002c86:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002c8a:	4623      	mov	r3, r4
 8002c8c:	4303      	orrs	r3, r0
 8002c8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002c92:	462b      	mov	r3, r5
 8002c94:	430b      	orrs	r3, r1
 8002c96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c9a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002c9e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ca2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ca6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cb0:	4413      	add	r3, r2
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002cbc:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002ccc:	464c      	mov	r4, r9
 8002cce:	0223      	lsls	r3, r4, #8
 8002cd0:	4644      	mov	r4, r8
 8002cd2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002cd6:	4644      	mov	r4, r8
 8002cd8:	0222      	lsls	r2, r4, #8
 8002cda:	ea40 0402 	orr.w	r4, r0, r2
 8002cde:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002ce8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002cec:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002cf0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002cf4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cf8:	1c9a      	adds	r2, r3, #2
 8002cfa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cfe:	4413      	add	r3, r2
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2200      	movs	r2, #0
 8002d06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002d1a:	464c      	mov	r4, r9
 8002d1c:	0423      	lsls	r3, r4, #16
 8002d1e:	4644      	mov	r4, r8
 8002d20:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002d24:	4644      	mov	r4, r8
 8002d26:	0422      	lsls	r2, r4, #16
 8002d28:	ea40 0402 	orr.w	r4, r0, r2
 8002d2c:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002d30:	430b      	orrs	r3, r1
 8002d32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d36:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002d3a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d3e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d42:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d46:	1cda      	adds	r2, r3, #3
 8002d48:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d4c:	4413      	add	r3, r2
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2200      	movs	r2, #0
 8002d54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d58:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d5c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002d60:	4623      	mov	r3, r4
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002d68:	4623      	mov	r3, r4
 8002d6a:	061b      	lsls	r3, r3, #24
 8002d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d70:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002d74:	4623      	mov	r3, r4
 8002d76:	4303      	orrs	r3, r0
 8002d78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d7c:	462b      	mov	r3, r5
 8002d7e:	430b      	orrs	r3, r1
 8002d80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d84:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002d88:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002d8c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d94:	1d1a      	adds	r2, r3, #4
 8002d96:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d9a:	4413      	add	r3, r2
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2200      	movs	r2, #0
 8002da2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002da6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002db6:	0023      	movs	r3, r4
 8002db8:	2200      	movs	r2, #0
 8002dba:	ea40 0402 	orr.w	r4, r0, r2
 8002dbe:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002dc2:	430b      	orrs	r3, r1
 8002dc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002dc8:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002dcc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002dd0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002dd4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dd8:	1d5a      	adds	r2, r3, #5
 8002dda:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dde:	4413      	add	r3, r2
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2200      	movs	r2, #0
 8002de6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dea:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002dfa:	0223      	lsls	r3, r4, #8
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	ea40 0402 	orr.w	r4, r0, r2
 8002e02:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002e06:	430b      	orrs	r3, r1
 8002e08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e0c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002e10:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002e14:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e1c:	1d9a      	adds	r2, r3, #6
 8002e1e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e22:	4413      	add	r3, r2
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002e3e:	0423      	lsls	r3, r4, #16
 8002e40:	2200      	movs	r2, #0
 8002e42:	ea40 0402 	orr.w	r4, r0, r2
 8002e46:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e50:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002e54:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002e58:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e5c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e60:	1dda      	adds	r2, r3, #7
 8002e62:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e66:	4413      	add	r3, r2
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002e82:	0623      	lsls	r3, r4, #24
 8002e84:	2200      	movs	r2, #0
 8002e86:	ea40 0402 	orr.w	r4, r0, r2
 8002e8a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002e94:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002e98:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002e9c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ea0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002ea4:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002ea8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002eac:	3308      	adds	r3, #8
 8002eae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ebe:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ec2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002ec6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002eca:	4413      	add	r3, r2
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ed6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002eda:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002ede:	4623      	mov	r3, r4
 8002ee0:	4303      	orrs	r3, r0
 8002ee2:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ee4:	462b      	mov	r3, r5
 8002ee6:	430b      	orrs	r3, r1
 8002ee8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002eea:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002eee:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ef2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ef6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f00:	4413      	add	r3, r2
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2200      	movs	r2, #0
 8002f08:	673b      	str	r3, [r7, #112]	; 0x70
 8002f0a:	677a      	str	r2, [r7, #116]	; 0x74
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f18:	464c      	mov	r4, r9
 8002f1a:	0223      	lsls	r3, r4, #8
 8002f1c:	4644      	mov	r4, r8
 8002f1e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f22:	4644      	mov	r4, r8
 8002f24:	0222      	lsls	r2, r4, #8
 8002f26:	ea40 0402 	orr.w	r4, r0, r2
 8002f2a:	66bc      	str	r4, [r7, #104]	; 0x68
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f30:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002f34:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f38:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f3c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f40:	1c9a      	adds	r2, r3, #2
 8002f42:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f46:	4413      	add	r3, r2
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	663b      	str	r3, [r7, #96]	; 0x60
 8002f50:	667a      	str	r2, [r7, #100]	; 0x64
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f5e:	464c      	mov	r4, r9
 8002f60:	0423      	lsls	r3, r4, #16
 8002f62:	4644      	mov	r4, r8
 8002f64:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002f68:	4644      	mov	r4, r8
 8002f6a:	0422      	lsls	r2, r4, #16
 8002f6c:	ea40 0402 	orr.w	r4, r0, r2
 8002f70:	65bc      	str	r4, [r7, #88]	; 0x58
 8002f72:	430b      	orrs	r3, r1
 8002f74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f76:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002f7a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f7e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f82:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f86:	1cda      	adds	r2, r3, #3
 8002f88:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f8c:	4413      	add	r3, r2
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2200      	movs	r2, #0
 8002f94:	653b      	str	r3, [r7, #80]	; 0x50
 8002f96:	657a      	str	r2, [r7, #84]	; 0x54
 8002f98:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002f9c:	4623      	mov	r3, r4
 8002f9e:	0a1b      	lsrs	r3, r3, #8
 8002fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fa2:	4623      	mov	r3, r4
 8002fa4:	061b      	lsls	r3, r3, #24
 8002fa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fa8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002fac:	4623      	mov	r3, r4
 8002fae:	4303      	orrs	r3, r0
 8002fb0:	643b      	str	r3, [r7, #64]	; 0x40
 8002fb2:	462b      	mov	r3, r5
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fb8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002fbc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002fc0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002fc4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fc8:	1d1a      	adds	r2, r3, #4
 8002fca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fce:	4413      	add	r3, r2
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002fe4:	0023      	movs	r3, r4
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	ea40 0402 	orr.w	r4, r0, r2
 8002fec:	633c      	str	r4, [r7, #48]	; 0x30
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002ff6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002ffa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ffe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003002:	1d5a      	adds	r2, r3, #5
 8003004:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003008:	4413      	add	r3, r2
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2200      	movs	r2, #0
 8003010:	62bb      	str	r3, [r7, #40]	; 0x28
 8003012:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800301e:	0223      	lsls	r3, r4, #8
 8003020:	2200      	movs	r2, #0
 8003022:	ea40 0402 	orr.w	r4, r0, r2
 8003026:	623c      	str	r4, [r7, #32]
 8003028:	430b      	orrs	r3, r1
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
 800302c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003030:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003034:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003038:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800303c:	3306      	adds	r3, #6
 800303e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003042:	4413      	add	r3, r2
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2200      	movs	r2, #0
 800304a:	61bb      	str	r3, [r7, #24]
 800304c:	61fa      	str	r2, [r7, #28]
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	69bc      	ldr	r4, [r7, #24]
 8003058:	0423      	lsls	r3, r4, #16
 800305a:	2200      	movs	r2, #0
 800305c:	ea40 0402 	orr.w	r4, r0, r2
 8003060:	613c      	str	r4, [r7, #16]
 8003062:	430b      	orrs	r3, r1
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800306a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800306e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003072:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003076:	3307      	adds	r3, #7
 8003078:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800307c:	4413      	add	r3, r2
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2200      	movs	r2, #0
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	60fa      	str	r2, [r7, #12]
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	68bc      	ldr	r4, [r7, #8]
 8003092:	0623      	lsls	r3, r4, #24
 8003094:	2200      	movs	r2, #0
 8003096:	ea40 0402 	orr.w	r4, r0, r2
 800309a:	603c      	str	r4, [r7, #0]
 800309c:	430b      	orrs	r3, r1
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80030a4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 80030a8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80030ac:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 80030b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80030b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030b8:	3308      	adds	r3, #8
 80030ba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80030be:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 80030c2:	4618      	mov	r0, r3
 80030c4:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80030c8:	46bd      	mov	sp, r7
 80030ca:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80030ce:	4770      	bx	lr

080030d0 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	0800f2d0 	.word	0x0800f2d0

080030ec <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	4b03      	ldr	r3, [pc, #12]	; (8003104 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	0800f2e8 	.word	0x0800f2e8

08003108 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe faca 	bl	80016ac <_ZN3ros3MsgC1Ev>
 8003118:	4a08      	ldr	r2, [pc, #32]	; (800313c <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3308      	adds	r3, #8
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fada 	bl	80026dc <_ZN13geometry_msgs7Vector3C1Ev>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3328      	adds	r3, #40	; 0x28
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fad5 	bl	80026dc <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	0800f3dc 	.word	0x0800f3dc

08003140 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f103 0008 	add.w	r0, r3, #8
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	4413      	add	r3, r2
 800315a:	4619      	mov	r1, r3
 800315c:	f7ff fae6 	bl	800272c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003160:	4602      	mov	r2, r0
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4413      	add	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	4413      	add	r3, r2
 8003174:	4619      	mov	r1, r3
 8003176:	f7ff fad9 	bl	800272c <_ZNK13geometry_msgs7Vector39serializeEPh>
 800317a:	4602      	mov	r2, r0
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
      return offset;
 8003182:	68fb      	ldr	r3, [r7, #12]
    }
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f103 0008 	add.w	r0, r3, #8
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	4413      	add	r3, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	f7ff fc33 	bl	8002a12 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4413      	add	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	4413      	add	r3, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	f7ff fc26 	bl	8002a12 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80031c6:	4602      	mov	r2, r0
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4413      	add	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]
     return offset;
 80031ce:	68fb      	ldr	r3, [r7, #12]
    }
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	0800f30c 	.word	0x0800f30c

080031f4 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	4b03      	ldr	r3, [pc, #12]	; (800320c <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	0800f320 	.word	0x0800f320

08003210 <_Z12vel_callbackRKN13geometry_msgs5TwistE>:
#include <ros.h>
#include <rosserial.h>
#include "geometry_msgs/TwistWithCovariance.h"

void vel_callback(const geometry_msgs::Twist &msg)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
	linearvelocity_x = msg.linear.x;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800321e:	490a      	ldr	r1, [pc, #40]	; (8003248 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 8003220:	e9c1 2300 	strd	r2, r3, [r1]
	linearvelocity_y = msg.linear.y;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800322a:	4908      	ldr	r1, [pc, #32]	; (800324c <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x3c>)
 800322c:	e9c1 2300 	strd	r2, r3, [r1]
	angularvelocity = msg.angular.z;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003236:	4906      	ldr	r1, [pc, #24]	; (8003250 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x40>)
 8003238:	e9c1 2300 	strd	r2, r3, [r1]
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	240000c0 	.word	0x240000c0
 800324c:	240000c8 	.word	0x240000c8
 8003250:	240000d0 	.word	0x240000d0

08003254 <HAL_UART_TxCpltCallback>:
//----------------------------definition of ros----------------------------
ros::NodeHandle nh;
ros::Subscriber<geometry_msgs::Twist> vel_sub("/cmd_vel", vel_callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 800325c:	4805      	ldr	r0, [pc, #20]	; (8003274 <HAL_UART_TxCpltCallback+0x20>)
 800325e:	f000 f95b 	bl	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8003262:	4603      	mov	r3, r0
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff f989 	bl	800257c <_ZN13STM32Hardware5flushEv>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	24000538 	.word	0x24000538

08003278 <Rosserial_Init>:

void Rosserial_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
    nh.initNode();
 800327c:	4804      	ldr	r0, [pc, #16]	; (8003290 <Rosserial_Init+0x18>)
 800327e:	f000 f957 	bl	8003530 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
    nh.subscribe(vel_sub);
 8003282:	4904      	ldr	r1, [pc, #16]	; (8003294 <Rosserial_Init+0x1c>)
 8003284:	4802      	ldr	r0, [pc, #8]	; (8003290 <Rosserial_Init+0x18>)
 8003286:	f000 f97c 	bl	8003582 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	24000538 	.word	0x24000538
 8003294:	24001678 	.word	0x24001678

08003298 <Rosserial_Spin>:

void Rosserial_Spin(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
		nh.spinOnce();
 800329c:	4802      	ldr	r0, [pc, #8]	; (80032a8 <Rosserial_Spin+0x10>)
 800329e:	f000 f99d 	bl	80035dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
}
 80032a2:	bf00      	nop
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	24000538 	.word	0x24000538

080032ac <Rosserial_Checkconfigstate>:

bool Rosserial_Checkconfigstate(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
		return nh.config_state();
 80032b0:	4802      	ldr	r0, [pc, #8]	; (80032bc <Rosserial_Checkconfigstate+0x10>)
 80032b2:	f000 fc04 	bl	8003abe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE12config_stateEv>
 80032b6:	4603      	mov	r3, r0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	24000538 	.word	0x24000538

080032c0 <Rosserial_GetHardware>:

void Rosserial_GetHardware(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
		nh.getHardware()->init();
 80032c4:	4804      	ldr	r0, [pc, #16]	; (80032d8 <Rosserial_GetHardware+0x18>)
 80032c6:	f000 f927 	bl	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 80032ca:	4603      	mov	r3, r0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff f90b 	bl	80024e8 <_ZN13STM32Hardware4initEv>
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	24000538 	.word	0x24000538

080032dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d80d      	bhi.n	800330c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	fa22 f103 	lsr.w	r1, r2, r3
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	b2ca      	uxtb	r2, r1
 8003302:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3301      	adds	r3, #1
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	e7ee      	b.n	80032ea <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b03      	cmp	r3, #3
 8003330:	d811      	bhi.n	8003356 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6839      	ldr	r1, [r7, #0]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	440a      	add	r2, r1
 800333c:	7812      	ldrb	r2, [r2, #0]
 800333e:	4611      	mov	r1, r2
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	00d2      	lsls	r2, r2, #3
 8003344:	fa01 f202 	lsl.w	r2, r1, r2
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	3301      	adds	r3, #1
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	e7ea      	b.n	800332c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	0800f424 	.word	0x0800f424

08003384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ffe8 	bl	8003364 <_ZN3ros15NodeHandleBase_C1Ev>
 8003394:	4a45      	ldr	r2, [pc, #276]	; (80034ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x128>)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3304      	adds	r3, #4
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff f886 	bl	80024b0 <_ZN13STM32HardwareC1Ev>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	f241 1318 	movw	r3, #4376	; 0x1118
 80033b6:	4413      	add	r3, r2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe fceb 	bl	8001d94 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b18      	cmp	r3, #24
 80033c6:	d80a      	bhi.n	80033de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5a>
      publishers[i] = 0;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 80033d0:	2100      	movs	r1, #0
 80033d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	3301      	adds	r3, #1
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	e7f1      	b.n	80033c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	2b18      	cmp	r3, #24
 80033e6:	d80b      	bhi.n	8003400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7c>
      subscribers[i] = 0;
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f203 4322 	addw	r3, r3, #1058	; 0x422
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	2200      	movs	r2, #0
 80033f6:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	3301      	adds	r3, #1
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	e7f0      	b.n	80033e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5e>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340a:	d20a      	bcs.n	8003422 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9e>
      message_in[i] = 0;
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4413      	add	r3, r2
 8003412:	f603 0328 	addw	r3, r3, #2088	; 0x828
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3301      	adds	r3, #1
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	e7f0      	b.n	8003404 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342c:	d20a      	bcs.n	8003444 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xc0>
      message_out[i] = 0;
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4413      	add	r3, r2
 8003434:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	3301      	adds	r3, #1
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	e7f0      	b.n	8003426 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa2>

    req_param_resp.ints_length = 0;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800344a:	461a      	mov	r2, r3
 800344c:	2300      	movs	r3, #0
 800344e:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    req_param_resp.ints = NULL;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003458:	461a      	mov	r2, r3
 800345a:	2300      	movs	r3, #0
 800345c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    req_param_resp.floats_length = 0;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003466:	461a      	mov	r2, r3
 8003468:	2300      	movs	r3, #0
 800346a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    req_param_resp.floats = NULL;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003474:	461a      	mov	r2, r3
 8003476:	2300      	movs	r3, #0
 8003478:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
    req_param_resp.ints_length = 0;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003482:	461a      	mov	r2, r3
 8003484:	2300      	movs	r3, #0
 8003486:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    req_param_resp.ints = NULL;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003490:	461a      	mov	r2, r3
 8003492:	2300      	movs	r3, #0
 8003494:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

    spin_timeout_ = 0;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  }
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	0800f3c8 	.word	0x0800f3c8

080034b0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	4a04      	ldr	r2, [pc, #16]	; (80034cc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	0800f40c 	.word	0x0800f40c

080034d0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ffe5 	bl	80034b0 <_ZN3ros11Subscriber_C1Ev>
 80034e6:	4a0b      	ldr	r2, [pc, #44]	; (8003514 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3310      	adds	r3, #16
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fe09 	bl	8003108 <_ZN13geometry_msgs5TwistC1Ev>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	659a      	str	r2, [r3, #88]	; 0x58
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	609a      	str	r2, [r3, #8]
  };
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	0800f3b0 	.word	0x0800f3b0

08003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:

  Hardware* getHardware()
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3304      	adds	r3, #4
  }
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3304      	adds	r3, #4
 800353c:	4618      	mov	r0, r3
 800353e:	f7fe ffd3 	bl	80024e8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003548:	461a      	mov	r2, r3
 800354a:	2300      	movs	r3, #0
 800354c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    bytes_ = 0;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003556:	461a      	mov	r2, r3
 8003558:	2300      	movs	r3, #0
 800355a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    index_ = 0;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003564:	461a      	mov	r2, r3
 8003566:	2300      	movs	r3, #0
 8003568:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    topic_ = 0;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003572:	461a      	mov	r2, r3
 8003574:	2300      	movs	r3, #0
 8003576:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
  };
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003582:	b480      	push	{r7}
 8003584:	b085      	sub	sp, #20
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800358c:	2300      	movs	r3, #0
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b18      	cmp	r3, #24
 8003594:	dc1b      	bgt.n	80035ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f203 4322 	addw	r3, r3, #1058	; 0x422
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10e      	bne.n	80035c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f203 4322 	addw	r3, r3, #1058	; 0x422
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	605a      	str	r2, [r3, #4]
        return true;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e004      	b.n	80035d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	3301      	adds	r3, #1
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	e7e0      	b.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 80035ce:	2300      	movs	r3, #0
  }
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3304      	adds	r3, #4
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff f86c 	bl	80026c6 <_ZN13STM32Hardware4timeEv>
 80035ee:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003602:	4293      	cmp	r3, r2
 8003604:	d905      	bls.n	8003612 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    if (mode_ != MODE_FIRST_FF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00e      	beq.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003626:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	429a      	cmp	r2, r3
 800362e:	d906      	bls.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003636:	461a      	mov	r2, r3
 8003638:	2300      	movs	r3, #0
 800363a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      if (spin_timeout_ > 0)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8003644:	2b00      	cmp	r3, #0
 8003646:	d014      	beq.n	8003672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3304      	adds	r3, #4
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff f83a 	bl	80026c6 <_ZN13STM32Hardware4timeEv>
 8003652:	4602      	mov	r2, r0
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1ad2      	subs	r2, r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800365e:	429a      	cmp	r2, r3
 8003660:	bf8c      	ite	hi
 8003662:	2301      	movhi	r3, #1
 8003664:	2300      	movls	r3, #0
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 800366c:	f06f 0301 	mvn.w	r3, #1
 8003670:	e221      	b.n	8003ab6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      int data = hardware_.read();
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3304      	adds	r3, #4
 8003676:	4618      	mov	r0, r3
 8003678:	f7fe ff52 	bl	8002520 <_ZN13STM32Hardware4readEv>
 800367c:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	f2c0 81fa 	blt.w	8003a7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x49e>
      checksum_ += data;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800368c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	4413      	add	r3, r2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800369a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036a8:	2b07      	cmp	r3, #7
 80036aa:	d12b      	bne.n	8003704 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x128>
        message_in[index_++] = data;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80036be:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	b2d1      	uxtb	r1, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	4413      	add	r3, r2
 80036ca:	460a      	mov	r2, r1
 80036cc:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
        bytes_--;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036da:	3b01      	subs	r3, #1
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1a4      	bne.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036fa:	461a      	mov	r2, r3
 80036fc:	2308      	movs	r3, #8
 80036fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003702:	e79c      	b.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800370a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d130      	bne.n	8003774 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x198>
        if (data == 0xff)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2bff      	cmp	r3, #255	; 0xff
 8003716:	d112      	bne.n	800373e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800371e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003722:	3301      	adds	r3, #1
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800372a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3314      	adds	r3, #20
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003738:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
 800373c:	e77f      	b.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3304      	adds	r3, #4
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe ffbf 	bl	80026c6 <_ZN13STM32Hardware4timeEv>
 8003748:	4602      	mov	r2, r0
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	bf8c      	ite	hi
 8003756:	2301      	movhi	r3, #1
 8003758:	2300      	movls	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	f43f af6e 	beq.w	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
          return SPIN_TIMEOUT;
 800376e:	f06f 0301 	mvn.w	r3, #1
 8003772:	e1a0      	b.n	8003ab6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800377a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800377e:	2b01      	cmp	r3, #1
 8003780:	d121      	bne.n	80037c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ea>
        if (data == PROTOCOL_VER)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2bfe      	cmp	r3, #254	; 0xfe
 8003786:	d10b      	bne.n	80037a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1c4>
          mode_++;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800378e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003792:	3301      	adds	r3, #1
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800379a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800379e:	e74e      	b.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037a6:	461a      	mov	r2, r3
 80037a8:	2300      	movs	r3, #0
 80037aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
          if (configured_ == false)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f47f af40 	bne.w	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f98c 	bl	8003adc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 80037c4:	e73b      	b.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d120      	bne.n	8003816 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23a>
        bytes_ = data;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037da:	461a      	mov	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        index_ = 0;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037e8:	461a      	mov	r2, r3
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
        mode_++;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037fa:	3301      	adds	r3, #1
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003802:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        checksum_ = data;               /* first byte for calculating size checksum */
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800380c:	461a      	mov	r2, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8003814:	e713      	b.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800381c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003820:	2b03      	cmp	r3, #3
 8003822:	d118      	bne.n	8003856 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27a>
        bytes_ += data << 8;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800382a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	4413      	add	r3, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800383a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003848:	3301      	adds	r3, #1
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003850:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003854:	e6f3      	b.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800385c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003860:	2b04      	cmp	r3, #4
 8003862:	d11f      	bne.n	80038a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c8>
        if ((checksum_ % 256) == 255)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800386a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800386e:	425a      	negs	r2, r3
 8003870:	b2db      	uxtb	r3, r3
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	bf58      	it	pl
 8003876:	4253      	negpl	r3, r2
 8003878:	2bff      	cmp	r3, #255	; 0xff
 800387a:	d10b      	bne.n	8003894 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b8>
          mode_++;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003886:	3301      	adds	r3, #1
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800388e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003892:	e6d4      	b.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800389a:	461a      	mov	r2, r3
 800389c:	2300      	movs	r3, #0
 800389e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038a2:	e6cc      	b.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038ae:	2b05      	cmp	r3, #5
 80038b0:	d119      	bne.n	80038e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30a>
        topic_ = data;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b8:	461a      	mov	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038ca:	3301      	adds	r3, #1
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        checksum_ = data;               /* first byte included in checksum */
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038dc:	461a      	mov	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 80038e4:	e6ab      	b.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038f0:	2b06      	cmp	r3, #6
 80038f2:	d123      	bne.n	800393c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x360>
        topic_ += data << 8;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038fa:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	4413      	add	r3, r2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800390a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_ = MODE_MESSAGE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003914:	461a      	mov	r2, r3
 8003916:	2307      	movs	r3, #7
 8003918:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003922:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003926:	2b00      	cmp	r3, #0
 8003928:	f47f ae89 	bne.w	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003932:	461a      	mov	r2, r3
 8003934:	2308      	movs	r3, #8
 8003936:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800393a:	e680      	b.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003946:	2b08      	cmp	r3, #8
 8003948:	f47f ae79 	bne.w	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003952:	461a      	mov	r2, r3
 8003954:	2300      	movs	r3, #0
 8003956:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if ((checksum_ % 256) == 255)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003960:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003964:	425a      	negs	r2, r3
 8003966:	b2db      	uxtb	r3, r3
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	bf58      	it	pl
 800396c:	4253      	negpl	r3, r2
 800396e:	2bff      	cmp	r3, #255	; 0xff
 8003970:	f47f ae65 	bne.w	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800397a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d116      	bne.n	80039b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d4>
            requestSyncTime();
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f8aa 	bl	8003adc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f8c5 	bl	8003b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003994:	461a      	mov	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            last_sync_receive_time = c_time;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039a2:	461a      	mov	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            return SPIN_ERR;
 80039aa:	f04f 33ff 	mov.w	r3, #4294967295
 80039ae:	e082      	b.n	8003ab6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
          else if (topic_ == TopicInfo::ID_TIME)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80039ba:	2b0a      	cmp	r3, #10
 80039bc:	d107      	bne.n	80039ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f2>
            syncTime(message_in);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f603 0328 	addw	r3, r3, #2088	; 0x828
 80039c4:	4619      	mov	r1, r3
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f988 	bl	8003cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 80039cc:	e637      	b.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039d4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80039d8:	2b06      	cmp	r3, #6
 80039da:	d111      	bne.n	8003a00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
            req_param_resp.deserialize(message_in);
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	f241 1318 	movw	r3, #4376	; 0x1118
 80039e2:	4413      	add	r3, r2
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	f602 0228 	addw	r2, r2, #2088	; 0x828
 80039ea:	4611      	mov	r1, r2
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe fb06 	bl	8001ffe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 80039fe:	e61e      	b.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a06:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003a0a:	2b0b      	cmp	r3, #11
 8003a0c:	d106      	bne.n	8003a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x440>
            configured_ = false;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8003a1a:	e610      	b.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a22:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003a26:	3b64      	subs	r3, #100	; 0x64
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f43f ae02 	beq.w	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a40:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003a44:	3b64      	subs	r3, #100	; 0x64
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	6858      	ldr	r0, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a58:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003a5c:	3b64      	subs	r3, #100	; 0x64
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	f602 0228 	addw	r2, r2, #2088	; 0x828
 8003a74:	4611      	mov	r1, r2
 8003a76:	4798      	blx	r3
    while (true)
 8003a78:	e5e1      	b.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 8003a7a:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a82:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d014      	beq.n	8003ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a90:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d909      	bls.n	8003ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
      requestSyncTime();
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f81b 	bl	8003adc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aac:	461a      	mov	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    return SPIN_OK;
 8003ab4:	2300      	movs	r3, #0
  }
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE12config_stateEv>:
  }

  //wo zi gi gia der public
public:

  bool config_state()
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  {
  	return configured_;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003acc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
  }
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003ae4:	f107 030c 	add.w	r3, r7, #12
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fd fdef 	bl	80016cc <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f107 020c 	add.w	r2, r7, #12
 8003af8:	210a      	movs	r1, #10
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	4798      	blx	r3
    rt_time = hardware_.time();
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3304      	adds	r3, #4
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe fddf 	bl	80026c6 <_ZN13STM32Hardware4timeEv>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
  }
 8003b10:	bf00      	nop
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
  void negotiateTopics()
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b08b      	sub	sp, #44	; 0x2c
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 8003b20:	f107 030c 	add.w	r3, r7, #12
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fd fec1 	bl	80018ac <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	2b18      	cmp	r3, #24
 8003b32:	dc5b      	bgt.n	8003bec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd4>
      if (publishers[i] != 0) // non-empty slot
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b38:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d04f      	beq.n	8003be4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xcc>
        ti.topic_id = publishers[i]->id_;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b48:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5a:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6a:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b78:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3308      	adds	r3, #8
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4608      	mov	r0, r1
 8003b8a:	4798      	blx	r3
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b94:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b9c:	6859      	ldr	r1, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba2:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	330c      	adds	r3, #12
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4608      	mov	r0, r1
 8003bb4:	4798      	blx	r3
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bbe:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681c      	ldr	r4, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bca:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fe fba0 	bl	8002318 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003bd8:	4601      	mov	r1, r0
 8003bda:	f107 030c 	add.w	r3, r7, #12
 8003bde:	461a      	mov	r2, r3
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	3301      	adds	r3, #1
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bea:	e7a0      	b.n	8003b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003bec:	2300      	movs	r3, #0
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	2b18      	cmp	r3, #24
 8003bf4:	dc68      	bgt.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1b0>
      if (subscribers[i] != 0) // non-empty slot
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d05b      	beq.n	8003cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a8>
        ti.topic_id = subscribers[i]->id_;
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4608      	mov	r0, r1
 8003c52:	4798      	blx	r3
 8003c54:	4603      	mov	r3, r0
 8003c56:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	6859      	ldr	r1, [r3, #4]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	330c      	adds	r3, #12
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4608      	mov	r0, r1
 8003c7c:	4798      	blx	r3
 8003c7e:	4603      	mov	r3, r0
 8003c80:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c86:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681c      	ldr	r4, [r3, #0]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3304      	adds	r3, #4
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4608      	mov	r0, r1
 8003cb2:	4798      	blx	r3
 8003cb4:	4601      	mov	r1, r0
 8003cb6:	f107 030c 	add.w	r3, r7, #12
 8003cba:	461a      	mov	r2, r3
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc6:	e793      	b.n	8003bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd8>
    configured_ = true;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
  }
 8003cd4:	bf00      	nop
 8003cd6:	372c      	adds	r7, #44	; 0x2c
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd90      	pop	{r4, r7, pc}

08003cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003ce6:	f107 0308 	add.w	r3, r7, #8
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fd fcee 	bl	80016cc <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe fce6 	bl	80026c6 <_ZN13STM32Hardware4timeEv>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003d06:	f107 0308 	add.w	r3, r7, #8
 8003d0a:	6839      	ldr	r1, [r7, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fd fd4d 	bl	80017ac <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	4916      	ldr	r1, [pc, #88]	; (8003d70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003d18:	fba1 1303 	umull	r1, r3, r1, r3
 8003d1c:	099b      	lsrs	r3, r3, #6
 8003d1e:	4413      	add	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003d22:	6939      	ldr	r1, [r7, #16]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003d28:	fba3 0302 	umull	r0, r3, r3, r2
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d32:	fb00 f303 	mul.w	r3, r0, r3
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	4a0e      	ldr	r2, [pc, #56]	; (8003d74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 8003d3a:	fb02 f303 	mul.w	r3, r2, r3
 8003d3e:	440b      	add	r3, r1
 8003d40:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003d42:	f107 0308 	add.w	r3, r7, #8
 8003d46:	3304      	adds	r3, #4
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f8aa 	bl	8003ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3304      	adds	r3, #4
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fe fcb6 	bl	80026c6 <_ZN13STM32Hardware4timeEv>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d62:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
 8003d66:	bf00      	nop
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	10624dd3 	.word	0x10624dd3
 8003d74:	000f4240 	.word	0x000f4240

08003d78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg)
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b63      	cmp	r3, #99	; 0x63
 8003d88:	dd0b      	ble.n	8003da2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d90:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8003d94:	f083 0301 	eor.w	r3, r3, #1
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e079      	b.n	8003e96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
    int l = msg->serialize(message_out + 7);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	f602 4228 	addw	r2, r2, #3112	; 0xc28
 8003dae:	3207      	adds	r2, #7
 8003db0:	4611      	mov	r1, r2
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	4798      	blx	r3
 8003db6:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	22ff      	movs	r2, #255	; 0xff
 8003dbc:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[1] = PROTOCOL_VER;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	22fe      	movs	r2, #254	; 0xfe
 8003dc4:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f883 2c2b 	strb.w	r2, [r3, #3115]	; 0xc2b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 2c2a 	ldrb.w	r2, [r3, #3114]	; 0xc2a
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 3c2b 	ldrb.w	r3, [r3, #3115]	; 0xc2b
 8003dee:	4413      	add	r3, r2
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	43db      	mvns	r3, r3
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f883 2c2c 	strb.w	r2, [r3, #3116]	; 0xc2c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f883 2c2d 	strb.w	r2, [r3, #3117]	; 0xc2d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	b21b      	sxth	r3, r3
 8003e0a:	121b      	asrs	r3, r3, #8
 8003e0c:	b21b      	sxth	r3, r3
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f883 2c2e 	strb.w	r2, [r3, #3118]	; 0xc2e
    int chk = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003e1a:	2305      	movs	r3, #5
 8003e1c:	61bb      	str	r3, [r7, #24]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	3306      	adds	r3, #6
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	dc0d      	bgt.n	8003e44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	4413      	add	r3, r2
 8003e3a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	e7ec      	b.n	8003e1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	3307      	adds	r3, #7
 8003e48:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	425a      	negs	r2, r3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	bf58      	it	pl
 8003e54:	4253      	negpl	r3, r2
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	1c59      	adds	r1, r3, #1
 8003e5c:	6179      	str	r1, [r7, #20]
 8003e5e:	43d2      	mvns	r2, r2
 8003e60:	b2d1      	uxtb	r1, r2
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4413      	add	r3, r2
 8003e66:	460a      	mov	r2, r1
 8003e68:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    if (l <= OUTPUT_SIZE)
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e72:	dc0a      	bgt.n	8003e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x112>
      hardware_.write(message_out, l);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	1d18      	adds	r0, r3, #4
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4619      	mov	r1, r3
 8003e82:	f7fe fbd9 	bl	8002638 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	e005      	b.n	8003e96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
      logerror("Message from device dropped: message larger than buffer.");
 8003e8a:	4905      	ldr	r1, [pc, #20]	; (8003ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x128>)
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f849 	bl	8003f24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8003e92:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8003e96:	4618      	mov	r0, r3
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	0800f344 	.word	0x0800f344

08003ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe fc07 	bl	80026c6 <_ZN13STM32Hardware4timeEv>
 8003eb8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4915      	ldr	r1, [pc, #84]	; (8003f18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003ec2:	fba1 1303 	umull	r1, r3, r1, r3
 8003ec6:	099b      	lsrs	r3, r3, #6
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	1e5a      	subs	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	6859      	ldr	r1, [r3, #4]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003eda:	fba3 0302 	umull	r0, r3, r3, r2
 8003ede:	099b      	lsrs	r3, r3, #6
 8003ee0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ee4:	fb00 f303 	mul.w	r3, r0, r3
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	4a0c      	ldr	r2, [pc, #48]	; (8003f1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 8003eec:	fb02 f303 	mul.w	r3, r2, r3
 8003ef0:	1aca      	subs	r2, r1, r3
 8003ef2:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 8003ef4:	4413      	add	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	f8c2 3820 	str.w	r3, [r2, #2080]	; 0x820
    normalizeSecNSec(sec_offset, nsec_offset);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f603 021c 	addw	r2, r3, #2076	; 0x81c
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	f7fc fb8a 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003f10:	bf00      	nop
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	10624dd3 	.word	0x10624dd3
 8003f1c:	000f4240 	.word	0x000f4240
 8003f20:	3b9aca00 	.word	0x3b9aca00

08003f24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  void logerror(const char*msg)
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
    log(rosserial_msgs::Log::ERROR, msg);
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	2103      	movs	r1, #3
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f804 	bl	8003f40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003f4e:	f107 0314 	add.w	r3, r7, #20
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fd fe6e 	bl	8001c34 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003f58:	7afb      	ldrb	r3, [r7, #11]
 8003f5a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f107 0214 	add.w	r2, r7, #20
 8003f6a:	2107      	movs	r1, #7
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	4798      	blx	r3
  }
 8003f70:	bf00      	nop
 8003f72:	3720      	adds	r7, #32
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <_Z41__static_initialization_and_destruction_0ii>:
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d10d      	bne.n	8003fa4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d108      	bne.n	8003fa4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 8003f92:	4806      	ldr	r0, [pc, #24]	; (8003fac <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003f94:	f7ff f9f6 	bl	8003384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> vel_sub("/cmd_vel", vel_callback);
 8003f98:	2301      	movs	r3, #1
 8003f9a:	4a05      	ldr	r2, [pc, #20]	; (8003fb0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003f9c:	4905      	ldr	r1, [pc, #20]	; (8003fb4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003f9e:	4806      	ldr	r0, [pc, #24]	; (8003fb8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003fa0:	f7ff fa96 	bl	80034d0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8003fa4:	bf00      	nop
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	24000538 	.word	0x24000538
 8003fb0:	08003211 	.word	0x08003211
 8003fb4:	0800f380 	.word	0x0800f380
 8003fb8:	24001678 	.word	0x24001678

08003fbc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3310      	adds	r3, #16
 8003fca:	6839      	ldr	r1, [r7, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff f8dd 	bl	800318c <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	3210      	adds	r2, #16
 8003fda:	4610      	mov	r0, r2
 8003fdc:	4798      	blx	r3
  }
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3310      	adds	r3, #16
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff f8e4 	bl	80031d8 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004010:	4603      	mov	r3, r0
  }
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3310      	adds	r3, #16
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff f8e4 	bl	80031f4 <_ZN13geometry_msgs5Twist6getMD5Ev>
 800402c:	4603      	mov	r3, r0
  }
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
    return configured_;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004044:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
  };
 8004048:	4618      	mov	r0, r3
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <_GLOBAL__sub_I__Z12vel_callbackRKN13geometry_msgs5TwistE>:
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
 8004058:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800405c:	2001      	movs	r0, #1
 800405e:	f7ff ff8b 	bl	8003f78 <_Z41__static_initialization_and_destruction_0ii>
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800406a:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <HAL_MspInit+0x30>)
 800406c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004070:	4a08      	ldr	r2, [pc, #32]	; (8004094 <HAL_MspInit+0x30>)
 8004072:	f043 0302 	orr.w	r3, r3, #2
 8004076:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800407a:	4b06      	ldr	r3, [pc, #24]	; (8004094 <HAL_MspInit+0x30>)
 800407c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	607b      	str	r3, [r7, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	58024400 	.word	0x58024400

08004098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800409c:	e7fe      	b.n	800409c <NMI_Handler+0x4>

0800409e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800409e:	b480      	push	{r7}
 80040a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040a2:	e7fe      	b.n	80040a2 <HardFault_Handler+0x4>

080040a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040a8:	e7fe      	b.n	80040a8 <MemManage_Handler+0x4>

080040aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040aa:	b480      	push	{r7}
 80040ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040ae:	e7fe      	b.n	80040ae <BusFault_Handler+0x4>

080040b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040b4:	e7fe      	b.n	80040b4 <UsageFault_Handler+0x4>

080040b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040b6:	b480      	push	{r7}
 80040b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040ba:	bf00      	nop
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040d2:	b480      	push	{r7}
 80040d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040d6:	bf00      	nop
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040e4:	f000 ff58 	bl	8004f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040e8:	bf00      	nop
 80040ea:	bd80      	pop	{r7, pc}

080040ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80040f0:	4802      	ldr	r0, [pc, #8]	; (80040fc <DMA1_Stream0_IRQHandler+0x10>)
 80040f2:	f002 fd91 	bl	8006c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80040f6:	bf00      	nop
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	24001984 	.word	0x24001984

08004100 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004104:	4802      	ldr	r0, [pc, #8]	; (8004110 <DMA1_Stream1_IRQHandler+0x10>)
 8004106:	f002 fd87 	bl	8006c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800410a:	bf00      	nop
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	240019fc 	.word	0x240019fc

08004114 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004118:	4802      	ldr	r0, [pc, #8]	; (8004124 <USART1_IRQHandler+0x10>)
 800411a:	f008 fe85 	bl	800ce28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800411e:	bf00      	nop
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	240018f0 	.word	0x240018f0

08004128 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 800412c:	4802      	ldr	r0, [pc, #8]	; (8004138 <TIM23_IRQHandler+0x10>)
 800412e:	f007 fc31 	bl	800b994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8004132:	bf00      	nop
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	240018a4 	.word	0x240018a4

0800413c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  return 1;
 8004140:	2301      	movs	r3, #1
}
 8004142:	4618      	mov	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <_kill>:

int _kill(int pid, int sig)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004156:	f00a fe83 	bl	800ee60 <__errno>
 800415a:	4603      	mov	r3, r0
 800415c:	2216      	movs	r2, #22
 800415e:	601a      	str	r2, [r3, #0]
  return -1;
 8004160:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <_exit>:

void _exit (int status)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004174:	f04f 31ff 	mov.w	r1, #4294967295
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff ffe7 	bl	800414c <_kill>
  while (1) {}    /* Make sure we hang here */
 800417e:	e7fe      	b.n	800417e <_exit+0x12>

08004180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004188:	4a14      	ldr	r2, [pc, #80]	; (80041dc <_sbrk+0x5c>)
 800418a:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <_sbrk+0x60>)
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004194:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <_sbrk+0x64>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d102      	bne.n	80041a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800419c:	4b11      	ldr	r3, [pc, #68]	; (80041e4 <_sbrk+0x64>)
 800419e:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <_sbrk+0x68>)
 80041a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041a2:	4b10      	ldr	r3, [pc, #64]	; (80041e4 <_sbrk+0x64>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4413      	add	r3, r2
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d207      	bcs.n	80041c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041b0:	f00a fe56 	bl	800ee60 <__errno>
 80041b4:	4603      	mov	r3, r0
 80041b6:	220c      	movs	r2, #12
 80041b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041ba:	f04f 33ff 	mov.w	r3, #4294967295
 80041be:	e009      	b.n	80041d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041c0:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <_sbrk+0x64>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041c6:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <_sbrk+0x64>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4413      	add	r3, r2
 80041ce:	4a05      	ldr	r2, [pc, #20]	; (80041e4 <_sbrk+0x64>)
 80041d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041d2:	68fb      	ldr	r3, [r7, #12]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	24050000 	.word	0x24050000
 80041e0:	00000400 	.word	0x00000400
 80041e4:	240016d8 	.word	0x240016d8
 80041e8:	24001a88 	.word	0x24001a88

080041ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80041f0:	4b32      	ldr	r3, [pc, #200]	; (80042bc <SystemInit+0xd0>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	4a31      	ldr	r2, [pc, #196]	; (80042bc <SystemInit+0xd0>)
 80041f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004200:	4b2f      	ldr	r3, [pc, #188]	; (80042c0 <SystemInit+0xd4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	2b06      	cmp	r3, #6
 800420a:	d807      	bhi.n	800421c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800420c:	4b2c      	ldr	r3, [pc, #176]	; (80042c0 <SystemInit+0xd4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f023 030f 	bic.w	r3, r3, #15
 8004214:	4a2a      	ldr	r2, [pc, #168]	; (80042c0 <SystemInit+0xd4>)
 8004216:	f043 0307 	orr.w	r3, r3, #7
 800421a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800421c:	4b29      	ldr	r3, [pc, #164]	; (80042c4 <SystemInit+0xd8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a28      	ldr	r2, [pc, #160]	; (80042c4 <SystemInit+0xd8>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004228:	4b26      	ldr	r3, [pc, #152]	; (80042c4 <SystemInit+0xd8>)
 800422a:	2200      	movs	r2, #0
 800422c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800422e:	4b25      	ldr	r3, [pc, #148]	; (80042c4 <SystemInit+0xd8>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4924      	ldr	r1, [pc, #144]	; (80042c4 <SystemInit+0xd8>)
 8004234:	4b24      	ldr	r3, [pc, #144]	; (80042c8 <SystemInit+0xdc>)
 8004236:	4013      	ands	r3, r2
 8004238:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800423a:	4b21      	ldr	r3, [pc, #132]	; (80042c0 <SystemInit+0xd4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004246:	4b1e      	ldr	r3, [pc, #120]	; (80042c0 <SystemInit+0xd4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 030f 	bic.w	r3, r3, #15
 800424e:	4a1c      	ldr	r2, [pc, #112]	; (80042c0 <SystemInit+0xd4>)
 8004250:	f043 0307 	orr.w	r3, r3, #7
 8004254:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004256:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <SystemInit+0xd8>)
 8004258:	2200      	movs	r2, #0
 800425a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800425c:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <SystemInit+0xd8>)
 800425e:	2200      	movs	r2, #0
 8004260:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004262:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <SystemInit+0xd8>)
 8004264:	2200      	movs	r2, #0
 8004266:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004268:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <SystemInit+0xd8>)
 800426a:	4a18      	ldr	r2, [pc, #96]	; (80042cc <SystemInit+0xe0>)
 800426c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800426e:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <SystemInit+0xd8>)
 8004270:	4a17      	ldr	r2, [pc, #92]	; (80042d0 <SystemInit+0xe4>)
 8004272:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004274:	4b13      	ldr	r3, [pc, #76]	; (80042c4 <SystemInit+0xd8>)
 8004276:	4a17      	ldr	r2, [pc, #92]	; (80042d4 <SystemInit+0xe8>)
 8004278:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800427a:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <SystemInit+0xd8>)
 800427c:	2200      	movs	r2, #0
 800427e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004280:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <SystemInit+0xd8>)
 8004282:	4a14      	ldr	r2, [pc, #80]	; (80042d4 <SystemInit+0xe8>)
 8004284:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004286:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <SystemInit+0xd8>)
 8004288:	2200      	movs	r2, #0
 800428a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800428c:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <SystemInit+0xd8>)
 800428e:	4a11      	ldr	r2, [pc, #68]	; (80042d4 <SystemInit+0xe8>)
 8004290:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004292:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <SystemInit+0xd8>)
 8004294:	2200      	movs	r2, #0
 8004296:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004298:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <SystemInit+0xd8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a09      	ldr	r2, [pc, #36]	; (80042c4 <SystemInit+0xd8>)
 800429e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80042a4:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <SystemInit+0xd8>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80042aa:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <SystemInit+0xec>)
 80042ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80042b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80042b2:	bf00      	nop
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	e000ed00 	.word	0xe000ed00
 80042c0:	52002000 	.word	0x52002000
 80042c4:	58024400 	.word	0x58024400
 80042c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80042cc:	02020200 	.word	0x02020200
 80042d0:	01ff0000 	.word	0x01ff0000
 80042d4:	01010280 	.word	0x01010280
 80042d8:	52004000 	.word	0x52004000

080042dc <MX_TIM2_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim23;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08c      	sub	sp, #48	; 0x30
 80042e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80042e2:	f107 030c 	add.w	r3, r7, #12
 80042e6:	2224      	movs	r2, #36	; 0x24
 80042e8:	2100      	movs	r1, #0
 80042ea:	4618      	mov	r0, r3
 80042ec:	f00a fdf0 	bl	800eed0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042f0:	463b      	mov	r3, r7
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	605a      	str	r2, [r3, #4]
 80042f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80042fa:	4b21      	ldr	r3, [pc, #132]	; (8004380 <MX_TIM2_Init+0xa4>)
 80042fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004300:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004302:	4b1f      	ldr	r3, [pc, #124]	; (8004380 <MX_TIM2_Init+0xa4>)
 8004304:	2200      	movs	r2, #0
 8004306:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004308:	4b1d      	ldr	r3, [pc, #116]	; (8004380 <MX_TIM2_Init+0xa4>)
 800430a:	2200      	movs	r2, #0
 800430c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800430e:	4b1c      	ldr	r3, [pc, #112]	; (8004380 <MX_TIM2_Init+0xa4>)
 8004310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004314:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004316:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <MX_TIM2_Init+0xa4>)
 8004318:	2200      	movs	r2, #0
 800431a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800431c:	4b18      	ldr	r3, [pc, #96]	; (8004380 <MX_TIM2_Init+0xa4>)
 800431e:	2200      	movs	r2, #0
 8004320:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004322:	2303      	movs	r3, #3
 8004324:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004326:	2300      	movs	r3, #0
 8004328:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800432a:	2301      	movs	r3, #1
 800432c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800432e:	2300      	movs	r3, #0
 8004330:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004336:	2300      	movs	r3, #0
 8004338:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800433a:	2301      	movs	r3, #1
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800433e:	2300      	movs	r3, #0
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004342:	2300      	movs	r3, #0
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004346:	f107 030c 	add.w	r3, r7, #12
 800434a:	4619      	mov	r1, r3
 800434c:	480c      	ldr	r0, [pc, #48]	; (8004380 <MX_TIM2_Init+0xa4>)
 800434e:	f007 f9ed 	bl	800b72c <HAL_TIM_Encoder_Init>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004358:	f7fd f992 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800435c:	2300      	movs	r3, #0
 800435e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004360:	2300      	movs	r3, #0
 8004362:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004364:	463b      	mov	r3, r7
 8004366:	4619      	mov	r1, r3
 8004368:	4805      	ldr	r0, [pc, #20]	; (8004380 <MX_TIM2_Init+0xa4>)
 800436a:	f008 faa7 	bl	800c8bc <HAL_TIMEx_MasterConfigSynchronization>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004374:	f7fd f984 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004378:	bf00      	nop
 800437a:	3730      	adds	r7, #48	; 0x30
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	240016dc 	.word	0x240016dc

08004384 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b08c      	sub	sp, #48	; 0x30
 8004388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800438a:	f107 030c 	add.w	r3, r7, #12
 800438e:	2224      	movs	r2, #36	; 0x24
 8004390:	2100      	movs	r1, #0
 8004392:	4618      	mov	r0, r3
 8004394:	f00a fd9c 	bl	800eed0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004398:	463b      	mov	r3, r7
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	605a      	str	r2, [r3, #4]
 80043a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80043a2:	4b21      	ldr	r3, [pc, #132]	; (8004428 <MX_TIM3_Init+0xa4>)
 80043a4:	4a21      	ldr	r2, [pc, #132]	; (800442c <MX_TIM3_Init+0xa8>)
 80043a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80043a8:	4b1f      	ldr	r3, [pc, #124]	; (8004428 <MX_TIM3_Init+0xa4>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043ae:	4b1e      	ldr	r3, [pc, #120]	; (8004428 <MX_TIM3_Init+0xa4>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80043b4:	4b1c      	ldr	r3, [pc, #112]	; (8004428 <MX_TIM3_Init+0xa4>)
 80043b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043bc:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <MX_TIM3_Init+0xa4>)
 80043be:	2200      	movs	r2, #0
 80043c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043c2:	4b19      	ldr	r3, [pc, #100]	; (8004428 <MX_TIM3_Init+0xa4>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80043c8:	2303      	movs	r3, #3
 80043ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80043cc:	2300      	movs	r3, #0
 80043ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80043d0:	2301      	movs	r3, #1
 80043d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80043d8:	2300      	movs	r3, #0
 80043da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80043dc:	2300      	movs	r3, #0
 80043de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80043e0:	2301      	movs	r3, #1
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80043e4:	2300      	movs	r3, #0
 80043e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80043ec:	f107 030c 	add.w	r3, r7, #12
 80043f0:	4619      	mov	r1, r3
 80043f2:	480d      	ldr	r0, [pc, #52]	; (8004428 <MX_TIM3_Init+0xa4>)
 80043f4:	f007 f99a 	bl	800b72c <HAL_TIM_Encoder_Init>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80043fe:	f7fd f93f 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004402:	2300      	movs	r3, #0
 8004404:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004406:	2300      	movs	r3, #0
 8004408:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800440a:	463b      	mov	r3, r7
 800440c:	4619      	mov	r1, r3
 800440e:	4806      	ldr	r0, [pc, #24]	; (8004428 <MX_TIM3_Init+0xa4>)
 8004410:	f008 fa54 	bl	800c8bc <HAL_TIMEx_MasterConfigSynchronization>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800441a:	f7fd f931 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800441e:	bf00      	nop
 8004420:	3730      	adds	r7, #48	; 0x30
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	24001728 	.word	0x24001728
 800442c:	40000400 	.word	0x40000400

08004430 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08c      	sub	sp, #48	; 0x30
 8004434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004436:	f107 030c 	add.w	r3, r7, #12
 800443a:	2224      	movs	r2, #36	; 0x24
 800443c:	2100      	movs	r1, #0
 800443e:	4618      	mov	r0, r3
 8004440:	f00a fd46 	bl	800eed0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004444:	463b      	mov	r3, r7
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	605a      	str	r2, [r3, #4]
 800444c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800444e:	4b21      	ldr	r3, [pc, #132]	; (80044d4 <MX_TIM4_Init+0xa4>)
 8004450:	4a21      	ldr	r2, [pc, #132]	; (80044d8 <MX_TIM4_Init+0xa8>)
 8004452:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004454:	4b1f      	ldr	r3, [pc, #124]	; (80044d4 <MX_TIM4_Init+0xa4>)
 8004456:	2200      	movs	r2, #0
 8004458:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800445a:	4b1e      	ldr	r3, [pc, #120]	; (80044d4 <MX_TIM4_Init+0xa4>)
 800445c:	2200      	movs	r2, #0
 800445e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004460:	4b1c      	ldr	r3, [pc, #112]	; (80044d4 <MX_TIM4_Init+0xa4>)
 8004462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004466:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004468:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <MX_TIM4_Init+0xa4>)
 800446a:	2200      	movs	r2, #0
 800446c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800446e:	4b19      	ldr	r3, [pc, #100]	; (80044d4 <MX_TIM4_Init+0xa4>)
 8004470:	2200      	movs	r2, #0
 8004472:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004474:	2303      	movs	r3, #3
 8004476:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004478:	2300      	movs	r3, #0
 800447a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800447c:	2301      	movs	r3, #1
 800447e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004480:	2300      	movs	r3, #0
 8004482:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004488:	2300      	movs	r3, #0
 800448a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800448c:	2301      	movs	r3, #1
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004490:	2300      	movs	r3, #0
 8004492:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004498:	f107 030c 	add.w	r3, r7, #12
 800449c:	4619      	mov	r1, r3
 800449e:	480d      	ldr	r0, [pc, #52]	; (80044d4 <MX_TIM4_Init+0xa4>)
 80044a0:	f007 f944 	bl	800b72c <HAL_TIM_Encoder_Init>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80044aa:	f7fd f8e9 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044ae:	2300      	movs	r3, #0
 80044b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80044b6:	463b      	mov	r3, r7
 80044b8:	4619      	mov	r1, r3
 80044ba:	4806      	ldr	r0, [pc, #24]	; (80044d4 <MX_TIM4_Init+0xa4>)
 80044bc:	f008 f9fe 	bl	800c8bc <HAL_TIMEx_MasterConfigSynchronization>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80044c6:	f7fd f8db 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80044ca:	bf00      	nop
 80044cc:	3730      	adds	r7, #48	; 0x30
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	24001774 	.word	0x24001774
 80044d8:	40000800 	.word	0x40000800

080044dc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08c      	sub	sp, #48	; 0x30
 80044e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80044e2:	f107 030c 	add.w	r3, r7, #12
 80044e6:	2224      	movs	r2, #36	; 0x24
 80044e8:	2100      	movs	r1, #0
 80044ea:	4618      	mov	r0, r3
 80044ec:	f00a fcf0 	bl	800eed0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044f0:	463b      	mov	r3, r7
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	605a      	str	r2, [r3, #4]
 80044f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80044fa:	4b21      	ldr	r3, [pc, #132]	; (8004580 <MX_TIM5_Init+0xa4>)
 80044fc:	4a21      	ldr	r2, [pc, #132]	; (8004584 <MX_TIM5_Init+0xa8>)
 80044fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004500:	4b1f      	ldr	r3, [pc, #124]	; (8004580 <MX_TIM5_Init+0xa4>)
 8004502:	2200      	movs	r2, #0
 8004504:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004506:	4b1e      	ldr	r3, [pc, #120]	; (8004580 <MX_TIM5_Init+0xa4>)
 8004508:	2200      	movs	r2, #0
 800450a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800450c:	4b1c      	ldr	r3, [pc, #112]	; (8004580 <MX_TIM5_Init+0xa4>)
 800450e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004512:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004514:	4b1a      	ldr	r3, [pc, #104]	; (8004580 <MX_TIM5_Init+0xa4>)
 8004516:	2200      	movs	r2, #0
 8004518:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800451a:	4b19      	ldr	r3, [pc, #100]	; (8004580 <MX_TIM5_Init+0xa4>)
 800451c:	2200      	movs	r2, #0
 800451e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004520:	2303      	movs	r3, #3
 8004522:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004524:	2300      	movs	r3, #0
 8004526:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004528:	2301      	movs	r3, #1
 800452a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800452c:	2300      	movs	r3, #0
 800452e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004534:	2300      	movs	r3, #0
 8004536:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004538:	2301      	movs	r3, #1
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800453c:	2300      	movs	r3, #0
 800453e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8004544:	f107 030c 	add.w	r3, r7, #12
 8004548:	4619      	mov	r1, r3
 800454a:	480d      	ldr	r0, [pc, #52]	; (8004580 <MX_TIM5_Init+0xa4>)
 800454c:	f007 f8ee 	bl	800b72c <HAL_TIM_Encoder_Init>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8004556:	f7fd f893 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800455a:	2300      	movs	r3, #0
 800455c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800455e:	2300      	movs	r3, #0
 8004560:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004562:	463b      	mov	r3, r7
 8004564:	4619      	mov	r1, r3
 8004566:	4806      	ldr	r0, [pc, #24]	; (8004580 <MX_TIM5_Init+0xa4>)
 8004568:	f008 f9a8 	bl	800c8bc <HAL_TIMEx_MasterConfigSynchronization>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8004572:	f7fd f885 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004576:	bf00      	nop
 8004578:	3730      	adds	r7, #48	; 0x30
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	240017c0 	.word	0x240017c0
 8004584:	40000c00 	.word	0x40000c00

08004588 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08a      	sub	sp, #40	; 0x28
 800458c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800458e:	f107 031c 	add.w	r3, r7, #28
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	605a      	str	r2, [r3, #4]
 8004598:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800459a:	463b      	mov	r3, r7
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	605a      	str	r2, [r3, #4]
 80045a2:	609a      	str	r2, [r3, #8]
 80045a4:	60da      	str	r2, [r3, #12]
 80045a6:	611a      	str	r2, [r3, #16]
 80045a8:	615a      	str	r2, [r3, #20]
 80045aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80045ac:	4b27      	ldr	r3, [pc, #156]	; (800464c <MX_TIM12_Init+0xc4>)
 80045ae:	4a28      	ldr	r2, [pc, #160]	; (8004650 <MX_TIM12_Init+0xc8>)
 80045b0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80045b2:	4b26      	ldr	r3, [pc, #152]	; (800464c <MX_TIM12_Init+0xc4>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045b8:	4b24      	ldr	r3, [pc, #144]	; (800464c <MX_TIM12_Init+0xc4>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80045be:	4b23      	ldr	r3, [pc, #140]	; (800464c <MX_TIM12_Init+0xc4>)
 80045c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045c4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045c6:	4b21      	ldr	r3, [pc, #132]	; (800464c <MX_TIM12_Init+0xc4>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045cc:	4b1f      	ldr	r3, [pc, #124]	; (800464c <MX_TIM12_Init+0xc4>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80045d2:	481e      	ldr	r0, [pc, #120]	; (800464c <MX_TIM12_Init+0xc4>)
 80045d4:	f006 ff36 	bl	800b444 <HAL_TIM_PWM_Init>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 80045de:	f7fd f84f 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 80045ea:	f107 031c 	add.w	r3, r7, #28
 80045ee:	4619      	mov	r1, r3
 80045f0:	4816      	ldr	r0, [pc, #88]	; (800464c <MX_TIM12_Init+0xc4>)
 80045f2:	f008 f963 	bl	800c8bc <HAL_TIMEx_MasterConfigSynchronization>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80045fc:	f7fd f840 	bl	8001680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004600:	2360      	movs	r3, #96	; 0x60
 8004602:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004608:	2300      	movs	r3, #0
 800460a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800460c:	2300      	movs	r3, #0
 800460e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004610:	463b      	mov	r3, r7
 8004612:	2200      	movs	r2, #0
 8004614:	4619      	mov	r1, r3
 8004616:	480d      	ldr	r0, [pc, #52]	; (800464c <MX_TIM12_Init+0xc4>)
 8004618:	f007 fadc 	bl	800bbd4 <HAL_TIM_PWM_ConfigChannel>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 8004622:	f7fd f82d 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004626:	463b      	mov	r3, r7
 8004628:	2204      	movs	r2, #4
 800462a:	4619      	mov	r1, r3
 800462c:	4807      	ldr	r0, [pc, #28]	; (800464c <MX_TIM12_Init+0xc4>)
 800462e:	f007 fad1 	bl	800bbd4 <HAL_TIM_PWM_ConfigChannel>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <MX_TIM12_Init+0xb4>
  {
    Error_Handler();
 8004638:	f7fd f822 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800463c:	4803      	ldr	r0, [pc, #12]	; (800464c <MX_TIM12_Init+0xc4>)
 800463e:	f000 fa59 	bl	8004af4 <HAL_TIM_MspPostInit>

}
 8004642:	bf00      	nop
 8004644:	3728      	adds	r7, #40	; 0x28
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	2400180c 	.word	0x2400180c
 8004650:	40001800 	.word	0x40001800

08004654 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b098      	sub	sp, #96	; 0x60
 8004658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800465a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	605a      	str	r2, [r3, #4]
 8004664:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004666:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	605a      	str	r2, [r3, #4]
 8004670:	609a      	str	r2, [r3, #8]
 8004672:	60da      	str	r2, [r3, #12]
 8004674:	611a      	str	r2, [r3, #16]
 8004676:	615a      	str	r2, [r3, #20]
 8004678:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800467a:	1d3b      	adds	r3, r7, #4
 800467c:	2234      	movs	r2, #52	; 0x34
 800467e:	2100      	movs	r1, #0
 8004680:	4618      	mov	r0, r3
 8004682:	f00a fc25 	bl	800eed0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004686:	4b3a      	ldr	r3, [pc, #232]	; (8004770 <MX_TIM15_Init+0x11c>)
 8004688:	4a3a      	ldr	r2, [pc, #232]	; (8004774 <MX_TIM15_Init+0x120>)
 800468a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800468c:	4b38      	ldr	r3, [pc, #224]	; (8004770 <MX_TIM15_Init+0x11c>)
 800468e:	2200      	movs	r2, #0
 8004690:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004692:	4b37      	ldr	r3, [pc, #220]	; (8004770 <MX_TIM15_Init+0x11c>)
 8004694:	2200      	movs	r2, #0
 8004696:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8004698:	4b35      	ldr	r3, [pc, #212]	; (8004770 <MX_TIM15_Init+0x11c>)
 800469a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800469e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046a0:	4b33      	ldr	r3, [pc, #204]	; (8004770 <MX_TIM15_Init+0x11c>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80046a6:	4b32      	ldr	r3, [pc, #200]	; (8004770 <MX_TIM15_Init+0x11c>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046ac:	4b30      	ldr	r3, [pc, #192]	; (8004770 <MX_TIM15_Init+0x11c>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80046b2:	482f      	ldr	r0, [pc, #188]	; (8004770 <MX_TIM15_Init+0x11c>)
 80046b4:	f006 fec6 	bl	800b444 <HAL_TIM_PWM_Init>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80046be:	f7fc ffdf 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046c2:	2300      	movs	r3, #0
 80046c4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046c6:	2300      	movs	r3, #0
 80046c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80046ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046ce:	4619      	mov	r1, r3
 80046d0:	4827      	ldr	r0, [pc, #156]	; (8004770 <MX_TIM15_Init+0x11c>)
 80046d2:	f008 f8f3 	bl	800c8bc <HAL_TIMEx_MasterConfigSynchronization>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80046dc:	f7fc ffd0 	bl	8001680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046e0:	2360      	movs	r3, #96	; 0x60
 80046e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80046e4:	2300      	movs	r3, #0
 80046e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046e8:	2300      	movs	r3, #0
 80046ea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80046ec:	2300      	movs	r3, #0
 80046ee:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046f0:	2300      	movs	r3, #0
 80046f2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80046f4:	2300      	movs	r3, #0
 80046f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80046f8:	2300      	movs	r3, #0
 80046fa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80046fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004700:	2200      	movs	r2, #0
 8004702:	4619      	mov	r1, r3
 8004704:	481a      	ldr	r0, [pc, #104]	; (8004770 <MX_TIM15_Init+0x11c>)
 8004706:	f007 fa65 	bl	800bbd4 <HAL_TIM_PWM_ConfigChannel>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8004710:	f7fc ffb6 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004714:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004718:	2204      	movs	r2, #4
 800471a:	4619      	mov	r1, r3
 800471c:	4814      	ldr	r0, [pc, #80]	; (8004770 <MX_TIM15_Init+0x11c>)
 800471e:	f007 fa59 	bl	800bbd4 <HAL_TIM_PWM_ConfigChannel>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8004728:	f7fc ffaa 	bl	8001680 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800472c:	2300      	movs	r3, #0
 800472e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004730:	2300      	movs	r3, #0
 8004732:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004744:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800474a:	2300      	movs	r3, #0
 800474c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800474e:	1d3b      	adds	r3, r7, #4
 8004750:	4619      	mov	r1, r3
 8004752:	4807      	ldr	r0, [pc, #28]	; (8004770 <MX_TIM15_Init+0x11c>)
 8004754:	f008 f94e 	bl	800c9f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800475e:	f7fc ff8f 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8004762:	4803      	ldr	r0, [pc, #12]	; (8004770 <MX_TIM15_Init+0x11c>)
 8004764:	f000 f9c6 	bl	8004af4 <HAL_TIM_MspPostInit>

}
 8004768:	bf00      	nop
 800476a:	3760      	adds	r7, #96	; 0x60
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	24001858 	.word	0x24001858
 8004774:	40014000 	.word	0x40014000

08004778 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800477e:	f107 0310 	add.w	r3, r7, #16
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	605a      	str	r2, [r3, #4]
 8004788:	609a      	str	r2, [r3, #8]
 800478a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800478c:	1d3b      	adds	r3, r7, #4
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	605a      	str	r2, [r3, #4]
 8004794:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8004796:	4b1d      	ldr	r3, [pc, #116]	; (800480c <MX_TIM23_Init+0x94>)
 8004798:	4a1d      	ldr	r2, [pc, #116]	; (8004810 <MX_TIM23_Init+0x98>)
 800479a:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 27;
 800479c:	4b1b      	ldr	r3, [pc, #108]	; (800480c <MX_TIM23_Init+0x94>)
 800479e:	221b      	movs	r2, #27
 80047a0:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047a2:	4b1a      	ldr	r3, [pc, #104]	; (800480c <MX_TIM23_Init+0x94>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 60000;
 80047a8:	4b18      	ldr	r3, [pc, #96]	; (800480c <MX_TIM23_Init+0x94>)
 80047aa:	f64e 2260 	movw	r2, #60000	; 0xea60
 80047ae:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047b0:	4b16      	ldr	r3, [pc, #88]	; (800480c <MX_TIM23_Init+0x94>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047b6:	4b15      	ldr	r3, [pc, #84]	; (800480c <MX_TIM23_Init+0x94>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 80047bc:	4813      	ldr	r0, [pc, #76]	; (800480c <MX_TIM23_Init+0x94>)
 80047be:	f006 fd63 	bl	800b288 <HAL_TIM_Base_Init>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <MX_TIM23_Init+0x54>
  {
    Error_Handler();
 80047c8:	f7fc ff5a 	bl	8001680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 80047d2:	f107 0310 	add.w	r3, r7, #16
 80047d6:	4619      	mov	r1, r3
 80047d8:	480c      	ldr	r0, [pc, #48]	; (800480c <MX_TIM23_Init+0x94>)
 80047da:	f007 fb0f 	bl	800bdfc <HAL_TIM_ConfigClockSource>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <MX_TIM23_Init+0x70>
  {
    Error_Handler();
 80047e4:	f7fc ff4c 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047e8:	2300      	movs	r3, #0
 80047ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80047f0:	1d3b      	adds	r3, r7, #4
 80047f2:	4619      	mov	r1, r3
 80047f4:	4805      	ldr	r0, [pc, #20]	; (800480c <MX_TIM23_Init+0x94>)
 80047f6:	f008 f861 	bl	800c8bc <HAL_TIMEx_MasterConfigSynchronization>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <MX_TIM23_Init+0x8c>
  {
    Error_Handler();
 8004800:	f7fc ff3e 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8004804:	bf00      	nop
 8004806:	3720      	adds	r7, #32
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	240018a4 	.word	0x240018a4
 8004810:	4000e000 	.word	0x4000e000

08004814 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b090      	sub	sp, #64	; 0x40
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800481c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	605a      	str	r2, [r3, #4]
 8004826:	609a      	str	r2, [r3, #8]
 8004828:	60da      	str	r2, [r3, #12]
 800482a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004834:	d14e      	bne.n	80048d4 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004836:	4b77      	ldr	r3, [pc, #476]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 8004838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800483c:	4a75      	ldr	r2, [pc, #468]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 800483e:	f043 0301 	orr.w	r3, r3, #1
 8004842:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004846:	4b73      	ldr	r3, [pc, #460]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 8004848:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	62bb      	str	r3, [r7, #40]	; 0x28
 8004852:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004854:	4b6f      	ldr	r3, [pc, #444]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 8004856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800485a:	4a6e      	ldr	r2, [pc, #440]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004864:	4b6b      	ldr	r3, [pc, #428]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 8004866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004872:	4b68      	ldr	r3, [pc, #416]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 8004874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004878:	4a66      	ldr	r2, [pc, #408]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 800487a:	f043 0302 	orr.w	r3, r3, #2
 800487e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004882:	4b64      	ldr	r3, [pc, #400]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 8004884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	623b      	str	r3, [r7, #32]
 800488e:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004890:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004896:	2302      	movs	r3, #2
 8004898:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489a:	2300      	movs	r3, #0
 800489c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800489e:	2300      	movs	r3, #0
 80048a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048a2:	2301      	movs	r3, #1
 80048a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048aa:	4619      	mov	r1, r3
 80048ac:	485a      	ldr	r0, [pc, #360]	; (8004a18 <HAL_TIM_Encoder_MspInit+0x204>)
 80048ae:	f003 fcc5 	bl	800823c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80048b2:	2308      	movs	r3, #8
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b6:	2302      	movs	r3, #2
 80048b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ba:	2300      	movs	r3, #0
 80048bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048be:	2300      	movs	r3, #0
 80048c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048c2:	2301      	movs	r3, #1
 80048c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048ca:	4619      	mov	r1, r3
 80048cc:	4853      	ldr	r0, [pc, #332]	; (8004a1c <HAL_TIM_Encoder_MspInit+0x208>)
 80048ce:	f003 fcb5 	bl	800823c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80048d2:	e09b      	b.n	8004a0c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(tim_encoderHandle->Instance==TIM3)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a51      	ldr	r2, [pc, #324]	; (8004a20 <HAL_TIM_Encoder_MspInit+0x20c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d12e      	bne.n	800493c <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048de:	4b4d      	ldr	r3, [pc, #308]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 80048e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048e4:	4a4b      	ldr	r2, [pc, #300]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 80048e6:	f043 0302 	orr.w	r3, r3, #2
 80048ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80048ee:	4b49      	ldr	r3, [pc, #292]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 80048f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	61fb      	str	r3, [r7, #28]
 80048fa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048fc:	4b45      	ldr	r3, [pc, #276]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 80048fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004902:	4a44      	ldr	r2, [pc, #272]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 8004904:	f043 0302 	orr.w	r3, r3, #2
 8004908:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800490c:	4b41      	ldr	r3, [pc, #260]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 800490e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	61bb      	str	r3, [r7, #24]
 8004918:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800491a:	2330      	movs	r3, #48	; 0x30
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800491e:	2302      	movs	r3, #2
 8004920:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004922:	2300      	movs	r3, #0
 8004924:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004926:	2300      	movs	r3, #0
 8004928:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800492a:	2302      	movs	r3, #2
 800492c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800492e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004932:	4619      	mov	r1, r3
 8004934:	4839      	ldr	r0, [pc, #228]	; (8004a1c <HAL_TIM_Encoder_MspInit+0x208>)
 8004936:	f003 fc81 	bl	800823c <HAL_GPIO_Init>
}
 800493a:	e067      	b.n	8004a0c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(tim_encoderHandle->Instance==TIM4)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a38      	ldr	r2, [pc, #224]	; (8004a24 <HAL_TIM_Encoder_MspInit+0x210>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d12f      	bne.n	80049a6 <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004946:	4b33      	ldr	r3, [pc, #204]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 8004948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800494c:	4a31      	ldr	r2, [pc, #196]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 800494e:	f043 0304 	orr.w	r3, r3, #4
 8004952:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004956:	4b2f      	ldr	r3, [pc, #188]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 8004958:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004964:	4b2b      	ldr	r3, [pc, #172]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 8004966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800496a:	4a2a      	ldr	r2, [pc, #168]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 800496c:	f043 0308 	orr.w	r3, r3, #8
 8004970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004974:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 8004976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004982:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004988:	2302      	movs	r3, #2
 800498a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498c:	2300      	movs	r3, #0
 800498e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004990:	2300      	movs	r3, #0
 8004992:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004994:	2302      	movs	r3, #2
 8004996:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800499c:	4619      	mov	r1, r3
 800499e:	4822      	ldr	r0, [pc, #136]	; (8004a28 <HAL_TIM_Encoder_MspInit+0x214>)
 80049a0:	f003 fc4c 	bl	800823c <HAL_GPIO_Init>
}
 80049a4:	e032      	b.n	8004a0c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(tim_encoderHandle->Instance==TIM5)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a20      	ldr	r2, [pc, #128]	; (8004a2c <HAL_TIM_Encoder_MspInit+0x218>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d12d      	bne.n	8004a0c <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80049b0:	4b18      	ldr	r3, [pc, #96]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 80049b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049b6:	4a17      	ldr	r2, [pc, #92]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 80049b8:	f043 0308 	orr.w	r3, r3, #8
 80049bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80049c0:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 80049c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049ce:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 80049d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049d4:	4a0f      	ldr	r2, [pc, #60]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049de:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <HAL_TIM_Encoder_MspInit+0x200>)
 80049e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	60bb      	str	r3, [r7, #8]
 80049ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80049ec:	2303      	movs	r3, #3
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f0:	2302      	movs	r3, #2
 80049f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049f8:	2300      	movs	r3, #0
 80049fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80049fc:	2302      	movs	r3, #2
 80049fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a04:	4619      	mov	r1, r3
 8004a06:	4804      	ldr	r0, [pc, #16]	; (8004a18 <HAL_TIM_Encoder_MspInit+0x204>)
 8004a08:	f003 fc18 	bl	800823c <HAL_GPIO_Init>
}
 8004a0c:	bf00      	nop
 8004a0e:	3740      	adds	r7, #64	; 0x40
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	58024400 	.word	0x58024400
 8004a18:	58020000 	.word	0x58020000
 8004a1c:	58020400 	.word	0x58020400
 8004a20:	40000400 	.word	0x40000400
 8004a24:	40000800 	.word	0x40000800
 8004a28:	58020c00 	.word	0x58020c00
 8004a2c:	40000c00 	.word	0x40000c00

08004a30 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a16      	ldr	r2, [pc, #88]	; (8004a98 <HAL_TIM_PWM_MspInit+0x68>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d10f      	bne.n	8004a62 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004a42:	4b16      	ldr	r3, [pc, #88]	; (8004a9c <HAL_TIM_PWM_MspInit+0x6c>)
 8004a44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a48:	4a14      	ldr	r2, [pc, #80]	; (8004a9c <HAL_TIM_PWM_MspInit+0x6c>)
 8004a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004a52:	4b12      	ldr	r3, [pc, #72]	; (8004a9c <HAL_TIM_PWM_MspInit+0x6c>)
 8004a54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004a60:	e013      	b.n	8004a8a <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM15)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a0e      	ldr	r2, [pc, #56]	; (8004aa0 <HAL_TIM_PWM_MspInit+0x70>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d10e      	bne.n	8004a8a <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <HAL_TIM_PWM_MspInit+0x6c>)
 8004a6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <HAL_TIM_PWM_MspInit+0x6c>)
 8004a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a78:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004a7c:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <HAL_TIM_PWM_MspInit+0x6c>)
 8004a7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a86:	60bb      	str	r3, [r7, #8]
 8004a88:	68bb      	ldr	r3, [r7, #8]
}
 8004a8a:	bf00      	nop
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40001800 	.word	0x40001800
 8004a9c:	58024400 	.word	0x58024400
 8004aa0:	40014000 	.word	0x40014000

08004aa4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM23)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a0e      	ldr	r2, [pc, #56]	; (8004aec <HAL_TIM_Base_MspInit+0x48>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d116      	bne.n	8004ae4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* TIM23 clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 8004ab6:	4b0e      	ldr	r3, [pc, #56]	; (8004af0 <HAL_TIM_Base_MspInit+0x4c>)
 8004ab8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004abc:	4a0c      	ldr	r2, [pc, #48]	; (8004af0 <HAL_TIM_Base_MspInit+0x4c>)
 8004abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ac2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <HAL_TIM_Base_MspInit+0x4c>)
 8004ac8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	68fb      	ldr	r3, [r7, #12]

    /* TIM23 interrupt Init */
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	20a1      	movs	r0, #161	; 0xa1
 8004ada:	f000 fb7c 	bl	80051d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8004ade:	20a1      	movs	r0, #161	; 0xa1
 8004ae0:	f000 fb93 	bl	800520a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	4000e000 	.word	0x4000e000
 8004af0:	58024400 	.word	0x58024400

08004af4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08a      	sub	sp, #40	; 0x28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004afc:	f107 0314 	add.w	r3, r7, #20
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	609a      	str	r2, [r3, #8]
 8004b08:	60da      	str	r2, [r3, #12]
 8004b0a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a25      	ldr	r2, [pc, #148]	; (8004ba8 <HAL_TIM_MspPostInit+0xb4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d120      	bne.n	8004b58 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b16:	4b25      	ldr	r3, [pc, #148]	; (8004bac <HAL_TIM_MspPostInit+0xb8>)
 8004b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b1c:	4a23      	ldr	r2, [pc, #140]	; (8004bac <HAL_TIM_MspPostInit+0xb8>)
 8004b1e:	f043 0302 	orr.w	r3, r3, #2
 8004b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b26:	4b21      	ldr	r3, [pc, #132]	; (8004bac <HAL_TIM_MspPostInit+0xb8>)
 8004b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004b34:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b42:	2300      	movs	r3, #0
 8004b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8004b46:	2302      	movs	r3, #2
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b4a:	f107 0314 	add.w	r3, r7, #20
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4817      	ldr	r0, [pc, #92]	; (8004bb0 <HAL_TIM_MspPostInit+0xbc>)
 8004b52:	f003 fb73 	bl	800823c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004b56:	e023      	b.n	8004ba0 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM15)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a15      	ldr	r2, [pc, #84]	; (8004bb4 <HAL_TIM_MspPostInit+0xc0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d11e      	bne.n	8004ba0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b62:	4b12      	ldr	r3, [pc, #72]	; (8004bac <HAL_TIM_MspPostInit+0xb8>)
 8004b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b68:	4a10      	ldr	r2, [pc, #64]	; (8004bac <HAL_TIM_MspPostInit+0xb8>)
 8004b6a:	f043 0310 	orr.w	r3, r3, #16
 8004b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b72:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <HAL_TIM_MspPostInit+0xb8>)
 8004b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004b80:	2360      	movs	r3, #96	; 0x60
 8004b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b84:	2302      	movs	r3, #2
 8004b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004b90:	2304      	movs	r3, #4
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b94:	f107 0314 	add.w	r3, r7, #20
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4807      	ldr	r0, [pc, #28]	; (8004bb8 <HAL_TIM_MspPostInit+0xc4>)
 8004b9c:	f003 fb4e 	bl	800823c <HAL_GPIO_Init>
}
 8004ba0:	bf00      	nop
 8004ba2:	3728      	adds	r7, #40	; 0x28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40001800 	.word	0x40001800
 8004bac:	58024400 	.word	0x58024400
 8004bb0:	58020400 	.word	0x58020400
 8004bb4:	40014000 	.word	0x40014000
 8004bb8:	58021000 	.word	0x58021000

08004bbc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004bc0:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <MX_USART1_UART_Init+0x90>)
 8004bc2:	4a23      	ldr	r2, [pc, #140]	; (8004c50 <MX_USART1_UART_Init+0x94>)
 8004bc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004bc6:	4b21      	ldr	r3, [pc, #132]	; (8004c4c <MX_USART1_UART_Init+0x90>)
 8004bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004bcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004bce:	4b1f      	ldr	r3, [pc, #124]	; (8004c4c <MX_USART1_UART_Init+0x90>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004bd4:	4b1d      	ldr	r3, [pc, #116]	; (8004c4c <MX_USART1_UART_Init+0x90>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004bda:	4b1c      	ldr	r3, [pc, #112]	; (8004c4c <MX_USART1_UART_Init+0x90>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004be0:	4b1a      	ldr	r3, [pc, #104]	; (8004c4c <MX_USART1_UART_Init+0x90>)
 8004be2:	220c      	movs	r2, #12
 8004be4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004be6:	4b19      	ldr	r3, [pc, #100]	; (8004c4c <MX_USART1_UART_Init+0x90>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bec:	4b17      	ldr	r3, [pc, #92]	; (8004c4c <MX_USART1_UART_Init+0x90>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bf2:	4b16      	ldr	r3, [pc, #88]	; (8004c4c <MX_USART1_UART_Init+0x90>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004bf8:	4b14      	ldr	r3, [pc, #80]	; (8004c4c <MX_USART1_UART_Init+0x90>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bfe:	4b13      	ldr	r3, [pc, #76]	; (8004c4c <MX_USART1_UART_Init+0x90>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004c04:	4811      	ldr	r0, [pc, #68]	; (8004c4c <MX_USART1_UART_Init+0x90>)
 8004c06:	f007 ffb3 	bl	800cb70 <HAL_UART_Init>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004c10:	f7fc fd36 	bl	8001680 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004c14:	2100      	movs	r1, #0
 8004c16:	480d      	ldr	r0, [pc, #52]	; (8004c4c <MX_USART1_UART_Init+0x90>)
 8004c18:	f00a f83c 	bl	800ec94 <HAL_UARTEx_SetTxFifoThreshold>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004c22:	f7fc fd2d 	bl	8001680 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004c26:	2100      	movs	r1, #0
 8004c28:	4808      	ldr	r0, [pc, #32]	; (8004c4c <MX_USART1_UART_Init+0x90>)
 8004c2a:	f00a f871 	bl	800ed10 <HAL_UARTEx_SetRxFifoThreshold>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004c34:	f7fc fd24 	bl	8001680 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004c38:	4804      	ldr	r0, [pc, #16]	; (8004c4c <MX_USART1_UART_Init+0x90>)
 8004c3a:	f009 fff2 	bl	800ec22 <HAL_UARTEx_DisableFifoMode>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004c44:	f7fc fd1c 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004c48:	bf00      	nop
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	240018f0 	.word	0x240018f0
 8004c50:	40011000 	.word	0x40011000

08004c54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b0b8      	sub	sp, #224	; 0xe0
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	605a      	str	r2, [r3, #4]
 8004c66:	609a      	str	r2, [r3, #8]
 8004c68:	60da      	str	r2, [r3, #12]
 8004c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c6c:	f107 0310 	add.w	r3, r7, #16
 8004c70:	22b8      	movs	r2, #184	; 0xb8
 8004c72:	2100      	movs	r1, #0
 8004c74:	4618      	mov	r0, r3
 8004c76:	f00a f92b 	bl	800eed0 <memset>
  if(uartHandle->Instance==USART1)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a5a      	ldr	r2, [pc, #360]	; (8004de8 <HAL_UART_MspInit+0x194>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	f040 80ad 	bne.w	8004de0 <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004c86:	f04f 0201 	mov.w	r2, #1
 8004c8a:	f04f 0300 	mov.w	r3, #0
 8004c8e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004c92:	2300      	movs	r3, #0
 8004c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c98:	f107 0310 	add.w	r3, r7, #16
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f004 fd31 	bl	8009704 <HAL_RCCEx_PeriphCLKConfig>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8004ca8:	f7fc fcea 	bl	8001680 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004cac:	4b4f      	ldr	r3, [pc, #316]	; (8004dec <HAL_UART_MspInit+0x198>)
 8004cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cb2:	4a4e      	ldr	r2, [pc, #312]	; (8004dec <HAL_UART_MspInit+0x198>)
 8004cb4:	f043 0310 	orr.w	r3, r3, #16
 8004cb8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004cbc:	4b4b      	ldr	r3, [pc, #300]	; (8004dec <HAL_UART_MspInit+0x198>)
 8004cbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cc2:	f003 0310 	and.w	r3, r3, #16
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cca:	4b48      	ldr	r3, [pc, #288]	; (8004dec <HAL_UART_MspInit+0x198>)
 8004ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cd0:	4a46      	ldr	r2, [pc, #280]	; (8004dec <HAL_UART_MspInit+0x198>)
 8004cd2:	f043 0301 	orr.w	r3, r3, #1
 8004cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004cda:	4b44      	ldr	r3, [pc, #272]	; (8004dec <HAL_UART_MspInit+0x198>)
 8004cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	60bb      	str	r3, [r7, #8]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004ce8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004cec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d02:	2307      	movs	r3, #7
 8004d04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4838      	ldr	r0, [pc, #224]	; (8004df0 <HAL_UART_MspInit+0x19c>)
 8004d10:	f003 fa94 	bl	800823c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8004d14:	4b37      	ldr	r3, [pc, #220]	; (8004df4 <HAL_UART_MspInit+0x1a0>)
 8004d16:	4a38      	ldr	r2, [pc, #224]	; (8004df8 <HAL_UART_MspInit+0x1a4>)
 8004d18:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004d1a:	4b36      	ldr	r3, [pc, #216]	; (8004df4 <HAL_UART_MspInit+0x1a0>)
 8004d1c:	2229      	movs	r2, #41	; 0x29
 8004d1e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d20:	4b34      	ldr	r3, [pc, #208]	; (8004df4 <HAL_UART_MspInit+0x1a0>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d26:	4b33      	ldr	r3, [pc, #204]	; (8004df4 <HAL_UART_MspInit+0x1a0>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d2c:	4b31      	ldr	r3, [pc, #196]	; (8004df4 <HAL_UART_MspInit+0x1a0>)
 8004d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d32:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d34:	4b2f      	ldr	r3, [pc, #188]	; (8004df4 <HAL_UART_MspInit+0x1a0>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d3a:	4b2e      	ldr	r3, [pc, #184]	; (8004df4 <HAL_UART_MspInit+0x1a0>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004d40:	4b2c      	ldr	r3, [pc, #176]	; (8004df4 <HAL_UART_MspInit+0x1a0>)
 8004d42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d46:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004d48:	4b2a      	ldr	r3, [pc, #168]	; (8004df4 <HAL_UART_MspInit+0x1a0>)
 8004d4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d4e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d50:	4b28      	ldr	r3, [pc, #160]	; (8004df4 <HAL_UART_MspInit+0x1a0>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004d56:	4827      	ldr	r0, [pc, #156]	; (8004df4 <HAL_UART_MspInit+0x1a0>)
 8004d58:	f000 fa80 	bl	800525c <HAL_DMA_Init>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8004d62:	f7fc fc8d 	bl	8001680 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a22      	ldr	r2, [pc, #136]	; (8004df4 <HAL_UART_MspInit+0x1a0>)
 8004d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004d6e:	4a21      	ldr	r2, [pc, #132]	; (8004df4 <HAL_UART_MspInit+0x1a0>)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8004d74:	4b21      	ldr	r3, [pc, #132]	; (8004dfc <HAL_UART_MspInit+0x1a8>)
 8004d76:	4a22      	ldr	r2, [pc, #136]	; (8004e00 <HAL_UART_MspInit+0x1ac>)
 8004d78:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004d7a:	4b20      	ldr	r3, [pc, #128]	; (8004dfc <HAL_UART_MspInit+0x1a8>)
 8004d7c:	222a      	movs	r2, #42	; 0x2a
 8004d7e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d80:	4b1e      	ldr	r3, [pc, #120]	; (8004dfc <HAL_UART_MspInit+0x1a8>)
 8004d82:	2240      	movs	r2, #64	; 0x40
 8004d84:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d86:	4b1d      	ldr	r3, [pc, #116]	; (8004dfc <HAL_UART_MspInit+0x1a8>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d8c:	4b1b      	ldr	r3, [pc, #108]	; (8004dfc <HAL_UART_MspInit+0x1a8>)
 8004d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d92:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d94:	4b19      	ldr	r3, [pc, #100]	; (8004dfc <HAL_UART_MspInit+0x1a8>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d9a:	4b18      	ldr	r3, [pc, #96]	; (8004dfc <HAL_UART_MspInit+0x1a8>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004da0:	4b16      	ldr	r3, [pc, #88]	; (8004dfc <HAL_UART_MspInit+0x1a8>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004da6:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <HAL_UART_MspInit+0x1a8>)
 8004da8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004dac:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004dae:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <HAL_UART_MspInit+0x1a8>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004db4:	4811      	ldr	r0, [pc, #68]	; (8004dfc <HAL_UART_MspInit+0x1a8>)
 8004db6:	f000 fa51 	bl	800525c <HAL_DMA_Init>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8004dc0:	f7fc fc5e 	bl	8001680 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a0d      	ldr	r2, [pc, #52]	; (8004dfc <HAL_UART_MspInit+0x1a8>)
 8004dc8:	67da      	str	r2, [r3, #124]	; 0x7c
 8004dca:	4a0c      	ldr	r2, [pc, #48]	; (8004dfc <HAL_UART_MspInit+0x1a8>)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	2025      	movs	r0, #37	; 0x25
 8004dd6:	f000 f9fe 	bl	80051d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004dda:	2025      	movs	r0, #37	; 0x25
 8004ddc:	f000 fa15 	bl	800520a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004de0:	bf00      	nop
 8004de2:	37e0      	adds	r7, #224	; 0xe0
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40011000 	.word	0x40011000
 8004dec:	58024400 	.word	0x58024400
 8004df0:	58020000 	.word	0x58020000
 8004df4:	24001984 	.word	0x24001984
 8004df8:	40020010 	.word	0x40020010
 8004dfc:	240019fc 	.word	0x240019fc
 8004e00:	40020028 	.word	0x40020028

08004e04 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a10      	ldr	r2, [pc, #64]	; (8004e54 <HAL_UART_MspDeInit+0x50>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d11a      	bne.n	8004e4c <HAL_UART_MspDeInit+0x48>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8004e16:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <HAL_UART_MspDeInit+0x54>)
 8004e18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e1c:	4a0e      	ldr	r2, [pc, #56]	; (8004e58 <HAL_UART_MspDeInit+0x54>)
 8004e1e:	f023 0310 	bic.w	r3, r3, #16
 8004e22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8004e26:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e2a:	480c      	ldr	r0, [pc, #48]	; (8004e5c <HAL_UART_MspDeInit+0x58>)
 8004e2c:	f003 fbae 	bl	800858c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fd6a 	bl	8005910 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 fd65 	bl	8005910 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8004e46:	2025      	movs	r0, #37	; 0x25
 8004e48:	f000 f9ed 	bl	8005226 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8004e4c:	bf00      	nop
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	40011000 	.word	0x40011000
 8004e58:	58024400 	.word	0x58024400
 8004e5c:	58020000 	.word	0x58020000

08004e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004e64:	f7ff f9c2 	bl	80041ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e68:	480c      	ldr	r0, [pc, #48]	; (8004e9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004e6a:	490d      	ldr	r1, [pc, #52]	; (8004ea0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004e6c:	4a0d      	ldr	r2, [pc, #52]	; (8004ea4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e70:	e002      	b.n	8004e78 <LoopCopyDataInit>

08004e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e76:	3304      	adds	r3, #4

08004e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e7c:	d3f9      	bcc.n	8004e72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ea8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e80:	4c0a      	ldr	r4, [pc, #40]	; (8004eac <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e84:	e001      	b.n	8004e8a <LoopFillZerobss>

08004e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e88:	3204      	adds	r2, #4

08004e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e8c:	d3fb      	bcc.n	8004e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e8e:	f009 ffed 	bl	800ee6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e92:	f7fc fad9 	bl	8001448 <main>
  bx  lr
 8004e96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e98:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004e9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004ea0:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8004ea4:	0800f4fc 	.word	0x0800f4fc
  ldr r2, =_sbss
 8004ea8:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8004eac:	24001a88 	.word	0x24001a88

08004eb0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004eb0:	e7fe      	b.n	8004eb0 <ADC3_IRQHandler>
	...

08004eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004eba:	2003      	movs	r0, #3
 8004ebc:	f000 f980 	bl	80051c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ec0:	f004 fa4a 	bl	8009358 <HAL_RCC_GetSysClockFreq>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	4b15      	ldr	r3, [pc, #84]	; (8004f1c <HAL_Init+0x68>)
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	0a1b      	lsrs	r3, r3, #8
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	4913      	ldr	r1, [pc, #76]	; (8004f20 <HAL_Init+0x6c>)
 8004ed2:	5ccb      	ldrb	r3, [r1, r3]
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8004edc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ede:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <HAL_Init+0x68>)
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	4a0e      	ldr	r2, [pc, #56]	; (8004f20 <HAL_Init+0x6c>)
 8004ee8:	5cd3      	ldrb	r3, [r2, r3]
 8004eea:	f003 031f 	and.w	r3, r3, #31
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef4:	4a0b      	ldr	r2, [pc, #44]	; (8004f24 <HAL_Init+0x70>)
 8004ef6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ef8:	4a0b      	ldr	r2, [pc, #44]	; (8004f28 <HAL_Init+0x74>)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004efe:	2000      	movs	r0, #0
 8004f00:	f000 f814 	bl	8004f2c <HAL_InitTick>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e002      	b.n	8004f14 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004f0e:	f7ff f8a9 	bl	8004064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	58024400 	.word	0x58024400
 8004f20:	0800f4a8 	.word	0x0800f4a8
 8004f24:	24000004 	.word	0x24000004
 8004f28:	24000000 	.word	0x24000000

08004f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004f34:	4b15      	ldr	r3, [pc, #84]	; (8004f8c <HAL_InitTick+0x60>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e021      	b.n	8004f84 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004f40:	4b13      	ldr	r3, [pc, #76]	; (8004f90 <HAL_InitTick+0x64>)
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	4b11      	ldr	r3, [pc, #68]	; (8004f8c <HAL_InitTick+0x60>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f973 	bl	8005242 <HAL_SYSTICK_Config>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e00e      	b.n	8004f84 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b0f      	cmp	r3, #15
 8004f6a:	d80a      	bhi.n	8004f82 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	f04f 30ff 	mov.w	r0, #4294967295
 8004f74:	f000 f92f 	bl	80051d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f78:	4a06      	ldr	r2, [pc, #24]	; (8004f94 <HAL_InitTick+0x68>)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e000      	b.n	8004f84 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	2400000c 	.word	0x2400000c
 8004f90:	24000000 	.word	0x24000000
 8004f94:	24000008 	.word	0x24000008

08004f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004f9c:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <HAL_IncTick+0x20>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <HAL_IncTick+0x24>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	4a04      	ldr	r2, [pc, #16]	; (8004fbc <HAL_IncTick+0x24>)
 8004faa:	6013      	str	r3, [r2, #0]
}
 8004fac:	bf00      	nop
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	2400000c 	.word	0x2400000c
 8004fbc:	24001a74 	.word	0x24001a74

08004fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8004fc4:	4b03      	ldr	r3, [pc, #12]	; (8004fd4 <HAL_GetTick+0x14>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	24001a74 	.word	0x24001a74

08004fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <__NVIC_SetPriorityGrouping+0x40>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005000:	4b06      	ldr	r3, [pc, #24]	; (800501c <__NVIC_SetPriorityGrouping+0x44>)
 8005002:	4313      	orrs	r3, r2
 8005004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005006:	4a04      	ldr	r2, [pc, #16]	; (8005018 <__NVIC_SetPriorityGrouping+0x40>)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	60d3      	str	r3, [r2, #12]
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	e000ed00 	.word	0xe000ed00
 800501c:	05fa0000 	.word	0x05fa0000

08005020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005024:	4b04      	ldr	r3, [pc, #16]	; (8005038 <__NVIC_GetPriorityGrouping+0x18>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	0a1b      	lsrs	r3, r3, #8
 800502a:	f003 0307 	and.w	r3, r3, #7
}
 800502e:	4618      	mov	r0, r3
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	e000ed00 	.word	0xe000ed00

0800503c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800504a:	2b00      	cmp	r3, #0
 800504c:	db0b      	blt.n	8005066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	f003 021f 	and.w	r2, r3, #31
 8005054:	4907      	ldr	r1, [pc, #28]	; (8005074 <__NVIC_EnableIRQ+0x38>)
 8005056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	2001      	movs	r0, #1
 800505e:	fa00 f202 	lsl.w	r2, r0, r2
 8005062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	e000e100 	.word	0xe000e100

08005078 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005086:	2b00      	cmp	r3, #0
 8005088:	db12      	blt.n	80050b0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800508a:	88fb      	ldrh	r3, [r7, #6]
 800508c:	f003 021f 	and.w	r2, r3, #31
 8005090:	490a      	ldr	r1, [pc, #40]	; (80050bc <__NVIC_DisableIRQ+0x44>)
 8005092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	2001      	movs	r0, #1
 800509a:	fa00 f202 	lsl.w	r2, r0, r2
 800509e:	3320      	adds	r3, #32
 80050a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80050a4:	f3bf 8f4f 	dsb	sy
}
 80050a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80050aa:	f3bf 8f6f 	isb	sy
}
 80050ae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	e000e100 	.word	0xe000e100

080050c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4603      	mov	r3, r0
 80050c8:	6039      	str	r1, [r7, #0]
 80050ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80050cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	db0a      	blt.n	80050ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	490c      	ldr	r1, [pc, #48]	; (800510c <__NVIC_SetPriority+0x4c>)
 80050da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050de:	0112      	lsls	r2, r2, #4
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	440b      	add	r3, r1
 80050e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050e8:	e00a      	b.n	8005100 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	4908      	ldr	r1, [pc, #32]	; (8005110 <__NVIC_SetPriority+0x50>)
 80050f0:	88fb      	ldrh	r3, [r7, #6]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	3b04      	subs	r3, #4
 80050f8:	0112      	lsls	r2, r2, #4
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	440b      	add	r3, r1
 80050fe:	761a      	strb	r2, [r3, #24]
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	e000e100 	.word	0xe000e100
 8005110:	e000ed00 	.word	0xe000ed00

08005114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005114:	b480      	push	{r7}
 8005116:	b089      	sub	sp, #36	; 0x24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f1c3 0307 	rsb	r3, r3, #7
 800512e:	2b04      	cmp	r3, #4
 8005130:	bf28      	it	cs
 8005132:	2304      	movcs	r3, #4
 8005134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	3304      	adds	r3, #4
 800513a:	2b06      	cmp	r3, #6
 800513c:	d902      	bls.n	8005144 <NVIC_EncodePriority+0x30>
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	3b03      	subs	r3, #3
 8005142:	e000      	b.n	8005146 <NVIC_EncodePriority+0x32>
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005148:	f04f 32ff 	mov.w	r2, #4294967295
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	43da      	mvns	r2, r3
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	401a      	ands	r2, r3
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800515c:	f04f 31ff 	mov.w	r1, #4294967295
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	fa01 f303 	lsl.w	r3, r1, r3
 8005166:	43d9      	mvns	r1, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800516c:	4313      	orrs	r3, r2
         );
}
 800516e:	4618      	mov	r0, r3
 8005170:	3724      	adds	r7, #36	; 0x24
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
	...

0800517c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3b01      	subs	r3, #1
 8005188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800518c:	d301      	bcc.n	8005192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800518e:	2301      	movs	r3, #1
 8005190:	e00f      	b.n	80051b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005192:	4a0a      	ldr	r2, [pc, #40]	; (80051bc <SysTick_Config+0x40>)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3b01      	subs	r3, #1
 8005198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800519a:	210f      	movs	r1, #15
 800519c:	f04f 30ff 	mov.w	r0, #4294967295
 80051a0:	f7ff ff8e 	bl	80050c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051a4:	4b05      	ldr	r3, [pc, #20]	; (80051bc <SysTick_Config+0x40>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051aa:	4b04      	ldr	r3, [pc, #16]	; (80051bc <SysTick_Config+0x40>)
 80051ac:	2207      	movs	r2, #7
 80051ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	e000e010 	.word	0xe000e010

080051c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff ff05 	bl	8004fd8 <__NVIC_SetPriorityGrouping>
}
 80051ce:	bf00      	nop
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b086      	sub	sp, #24
 80051da:	af00      	add	r7, sp, #0
 80051dc:	4603      	mov	r3, r0
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	607a      	str	r2, [r7, #4]
 80051e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80051e4:	f7ff ff1c 	bl	8005020 <__NVIC_GetPriorityGrouping>
 80051e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	6978      	ldr	r0, [r7, #20]
 80051f0:	f7ff ff90 	bl	8005114 <NVIC_EncodePriority>
 80051f4:	4602      	mov	r2, r0
 80051f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051fa:	4611      	mov	r1, r2
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff ff5f 	bl	80050c0 <__NVIC_SetPriority>
}
 8005202:	bf00      	nop
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b082      	sub	sp, #8
 800520e:	af00      	add	r7, sp, #0
 8005210:	4603      	mov	r3, r0
 8005212:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff ff0f 	bl	800503c <__NVIC_EnableIRQ>
}
 800521e:	bf00      	nop
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b082      	sub	sp, #8
 800522a:	af00      	add	r7, sp, #0
 800522c:	4603      	mov	r3, r0
 800522e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005230:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005234:	4618      	mov	r0, r3
 8005236:	f7ff ff1f 	bl	8005078 <__NVIC_DisableIRQ>
}
 800523a:	bf00      	nop
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7ff ff96 	bl	800517c <SysTick_Config>
 8005250:	4603      	mov	r3, r0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005264:	f7ff feac 	bl	8004fc0 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e314      	b.n	800589e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a66      	ldr	r2, [pc, #408]	; (8005414 <HAL_DMA_Init+0x1b8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d04a      	beq.n	8005314 <HAL_DMA_Init+0xb8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a65      	ldr	r2, [pc, #404]	; (8005418 <HAL_DMA_Init+0x1bc>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d045      	beq.n	8005314 <HAL_DMA_Init+0xb8>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a63      	ldr	r2, [pc, #396]	; (800541c <HAL_DMA_Init+0x1c0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d040      	beq.n	8005314 <HAL_DMA_Init+0xb8>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a62      	ldr	r2, [pc, #392]	; (8005420 <HAL_DMA_Init+0x1c4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d03b      	beq.n	8005314 <HAL_DMA_Init+0xb8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a60      	ldr	r2, [pc, #384]	; (8005424 <HAL_DMA_Init+0x1c8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d036      	beq.n	8005314 <HAL_DMA_Init+0xb8>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a5f      	ldr	r2, [pc, #380]	; (8005428 <HAL_DMA_Init+0x1cc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d031      	beq.n	8005314 <HAL_DMA_Init+0xb8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a5d      	ldr	r2, [pc, #372]	; (800542c <HAL_DMA_Init+0x1d0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d02c      	beq.n	8005314 <HAL_DMA_Init+0xb8>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a5c      	ldr	r2, [pc, #368]	; (8005430 <HAL_DMA_Init+0x1d4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d027      	beq.n	8005314 <HAL_DMA_Init+0xb8>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a5a      	ldr	r2, [pc, #360]	; (8005434 <HAL_DMA_Init+0x1d8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d022      	beq.n	8005314 <HAL_DMA_Init+0xb8>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a59      	ldr	r2, [pc, #356]	; (8005438 <HAL_DMA_Init+0x1dc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d01d      	beq.n	8005314 <HAL_DMA_Init+0xb8>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a57      	ldr	r2, [pc, #348]	; (800543c <HAL_DMA_Init+0x1e0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d018      	beq.n	8005314 <HAL_DMA_Init+0xb8>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a56      	ldr	r2, [pc, #344]	; (8005440 <HAL_DMA_Init+0x1e4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d013      	beq.n	8005314 <HAL_DMA_Init+0xb8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a54      	ldr	r2, [pc, #336]	; (8005444 <HAL_DMA_Init+0x1e8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00e      	beq.n	8005314 <HAL_DMA_Init+0xb8>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a53      	ldr	r2, [pc, #332]	; (8005448 <HAL_DMA_Init+0x1ec>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d009      	beq.n	8005314 <HAL_DMA_Init+0xb8>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a51      	ldr	r2, [pc, #324]	; (800544c <HAL_DMA_Init+0x1f0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d004      	beq.n	8005314 <HAL_DMA_Init+0xb8>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a50      	ldr	r2, [pc, #320]	; (8005450 <HAL_DMA_Init+0x1f4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d101      	bne.n	8005318 <HAL_DMA_Init+0xbc>
 8005314:	2301      	movs	r3, #1
 8005316:	e000      	b.n	800531a <HAL_DMA_Init+0xbe>
 8005318:	2300      	movs	r3, #0
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 813c 	beq.w	8005598 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a37      	ldr	r2, [pc, #220]	; (8005414 <HAL_DMA_Init+0x1b8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d04a      	beq.n	80053d0 <HAL_DMA_Init+0x174>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a36      	ldr	r2, [pc, #216]	; (8005418 <HAL_DMA_Init+0x1bc>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d045      	beq.n	80053d0 <HAL_DMA_Init+0x174>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a34      	ldr	r2, [pc, #208]	; (800541c <HAL_DMA_Init+0x1c0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d040      	beq.n	80053d0 <HAL_DMA_Init+0x174>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a33      	ldr	r2, [pc, #204]	; (8005420 <HAL_DMA_Init+0x1c4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d03b      	beq.n	80053d0 <HAL_DMA_Init+0x174>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a31      	ldr	r2, [pc, #196]	; (8005424 <HAL_DMA_Init+0x1c8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d036      	beq.n	80053d0 <HAL_DMA_Init+0x174>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a30      	ldr	r2, [pc, #192]	; (8005428 <HAL_DMA_Init+0x1cc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d031      	beq.n	80053d0 <HAL_DMA_Init+0x174>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a2e      	ldr	r2, [pc, #184]	; (800542c <HAL_DMA_Init+0x1d0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d02c      	beq.n	80053d0 <HAL_DMA_Init+0x174>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a2d      	ldr	r2, [pc, #180]	; (8005430 <HAL_DMA_Init+0x1d4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d027      	beq.n	80053d0 <HAL_DMA_Init+0x174>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a2b      	ldr	r2, [pc, #172]	; (8005434 <HAL_DMA_Init+0x1d8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d022      	beq.n	80053d0 <HAL_DMA_Init+0x174>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a2a      	ldr	r2, [pc, #168]	; (8005438 <HAL_DMA_Init+0x1dc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d01d      	beq.n	80053d0 <HAL_DMA_Init+0x174>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a28      	ldr	r2, [pc, #160]	; (800543c <HAL_DMA_Init+0x1e0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d018      	beq.n	80053d0 <HAL_DMA_Init+0x174>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a27      	ldr	r2, [pc, #156]	; (8005440 <HAL_DMA_Init+0x1e4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d013      	beq.n	80053d0 <HAL_DMA_Init+0x174>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a25      	ldr	r2, [pc, #148]	; (8005444 <HAL_DMA_Init+0x1e8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00e      	beq.n	80053d0 <HAL_DMA_Init+0x174>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a24      	ldr	r2, [pc, #144]	; (8005448 <HAL_DMA_Init+0x1ec>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d009      	beq.n	80053d0 <HAL_DMA_Init+0x174>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a22      	ldr	r2, [pc, #136]	; (800544c <HAL_DMA_Init+0x1f0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d004      	beq.n	80053d0 <HAL_DMA_Init+0x174>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a21      	ldr	r2, [pc, #132]	; (8005450 <HAL_DMA_Init+0x1f4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d108      	bne.n	80053e2 <HAL_DMA_Init+0x186>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0201 	bic.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	e007      	b.n	80053f2 <HAL_DMA_Init+0x196>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0201 	bic.w	r2, r2, #1
 80053f0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80053f2:	e02f      	b.n	8005454 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053f4:	f7ff fde4 	bl	8004fc0 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b05      	cmp	r3, #5
 8005400:	d928      	bls.n	8005454 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2220      	movs	r2, #32
 8005406:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2203      	movs	r2, #3
 800540c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e244      	b.n	800589e <HAL_DMA_Init+0x642>
 8005414:	40020010 	.word	0x40020010
 8005418:	40020028 	.word	0x40020028
 800541c:	40020040 	.word	0x40020040
 8005420:	40020058 	.word	0x40020058
 8005424:	40020070 	.word	0x40020070
 8005428:	40020088 	.word	0x40020088
 800542c:	400200a0 	.word	0x400200a0
 8005430:	400200b8 	.word	0x400200b8
 8005434:	40020410 	.word	0x40020410
 8005438:	40020428 	.word	0x40020428
 800543c:	40020440 	.word	0x40020440
 8005440:	40020458 	.word	0x40020458
 8005444:	40020470 	.word	0x40020470
 8005448:	40020488 	.word	0x40020488
 800544c:	400204a0 	.word	0x400204a0
 8005450:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1c8      	bne.n	80053f4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4b84      	ldr	r3, [pc, #528]	; (8005680 <HAL_DMA_Init+0x424>)
 800546e:	4013      	ands	r3, r2
 8005470:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800547a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005486:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005492:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d107      	bne.n	80054b8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	4313      	orrs	r3, r2
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2b28      	cmp	r3, #40	; 0x28
 80054be:	d903      	bls.n	80054c8 <HAL_DMA_Init+0x26c>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2b2e      	cmp	r3, #46	; 0x2e
 80054c6:	d91f      	bls.n	8005508 <HAL_DMA_Init+0x2ac>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2b3e      	cmp	r3, #62	; 0x3e
 80054ce:	d903      	bls.n	80054d8 <HAL_DMA_Init+0x27c>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	2b42      	cmp	r3, #66	; 0x42
 80054d6:	d917      	bls.n	8005508 <HAL_DMA_Init+0x2ac>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b46      	cmp	r3, #70	; 0x46
 80054de:	d903      	bls.n	80054e8 <HAL_DMA_Init+0x28c>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	2b48      	cmp	r3, #72	; 0x48
 80054e6:	d90f      	bls.n	8005508 <HAL_DMA_Init+0x2ac>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2b4e      	cmp	r3, #78	; 0x4e
 80054ee:	d903      	bls.n	80054f8 <HAL_DMA_Init+0x29c>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	2b52      	cmp	r3, #82	; 0x52
 80054f6:	d907      	bls.n	8005508 <HAL_DMA_Init+0x2ac>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	2b73      	cmp	r3, #115	; 0x73
 80054fe:	d905      	bls.n	800550c <HAL_DMA_Init+0x2b0>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	2b77      	cmp	r3, #119	; 0x77
 8005506:	d801      	bhi.n	800550c <HAL_DMA_Init+0x2b0>
 8005508:	2301      	movs	r3, #1
 800550a:	e000      	b.n	800550e <HAL_DMA_Init+0x2b2>
 800550c:	2300      	movs	r3, #0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005518:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f023 0307 	bic.w	r3, r3, #7
 8005530:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4313      	orrs	r3, r2
 800553a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	2b04      	cmp	r3, #4
 8005542:	d117      	bne.n	8005574 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	4313      	orrs	r3, r2
 800554c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00e      	beq.n	8005574 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f002 fce6 	bl	8007f28 <DMA_CheckFifoParam>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d008      	beq.n	8005574 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2240      	movs	r2, #64	; 0x40
 8005566:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e194      	b.n	800589e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f002 fc21 	bl	8007dc4 <DMA_CalcBaseAndBitshift>
 8005582:	4603      	mov	r3, r0
 8005584:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800558a:	f003 031f 	and.w	r3, r3, #31
 800558e:	223f      	movs	r2, #63	; 0x3f
 8005590:	409a      	lsls	r2, r3
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	609a      	str	r2, [r3, #8]
 8005596:	e0ca      	b.n	800572e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a39      	ldr	r2, [pc, #228]	; (8005684 <HAL_DMA_Init+0x428>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d022      	beq.n	80055e8 <HAL_DMA_Init+0x38c>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a38      	ldr	r2, [pc, #224]	; (8005688 <HAL_DMA_Init+0x42c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d01d      	beq.n	80055e8 <HAL_DMA_Init+0x38c>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a36      	ldr	r2, [pc, #216]	; (800568c <HAL_DMA_Init+0x430>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d018      	beq.n	80055e8 <HAL_DMA_Init+0x38c>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a35      	ldr	r2, [pc, #212]	; (8005690 <HAL_DMA_Init+0x434>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d013      	beq.n	80055e8 <HAL_DMA_Init+0x38c>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a33      	ldr	r2, [pc, #204]	; (8005694 <HAL_DMA_Init+0x438>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00e      	beq.n	80055e8 <HAL_DMA_Init+0x38c>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a32      	ldr	r2, [pc, #200]	; (8005698 <HAL_DMA_Init+0x43c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d009      	beq.n	80055e8 <HAL_DMA_Init+0x38c>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a30      	ldr	r2, [pc, #192]	; (800569c <HAL_DMA_Init+0x440>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_DMA_Init+0x38c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a2f      	ldr	r2, [pc, #188]	; (80056a0 <HAL_DMA_Init+0x444>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d101      	bne.n	80055ec <HAL_DMA_Init+0x390>
 80055e8:	2301      	movs	r3, #1
 80055ea:	e000      	b.n	80055ee <HAL_DMA_Init+0x392>
 80055ec:	2300      	movs	r3, #0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 8094 	beq.w	800571c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a22      	ldr	r2, [pc, #136]	; (8005684 <HAL_DMA_Init+0x428>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d021      	beq.n	8005642 <HAL_DMA_Init+0x3e6>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a21      	ldr	r2, [pc, #132]	; (8005688 <HAL_DMA_Init+0x42c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d01c      	beq.n	8005642 <HAL_DMA_Init+0x3e6>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a1f      	ldr	r2, [pc, #124]	; (800568c <HAL_DMA_Init+0x430>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d017      	beq.n	8005642 <HAL_DMA_Init+0x3e6>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a1e      	ldr	r2, [pc, #120]	; (8005690 <HAL_DMA_Init+0x434>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d012      	beq.n	8005642 <HAL_DMA_Init+0x3e6>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a1c      	ldr	r2, [pc, #112]	; (8005694 <HAL_DMA_Init+0x438>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d00d      	beq.n	8005642 <HAL_DMA_Init+0x3e6>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a1b      	ldr	r2, [pc, #108]	; (8005698 <HAL_DMA_Init+0x43c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d008      	beq.n	8005642 <HAL_DMA_Init+0x3e6>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a19      	ldr	r2, [pc, #100]	; (800569c <HAL_DMA_Init+0x440>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d003      	beq.n	8005642 <HAL_DMA_Init+0x3e6>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a18      	ldr	r2, [pc, #96]	; (80056a0 <HAL_DMA_Init+0x444>)
 8005640:	4293      	cmp	r3, r2
 8005642:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4b11      	ldr	r3, [pc, #68]	; (80056a4 <HAL_DMA_Init+0x448>)
 8005660:	4013      	ands	r3, r2
 8005662:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	2b40      	cmp	r3, #64	; 0x40
 800566a:	d01d      	beq.n	80056a8 <HAL_DMA_Init+0x44c>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b80      	cmp	r3, #128	; 0x80
 8005672:	d102      	bne.n	800567a <HAL_DMA_Init+0x41e>
 8005674:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005678:	e017      	b.n	80056aa <HAL_DMA_Init+0x44e>
 800567a:	2300      	movs	r3, #0
 800567c:	e015      	b.n	80056aa <HAL_DMA_Init+0x44e>
 800567e:	bf00      	nop
 8005680:	fe10803f 	.word	0xfe10803f
 8005684:	58025408 	.word	0x58025408
 8005688:	5802541c 	.word	0x5802541c
 800568c:	58025430 	.word	0x58025430
 8005690:	58025444 	.word	0x58025444
 8005694:	58025458 	.word	0x58025458
 8005698:	5802546c 	.word	0x5802546c
 800569c:	58025480 	.word	0x58025480
 80056a0:	58025494 	.word	0x58025494
 80056a4:	fffe000f 	.word	0xfffe000f
 80056a8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	68d2      	ldr	r2, [r2, #12]
 80056ae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80056b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80056b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80056c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80056c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80056d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80056d8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	461a      	mov	r2, r3
 80056ee:	4b6e      	ldr	r3, [pc, #440]	; (80058a8 <HAL_DMA_Init+0x64c>)
 80056f0:	4413      	add	r3, r2
 80056f2:	4a6e      	ldr	r2, [pc, #440]	; (80058ac <HAL_DMA_Init+0x650>)
 80056f4:	fba2 2303 	umull	r2, r3, r2, r3
 80056f8:	091b      	lsrs	r3, r3, #4
 80056fa:	009a      	lsls	r2, r3, #2
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f002 fb5f 	bl	8007dc4 <DMA_CalcBaseAndBitshift>
 8005706:	4603      	mov	r3, r0
 8005708:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800570e:	f003 031f 	and.w	r3, r3, #31
 8005712:	2201      	movs	r2, #1
 8005714:	409a      	lsls	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	605a      	str	r2, [r3, #4]
 800571a:	e008      	b.n	800572e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2240      	movs	r2, #64	; 0x40
 8005720:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2203      	movs	r2, #3
 8005726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e0b7      	b.n	800589e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a5f      	ldr	r2, [pc, #380]	; (80058b0 <HAL_DMA_Init+0x654>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d072      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a5d      	ldr	r2, [pc, #372]	; (80058b4 <HAL_DMA_Init+0x658>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d06d      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a5c      	ldr	r2, [pc, #368]	; (80058b8 <HAL_DMA_Init+0x65c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d068      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a5a      	ldr	r2, [pc, #360]	; (80058bc <HAL_DMA_Init+0x660>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d063      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a59      	ldr	r2, [pc, #356]	; (80058c0 <HAL_DMA_Init+0x664>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d05e      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a57      	ldr	r2, [pc, #348]	; (80058c4 <HAL_DMA_Init+0x668>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d059      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a56      	ldr	r2, [pc, #344]	; (80058c8 <HAL_DMA_Init+0x66c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d054      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a54      	ldr	r2, [pc, #336]	; (80058cc <HAL_DMA_Init+0x670>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d04f      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a53      	ldr	r2, [pc, #332]	; (80058d0 <HAL_DMA_Init+0x674>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d04a      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a51      	ldr	r2, [pc, #324]	; (80058d4 <HAL_DMA_Init+0x678>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d045      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a50      	ldr	r2, [pc, #320]	; (80058d8 <HAL_DMA_Init+0x67c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d040      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a4e      	ldr	r2, [pc, #312]	; (80058dc <HAL_DMA_Init+0x680>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d03b      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a4d      	ldr	r2, [pc, #308]	; (80058e0 <HAL_DMA_Init+0x684>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d036      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a4b      	ldr	r2, [pc, #300]	; (80058e4 <HAL_DMA_Init+0x688>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d031      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a4a      	ldr	r2, [pc, #296]	; (80058e8 <HAL_DMA_Init+0x68c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d02c      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a48      	ldr	r2, [pc, #288]	; (80058ec <HAL_DMA_Init+0x690>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d027      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a47      	ldr	r2, [pc, #284]	; (80058f0 <HAL_DMA_Init+0x694>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d022      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a45      	ldr	r2, [pc, #276]	; (80058f4 <HAL_DMA_Init+0x698>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d01d      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a44      	ldr	r2, [pc, #272]	; (80058f8 <HAL_DMA_Init+0x69c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d018      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a42      	ldr	r2, [pc, #264]	; (80058fc <HAL_DMA_Init+0x6a0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a41      	ldr	r2, [pc, #260]	; (8005900 <HAL_DMA_Init+0x6a4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00e      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a3f      	ldr	r2, [pc, #252]	; (8005904 <HAL_DMA_Init+0x6a8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d009      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a3e      	ldr	r2, [pc, #248]	; (8005908 <HAL_DMA_Init+0x6ac>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d004      	beq.n	800581e <HAL_DMA_Init+0x5c2>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a3c      	ldr	r2, [pc, #240]	; (800590c <HAL_DMA_Init+0x6b0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d101      	bne.n	8005822 <HAL_DMA_Init+0x5c6>
 800581e:	2301      	movs	r3, #1
 8005820:	e000      	b.n	8005824 <HAL_DMA_Init+0x5c8>
 8005822:	2300      	movs	r3, #0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d032      	beq.n	800588e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f002 fbf9 	bl	8008020 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	2b80      	cmp	r3, #128	; 0x80
 8005834:	d102      	bne.n	800583c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005850:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d010      	beq.n	800587c <HAL_DMA_Init+0x620>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b08      	cmp	r3, #8
 8005860:	d80c      	bhi.n	800587c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f002 fc76 	bl	8008154 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	e008      	b.n	800588e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	a7fdabf8 	.word	0xa7fdabf8
 80058ac:	cccccccd 	.word	0xcccccccd
 80058b0:	40020010 	.word	0x40020010
 80058b4:	40020028 	.word	0x40020028
 80058b8:	40020040 	.word	0x40020040
 80058bc:	40020058 	.word	0x40020058
 80058c0:	40020070 	.word	0x40020070
 80058c4:	40020088 	.word	0x40020088
 80058c8:	400200a0 	.word	0x400200a0
 80058cc:	400200b8 	.word	0x400200b8
 80058d0:	40020410 	.word	0x40020410
 80058d4:	40020428 	.word	0x40020428
 80058d8:	40020440 	.word	0x40020440
 80058dc:	40020458 	.word	0x40020458
 80058e0:	40020470 	.word	0x40020470
 80058e4:	40020488 	.word	0x40020488
 80058e8:	400204a0 	.word	0x400204a0
 80058ec:	400204b8 	.word	0x400204b8
 80058f0:	58025408 	.word	0x58025408
 80058f4:	5802541c 	.word	0x5802541c
 80058f8:	58025430 	.word	0x58025430
 80058fc:	58025444 	.word	0x58025444
 8005900:	58025458 	.word	0x58025458
 8005904:	5802546c 	.word	0x5802546c
 8005908:	58025480 	.word	0x58025480
 800590c:	58025494 	.word	0x58025494

08005910 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e1a8      	b.n	8005c74 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a82      	ldr	r2, [pc, #520]	; (8005b30 <HAL_DMA_DeInit+0x220>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d04a      	beq.n	80059c2 <HAL_DMA_DeInit+0xb2>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a80      	ldr	r2, [pc, #512]	; (8005b34 <HAL_DMA_DeInit+0x224>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d045      	beq.n	80059c2 <HAL_DMA_DeInit+0xb2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a7f      	ldr	r2, [pc, #508]	; (8005b38 <HAL_DMA_DeInit+0x228>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d040      	beq.n	80059c2 <HAL_DMA_DeInit+0xb2>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a7d      	ldr	r2, [pc, #500]	; (8005b3c <HAL_DMA_DeInit+0x22c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d03b      	beq.n	80059c2 <HAL_DMA_DeInit+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a7c      	ldr	r2, [pc, #496]	; (8005b40 <HAL_DMA_DeInit+0x230>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d036      	beq.n	80059c2 <HAL_DMA_DeInit+0xb2>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a7a      	ldr	r2, [pc, #488]	; (8005b44 <HAL_DMA_DeInit+0x234>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d031      	beq.n	80059c2 <HAL_DMA_DeInit+0xb2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a79      	ldr	r2, [pc, #484]	; (8005b48 <HAL_DMA_DeInit+0x238>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d02c      	beq.n	80059c2 <HAL_DMA_DeInit+0xb2>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a77      	ldr	r2, [pc, #476]	; (8005b4c <HAL_DMA_DeInit+0x23c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d027      	beq.n	80059c2 <HAL_DMA_DeInit+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a76      	ldr	r2, [pc, #472]	; (8005b50 <HAL_DMA_DeInit+0x240>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d022      	beq.n	80059c2 <HAL_DMA_DeInit+0xb2>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a74      	ldr	r2, [pc, #464]	; (8005b54 <HAL_DMA_DeInit+0x244>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d01d      	beq.n	80059c2 <HAL_DMA_DeInit+0xb2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a73      	ldr	r2, [pc, #460]	; (8005b58 <HAL_DMA_DeInit+0x248>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d018      	beq.n	80059c2 <HAL_DMA_DeInit+0xb2>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a71      	ldr	r2, [pc, #452]	; (8005b5c <HAL_DMA_DeInit+0x24c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <HAL_DMA_DeInit+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a70      	ldr	r2, [pc, #448]	; (8005b60 <HAL_DMA_DeInit+0x250>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00e      	beq.n	80059c2 <HAL_DMA_DeInit+0xb2>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a6e      	ldr	r2, [pc, #440]	; (8005b64 <HAL_DMA_DeInit+0x254>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d009      	beq.n	80059c2 <HAL_DMA_DeInit+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a6d      	ldr	r2, [pc, #436]	; (8005b68 <HAL_DMA_DeInit+0x258>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d004      	beq.n	80059c2 <HAL_DMA_DeInit+0xb2>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a6b      	ldr	r2, [pc, #428]	; (8005b6c <HAL_DMA_DeInit+0x25c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d108      	bne.n	80059d4 <HAL_DMA_DeInit+0xc4>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0201 	bic.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	e007      	b.n	80059e4 <HAL_DMA_DeInit+0xd4>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0201 	bic.w	r2, r2, #1
 80059e2:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a51      	ldr	r2, [pc, #324]	; (8005b30 <HAL_DMA_DeInit+0x220>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d04a      	beq.n	8005a84 <HAL_DMA_DeInit+0x174>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a50      	ldr	r2, [pc, #320]	; (8005b34 <HAL_DMA_DeInit+0x224>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d045      	beq.n	8005a84 <HAL_DMA_DeInit+0x174>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a4e      	ldr	r2, [pc, #312]	; (8005b38 <HAL_DMA_DeInit+0x228>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d040      	beq.n	8005a84 <HAL_DMA_DeInit+0x174>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a4d      	ldr	r2, [pc, #308]	; (8005b3c <HAL_DMA_DeInit+0x22c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d03b      	beq.n	8005a84 <HAL_DMA_DeInit+0x174>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a4b      	ldr	r2, [pc, #300]	; (8005b40 <HAL_DMA_DeInit+0x230>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d036      	beq.n	8005a84 <HAL_DMA_DeInit+0x174>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a4a      	ldr	r2, [pc, #296]	; (8005b44 <HAL_DMA_DeInit+0x234>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d031      	beq.n	8005a84 <HAL_DMA_DeInit+0x174>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a48      	ldr	r2, [pc, #288]	; (8005b48 <HAL_DMA_DeInit+0x238>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d02c      	beq.n	8005a84 <HAL_DMA_DeInit+0x174>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a47      	ldr	r2, [pc, #284]	; (8005b4c <HAL_DMA_DeInit+0x23c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d027      	beq.n	8005a84 <HAL_DMA_DeInit+0x174>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a45      	ldr	r2, [pc, #276]	; (8005b50 <HAL_DMA_DeInit+0x240>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d022      	beq.n	8005a84 <HAL_DMA_DeInit+0x174>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a44      	ldr	r2, [pc, #272]	; (8005b54 <HAL_DMA_DeInit+0x244>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d01d      	beq.n	8005a84 <HAL_DMA_DeInit+0x174>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a42      	ldr	r2, [pc, #264]	; (8005b58 <HAL_DMA_DeInit+0x248>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d018      	beq.n	8005a84 <HAL_DMA_DeInit+0x174>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a41      	ldr	r2, [pc, #260]	; (8005b5c <HAL_DMA_DeInit+0x24c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d013      	beq.n	8005a84 <HAL_DMA_DeInit+0x174>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a3f      	ldr	r2, [pc, #252]	; (8005b60 <HAL_DMA_DeInit+0x250>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00e      	beq.n	8005a84 <HAL_DMA_DeInit+0x174>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a3e      	ldr	r2, [pc, #248]	; (8005b64 <HAL_DMA_DeInit+0x254>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d009      	beq.n	8005a84 <HAL_DMA_DeInit+0x174>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a3c      	ldr	r2, [pc, #240]	; (8005b68 <HAL_DMA_DeInit+0x258>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d004      	beq.n	8005a84 <HAL_DMA_DeInit+0x174>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a3b      	ldr	r2, [pc, #236]	; (8005b6c <HAL_DMA_DeInit+0x25c>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d101      	bne.n	8005a88 <HAL_DMA_DeInit+0x178>
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <HAL_DMA_DeInit+0x17a>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d025      	beq.n	8005ada <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2221      	movs	r2, #33	; 0x21
 8005abc:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f002 f980 	bl	8007dc4 <DMA_CalcBaseAndBitshift>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005acc:	f003 031f 	and.w	r3, r3, #31
 8005ad0:	223f      	movs	r2, #63	; 0x3f
 8005ad2:	409a      	lsls	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	609a      	str	r2, [r3, #8]
 8005ad8:	e081      	b.n	8005bde <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a24      	ldr	r2, [pc, #144]	; (8005b70 <HAL_DMA_DeInit+0x260>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d022      	beq.n	8005b2a <HAL_DMA_DeInit+0x21a>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a22      	ldr	r2, [pc, #136]	; (8005b74 <HAL_DMA_DeInit+0x264>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d01d      	beq.n	8005b2a <HAL_DMA_DeInit+0x21a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a21      	ldr	r2, [pc, #132]	; (8005b78 <HAL_DMA_DeInit+0x268>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d018      	beq.n	8005b2a <HAL_DMA_DeInit+0x21a>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a1f      	ldr	r2, [pc, #124]	; (8005b7c <HAL_DMA_DeInit+0x26c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d013      	beq.n	8005b2a <HAL_DMA_DeInit+0x21a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a1e      	ldr	r2, [pc, #120]	; (8005b80 <HAL_DMA_DeInit+0x270>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00e      	beq.n	8005b2a <HAL_DMA_DeInit+0x21a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a1c      	ldr	r2, [pc, #112]	; (8005b84 <HAL_DMA_DeInit+0x274>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d009      	beq.n	8005b2a <HAL_DMA_DeInit+0x21a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a1b      	ldr	r2, [pc, #108]	; (8005b88 <HAL_DMA_DeInit+0x278>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d004      	beq.n	8005b2a <HAL_DMA_DeInit+0x21a>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a19      	ldr	r2, [pc, #100]	; (8005b8c <HAL_DMA_DeInit+0x27c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d132      	bne.n	8005b90 <HAL_DMA_DeInit+0x280>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e031      	b.n	8005b92 <HAL_DMA_DeInit+0x282>
 8005b2e:	bf00      	nop
 8005b30:	40020010 	.word	0x40020010
 8005b34:	40020028 	.word	0x40020028
 8005b38:	40020040 	.word	0x40020040
 8005b3c:	40020058 	.word	0x40020058
 8005b40:	40020070 	.word	0x40020070
 8005b44:	40020088 	.word	0x40020088
 8005b48:	400200a0 	.word	0x400200a0
 8005b4c:	400200b8 	.word	0x400200b8
 8005b50:	40020410 	.word	0x40020410
 8005b54:	40020428 	.word	0x40020428
 8005b58:	40020440 	.word	0x40020440
 8005b5c:	40020458 	.word	0x40020458
 8005b60:	40020470 	.word	0x40020470
 8005b64:	40020488 	.word	0x40020488
 8005b68:	400204a0 	.word	0x400204a0
 8005b6c:	400204b8 	.word	0x400204b8
 8005b70:	58025408 	.word	0x58025408
 8005b74:	5802541c 	.word	0x5802541c
 8005b78:	58025430 	.word	0x58025430
 8005b7c:	58025444 	.word	0x58025444
 8005b80:	58025458 	.word	0x58025458
 8005b84:	5802546c 	.word	0x5802546c
 8005b88:	58025480 	.word	0x58025480
 8005b8c:	58025494 	.word	0x58025494
 8005b90:	2300      	movs	r3, #0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d021      	beq.n	8005bda <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2200      	movs	r2, #0
 8005bac:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f002 f900 	bl	8007dc4 <DMA_CalcBaseAndBitshift>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bcc:	f003 031f 	and.w	r3, r3, #31
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	409a      	lsls	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	605a      	str	r2, [r3, #4]
 8005bd8:	e001      	b.n	8005bde <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e04a      	b.n	8005c74 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f002 fa1e 	bl	8008020 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d008      	beq.n	8005bfe <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005bfc:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00f      	beq.n	8005c26 <HAL_DMA_DeInit+0x316>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d80b      	bhi.n	8005c26 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f002 faa0 	bl	8008154 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c24:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e226      	b.n	80060e6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d101      	bne.n	8005ca6 <HAL_DMA_Start_IT+0x2a>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e21f      	b.n	80060e6 <HAL_DMA_Start_IT+0x46a>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	f040 820a 	bne.w	80060d0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a68      	ldr	r2, [pc, #416]	; (8005e70 <HAL_DMA_Start_IT+0x1f4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d04a      	beq.n	8005d6a <HAL_DMA_Start_IT+0xee>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a66      	ldr	r2, [pc, #408]	; (8005e74 <HAL_DMA_Start_IT+0x1f8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d045      	beq.n	8005d6a <HAL_DMA_Start_IT+0xee>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a65      	ldr	r2, [pc, #404]	; (8005e78 <HAL_DMA_Start_IT+0x1fc>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d040      	beq.n	8005d6a <HAL_DMA_Start_IT+0xee>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a63      	ldr	r2, [pc, #396]	; (8005e7c <HAL_DMA_Start_IT+0x200>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d03b      	beq.n	8005d6a <HAL_DMA_Start_IT+0xee>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a62      	ldr	r2, [pc, #392]	; (8005e80 <HAL_DMA_Start_IT+0x204>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d036      	beq.n	8005d6a <HAL_DMA_Start_IT+0xee>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a60      	ldr	r2, [pc, #384]	; (8005e84 <HAL_DMA_Start_IT+0x208>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d031      	beq.n	8005d6a <HAL_DMA_Start_IT+0xee>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a5f      	ldr	r2, [pc, #380]	; (8005e88 <HAL_DMA_Start_IT+0x20c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d02c      	beq.n	8005d6a <HAL_DMA_Start_IT+0xee>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a5d      	ldr	r2, [pc, #372]	; (8005e8c <HAL_DMA_Start_IT+0x210>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d027      	beq.n	8005d6a <HAL_DMA_Start_IT+0xee>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a5c      	ldr	r2, [pc, #368]	; (8005e90 <HAL_DMA_Start_IT+0x214>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d022      	beq.n	8005d6a <HAL_DMA_Start_IT+0xee>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a5a      	ldr	r2, [pc, #360]	; (8005e94 <HAL_DMA_Start_IT+0x218>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d01d      	beq.n	8005d6a <HAL_DMA_Start_IT+0xee>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a59      	ldr	r2, [pc, #356]	; (8005e98 <HAL_DMA_Start_IT+0x21c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d018      	beq.n	8005d6a <HAL_DMA_Start_IT+0xee>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a57      	ldr	r2, [pc, #348]	; (8005e9c <HAL_DMA_Start_IT+0x220>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d013      	beq.n	8005d6a <HAL_DMA_Start_IT+0xee>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a56      	ldr	r2, [pc, #344]	; (8005ea0 <HAL_DMA_Start_IT+0x224>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d00e      	beq.n	8005d6a <HAL_DMA_Start_IT+0xee>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a54      	ldr	r2, [pc, #336]	; (8005ea4 <HAL_DMA_Start_IT+0x228>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d009      	beq.n	8005d6a <HAL_DMA_Start_IT+0xee>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a53      	ldr	r2, [pc, #332]	; (8005ea8 <HAL_DMA_Start_IT+0x22c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d004      	beq.n	8005d6a <HAL_DMA_Start_IT+0xee>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a51      	ldr	r2, [pc, #324]	; (8005eac <HAL_DMA_Start_IT+0x230>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d108      	bne.n	8005d7c <HAL_DMA_Start_IT+0x100>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0201 	bic.w	r2, r2, #1
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	e007      	b.n	8005d8c <HAL_DMA_Start_IT+0x110>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0201 	bic.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	68b9      	ldr	r1, [r7, #8]
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f001 fe6a 	bl	8007a6c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a34      	ldr	r2, [pc, #208]	; (8005e70 <HAL_DMA_Start_IT+0x1f4>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d04a      	beq.n	8005e38 <HAL_DMA_Start_IT+0x1bc>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a33      	ldr	r2, [pc, #204]	; (8005e74 <HAL_DMA_Start_IT+0x1f8>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d045      	beq.n	8005e38 <HAL_DMA_Start_IT+0x1bc>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a31      	ldr	r2, [pc, #196]	; (8005e78 <HAL_DMA_Start_IT+0x1fc>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d040      	beq.n	8005e38 <HAL_DMA_Start_IT+0x1bc>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a30      	ldr	r2, [pc, #192]	; (8005e7c <HAL_DMA_Start_IT+0x200>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d03b      	beq.n	8005e38 <HAL_DMA_Start_IT+0x1bc>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a2e      	ldr	r2, [pc, #184]	; (8005e80 <HAL_DMA_Start_IT+0x204>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d036      	beq.n	8005e38 <HAL_DMA_Start_IT+0x1bc>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a2d      	ldr	r2, [pc, #180]	; (8005e84 <HAL_DMA_Start_IT+0x208>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d031      	beq.n	8005e38 <HAL_DMA_Start_IT+0x1bc>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a2b      	ldr	r2, [pc, #172]	; (8005e88 <HAL_DMA_Start_IT+0x20c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d02c      	beq.n	8005e38 <HAL_DMA_Start_IT+0x1bc>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a2a      	ldr	r2, [pc, #168]	; (8005e8c <HAL_DMA_Start_IT+0x210>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d027      	beq.n	8005e38 <HAL_DMA_Start_IT+0x1bc>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a28      	ldr	r2, [pc, #160]	; (8005e90 <HAL_DMA_Start_IT+0x214>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d022      	beq.n	8005e38 <HAL_DMA_Start_IT+0x1bc>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a27      	ldr	r2, [pc, #156]	; (8005e94 <HAL_DMA_Start_IT+0x218>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d01d      	beq.n	8005e38 <HAL_DMA_Start_IT+0x1bc>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a25      	ldr	r2, [pc, #148]	; (8005e98 <HAL_DMA_Start_IT+0x21c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d018      	beq.n	8005e38 <HAL_DMA_Start_IT+0x1bc>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a24      	ldr	r2, [pc, #144]	; (8005e9c <HAL_DMA_Start_IT+0x220>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d013      	beq.n	8005e38 <HAL_DMA_Start_IT+0x1bc>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a22      	ldr	r2, [pc, #136]	; (8005ea0 <HAL_DMA_Start_IT+0x224>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00e      	beq.n	8005e38 <HAL_DMA_Start_IT+0x1bc>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a21      	ldr	r2, [pc, #132]	; (8005ea4 <HAL_DMA_Start_IT+0x228>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d009      	beq.n	8005e38 <HAL_DMA_Start_IT+0x1bc>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a1f      	ldr	r2, [pc, #124]	; (8005ea8 <HAL_DMA_Start_IT+0x22c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d004      	beq.n	8005e38 <HAL_DMA_Start_IT+0x1bc>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a1e      	ldr	r2, [pc, #120]	; (8005eac <HAL_DMA_Start_IT+0x230>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d101      	bne.n	8005e3c <HAL_DMA_Start_IT+0x1c0>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e000      	b.n	8005e3e <HAL_DMA_Start_IT+0x1c2>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d036      	beq.n	8005eb0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f023 021e 	bic.w	r2, r3, #30
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f042 0216 	orr.w	r2, r2, #22
 8005e54:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d03e      	beq.n	8005edc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0208 	orr.w	r2, r2, #8
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	e035      	b.n	8005edc <HAL_DMA_Start_IT+0x260>
 8005e70:	40020010 	.word	0x40020010
 8005e74:	40020028 	.word	0x40020028
 8005e78:	40020040 	.word	0x40020040
 8005e7c:	40020058 	.word	0x40020058
 8005e80:	40020070 	.word	0x40020070
 8005e84:	40020088 	.word	0x40020088
 8005e88:	400200a0 	.word	0x400200a0
 8005e8c:	400200b8 	.word	0x400200b8
 8005e90:	40020410 	.word	0x40020410
 8005e94:	40020428 	.word	0x40020428
 8005e98:	40020440 	.word	0x40020440
 8005e9c:	40020458 	.word	0x40020458
 8005ea0:	40020470 	.word	0x40020470
 8005ea4:	40020488 	.word	0x40020488
 8005ea8:	400204a0 	.word	0x400204a0
 8005eac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f023 020e 	bic.w	r2, r3, #14
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 020a 	orr.w	r2, r2, #10
 8005ec2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d007      	beq.n	8005edc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0204 	orr.w	r2, r2, #4
 8005eda:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a83      	ldr	r2, [pc, #524]	; (80060f0 <HAL_DMA_Start_IT+0x474>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d072      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a82      	ldr	r2, [pc, #520]	; (80060f4 <HAL_DMA_Start_IT+0x478>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d06d      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a80      	ldr	r2, [pc, #512]	; (80060f8 <HAL_DMA_Start_IT+0x47c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d068      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a7f      	ldr	r2, [pc, #508]	; (80060fc <HAL_DMA_Start_IT+0x480>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d063      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a7d      	ldr	r2, [pc, #500]	; (8006100 <HAL_DMA_Start_IT+0x484>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d05e      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a7c      	ldr	r2, [pc, #496]	; (8006104 <HAL_DMA_Start_IT+0x488>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d059      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a7a      	ldr	r2, [pc, #488]	; (8006108 <HAL_DMA_Start_IT+0x48c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d054      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a79      	ldr	r2, [pc, #484]	; (800610c <HAL_DMA_Start_IT+0x490>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d04f      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a77      	ldr	r2, [pc, #476]	; (8006110 <HAL_DMA_Start_IT+0x494>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d04a      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a76      	ldr	r2, [pc, #472]	; (8006114 <HAL_DMA_Start_IT+0x498>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d045      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a74      	ldr	r2, [pc, #464]	; (8006118 <HAL_DMA_Start_IT+0x49c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d040      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a73      	ldr	r2, [pc, #460]	; (800611c <HAL_DMA_Start_IT+0x4a0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d03b      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a71      	ldr	r2, [pc, #452]	; (8006120 <HAL_DMA_Start_IT+0x4a4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d036      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a70      	ldr	r2, [pc, #448]	; (8006124 <HAL_DMA_Start_IT+0x4a8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d031      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a6e      	ldr	r2, [pc, #440]	; (8006128 <HAL_DMA_Start_IT+0x4ac>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d02c      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a6d      	ldr	r2, [pc, #436]	; (800612c <HAL_DMA_Start_IT+0x4b0>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d027      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a6b      	ldr	r2, [pc, #428]	; (8006130 <HAL_DMA_Start_IT+0x4b4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d022      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a6a      	ldr	r2, [pc, #424]	; (8006134 <HAL_DMA_Start_IT+0x4b8>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d01d      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a68      	ldr	r2, [pc, #416]	; (8006138 <HAL_DMA_Start_IT+0x4bc>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d018      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a67      	ldr	r2, [pc, #412]	; (800613c <HAL_DMA_Start_IT+0x4c0>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d013      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a65      	ldr	r2, [pc, #404]	; (8006140 <HAL_DMA_Start_IT+0x4c4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00e      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a64      	ldr	r2, [pc, #400]	; (8006144 <HAL_DMA_Start_IT+0x4c8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d009      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a62      	ldr	r2, [pc, #392]	; (8006148 <HAL_DMA_Start_IT+0x4cc>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d004      	beq.n	8005fcc <HAL_DMA_Start_IT+0x350>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a61      	ldr	r2, [pc, #388]	; (800614c <HAL_DMA_Start_IT+0x4d0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d101      	bne.n	8005fd0 <HAL_DMA_Start_IT+0x354>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e000      	b.n	8005fd2 <HAL_DMA_Start_IT+0x356>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d01a      	beq.n	800600c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d007      	beq.n	8005ff4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ff2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800600a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a37      	ldr	r2, [pc, #220]	; (80060f0 <HAL_DMA_Start_IT+0x474>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d04a      	beq.n	80060ac <HAL_DMA_Start_IT+0x430>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a36      	ldr	r2, [pc, #216]	; (80060f4 <HAL_DMA_Start_IT+0x478>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d045      	beq.n	80060ac <HAL_DMA_Start_IT+0x430>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a34      	ldr	r2, [pc, #208]	; (80060f8 <HAL_DMA_Start_IT+0x47c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d040      	beq.n	80060ac <HAL_DMA_Start_IT+0x430>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a33      	ldr	r2, [pc, #204]	; (80060fc <HAL_DMA_Start_IT+0x480>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d03b      	beq.n	80060ac <HAL_DMA_Start_IT+0x430>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a31      	ldr	r2, [pc, #196]	; (8006100 <HAL_DMA_Start_IT+0x484>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d036      	beq.n	80060ac <HAL_DMA_Start_IT+0x430>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a30      	ldr	r2, [pc, #192]	; (8006104 <HAL_DMA_Start_IT+0x488>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d031      	beq.n	80060ac <HAL_DMA_Start_IT+0x430>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a2e      	ldr	r2, [pc, #184]	; (8006108 <HAL_DMA_Start_IT+0x48c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d02c      	beq.n	80060ac <HAL_DMA_Start_IT+0x430>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a2d      	ldr	r2, [pc, #180]	; (800610c <HAL_DMA_Start_IT+0x490>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d027      	beq.n	80060ac <HAL_DMA_Start_IT+0x430>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a2b      	ldr	r2, [pc, #172]	; (8006110 <HAL_DMA_Start_IT+0x494>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d022      	beq.n	80060ac <HAL_DMA_Start_IT+0x430>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a2a      	ldr	r2, [pc, #168]	; (8006114 <HAL_DMA_Start_IT+0x498>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d01d      	beq.n	80060ac <HAL_DMA_Start_IT+0x430>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a28      	ldr	r2, [pc, #160]	; (8006118 <HAL_DMA_Start_IT+0x49c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d018      	beq.n	80060ac <HAL_DMA_Start_IT+0x430>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a27      	ldr	r2, [pc, #156]	; (800611c <HAL_DMA_Start_IT+0x4a0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d013      	beq.n	80060ac <HAL_DMA_Start_IT+0x430>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a25      	ldr	r2, [pc, #148]	; (8006120 <HAL_DMA_Start_IT+0x4a4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00e      	beq.n	80060ac <HAL_DMA_Start_IT+0x430>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a24      	ldr	r2, [pc, #144]	; (8006124 <HAL_DMA_Start_IT+0x4a8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d009      	beq.n	80060ac <HAL_DMA_Start_IT+0x430>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a22      	ldr	r2, [pc, #136]	; (8006128 <HAL_DMA_Start_IT+0x4ac>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <HAL_DMA_Start_IT+0x430>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a21      	ldr	r2, [pc, #132]	; (800612c <HAL_DMA_Start_IT+0x4b0>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d108      	bne.n	80060be <HAL_DMA_Start_IT+0x442>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	e012      	b.n	80060e4 <HAL_DMA_Start_IT+0x468>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f042 0201 	orr.w	r2, r2, #1
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	e009      	b.n	80060e4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80060e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	40020010 	.word	0x40020010
 80060f4:	40020028 	.word	0x40020028
 80060f8:	40020040 	.word	0x40020040
 80060fc:	40020058 	.word	0x40020058
 8006100:	40020070 	.word	0x40020070
 8006104:	40020088 	.word	0x40020088
 8006108:	400200a0 	.word	0x400200a0
 800610c:	400200b8 	.word	0x400200b8
 8006110:	40020410 	.word	0x40020410
 8006114:	40020428 	.word	0x40020428
 8006118:	40020440 	.word	0x40020440
 800611c:	40020458 	.word	0x40020458
 8006120:	40020470 	.word	0x40020470
 8006124:	40020488 	.word	0x40020488
 8006128:	400204a0 	.word	0x400204a0
 800612c:	400204b8 	.word	0x400204b8
 8006130:	58025408 	.word	0x58025408
 8006134:	5802541c 	.word	0x5802541c
 8006138:	58025430 	.word	0x58025430
 800613c:	58025444 	.word	0x58025444
 8006140:	58025458 	.word	0x58025458
 8006144:	5802546c 	.word	0x5802546c
 8006148:	58025480 	.word	0x58025480
 800614c:	58025494 	.word	0x58025494

08006150 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006158:	f7fe ff32 	bl	8004fc0 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e2dc      	b.n	8006722 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d008      	beq.n	8006186 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2280      	movs	r2, #128	; 0x80
 8006178:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e2cd      	b.n	8006722 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a76      	ldr	r2, [pc, #472]	; (8006364 <HAL_DMA_Abort+0x214>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d04a      	beq.n	8006226 <HAL_DMA_Abort+0xd6>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a74      	ldr	r2, [pc, #464]	; (8006368 <HAL_DMA_Abort+0x218>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d045      	beq.n	8006226 <HAL_DMA_Abort+0xd6>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a73      	ldr	r2, [pc, #460]	; (800636c <HAL_DMA_Abort+0x21c>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d040      	beq.n	8006226 <HAL_DMA_Abort+0xd6>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a71      	ldr	r2, [pc, #452]	; (8006370 <HAL_DMA_Abort+0x220>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d03b      	beq.n	8006226 <HAL_DMA_Abort+0xd6>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a70      	ldr	r2, [pc, #448]	; (8006374 <HAL_DMA_Abort+0x224>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d036      	beq.n	8006226 <HAL_DMA_Abort+0xd6>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a6e      	ldr	r2, [pc, #440]	; (8006378 <HAL_DMA_Abort+0x228>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d031      	beq.n	8006226 <HAL_DMA_Abort+0xd6>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a6d      	ldr	r2, [pc, #436]	; (800637c <HAL_DMA_Abort+0x22c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d02c      	beq.n	8006226 <HAL_DMA_Abort+0xd6>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a6b      	ldr	r2, [pc, #428]	; (8006380 <HAL_DMA_Abort+0x230>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d027      	beq.n	8006226 <HAL_DMA_Abort+0xd6>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a6a      	ldr	r2, [pc, #424]	; (8006384 <HAL_DMA_Abort+0x234>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d022      	beq.n	8006226 <HAL_DMA_Abort+0xd6>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a68      	ldr	r2, [pc, #416]	; (8006388 <HAL_DMA_Abort+0x238>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d01d      	beq.n	8006226 <HAL_DMA_Abort+0xd6>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a67      	ldr	r2, [pc, #412]	; (800638c <HAL_DMA_Abort+0x23c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d018      	beq.n	8006226 <HAL_DMA_Abort+0xd6>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a65      	ldr	r2, [pc, #404]	; (8006390 <HAL_DMA_Abort+0x240>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d013      	beq.n	8006226 <HAL_DMA_Abort+0xd6>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a64      	ldr	r2, [pc, #400]	; (8006394 <HAL_DMA_Abort+0x244>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d00e      	beq.n	8006226 <HAL_DMA_Abort+0xd6>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a62      	ldr	r2, [pc, #392]	; (8006398 <HAL_DMA_Abort+0x248>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d009      	beq.n	8006226 <HAL_DMA_Abort+0xd6>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a61      	ldr	r2, [pc, #388]	; (800639c <HAL_DMA_Abort+0x24c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d004      	beq.n	8006226 <HAL_DMA_Abort+0xd6>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a5f      	ldr	r2, [pc, #380]	; (80063a0 <HAL_DMA_Abort+0x250>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d101      	bne.n	800622a <HAL_DMA_Abort+0xda>
 8006226:	2301      	movs	r3, #1
 8006228:	e000      	b.n	800622c <HAL_DMA_Abort+0xdc>
 800622a:	2300      	movs	r3, #0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d013      	beq.n	8006258 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 021e 	bic.w	r2, r2, #30
 800623e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	695a      	ldr	r2, [r3, #20]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800624e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	e00a      	b.n	800626e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 020e 	bic.w	r2, r2, #14
 8006266:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a3c      	ldr	r2, [pc, #240]	; (8006364 <HAL_DMA_Abort+0x214>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d072      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a3a      	ldr	r2, [pc, #232]	; (8006368 <HAL_DMA_Abort+0x218>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d06d      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a39      	ldr	r2, [pc, #228]	; (800636c <HAL_DMA_Abort+0x21c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d068      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a37      	ldr	r2, [pc, #220]	; (8006370 <HAL_DMA_Abort+0x220>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d063      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a36      	ldr	r2, [pc, #216]	; (8006374 <HAL_DMA_Abort+0x224>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d05e      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a34      	ldr	r2, [pc, #208]	; (8006378 <HAL_DMA_Abort+0x228>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d059      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a33      	ldr	r2, [pc, #204]	; (800637c <HAL_DMA_Abort+0x22c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d054      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a31      	ldr	r2, [pc, #196]	; (8006380 <HAL_DMA_Abort+0x230>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d04f      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a30      	ldr	r2, [pc, #192]	; (8006384 <HAL_DMA_Abort+0x234>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d04a      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a2e      	ldr	r2, [pc, #184]	; (8006388 <HAL_DMA_Abort+0x238>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d045      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a2d      	ldr	r2, [pc, #180]	; (800638c <HAL_DMA_Abort+0x23c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d040      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a2b      	ldr	r2, [pc, #172]	; (8006390 <HAL_DMA_Abort+0x240>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d03b      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a2a      	ldr	r2, [pc, #168]	; (8006394 <HAL_DMA_Abort+0x244>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d036      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a28      	ldr	r2, [pc, #160]	; (8006398 <HAL_DMA_Abort+0x248>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d031      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a27      	ldr	r2, [pc, #156]	; (800639c <HAL_DMA_Abort+0x24c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d02c      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a25      	ldr	r2, [pc, #148]	; (80063a0 <HAL_DMA_Abort+0x250>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d027      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a24      	ldr	r2, [pc, #144]	; (80063a4 <HAL_DMA_Abort+0x254>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d022      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a22      	ldr	r2, [pc, #136]	; (80063a8 <HAL_DMA_Abort+0x258>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d01d      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a21      	ldr	r2, [pc, #132]	; (80063ac <HAL_DMA_Abort+0x25c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d018      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a1f      	ldr	r2, [pc, #124]	; (80063b0 <HAL_DMA_Abort+0x260>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d013      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a1e      	ldr	r2, [pc, #120]	; (80063b4 <HAL_DMA_Abort+0x264>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00e      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a1c      	ldr	r2, [pc, #112]	; (80063b8 <HAL_DMA_Abort+0x268>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d009      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a1b      	ldr	r2, [pc, #108]	; (80063bc <HAL_DMA_Abort+0x26c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d004      	beq.n	800635e <HAL_DMA_Abort+0x20e>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a19      	ldr	r2, [pc, #100]	; (80063c0 <HAL_DMA_Abort+0x270>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d132      	bne.n	80063c4 <HAL_DMA_Abort+0x274>
 800635e:	2301      	movs	r3, #1
 8006360:	e031      	b.n	80063c6 <HAL_DMA_Abort+0x276>
 8006362:	bf00      	nop
 8006364:	40020010 	.word	0x40020010
 8006368:	40020028 	.word	0x40020028
 800636c:	40020040 	.word	0x40020040
 8006370:	40020058 	.word	0x40020058
 8006374:	40020070 	.word	0x40020070
 8006378:	40020088 	.word	0x40020088
 800637c:	400200a0 	.word	0x400200a0
 8006380:	400200b8 	.word	0x400200b8
 8006384:	40020410 	.word	0x40020410
 8006388:	40020428 	.word	0x40020428
 800638c:	40020440 	.word	0x40020440
 8006390:	40020458 	.word	0x40020458
 8006394:	40020470 	.word	0x40020470
 8006398:	40020488 	.word	0x40020488
 800639c:	400204a0 	.word	0x400204a0
 80063a0:	400204b8 	.word	0x400204b8
 80063a4:	58025408 	.word	0x58025408
 80063a8:	5802541c 	.word	0x5802541c
 80063ac:	58025430 	.word	0x58025430
 80063b0:	58025444 	.word	0x58025444
 80063b4:	58025458 	.word	0x58025458
 80063b8:	5802546c 	.word	0x5802546c
 80063bc:	58025480 	.word	0x58025480
 80063c0:	58025494 	.word	0x58025494
 80063c4:	2300      	movs	r3, #0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d007      	beq.n	80063da <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a6d      	ldr	r2, [pc, #436]	; (8006594 <HAL_DMA_Abort+0x444>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d04a      	beq.n	800647a <HAL_DMA_Abort+0x32a>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a6b      	ldr	r2, [pc, #428]	; (8006598 <HAL_DMA_Abort+0x448>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d045      	beq.n	800647a <HAL_DMA_Abort+0x32a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a6a      	ldr	r2, [pc, #424]	; (800659c <HAL_DMA_Abort+0x44c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d040      	beq.n	800647a <HAL_DMA_Abort+0x32a>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a68      	ldr	r2, [pc, #416]	; (80065a0 <HAL_DMA_Abort+0x450>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d03b      	beq.n	800647a <HAL_DMA_Abort+0x32a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a67      	ldr	r2, [pc, #412]	; (80065a4 <HAL_DMA_Abort+0x454>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d036      	beq.n	800647a <HAL_DMA_Abort+0x32a>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a65      	ldr	r2, [pc, #404]	; (80065a8 <HAL_DMA_Abort+0x458>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d031      	beq.n	800647a <HAL_DMA_Abort+0x32a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a64      	ldr	r2, [pc, #400]	; (80065ac <HAL_DMA_Abort+0x45c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d02c      	beq.n	800647a <HAL_DMA_Abort+0x32a>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a62      	ldr	r2, [pc, #392]	; (80065b0 <HAL_DMA_Abort+0x460>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d027      	beq.n	800647a <HAL_DMA_Abort+0x32a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a61      	ldr	r2, [pc, #388]	; (80065b4 <HAL_DMA_Abort+0x464>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d022      	beq.n	800647a <HAL_DMA_Abort+0x32a>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a5f      	ldr	r2, [pc, #380]	; (80065b8 <HAL_DMA_Abort+0x468>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d01d      	beq.n	800647a <HAL_DMA_Abort+0x32a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a5e      	ldr	r2, [pc, #376]	; (80065bc <HAL_DMA_Abort+0x46c>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d018      	beq.n	800647a <HAL_DMA_Abort+0x32a>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a5c      	ldr	r2, [pc, #368]	; (80065c0 <HAL_DMA_Abort+0x470>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d013      	beq.n	800647a <HAL_DMA_Abort+0x32a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a5b      	ldr	r2, [pc, #364]	; (80065c4 <HAL_DMA_Abort+0x474>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00e      	beq.n	800647a <HAL_DMA_Abort+0x32a>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a59      	ldr	r2, [pc, #356]	; (80065c8 <HAL_DMA_Abort+0x478>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d009      	beq.n	800647a <HAL_DMA_Abort+0x32a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a58      	ldr	r2, [pc, #352]	; (80065cc <HAL_DMA_Abort+0x47c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d004      	beq.n	800647a <HAL_DMA_Abort+0x32a>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a56      	ldr	r2, [pc, #344]	; (80065d0 <HAL_DMA_Abort+0x480>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d108      	bne.n	800648c <HAL_DMA_Abort+0x33c>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 0201 	bic.w	r2, r2, #1
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	e007      	b.n	800649c <HAL_DMA_Abort+0x34c>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0201 	bic.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800649c:	e013      	b.n	80064c6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800649e:	f7fe fd8f 	bl	8004fc0 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b05      	cmp	r3, #5
 80064aa:	d90c      	bls.n	80064c6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2220      	movs	r2, #32
 80064b0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2203      	movs	r2, #3
 80064b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e12d      	b.n	8006722 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e5      	bne.n	800649e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a2f      	ldr	r2, [pc, #188]	; (8006594 <HAL_DMA_Abort+0x444>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d04a      	beq.n	8006572 <HAL_DMA_Abort+0x422>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a2d      	ldr	r2, [pc, #180]	; (8006598 <HAL_DMA_Abort+0x448>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d045      	beq.n	8006572 <HAL_DMA_Abort+0x422>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a2c      	ldr	r2, [pc, #176]	; (800659c <HAL_DMA_Abort+0x44c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d040      	beq.n	8006572 <HAL_DMA_Abort+0x422>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a2a      	ldr	r2, [pc, #168]	; (80065a0 <HAL_DMA_Abort+0x450>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d03b      	beq.n	8006572 <HAL_DMA_Abort+0x422>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a29      	ldr	r2, [pc, #164]	; (80065a4 <HAL_DMA_Abort+0x454>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d036      	beq.n	8006572 <HAL_DMA_Abort+0x422>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a27      	ldr	r2, [pc, #156]	; (80065a8 <HAL_DMA_Abort+0x458>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d031      	beq.n	8006572 <HAL_DMA_Abort+0x422>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a26      	ldr	r2, [pc, #152]	; (80065ac <HAL_DMA_Abort+0x45c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d02c      	beq.n	8006572 <HAL_DMA_Abort+0x422>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a24      	ldr	r2, [pc, #144]	; (80065b0 <HAL_DMA_Abort+0x460>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d027      	beq.n	8006572 <HAL_DMA_Abort+0x422>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a23      	ldr	r2, [pc, #140]	; (80065b4 <HAL_DMA_Abort+0x464>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d022      	beq.n	8006572 <HAL_DMA_Abort+0x422>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a21      	ldr	r2, [pc, #132]	; (80065b8 <HAL_DMA_Abort+0x468>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d01d      	beq.n	8006572 <HAL_DMA_Abort+0x422>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a20      	ldr	r2, [pc, #128]	; (80065bc <HAL_DMA_Abort+0x46c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d018      	beq.n	8006572 <HAL_DMA_Abort+0x422>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a1e      	ldr	r2, [pc, #120]	; (80065c0 <HAL_DMA_Abort+0x470>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d013      	beq.n	8006572 <HAL_DMA_Abort+0x422>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a1d      	ldr	r2, [pc, #116]	; (80065c4 <HAL_DMA_Abort+0x474>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d00e      	beq.n	8006572 <HAL_DMA_Abort+0x422>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a1b      	ldr	r2, [pc, #108]	; (80065c8 <HAL_DMA_Abort+0x478>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d009      	beq.n	8006572 <HAL_DMA_Abort+0x422>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a1a      	ldr	r2, [pc, #104]	; (80065cc <HAL_DMA_Abort+0x47c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d004      	beq.n	8006572 <HAL_DMA_Abort+0x422>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a18      	ldr	r2, [pc, #96]	; (80065d0 <HAL_DMA_Abort+0x480>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d101      	bne.n	8006576 <HAL_DMA_Abort+0x426>
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <HAL_DMA_Abort+0x428>
 8006576:	2300      	movs	r3, #0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d02b      	beq.n	80065d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006580:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006586:	f003 031f 	and.w	r3, r3, #31
 800658a:	223f      	movs	r2, #63	; 0x3f
 800658c:	409a      	lsls	r2, r3
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	609a      	str	r2, [r3, #8]
 8006592:	e02a      	b.n	80065ea <HAL_DMA_Abort+0x49a>
 8006594:	40020010 	.word	0x40020010
 8006598:	40020028 	.word	0x40020028
 800659c:	40020040 	.word	0x40020040
 80065a0:	40020058 	.word	0x40020058
 80065a4:	40020070 	.word	0x40020070
 80065a8:	40020088 	.word	0x40020088
 80065ac:	400200a0 	.word	0x400200a0
 80065b0:	400200b8 	.word	0x400200b8
 80065b4:	40020410 	.word	0x40020410
 80065b8:	40020428 	.word	0x40020428
 80065bc:	40020440 	.word	0x40020440
 80065c0:	40020458 	.word	0x40020458
 80065c4:	40020470 	.word	0x40020470
 80065c8:	40020488 	.word	0x40020488
 80065cc:	400204a0 	.word	0x400204a0
 80065d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065de:	f003 031f 	and.w	r3, r3, #31
 80065e2:	2201      	movs	r2, #1
 80065e4:	409a      	lsls	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a4f      	ldr	r2, [pc, #316]	; (800672c <HAL_DMA_Abort+0x5dc>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d072      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a4d      	ldr	r2, [pc, #308]	; (8006730 <HAL_DMA_Abort+0x5e0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d06d      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a4c      	ldr	r2, [pc, #304]	; (8006734 <HAL_DMA_Abort+0x5e4>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d068      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a4a      	ldr	r2, [pc, #296]	; (8006738 <HAL_DMA_Abort+0x5e8>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d063      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a49      	ldr	r2, [pc, #292]	; (800673c <HAL_DMA_Abort+0x5ec>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d05e      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a47      	ldr	r2, [pc, #284]	; (8006740 <HAL_DMA_Abort+0x5f0>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d059      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a46      	ldr	r2, [pc, #280]	; (8006744 <HAL_DMA_Abort+0x5f4>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d054      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a44      	ldr	r2, [pc, #272]	; (8006748 <HAL_DMA_Abort+0x5f8>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d04f      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a43      	ldr	r2, [pc, #268]	; (800674c <HAL_DMA_Abort+0x5fc>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d04a      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a41      	ldr	r2, [pc, #260]	; (8006750 <HAL_DMA_Abort+0x600>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d045      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a40      	ldr	r2, [pc, #256]	; (8006754 <HAL_DMA_Abort+0x604>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d040      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a3e      	ldr	r2, [pc, #248]	; (8006758 <HAL_DMA_Abort+0x608>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d03b      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a3d      	ldr	r2, [pc, #244]	; (800675c <HAL_DMA_Abort+0x60c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d036      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a3b      	ldr	r2, [pc, #236]	; (8006760 <HAL_DMA_Abort+0x610>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d031      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a3a      	ldr	r2, [pc, #232]	; (8006764 <HAL_DMA_Abort+0x614>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d02c      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a38      	ldr	r2, [pc, #224]	; (8006768 <HAL_DMA_Abort+0x618>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d027      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a37      	ldr	r2, [pc, #220]	; (800676c <HAL_DMA_Abort+0x61c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d022      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a35      	ldr	r2, [pc, #212]	; (8006770 <HAL_DMA_Abort+0x620>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d01d      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a34      	ldr	r2, [pc, #208]	; (8006774 <HAL_DMA_Abort+0x624>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d018      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a32      	ldr	r2, [pc, #200]	; (8006778 <HAL_DMA_Abort+0x628>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d013      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a31      	ldr	r2, [pc, #196]	; (800677c <HAL_DMA_Abort+0x62c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00e      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a2f      	ldr	r2, [pc, #188]	; (8006780 <HAL_DMA_Abort+0x630>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d009      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a2e      	ldr	r2, [pc, #184]	; (8006784 <HAL_DMA_Abort+0x634>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d004      	beq.n	80066da <HAL_DMA_Abort+0x58a>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a2c      	ldr	r2, [pc, #176]	; (8006788 <HAL_DMA_Abort+0x638>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d101      	bne.n	80066de <HAL_DMA_Abort+0x58e>
 80066da:	2301      	movs	r3, #1
 80066dc:	e000      	b.n	80066e0 <HAL_DMA_Abort+0x590>
 80066de:	2300      	movs	r3, #0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d015      	beq.n	8006710 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80066ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00c      	beq.n	8006710 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006704:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800670e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	40020010 	.word	0x40020010
 8006730:	40020028 	.word	0x40020028
 8006734:	40020040 	.word	0x40020040
 8006738:	40020058 	.word	0x40020058
 800673c:	40020070 	.word	0x40020070
 8006740:	40020088 	.word	0x40020088
 8006744:	400200a0 	.word	0x400200a0
 8006748:	400200b8 	.word	0x400200b8
 800674c:	40020410 	.word	0x40020410
 8006750:	40020428 	.word	0x40020428
 8006754:	40020440 	.word	0x40020440
 8006758:	40020458 	.word	0x40020458
 800675c:	40020470 	.word	0x40020470
 8006760:	40020488 	.word	0x40020488
 8006764:	400204a0 	.word	0x400204a0
 8006768:	400204b8 	.word	0x400204b8
 800676c:	58025408 	.word	0x58025408
 8006770:	5802541c 	.word	0x5802541c
 8006774:	58025430 	.word	0x58025430
 8006778:	58025444 	.word	0x58025444
 800677c:	58025458 	.word	0x58025458
 8006780:	5802546c 	.word	0x5802546c
 8006784:	58025480 	.word	0x58025480
 8006788:	58025494 	.word	0x58025494

0800678c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e237      	b.n	8006c0e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d004      	beq.n	80067b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2280      	movs	r2, #128	; 0x80
 80067ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e22c      	b.n	8006c0e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a5c      	ldr	r2, [pc, #368]	; (800692c <HAL_DMA_Abort_IT+0x1a0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d04a      	beq.n	8006854 <HAL_DMA_Abort_IT+0xc8>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a5b      	ldr	r2, [pc, #364]	; (8006930 <HAL_DMA_Abort_IT+0x1a4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d045      	beq.n	8006854 <HAL_DMA_Abort_IT+0xc8>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a59      	ldr	r2, [pc, #356]	; (8006934 <HAL_DMA_Abort_IT+0x1a8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d040      	beq.n	8006854 <HAL_DMA_Abort_IT+0xc8>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a58      	ldr	r2, [pc, #352]	; (8006938 <HAL_DMA_Abort_IT+0x1ac>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d03b      	beq.n	8006854 <HAL_DMA_Abort_IT+0xc8>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a56      	ldr	r2, [pc, #344]	; (800693c <HAL_DMA_Abort_IT+0x1b0>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d036      	beq.n	8006854 <HAL_DMA_Abort_IT+0xc8>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a55      	ldr	r2, [pc, #340]	; (8006940 <HAL_DMA_Abort_IT+0x1b4>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d031      	beq.n	8006854 <HAL_DMA_Abort_IT+0xc8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a53      	ldr	r2, [pc, #332]	; (8006944 <HAL_DMA_Abort_IT+0x1b8>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d02c      	beq.n	8006854 <HAL_DMA_Abort_IT+0xc8>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a52      	ldr	r2, [pc, #328]	; (8006948 <HAL_DMA_Abort_IT+0x1bc>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d027      	beq.n	8006854 <HAL_DMA_Abort_IT+0xc8>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a50      	ldr	r2, [pc, #320]	; (800694c <HAL_DMA_Abort_IT+0x1c0>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d022      	beq.n	8006854 <HAL_DMA_Abort_IT+0xc8>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a4f      	ldr	r2, [pc, #316]	; (8006950 <HAL_DMA_Abort_IT+0x1c4>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d01d      	beq.n	8006854 <HAL_DMA_Abort_IT+0xc8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a4d      	ldr	r2, [pc, #308]	; (8006954 <HAL_DMA_Abort_IT+0x1c8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d018      	beq.n	8006854 <HAL_DMA_Abort_IT+0xc8>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a4c      	ldr	r2, [pc, #304]	; (8006958 <HAL_DMA_Abort_IT+0x1cc>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d013      	beq.n	8006854 <HAL_DMA_Abort_IT+0xc8>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a4a      	ldr	r2, [pc, #296]	; (800695c <HAL_DMA_Abort_IT+0x1d0>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00e      	beq.n	8006854 <HAL_DMA_Abort_IT+0xc8>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a49      	ldr	r2, [pc, #292]	; (8006960 <HAL_DMA_Abort_IT+0x1d4>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d009      	beq.n	8006854 <HAL_DMA_Abort_IT+0xc8>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a47      	ldr	r2, [pc, #284]	; (8006964 <HAL_DMA_Abort_IT+0x1d8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d004      	beq.n	8006854 <HAL_DMA_Abort_IT+0xc8>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a46      	ldr	r2, [pc, #280]	; (8006968 <HAL_DMA_Abort_IT+0x1dc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d101      	bne.n	8006858 <HAL_DMA_Abort_IT+0xcc>
 8006854:	2301      	movs	r3, #1
 8006856:	e000      	b.n	800685a <HAL_DMA_Abort_IT+0xce>
 8006858:	2300      	movs	r3, #0
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 8086 	beq.w	800696c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2204      	movs	r2, #4
 8006864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a2f      	ldr	r2, [pc, #188]	; (800692c <HAL_DMA_Abort_IT+0x1a0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d04a      	beq.n	8006908 <HAL_DMA_Abort_IT+0x17c>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a2e      	ldr	r2, [pc, #184]	; (8006930 <HAL_DMA_Abort_IT+0x1a4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d045      	beq.n	8006908 <HAL_DMA_Abort_IT+0x17c>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a2c      	ldr	r2, [pc, #176]	; (8006934 <HAL_DMA_Abort_IT+0x1a8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d040      	beq.n	8006908 <HAL_DMA_Abort_IT+0x17c>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a2b      	ldr	r2, [pc, #172]	; (8006938 <HAL_DMA_Abort_IT+0x1ac>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d03b      	beq.n	8006908 <HAL_DMA_Abort_IT+0x17c>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a29      	ldr	r2, [pc, #164]	; (800693c <HAL_DMA_Abort_IT+0x1b0>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d036      	beq.n	8006908 <HAL_DMA_Abort_IT+0x17c>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a28      	ldr	r2, [pc, #160]	; (8006940 <HAL_DMA_Abort_IT+0x1b4>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d031      	beq.n	8006908 <HAL_DMA_Abort_IT+0x17c>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a26      	ldr	r2, [pc, #152]	; (8006944 <HAL_DMA_Abort_IT+0x1b8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d02c      	beq.n	8006908 <HAL_DMA_Abort_IT+0x17c>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a25      	ldr	r2, [pc, #148]	; (8006948 <HAL_DMA_Abort_IT+0x1bc>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d027      	beq.n	8006908 <HAL_DMA_Abort_IT+0x17c>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a23      	ldr	r2, [pc, #140]	; (800694c <HAL_DMA_Abort_IT+0x1c0>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d022      	beq.n	8006908 <HAL_DMA_Abort_IT+0x17c>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a22      	ldr	r2, [pc, #136]	; (8006950 <HAL_DMA_Abort_IT+0x1c4>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d01d      	beq.n	8006908 <HAL_DMA_Abort_IT+0x17c>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a20      	ldr	r2, [pc, #128]	; (8006954 <HAL_DMA_Abort_IT+0x1c8>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d018      	beq.n	8006908 <HAL_DMA_Abort_IT+0x17c>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a1f      	ldr	r2, [pc, #124]	; (8006958 <HAL_DMA_Abort_IT+0x1cc>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d013      	beq.n	8006908 <HAL_DMA_Abort_IT+0x17c>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a1d      	ldr	r2, [pc, #116]	; (800695c <HAL_DMA_Abort_IT+0x1d0>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00e      	beq.n	8006908 <HAL_DMA_Abort_IT+0x17c>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a1c      	ldr	r2, [pc, #112]	; (8006960 <HAL_DMA_Abort_IT+0x1d4>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d009      	beq.n	8006908 <HAL_DMA_Abort_IT+0x17c>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a1a      	ldr	r2, [pc, #104]	; (8006964 <HAL_DMA_Abort_IT+0x1d8>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d004      	beq.n	8006908 <HAL_DMA_Abort_IT+0x17c>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a19      	ldr	r2, [pc, #100]	; (8006968 <HAL_DMA_Abort_IT+0x1dc>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d108      	bne.n	800691a <HAL_DMA_Abort_IT+0x18e>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0201 	bic.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	e178      	b.n	8006c0c <HAL_DMA_Abort_IT+0x480>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 0201 	bic.w	r2, r2, #1
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	e16f      	b.n	8006c0c <HAL_DMA_Abort_IT+0x480>
 800692c:	40020010 	.word	0x40020010
 8006930:	40020028 	.word	0x40020028
 8006934:	40020040 	.word	0x40020040
 8006938:	40020058 	.word	0x40020058
 800693c:	40020070 	.word	0x40020070
 8006940:	40020088 	.word	0x40020088
 8006944:	400200a0 	.word	0x400200a0
 8006948:	400200b8 	.word	0x400200b8
 800694c:	40020410 	.word	0x40020410
 8006950:	40020428 	.word	0x40020428
 8006954:	40020440 	.word	0x40020440
 8006958:	40020458 	.word	0x40020458
 800695c:	40020470 	.word	0x40020470
 8006960:	40020488 	.word	0x40020488
 8006964:	400204a0 	.word	0x400204a0
 8006968:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 020e 	bic.w	r2, r2, #14
 800697a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a6c      	ldr	r2, [pc, #432]	; (8006b34 <HAL_DMA_Abort_IT+0x3a8>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d04a      	beq.n	8006a1c <HAL_DMA_Abort_IT+0x290>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a6b      	ldr	r2, [pc, #428]	; (8006b38 <HAL_DMA_Abort_IT+0x3ac>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d045      	beq.n	8006a1c <HAL_DMA_Abort_IT+0x290>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a69      	ldr	r2, [pc, #420]	; (8006b3c <HAL_DMA_Abort_IT+0x3b0>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d040      	beq.n	8006a1c <HAL_DMA_Abort_IT+0x290>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a68      	ldr	r2, [pc, #416]	; (8006b40 <HAL_DMA_Abort_IT+0x3b4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d03b      	beq.n	8006a1c <HAL_DMA_Abort_IT+0x290>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a66      	ldr	r2, [pc, #408]	; (8006b44 <HAL_DMA_Abort_IT+0x3b8>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d036      	beq.n	8006a1c <HAL_DMA_Abort_IT+0x290>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a65      	ldr	r2, [pc, #404]	; (8006b48 <HAL_DMA_Abort_IT+0x3bc>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d031      	beq.n	8006a1c <HAL_DMA_Abort_IT+0x290>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a63      	ldr	r2, [pc, #396]	; (8006b4c <HAL_DMA_Abort_IT+0x3c0>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d02c      	beq.n	8006a1c <HAL_DMA_Abort_IT+0x290>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a62      	ldr	r2, [pc, #392]	; (8006b50 <HAL_DMA_Abort_IT+0x3c4>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d027      	beq.n	8006a1c <HAL_DMA_Abort_IT+0x290>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a60      	ldr	r2, [pc, #384]	; (8006b54 <HAL_DMA_Abort_IT+0x3c8>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d022      	beq.n	8006a1c <HAL_DMA_Abort_IT+0x290>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a5f      	ldr	r2, [pc, #380]	; (8006b58 <HAL_DMA_Abort_IT+0x3cc>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d01d      	beq.n	8006a1c <HAL_DMA_Abort_IT+0x290>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a5d      	ldr	r2, [pc, #372]	; (8006b5c <HAL_DMA_Abort_IT+0x3d0>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d018      	beq.n	8006a1c <HAL_DMA_Abort_IT+0x290>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a5c      	ldr	r2, [pc, #368]	; (8006b60 <HAL_DMA_Abort_IT+0x3d4>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d013      	beq.n	8006a1c <HAL_DMA_Abort_IT+0x290>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a5a      	ldr	r2, [pc, #360]	; (8006b64 <HAL_DMA_Abort_IT+0x3d8>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00e      	beq.n	8006a1c <HAL_DMA_Abort_IT+0x290>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a59      	ldr	r2, [pc, #356]	; (8006b68 <HAL_DMA_Abort_IT+0x3dc>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d009      	beq.n	8006a1c <HAL_DMA_Abort_IT+0x290>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a57      	ldr	r2, [pc, #348]	; (8006b6c <HAL_DMA_Abort_IT+0x3e0>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d004      	beq.n	8006a1c <HAL_DMA_Abort_IT+0x290>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a56      	ldr	r2, [pc, #344]	; (8006b70 <HAL_DMA_Abort_IT+0x3e4>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d108      	bne.n	8006a2e <HAL_DMA_Abort_IT+0x2a2>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 0201 	bic.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	e007      	b.n	8006a3e <HAL_DMA_Abort_IT+0x2b2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 0201 	bic.w	r2, r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a3c      	ldr	r2, [pc, #240]	; (8006b34 <HAL_DMA_Abort_IT+0x3a8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d072      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a3a      	ldr	r2, [pc, #232]	; (8006b38 <HAL_DMA_Abort_IT+0x3ac>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d06d      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a39      	ldr	r2, [pc, #228]	; (8006b3c <HAL_DMA_Abort_IT+0x3b0>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d068      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a37      	ldr	r2, [pc, #220]	; (8006b40 <HAL_DMA_Abort_IT+0x3b4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d063      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a36      	ldr	r2, [pc, #216]	; (8006b44 <HAL_DMA_Abort_IT+0x3b8>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d05e      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a34      	ldr	r2, [pc, #208]	; (8006b48 <HAL_DMA_Abort_IT+0x3bc>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d059      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a33      	ldr	r2, [pc, #204]	; (8006b4c <HAL_DMA_Abort_IT+0x3c0>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d054      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a31      	ldr	r2, [pc, #196]	; (8006b50 <HAL_DMA_Abort_IT+0x3c4>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d04f      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a30      	ldr	r2, [pc, #192]	; (8006b54 <HAL_DMA_Abort_IT+0x3c8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d04a      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a2e      	ldr	r2, [pc, #184]	; (8006b58 <HAL_DMA_Abort_IT+0x3cc>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d045      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a2d      	ldr	r2, [pc, #180]	; (8006b5c <HAL_DMA_Abort_IT+0x3d0>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d040      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a2b      	ldr	r2, [pc, #172]	; (8006b60 <HAL_DMA_Abort_IT+0x3d4>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d03b      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a2a      	ldr	r2, [pc, #168]	; (8006b64 <HAL_DMA_Abort_IT+0x3d8>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d036      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a28      	ldr	r2, [pc, #160]	; (8006b68 <HAL_DMA_Abort_IT+0x3dc>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d031      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a27      	ldr	r2, [pc, #156]	; (8006b6c <HAL_DMA_Abort_IT+0x3e0>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d02c      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a25      	ldr	r2, [pc, #148]	; (8006b70 <HAL_DMA_Abort_IT+0x3e4>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d027      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a24      	ldr	r2, [pc, #144]	; (8006b74 <HAL_DMA_Abort_IT+0x3e8>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d022      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a22      	ldr	r2, [pc, #136]	; (8006b78 <HAL_DMA_Abort_IT+0x3ec>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d01d      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a21      	ldr	r2, [pc, #132]	; (8006b7c <HAL_DMA_Abort_IT+0x3f0>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d018      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a1f      	ldr	r2, [pc, #124]	; (8006b80 <HAL_DMA_Abort_IT+0x3f4>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d013      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a1e      	ldr	r2, [pc, #120]	; (8006b84 <HAL_DMA_Abort_IT+0x3f8>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d00e      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a1c      	ldr	r2, [pc, #112]	; (8006b88 <HAL_DMA_Abort_IT+0x3fc>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d009      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a1b      	ldr	r2, [pc, #108]	; (8006b8c <HAL_DMA_Abort_IT+0x400>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d004      	beq.n	8006b2e <HAL_DMA_Abort_IT+0x3a2>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a19      	ldr	r2, [pc, #100]	; (8006b90 <HAL_DMA_Abort_IT+0x404>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d132      	bne.n	8006b94 <HAL_DMA_Abort_IT+0x408>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e031      	b.n	8006b96 <HAL_DMA_Abort_IT+0x40a>
 8006b32:	bf00      	nop
 8006b34:	40020010 	.word	0x40020010
 8006b38:	40020028 	.word	0x40020028
 8006b3c:	40020040 	.word	0x40020040
 8006b40:	40020058 	.word	0x40020058
 8006b44:	40020070 	.word	0x40020070
 8006b48:	40020088 	.word	0x40020088
 8006b4c:	400200a0 	.word	0x400200a0
 8006b50:	400200b8 	.word	0x400200b8
 8006b54:	40020410 	.word	0x40020410
 8006b58:	40020428 	.word	0x40020428
 8006b5c:	40020440 	.word	0x40020440
 8006b60:	40020458 	.word	0x40020458
 8006b64:	40020470 	.word	0x40020470
 8006b68:	40020488 	.word	0x40020488
 8006b6c:	400204a0 	.word	0x400204a0
 8006b70:	400204b8 	.word	0x400204b8
 8006b74:	58025408 	.word	0x58025408
 8006b78:	5802541c 	.word	0x5802541c
 8006b7c:	58025430 	.word	0x58025430
 8006b80:	58025444 	.word	0x58025444
 8006b84:	58025458 	.word	0x58025458
 8006b88:	5802546c 	.word	0x5802546c
 8006b8c:	58025480 	.word	0x58025480
 8006b90:	58025494 	.word	0x58025494
 8006b94:	2300      	movs	r3, #0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d028      	beq.n	8006bec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ba8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb4:	f003 031f 	and.w	r3, r3, #31
 8006bb8:	2201      	movs	r2, #1
 8006bba:	409a      	lsls	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006bc8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00c      	beq.n	8006bec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006be0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006bea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop

08006c18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08a      	sub	sp, #40	; 0x28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006c24:	4b67      	ldr	r3, [pc, #412]	; (8006dc4 <HAL_DMA_IRQHandler+0x1ac>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a67      	ldr	r2, [pc, #412]	; (8006dc8 <HAL_DMA_IRQHandler+0x1b0>)
 8006c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2e:	0a9b      	lsrs	r3, r3, #10
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c36:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a5f      	ldr	r2, [pc, #380]	; (8006dcc <HAL_DMA_IRQHandler+0x1b4>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d04a      	beq.n	8006cea <HAL_DMA_IRQHandler+0xd2>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a5d      	ldr	r2, [pc, #372]	; (8006dd0 <HAL_DMA_IRQHandler+0x1b8>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d045      	beq.n	8006cea <HAL_DMA_IRQHandler+0xd2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a5c      	ldr	r2, [pc, #368]	; (8006dd4 <HAL_DMA_IRQHandler+0x1bc>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d040      	beq.n	8006cea <HAL_DMA_IRQHandler+0xd2>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a5a      	ldr	r2, [pc, #360]	; (8006dd8 <HAL_DMA_IRQHandler+0x1c0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d03b      	beq.n	8006cea <HAL_DMA_IRQHandler+0xd2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a59      	ldr	r2, [pc, #356]	; (8006ddc <HAL_DMA_IRQHandler+0x1c4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d036      	beq.n	8006cea <HAL_DMA_IRQHandler+0xd2>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a57      	ldr	r2, [pc, #348]	; (8006de0 <HAL_DMA_IRQHandler+0x1c8>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d031      	beq.n	8006cea <HAL_DMA_IRQHandler+0xd2>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a56      	ldr	r2, [pc, #344]	; (8006de4 <HAL_DMA_IRQHandler+0x1cc>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d02c      	beq.n	8006cea <HAL_DMA_IRQHandler+0xd2>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a54      	ldr	r2, [pc, #336]	; (8006de8 <HAL_DMA_IRQHandler+0x1d0>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d027      	beq.n	8006cea <HAL_DMA_IRQHandler+0xd2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a53      	ldr	r2, [pc, #332]	; (8006dec <HAL_DMA_IRQHandler+0x1d4>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d022      	beq.n	8006cea <HAL_DMA_IRQHandler+0xd2>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a51      	ldr	r2, [pc, #324]	; (8006df0 <HAL_DMA_IRQHandler+0x1d8>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d01d      	beq.n	8006cea <HAL_DMA_IRQHandler+0xd2>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a50      	ldr	r2, [pc, #320]	; (8006df4 <HAL_DMA_IRQHandler+0x1dc>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d018      	beq.n	8006cea <HAL_DMA_IRQHandler+0xd2>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a4e      	ldr	r2, [pc, #312]	; (8006df8 <HAL_DMA_IRQHandler+0x1e0>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d013      	beq.n	8006cea <HAL_DMA_IRQHandler+0xd2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a4d      	ldr	r2, [pc, #308]	; (8006dfc <HAL_DMA_IRQHandler+0x1e4>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00e      	beq.n	8006cea <HAL_DMA_IRQHandler+0xd2>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a4b      	ldr	r2, [pc, #300]	; (8006e00 <HAL_DMA_IRQHandler+0x1e8>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d009      	beq.n	8006cea <HAL_DMA_IRQHandler+0xd2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a4a      	ldr	r2, [pc, #296]	; (8006e04 <HAL_DMA_IRQHandler+0x1ec>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d004      	beq.n	8006cea <HAL_DMA_IRQHandler+0xd2>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a48      	ldr	r2, [pc, #288]	; (8006e08 <HAL_DMA_IRQHandler+0x1f0>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d101      	bne.n	8006cee <HAL_DMA_IRQHandler+0xd6>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e000      	b.n	8006cf0 <HAL_DMA_IRQHandler+0xd8>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 842b 	beq.w	800754c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cfa:	f003 031f 	and.w	r3, r3, #31
 8006cfe:	2208      	movs	r2, #8
 8006d00:	409a      	lsls	r2, r3
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	4013      	ands	r3, r2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 80a2 	beq.w	8006e50 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a2e      	ldr	r2, [pc, #184]	; (8006dcc <HAL_DMA_IRQHandler+0x1b4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d04a      	beq.n	8006dac <HAL_DMA_IRQHandler+0x194>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2d      	ldr	r2, [pc, #180]	; (8006dd0 <HAL_DMA_IRQHandler+0x1b8>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d045      	beq.n	8006dac <HAL_DMA_IRQHandler+0x194>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a2b      	ldr	r2, [pc, #172]	; (8006dd4 <HAL_DMA_IRQHandler+0x1bc>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d040      	beq.n	8006dac <HAL_DMA_IRQHandler+0x194>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a2a      	ldr	r2, [pc, #168]	; (8006dd8 <HAL_DMA_IRQHandler+0x1c0>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d03b      	beq.n	8006dac <HAL_DMA_IRQHandler+0x194>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a28      	ldr	r2, [pc, #160]	; (8006ddc <HAL_DMA_IRQHandler+0x1c4>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d036      	beq.n	8006dac <HAL_DMA_IRQHandler+0x194>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a27      	ldr	r2, [pc, #156]	; (8006de0 <HAL_DMA_IRQHandler+0x1c8>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d031      	beq.n	8006dac <HAL_DMA_IRQHandler+0x194>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a25      	ldr	r2, [pc, #148]	; (8006de4 <HAL_DMA_IRQHandler+0x1cc>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d02c      	beq.n	8006dac <HAL_DMA_IRQHandler+0x194>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a24      	ldr	r2, [pc, #144]	; (8006de8 <HAL_DMA_IRQHandler+0x1d0>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d027      	beq.n	8006dac <HAL_DMA_IRQHandler+0x194>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a22      	ldr	r2, [pc, #136]	; (8006dec <HAL_DMA_IRQHandler+0x1d4>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d022      	beq.n	8006dac <HAL_DMA_IRQHandler+0x194>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a21      	ldr	r2, [pc, #132]	; (8006df0 <HAL_DMA_IRQHandler+0x1d8>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d01d      	beq.n	8006dac <HAL_DMA_IRQHandler+0x194>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a1f      	ldr	r2, [pc, #124]	; (8006df4 <HAL_DMA_IRQHandler+0x1dc>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d018      	beq.n	8006dac <HAL_DMA_IRQHandler+0x194>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a1e      	ldr	r2, [pc, #120]	; (8006df8 <HAL_DMA_IRQHandler+0x1e0>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d013      	beq.n	8006dac <HAL_DMA_IRQHandler+0x194>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a1c      	ldr	r2, [pc, #112]	; (8006dfc <HAL_DMA_IRQHandler+0x1e4>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d00e      	beq.n	8006dac <HAL_DMA_IRQHandler+0x194>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1b      	ldr	r2, [pc, #108]	; (8006e00 <HAL_DMA_IRQHandler+0x1e8>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d009      	beq.n	8006dac <HAL_DMA_IRQHandler+0x194>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a19      	ldr	r2, [pc, #100]	; (8006e04 <HAL_DMA_IRQHandler+0x1ec>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d004      	beq.n	8006dac <HAL_DMA_IRQHandler+0x194>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a18      	ldr	r2, [pc, #96]	; (8006e08 <HAL_DMA_IRQHandler+0x1f0>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d12f      	bne.n	8006e0c <HAL_DMA_IRQHandler+0x1f4>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0304 	and.w	r3, r3, #4
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	bf14      	ite	ne
 8006dba:	2301      	movne	r3, #1
 8006dbc:	2300      	moveq	r3, #0
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	e02e      	b.n	8006e20 <HAL_DMA_IRQHandler+0x208>
 8006dc2:	bf00      	nop
 8006dc4:	24000000 	.word	0x24000000
 8006dc8:	1b4e81b5 	.word	0x1b4e81b5
 8006dcc:	40020010 	.word	0x40020010
 8006dd0:	40020028 	.word	0x40020028
 8006dd4:	40020040 	.word	0x40020040
 8006dd8:	40020058 	.word	0x40020058
 8006ddc:	40020070 	.word	0x40020070
 8006de0:	40020088 	.word	0x40020088
 8006de4:	400200a0 	.word	0x400200a0
 8006de8:	400200b8 	.word	0x400200b8
 8006dec:	40020410 	.word	0x40020410
 8006df0:	40020428 	.word	0x40020428
 8006df4:	40020440 	.word	0x40020440
 8006df8:	40020458 	.word	0x40020458
 8006dfc:	40020470 	.word	0x40020470
 8006e00:	40020488 	.word	0x40020488
 8006e04:	400204a0 	.word	0x400204a0
 8006e08:	400204b8 	.word	0x400204b8
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0308 	and.w	r3, r3, #8
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	bf14      	ite	ne
 8006e1a:	2301      	movne	r3, #1
 8006e1c:	2300      	moveq	r3, #0
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d015      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0204 	bic.w	r2, r2, #4
 8006e32:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e38:	f003 031f 	and.w	r3, r3, #31
 8006e3c:	2208      	movs	r2, #8
 8006e3e:	409a      	lsls	r2, r3
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e48:	f043 0201 	orr.w	r2, r3, #1
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e54:	f003 031f 	and.w	r3, r3, #31
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d06e      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a69      	ldr	r2, [pc, #420]	; (8007010 <HAL_DMA_IRQHandler+0x3f8>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d04a      	beq.n	8006f06 <HAL_DMA_IRQHandler+0x2ee>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a67      	ldr	r2, [pc, #412]	; (8007014 <HAL_DMA_IRQHandler+0x3fc>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d045      	beq.n	8006f06 <HAL_DMA_IRQHandler+0x2ee>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a66      	ldr	r2, [pc, #408]	; (8007018 <HAL_DMA_IRQHandler+0x400>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d040      	beq.n	8006f06 <HAL_DMA_IRQHandler+0x2ee>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a64      	ldr	r2, [pc, #400]	; (800701c <HAL_DMA_IRQHandler+0x404>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d03b      	beq.n	8006f06 <HAL_DMA_IRQHandler+0x2ee>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a63      	ldr	r2, [pc, #396]	; (8007020 <HAL_DMA_IRQHandler+0x408>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d036      	beq.n	8006f06 <HAL_DMA_IRQHandler+0x2ee>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a61      	ldr	r2, [pc, #388]	; (8007024 <HAL_DMA_IRQHandler+0x40c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d031      	beq.n	8006f06 <HAL_DMA_IRQHandler+0x2ee>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a60      	ldr	r2, [pc, #384]	; (8007028 <HAL_DMA_IRQHandler+0x410>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d02c      	beq.n	8006f06 <HAL_DMA_IRQHandler+0x2ee>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a5e      	ldr	r2, [pc, #376]	; (800702c <HAL_DMA_IRQHandler+0x414>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d027      	beq.n	8006f06 <HAL_DMA_IRQHandler+0x2ee>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a5d      	ldr	r2, [pc, #372]	; (8007030 <HAL_DMA_IRQHandler+0x418>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d022      	beq.n	8006f06 <HAL_DMA_IRQHandler+0x2ee>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a5b      	ldr	r2, [pc, #364]	; (8007034 <HAL_DMA_IRQHandler+0x41c>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d01d      	beq.n	8006f06 <HAL_DMA_IRQHandler+0x2ee>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a5a      	ldr	r2, [pc, #360]	; (8007038 <HAL_DMA_IRQHandler+0x420>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d018      	beq.n	8006f06 <HAL_DMA_IRQHandler+0x2ee>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a58      	ldr	r2, [pc, #352]	; (800703c <HAL_DMA_IRQHandler+0x424>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d013      	beq.n	8006f06 <HAL_DMA_IRQHandler+0x2ee>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a57      	ldr	r2, [pc, #348]	; (8007040 <HAL_DMA_IRQHandler+0x428>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d00e      	beq.n	8006f06 <HAL_DMA_IRQHandler+0x2ee>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a55      	ldr	r2, [pc, #340]	; (8007044 <HAL_DMA_IRQHandler+0x42c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d009      	beq.n	8006f06 <HAL_DMA_IRQHandler+0x2ee>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a54      	ldr	r2, [pc, #336]	; (8007048 <HAL_DMA_IRQHandler+0x430>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d004      	beq.n	8006f06 <HAL_DMA_IRQHandler+0x2ee>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a52      	ldr	r2, [pc, #328]	; (800704c <HAL_DMA_IRQHandler+0x434>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d10a      	bne.n	8006f1c <HAL_DMA_IRQHandler+0x304>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	bf14      	ite	ne
 8006f14:	2301      	movne	r3, #1
 8006f16:	2300      	moveq	r3, #0
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	e003      	b.n	8006f24 <HAL_DMA_IRQHandler+0x30c>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2300      	movs	r3, #0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00d      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f2c:	f003 031f 	and.w	r3, r3, #31
 8006f30:	2201      	movs	r2, #1
 8006f32:	409a      	lsls	r2, r3
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3c:	f043 0202 	orr.w	r2, r3, #2
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f48:	f003 031f 	and.w	r3, r3, #31
 8006f4c:	2204      	movs	r2, #4
 8006f4e:	409a      	lsls	r2, r3
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	4013      	ands	r3, r2
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 808f 	beq.w	8007078 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a2c      	ldr	r2, [pc, #176]	; (8007010 <HAL_DMA_IRQHandler+0x3f8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d04a      	beq.n	8006ffa <HAL_DMA_IRQHandler+0x3e2>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a2a      	ldr	r2, [pc, #168]	; (8007014 <HAL_DMA_IRQHandler+0x3fc>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d045      	beq.n	8006ffa <HAL_DMA_IRQHandler+0x3e2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a29      	ldr	r2, [pc, #164]	; (8007018 <HAL_DMA_IRQHandler+0x400>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d040      	beq.n	8006ffa <HAL_DMA_IRQHandler+0x3e2>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a27      	ldr	r2, [pc, #156]	; (800701c <HAL_DMA_IRQHandler+0x404>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d03b      	beq.n	8006ffa <HAL_DMA_IRQHandler+0x3e2>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a26      	ldr	r2, [pc, #152]	; (8007020 <HAL_DMA_IRQHandler+0x408>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d036      	beq.n	8006ffa <HAL_DMA_IRQHandler+0x3e2>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a24      	ldr	r2, [pc, #144]	; (8007024 <HAL_DMA_IRQHandler+0x40c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d031      	beq.n	8006ffa <HAL_DMA_IRQHandler+0x3e2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a23      	ldr	r2, [pc, #140]	; (8007028 <HAL_DMA_IRQHandler+0x410>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d02c      	beq.n	8006ffa <HAL_DMA_IRQHandler+0x3e2>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a21      	ldr	r2, [pc, #132]	; (800702c <HAL_DMA_IRQHandler+0x414>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d027      	beq.n	8006ffa <HAL_DMA_IRQHandler+0x3e2>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a20      	ldr	r2, [pc, #128]	; (8007030 <HAL_DMA_IRQHandler+0x418>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d022      	beq.n	8006ffa <HAL_DMA_IRQHandler+0x3e2>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1e      	ldr	r2, [pc, #120]	; (8007034 <HAL_DMA_IRQHandler+0x41c>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d01d      	beq.n	8006ffa <HAL_DMA_IRQHandler+0x3e2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a1d      	ldr	r2, [pc, #116]	; (8007038 <HAL_DMA_IRQHandler+0x420>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d018      	beq.n	8006ffa <HAL_DMA_IRQHandler+0x3e2>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a1b      	ldr	r2, [pc, #108]	; (800703c <HAL_DMA_IRQHandler+0x424>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d013      	beq.n	8006ffa <HAL_DMA_IRQHandler+0x3e2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a1a      	ldr	r2, [pc, #104]	; (8007040 <HAL_DMA_IRQHandler+0x428>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d00e      	beq.n	8006ffa <HAL_DMA_IRQHandler+0x3e2>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a18      	ldr	r2, [pc, #96]	; (8007044 <HAL_DMA_IRQHandler+0x42c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d009      	beq.n	8006ffa <HAL_DMA_IRQHandler+0x3e2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a17      	ldr	r2, [pc, #92]	; (8007048 <HAL_DMA_IRQHandler+0x430>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d004      	beq.n	8006ffa <HAL_DMA_IRQHandler+0x3e2>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a15      	ldr	r2, [pc, #84]	; (800704c <HAL_DMA_IRQHandler+0x434>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d12a      	bne.n	8007050 <HAL_DMA_IRQHandler+0x438>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	2b00      	cmp	r3, #0
 8007006:	bf14      	ite	ne
 8007008:	2301      	movne	r3, #1
 800700a:	2300      	moveq	r3, #0
 800700c:	b2db      	uxtb	r3, r3
 800700e:	e023      	b.n	8007058 <HAL_DMA_IRQHandler+0x440>
 8007010:	40020010 	.word	0x40020010
 8007014:	40020028 	.word	0x40020028
 8007018:	40020040 	.word	0x40020040
 800701c:	40020058 	.word	0x40020058
 8007020:	40020070 	.word	0x40020070
 8007024:	40020088 	.word	0x40020088
 8007028:	400200a0 	.word	0x400200a0
 800702c:	400200b8 	.word	0x400200b8
 8007030:	40020410 	.word	0x40020410
 8007034:	40020428 	.word	0x40020428
 8007038:	40020440 	.word	0x40020440
 800703c:	40020458 	.word	0x40020458
 8007040:	40020470 	.word	0x40020470
 8007044:	40020488 	.word	0x40020488
 8007048:	400204a0 	.word	0x400204a0
 800704c:	400204b8 	.word	0x400204b8
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2300      	movs	r3, #0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00d      	beq.n	8007078 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007060:	f003 031f 	and.w	r3, r3, #31
 8007064:	2204      	movs	r2, #4
 8007066:	409a      	lsls	r2, r3
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007070:	f043 0204 	orr.w	r2, r3, #4
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800707c:	f003 031f 	and.w	r3, r3, #31
 8007080:	2210      	movs	r2, #16
 8007082:	409a      	lsls	r2, r3
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	4013      	ands	r3, r2
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 80a6 	beq.w	80071da <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a85      	ldr	r2, [pc, #532]	; (80072a8 <HAL_DMA_IRQHandler+0x690>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d04a      	beq.n	800712e <HAL_DMA_IRQHandler+0x516>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a83      	ldr	r2, [pc, #524]	; (80072ac <HAL_DMA_IRQHandler+0x694>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d045      	beq.n	800712e <HAL_DMA_IRQHandler+0x516>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a82      	ldr	r2, [pc, #520]	; (80072b0 <HAL_DMA_IRQHandler+0x698>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d040      	beq.n	800712e <HAL_DMA_IRQHandler+0x516>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a80      	ldr	r2, [pc, #512]	; (80072b4 <HAL_DMA_IRQHandler+0x69c>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d03b      	beq.n	800712e <HAL_DMA_IRQHandler+0x516>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a7f      	ldr	r2, [pc, #508]	; (80072b8 <HAL_DMA_IRQHandler+0x6a0>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d036      	beq.n	800712e <HAL_DMA_IRQHandler+0x516>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a7d      	ldr	r2, [pc, #500]	; (80072bc <HAL_DMA_IRQHandler+0x6a4>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d031      	beq.n	800712e <HAL_DMA_IRQHandler+0x516>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a7c      	ldr	r2, [pc, #496]	; (80072c0 <HAL_DMA_IRQHandler+0x6a8>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d02c      	beq.n	800712e <HAL_DMA_IRQHandler+0x516>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a7a      	ldr	r2, [pc, #488]	; (80072c4 <HAL_DMA_IRQHandler+0x6ac>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d027      	beq.n	800712e <HAL_DMA_IRQHandler+0x516>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a79      	ldr	r2, [pc, #484]	; (80072c8 <HAL_DMA_IRQHandler+0x6b0>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d022      	beq.n	800712e <HAL_DMA_IRQHandler+0x516>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a77      	ldr	r2, [pc, #476]	; (80072cc <HAL_DMA_IRQHandler+0x6b4>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d01d      	beq.n	800712e <HAL_DMA_IRQHandler+0x516>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a76      	ldr	r2, [pc, #472]	; (80072d0 <HAL_DMA_IRQHandler+0x6b8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d018      	beq.n	800712e <HAL_DMA_IRQHandler+0x516>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a74      	ldr	r2, [pc, #464]	; (80072d4 <HAL_DMA_IRQHandler+0x6bc>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d013      	beq.n	800712e <HAL_DMA_IRQHandler+0x516>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a73      	ldr	r2, [pc, #460]	; (80072d8 <HAL_DMA_IRQHandler+0x6c0>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d00e      	beq.n	800712e <HAL_DMA_IRQHandler+0x516>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a71      	ldr	r2, [pc, #452]	; (80072dc <HAL_DMA_IRQHandler+0x6c4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d009      	beq.n	800712e <HAL_DMA_IRQHandler+0x516>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a70      	ldr	r2, [pc, #448]	; (80072e0 <HAL_DMA_IRQHandler+0x6c8>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d004      	beq.n	800712e <HAL_DMA_IRQHandler+0x516>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a6e      	ldr	r2, [pc, #440]	; (80072e4 <HAL_DMA_IRQHandler+0x6cc>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d10a      	bne.n	8007144 <HAL_DMA_IRQHandler+0x52c>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0308 	and.w	r3, r3, #8
 8007138:	2b00      	cmp	r3, #0
 800713a:	bf14      	ite	ne
 800713c:	2301      	movne	r3, #1
 800713e:	2300      	moveq	r3, #0
 8007140:	b2db      	uxtb	r3, r3
 8007142:	e009      	b.n	8007158 <HAL_DMA_IRQHandler+0x540>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0304 	and.w	r3, r3, #4
 800714e:	2b00      	cmp	r3, #0
 8007150:	bf14      	ite	ne
 8007152:	2301      	movne	r3, #1
 8007154:	2300      	moveq	r3, #0
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d03e      	beq.n	80071da <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007160:	f003 031f 	and.w	r3, r3, #31
 8007164:	2210      	movs	r2, #16
 8007166:	409a      	lsls	r2, r3
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d018      	beq.n	80071ac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d108      	bne.n	800719a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718c:	2b00      	cmp	r3, #0
 800718e:	d024      	beq.n	80071da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	4798      	blx	r3
 8007198:	e01f      	b.n	80071da <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d01b      	beq.n	80071da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	4798      	blx	r3
 80071aa:	e016      	b.n	80071da <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d107      	bne.n	80071ca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0208 	bic.w	r2, r2, #8
 80071c8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d003      	beq.n	80071da <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071de:	f003 031f 	and.w	r3, r3, #31
 80071e2:	2220      	movs	r2, #32
 80071e4:	409a      	lsls	r2, r3
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	4013      	ands	r3, r2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 8110 	beq.w	8007410 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a2c      	ldr	r2, [pc, #176]	; (80072a8 <HAL_DMA_IRQHandler+0x690>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d04a      	beq.n	8007290 <HAL_DMA_IRQHandler+0x678>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a2b      	ldr	r2, [pc, #172]	; (80072ac <HAL_DMA_IRQHandler+0x694>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d045      	beq.n	8007290 <HAL_DMA_IRQHandler+0x678>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a29      	ldr	r2, [pc, #164]	; (80072b0 <HAL_DMA_IRQHandler+0x698>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d040      	beq.n	8007290 <HAL_DMA_IRQHandler+0x678>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a28      	ldr	r2, [pc, #160]	; (80072b4 <HAL_DMA_IRQHandler+0x69c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d03b      	beq.n	8007290 <HAL_DMA_IRQHandler+0x678>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a26      	ldr	r2, [pc, #152]	; (80072b8 <HAL_DMA_IRQHandler+0x6a0>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d036      	beq.n	8007290 <HAL_DMA_IRQHandler+0x678>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a25      	ldr	r2, [pc, #148]	; (80072bc <HAL_DMA_IRQHandler+0x6a4>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d031      	beq.n	8007290 <HAL_DMA_IRQHandler+0x678>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a23      	ldr	r2, [pc, #140]	; (80072c0 <HAL_DMA_IRQHandler+0x6a8>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d02c      	beq.n	8007290 <HAL_DMA_IRQHandler+0x678>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a22      	ldr	r2, [pc, #136]	; (80072c4 <HAL_DMA_IRQHandler+0x6ac>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d027      	beq.n	8007290 <HAL_DMA_IRQHandler+0x678>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a20      	ldr	r2, [pc, #128]	; (80072c8 <HAL_DMA_IRQHandler+0x6b0>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d022      	beq.n	8007290 <HAL_DMA_IRQHandler+0x678>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a1f      	ldr	r2, [pc, #124]	; (80072cc <HAL_DMA_IRQHandler+0x6b4>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d01d      	beq.n	8007290 <HAL_DMA_IRQHandler+0x678>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a1d      	ldr	r2, [pc, #116]	; (80072d0 <HAL_DMA_IRQHandler+0x6b8>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d018      	beq.n	8007290 <HAL_DMA_IRQHandler+0x678>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a1c      	ldr	r2, [pc, #112]	; (80072d4 <HAL_DMA_IRQHandler+0x6bc>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d013      	beq.n	8007290 <HAL_DMA_IRQHandler+0x678>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a1a      	ldr	r2, [pc, #104]	; (80072d8 <HAL_DMA_IRQHandler+0x6c0>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d00e      	beq.n	8007290 <HAL_DMA_IRQHandler+0x678>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a19      	ldr	r2, [pc, #100]	; (80072dc <HAL_DMA_IRQHandler+0x6c4>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d009      	beq.n	8007290 <HAL_DMA_IRQHandler+0x678>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a17      	ldr	r2, [pc, #92]	; (80072e0 <HAL_DMA_IRQHandler+0x6c8>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d004      	beq.n	8007290 <HAL_DMA_IRQHandler+0x678>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a16      	ldr	r2, [pc, #88]	; (80072e4 <HAL_DMA_IRQHandler+0x6cc>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d12b      	bne.n	80072e8 <HAL_DMA_IRQHandler+0x6d0>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0310 	and.w	r3, r3, #16
 800729a:	2b00      	cmp	r3, #0
 800729c:	bf14      	ite	ne
 800729e:	2301      	movne	r3, #1
 80072a0:	2300      	moveq	r3, #0
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	e02a      	b.n	80072fc <HAL_DMA_IRQHandler+0x6e4>
 80072a6:	bf00      	nop
 80072a8:	40020010 	.word	0x40020010
 80072ac:	40020028 	.word	0x40020028
 80072b0:	40020040 	.word	0x40020040
 80072b4:	40020058 	.word	0x40020058
 80072b8:	40020070 	.word	0x40020070
 80072bc:	40020088 	.word	0x40020088
 80072c0:	400200a0 	.word	0x400200a0
 80072c4:	400200b8 	.word	0x400200b8
 80072c8:	40020410 	.word	0x40020410
 80072cc:	40020428 	.word	0x40020428
 80072d0:	40020440 	.word	0x40020440
 80072d4:	40020458 	.word	0x40020458
 80072d8:	40020470 	.word	0x40020470
 80072dc:	40020488 	.word	0x40020488
 80072e0:	400204a0 	.word	0x400204a0
 80072e4:	400204b8 	.word	0x400204b8
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	bf14      	ite	ne
 80072f6:	2301      	movne	r3, #1
 80072f8:	2300      	moveq	r3, #0
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 8087 	beq.w	8007410 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007306:	f003 031f 	and.w	r3, r3, #31
 800730a:	2220      	movs	r2, #32
 800730c:	409a      	lsls	r2, r3
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b04      	cmp	r3, #4
 800731c:	d139      	bne.n	8007392 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f022 0216 	bic.w	r2, r2, #22
 800732c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	695a      	ldr	r2, [r3, #20]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800733c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	2b00      	cmp	r3, #0
 8007344:	d103      	bne.n	800734e <HAL_DMA_IRQHandler+0x736>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800734a:	2b00      	cmp	r3, #0
 800734c:	d007      	beq.n	800735e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0208 	bic.w	r2, r2, #8
 800735c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007362:	f003 031f 	and.w	r3, r3, #31
 8007366:	223f      	movs	r2, #63	; 0x3f
 8007368:	409a      	lsls	r2, r3
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 834a 	beq.w	8007a1c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
          }
          return;
 8007390:	e344      	b.n	8007a1c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d018      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d108      	bne.n	80073c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d02c      	beq.n	8007410 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	4798      	blx	r3
 80073be:	e027      	b.n	8007410 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d023      	beq.n	8007410 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	4798      	blx	r3
 80073d0:	e01e      	b.n	8007410 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10f      	bne.n	8007400 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f022 0210 	bic.w	r2, r2, #16
 80073ee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007404:	2b00      	cmp	r3, #0
 8007406:	d003      	beq.n	8007410 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 8306 	beq.w	8007a26 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 8088 	beq.w	8007538 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2204      	movs	r2, #4
 800742c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a7a      	ldr	r2, [pc, #488]	; (8007620 <HAL_DMA_IRQHandler+0xa08>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d04a      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x8b8>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a79      	ldr	r2, [pc, #484]	; (8007624 <HAL_DMA_IRQHandler+0xa0c>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d045      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x8b8>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a77      	ldr	r2, [pc, #476]	; (8007628 <HAL_DMA_IRQHandler+0xa10>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d040      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x8b8>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a76      	ldr	r2, [pc, #472]	; (800762c <HAL_DMA_IRQHandler+0xa14>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d03b      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x8b8>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a74      	ldr	r2, [pc, #464]	; (8007630 <HAL_DMA_IRQHandler+0xa18>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d036      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x8b8>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a73      	ldr	r2, [pc, #460]	; (8007634 <HAL_DMA_IRQHandler+0xa1c>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d031      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x8b8>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a71      	ldr	r2, [pc, #452]	; (8007638 <HAL_DMA_IRQHandler+0xa20>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d02c      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x8b8>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a70      	ldr	r2, [pc, #448]	; (800763c <HAL_DMA_IRQHandler+0xa24>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d027      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x8b8>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a6e      	ldr	r2, [pc, #440]	; (8007640 <HAL_DMA_IRQHandler+0xa28>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d022      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x8b8>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a6d      	ldr	r2, [pc, #436]	; (8007644 <HAL_DMA_IRQHandler+0xa2c>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d01d      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x8b8>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a6b      	ldr	r2, [pc, #428]	; (8007648 <HAL_DMA_IRQHandler+0xa30>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d018      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x8b8>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a6a      	ldr	r2, [pc, #424]	; (800764c <HAL_DMA_IRQHandler+0xa34>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d013      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x8b8>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a68      	ldr	r2, [pc, #416]	; (8007650 <HAL_DMA_IRQHandler+0xa38>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d00e      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x8b8>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a67      	ldr	r2, [pc, #412]	; (8007654 <HAL_DMA_IRQHandler+0xa3c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d009      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x8b8>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a65      	ldr	r2, [pc, #404]	; (8007658 <HAL_DMA_IRQHandler+0xa40>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d004      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x8b8>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a64      	ldr	r2, [pc, #400]	; (800765c <HAL_DMA_IRQHandler+0xa44>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d108      	bne.n	80074e2 <HAL_DMA_IRQHandler+0x8ca>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f022 0201 	bic.w	r2, r2, #1
 80074de:	601a      	str	r2, [r3, #0]
 80074e0:	e007      	b.n	80074f2 <HAL_DMA_IRQHandler+0x8da>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 0201 	bic.w	r2, r2, #1
 80074f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3301      	adds	r3, #1
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d307      	bcc.n	800750e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1f2      	bne.n	80074f2 <HAL_DMA_IRQHandler+0x8da>
 800750c:	e000      	b.n	8007510 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800750e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d004      	beq.n	8007528 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2203      	movs	r2, #3
 8007522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007526:	e003      	b.n	8007530 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 8272 	beq.w	8007a26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	4798      	blx	r3
 800754a:	e26c      	b.n	8007a26 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a43      	ldr	r2, [pc, #268]	; (8007660 <HAL_DMA_IRQHandler+0xa48>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d022      	beq.n	800759c <HAL_DMA_IRQHandler+0x984>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a42      	ldr	r2, [pc, #264]	; (8007664 <HAL_DMA_IRQHandler+0xa4c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d01d      	beq.n	800759c <HAL_DMA_IRQHandler+0x984>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a40      	ldr	r2, [pc, #256]	; (8007668 <HAL_DMA_IRQHandler+0xa50>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d018      	beq.n	800759c <HAL_DMA_IRQHandler+0x984>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a3f      	ldr	r2, [pc, #252]	; (800766c <HAL_DMA_IRQHandler+0xa54>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d013      	beq.n	800759c <HAL_DMA_IRQHandler+0x984>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a3d      	ldr	r2, [pc, #244]	; (8007670 <HAL_DMA_IRQHandler+0xa58>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d00e      	beq.n	800759c <HAL_DMA_IRQHandler+0x984>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a3c      	ldr	r2, [pc, #240]	; (8007674 <HAL_DMA_IRQHandler+0xa5c>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d009      	beq.n	800759c <HAL_DMA_IRQHandler+0x984>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a3a      	ldr	r2, [pc, #232]	; (8007678 <HAL_DMA_IRQHandler+0xa60>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d004      	beq.n	800759c <HAL_DMA_IRQHandler+0x984>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a39      	ldr	r2, [pc, #228]	; (800767c <HAL_DMA_IRQHandler+0xa64>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d101      	bne.n	80075a0 <HAL_DMA_IRQHandler+0x988>
 800759c:	2301      	movs	r3, #1
 800759e:	e000      	b.n	80075a2 <HAL_DMA_IRQHandler+0x98a>
 80075a0:	2300      	movs	r3, #0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 823f 	beq.w	8007a26 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b4:	f003 031f 	and.w	r3, r3, #31
 80075b8:	2204      	movs	r2, #4
 80075ba:	409a      	lsls	r2, r3
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	4013      	ands	r3, r2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 80cd 	beq.w	8007760 <HAL_DMA_IRQHandler+0xb48>
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	f003 0304 	and.w	r3, r3, #4
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 80c7 	beq.w	8007760 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d6:	f003 031f 	and.w	r3, r3, #31
 80075da:	2204      	movs	r2, #4
 80075dc:	409a      	lsls	r2, r3
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d049      	beq.n	8007680 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d109      	bne.n	800760a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f000 8210 	beq.w	8007a20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007608:	e20a      	b.n	8007a20 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 8206 	beq.w	8007a20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800761c:	e200      	b.n	8007a20 <HAL_DMA_IRQHandler+0xe08>
 800761e:	bf00      	nop
 8007620:	40020010 	.word	0x40020010
 8007624:	40020028 	.word	0x40020028
 8007628:	40020040 	.word	0x40020040
 800762c:	40020058 	.word	0x40020058
 8007630:	40020070 	.word	0x40020070
 8007634:	40020088 	.word	0x40020088
 8007638:	400200a0 	.word	0x400200a0
 800763c:	400200b8 	.word	0x400200b8
 8007640:	40020410 	.word	0x40020410
 8007644:	40020428 	.word	0x40020428
 8007648:	40020440 	.word	0x40020440
 800764c:	40020458 	.word	0x40020458
 8007650:	40020470 	.word	0x40020470
 8007654:	40020488 	.word	0x40020488
 8007658:	400204a0 	.word	0x400204a0
 800765c:	400204b8 	.word	0x400204b8
 8007660:	58025408 	.word	0x58025408
 8007664:	5802541c 	.word	0x5802541c
 8007668:	58025430 	.word	0x58025430
 800766c:	58025444 	.word	0x58025444
 8007670:	58025458 	.word	0x58025458
 8007674:	5802546c 	.word	0x5802546c
 8007678:	58025480 	.word	0x58025480
 800767c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	d160      	bne.n	800774c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a7f      	ldr	r2, [pc, #508]	; (800788c <HAL_DMA_IRQHandler+0xc74>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d04a      	beq.n	800772a <HAL_DMA_IRQHandler+0xb12>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a7d      	ldr	r2, [pc, #500]	; (8007890 <HAL_DMA_IRQHandler+0xc78>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d045      	beq.n	800772a <HAL_DMA_IRQHandler+0xb12>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a7c      	ldr	r2, [pc, #496]	; (8007894 <HAL_DMA_IRQHandler+0xc7c>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d040      	beq.n	800772a <HAL_DMA_IRQHandler+0xb12>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a7a      	ldr	r2, [pc, #488]	; (8007898 <HAL_DMA_IRQHandler+0xc80>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d03b      	beq.n	800772a <HAL_DMA_IRQHandler+0xb12>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a79      	ldr	r2, [pc, #484]	; (800789c <HAL_DMA_IRQHandler+0xc84>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d036      	beq.n	800772a <HAL_DMA_IRQHandler+0xb12>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a77      	ldr	r2, [pc, #476]	; (80078a0 <HAL_DMA_IRQHandler+0xc88>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d031      	beq.n	800772a <HAL_DMA_IRQHandler+0xb12>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a76      	ldr	r2, [pc, #472]	; (80078a4 <HAL_DMA_IRQHandler+0xc8c>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d02c      	beq.n	800772a <HAL_DMA_IRQHandler+0xb12>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a74      	ldr	r2, [pc, #464]	; (80078a8 <HAL_DMA_IRQHandler+0xc90>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d027      	beq.n	800772a <HAL_DMA_IRQHandler+0xb12>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a73      	ldr	r2, [pc, #460]	; (80078ac <HAL_DMA_IRQHandler+0xc94>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d022      	beq.n	800772a <HAL_DMA_IRQHandler+0xb12>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a71      	ldr	r2, [pc, #452]	; (80078b0 <HAL_DMA_IRQHandler+0xc98>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d01d      	beq.n	800772a <HAL_DMA_IRQHandler+0xb12>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a70      	ldr	r2, [pc, #448]	; (80078b4 <HAL_DMA_IRQHandler+0xc9c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d018      	beq.n	800772a <HAL_DMA_IRQHandler+0xb12>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a6e      	ldr	r2, [pc, #440]	; (80078b8 <HAL_DMA_IRQHandler+0xca0>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d013      	beq.n	800772a <HAL_DMA_IRQHandler+0xb12>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a6d      	ldr	r2, [pc, #436]	; (80078bc <HAL_DMA_IRQHandler+0xca4>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d00e      	beq.n	800772a <HAL_DMA_IRQHandler+0xb12>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a6b      	ldr	r2, [pc, #428]	; (80078c0 <HAL_DMA_IRQHandler+0xca8>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d009      	beq.n	800772a <HAL_DMA_IRQHandler+0xb12>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a6a      	ldr	r2, [pc, #424]	; (80078c4 <HAL_DMA_IRQHandler+0xcac>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d004      	beq.n	800772a <HAL_DMA_IRQHandler+0xb12>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a68      	ldr	r2, [pc, #416]	; (80078c8 <HAL_DMA_IRQHandler+0xcb0>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d108      	bne.n	800773c <HAL_DMA_IRQHandler+0xb24>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f022 0208 	bic.w	r2, r2, #8
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	e007      	b.n	800774c <HAL_DMA_IRQHandler+0xb34>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f022 0204 	bic.w	r2, r2, #4
 800774a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 8165 	beq.w	8007a20 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800775e:	e15f      	b.n	8007a20 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007764:	f003 031f 	and.w	r3, r3, #31
 8007768:	2202      	movs	r2, #2
 800776a:	409a      	lsls	r2, r3
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	4013      	ands	r3, r2
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 80c5 	beq.w	8007900 <HAL_DMA_IRQHandler+0xce8>
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 80bf 	beq.w	8007900 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007786:	f003 031f 	and.w	r3, r3, #31
 800778a:	2202      	movs	r2, #2
 800778c:	409a      	lsls	r2, r3
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d018      	beq.n	80077ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d109      	bne.n	80077ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 813a 	beq.w	8007a24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077b8:	e134      	b.n	8007a24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f000 8130 	beq.w	8007a24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077cc:	e12a      	b.n	8007a24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f003 0320 	and.w	r3, r3, #32
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f040 8089 	bne.w	80078ec <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a2b      	ldr	r2, [pc, #172]	; (800788c <HAL_DMA_IRQHandler+0xc74>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d04a      	beq.n	800787a <HAL_DMA_IRQHandler+0xc62>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a29      	ldr	r2, [pc, #164]	; (8007890 <HAL_DMA_IRQHandler+0xc78>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d045      	beq.n	800787a <HAL_DMA_IRQHandler+0xc62>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a28      	ldr	r2, [pc, #160]	; (8007894 <HAL_DMA_IRQHandler+0xc7c>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d040      	beq.n	800787a <HAL_DMA_IRQHandler+0xc62>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a26      	ldr	r2, [pc, #152]	; (8007898 <HAL_DMA_IRQHandler+0xc80>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d03b      	beq.n	800787a <HAL_DMA_IRQHandler+0xc62>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a25      	ldr	r2, [pc, #148]	; (800789c <HAL_DMA_IRQHandler+0xc84>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d036      	beq.n	800787a <HAL_DMA_IRQHandler+0xc62>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a23      	ldr	r2, [pc, #140]	; (80078a0 <HAL_DMA_IRQHandler+0xc88>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d031      	beq.n	800787a <HAL_DMA_IRQHandler+0xc62>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a22      	ldr	r2, [pc, #136]	; (80078a4 <HAL_DMA_IRQHandler+0xc8c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d02c      	beq.n	800787a <HAL_DMA_IRQHandler+0xc62>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a20      	ldr	r2, [pc, #128]	; (80078a8 <HAL_DMA_IRQHandler+0xc90>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d027      	beq.n	800787a <HAL_DMA_IRQHandler+0xc62>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a1f      	ldr	r2, [pc, #124]	; (80078ac <HAL_DMA_IRQHandler+0xc94>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d022      	beq.n	800787a <HAL_DMA_IRQHandler+0xc62>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a1d      	ldr	r2, [pc, #116]	; (80078b0 <HAL_DMA_IRQHandler+0xc98>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d01d      	beq.n	800787a <HAL_DMA_IRQHandler+0xc62>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a1c      	ldr	r2, [pc, #112]	; (80078b4 <HAL_DMA_IRQHandler+0xc9c>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d018      	beq.n	800787a <HAL_DMA_IRQHandler+0xc62>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a1a      	ldr	r2, [pc, #104]	; (80078b8 <HAL_DMA_IRQHandler+0xca0>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d013      	beq.n	800787a <HAL_DMA_IRQHandler+0xc62>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a19      	ldr	r2, [pc, #100]	; (80078bc <HAL_DMA_IRQHandler+0xca4>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d00e      	beq.n	800787a <HAL_DMA_IRQHandler+0xc62>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a17      	ldr	r2, [pc, #92]	; (80078c0 <HAL_DMA_IRQHandler+0xca8>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d009      	beq.n	800787a <HAL_DMA_IRQHandler+0xc62>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a16      	ldr	r2, [pc, #88]	; (80078c4 <HAL_DMA_IRQHandler+0xcac>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d004      	beq.n	800787a <HAL_DMA_IRQHandler+0xc62>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a14      	ldr	r2, [pc, #80]	; (80078c8 <HAL_DMA_IRQHandler+0xcb0>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d128      	bne.n	80078cc <HAL_DMA_IRQHandler+0xcb4>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f022 0214 	bic.w	r2, r2, #20
 8007888:	601a      	str	r2, [r3, #0]
 800788a:	e027      	b.n	80078dc <HAL_DMA_IRQHandler+0xcc4>
 800788c:	40020010 	.word	0x40020010
 8007890:	40020028 	.word	0x40020028
 8007894:	40020040 	.word	0x40020040
 8007898:	40020058 	.word	0x40020058
 800789c:	40020070 	.word	0x40020070
 80078a0:	40020088 	.word	0x40020088
 80078a4:	400200a0 	.word	0x400200a0
 80078a8:	400200b8 	.word	0x400200b8
 80078ac:	40020410 	.word	0x40020410
 80078b0:	40020428 	.word	0x40020428
 80078b4:	40020440 	.word	0x40020440
 80078b8:	40020458 	.word	0x40020458
 80078bc:	40020470 	.word	0x40020470
 80078c0:	40020488 	.word	0x40020488
 80078c4:	400204a0 	.word	0x400204a0
 80078c8:	400204b8 	.word	0x400204b8
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f022 020a 	bic.w	r2, r2, #10
 80078da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 8097 	beq.w	8007a24 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078fe:	e091      	b.n	8007a24 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007904:	f003 031f 	and.w	r3, r3, #31
 8007908:	2208      	movs	r2, #8
 800790a:	409a      	lsls	r2, r3
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	4013      	ands	r3, r2
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 8088 	beq.w	8007a26 <HAL_DMA_IRQHandler+0xe0e>
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f003 0308 	and.w	r3, r3, #8
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 8082 	beq.w	8007a26 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a41      	ldr	r2, [pc, #260]	; (8007a2c <HAL_DMA_IRQHandler+0xe14>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d04a      	beq.n	80079c2 <HAL_DMA_IRQHandler+0xdaa>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a3f      	ldr	r2, [pc, #252]	; (8007a30 <HAL_DMA_IRQHandler+0xe18>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d045      	beq.n	80079c2 <HAL_DMA_IRQHandler+0xdaa>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a3e      	ldr	r2, [pc, #248]	; (8007a34 <HAL_DMA_IRQHandler+0xe1c>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d040      	beq.n	80079c2 <HAL_DMA_IRQHandler+0xdaa>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a3c      	ldr	r2, [pc, #240]	; (8007a38 <HAL_DMA_IRQHandler+0xe20>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d03b      	beq.n	80079c2 <HAL_DMA_IRQHandler+0xdaa>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a3b      	ldr	r2, [pc, #236]	; (8007a3c <HAL_DMA_IRQHandler+0xe24>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d036      	beq.n	80079c2 <HAL_DMA_IRQHandler+0xdaa>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a39      	ldr	r2, [pc, #228]	; (8007a40 <HAL_DMA_IRQHandler+0xe28>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d031      	beq.n	80079c2 <HAL_DMA_IRQHandler+0xdaa>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a38      	ldr	r2, [pc, #224]	; (8007a44 <HAL_DMA_IRQHandler+0xe2c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d02c      	beq.n	80079c2 <HAL_DMA_IRQHandler+0xdaa>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a36      	ldr	r2, [pc, #216]	; (8007a48 <HAL_DMA_IRQHandler+0xe30>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d027      	beq.n	80079c2 <HAL_DMA_IRQHandler+0xdaa>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a35      	ldr	r2, [pc, #212]	; (8007a4c <HAL_DMA_IRQHandler+0xe34>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d022      	beq.n	80079c2 <HAL_DMA_IRQHandler+0xdaa>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a33      	ldr	r2, [pc, #204]	; (8007a50 <HAL_DMA_IRQHandler+0xe38>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d01d      	beq.n	80079c2 <HAL_DMA_IRQHandler+0xdaa>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a32      	ldr	r2, [pc, #200]	; (8007a54 <HAL_DMA_IRQHandler+0xe3c>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d018      	beq.n	80079c2 <HAL_DMA_IRQHandler+0xdaa>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a30      	ldr	r2, [pc, #192]	; (8007a58 <HAL_DMA_IRQHandler+0xe40>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d013      	beq.n	80079c2 <HAL_DMA_IRQHandler+0xdaa>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a2f      	ldr	r2, [pc, #188]	; (8007a5c <HAL_DMA_IRQHandler+0xe44>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00e      	beq.n	80079c2 <HAL_DMA_IRQHandler+0xdaa>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a2d      	ldr	r2, [pc, #180]	; (8007a60 <HAL_DMA_IRQHandler+0xe48>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d009      	beq.n	80079c2 <HAL_DMA_IRQHandler+0xdaa>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a2c      	ldr	r2, [pc, #176]	; (8007a64 <HAL_DMA_IRQHandler+0xe4c>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d004      	beq.n	80079c2 <HAL_DMA_IRQHandler+0xdaa>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a2a      	ldr	r2, [pc, #168]	; (8007a68 <HAL_DMA_IRQHandler+0xe50>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d108      	bne.n	80079d4 <HAL_DMA_IRQHandler+0xdbc>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f022 021c 	bic.w	r2, r2, #28
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	e007      	b.n	80079e4 <HAL_DMA_IRQHandler+0xdcc>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f022 020e 	bic.w	r2, r2, #14
 80079e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079e8:	f003 031f 	and.w	r3, r3, #31
 80079ec:	2201      	movs	r2, #1
 80079ee:	409a      	lsls	r2, r3
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d009      	beq.n	8007a26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	4798      	blx	r3
 8007a1a:	e004      	b.n	8007a26 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007a1c:	bf00      	nop
 8007a1e:	e002      	b.n	8007a26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a20:	bf00      	nop
 8007a22:	e000      	b.n	8007a26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a24:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007a26:	3728      	adds	r7, #40	; 0x28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	40020010 	.word	0x40020010
 8007a30:	40020028 	.word	0x40020028
 8007a34:	40020040 	.word	0x40020040
 8007a38:	40020058 	.word	0x40020058
 8007a3c:	40020070 	.word	0x40020070
 8007a40:	40020088 	.word	0x40020088
 8007a44:	400200a0 	.word	0x400200a0
 8007a48:	400200b8 	.word	0x400200b8
 8007a4c:	40020410 	.word	0x40020410
 8007a50:	40020428 	.word	0x40020428
 8007a54:	40020440 	.word	0x40020440
 8007a58:	40020458 	.word	0x40020458
 8007a5c:	40020470 	.word	0x40020470
 8007a60:	40020488 	.word	0x40020488
 8007a64:	400204a0 	.word	0x400204a0
 8007a68:	400204b8 	.word	0x400204b8

08007a6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a7e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a84:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a7f      	ldr	r2, [pc, #508]	; (8007c88 <DMA_SetConfig+0x21c>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d072      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a7d      	ldr	r2, [pc, #500]	; (8007c8c <DMA_SetConfig+0x220>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d06d      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a7c      	ldr	r2, [pc, #496]	; (8007c90 <DMA_SetConfig+0x224>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d068      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a7a      	ldr	r2, [pc, #488]	; (8007c94 <DMA_SetConfig+0x228>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d063      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a79      	ldr	r2, [pc, #484]	; (8007c98 <DMA_SetConfig+0x22c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d05e      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a77      	ldr	r2, [pc, #476]	; (8007c9c <DMA_SetConfig+0x230>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d059      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a76      	ldr	r2, [pc, #472]	; (8007ca0 <DMA_SetConfig+0x234>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d054      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a74      	ldr	r2, [pc, #464]	; (8007ca4 <DMA_SetConfig+0x238>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d04f      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a73      	ldr	r2, [pc, #460]	; (8007ca8 <DMA_SetConfig+0x23c>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d04a      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a71      	ldr	r2, [pc, #452]	; (8007cac <DMA_SetConfig+0x240>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d045      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a70      	ldr	r2, [pc, #448]	; (8007cb0 <DMA_SetConfig+0x244>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d040      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a6e      	ldr	r2, [pc, #440]	; (8007cb4 <DMA_SetConfig+0x248>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d03b      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a6d      	ldr	r2, [pc, #436]	; (8007cb8 <DMA_SetConfig+0x24c>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d036      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a6b      	ldr	r2, [pc, #428]	; (8007cbc <DMA_SetConfig+0x250>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d031      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a6a      	ldr	r2, [pc, #424]	; (8007cc0 <DMA_SetConfig+0x254>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d02c      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a68      	ldr	r2, [pc, #416]	; (8007cc4 <DMA_SetConfig+0x258>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d027      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a67      	ldr	r2, [pc, #412]	; (8007cc8 <DMA_SetConfig+0x25c>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d022      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a65      	ldr	r2, [pc, #404]	; (8007ccc <DMA_SetConfig+0x260>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d01d      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a64      	ldr	r2, [pc, #400]	; (8007cd0 <DMA_SetConfig+0x264>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d018      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a62      	ldr	r2, [pc, #392]	; (8007cd4 <DMA_SetConfig+0x268>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d013      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a61      	ldr	r2, [pc, #388]	; (8007cd8 <DMA_SetConfig+0x26c>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d00e      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a5f      	ldr	r2, [pc, #380]	; (8007cdc <DMA_SetConfig+0x270>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d009      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a5e      	ldr	r2, [pc, #376]	; (8007ce0 <DMA_SetConfig+0x274>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d004      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a5c      	ldr	r2, [pc, #368]	; (8007ce4 <DMA_SetConfig+0x278>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d101      	bne.n	8007b7a <DMA_SetConfig+0x10e>
 8007b76:	2301      	movs	r3, #1
 8007b78:	e000      	b.n	8007b7c <DMA_SetConfig+0x110>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00d      	beq.n	8007b9c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007b88:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d004      	beq.n	8007b9c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007b9a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a39      	ldr	r2, [pc, #228]	; (8007c88 <DMA_SetConfig+0x21c>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d04a      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a38      	ldr	r2, [pc, #224]	; (8007c8c <DMA_SetConfig+0x220>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d045      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a36      	ldr	r2, [pc, #216]	; (8007c90 <DMA_SetConfig+0x224>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d040      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a35      	ldr	r2, [pc, #212]	; (8007c94 <DMA_SetConfig+0x228>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d03b      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a33      	ldr	r2, [pc, #204]	; (8007c98 <DMA_SetConfig+0x22c>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d036      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a32      	ldr	r2, [pc, #200]	; (8007c9c <DMA_SetConfig+0x230>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d031      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a30      	ldr	r2, [pc, #192]	; (8007ca0 <DMA_SetConfig+0x234>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d02c      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a2f      	ldr	r2, [pc, #188]	; (8007ca4 <DMA_SetConfig+0x238>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d027      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a2d      	ldr	r2, [pc, #180]	; (8007ca8 <DMA_SetConfig+0x23c>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d022      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a2c      	ldr	r2, [pc, #176]	; (8007cac <DMA_SetConfig+0x240>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d01d      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a2a      	ldr	r2, [pc, #168]	; (8007cb0 <DMA_SetConfig+0x244>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d018      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a29      	ldr	r2, [pc, #164]	; (8007cb4 <DMA_SetConfig+0x248>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d013      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a27      	ldr	r2, [pc, #156]	; (8007cb8 <DMA_SetConfig+0x24c>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00e      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a26      	ldr	r2, [pc, #152]	; (8007cbc <DMA_SetConfig+0x250>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d009      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a24      	ldr	r2, [pc, #144]	; (8007cc0 <DMA_SetConfig+0x254>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d004      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a23      	ldr	r2, [pc, #140]	; (8007cc4 <DMA_SetConfig+0x258>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d101      	bne.n	8007c40 <DMA_SetConfig+0x1d4>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e000      	b.n	8007c42 <DMA_SetConfig+0x1d6>
 8007c40:	2300      	movs	r3, #0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d059      	beq.n	8007cfa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c4a:	f003 031f 	and.w	r3, r3, #31
 8007c4e:	223f      	movs	r2, #63	; 0x3f
 8007c50:	409a      	lsls	r2, r3
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c64:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	2b40      	cmp	r3, #64	; 0x40
 8007c74:	d138      	bne.n	8007ce8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c86:	e086      	b.n	8007d96 <DMA_SetConfig+0x32a>
 8007c88:	40020010 	.word	0x40020010
 8007c8c:	40020028 	.word	0x40020028
 8007c90:	40020040 	.word	0x40020040
 8007c94:	40020058 	.word	0x40020058
 8007c98:	40020070 	.word	0x40020070
 8007c9c:	40020088 	.word	0x40020088
 8007ca0:	400200a0 	.word	0x400200a0
 8007ca4:	400200b8 	.word	0x400200b8
 8007ca8:	40020410 	.word	0x40020410
 8007cac:	40020428 	.word	0x40020428
 8007cb0:	40020440 	.word	0x40020440
 8007cb4:	40020458 	.word	0x40020458
 8007cb8:	40020470 	.word	0x40020470
 8007cbc:	40020488 	.word	0x40020488
 8007cc0:	400204a0 	.word	0x400204a0
 8007cc4:	400204b8 	.word	0x400204b8
 8007cc8:	58025408 	.word	0x58025408
 8007ccc:	5802541c 	.word	0x5802541c
 8007cd0:	58025430 	.word	0x58025430
 8007cd4:	58025444 	.word	0x58025444
 8007cd8:	58025458 	.word	0x58025458
 8007cdc:	5802546c 	.word	0x5802546c
 8007ce0:	58025480 	.word	0x58025480
 8007ce4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	60da      	str	r2, [r3, #12]
}
 8007cf8:	e04d      	b.n	8007d96 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a29      	ldr	r2, [pc, #164]	; (8007da4 <DMA_SetConfig+0x338>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d022      	beq.n	8007d4a <DMA_SetConfig+0x2de>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a27      	ldr	r2, [pc, #156]	; (8007da8 <DMA_SetConfig+0x33c>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d01d      	beq.n	8007d4a <DMA_SetConfig+0x2de>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a26      	ldr	r2, [pc, #152]	; (8007dac <DMA_SetConfig+0x340>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d018      	beq.n	8007d4a <DMA_SetConfig+0x2de>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a24      	ldr	r2, [pc, #144]	; (8007db0 <DMA_SetConfig+0x344>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d013      	beq.n	8007d4a <DMA_SetConfig+0x2de>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a23      	ldr	r2, [pc, #140]	; (8007db4 <DMA_SetConfig+0x348>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d00e      	beq.n	8007d4a <DMA_SetConfig+0x2de>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a21      	ldr	r2, [pc, #132]	; (8007db8 <DMA_SetConfig+0x34c>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d009      	beq.n	8007d4a <DMA_SetConfig+0x2de>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a20      	ldr	r2, [pc, #128]	; (8007dbc <DMA_SetConfig+0x350>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d004      	beq.n	8007d4a <DMA_SetConfig+0x2de>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a1e      	ldr	r2, [pc, #120]	; (8007dc0 <DMA_SetConfig+0x354>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d101      	bne.n	8007d4e <DMA_SetConfig+0x2e2>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e000      	b.n	8007d50 <DMA_SetConfig+0x2e4>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d020      	beq.n	8007d96 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d58:	f003 031f 	and.w	r3, r3, #31
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	409a      	lsls	r2, r3
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	2b40      	cmp	r3, #64	; 0x40
 8007d72:	d108      	bne.n	8007d86 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	60da      	str	r2, [r3, #12]
}
 8007d84:	e007      	b.n	8007d96 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	60da      	str	r2, [r3, #12]
}
 8007d96:	bf00      	nop
 8007d98:	371c      	adds	r7, #28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	58025408 	.word	0x58025408
 8007da8:	5802541c 	.word	0x5802541c
 8007dac:	58025430 	.word	0x58025430
 8007db0:	58025444 	.word	0x58025444
 8007db4:	58025458 	.word	0x58025458
 8007db8:	5802546c 	.word	0x5802546c
 8007dbc:	58025480 	.word	0x58025480
 8007dc0:	58025494 	.word	0x58025494

08007dc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a42      	ldr	r2, [pc, #264]	; (8007edc <DMA_CalcBaseAndBitshift+0x118>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d04a      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a41      	ldr	r2, [pc, #260]	; (8007ee0 <DMA_CalcBaseAndBitshift+0x11c>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d045      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a3f      	ldr	r2, [pc, #252]	; (8007ee4 <DMA_CalcBaseAndBitshift+0x120>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d040      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a3e      	ldr	r2, [pc, #248]	; (8007ee8 <DMA_CalcBaseAndBitshift+0x124>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d03b      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a3c      	ldr	r2, [pc, #240]	; (8007eec <DMA_CalcBaseAndBitshift+0x128>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d036      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a3b      	ldr	r2, [pc, #236]	; (8007ef0 <DMA_CalcBaseAndBitshift+0x12c>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d031      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a39      	ldr	r2, [pc, #228]	; (8007ef4 <DMA_CalcBaseAndBitshift+0x130>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d02c      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a38      	ldr	r2, [pc, #224]	; (8007ef8 <DMA_CalcBaseAndBitshift+0x134>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d027      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a36      	ldr	r2, [pc, #216]	; (8007efc <DMA_CalcBaseAndBitshift+0x138>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d022      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a35      	ldr	r2, [pc, #212]	; (8007f00 <DMA_CalcBaseAndBitshift+0x13c>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d01d      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a33      	ldr	r2, [pc, #204]	; (8007f04 <DMA_CalcBaseAndBitshift+0x140>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d018      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a32      	ldr	r2, [pc, #200]	; (8007f08 <DMA_CalcBaseAndBitshift+0x144>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d013      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a30      	ldr	r2, [pc, #192]	; (8007f0c <DMA_CalcBaseAndBitshift+0x148>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d00e      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a2f      	ldr	r2, [pc, #188]	; (8007f10 <DMA_CalcBaseAndBitshift+0x14c>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d009      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a2d      	ldr	r2, [pc, #180]	; (8007f14 <DMA_CalcBaseAndBitshift+0x150>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d004      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a2c      	ldr	r2, [pc, #176]	; (8007f18 <DMA_CalcBaseAndBitshift+0x154>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d101      	bne.n	8007e70 <DMA_CalcBaseAndBitshift+0xac>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e000      	b.n	8007e72 <DMA_CalcBaseAndBitshift+0xae>
 8007e70:	2300      	movs	r3, #0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d024      	beq.n	8007ec0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	3b10      	subs	r3, #16
 8007e7e:	4a27      	ldr	r2, [pc, #156]	; (8007f1c <DMA_CalcBaseAndBitshift+0x158>)
 8007e80:	fba2 2303 	umull	r2, r3, r2, r3
 8007e84:	091b      	lsrs	r3, r3, #4
 8007e86:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f003 0307 	and.w	r3, r3, #7
 8007e8e:	4a24      	ldr	r2, [pc, #144]	; (8007f20 <DMA_CalcBaseAndBitshift+0x15c>)
 8007e90:	5cd3      	ldrb	r3, [r2, r3]
 8007e92:	461a      	mov	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d908      	bls.n	8007eb0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	4b1f      	ldr	r3, [pc, #124]	; (8007f24 <DMA_CalcBaseAndBitshift+0x160>)
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	1d1a      	adds	r2, r3, #4
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	659a      	str	r2, [r3, #88]	; 0x58
 8007eae:	e00d      	b.n	8007ecc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	4b1b      	ldr	r3, [pc, #108]	; (8007f24 <DMA_CalcBaseAndBitshift+0x160>)
 8007eb8:	4013      	ands	r3, r2
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8007ebe:	e005      	b.n	8007ecc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	40020010 	.word	0x40020010
 8007ee0:	40020028 	.word	0x40020028
 8007ee4:	40020040 	.word	0x40020040
 8007ee8:	40020058 	.word	0x40020058
 8007eec:	40020070 	.word	0x40020070
 8007ef0:	40020088 	.word	0x40020088
 8007ef4:	400200a0 	.word	0x400200a0
 8007ef8:	400200b8 	.word	0x400200b8
 8007efc:	40020410 	.word	0x40020410
 8007f00:	40020428 	.word	0x40020428
 8007f04:	40020440 	.word	0x40020440
 8007f08:	40020458 	.word	0x40020458
 8007f0c:	40020470 	.word	0x40020470
 8007f10:	40020488 	.word	0x40020488
 8007f14:	400204a0 	.word	0x400204a0
 8007f18:	400204b8 	.word	0x400204b8
 8007f1c:	aaaaaaab 	.word	0xaaaaaaab
 8007f20:	0800f4b8 	.word	0x0800f4b8
 8007f24:	fffffc00 	.word	0xfffffc00

08007f28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d120      	bne.n	8007f7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f40:	2b03      	cmp	r3, #3
 8007f42:	d858      	bhi.n	8007ff6 <DMA_CheckFifoParam+0xce>
 8007f44:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <DMA_CheckFifoParam+0x24>)
 8007f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4a:	bf00      	nop
 8007f4c:	08007f5d 	.word	0x08007f5d
 8007f50:	08007f6f 	.word	0x08007f6f
 8007f54:	08007f5d 	.word	0x08007f5d
 8007f58:	08007ff7 	.word	0x08007ff7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d048      	beq.n	8007ffa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f6c:	e045      	b.n	8007ffa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007f76:	d142      	bne.n	8007ffe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f7c:	e03f      	b.n	8007ffe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f86:	d123      	bne.n	8007fd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d838      	bhi.n	8008002 <DMA_CheckFifoParam+0xda>
 8007f90:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <DMA_CheckFifoParam+0x70>)
 8007f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f96:	bf00      	nop
 8007f98:	08007fa9 	.word	0x08007fa9
 8007f9c:	08007faf 	.word	0x08007faf
 8007fa0:	08007fa9 	.word	0x08007fa9
 8007fa4:	08007fc1 	.word	0x08007fc1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	73fb      	strb	r3, [r7, #15]
        break;
 8007fac:	e030      	b.n	8008010 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d025      	beq.n	8008006 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007fbe:	e022      	b.n	8008006 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007fc8:	d11f      	bne.n	800800a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007fce:	e01c      	b.n	800800a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d902      	bls.n	8007fde <DMA_CheckFifoParam+0xb6>
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d003      	beq.n	8007fe4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007fdc:	e018      	b.n	8008010 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	73fb      	strb	r3, [r7, #15]
        break;
 8007fe2:	e015      	b.n	8008010 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00e      	beq.n	800800e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ff4:	e00b      	b.n	800800e <DMA_CheckFifoParam+0xe6>
        break;
 8007ff6:	bf00      	nop
 8007ff8:	e00a      	b.n	8008010 <DMA_CheckFifoParam+0xe8>
        break;
 8007ffa:	bf00      	nop
 8007ffc:	e008      	b.n	8008010 <DMA_CheckFifoParam+0xe8>
        break;
 8007ffe:	bf00      	nop
 8008000:	e006      	b.n	8008010 <DMA_CheckFifoParam+0xe8>
        break;
 8008002:	bf00      	nop
 8008004:	e004      	b.n	8008010 <DMA_CheckFifoParam+0xe8>
        break;
 8008006:	bf00      	nop
 8008008:	e002      	b.n	8008010 <DMA_CheckFifoParam+0xe8>
        break;
 800800a:	bf00      	nop
 800800c:	e000      	b.n	8008010 <DMA_CheckFifoParam+0xe8>
    break;
 800800e:	bf00      	nop
    }
  }

  return status;
 8008010:	7bfb      	ldrb	r3, [r7, #15]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop

08008020 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a38      	ldr	r2, [pc, #224]	; (8008114 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d022      	beq.n	800807e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a36      	ldr	r2, [pc, #216]	; (8008118 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d01d      	beq.n	800807e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a35      	ldr	r2, [pc, #212]	; (800811c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d018      	beq.n	800807e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a33      	ldr	r2, [pc, #204]	; (8008120 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d013      	beq.n	800807e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a32      	ldr	r2, [pc, #200]	; (8008124 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d00e      	beq.n	800807e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a30      	ldr	r2, [pc, #192]	; (8008128 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d009      	beq.n	800807e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a2f      	ldr	r2, [pc, #188]	; (800812c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d004      	beq.n	800807e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a2d      	ldr	r2, [pc, #180]	; (8008130 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d101      	bne.n	8008082 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800807e:	2301      	movs	r3, #1
 8008080:	e000      	b.n	8008084 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008082:	2300      	movs	r3, #0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d01a      	beq.n	80080be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	3b08      	subs	r3, #8
 8008090:	4a28      	ldr	r2, [pc, #160]	; (8008134 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008092:	fba2 2303 	umull	r2, r3, r2, r3
 8008096:	091b      	lsrs	r3, r3, #4
 8008098:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	4b26      	ldr	r3, [pc, #152]	; (8008138 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800809e:	4413      	add	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	461a      	mov	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a24      	ldr	r2, [pc, #144]	; (800813c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80080ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f003 031f 	and.w	r3, r3, #31
 80080b4:	2201      	movs	r2, #1
 80080b6:	409a      	lsls	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80080bc:	e024      	b.n	8008108 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	3b10      	subs	r3, #16
 80080c6:	4a1e      	ldr	r2, [pc, #120]	; (8008140 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80080c8:	fba2 2303 	umull	r2, r3, r2, r3
 80080cc:	091b      	lsrs	r3, r3, #4
 80080ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	4a1c      	ldr	r2, [pc, #112]	; (8008144 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d806      	bhi.n	80080e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	4a1b      	ldr	r2, [pc, #108]	; (8008148 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d902      	bls.n	80080e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	3308      	adds	r3, #8
 80080e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	4b18      	ldr	r3, [pc, #96]	; (800814c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	461a      	mov	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a16      	ldr	r2, [pc, #88]	; (8008150 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80080f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f003 031f 	and.w	r3, r3, #31
 8008100:	2201      	movs	r2, #1
 8008102:	409a      	lsls	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008108:	bf00      	nop
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	58025408 	.word	0x58025408
 8008118:	5802541c 	.word	0x5802541c
 800811c:	58025430 	.word	0x58025430
 8008120:	58025444 	.word	0x58025444
 8008124:	58025458 	.word	0x58025458
 8008128:	5802546c 	.word	0x5802546c
 800812c:	58025480 	.word	0x58025480
 8008130:	58025494 	.word	0x58025494
 8008134:	cccccccd 	.word	0xcccccccd
 8008138:	16009600 	.word	0x16009600
 800813c:	58025880 	.word	0x58025880
 8008140:	aaaaaaab 	.word	0xaaaaaaab
 8008144:	400204b8 	.word	0x400204b8
 8008148:	4002040f 	.word	0x4002040f
 800814c:	10008200 	.word	0x10008200
 8008150:	40020880 	.word	0x40020880

08008154 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	b2db      	uxtb	r3, r3
 8008162:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d04a      	beq.n	8008200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b08      	cmp	r3, #8
 800816e:	d847      	bhi.n	8008200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a25      	ldr	r2, [pc, #148]	; (800820c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d022      	beq.n	80081c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a24      	ldr	r2, [pc, #144]	; (8008210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d01d      	beq.n	80081c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a22      	ldr	r2, [pc, #136]	; (8008214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d018      	beq.n	80081c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a21      	ldr	r2, [pc, #132]	; (8008218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d013      	beq.n	80081c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a1f      	ldr	r2, [pc, #124]	; (800821c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d00e      	beq.n	80081c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a1e      	ldr	r2, [pc, #120]	; (8008220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d009      	beq.n	80081c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a1c      	ldr	r2, [pc, #112]	; (8008224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d004      	beq.n	80081c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a1b      	ldr	r2, [pc, #108]	; (8008228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d101      	bne.n	80081c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80081c0:	2301      	movs	r3, #1
 80081c2:	e000      	b.n	80081c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80081c4:	2300      	movs	r3, #0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	4b17      	ldr	r3, [pc, #92]	; (800822c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80081ce:	4413      	add	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	461a      	mov	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a15      	ldr	r2, [pc, #84]	; (8008230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80081dc:	671a      	str	r2, [r3, #112]	; 0x70
 80081de:	e009      	b.n	80081f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	4b14      	ldr	r3, [pc, #80]	; (8008234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80081e4:	4413      	add	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	461a      	mov	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a11      	ldr	r2, [pc, #68]	; (8008238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80081f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	3b01      	subs	r3, #1
 80081f8:	2201      	movs	r2, #1
 80081fa:	409a      	lsls	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008200:	bf00      	nop
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	58025408 	.word	0x58025408
 8008210:	5802541c 	.word	0x5802541c
 8008214:	58025430 	.word	0x58025430
 8008218:	58025444 	.word	0x58025444
 800821c:	58025458 	.word	0x58025458
 8008220:	5802546c 	.word	0x5802546c
 8008224:	58025480 	.word	0x58025480
 8008228:	58025494 	.word	0x58025494
 800822c:	1600963f 	.word	0x1600963f
 8008230:	58025940 	.word	0x58025940
 8008234:	1000823f 	.word	0x1000823f
 8008238:	40020940 	.word	0x40020940

0800823c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800823c:	b480      	push	{r7}
 800823e:	b089      	sub	sp, #36	; 0x24
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008246:	2300      	movs	r3, #0
 8008248:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800824a:	4b86      	ldr	r3, [pc, #536]	; (8008464 <HAL_GPIO_Init+0x228>)
 800824c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800824e:	e18c      	b.n	800856a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	2101      	movs	r1, #1
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	fa01 f303 	lsl.w	r3, r1, r3
 800825c:	4013      	ands	r3, r2
 800825e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	2b00      	cmp	r3, #0
 8008264:	f000 817e 	beq.w	8008564 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	f003 0303 	and.w	r3, r3, #3
 8008270:	2b01      	cmp	r3, #1
 8008272:	d005      	beq.n	8008280 <HAL_GPIO_Init+0x44>
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f003 0303 	and.w	r3, r3, #3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d130      	bne.n	80082e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	2203      	movs	r2, #3
 800828c:	fa02 f303 	lsl.w	r3, r2, r3
 8008290:	43db      	mvns	r3, r3
 8008292:	69ba      	ldr	r2, [r7, #24]
 8008294:	4013      	ands	r3, r2
 8008296:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	68da      	ldr	r2, [r3, #12]
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	005b      	lsls	r3, r3, #1
 80082a0:	fa02 f303 	lsl.w	r3, r2, r3
 80082a4:	69ba      	ldr	r2, [r7, #24]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80082b6:	2201      	movs	r2, #1
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	fa02 f303 	lsl.w	r3, r2, r3
 80082be:	43db      	mvns	r3, r3
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	4013      	ands	r3, r2
 80082c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	091b      	lsrs	r3, r3, #4
 80082cc:	f003 0201 	and.w	r2, r3, #1
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	fa02 f303 	lsl.w	r3, r2, r3
 80082d6:	69ba      	ldr	r2, [r7, #24]
 80082d8:	4313      	orrs	r3, r2
 80082da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	69ba      	ldr	r2, [r7, #24]
 80082e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	f003 0303 	and.w	r3, r3, #3
 80082ea:	2b03      	cmp	r3, #3
 80082ec:	d017      	beq.n	800831e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	005b      	lsls	r3, r3, #1
 80082f8:	2203      	movs	r2, #3
 80082fa:	fa02 f303 	lsl.w	r3, r2, r3
 80082fe:	43db      	mvns	r3, r3
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	4013      	ands	r3, r2
 8008304:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	689a      	ldr	r2, [r3, #8]
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	005b      	lsls	r3, r3, #1
 800830e:	fa02 f303 	lsl.w	r3, r2, r3
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	4313      	orrs	r3, r2
 8008316:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	69ba      	ldr	r2, [r7, #24]
 800831c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	2b02      	cmp	r3, #2
 8008328:	d123      	bne.n	8008372 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	08da      	lsrs	r2, r3, #3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	3208      	adds	r2, #8
 8008332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	f003 0307 	and.w	r3, r3, #7
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	220f      	movs	r2, #15
 8008342:	fa02 f303 	lsl.w	r3, r2, r3
 8008346:	43db      	mvns	r3, r3
 8008348:	69ba      	ldr	r2, [r7, #24]
 800834a:	4013      	ands	r3, r2
 800834c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	691a      	ldr	r2, [r3, #16]
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	f003 0307 	and.w	r3, r3, #7
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	fa02 f303 	lsl.w	r3, r2, r3
 800835e:	69ba      	ldr	r2, [r7, #24]
 8008360:	4313      	orrs	r3, r2
 8008362:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	08da      	lsrs	r2, r3, #3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	3208      	adds	r2, #8
 800836c:	69b9      	ldr	r1, [r7, #24]
 800836e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	005b      	lsls	r3, r3, #1
 800837c:	2203      	movs	r2, #3
 800837e:	fa02 f303 	lsl.w	r3, r2, r3
 8008382:	43db      	mvns	r3, r3
 8008384:	69ba      	ldr	r2, [r7, #24]
 8008386:	4013      	ands	r3, r2
 8008388:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f003 0203 	and.w	r2, r3, #3
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	fa02 f303 	lsl.w	r3, r2, r3
 800839a:	69ba      	ldr	r2, [r7, #24]
 800839c:	4313      	orrs	r3, r2
 800839e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	69ba      	ldr	r2, [r7, #24]
 80083a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f000 80d8 	beq.w	8008564 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083b4:	4b2c      	ldr	r3, [pc, #176]	; (8008468 <HAL_GPIO_Init+0x22c>)
 80083b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083ba:	4a2b      	ldr	r2, [pc, #172]	; (8008468 <HAL_GPIO_Init+0x22c>)
 80083bc:	f043 0302 	orr.w	r3, r3, #2
 80083c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80083c4:	4b28      	ldr	r3, [pc, #160]	; (8008468 <HAL_GPIO_Init+0x22c>)
 80083c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083ca:	f003 0302 	and.w	r3, r3, #2
 80083ce:	60fb      	str	r3, [r7, #12]
 80083d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80083d2:	4a26      	ldr	r2, [pc, #152]	; (800846c <HAL_GPIO_Init+0x230>)
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	089b      	lsrs	r3, r3, #2
 80083d8:	3302      	adds	r3, #2
 80083da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	f003 0303 	and.w	r3, r3, #3
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	220f      	movs	r2, #15
 80083ea:	fa02 f303 	lsl.w	r3, r2, r3
 80083ee:	43db      	mvns	r3, r3
 80083f0:	69ba      	ldr	r2, [r7, #24]
 80083f2:	4013      	ands	r3, r2
 80083f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a1d      	ldr	r2, [pc, #116]	; (8008470 <HAL_GPIO_Init+0x234>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d04a      	beq.n	8008494 <HAL_GPIO_Init+0x258>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a1c      	ldr	r2, [pc, #112]	; (8008474 <HAL_GPIO_Init+0x238>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d02b      	beq.n	800845e <HAL_GPIO_Init+0x222>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a1b      	ldr	r2, [pc, #108]	; (8008478 <HAL_GPIO_Init+0x23c>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d025      	beq.n	800845a <HAL_GPIO_Init+0x21e>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a1a      	ldr	r2, [pc, #104]	; (800847c <HAL_GPIO_Init+0x240>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d01f      	beq.n	8008456 <HAL_GPIO_Init+0x21a>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a19      	ldr	r2, [pc, #100]	; (8008480 <HAL_GPIO_Init+0x244>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d019      	beq.n	8008452 <HAL_GPIO_Init+0x216>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a18      	ldr	r2, [pc, #96]	; (8008484 <HAL_GPIO_Init+0x248>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d013      	beq.n	800844e <HAL_GPIO_Init+0x212>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a17      	ldr	r2, [pc, #92]	; (8008488 <HAL_GPIO_Init+0x24c>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d00d      	beq.n	800844a <HAL_GPIO_Init+0x20e>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a16      	ldr	r2, [pc, #88]	; (800848c <HAL_GPIO_Init+0x250>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d007      	beq.n	8008446 <HAL_GPIO_Init+0x20a>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a15      	ldr	r2, [pc, #84]	; (8008490 <HAL_GPIO_Init+0x254>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d101      	bne.n	8008442 <HAL_GPIO_Init+0x206>
 800843e:	2309      	movs	r3, #9
 8008440:	e029      	b.n	8008496 <HAL_GPIO_Init+0x25a>
 8008442:	230a      	movs	r3, #10
 8008444:	e027      	b.n	8008496 <HAL_GPIO_Init+0x25a>
 8008446:	2307      	movs	r3, #7
 8008448:	e025      	b.n	8008496 <HAL_GPIO_Init+0x25a>
 800844a:	2306      	movs	r3, #6
 800844c:	e023      	b.n	8008496 <HAL_GPIO_Init+0x25a>
 800844e:	2305      	movs	r3, #5
 8008450:	e021      	b.n	8008496 <HAL_GPIO_Init+0x25a>
 8008452:	2304      	movs	r3, #4
 8008454:	e01f      	b.n	8008496 <HAL_GPIO_Init+0x25a>
 8008456:	2303      	movs	r3, #3
 8008458:	e01d      	b.n	8008496 <HAL_GPIO_Init+0x25a>
 800845a:	2302      	movs	r3, #2
 800845c:	e01b      	b.n	8008496 <HAL_GPIO_Init+0x25a>
 800845e:	2301      	movs	r3, #1
 8008460:	e019      	b.n	8008496 <HAL_GPIO_Init+0x25a>
 8008462:	bf00      	nop
 8008464:	58000080 	.word	0x58000080
 8008468:	58024400 	.word	0x58024400
 800846c:	58000400 	.word	0x58000400
 8008470:	58020000 	.word	0x58020000
 8008474:	58020400 	.word	0x58020400
 8008478:	58020800 	.word	0x58020800
 800847c:	58020c00 	.word	0x58020c00
 8008480:	58021000 	.word	0x58021000
 8008484:	58021400 	.word	0x58021400
 8008488:	58021800 	.word	0x58021800
 800848c:	58021c00 	.word	0x58021c00
 8008490:	58022400 	.word	0x58022400
 8008494:	2300      	movs	r3, #0
 8008496:	69fa      	ldr	r2, [r7, #28]
 8008498:	f002 0203 	and.w	r2, r2, #3
 800849c:	0092      	lsls	r2, r2, #2
 800849e:	4093      	lsls	r3, r2
 80084a0:	69ba      	ldr	r2, [r7, #24]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80084a6:	4938      	ldr	r1, [pc, #224]	; (8008588 <HAL_GPIO_Init+0x34c>)
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	089b      	lsrs	r3, r3, #2
 80084ac:	3302      	adds	r3, #2
 80084ae:	69ba      	ldr	r2, [r7, #24]
 80084b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80084b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	43db      	mvns	r3, r3
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	4013      	ands	r3, r2
 80084c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80084d2:	69ba      	ldr	r2, [r7, #24]
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80084da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80084e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	43db      	mvns	r3, r3
 80084ee:	69ba      	ldr	r2, [r7, #24]
 80084f0:	4013      	ands	r3, r2
 80084f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d003      	beq.n	8008508 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008500:	69ba      	ldr	r2, [r7, #24]
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	4313      	orrs	r3, r2
 8008506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	43db      	mvns	r3, r3
 800851a:	69ba      	ldr	r2, [r7, #24]
 800851c:	4013      	ands	r3, r2
 800851e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d003      	beq.n	8008534 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	4313      	orrs	r3, r2
 8008532:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	69ba      	ldr	r2, [r7, #24]
 8008538:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	43db      	mvns	r3, r3
 8008544:	69ba      	ldr	r2, [r7, #24]
 8008546:	4013      	ands	r3, r2
 8008548:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008552:	2b00      	cmp	r3, #0
 8008554:	d003      	beq.n	800855e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008556:	69ba      	ldr	r2, [r7, #24]
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	4313      	orrs	r3, r2
 800855c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	69ba      	ldr	r2, [r7, #24]
 8008562:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	3301      	adds	r3, #1
 8008568:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	fa22 f303 	lsr.w	r3, r2, r3
 8008574:	2b00      	cmp	r3, #0
 8008576:	f47f ae6b 	bne.w	8008250 <HAL_GPIO_Init+0x14>
  }
}
 800857a:	bf00      	nop
 800857c:	bf00      	nop
 800857e:	3724      	adds	r7, #36	; 0x24
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	58000400 	.word	0x58000400

0800858c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008596:	2300      	movs	r3, #0
 8008598:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800859a:	4b72      	ldr	r3, [pc, #456]	; (8008764 <HAL_GPIO_DeInit+0x1d8>)
 800859c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800859e:	e0d3      	b.n	8008748 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80085a0:	2201      	movs	r2, #1
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	fa02 f303 	lsl.w	r3, r2, r3
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	4013      	ands	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 80c6 	beq.w	8008742 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80085b6:	4a6c      	ldr	r2, [pc, #432]	; (8008768 <HAL_GPIO_DeInit+0x1dc>)
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	089b      	lsrs	r3, r3, #2
 80085bc:	3302      	adds	r3, #2
 80085be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085c2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f003 0303 	and.w	r3, r3, #3
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	220f      	movs	r2, #15
 80085ce:	fa02 f303 	lsl.w	r3, r2, r3
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	4013      	ands	r3, r2
 80085d6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a64      	ldr	r2, [pc, #400]	; (800876c <HAL_GPIO_DeInit+0x1e0>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d031      	beq.n	8008644 <HAL_GPIO_DeInit+0xb8>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a63      	ldr	r2, [pc, #396]	; (8008770 <HAL_GPIO_DeInit+0x1e4>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d02b      	beq.n	8008640 <HAL_GPIO_DeInit+0xb4>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a62      	ldr	r2, [pc, #392]	; (8008774 <HAL_GPIO_DeInit+0x1e8>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d025      	beq.n	800863c <HAL_GPIO_DeInit+0xb0>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a61      	ldr	r2, [pc, #388]	; (8008778 <HAL_GPIO_DeInit+0x1ec>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d01f      	beq.n	8008638 <HAL_GPIO_DeInit+0xac>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a60      	ldr	r2, [pc, #384]	; (800877c <HAL_GPIO_DeInit+0x1f0>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d019      	beq.n	8008634 <HAL_GPIO_DeInit+0xa8>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a5f      	ldr	r2, [pc, #380]	; (8008780 <HAL_GPIO_DeInit+0x1f4>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d013      	beq.n	8008630 <HAL_GPIO_DeInit+0xa4>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a5e      	ldr	r2, [pc, #376]	; (8008784 <HAL_GPIO_DeInit+0x1f8>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d00d      	beq.n	800862c <HAL_GPIO_DeInit+0xa0>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a5d      	ldr	r2, [pc, #372]	; (8008788 <HAL_GPIO_DeInit+0x1fc>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d007      	beq.n	8008628 <HAL_GPIO_DeInit+0x9c>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a5c      	ldr	r2, [pc, #368]	; (800878c <HAL_GPIO_DeInit+0x200>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d101      	bne.n	8008624 <HAL_GPIO_DeInit+0x98>
 8008620:	2309      	movs	r3, #9
 8008622:	e010      	b.n	8008646 <HAL_GPIO_DeInit+0xba>
 8008624:	230a      	movs	r3, #10
 8008626:	e00e      	b.n	8008646 <HAL_GPIO_DeInit+0xba>
 8008628:	2307      	movs	r3, #7
 800862a:	e00c      	b.n	8008646 <HAL_GPIO_DeInit+0xba>
 800862c:	2306      	movs	r3, #6
 800862e:	e00a      	b.n	8008646 <HAL_GPIO_DeInit+0xba>
 8008630:	2305      	movs	r3, #5
 8008632:	e008      	b.n	8008646 <HAL_GPIO_DeInit+0xba>
 8008634:	2304      	movs	r3, #4
 8008636:	e006      	b.n	8008646 <HAL_GPIO_DeInit+0xba>
 8008638:	2303      	movs	r3, #3
 800863a:	e004      	b.n	8008646 <HAL_GPIO_DeInit+0xba>
 800863c:	2302      	movs	r3, #2
 800863e:	e002      	b.n	8008646 <HAL_GPIO_DeInit+0xba>
 8008640:	2301      	movs	r3, #1
 8008642:	e000      	b.n	8008646 <HAL_GPIO_DeInit+0xba>
 8008644:	2300      	movs	r3, #0
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	f002 0203 	and.w	r2, r2, #3
 800864c:	0092      	lsls	r2, r2, #2
 800864e:	4093      	lsls	r3, r2
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	429a      	cmp	r2, r3
 8008654:	d136      	bne.n	80086c4 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	43db      	mvns	r3, r3
 800865e:	401a      	ands	r2, r3
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	685a      	ldr	r2, [r3, #4]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	43db      	mvns	r3, r3
 800866c:	401a      	ands	r2, r3
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	43db      	mvns	r3, r3
 800867c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008680:	4013      	ands	r3, r2
 8008682:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	43db      	mvns	r3, r3
 800868e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008692:	4013      	ands	r3, r2
 8008694:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f003 0303 	and.w	r3, r3, #3
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	220f      	movs	r2, #15
 80086a0:	fa02 f303 	lsl.w	r3, r2, r3
 80086a4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80086a6:	4a30      	ldr	r2, [pc, #192]	; (8008768 <HAL_GPIO_DeInit+0x1dc>)
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	089b      	lsrs	r3, r3, #2
 80086ac:	3302      	adds	r3, #2
 80086ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	43da      	mvns	r2, r3
 80086b6:	482c      	ldr	r0, [pc, #176]	; (8008768 <HAL_GPIO_DeInit+0x1dc>)
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	089b      	lsrs	r3, r3, #2
 80086bc:	400a      	ands	r2, r1
 80086be:	3302      	adds	r3, #2
 80086c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	005b      	lsls	r3, r3, #1
 80086cc:	2103      	movs	r1, #3
 80086ce:	fa01 f303 	lsl.w	r3, r1, r3
 80086d2:	431a      	orrs	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	08da      	lsrs	r2, r3, #3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	3208      	adds	r2, #8
 80086e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f003 0307 	and.w	r3, r3, #7
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	220f      	movs	r2, #15
 80086ee:	fa02 f303 	lsl.w	r3, r2, r3
 80086f2:	43db      	mvns	r3, r3
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	08d2      	lsrs	r2, r2, #3
 80086f8:	4019      	ands	r1, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	3208      	adds	r2, #8
 80086fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68da      	ldr	r2, [r3, #12]
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	2103      	movs	r1, #3
 800870c:	fa01 f303 	lsl.w	r3, r1, r3
 8008710:	43db      	mvns	r3, r3
 8008712:	401a      	ands	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	2101      	movs	r1, #1
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	fa01 f303 	lsl.w	r3, r1, r3
 8008724:	43db      	mvns	r3, r3
 8008726:	401a      	ands	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	689a      	ldr	r2, [r3, #8]
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	2103      	movs	r1, #3
 8008736:	fa01 f303 	lsl.w	r3, r1, r3
 800873a:	43db      	mvns	r3, r3
 800873c:	401a      	ands	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	3301      	adds	r3, #1
 8008746:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	fa22 f303 	lsr.w	r3, r2, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	f47f af25 	bne.w	80085a0 <HAL_GPIO_DeInit+0x14>
  }
}
 8008756:	bf00      	nop
 8008758:	bf00      	nop
 800875a:	371c      	adds	r7, #28
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr
 8008764:	58000080 	.word	0x58000080
 8008768:	58000400 	.word	0x58000400
 800876c:	58020000 	.word	0x58020000
 8008770:	58020400 	.word	0x58020400
 8008774:	58020800 	.word	0x58020800
 8008778:	58020c00 	.word	0x58020c00
 800877c:	58021000 	.word	0x58021000
 8008780:	58021400 	.word	0x58021400
 8008784:	58021800 	.word	0x58021800
 8008788:	58021c00 	.word	0x58021c00
 800878c:	58022400 	.word	0x58022400

08008790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	807b      	strh	r3, [r7, #2]
 800879c:	4613      	mov	r3, r2
 800879e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80087a0:	787b      	ldrb	r3, [r7, #1]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80087a6:	887a      	ldrh	r2, [r7, #2]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80087ac:	e003      	b.n	80087b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80087ae:	887b      	ldrh	r3, [r7, #2]
 80087b0:	041a      	lsls	r2, r3, #16
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	619a      	str	r2, [r3, #24]
}
 80087b6:	bf00      	nop
 80087b8:	370c      	adds	r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
	...

080087c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80087cc:	4b19      	ldr	r3, [pc, #100]	; (8008834 <HAL_PWREx_ConfigSupply+0x70>)
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	f003 0304 	and.w	r3, r3, #4
 80087d4:	2b04      	cmp	r3, #4
 80087d6:	d00a      	beq.n	80087ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80087d8:	4b16      	ldr	r3, [pc, #88]	; (8008834 <HAL_PWREx_ConfigSupply+0x70>)
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	f003 0307 	and.w	r3, r3, #7
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d001      	beq.n	80087ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e01f      	b.n	800882a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	e01d      	b.n	800882a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80087ee:	4b11      	ldr	r3, [pc, #68]	; (8008834 <HAL_PWREx_ConfigSupply+0x70>)
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	f023 0207 	bic.w	r2, r3, #7
 80087f6:	490f      	ldr	r1, [pc, #60]	; (8008834 <HAL_PWREx_ConfigSupply+0x70>)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80087fe:	f7fc fbdf 	bl	8004fc0 <HAL_GetTick>
 8008802:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008804:	e009      	b.n	800881a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008806:	f7fc fbdb 	bl	8004fc0 <HAL_GetTick>
 800880a:	4602      	mov	r2, r0
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008814:	d901      	bls.n	800881a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e007      	b.n	800882a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800881a:	4b06      	ldr	r3, [pc, #24]	; (8008834 <HAL_PWREx_ConfigSupply+0x70>)
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008826:	d1ee      	bne.n	8008806 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	58024800 	.word	0x58024800

08008838 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b08c      	sub	sp, #48	; 0x30
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e3c8      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 8087 	beq.w	8008966 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008858:	4b88      	ldr	r3, [pc, #544]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008860:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008862:	4b86      	ldr	r3, [pc, #536]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 8008864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008866:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886a:	2b10      	cmp	r3, #16
 800886c:	d007      	beq.n	800887e <HAL_RCC_OscConfig+0x46>
 800886e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008870:	2b18      	cmp	r3, #24
 8008872:	d110      	bne.n	8008896 <HAL_RCC_OscConfig+0x5e>
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	f003 0303 	and.w	r3, r3, #3
 800887a:	2b02      	cmp	r3, #2
 800887c:	d10b      	bne.n	8008896 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800887e:	4b7f      	ldr	r3, [pc, #508]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d06c      	beq.n	8008964 <HAL_RCC_OscConfig+0x12c>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d168      	bne.n	8008964 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e3a2      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800889e:	d106      	bne.n	80088ae <HAL_RCC_OscConfig+0x76>
 80088a0:	4b76      	ldr	r3, [pc, #472]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a75      	ldr	r2, [pc, #468]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 80088a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	e02e      	b.n	800890c <HAL_RCC_OscConfig+0xd4>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10c      	bne.n	80088d0 <HAL_RCC_OscConfig+0x98>
 80088b6:	4b71      	ldr	r3, [pc, #452]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a70      	ldr	r2, [pc, #448]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 80088bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088c0:	6013      	str	r3, [r2, #0]
 80088c2:	4b6e      	ldr	r3, [pc, #440]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a6d      	ldr	r2, [pc, #436]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 80088c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	e01d      	b.n	800890c <HAL_RCC_OscConfig+0xd4>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088d8:	d10c      	bne.n	80088f4 <HAL_RCC_OscConfig+0xbc>
 80088da:	4b68      	ldr	r3, [pc, #416]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a67      	ldr	r2, [pc, #412]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 80088e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088e4:	6013      	str	r3, [r2, #0]
 80088e6:	4b65      	ldr	r3, [pc, #404]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a64      	ldr	r2, [pc, #400]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 80088ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088f0:	6013      	str	r3, [r2, #0]
 80088f2:	e00b      	b.n	800890c <HAL_RCC_OscConfig+0xd4>
 80088f4:	4b61      	ldr	r3, [pc, #388]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a60      	ldr	r2, [pc, #384]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 80088fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088fe:	6013      	str	r3, [r2, #0]
 8008900:	4b5e      	ldr	r3, [pc, #376]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a5d      	ldr	r2, [pc, #372]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 8008906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800890a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d013      	beq.n	800893c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008914:	f7fc fb54 	bl	8004fc0 <HAL_GetTick>
 8008918:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800891a:	e008      	b.n	800892e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800891c:	f7fc fb50 	bl	8004fc0 <HAL_GetTick>
 8008920:	4602      	mov	r2, r0
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	2b64      	cmp	r3, #100	; 0x64
 8008928:	d901      	bls.n	800892e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e356      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800892e:	4b53      	ldr	r3, [pc, #332]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0f0      	beq.n	800891c <HAL_RCC_OscConfig+0xe4>
 800893a:	e014      	b.n	8008966 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800893c:	f7fc fb40 	bl	8004fc0 <HAL_GetTick>
 8008940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008942:	e008      	b.n	8008956 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008944:	f7fc fb3c 	bl	8004fc0 <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	2b64      	cmp	r3, #100	; 0x64
 8008950:	d901      	bls.n	8008956 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e342      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008956:	4b49      	ldr	r3, [pc, #292]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1f0      	bne.n	8008944 <HAL_RCC_OscConfig+0x10c>
 8008962:	e000      	b.n	8008966 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 0302 	and.w	r3, r3, #2
 800896e:	2b00      	cmp	r3, #0
 8008970:	f000 808c 	beq.w	8008a8c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008974:	4b41      	ldr	r3, [pc, #260]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800897c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800897e:	4b3f      	ldr	r3, [pc, #252]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 8008980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008982:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008984:	6a3b      	ldr	r3, [r7, #32]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d007      	beq.n	800899a <HAL_RCC_OscConfig+0x162>
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	2b18      	cmp	r3, #24
 800898e:	d137      	bne.n	8008a00 <HAL_RCC_OscConfig+0x1c8>
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	f003 0303 	and.w	r3, r3, #3
 8008996:	2b00      	cmp	r3, #0
 8008998:	d132      	bne.n	8008a00 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800899a:	4b38      	ldr	r3, [pc, #224]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0304 	and.w	r3, r3, #4
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d005      	beq.n	80089b2 <HAL_RCC_OscConfig+0x17a>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e314      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80089b2:	4b32      	ldr	r3, [pc, #200]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f023 0219 	bic.w	r2, r3, #25
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	492f      	ldr	r1, [pc, #188]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 80089c0:	4313      	orrs	r3, r2
 80089c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089c4:	f7fc fafc 	bl	8004fc0 <HAL_GetTick>
 80089c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089ca:	e008      	b.n	80089de <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089cc:	f7fc faf8 	bl	8004fc0 <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d901      	bls.n	80089de <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e2fe      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089de:	4b27      	ldr	r3, [pc, #156]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0304 	and.w	r3, r3, #4
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0f0      	beq.n	80089cc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089ea:	4b24      	ldr	r3, [pc, #144]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	061b      	lsls	r3, r3, #24
 80089f8:	4920      	ldr	r1, [pc, #128]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 80089fa:	4313      	orrs	r3, r2
 80089fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089fe:	e045      	b.n	8008a8c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d026      	beq.n	8008a56 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008a08:	4b1c      	ldr	r3, [pc, #112]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f023 0219 	bic.w	r2, r3, #25
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	4919      	ldr	r1, [pc, #100]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a1a:	f7fc fad1 	bl	8004fc0 <HAL_GetTick>
 8008a1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a20:	e008      	b.n	8008a34 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a22:	f7fc facd 	bl	8004fc0 <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d901      	bls.n	8008a34 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e2d3      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a34:	4b11      	ldr	r3, [pc, #68]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0304 	and.w	r3, r3, #4
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d0f0      	beq.n	8008a22 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a40:	4b0e      	ldr	r3, [pc, #56]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	061b      	lsls	r3, r3, #24
 8008a4e:	490b      	ldr	r1, [pc, #44]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 8008a50:	4313      	orrs	r3, r2
 8008a52:	604b      	str	r3, [r1, #4]
 8008a54:	e01a      	b.n	8008a8c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a56:	4b09      	ldr	r3, [pc, #36]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a08      	ldr	r2, [pc, #32]	; (8008a7c <HAL_RCC_OscConfig+0x244>)
 8008a5c:	f023 0301 	bic.w	r3, r3, #1
 8008a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a62:	f7fc faad 	bl	8004fc0 <HAL_GetTick>
 8008a66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008a68:	e00a      	b.n	8008a80 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a6a:	f7fc faa9 	bl	8004fc0 <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d903      	bls.n	8008a80 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e2af      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
 8008a7c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008a80:	4b96      	ldr	r3, [pc, #600]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0304 	and.w	r3, r3, #4
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1ee      	bne.n	8008a6a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0310 	and.w	r3, r3, #16
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d06a      	beq.n	8008b6e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a98:	4b90      	ldr	r3, [pc, #576]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008aa0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008aa2:	4b8e      	ldr	r3, [pc, #568]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	2b08      	cmp	r3, #8
 8008aac:	d007      	beq.n	8008abe <HAL_RCC_OscConfig+0x286>
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	2b18      	cmp	r3, #24
 8008ab2:	d11b      	bne.n	8008aec <HAL_RCC_OscConfig+0x2b4>
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	f003 0303 	and.w	r3, r3, #3
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d116      	bne.n	8008aec <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008abe:	4b87      	ldr	r3, [pc, #540]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d005      	beq.n	8008ad6 <HAL_RCC_OscConfig+0x29e>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	2b80      	cmp	r3, #128	; 0x80
 8008ad0:	d001      	beq.n	8008ad6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e282      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ad6:	4b81      	ldr	r3, [pc, #516]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	061b      	lsls	r3, r3, #24
 8008ae4:	497d      	ldr	r1, [pc, #500]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008aea:	e040      	b.n	8008b6e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	69db      	ldr	r3, [r3, #28]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d023      	beq.n	8008b3c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008af4:	4b79      	ldr	r3, [pc, #484]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a78      	ldr	r2, [pc, #480]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b00:	f7fc fa5e 	bl	8004fc0 <HAL_GetTick>
 8008b04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b06:	e008      	b.n	8008b1a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008b08:	f7fc fa5a 	bl	8004fc0 <HAL_GetTick>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d901      	bls.n	8008b1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e260      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b1a:	4b70      	ldr	r3, [pc, #448]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d0f0      	beq.n	8008b08 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b26:	4b6d      	ldr	r3, [pc, #436]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	061b      	lsls	r3, r3, #24
 8008b34:	4969      	ldr	r1, [pc, #420]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60cb      	str	r3, [r1, #12]
 8008b3a:	e018      	b.n	8008b6e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008b3c:	4b67      	ldr	r3, [pc, #412]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a66      	ldr	r2, [pc, #408]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b48:	f7fc fa3a 	bl	8004fc0 <HAL_GetTick>
 8008b4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b4e:	e008      	b.n	8008b62 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008b50:	f7fc fa36 	bl	8004fc0 <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d901      	bls.n	8008b62 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e23c      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b62:	4b5e      	ldr	r3, [pc, #376]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1f0      	bne.n	8008b50 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0308 	and.w	r3, r3, #8
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d036      	beq.n	8008be8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	695b      	ldr	r3, [r3, #20]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d019      	beq.n	8008bb6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b82:	4b56      	ldr	r3, [pc, #344]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b86:	4a55      	ldr	r2, [pc, #340]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008b88:	f043 0301 	orr.w	r3, r3, #1
 8008b8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b8e:	f7fc fa17 	bl	8004fc0 <HAL_GetTick>
 8008b92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b94:	e008      	b.n	8008ba8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b96:	f7fc fa13 	bl	8004fc0 <HAL_GetTick>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d901      	bls.n	8008ba8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e219      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ba8:	4b4c      	ldr	r3, [pc, #304]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bac:	f003 0302 	and.w	r3, r3, #2
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d0f0      	beq.n	8008b96 <HAL_RCC_OscConfig+0x35e>
 8008bb4:	e018      	b.n	8008be8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008bb6:	4b49      	ldr	r3, [pc, #292]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bba:	4a48      	ldr	r2, [pc, #288]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008bbc:	f023 0301 	bic.w	r3, r3, #1
 8008bc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bc2:	f7fc f9fd 	bl	8004fc0 <HAL_GetTick>
 8008bc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bc8:	e008      	b.n	8008bdc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008bca:	f7fc f9f9 	bl	8004fc0 <HAL_GetTick>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d901      	bls.n	8008bdc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e1ff      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bdc:	4b3f      	ldr	r3, [pc, #252]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1f0      	bne.n	8008bca <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0320 	and.w	r3, r3, #32
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d036      	beq.n	8008c62 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d019      	beq.n	8008c30 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008bfc:	4b37      	ldr	r3, [pc, #220]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a36      	ldr	r2, [pc, #216]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008c02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008c06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c08:	f7fc f9da 	bl	8004fc0 <HAL_GetTick>
 8008c0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c0e:	e008      	b.n	8008c22 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c10:	f7fc f9d6 	bl	8004fc0 <HAL_GetTick>
 8008c14:	4602      	mov	r2, r0
 8008c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d901      	bls.n	8008c22 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e1dc      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c22:	4b2e      	ldr	r3, [pc, #184]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d0f0      	beq.n	8008c10 <HAL_RCC_OscConfig+0x3d8>
 8008c2e:	e018      	b.n	8008c62 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c30:	4b2a      	ldr	r3, [pc, #168]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a29      	ldr	r2, [pc, #164]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008c36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c3c:	f7fc f9c0 	bl	8004fc0 <HAL_GetTick>
 8008c40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c42:	e008      	b.n	8008c56 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c44:	f7fc f9bc 	bl	8004fc0 <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d901      	bls.n	8008c56 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e1c2      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c56:	4b21      	ldr	r3, [pc, #132]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1f0      	bne.n	8008c44 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 0304 	and.w	r3, r3, #4
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 8086 	beq.w	8008d7c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c70:	4b1b      	ldr	r3, [pc, #108]	; (8008ce0 <HAL_RCC_OscConfig+0x4a8>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a1a      	ldr	r2, [pc, #104]	; (8008ce0 <HAL_RCC_OscConfig+0x4a8>)
 8008c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c7c:	f7fc f9a0 	bl	8004fc0 <HAL_GetTick>
 8008c80:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c82:	e008      	b.n	8008c96 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c84:	f7fc f99c 	bl	8004fc0 <HAL_GetTick>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	2b64      	cmp	r3, #100	; 0x64
 8008c90:	d901      	bls.n	8008c96 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e1a2      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c96:	4b12      	ldr	r3, [pc, #72]	; (8008ce0 <HAL_RCC_OscConfig+0x4a8>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0f0      	beq.n	8008c84 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d106      	bne.n	8008cb8 <HAL_RCC_OscConfig+0x480>
 8008caa:	4b0c      	ldr	r3, [pc, #48]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cae:	4a0b      	ldr	r2, [pc, #44]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008cb0:	f043 0301 	orr.w	r3, r3, #1
 8008cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8008cb6:	e032      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e6>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d111      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x4ac>
 8008cc0:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc4:	4a05      	ldr	r2, [pc, #20]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008cc6:	f023 0301 	bic.w	r3, r3, #1
 8008cca:	6713      	str	r3, [r2, #112]	; 0x70
 8008ccc:	4b03      	ldr	r3, [pc, #12]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd0:	4a02      	ldr	r2, [pc, #8]	; (8008cdc <HAL_RCC_OscConfig+0x4a4>)
 8008cd2:	f023 0304 	bic.w	r3, r3, #4
 8008cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8008cd8:	e021      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e6>
 8008cda:	bf00      	nop
 8008cdc:	58024400 	.word	0x58024400
 8008ce0:	58024800 	.word	0x58024800
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	2b05      	cmp	r3, #5
 8008cea:	d10c      	bne.n	8008d06 <HAL_RCC_OscConfig+0x4ce>
 8008cec:	4b83      	ldr	r3, [pc, #524]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf0:	4a82      	ldr	r2, [pc, #520]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008cf2:	f043 0304 	orr.w	r3, r3, #4
 8008cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8008cf8:	4b80      	ldr	r3, [pc, #512]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cfc:	4a7f      	ldr	r2, [pc, #508]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008cfe:	f043 0301 	orr.w	r3, r3, #1
 8008d02:	6713      	str	r3, [r2, #112]	; 0x70
 8008d04:	e00b      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e6>
 8008d06:	4b7d      	ldr	r3, [pc, #500]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d0a:	4a7c      	ldr	r2, [pc, #496]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008d0c:	f023 0301 	bic.w	r3, r3, #1
 8008d10:	6713      	str	r3, [r2, #112]	; 0x70
 8008d12:	4b7a      	ldr	r3, [pc, #488]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d16:	4a79      	ldr	r2, [pc, #484]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008d18:	f023 0304 	bic.w	r3, r3, #4
 8008d1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d015      	beq.n	8008d52 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d26:	f7fc f94b 	bl	8004fc0 <HAL_GetTick>
 8008d2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d2c:	e00a      	b.n	8008d44 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d2e:	f7fc f947 	bl	8004fc0 <HAL_GetTick>
 8008d32:	4602      	mov	r2, r0
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d901      	bls.n	8008d44 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e14b      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d44:	4b6d      	ldr	r3, [pc, #436]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d0ee      	beq.n	8008d2e <HAL_RCC_OscConfig+0x4f6>
 8008d50:	e014      	b.n	8008d7c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d52:	f7fc f935 	bl	8004fc0 <HAL_GetTick>
 8008d56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d58:	e00a      	b.n	8008d70 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d5a:	f7fc f931 	bl	8004fc0 <HAL_GetTick>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d901      	bls.n	8008d70 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e135      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d70:	4b62      	ldr	r3, [pc, #392]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d74:	f003 0302 	and.w	r3, r3, #2
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1ee      	bne.n	8008d5a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f000 812a 	beq.w	8008fda <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008d86:	4b5d      	ldr	r3, [pc, #372]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d8e:	2b18      	cmp	r3, #24
 8008d90:	f000 80ba 	beq.w	8008f08 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	f040 8095 	bne.w	8008ec8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d9e:	4b57      	ldr	r3, [pc, #348]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a56      	ldr	r2, [pc, #344]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008da4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008daa:	f7fc f909 	bl	8004fc0 <HAL_GetTick>
 8008dae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008db0:	e008      	b.n	8008dc4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008db2:	f7fc f905 	bl	8004fc0 <HAL_GetTick>
 8008db6:	4602      	mov	r2, r0
 8008db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d901      	bls.n	8008dc4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	e10b      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008dc4:	4b4d      	ldr	r3, [pc, #308]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1f0      	bne.n	8008db2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008dd0:	4b4a      	ldr	r3, [pc, #296]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dd4:	4b4a      	ldr	r3, [pc, #296]	; (8008f00 <HAL_RCC_OscConfig+0x6c8>)
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008de0:	0112      	lsls	r2, r2, #4
 8008de2:	430a      	orrs	r2, r1
 8008de4:	4945      	ldr	r1, [pc, #276]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	628b      	str	r3, [r1, #40]	; 0x28
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dee:	3b01      	subs	r3, #1
 8008df0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	025b      	lsls	r3, r3, #9
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	431a      	orrs	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e04:	3b01      	subs	r3, #1
 8008e06:	041b      	lsls	r3, r3, #16
 8008e08:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e0c:	431a      	orrs	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e12:	3b01      	subs	r3, #1
 8008e14:	061b      	lsls	r3, r3, #24
 8008e16:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e1a:	4938      	ldr	r1, [pc, #224]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008e20:	4b36      	ldr	r3, [pc, #216]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e24:	4a35      	ldr	r2, [pc, #212]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008e26:	f023 0301 	bic.w	r3, r3, #1
 8008e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e2c:	4b33      	ldr	r3, [pc, #204]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e30:	4b34      	ldr	r3, [pc, #208]	; (8008f04 <HAL_RCC_OscConfig+0x6cc>)
 8008e32:	4013      	ands	r3, r2
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e38:	00d2      	lsls	r2, r2, #3
 8008e3a:	4930      	ldr	r1, [pc, #192]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008e40:	4b2e      	ldr	r3, [pc, #184]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	f023 020c 	bic.w	r2, r3, #12
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4c:	492b      	ldr	r1, [pc, #172]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008e52:	4b2a      	ldr	r3, [pc, #168]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e56:	f023 0202 	bic.w	r2, r3, #2
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e5e:	4927      	ldr	r1, [pc, #156]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008e60:	4313      	orrs	r3, r2
 8008e62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008e64:	4b25      	ldr	r3, [pc, #148]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e68:	4a24      	ldr	r2, [pc, #144]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e70:	4b22      	ldr	r3, [pc, #136]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e74:	4a21      	ldr	r2, [pc, #132]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e7c:	4b1f      	ldr	r3, [pc, #124]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e80:	4a1e      	ldr	r2, [pc, #120]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008e82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008e88:	4b1c      	ldr	r3, [pc, #112]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8c:	4a1b      	ldr	r2, [pc, #108]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008e8e:	f043 0301 	orr.w	r3, r3, #1
 8008e92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e94:	4b19      	ldr	r3, [pc, #100]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a18      	ldr	r2, [pc, #96]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ea0:	f7fc f88e 	bl	8004fc0 <HAL_GetTick>
 8008ea4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ea6:	e008      	b.n	8008eba <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ea8:	f7fc f88a 	bl	8004fc0 <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	d901      	bls.n	8008eba <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	e090      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008eba:	4b10      	ldr	r3, [pc, #64]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d0f0      	beq.n	8008ea8 <HAL_RCC_OscConfig+0x670>
 8008ec6:	e088      	b.n	8008fda <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ec8:	4b0c      	ldr	r3, [pc, #48]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a0b      	ldr	r2, [pc, #44]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ed4:	f7fc f874 	bl	8004fc0 <HAL_GetTick>
 8008ed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008eda:	e008      	b.n	8008eee <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008edc:	f7fc f870 	bl	8004fc0 <HAL_GetTick>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d901      	bls.n	8008eee <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	e076      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008eee:	4b03      	ldr	r3, [pc, #12]	; (8008efc <HAL_RCC_OscConfig+0x6c4>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1f0      	bne.n	8008edc <HAL_RCC_OscConfig+0x6a4>
 8008efa:	e06e      	b.n	8008fda <HAL_RCC_OscConfig+0x7a2>
 8008efc:	58024400 	.word	0x58024400
 8008f00:	fffffc0c 	.word	0xfffffc0c
 8008f04:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008f08:	4b36      	ldr	r3, [pc, #216]	; (8008fe4 <HAL_RCC_OscConfig+0x7ac>)
 8008f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008f0e:	4b35      	ldr	r3, [pc, #212]	; (8008fe4 <HAL_RCC_OscConfig+0x7ac>)
 8008f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f12:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d031      	beq.n	8008f80 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	f003 0203 	and.w	r2, r3, #3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d12a      	bne.n	8008f80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	091b      	lsrs	r3, r3, #4
 8008f2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d122      	bne.n	8008f80 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f44:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d11a      	bne.n	8008f80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	0a5b      	lsrs	r3, r3, #9
 8008f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f56:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d111      	bne.n	8008f80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	0c1b      	lsrs	r3, r3, #16
 8008f60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d108      	bne.n	8008f80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	0e1b      	lsrs	r3, r3, #24
 8008f72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d001      	beq.n	8008f84 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e02b      	b.n	8008fdc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008f84:	4b17      	ldr	r3, [pc, #92]	; (8008fe4 <HAL_RCC_OscConfig+0x7ac>)
 8008f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f88:	08db      	lsrs	r3, r3, #3
 8008f8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f8e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d01f      	beq.n	8008fda <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008f9a:	4b12      	ldr	r3, [pc, #72]	; (8008fe4 <HAL_RCC_OscConfig+0x7ac>)
 8008f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9e:	4a11      	ldr	r2, [pc, #68]	; (8008fe4 <HAL_RCC_OscConfig+0x7ac>)
 8008fa0:	f023 0301 	bic.w	r3, r3, #1
 8008fa4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008fa6:	f7fc f80b 	bl	8004fc0 <HAL_GetTick>
 8008faa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008fac:	bf00      	nop
 8008fae:	f7fc f807 	bl	8004fc0 <HAL_GetTick>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d0f9      	beq.n	8008fae <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008fba:	4b0a      	ldr	r3, [pc, #40]	; (8008fe4 <HAL_RCC_OscConfig+0x7ac>)
 8008fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fbe:	4b0a      	ldr	r3, [pc, #40]	; (8008fe8 <HAL_RCC_OscConfig+0x7b0>)
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008fc6:	00d2      	lsls	r2, r2, #3
 8008fc8:	4906      	ldr	r1, [pc, #24]	; (8008fe4 <HAL_RCC_OscConfig+0x7ac>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008fce:	4b05      	ldr	r3, [pc, #20]	; (8008fe4 <HAL_RCC_OscConfig+0x7ac>)
 8008fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd2:	4a04      	ldr	r2, [pc, #16]	; (8008fe4 <HAL_RCC_OscConfig+0x7ac>)
 8008fd4:	f043 0301 	orr.w	r3, r3, #1
 8008fd8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3730      	adds	r7, #48	; 0x30
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	58024400 	.word	0x58024400
 8008fe8:	ffff0007 	.word	0xffff0007

08008fec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b086      	sub	sp, #24
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d101      	bne.n	8009000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e19c      	b.n	800933a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009000:	4b8a      	ldr	r3, [pc, #552]	; (800922c <HAL_RCC_ClockConfig+0x240>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 030f 	and.w	r3, r3, #15
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	429a      	cmp	r2, r3
 800900c:	d910      	bls.n	8009030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800900e:	4b87      	ldr	r3, [pc, #540]	; (800922c <HAL_RCC_ClockConfig+0x240>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f023 020f 	bic.w	r2, r3, #15
 8009016:	4985      	ldr	r1, [pc, #532]	; (800922c <HAL_RCC_ClockConfig+0x240>)
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	4313      	orrs	r3, r2
 800901c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800901e:	4b83      	ldr	r3, [pc, #524]	; (800922c <HAL_RCC_ClockConfig+0x240>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 030f 	and.w	r3, r3, #15
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	429a      	cmp	r2, r3
 800902a:	d001      	beq.n	8009030 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e184      	b.n	800933a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 0304 	and.w	r3, r3, #4
 8009038:	2b00      	cmp	r3, #0
 800903a:	d010      	beq.n	800905e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	691a      	ldr	r2, [r3, #16]
 8009040:	4b7b      	ldr	r3, [pc, #492]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009048:	429a      	cmp	r2, r3
 800904a:	d908      	bls.n	800905e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800904c:	4b78      	ldr	r3, [pc, #480]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	4975      	ldr	r1, [pc, #468]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 800905a:	4313      	orrs	r3, r2
 800905c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0308 	and.w	r3, r3, #8
 8009066:	2b00      	cmp	r3, #0
 8009068:	d010      	beq.n	800908c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	695a      	ldr	r2, [r3, #20]
 800906e:	4b70      	ldr	r3, [pc, #448]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009076:	429a      	cmp	r2, r3
 8009078:	d908      	bls.n	800908c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800907a:	4b6d      	ldr	r3, [pc, #436]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 800907c:	69db      	ldr	r3, [r3, #28]
 800907e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	496a      	ldr	r1, [pc, #424]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 8009088:	4313      	orrs	r3, r2
 800908a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0310 	and.w	r3, r3, #16
 8009094:	2b00      	cmp	r3, #0
 8009096:	d010      	beq.n	80090ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	699a      	ldr	r2, [r3, #24]
 800909c:	4b64      	ldr	r3, [pc, #400]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 800909e:	69db      	ldr	r3, [r3, #28]
 80090a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d908      	bls.n	80090ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80090a8:	4b61      	ldr	r3, [pc, #388]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	495e      	ldr	r1, [pc, #376]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 0320 	and.w	r3, r3, #32
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d010      	beq.n	80090e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	69da      	ldr	r2, [r3, #28]
 80090ca:	4b59      	ldr	r3, [pc, #356]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d908      	bls.n	80090e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80090d6:	4b56      	ldr	r3, [pc, #344]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	69db      	ldr	r3, [r3, #28]
 80090e2:	4953      	ldr	r1, [pc, #332]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 80090e4:	4313      	orrs	r3, r2
 80090e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0302 	and.w	r3, r3, #2
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d010      	beq.n	8009116 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	68da      	ldr	r2, [r3, #12]
 80090f8:	4b4d      	ldr	r3, [pc, #308]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 80090fa:	699b      	ldr	r3, [r3, #24]
 80090fc:	f003 030f 	and.w	r3, r3, #15
 8009100:	429a      	cmp	r2, r3
 8009102:	d908      	bls.n	8009116 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009104:	4b4a      	ldr	r3, [pc, #296]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	f023 020f 	bic.w	r2, r3, #15
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	4947      	ldr	r1, [pc, #284]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 8009112:	4313      	orrs	r3, r2
 8009114:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0301 	and.w	r3, r3, #1
 800911e:	2b00      	cmp	r3, #0
 8009120:	d055      	beq.n	80091ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009122:	4b43      	ldr	r3, [pc, #268]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	4940      	ldr	r1, [pc, #256]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 8009130:	4313      	orrs	r3, r2
 8009132:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	2b02      	cmp	r3, #2
 800913a:	d107      	bne.n	800914c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800913c:	4b3c      	ldr	r3, [pc, #240]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d121      	bne.n	800918c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e0f6      	b.n	800933a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	2b03      	cmp	r3, #3
 8009152:	d107      	bne.n	8009164 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009154:	4b36      	ldr	r3, [pc, #216]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d115      	bne.n	800918c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e0ea      	b.n	800933a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d107      	bne.n	800917c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800916c:	4b30      	ldr	r3, [pc, #192]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009174:	2b00      	cmp	r3, #0
 8009176:	d109      	bne.n	800918c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	e0de      	b.n	800933a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800917c:	4b2c      	ldr	r3, [pc, #176]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0304 	and.w	r3, r3, #4
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e0d6      	b.n	800933a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800918c:	4b28      	ldr	r3, [pc, #160]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	f023 0207 	bic.w	r2, r3, #7
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	4925      	ldr	r1, [pc, #148]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 800919a:	4313      	orrs	r3, r2
 800919c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800919e:	f7fb ff0f 	bl	8004fc0 <HAL_GetTick>
 80091a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091a4:	e00a      	b.n	80091bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091a6:	f7fb ff0b 	bl	8004fc0 <HAL_GetTick>
 80091aa:	4602      	mov	r2, r0
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d901      	bls.n	80091bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80091b8:	2303      	movs	r3, #3
 80091ba:	e0be      	b.n	800933a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091bc:	4b1c      	ldr	r3, [pc, #112]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	00db      	lsls	r3, r3, #3
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d1eb      	bne.n	80091a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0302 	and.w	r3, r3, #2
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d010      	beq.n	80091fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	68da      	ldr	r2, [r3, #12]
 80091de:	4b14      	ldr	r3, [pc, #80]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	f003 030f 	and.w	r3, r3, #15
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d208      	bcs.n	80091fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091ea:	4b11      	ldr	r3, [pc, #68]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	f023 020f 	bic.w	r2, r3, #15
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	490e      	ldr	r1, [pc, #56]	; (8009230 <HAL_RCC_ClockConfig+0x244>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80091fc:	4b0b      	ldr	r3, [pc, #44]	; (800922c <HAL_RCC_ClockConfig+0x240>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 030f 	and.w	r3, r3, #15
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	429a      	cmp	r2, r3
 8009208:	d214      	bcs.n	8009234 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800920a:	4b08      	ldr	r3, [pc, #32]	; (800922c <HAL_RCC_ClockConfig+0x240>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f023 020f 	bic.w	r2, r3, #15
 8009212:	4906      	ldr	r1, [pc, #24]	; (800922c <HAL_RCC_ClockConfig+0x240>)
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	4313      	orrs	r3, r2
 8009218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800921a:	4b04      	ldr	r3, [pc, #16]	; (800922c <HAL_RCC_ClockConfig+0x240>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 030f 	and.w	r3, r3, #15
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	429a      	cmp	r2, r3
 8009226:	d005      	beq.n	8009234 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	e086      	b.n	800933a <HAL_RCC_ClockConfig+0x34e>
 800922c:	52002000 	.word	0x52002000
 8009230:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 0304 	and.w	r3, r3, #4
 800923c:	2b00      	cmp	r3, #0
 800923e:	d010      	beq.n	8009262 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	691a      	ldr	r2, [r3, #16]
 8009244:	4b3f      	ldr	r3, [pc, #252]	; (8009344 <HAL_RCC_ClockConfig+0x358>)
 8009246:	699b      	ldr	r3, [r3, #24]
 8009248:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800924c:	429a      	cmp	r2, r3
 800924e:	d208      	bcs.n	8009262 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009250:	4b3c      	ldr	r3, [pc, #240]	; (8009344 <HAL_RCC_ClockConfig+0x358>)
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	4939      	ldr	r1, [pc, #228]	; (8009344 <HAL_RCC_ClockConfig+0x358>)
 800925e:	4313      	orrs	r3, r2
 8009260:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 0308 	and.w	r3, r3, #8
 800926a:	2b00      	cmp	r3, #0
 800926c:	d010      	beq.n	8009290 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	695a      	ldr	r2, [r3, #20]
 8009272:	4b34      	ldr	r3, [pc, #208]	; (8009344 <HAL_RCC_ClockConfig+0x358>)
 8009274:	69db      	ldr	r3, [r3, #28]
 8009276:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800927a:	429a      	cmp	r2, r3
 800927c:	d208      	bcs.n	8009290 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800927e:	4b31      	ldr	r3, [pc, #196]	; (8009344 <HAL_RCC_ClockConfig+0x358>)
 8009280:	69db      	ldr	r3, [r3, #28]
 8009282:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	492e      	ldr	r1, [pc, #184]	; (8009344 <HAL_RCC_ClockConfig+0x358>)
 800928c:	4313      	orrs	r3, r2
 800928e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 0310 	and.w	r3, r3, #16
 8009298:	2b00      	cmp	r3, #0
 800929a:	d010      	beq.n	80092be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	699a      	ldr	r2, [r3, #24]
 80092a0:	4b28      	ldr	r3, [pc, #160]	; (8009344 <HAL_RCC_ClockConfig+0x358>)
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d208      	bcs.n	80092be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80092ac:	4b25      	ldr	r3, [pc, #148]	; (8009344 <HAL_RCC_ClockConfig+0x358>)
 80092ae:	69db      	ldr	r3, [r3, #28]
 80092b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	4922      	ldr	r1, [pc, #136]	; (8009344 <HAL_RCC_ClockConfig+0x358>)
 80092ba:	4313      	orrs	r3, r2
 80092bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 0320 	and.w	r3, r3, #32
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d010      	beq.n	80092ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	69da      	ldr	r2, [r3, #28]
 80092ce:	4b1d      	ldr	r3, [pc, #116]	; (8009344 <HAL_RCC_ClockConfig+0x358>)
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d208      	bcs.n	80092ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80092da:	4b1a      	ldr	r3, [pc, #104]	; (8009344 <HAL_RCC_ClockConfig+0x358>)
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	4917      	ldr	r1, [pc, #92]	; (8009344 <HAL_RCC_ClockConfig+0x358>)
 80092e8:	4313      	orrs	r3, r2
 80092ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80092ec:	f000 f834 	bl	8009358 <HAL_RCC_GetSysClockFreq>
 80092f0:	4602      	mov	r2, r0
 80092f2:	4b14      	ldr	r3, [pc, #80]	; (8009344 <HAL_RCC_ClockConfig+0x358>)
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	0a1b      	lsrs	r3, r3, #8
 80092f8:	f003 030f 	and.w	r3, r3, #15
 80092fc:	4912      	ldr	r1, [pc, #72]	; (8009348 <HAL_RCC_ClockConfig+0x35c>)
 80092fe:	5ccb      	ldrb	r3, [r1, r3]
 8009300:	f003 031f 	and.w	r3, r3, #31
 8009304:	fa22 f303 	lsr.w	r3, r2, r3
 8009308:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800930a:	4b0e      	ldr	r3, [pc, #56]	; (8009344 <HAL_RCC_ClockConfig+0x358>)
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	f003 030f 	and.w	r3, r3, #15
 8009312:	4a0d      	ldr	r2, [pc, #52]	; (8009348 <HAL_RCC_ClockConfig+0x35c>)
 8009314:	5cd3      	ldrb	r3, [r2, r3]
 8009316:	f003 031f 	and.w	r3, r3, #31
 800931a:	693a      	ldr	r2, [r7, #16]
 800931c:	fa22 f303 	lsr.w	r3, r2, r3
 8009320:	4a0a      	ldr	r2, [pc, #40]	; (800934c <HAL_RCC_ClockConfig+0x360>)
 8009322:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009324:	4a0a      	ldr	r2, [pc, #40]	; (8009350 <HAL_RCC_ClockConfig+0x364>)
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800932a:	4b0a      	ldr	r3, [pc, #40]	; (8009354 <HAL_RCC_ClockConfig+0x368>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4618      	mov	r0, r3
 8009330:	f7fb fdfc 	bl	8004f2c <HAL_InitTick>
 8009334:	4603      	mov	r3, r0
 8009336:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009338:	7bfb      	ldrb	r3, [r7, #15]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3718      	adds	r7, #24
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	58024400 	.word	0x58024400
 8009348:	0800f4a8 	.word	0x0800f4a8
 800934c:	24000004 	.word	0x24000004
 8009350:	24000000 	.word	0x24000000
 8009354:	24000008 	.word	0x24000008

08009358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009358:	b480      	push	{r7}
 800935a:	b089      	sub	sp, #36	; 0x24
 800935c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800935e:	4bb3      	ldr	r3, [pc, #716]	; (800962c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009366:	2b18      	cmp	r3, #24
 8009368:	f200 8155 	bhi.w	8009616 <HAL_RCC_GetSysClockFreq+0x2be>
 800936c:	a201      	add	r2, pc, #4	; (adr r2, 8009374 <HAL_RCC_GetSysClockFreq+0x1c>)
 800936e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009372:	bf00      	nop
 8009374:	080093d9 	.word	0x080093d9
 8009378:	08009617 	.word	0x08009617
 800937c:	08009617 	.word	0x08009617
 8009380:	08009617 	.word	0x08009617
 8009384:	08009617 	.word	0x08009617
 8009388:	08009617 	.word	0x08009617
 800938c:	08009617 	.word	0x08009617
 8009390:	08009617 	.word	0x08009617
 8009394:	080093ff 	.word	0x080093ff
 8009398:	08009617 	.word	0x08009617
 800939c:	08009617 	.word	0x08009617
 80093a0:	08009617 	.word	0x08009617
 80093a4:	08009617 	.word	0x08009617
 80093a8:	08009617 	.word	0x08009617
 80093ac:	08009617 	.word	0x08009617
 80093b0:	08009617 	.word	0x08009617
 80093b4:	08009405 	.word	0x08009405
 80093b8:	08009617 	.word	0x08009617
 80093bc:	08009617 	.word	0x08009617
 80093c0:	08009617 	.word	0x08009617
 80093c4:	08009617 	.word	0x08009617
 80093c8:	08009617 	.word	0x08009617
 80093cc:	08009617 	.word	0x08009617
 80093d0:	08009617 	.word	0x08009617
 80093d4:	0800940b 	.word	0x0800940b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093d8:	4b94      	ldr	r3, [pc, #592]	; (800962c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 0320 	and.w	r3, r3, #32
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d009      	beq.n	80093f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093e4:	4b91      	ldr	r3, [pc, #580]	; (800962c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	08db      	lsrs	r3, r3, #3
 80093ea:	f003 0303 	and.w	r3, r3, #3
 80093ee:	4a90      	ldr	r2, [pc, #576]	; (8009630 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093f0:	fa22 f303 	lsr.w	r3, r2, r3
 80093f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80093f6:	e111      	b.n	800961c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80093f8:	4b8d      	ldr	r3, [pc, #564]	; (8009630 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093fa:	61bb      	str	r3, [r7, #24]
      break;
 80093fc:	e10e      	b.n	800961c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80093fe:	4b8d      	ldr	r3, [pc, #564]	; (8009634 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009400:	61bb      	str	r3, [r7, #24]
      break;
 8009402:	e10b      	b.n	800961c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009404:	4b8c      	ldr	r3, [pc, #560]	; (8009638 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009406:	61bb      	str	r3, [r7, #24]
      break;
 8009408:	e108      	b.n	800961c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800940a:	4b88      	ldr	r3, [pc, #544]	; (800962c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800940c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800940e:	f003 0303 	and.w	r3, r3, #3
 8009412:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009414:	4b85      	ldr	r3, [pc, #532]	; (800962c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009418:	091b      	lsrs	r3, r3, #4
 800941a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800941e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009420:	4b82      	ldr	r3, [pc, #520]	; (800962c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009424:	f003 0301 	and.w	r3, r3, #1
 8009428:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800942a:	4b80      	ldr	r3, [pc, #512]	; (800962c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800942c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942e:	08db      	lsrs	r3, r3, #3
 8009430:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	fb02 f303 	mul.w	r3, r2, r3
 800943a:	ee07 3a90 	vmov	s15, r3
 800943e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009442:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 80e1 	beq.w	8009610 <HAL_RCC_GetSysClockFreq+0x2b8>
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	2b02      	cmp	r3, #2
 8009452:	f000 8083 	beq.w	800955c <HAL_RCC_GetSysClockFreq+0x204>
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2b02      	cmp	r3, #2
 800945a:	f200 80a1 	bhi.w	80095a0 <HAL_RCC_GetSysClockFreq+0x248>
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d003      	beq.n	800946c <HAL_RCC_GetSysClockFreq+0x114>
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d056      	beq.n	8009518 <HAL_RCC_GetSysClockFreq+0x1c0>
 800946a:	e099      	b.n	80095a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800946c:	4b6f      	ldr	r3, [pc, #444]	; (800962c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 0320 	and.w	r3, r3, #32
 8009474:	2b00      	cmp	r3, #0
 8009476:	d02d      	beq.n	80094d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009478:	4b6c      	ldr	r3, [pc, #432]	; (800962c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	08db      	lsrs	r3, r3, #3
 800947e:	f003 0303 	and.w	r3, r3, #3
 8009482:	4a6b      	ldr	r2, [pc, #428]	; (8009630 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009484:	fa22 f303 	lsr.w	r3, r2, r3
 8009488:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	ee07 3a90 	vmov	s15, r3
 8009490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	ee07 3a90 	vmov	s15, r3
 800949a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800949e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094a2:	4b62      	ldr	r3, [pc, #392]	; (800962c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094aa:	ee07 3a90 	vmov	s15, r3
 80094ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80094b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800963c <HAL_RCC_GetSysClockFreq+0x2e4>
 80094ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80094d2:	e087      	b.n	80095e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	ee07 3a90 	vmov	s15, r3
 80094da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009640 <HAL_RCC_GetSysClockFreq+0x2e8>
 80094e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094e6:	4b51      	ldr	r3, [pc, #324]	; (800962c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ee:	ee07 3a90 	vmov	s15, r3
 80094f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80094fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800963c <HAL_RCC_GetSysClockFreq+0x2e4>
 80094fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800950a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800950e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009512:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009516:	e065      	b.n	80095e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	ee07 3a90 	vmov	s15, r3
 800951e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009522:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009644 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800952a:	4b40      	ldr	r3, [pc, #256]	; (800962c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800952c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009532:	ee07 3a90 	vmov	s15, r3
 8009536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800953a:	ed97 6a02 	vldr	s12, [r7, #8]
 800953e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800963c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800954a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800954e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009556:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800955a:	e043      	b.n	80095e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	ee07 3a90 	vmov	s15, r3
 8009562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009566:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009648 <HAL_RCC_GetSysClockFreq+0x2f0>
 800956a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800956e:	4b2f      	ldr	r3, [pc, #188]	; (800962c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009576:	ee07 3a90 	vmov	s15, r3
 800957a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800957e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009582:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800963c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800958a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800958e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800959a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800959e:	e021      	b.n	80095e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	ee07 3a90 	vmov	s15, r3
 80095a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009644 <HAL_RCC_GetSysClockFreq+0x2ec>
 80095ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095b2:	4b1e      	ldr	r3, [pc, #120]	; (800962c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ba:	ee07 3a90 	vmov	s15, r3
 80095be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80095c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800963c <HAL_RCC_GetSysClockFreq+0x2e4>
 80095ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80095e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80095e4:	4b11      	ldr	r3, [pc, #68]	; (800962c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e8:	0a5b      	lsrs	r3, r3, #9
 80095ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ee:	3301      	adds	r3, #1
 80095f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	ee07 3a90 	vmov	s15, r3
 80095f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80095fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009608:	ee17 3a90 	vmov	r3, s15
 800960c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800960e:	e005      	b.n	800961c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009610:	2300      	movs	r3, #0
 8009612:	61bb      	str	r3, [r7, #24]
      break;
 8009614:	e002      	b.n	800961c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009616:	4b07      	ldr	r3, [pc, #28]	; (8009634 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009618:	61bb      	str	r3, [r7, #24]
      break;
 800961a:	bf00      	nop
  }

  return sysclockfreq;
 800961c:	69bb      	ldr	r3, [r7, #24]
}
 800961e:	4618      	mov	r0, r3
 8009620:	3724      	adds	r7, #36	; 0x24
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	58024400 	.word	0x58024400
 8009630:	03d09000 	.word	0x03d09000
 8009634:	003d0900 	.word	0x003d0900
 8009638:	007a1200 	.word	0x007a1200
 800963c:	46000000 	.word	0x46000000
 8009640:	4c742400 	.word	0x4c742400
 8009644:	4a742400 	.word	0x4a742400
 8009648:	4af42400 	.word	0x4af42400

0800964c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009652:	f7ff fe81 	bl	8009358 <HAL_RCC_GetSysClockFreq>
 8009656:	4602      	mov	r2, r0
 8009658:	4b10      	ldr	r3, [pc, #64]	; (800969c <HAL_RCC_GetHCLKFreq+0x50>)
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	0a1b      	lsrs	r3, r3, #8
 800965e:	f003 030f 	and.w	r3, r3, #15
 8009662:	490f      	ldr	r1, [pc, #60]	; (80096a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009664:	5ccb      	ldrb	r3, [r1, r3]
 8009666:	f003 031f 	and.w	r3, r3, #31
 800966a:	fa22 f303 	lsr.w	r3, r2, r3
 800966e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009670:	4b0a      	ldr	r3, [pc, #40]	; (800969c <HAL_RCC_GetHCLKFreq+0x50>)
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	f003 030f 	and.w	r3, r3, #15
 8009678:	4a09      	ldr	r2, [pc, #36]	; (80096a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800967a:	5cd3      	ldrb	r3, [r2, r3]
 800967c:	f003 031f 	and.w	r3, r3, #31
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	fa22 f303 	lsr.w	r3, r2, r3
 8009686:	4a07      	ldr	r2, [pc, #28]	; (80096a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009688:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800968a:	4a07      	ldr	r2, [pc, #28]	; (80096a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009690:	4b04      	ldr	r3, [pc, #16]	; (80096a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009692:	681b      	ldr	r3, [r3, #0]
}
 8009694:	4618      	mov	r0, r3
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	58024400 	.word	0x58024400
 80096a0:	0800f4a8 	.word	0x0800f4a8
 80096a4:	24000004 	.word	0x24000004
 80096a8:	24000000 	.word	0x24000000

080096ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80096b0:	f7ff ffcc 	bl	800964c <HAL_RCC_GetHCLKFreq>
 80096b4:	4602      	mov	r2, r0
 80096b6:	4b06      	ldr	r3, [pc, #24]	; (80096d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80096b8:	69db      	ldr	r3, [r3, #28]
 80096ba:	091b      	lsrs	r3, r3, #4
 80096bc:	f003 0307 	and.w	r3, r3, #7
 80096c0:	4904      	ldr	r1, [pc, #16]	; (80096d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80096c2:	5ccb      	ldrb	r3, [r1, r3]
 80096c4:	f003 031f 	and.w	r3, r3, #31
 80096c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	58024400 	.word	0x58024400
 80096d4:	0800f4a8 	.word	0x0800f4a8

080096d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80096dc:	f7ff ffb6 	bl	800964c <HAL_RCC_GetHCLKFreq>
 80096e0:	4602      	mov	r2, r0
 80096e2:	4b06      	ldr	r3, [pc, #24]	; (80096fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	0a1b      	lsrs	r3, r3, #8
 80096e8:	f003 0307 	and.w	r3, r3, #7
 80096ec:	4904      	ldr	r1, [pc, #16]	; (8009700 <HAL_RCC_GetPCLK2Freq+0x28>)
 80096ee:	5ccb      	ldrb	r3, [r1, r3]
 80096f0:	f003 031f 	and.w	r3, r3, #31
 80096f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	58024400 	.word	0x58024400
 8009700:	0800f4a8 	.word	0x0800f4a8

08009704 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009708:	b0c6      	sub	sp, #280	; 0x118
 800970a:	af00      	add	r7, sp, #0
 800970c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009710:	2300      	movs	r3, #0
 8009712:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009716:	2300      	movs	r3, #0
 8009718:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800971c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009728:	2500      	movs	r5, #0
 800972a:	ea54 0305 	orrs.w	r3, r4, r5
 800972e:	d049      	beq.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009736:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800973a:	d02f      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800973c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009740:	d828      	bhi.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009742:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009746:	d01a      	beq.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009748:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800974c:	d822      	bhi.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009756:	d007      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009758:	e01c      	b.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800975a:	4bab      	ldr	r3, [pc, #684]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800975c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975e:	4aaa      	ldr	r2, [pc, #680]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009764:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009766:	e01a      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800976c:	3308      	adds	r3, #8
 800976e:	2102      	movs	r1, #2
 8009770:	4618      	mov	r0, r3
 8009772:	f001 fc25 	bl	800afc0 <RCCEx_PLL2_Config>
 8009776:	4603      	mov	r3, r0
 8009778:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800977c:	e00f      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800977e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009782:	3328      	adds	r3, #40	; 0x28
 8009784:	2102      	movs	r1, #2
 8009786:	4618      	mov	r0, r3
 8009788:	f001 fccc 	bl	800b124 <RCCEx_PLL3_Config>
 800978c:	4603      	mov	r3, r0
 800978e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009792:	e004      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800979a:	e000      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800979c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800979e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10a      	bne.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80097a6:	4b98      	ldr	r3, [pc, #608]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80097a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80097ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097b4:	4a94      	ldr	r2, [pc, #592]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80097b6:	430b      	orrs	r3, r1
 80097b8:	6513      	str	r3, [r2, #80]	; 0x50
 80097ba:	e003      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80097c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80097c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097cc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80097d0:	f04f 0900 	mov.w	r9, #0
 80097d4:	ea58 0309 	orrs.w	r3, r8, r9
 80097d8:	d047      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80097da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e0:	2b04      	cmp	r3, #4
 80097e2:	d82a      	bhi.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80097e4:	a201      	add	r2, pc, #4	; (adr r2, 80097ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80097e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ea:	bf00      	nop
 80097ec:	08009801 	.word	0x08009801
 80097f0:	0800980f 	.word	0x0800980f
 80097f4:	08009825 	.word	0x08009825
 80097f8:	08009843 	.word	0x08009843
 80097fc:	08009843 	.word	0x08009843
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009800:	4b81      	ldr	r3, [pc, #516]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009804:	4a80      	ldr	r2, [pc, #512]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800980a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800980c:	e01a      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800980e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009812:	3308      	adds	r3, #8
 8009814:	2100      	movs	r1, #0
 8009816:	4618      	mov	r0, r3
 8009818:	f001 fbd2 	bl	800afc0 <RCCEx_PLL2_Config>
 800981c:	4603      	mov	r3, r0
 800981e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009822:	e00f      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009828:	3328      	adds	r3, #40	; 0x28
 800982a:	2100      	movs	r1, #0
 800982c:	4618      	mov	r0, r3
 800982e:	f001 fc79 	bl	800b124 <RCCEx_PLL3_Config>
 8009832:	4603      	mov	r3, r0
 8009834:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009838:	e004      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009840:	e000      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009844:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009848:	2b00      	cmp	r3, #0
 800984a:	d10a      	bne.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800984c:	4b6e      	ldr	r3, [pc, #440]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800984e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009850:	f023 0107 	bic.w	r1, r3, #7
 8009854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800985a:	4a6b      	ldr	r2, [pc, #428]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800985c:	430b      	orrs	r3, r1
 800985e:	6513      	str	r3, [r2, #80]	; 0x50
 8009860:	e003      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009862:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009866:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800986a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800986e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009872:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8009876:	f04f 0b00 	mov.w	fp, #0
 800987a:	ea5a 030b 	orrs.w	r3, sl, fp
 800987e:	d05b      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009884:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009888:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800988c:	d03b      	beq.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800988e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009892:	d834      	bhi.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009894:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009898:	d037      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800989a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800989e:	d82e      	bhi.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80098a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098a4:	d033      	beq.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80098a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098aa:	d828      	bhi.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80098ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098b0:	d01a      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80098b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098b6:	d822      	bhi.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d003      	beq.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80098bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098c0:	d007      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80098c2:	e01c      	b.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098c4:	4b50      	ldr	r3, [pc, #320]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c8:	4a4f      	ldr	r2, [pc, #316]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098d0:	e01e      	b.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098d6:	3308      	adds	r3, #8
 80098d8:	2100      	movs	r1, #0
 80098da:	4618      	mov	r0, r3
 80098dc:	f001 fb70 	bl	800afc0 <RCCEx_PLL2_Config>
 80098e0:	4603      	mov	r3, r0
 80098e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80098e6:	e013      	b.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ec:	3328      	adds	r3, #40	; 0x28
 80098ee:	2100      	movs	r1, #0
 80098f0:	4618      	mov	r0, r3
 80098f2:	f001 fc17 	bl	800b124 <RCCEx_PLL3_Config>
 80098f6:	4603      	mov	r3, r0
 80098f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098fc:	e008      	b.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009904:	e004      	b.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009906:	bf00      	nop
 8009908:	e002      	b.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800990a:	bf00      	nop
 800990c:	e000      	b.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800990e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009910:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10b      	bne.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009918:	4b3b      	ldr	r3, [pc, #236]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800991a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800991c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009924:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009928:	4a37      	ldr	r2, [pc, #220]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800992a:	430b      	orrs	r3, r1
 800992c:	6593      	str	r3, [r2, #88]	; 0x58
 800992e:	e003      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009930:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009934:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800993c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009940:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009944:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009948:	2300      	movs	r3, #0
 800994a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800994e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009952:	460b      	mov	r3, r1
 8009954:	4313      	orrs	r3, r2
 8009956:	d05d      	beq.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800995c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009960:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009964:	d03b      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009966:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800996a:	d834      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800996c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009970:	d037      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009972:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009976:	d82e      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009978:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800997c:	d033      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800997e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009982:	d828      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009984:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009988:	d01a      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800998a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800998e:	d822      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009990:	2b00      	cmp	r3, #0
 8009992:	d003      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009998:	d007      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800999a:	e01c      	b.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800999c:	4b1a      	ldr	r3, [pc, #104]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800999e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a0:	4a19      	ldr	r2, [pc, #100]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80099a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099a8:	e01e      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ae:	3308      	adds	r3, #8
 80099b0:	2100      	movs	r1, #0
 80099b2:	4618      	mov	r0, r3
 80099b4:	f001 fb04 	bl	800afc0 <RCCEx_PLL2_Config>
 80099b8:	4603      	mov	r3, r0
 80099ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80099be:	e013      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099c4:	3328      	adds	r3, #40	; 0x28
 80099c6:	2100      	movs	r1, #0
 80099c8:	4618      	mov	r0, r3
 80099ca:	f001 fbab 	bl	800b124 <RCCEx_PLL3_Config>
 80099ce:	4603      	mov	r3, r0
 80099d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099d4:	e008      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80099dc:	e004      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80099de:	bf00      	nop
 80099e0:	e002      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80099e2:	bf00      	nop
 80099e4:	e000      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80099e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10d      	bne.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80099f0:	4b05      	ldr	r3, [pc, #20]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80099f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099f4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80099f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a00:	4a01      	ldr	r2, [pc, #4]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a02:	430b      	orrs	r3, r1
 8009a04:	6593      	str	r3, [r2, #88]	; 0x58
 8009a06:	e005      	b.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009a08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009a20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009a24:	2300      	movs	r3, #0
 8009a26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a2a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	4313      	orrs	r3, r2
 8009a32:	d03a      	beq.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a3a:	2b30      	cmp	r3, #48	; 0x30
 8009a3c:	d01f      	beq.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009a3e:	2b30      	cmp	r3, #48	; 0x30
 8009a40:	d819      	bhi.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009a42:	2b20      	cmp	r3, #32
 8009a44:	d00c      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009a46:	2b20      	cmp	r3, #32
 8009a48:	d815      	bhi.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d019      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009a4e:	2b10      	cmp	r3, #16
 8009a50:	d111      	bne.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a52:	4baa      	ldr	r3, [pc, #680]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a56:	4aa9      	ldr	r2, [pc, #676]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009a5e:	e011      	b.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a64:	3308      	adds	r3, #8
 8009a66:	2102      	movs	r1, #2
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f001 faa9 	bl	800afc0 <RCCEx_PLL2_Config>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009a74:	e006      	b.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009a7c:	e002      	b.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009a7e:	bf00      	nop
 8009a80:	e000      	b.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10a      	bne.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009a8c:	4b9b      	ldr	r3, [pc, #620]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a90:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a9a:	4a98      	ldr	r2, [pc, #608]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a9c:	430b      	orrs	r3, r1
 8009a9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009aa0:	e003      	b.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aa2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009aa6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009ab6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009aba:	2300      	movs	r3, #0
 8009abc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009ac0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	d051      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ad0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ad4:	d035      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009ad6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ada:	d82e      	bhi.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009adc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ae0:	d031      	beq.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009ae2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ae6:	d828      	bhi.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aec:	d01a      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009af2:	d822      	bhi.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d003      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009afc:	d007      	beq.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009afe:	e01c      	b.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b00:	4b7e      	ldr	r3, [pc, #504]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b04:	4a7d      	ldr	r2, [pc, #500]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009b0c:	e01c      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b12:	3308      	adds	r3, #8
 8009b14:	2100      	movs	r1, #0
 8009b16:	4618      	mov	r0, r3
 8009b18:	f001 fa52 	bl	800afc0 <RCCEx_PLL2_Config>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009b22:	e011      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b28:	3328      	adds	r3, #40	; 0x28
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f001 faf9 	bl	800b124 <RCCEx_PLL3_Config>
 8009b32:	4603      	mov	r3, r0
 8009b34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009b38:	e006      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009b40:	e002      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009b42:	bf00      	nop
 8009b44:	e000      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d10a      	bne.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009b50:	4b6a      	ldr	r3, [pc, #424]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b54:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b5e:	4a67      	ldr	r2, [pc, #412]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b60:	430b      	orrs	r3, r1
 8009b62:	6513      	str	r3, [r2, #80]	; 0x50
 8009b64:	e003      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b76:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009b7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b7e:	2300      	movs	r3, #0
 8009b80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b84:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009b88:	460b      	mov	r3, r1
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	d053      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b98:	d033      	beq.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009b9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b9e:	d82c      	bhi.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009ba0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ba4:	d02f      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009ba6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009baa:	d826      	bhi.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009bac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009bb0:	d02b      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009bb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009bb6:	d820      	bhi.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009bb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bbc:	d012      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009bbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bc2:	d81a      	bhi.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d022      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bcc:	d115      	bne.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bd2:	3308      	adds	r3, #8
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f001 f9f2 	bl	800afc0 <RCCEx_PLL2_Config>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009be2:	e015      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009be8:	3328      	adds	r3, #40	; 0x28
 8009bea:	2101      	movs	r1, #1
 8009bec:	4618      	mov	r0, r3
 8009bee:	f001 fa99 	bl	800b124 <RCCEx_PLL3_Config>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009bf8:	e00a      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009c00:	e006      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009c02:	bf00      	nop
 8009c04:	e004      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009c06:	bf00      	nop
 8009c08:	e002      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009c0a:	bf00      	nop
 8009c0c:	e000      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009c0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10a      	bne.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009c18:	4b38      	ldr	r3, [pc, #224]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c1c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c26:	4a35      	ldr	r2, [pc, #212]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c28:	430b      	orrs	r3, r1
 8009c2a:	6513      	str	r3, [r2, #80]	; 0x50
 8009c2c:	e003      	b.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c32:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009c42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009c46:	2300      	movs	r3, #0
 8009c48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c4c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009c50:	460b      	mov	r3, r1
 8009c52:	4313      	orrs	r3, r2
 8009c54:	d058      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009c5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c62:	d033      	beq.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c68:	d82c      	bhi.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c6e:	d02f      	beq.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c74:	d826      	bhi.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009c76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c7a:	d02b      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009c7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c80:	d820      	bhi.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c86:	d012      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c8c:	d81a      	bhi.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d022      	beq.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009c92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c96:	d115      	bne.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c9c:	3308      	adds	r3, #8
 8009c9e:	2101      	movs	r1, #1
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f001 f98d 	bl	800afc0 <RCCEx_PLL2_Config>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009cac:	e015      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb2:	3328      	adds	r3, #40	; 0x28
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f001 fa34 	bl	800b124 <RCCEx_PLL3_Config>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009cc2:	e00a      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009cca:	e006      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009ccc:	bf00      	nop
 8009cce:	e004      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009cd0:	bf00      	nop
 8009cd2:	e002      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009cd4:	bf00      	nop
 8009cd6:	e000      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10e      	bne.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009ce2:	4b06      	ldr	r3, [pc, #24]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ce6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009cf2:	4a02      	ldr	r2, [pc, #8]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009cf4:	430b      	orrs	r3, r1
 8009cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8009cf8:	e006      	b.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009cfa:	bf00      	nop
 8009cfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009d14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009d1e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009d22:	460b      	mov	r3, r1
 8009d24:	4313      	orrs	r3, r2
 8009d26:	d037      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d32:	d00e      	beq.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d38:	d816      	bhi.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d018      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d42:	d111      	bne.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d44:	4bc4      	ldr	r3, [pc, #784]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d48:	4ac3      	ldr	r2, [pc, #780]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009d50:	e00f      	b.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d56:	3308      	adds	r3, #8
 8009d58:	2101      	movs	r1, #1
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f001 f930 	bl	800afc0 <RCCEx_PLL2_Config>
 8009d60:	4603      	mov	r3, r0
 8009d62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009d66:	e004      	b.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009d6e:	e000      	b.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d10a      	bne.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009d7a:	4bb7      	ldr	r3, [pc, #732]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d7e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d88:	4ab3      	ldr	r2, [pc, #716]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d8a:	430b      	orrs	r3, r1
 8009d8c:	6513      	str	r3, [r2, #80]	; 0x50
 8009d8e:	e003      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009da4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009da8:	2300      	movs	r3, #0
 8009daa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009dae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009db2:	460b      	mov	r3, r1
 8009db4:	4313      	orrs	r3, r2
 8009db6:	d039      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	d81c      	bhi.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009dc2:	a201      	add	r2, pc, #4	; (adr r2, 8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc8:	08009e05 	.word	0x08009e05
 8009dcc:	08009dd9 	.word	0x08009dd9
 8009dd0:	08009de7 	.word	0x08009de7
 8009dd4:	08009e05 	.word	0x08009e05
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dd8:	4b9f      	ldr	r3, [pc, #636]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ddc:	4a9e      	ldr	r2, [pc, #632]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009de2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009de4:	e00f      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dea:	3308      	adds	r3, #8
 8009dec:	2102      	movs	r1, #2
 8009dee:	4618      	mov	r0, r3
 8009df0:	f001 f8e6 	bl	800afc0 <RCCEx_PLL2_Config>
 8009df4:	4603      	mov	r3, r0
 8009df6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009dfa:	e004      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009e02:	e000      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10a      	bne.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009e0e:	4b92      	ldr	r3, [pc, #584]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e12:	f023 0103 	bic.w	r1, r3, #3
 8009e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e1c:	4a8e      	ldr	r2, [pc, #568]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e1e:	430b      	orrs	r3, r1
 8009e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e22:	e003      	b.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e34:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009e38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009e46:	460b      	mov	r3, r1
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	f000 8099 	beq.w	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e4e:	4b83      	ldr	r3, [pc, #524]	; (800a05c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a82      	ldr	r2, [pc, #520]	; (800a05c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e5a:	f7fb f8b1 	bl	8004fc0 <HAL_GetTick>
 8009e5e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e62:	e00b      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e64:	f7fb f8ac 	bl	8004fc0 <HAL_GetTick>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009e6e:	1ad3      	subs	r3, r2, r3
 8009e70:	2b64      	cmp	r3, #100	; 0x64
 8009e72:	d903      	bls.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009e74:	2303      	movs	r3, #3
 8009e76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009e7a:	e005      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e7c:	4b77      	ldr	r3, [pc, #476]	; (800a05c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d0ed      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009e88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d173      	bne.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009e90:	4b71      	ldr	r3, [pc, #452]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e9c:	4053      	eors	r3, r2
 8009e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d015      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009ea6:	4b6c      	ldr	r3, [pc, #432]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009eb2:	4b69      	ldr	r3, [pc, #420]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb6:	4a68      	ldr	r2, [pc, #416]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ebc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ebe:	4b66      	ldr	r3, [pc, #408]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ec2:	4a65      	ldr	r2, [pc, #404]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ec8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009eca:	4a63      	ldr	r2, [pc, #396]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ed0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ed6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ede:	d118      	bne.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ee0:	f7fb f86e 	bl	8004fc0 <HAL_GetTick>
 8009ee4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ee8:	e00d      	b.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009eea:	f7fb f869 	bl	8004fc0 <HAL_GetTick>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009ef4:	1ad2      	subs	r2, r2, r3
 8009ef6:	f241 3388 	movw	r3, #5000	; 0x1388
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d903      	bls.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009efe:	2303      	movs	r3, #3
 8009f00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8009f04:	e005      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f06:	4b54      	ldr	r3, [pc, #336]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f0a:	f003 0302 	and.w	r3, r3, #2
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d0eb      	beq.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009f12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d129      	bne.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f2a:	d10e      	bne.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009f2c:	4b4a      	ldr	r3, [pc, #296]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009f3c:	091a      	lsrs	r2, r3, #4
 8009f3e:	4b48      	ldr	r3, [pc, #288]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009f40:	4013      	ands	r3, r2
 8009f42:	4a45      	ldr	r2, [pc, #276]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f44:	430b      	orrs	r3, r1
 8009f46:	6113      	str	r3, [r2, #16]
 8009f48:	e005      	b.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009f4a:	4b43      	ldr	r3, [pc, #268]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	4a42      	ldr	r2, [pc, #264]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009f54:	6113      	str	r3, [r2, #16]
 8009f56:	4b40      	ldr	r3, [pc, #256]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f58:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f66:	4a3c      	ldr	r2, [pc, #240]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f68:	430b      	orrs	r3, r1
 8009f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8009f6c:	e008      	b.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009f6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f72:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8009f76:	e003      	b.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f88:	f002 0301 	and.w	r3, r2, #1
 8009f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f90:	2300      	movs	r3, #0
 8009f92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009f96:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	f000 808f 	beq.w	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fa8:	2b28      	cmp	r3, #40	; 0x28
 8009faa:	d871      	bhi.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009fac:	a201      	add	r2, pc, #4	; (adr r2, 8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb2:	bf00      	nop
 8009fb4:	0800a099 	.word	0x0800a099
 8009fb8:	0800a091 	.word	0x0800a091
 8009fbc:	0800a091 	.word	0x0800a091
 8009fc0:	0800a091 	.word	0x0800a091
 8009fc4:	0800a091 	.word	0x0800a091
 8009fc8:	0800a091 	.word	0x0800a091
 8009fcc:	0800a091 	.word	0x0800a091
 8009fd0:	0800a091 	.word	0x0800a091
 8009fd4:	0800a065 	.word	0x0800a065
 8009fd8:	0800a091 	.word	0x0800a091
 8009fdc:	0800a091 	.word	0x0800a091
 8009fe0:	0800a091 	.word	0x0800a091
 8009fe4:	0800a091 	.word	0x0800a091
 8009fe8:	0800a091 	.word	0x0800a091
 8009fec:	0800a091 	.word	0x0800a091
 8009ff0:	0800a091 	.word	0x0800a091
 8009ff4:	0800a07b 	.word	0x0800a07b
 8009ff8:	0800a091 	.word	0x0800a091
 8009ffc:	0800a091 	.word	0x0800a091
 800a000:	0800a091 	.word	0x0800a091
 800a004:	0800a091 	.word	0x0800a091
 800a008:	0800a091 	.word	0x0800a091
 800a00c:	0800a091 	.word	0x0800a091
 800a010:	0800a091 	.word	0x0800a091
 800a014:	0800a099 	.word	0x0800a099
 800a018:	0800a091 	.word	0x0800a091
 800a01c:	0800a091 	.word	0x0800a091
 800a020:	0800a091 	.word	0x0800a091
 800a024:	0800a091 	.word	0x0800a091
 800a028:	0800a091 	.word	0x0800a091
 800a02c:	0800a091 	.word	0x0800a091
 800a030:	0800a091 	.word	0x0800a091
 800a034:	0800a099 	.word	0x0800a099
 800a038:	0800a091 	.word	0x0800a091
 800a03c:	0800a091 	.word	0x0800a091
 800a040:	0800a091 	.word	0x0800a091
 800a044:	0800a091 	.word	0x0800a091
 800a048:	0800a091 	.word	0x0800a091
 800a04c:	0800a091 	.word	0x0800a091
 800a050:	0800a091 	.word	0x0800a091
 800a054:	0800a099 	.word	0x0800a099
 800a058:	58024400 	.word	0x58024400
 800a05c:	58024800 	.word	0x58024800
 800a060:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a068:	3308      	adds	r3, #8
 800a06a:	2101      	movs	r1, #1
 800a06c:	4618      	mov	r0, r3
 800a06e:	f000 ffa7 	bl	800afc0 <RCCEx_PLL2_Config>
 800a072:	4603      	mov	r3, r0
 800a074:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a078:	e00f      	b.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a07e:	3328      	adds	r3, #40	; 0x28
 800a080:	2101      	movs	r1, #1
 800a082:	4618      	mov	r0, r3
 800a084:	f001 f84e 	bl	800b124 <RCCEx_PLL3_Config>
 800a088:	4603      	mov	r3, r0
 800a08a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a08e:	e004      	b.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a096:	e000      	b.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a09a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d10a      	bne.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a0a2:	4bbf      	ldr	r3, [pc, #764]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a0a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0a6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a0aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0b0:	4abb      	ldr	r2, [pc, #748]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a0b2:	430b      	orrs	r3, r1
 800a0b4:	6553      	str	r3, [r2, #84]	; 0x54
 800a0b6:	e003      	b.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a0bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c8:	f002 0302 	and.w	r3, r2, #2
 800a0cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	d041      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a0e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0e6:	2b05      	cmp	r3, #5
 800a0e8:	d824      	bhi.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a0ea:	a201      	add	r2, pc, #4	; (adr r2, 800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f0:	0800a13d 	.word	0x0800a13d
 800a0f4:	0800a109 	.word	0x0800a109
 800a0f8:	0800a11f 	.word	0x0800a11f
 800a0fc:	0800a13d 	.word	0x0800a13d
 800a100:	0800a13d 	.word	0x0800a13d
 800a104:	0800a13d 	.word	0x0800a13d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a10c:	3308      	adds	r3, #8
 800a10e:	2101      	movs	r1, #1
 800a110:	4618      	mov	r0, r3
 800a112:	f000 ff55 	bl	800afc0 <RCCEx_PLL2_Config>
 800a116:	4603      	mov	r3, r0
 800a118:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a11c:	e00f      	b.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a11e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a122:	3328      	adds	r3, #40	; 0x28
 800a124:	2101      	movs	r1, #1
 800a126:	4618      	mov	r0, r3
 800a128:	f000 fffc 	bl	800b124 <RCCEx_PLL3_Config>
 800a12c:	4603      	mov	r3, r0
 800a12e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a132:	e004      	b.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a13a:	e000      	b.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a13c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a13e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10a      	bne.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a146:	4b96      	ldr	r3, [pc, #600]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a14a:	f023 0107 	bic.w	r1, r3, #7
 800a14e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a154:	4a92      	ldr	r2, [pc, #584]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a156:	430b      	orrs	r3, r1
 800a158:	6553      	str	r3, [r2, #84]	; 0x54
 800a15a:	e003      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a15c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a160:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16c:	f002 0304 	and.w	r3, r2, #4
 800a170:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a174:	2300      	movs	r3, #0
 800a176:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a17a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a17e:	460b      	mov	r3, r1
 800a180:	4313      	orrs	r3, r2
 800a182:	d044      	beq.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a18c:	2b05      	cmp	r3, #5
 800a18e:	d825      	bhi.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a190:	a201      	add	r2, pc, #4	; (adr r2, 800a198 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a196:	bf00      	nop
 800a198:	0800a1e5 	.word	0x0800a1e5
 800a19c:	0800a1b1 	.word	0x0800a1b1
 800a1a0:	0800a1c7 	.word	0x0800a1c7
 800a1a4:	0800a1e5 	.word	0x0800a1e5
 800a1a8:	0800a1e5 	.word	0x0800a1e5
 800a1ac:	0800a1e5 	.word	0x0800a1e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1b4:	3308      	adds	r3, #8
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f000 ff01 	bl	800afc0 <RCCEx_PLL2_Config>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a1c4:	e00f      	b.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ca:	3328      	adds	r3, #40	; 0x28
 800a1cc:	2101      	movs	r1, #1
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 ffa8 	bl	800b124 <RCCEx_PLL3_Config>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a1da:	e004      	b.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a1e2:	e000      	b.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a1e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d10b      	bne.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a1ee:	4b6c      	ldr	r3, [pc, #432]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a1f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1f2:	f023 0107 	bic.w	r1, r3, #7
 800a1f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1fe:	4a68      	ldr	r2, [pc, #416]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a200:	430b      	orrs	r3, r1
 800a202:	6593      	str	r3, [r2, #88]	; 0x58
 800a204:	e003      	b.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a206:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a20a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a20e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a216:	f002 0320 	and.w	r3, r2, #32
 800a21a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a21e:	2300      	movs	r3, #0
 800a220:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a224:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a228:	460b      	mov	r3, r1
 800a22a:	4313      	orrs	r3, r2
 800a22c:	d055      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a23a:	d033      	beq.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a23c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a240:	d82c      	bhi.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a246:	d02f      	beq.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a24c:	d826      	bhi.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a24e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a252:	d02b      	beq.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a254:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a258:	d820      	bhi.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a25a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a25e:	d012      	beq.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a264:	d81a      	bhi.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a266:	2b00      	cmp	r3, #0
 800a268:	d022      	beq.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a26a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a26e:	d115      	bne.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a274:	3308      	adds	r3, #8
 800a276:	2100      	movs	r1, #0
 800a278:	4618      	mov	r0, r3
 800a27a:	f000 fea1 	bl	800afc0 <RCCEx_PLL2_Config>
 800a27e:	4603      	mov	r3, r0
 800a280:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a284:	e015      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a28a:	3328      	adds	r3, #40	; 0x28
 800a28c:	2102      	movs	r1, #2
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 ff48 	bl	800b124 <RCCEx_PLL3_Config>
 800a294:	4603      	mov	r3, r0
 800a296:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a29a:	e00a      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a2a2:	e006      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a2a4:	bf00      	nop
 800a2a6:	e004      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a2a8:	bf00      	nop
 800a2aa:	e002      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a2ac:	bf00      	nop
 800a2ae:	e000      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a2b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d10b      	bne.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a2ba:	4b39      	ldr	r3, [pc, #228]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a2bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2be:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a2c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2ca:	4a35      	ldr	r2, [pc, #212]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a2cc:	430b      	orrs	r3, r1
 800a2ce:	6553      	str	r3, [r2, #84]	; 0x54
 800a2d0:	e003      	b.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a2da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a2e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a2f0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	d058      	beq.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a2fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a302:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a306:	d033      	beq.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a308:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a30c:	d82c      	bhi.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a30e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a312:	d02f      	beq.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a318:	d826      	bhi.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a31a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a31e:	d02b      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a320:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a324:	d820      	bhi.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a32a:	d012      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a32c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a330:	d81a      	bhi.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a332:	2b00      	cmp	r3, #0
 800a334:	d022      	beq.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a33a:	d115      	bne.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a33c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a340:	3308      	adds	r3, #8
 800a342:	2100      	movs	r1, #0
 800a344:	4618      	mov	r0, r3
 800a346:	f000 fe3b 	bl	800afc0 <RCCEx_PLL2_Config>
 800a34a:	4603      	mov	r3, r0
 800a34c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a350:	e015      	b.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a356:	3328      	adds	r3, #40	; 0x28
 800a358:	2102      	movs	r1, #2
 800a35a:	4618      	mov	r0, r3
 800a35c:	f000 fee2 	bl	800b124 <RCCEx_PLL3_Config>
 800a360:	4603      	mov	r3, r0
 800a362:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a366:	e00a      	b.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a36e:	e006      	b.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a370:	bf00      	nop
 800a372:	e004      	b.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a374:	bf00      	nop
 800a376:	e002      	b.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a378:	bf00      	nop
 800a37a:	e000      	b.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a37c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a37e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10e      	bne.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a386:	4b06      	ldr	r3, [pc, #24]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a38a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a392:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a396:	4a02      	ldr	r2, [pc, #8]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a398:	430b      	orrs	r3, r1
 800a39a:	6593      	str	r3, [r2, #88]	; 0x58
 800a39c:	e006      	b.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a39e:	bf00      	nop
 800a3a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a3a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a3b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a3bc:	2300      	movs	r3, #0
 800a3be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a3c2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	d055      	beq.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a3d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a3d8:	d033      	beq.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a3da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a3de:	d82c      	bhi.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a3e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3e4:	d02f      	beq.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a3e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3ea:	d826      	bhi.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a3ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a3f0:	d02b      	beq.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a3f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a3f6:	d820      	bhi.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a3f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3fc:	d012      	beq.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a3fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a402:	d81a      	bhi.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a404:	2b00      	cmp	r3, #0
 800a406:	d022      	beq.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a40c:	d115      	bne.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a40e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a412:	3308      	adds	r3, #8
 800a414:	2100      	movs	r1, #0
 800a416:	4618      	mov	r0, r3
 800a418:	f000 fdd2 	bl	800afc0 <RCCEx_PLL2_Config>
 800a41c:	4603      	mov	r3, r0
 800a41e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a422:	e015      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a428:	3328      	adds	r3, #40	; 0x28
 800a42a:	2102      	movs	r1, #2
 800a42c:	4618      	mov	r0, r3
 800a42e:	f000 fe79 	bl	800b124 <RCCEx_PLL3_Config>
 800a432:	4603      	mov	r3, r0
 800a434:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a438:	e00a      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a440:	e006      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a442:	bf00      	nop
 800a444:	e004      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a446:	bf00      	nop
 800a448:	e002      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a44a:	bf00      	nop
 800a44c:	e000      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a44e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a450:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10b      	bne.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a458:	4ba0      	ldr	r3, [pc, #640]	; (800a6dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a45a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a45c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a464:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a468:	4a9c      	ldr	r2, [pc, #624]	; (800a6dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a46a:	430b      	orrs	r3, r1
 800a46c:	6593      	str	r3, [r2, #88]	; 0x58
 800a46e:	e003      	b.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a470:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a474:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a480:	f002 0308 	and.w	r3, r2, #8
 800a484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a488:	2300      	movs	r3, #0
 800a48a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a48e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a492:	460b      	mov	r3, r1
 800a494:	4313      	orrs	r3, r2
 800a496:	d01e      	beq.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a49c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4a4:	d10c      	bne.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a4a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4aa:	3328      	adds	r3, #40	; 0x28
 800a4ac:	2102      	movs	r1, #2
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f000 fe38 	bl	800b124 <RCCEx_PLL3_Config>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d002      	beq.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a4c0:	4b86      	ldr	r3, [pc, #536]	; (800a6dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a4c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4d0:	4a82      	ldr	r2, [pc, #520]	; (800a6dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4d2:	430b      	orrs	r3, r1
 800a4d4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a4d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4de:	f002 0310 	and.w	r3, r2, #16
 800a4e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a4ec:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	d01e      	beq.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a502:	d10c      	bne.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a508:	3328      	adds	r3, #40	; 0x28
 800a50a:	2102      	movs	r1, #2
 800a50c:	4618      	mov	r0, r3
 800a50e:	f000 fe09 	bl	800b124 <RCCEx_PLL3_Config>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d002      	beq.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a51e:	4b6f      	ldr	r3, [pc, #444]	; (800a6dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a522:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a52a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a52e:	4a6b      	ldr	r2, [pc, #428]	; (800a6dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a530:	430b      	orrs	r3, r1
 800a532:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a540:	67bb      	str	r3, [r7, #120]	; 0x78
 800a542:	2300      	movs	r3, #0
 800a544:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a546:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a54a:	460b      	mov	r3, r1
 800a54c:	4313      	orrs	r3, r2
 800a54e:	d03e      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a554:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a558:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a55c:	d022      	beq.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a55e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a562:	d81b      	bhi.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a564:	2b00      	cmp	r3, #0
 800a566:	d003      	beq.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a56c:	d00b      	beq.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a56e:	e015      	b.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a574:	3308      	adds	r3, #8
 800a576:	2100      	movs	r1, #0
 800a578:	4618      	mov	r0, r3
 800a57a:	f000 fd21 	bl	800afc0 <RCCEx_PLL2_Config>
 800a57e:	4603      	mov	r3, r0
 800a580:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a584:	e00f      	b.n	800a5a6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a58a:	3328      	adds	r3, #40	; 0x28
 800a58c:	2102      	movs	r1, #2
 800a58e:	4618      	mov	r0, r3
 800a590:	f000 fdc8 	bl	800b124 <RCCEx_PLL3_Config>
 800a594:	4603      	mov	r3, r0
 800a596:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a59a:	e004      	b.n	800a5a6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a5a2:	e000      	b.n	800a5a6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a5a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d10b      	bne.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a5ae:	4b4b      	ldr	r3, [pc, #300]	; (800a6dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5b2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a5be:	4a47      	ldr	r2, [pc, #284]	; (800a6dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5c0:	430b      	orrs	r3, r1
 800a5c2:	6593      	str	r3, [r2, #88]	; 0x58
 800a5c4:	e003      	b.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a5ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a5ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a5da:	673b      	str	r3, [r7, #112]	; 0x70
 800a5dc:	2300      	movs	r3, #0
 800a5de:	677b      	str	r3, [r7, #116]	; 0x74
 800a5e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	d03b      	beq.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a5f6:	d01f      	beq.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a5f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a5fc:	d818      	bhi.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a5fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a602:	d003      	beq.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a608:	d007      	beq.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a60a:	e011      	b.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a60c:	4b33      	ldr	r3, [pc, #204]	; (800a6dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a610:	4a32      	ldr	r2, [pc, #200]	; (800a6dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a616:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a618:	e00f      	b.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a61e:	3328      	adds	r3, #40	; 0x28
 800a620:	2101      	movs	r1, #1
 800a622:	4618      	mov	r0, r3
 800a624:	f000 fd7e 	bl	800b124 <RCCEx_PLL3_Config>
 800a628:	4603      	mov	r3, r0
 800a62a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a62e:	e004      	b.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a636:	e000      	b.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a63a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d10b      	bne.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a642:	4b26      	ldr	r3, [pc, #152]	; (800a6dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a646:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a64a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a64e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a652:	4a22      	ldr	r2, [pc, #136]	; (800a6dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a654:	430b      	orrs	r3, r1
 800a656:	6553      	str	r3, [r2, #84]	; 0x54
 800a658:	e003      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a65a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a65e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a66e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a670:	2300      	movs	r3, #0
 800a672:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a674:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a678:	460b      	mov	r3, r1
 800a67a:	4313      	orrs	r3, r2
 800a67c:	d034      	beq.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a67e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a684:	2b00      	cmp	r3, #0
 800a686:	d003      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a68c:	d007      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a68e:	e011      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a690:	4b12      	ldr	r3, [pc, #72]	; (800a6dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a694:	4a11      	ldr	r2, [pc, #68]	; (800a6dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a69a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a69c:	e00e      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6a2:	3308      	adds	r3, #8
 800a6a4:	2102      	movs	r1, #2
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f000 fc8a 	bl	800afc0 <RCCEx_PLL2_Config>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a6b2:	e003      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a6ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10d      	bne.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a6c4:	4b05      	ldr	r3, [pc, #20]	; (800a6dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a6cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6d2:	4a02      	ldr	r2, [pc, #8]	; (800a6dc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6d4:	430b      	orrs	r3, r1
 800a6d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a6d8:	e006      	b.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a6da:	bf00      	nop
 800a6dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a6f4:	663b      	str	r3, [r7, #96]	; 0x60
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	667b      	str	r3, [r7, #100]	; 0x64
 800a6fa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a6fe:	460b      	mov	r3, r1
 800a700:	4313      	orrs	r3, r2
 800a702:	d00c      	beq.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a708:	3328      	adds	r3, #40	; 0x28
 800a70a:	2102      	movs	r1, #2
 800a70c:	4618      	mov	r0, r3
 800a70e:	f000 fd09 	bl	800b124 <RCCEx_PLL3_Config>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a726:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a72a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a72c:	2300      	movs	r3, #0
 800a72e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a730:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a734:	460b      	mov	r3, r1
 800a736:	4313      	orrs	r3, r2
 800a738:	d036      	beq.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a73a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a73e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a740:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a744:	d018      	beq.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a746:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a74a:	d811      	bhi.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a74c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a750:	d014      	beq.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a756:	d80b      	bhi.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d011      	beq.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a75c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a760:	d106      	bne.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a762:	4bb7      	ldr	r3, [pc, #732]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a766:	4ab6      	ldr	r2, [pc, #728]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a76c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a76e:	e008      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a776:	e004      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a778:	bf00      	nop
 800a77a:	e002      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a77c:	bf00      	nop
 800a77e:	e000      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a780:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a782:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10a      	bne.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a78a:	4bad      	ldr	r3, [pc, #692]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a78e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a798:	4aa9      	ldr	r2, [pc, #676]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a79a:	430b      	orrs	r3, r1
 800a79c:	6553      	str	r3, [r2, #84]	; 0x54
 800a79e:	e003      	b.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a7b4:	653b      	str	r3, [r7, #80]	; 0x50
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	657b      	str	r3, [r7, #84]	; 0x54
 800a7ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a7be:	460b      	mov	r3, r1
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	d009      	beq.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a7c4:	4b9e      	ldr	r3, [pc, #632]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a7c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7d2:	4a9b      	ldr	r2, [pc, #620]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a7d4:	430b      	orrs	r3, r1
 800a7d6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a7e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7ea:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	d009      	beq.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a7f4:	4b92      	ldr	r3, [pc, #584]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a7f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7f8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a7fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a800:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a802:	4a8f      	ldr	r2, [pc, #572]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a804:	430b      	orrs	r3, r1
 800a806:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a810:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a814:	643b      	str	r3, [r7, #64]	; 0x40
 800a816:	2300      	movs	r3, #0
 800a818:	647b      	str	r3, [r7, #68]	; 0x44
 800a81a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a81e:	460b      	mov	r3, r1
 800a820:	4313      	orrs	r3, r2
 800a822:	d00e      	beq.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a824:	4b86      	ldr	r3, [pc, #536]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	4a85      	ldr	r2, [pc, #532]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a82a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a82e:	6113      	str	r3, [r2, #16]
 800a830:	4b83      	ldr	r3, [pc, #524]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a832:	6919      	ldr	r1, [r3, #16]
 800a834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a838:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a83c:	4a80      	ldr	r2, [pc, #512]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a83e:	430b      	orrs	r3, r1
 800a840:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a84e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a850:	2300      	movs	r3, #0
 800a852:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a854:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a858:	460b      	mov	r3, r1
 800a85a:	4313      	orrs	r3, r2
 800a85c:	d009      	beq.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a85e:	4b78      	ldr	r3, [pc, #480]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a862:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a86a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a86c:	4a74      	ldr	r2, [pc, #464]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a86e:	430b      	orrs	r3, r1
 800a870:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a87e:	633b      	str	r3, [r7, #48]	; 0x30
 800a880:	2300      	movs	r3, #0
 800a882:	637b      	str	r3, [r7, #52]	; 0x34
 800a884:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a888:	460b      	mov	r3, r1
 800a88a:	4313      	orrs	r3, r2
 800a88c:	d00a      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a88e:	4b6c      	ldr	r3, [pc, #432]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a892:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a89a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a89e:	4a68      	ldr	r2, [pc, #416]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8a0:	430b      	orrs	r3, r1
 800a8a2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	62b9      	str	r1, [r7, #40]	; 0x28
 800a8b0:	f003 0301 	and.w	r3, r3, #1
 800a8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8b6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	d011      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c4:	3308      	adds	r3, #8
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f000 fb79 	bl	800afc0 <RCCEx_PLL2_Config>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a8d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d003      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	6239      	str	r1, [r7, #32]
 800a8f0:	f003 0302 	and.w	r3, r3, #2
 800a8f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a8f6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	d011      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a904:	3308      	adds	r3, #8
 800a906:	2101      	movs	r1, #1
 800a908:	4618      	mov	r0, r3
 800a90a:	f000 fb59 	bl	800afc0 <RCCEx_PLL2_Config>
 800a90e:	4603      	mov	r3, r0
 800a910:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a914:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d003      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a91c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a920:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92c:	2100      	movs	r1, #0
 800a92e:	61b9      	str	r1, [r7, #24]
 800a930:	f003 0304 	and.w	r3, r3, #4
 800a934:	61fb      	str	r3, [r7, #28]
 800a936:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a93a:	460b      	mov	r3, r1
 800a93c:	4313      	orrs	r3, r2
 800a93e:	d011      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a944:	3308      	adds	r3, #8
 800a946:	2102      	movs	r1, #2
 800a948:	4618      	mov	r0, r3
 800a94a:	f000 fb39 	bl	800afc0 <RCCEx_PLL2_Config>
 800a94e:	4603      	mov	r3, r0
 800a950:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a954:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d003      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a95c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a960:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	2100      	movs	r1, #0
 800a96e:	6139      	str	r1, [r7, #16]
 800a970:	f003 0308 	and.w	r3, r3, #8
 800a974:	617b      	str	r3, [r7, #20]
 800a976:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a97a:	460b      	mov	r3, r1
 800a97c:	4313      	orrs	r3, r2
 800a97e:	d011      	beq.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a984:	3328      	adds	r3, #40	; 0x28
 800a986:	2100      	movs	r1, #0
 800a988:	4618      	mov	r0, r3
 800a98a:	f000 fbcb 	bl	800b124 <RCCEx_PLL3_Config>
 800a98e:	4603      	mov	r3, r0
 800a990:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800a994:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d003      	beq.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a99c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	60b9      	str	r1, [r7, #8]
 800a9b0:	f003 0310 	and.w	r3, r3, #16
 800a9b4:	60fb      	str	r3, [r7, #12]
 800a9b6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	d011      	beq.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c4:	3328      	adds	r3, #40	; 0x28
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 fbab 	bl	800b124 <RCCEx_PLL3_Config>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a9d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d003      	beq.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	6039      	str	r1, [r7, #0]
 800a9f0:	f003 0320 	and.w	r3, r3, #32
 800a9f4:	607b      	str	r3, [r7, #4]
 800a9f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	d011      	beq.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa04:	3328      	adds	r3, #40	; 0x28
 800aa06:	2102      	movs	r1, #2
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f000 fb8b 	bl	800b124 <RCCEx_PLL3_Config>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800aa14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d003      	beq.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800aa24:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d101      	bne.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	e000      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa3e:	bf00      	nop
 800aa40:	58024400 	.word	0x58024400

0800aa44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aa48:	f7fe fe00 	bl	800964c <HAL_RCC_GetHCLKFreq>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	4b06      	ldr	r3, [pc, #24]	; (800aa68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aa50:	6a1b      	ldr	r3, [r3, #32]
 800aa52:	091b      	lsrs	r3, r3, #4
 800aa54:	f003 0307 	and.w	r3, r3, #7
 800aa58:	4904      	ldr	r1, [pc, #16]	; (800aa6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aa5a:	5ccb      	ldrb	r3, [r1, r3]
 800aa5c:	f003 031f 	and.w	r3, r3, #31
 800aa60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	58024400 	.word	0x58024400
 800aa6c:	0800f4a8 	.word	0x0800f4a8

0800aa70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b089      	sub	sp, #36	; 0x24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa78:	4ba1      	ldr	r3, [pc, #644]	; (800ad00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa7c:	f003 0303 	and.w	r3, r3, #3
 800aa80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800aa82:	4b9f      	ldr	r3, [pc, #636]	; (800ad00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa86:	0b1b      	lsrs	r3, r3, #12
 800aa88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa8c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aa8e:	4b9c      	ldr	r3, [pc, #624]	; (800ad00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa92:	091b      	lsrs	r3, r3, #4
 800aa94:	f003 0301 	and.w	r3, r3, #1
 800aa98:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800aa9a:	4b99      	ldr	r3, [pc, #612]	; (800ad00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa9e:	08db      	lsrs	r3, r3, #3
 800aaa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	fb02 f303 	mul.w	r3, r2, r3
 800aaaa:	ee07 3a90 	vmov	s15, r3
 800aaae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f000 8111 	beq.w	800ace0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	f000 8083 	beq.w	800abcc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	f200 80a1 	bhi.w	800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d003      	beq.n	800aadc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d056      	beq.n	800ab88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aada:	e099      	b.n	800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aadc:	4b88      	ldr	r3, [pc, #544]	; (800ad00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f003 0320 	and.w	r3, r3, #32
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d02d      	beq.n	800ab44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aae8:	4b85      	ldr	r3, [pc, #532]	; (800ad00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	08db      	lsrs	r3, r3, #3
 800aaee:	f003 0303 	and.w	r3, r3, #3
 800aaf2:	4a84      	ldr	r2, [pc, #528]	; (800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aaf4:	fa22 f303 	lsr.w	r3, r2, r3
 800aaf8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	ee07 3a90 	vmov	s15, r3
 800ab00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	ee07 3a90 	vmov	s15, r3
 800ab0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab12:	4b7b      	ldr	r3, [pc, #492]	; (800ad00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab1a:	ee07 3a90 	vmov	s15, r3
 800ab1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab22:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab26:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ad08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ab42:	e087      	b.n	800ac54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	ee07 3a90 	vmov	s15, r3
 800ab4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ad0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ab52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab56:	4b6a      	ldr	r3, [pc, #424]	; (800ad00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab5e:	ee07 3a90 	vmov	s15, r3
 800ab62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab66:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ad08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab86:	e065      	b.n	800ac54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	ee07 3a90 	vmov	s15, r3
 800ab8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ad10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab9a:	4b59      	ldr	r3, [pc, #356]	; (800ad00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aba2:	ee07 3a90 	vmov	s15, r3
 800aba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800abae:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ad08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abca:	e043      	b.n	800ac54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	ee07 3a90 	vmov	s15, r3
 800abd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ad14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800abda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abde:	4b48      	ldr	r3, [pc, #288]	; (800ad00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abe6:	ee07 3a90 	vmov	s15, r3
 800abea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abee:	ed97 6a03 	vldr	s12, [r7, #12]
 800abf2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ad08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac0e:	e021      	b.n	800ac54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	ee07 3a90 	vmov	s15, r3
 800ac16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ad10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac22:	4b37      	ldr	r3, [pc, #220]	; (800ad00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac2a:	ee07 3a90 	vmov	s15, r3
 800ac2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac32:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac36:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ad08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ac54:	4b2a      	ldr	r3, [pc, #168]	; (800ad00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac58:	0a5b      	lsrs	r3, r3, #9
 800ac5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac5e:	ee07 3a90 	vmov	s15, r3
 800ac62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac7a:	ee17 2a90 	vmov	r2, s15
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ac82:	4b1f      	ldr	r3, [pc, #124]	; (800ad00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac86:	0c1b      	lsrs	r3, r3, #16
 800ac88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac8c:	ee07 3a90 	vmov	s15, r3
 800ac90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800aca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aca8:	ee17 2a90 	vmov	r2, s15
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800acb0:	4b13      	ldr	r3, [pc, #76]	; (800ad00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb4:	0e1b      	lsrs	r3, r3, #24
 800acb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acba:	ee07 3a90 	vmov	s15, r3
 800acbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800acc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acca:	edd7 6a07 	vldr	s13, [r7, #28]
 800acce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acd6:	ee17 2a90 	vmov	r2, s15
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800acde:	e008      	b.n	800acf2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	609a      	str	r2, [r3, #8]
}
 800acf2:	bf00      	nop
 800acf4:	3724      	adds	r7, #36	; 0x24
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	58024400 	.word	0x58024400
 800ad04:	03d09000 	.word	0x03d09000
 800ad08:	46000000 	.word	0x46000000
 800ad0c:	4c742400 	.word	0x4c742400
 800ad10:	4a742400 	.word	0x4a742400
 800ad14:	4af42400 	.word	0x4af42400

0800ad18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b089      	sub	sp, #36	; 0x24
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad20:	4ba1      	ldr	r3, [pc, #644]	; (800afa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad24:	f003 0303 	and.w	r3, r3, #3
 800ad28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ad2a:	4b9f      	ldr	r3, [pc, #636]	; (800afa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad2e:	0d1b      	lsrs	r3, r3, #20
 800ad30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ad36:	4b9c      	ldr	r3, [pc, #624]	; (800afa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad3a:	0a1b      	lsrs	r3, r3, #8
 800ad3c:	f003 0301 	and.w	r3, r3, #1
 800ad40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ad42:	4b99      	ldr	r3, [pc, #612]	; (800afa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad46:	08db      	lsrs	r3, r3, #3
 800ad48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad4c:	693a      	ldr	r2, [r7, #16]
 800ad4e:	fb02 f303 	mul.w	r3, r2, r3
 800ad52:	ee07 3a90 	vmov	s15, r3
 800ad56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f000 8111 	beq.w	800af88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	f000 8083 	beq.w	800ae74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	2b02      	cmp	r3, #2
 800ad72:	f200 80a1 	bhi.w	800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d003      	beq.n	800ad84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d056      	beq.n	800ae30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ad82:	e099      	b.n	800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad84:	4b88      	ldr	r3, [pc, #544]	; (800afa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 0320 	and.w	r3, r3, #32
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d02d      	beq.n	800adec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad90:	4b85      	ldr	r3, [pc, #532]	; (800afa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	08db      	lsrs	r3, r3, #3
 800ad96:	f003 0303 	and.w	r3, r3, #3
 800ad9a:	4a84      	ldr	r2, [pc, #528]	; (800afac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ad9c:	fa22 f303 	lsr.w	r3, r2, r3
 800ada0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	ee07 3a90 	vmov	s15, r3
 800ada8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	ee07 3a90 	vmov	s15, r3
 800adb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adba:	4b7b      	ldr	r3, [pc, #492]	; (800afa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adc2:	ee07 3a90 	vmov	s15, r3
 800adc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adca:	ed97 6a03 	vldr	s12, [r7, #12]
 800adce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800afb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800add2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800add6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ade2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ade6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800adea:	e087      	b.n	800aefc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	ee07 3a90 	vmov	s15, r3
 800adf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adf6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800afb4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800adfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adfe:	4b6a      	ldr	r3, [pc, #424]	; (800afa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae06:	ee07 3a90 	vmov	s15, r3
 800ae0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae12:	eddf 5a67 	vldr	s11, [pc, #412]	; 800afb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae2e:	e065      	b.n	800aefc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	ee07 3a90 	vmov	s15, r3
 800ae36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800afb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae42:	4b59      	ldr	r3, [pc, #356]	; (800afa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae4a:	ee07 3a90 	vmov	s15, r3
 800ae4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae56:	eddf 5a56 	vldr	s11, [pc, #344]	; 800afb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae72:	e043      	b.n	800aefc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	ee07 3a90 	vmov	s15, r3
 800ae7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800afbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ae82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae86:	4b48      	ldr	r3, [pc, #288]	; (800afa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae8e:	ee07 3a90 	vmov	s15, r3
 800ae92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800afb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aeb6:	e021      	b.n	800aefc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	ee07 3a90 	vmov	s15, r3
 800aebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aec2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800afb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeca:	4b37      	ldr	r3, [pc, #220]	; (800afa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aed2:	ee07 3a90 	vmov	s15, r3
 800aed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeda:	ed97 6a03 	vldr	s12, [r7, #12]
 800aede:	eddf 5a34 	vldr	s11, [pc, #208]	; 800afb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aefa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800aefc:	4b2a      	ldr	r3, [pc, #168]	; (800afa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aefe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af00:	0a5b      	lsrs	r3, r3, #9
 800af02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af06:	ee07 3a90 	vmov	s15, r3
 800af0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af16:	edd7 6a07 	vldr	s13, [r7, #28]
 800af1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af22:	ee17 2a90 	vmov	r2, s15
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800af2a:	4b1f      	ldr	r3, [pc, #124]	; (800afa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2e:	0c1b      	lsrs	r3, r3, #16
 800af30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af34:	ee07 3a90 	vmov	s15, r3
 800af38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af44:	edd7 6a07 	vldr	s13, [r7, #28]
 800af48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af50:	ee17 2a90 	vmov	r2, s15
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800af58:	4b13      	ldr	r3, [pc, #76]	; (800afa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af5c:	0e1b      	lsrs	r3, r3, #24
 800af5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af62:	ee07 3a90 	vmov	s15, r3
 800af66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af72:	edd7 6a07 	vldr	s13, [r7, #28]
 800af76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af7e:	ee17 2a90 	vmov	r2, s15
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800af86:	e008      	b.n	800af9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	609a      	str	r2, [r3, #8]
}
 800af9a:	bf00      	nop
 800af9c:	3724      	adds	r7, #36	; 0x24
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	58024400 	.word	0x58024400
 800afac:	03d09000 	.word	0x03d09000
 800afb0:	46000000 	.word	0x46000000
 800afb4:	4c742400 	.word	0x4c742400
 800afb8:	4a742400 	.word	0x4a742400
 800afbc:	4af42400 	.word	0x4af42400

0800afc0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800afca:	2300      	movs	r3, #0
 800afcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800afce:	4b53      	ldr	r3, [pc, #332]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800afd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd2:	f003 0303 	and.w	r3, r3, #3
 800afd6:	2b03      	cmp	r3, #3
 800afd8:	d101      	bne.n	800afde <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	e099      	b.n	800b112 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800afde:	4b4f      	ldr	r3, [pc, #316]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4a4e      	ldr	r2, [pc, #312]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800afe4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800afe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afea:	f7f9 ffe9 	bl	8004fc0 <HAL_GetTick>
 800afee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aff0:	e008      	b.n	800b004 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aff2:	f7f9 ffe5 	bl	8004fc0 <HAL_GetTick>
 800aff6:	4602      	mov	r2, r0
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	2b02      	cmp	r3, #2
 800affe:	d901      	bls.n	800b004 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b000:	2303      	movs	r3, #3
 800b002:	e086      	b.n	800b112 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b004:	4b45      	ldr	r3, [pc, #276]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1f0      	bne.n	800aff2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b010:	4b42      	ldr	r3, [pc, #264]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b014:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	031b      	lsls	r3, r3, #12
 800b01e:	493f      	ldr	r1, [pc, #252]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b020:	4313      	orrs	r3, r2
 800b022:	628b      	str	r3, [r1, #40]	; 0x28
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	3b01      	subs	r3, #1
 800b02a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	3b01      	subs	r3, #1
 800b034:	025b      	lsls	r3, r3, #9
 800b036:	b29b      	uxth	r3, r3
 800b038:	431a      	orrs	r2, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	3b01      	subs	r3, #1
 800b040:	041b      	lsls	r3, r3, #16
 800b042:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b046:	431a      	orrs	r2, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	3b01      	subs	r3, #1
 800b04e:	061b      	lsls	r3, r3, #24
 800b050:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b054:	4931      	ldr	r1, [pc, #196]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b056:	4313      	orrs	r3, r2
 800b058:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b05a:	4b30      	ldr	r3, [pc, #192]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	695b      	ldr	r3, [r3, #20]
 800b066:	492d      	ldr	r1, [pc, #180]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b068:	4313      	orrs	r3, r2
 800b06a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b06c:	4b2b      	ldr	r3, [pc, #172]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b070:	f023 0220 	bic.w	r2, r3, #32
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	4928      	ldr	r1, [pc, #160]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b07a:	4313      	orrs	r3, r2
 800b07c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b07e:	4b27      	ldr	r3, [pc, #156]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b082:	4a26      	ldr	r2, [pc, #152]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b084:	f023 0310 	bic.w	r3, r3, #16
 800b088:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b08a:	4b24      	ldr	r3, [pc, #144]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b08c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b08e:	4b24      	ldr	r3, [pc, #144]	; (800b120 <RCCEx_PLL2_Config+0x160>)
 800b090:	4013      	ands	r3, r2
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	69d2      	ldr	r2, [r2, #28]
 800b096:	00d2      	lsls	r2, r2, #3
 800b098:	4920      	ldr	r1, [pc, #128]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b09a:	4313      	orrs	r3, r2
 800b09c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b09e:	4b1f      	ldr	r3, [pc, #124]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a2:	4a1e      	ldr	r2, [pc, #120]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b0a4:	f043 0310 	orr.w	r3, r3, #16
 800b0a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d106      	bne.n	800b0be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b0b0:	4b1a      	ldr	r3, [pc, #104]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b4:	4a19      	ldr	r2, [pc, #100]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b0b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0bc:	e00f      	b.n	800b0de <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d106      	bne.n	800b0d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b0c4:	4b15      	ldr	r3, [pc, #84]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c8:	4a14      	ldr	r2, [pc, #80]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b0ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0d0:	e005      	b.n	800b0de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b0d2:	4b12      	ldr	r3, [pc, #72]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d6:	4a11      	ldr	r2, [pc, #68]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b0d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b0dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b0de:	4b0f      	ldr	r3, [pc, #60]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a0e      	ldr	r2, [pc, #56]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b0e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b0e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0ea:	f7f9 ff69 	bl	8004fc0 <HAL_GetTick>
 800b0ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b0f0:	e008      	b.n	800b104 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b0f2:	f7f9 ff65 	bl	8004fc0 <HAL_GetTick>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d901      	bls.n	800b104 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b100:	2303      	movs	r3, #3
 800b102:	e006      	b.n	800b112 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b104:	4b05      	ldr	r3, [pc, #20]	; (800b11c <RCCEx_PLL2_Config+0x15c>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d0f0      	beq.n	800b0f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b110:	7bfb      	ldrb	r3, [r7, #15]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	58024400 	.word	0x58024400
 800b120:	ffff0007 	.word	0xffff0007

0800b124 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b132:	4b53      	ldr	r3, [pc, #332]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b136:	f003 0303 	and.w	r3, r3, #3
 800b13a:	2b03      	cmp	r3, #3
 800b13c:	d101      	bne.n	800b142 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	e099      	b.n	800b276 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b142:	4b4f      	ldr	r3, [pc, #316]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a4e      	ldr	r2, [pc, #312]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b14c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b14e:	f7f9 ff37 	bl	8004fc0 <HAL_GetTick>
 800b152:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b154:	e008      	b.n	800b168 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b156:	f7f9 ff33 	bl	8004fc0 <HAL_GetTick>
 800b15a:	4602      	mov	r2, r0
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	1ad3      	subs	r3, r2, r3
 800b160:	2b02      	cmp	r3, #2
 800b162:	d901      	bls.n	800b168 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b164:	2303      	movs	r3, #3
 800b166:	e086      	b.n	800b276 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b168:	4b45      	ldr	r3, [pc, #276]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1f0      	bne.n	800b156 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b174:	4b42      	ldr	r3, [pc, #264]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b178:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	051b      	lsls	r3, r3, #20
 800b182:	493f      	ldr	r1, [pc, #252]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b184:	4313      	orrs	r3, r2
 800b186:	628b      	str	r3, [r1, #40]	; 0x28
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	3b01      	subs	r3, #1
 800b18e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	3b01      	subs	r3, #1
 800b198:	025b      	lsls	r3, r3, #9
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	431a      	orrs	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	041b      	lsls	r3, r3, #16
 800b1a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b1aa:	431a      	orrs	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	691b      	ldr	r3, [r3, #16]
 800b1b0:	3b01      	subs	r3, #1
 800b1b2:	061b      	lsls	r3, r3, #24
 800b1b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b1b8:	4931      	ldr	r1, [pc, #196]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b1be:	4b30      	ldr	r3, [pc, #192]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	695b      	ldr	r3, [r3, #20]
 800b1ca:	492d      	ldr	r1, [pc, #180]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b1d0:	4b2b      	ldr	r3, [pc, #172]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	699b      	ldr	r3, [r3, #24]
 800b1dc:	4928      	ldr	r1, [pc, #160]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b1e2:	4b27      	ldr	r3, [pc, #156]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e6:	4a26      	ldr	r2, [pc, #152]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b1e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b1ee:	4b24      	ldr	r3, [pc, #144]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b1f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1f2:	4b24      	ldr	r3, [pc, #144]	; (800b284 <RCCEx_PLL3_Config+0x160>)
 800b1f4:	4013      	ands	r3, r2
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	69d2      	ldr	r2, [r2, #28]
 800b1fa:	00d2      	lsls	r2, r2, #3
 800b1fc:	4920      	ldr	r1, [pc, #128]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b1fe:	4313      	orrs	r3, r2
 800b200:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b202:	4b1f      	ldr	r3, [pc, #124]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b206:	4a1e      	ldr	r2, [pc, #120]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b20c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d106      	bne.n	800b222 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b214:	4b1a      	ldr	r3, [pc, #104]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b218:	4a19      	ldr	r2, [pc, #100]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b21a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b21e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b220:	e00f      	b.n	800b242 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	2b01      	cmp	r3, #1
 800b226:	d106      	bne.n	800b236 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b228:	4b15      	ldr	r3, [pc, #84]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22c:	4a14      	ldr	r2, [pc, #80]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b22e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b232:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b234:	e005      	b.n	800b242 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b236:	4b12      	ldr	r3, [pc, #72]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23a:	4a11      	ldr	r2, [pc, #68]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b23c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b240:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b242:	4b0f      	ldr	r3, [pc, #60]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a0e      	ldr	r2, [pc, #56]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b24c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b24e:	f7f9 feb7 	bl	8004fc0 <HAL_GetTick>
 800b252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b254:	e008      	b.n	800b268 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b256:	f7f9 feb3 	bl	8004fc0 <HAL_GetTick>
 800b25a:	4602      	mov	r2, r0
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	1ad3      	subs	r3, r2, r3
 800b260:	2b02      	cmp	r3, #2
 800b262:	d901      	bls.n	800b268 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b264:	2303      	movs	r3, #3
 800b266:	e006      	b.n	800b276 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b268:	4b05      	ldr	r3, [pc, #20]	; (800b280 <RCCEx_PLL3_Config+0x15c>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b270:	2b00      	cmp	r3, #0
 800b272:	d0f0      	beq.n	800b256 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b274:	7bfb      	ldrb	r3, [r7, #15]
}
 800b276:	4618      	mov	r0, r3
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	58024400 	.word	0x58024400
 800b284:	ffff0007 	.word	0xffff0007

0800b288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d101      	bne.n	800b29a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	e049      	b.n	800b32e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d106      	bne.n	800b2b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f7f9 fbf8 	bl	8004aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2202      	movs	r2, #2
 800b2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	3304      	adds	r3, #4
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	4610      	mov	r0, r2
 800b2c8:	f000 feb8 	bl	800c03c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2201      	movs	r2, #1
 800b300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2201      	movs	r2, #1
 800b328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3708      	adds	r7, #8
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
	...

0800b338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b338:	b480      	push	{r7}
 800b33a:	b085      	sub	sp, #20
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b346:	b2db      	uxtb	r3, r3
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d001      	beq.n	800b350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	e05e      	b.n	800b40e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2202      	movs	r2, #2
 800b354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68da      	ldr	r2, [r3, #12]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f042 0201 	orr.w	r2, r2, #1
 800b366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a2b      	ldr	r2, [pc, #172]	; (800b41c <HAL_TIM_Base_Start_IT+0xe4>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d02c      	beq.n	800b3cc <HAL_TIM_Base_Start_IT+0x94>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b37a:	d027      	beq.n	800b3cc <HAL_TIM_Base_Start_IT+0x94>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a27      	ldr	r2, [pc, #156]	; (800b420 <HAL_TIM_Base_Start_IT+0xe8>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d022      	beq.n	800b3cc <HAL_TIM_Base_Start_IT+0x94>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a26      	ldr	r2, [pc, #152]	; (800b424 <HAL_TIM_Base_Start_IT+0xec>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d01d      	beq.n	800b3cc <HAL_TIM_Base_Start_IT+0x94>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a24      	ldr	r2, [pc, #144]	; (800b428 <HAL_TIM_Base_Start_IT+0xf0>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d018      	beq.n	800b3cc <HAL_TIM_Base_Start_IT+0x94>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4a23      	ldr	r2, [pc, #140]	; (800b42c <HAL_TIM_Base_Start_IT+0xf4>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d013      	beq.n	800b3cc <HAL_TIM_Base_Start_IT+0x94>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a21      	ldr	r2, [pc, #132]	; (800b430 <HAL_TIM_Base_Start_IT+0xf8>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d00e      	beq.n	800b3cc <HAL_TIM_Base_Start_IT+0x94>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a20      	ldr	r2, [pc, #128]	; (800b434 <HAL_TIM_Base_Start_IT+0xfc>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d009      	beq.n	800b3cc <HAL_TIM_Base_Start_IT+0x94>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a1e      	ldr	r2, [pc, #120]	; (800b438 <HAL_TIM_Base_Start_IT+0x100>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d004      	beq.n	800b3cc <HAL_TIM_Base_Start_IT+0x94>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a1d      	ldr	r2, [pc, #116]	; (800b43c <HAL_TIM_Base_Start_IT+0x104>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d115      	bne.n	800b3f8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	689a      	ldr	r2, [r3, #8]
 800b3d2:	4b1b      	ldr	r3, [pc, #108]	; (800b440 <HAL_TIM_Base_Start_IT+0x108>)
 800b3d4:	4013      	ands	r3, r2
 800b3d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2b06      	cmp	r3, #6
 800b3dc:	d015      	beq.n	800b40a <HAL_TIM_Base_Start_IT+0xd2>
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3e4:	d011      	beq.n	800b40a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f042 0201 	orr.w	r2, r2, #1
 800b3f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3f6:	e008      	b.n	800b40a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f042 0201 	orr.w	r2, r2, #1
 800b406:	601a      	str	r2, [r3, #0]
 800b408:	e000      	b.n	800b40c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b40a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3714      	adds	r7, #20
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop
 800b41c:	40010000 	.word	0x40010000
 800b420:	40000400 	.word	0x40000400
 800b424:	40000800 	.word	0x40000800
 800b428:	40000c00 	.word	0x40000c00
 800b42c:	40010400 	.word	0x40010400
 800b430:	40001800 	.word	0x40001800
 800b434:	40014000 	.word	0x40014000
 800b438:	4000e000 	.word	0x4000e000
 800b43c:	4000e400 	.word	0x4000e400
 800b440:	00010007 	.word	0x00010007

0800b444 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d101      	bne.n	800b456 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	e049      	b.n	800b4ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d106      	bne.n	800b470 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f7f9 fae0 	bl	8004a30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2202      	movs	r2, #2
 800b474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	3304      	adds	r3, #4
 800b480:	4619      	mov	r1, r3
 800b482:	4610      	mov	r0, r2
 800b484:	f000 fdda 	bl	800c03c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2201      	movs	r2, #1
 800b49c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
	...

0800b4f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d109      	bne.n	800b518 <HAL_TIM_PWM_Start+0x24>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	bf14      	ite	ne
 800b510:	2301      	movne	r3, #1
 800b512:	2300      	moveq	r3, #0
 800b514:	b2db      	uxtb	r3, r3
 800b516:	e03c      	b.n	800b592 <HAL_TIM_PWM_Start+0x9e>
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	2b04      	cmp	r3, #4
 800b51c:	d109      	bne.n	800b532 <HAL_TIM_PWM_Start+0x3e>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b524:	b2db      	uxtb	r3, r3
 800b526:	2b01      	cmp	r3, #1
 800b528:	bf14      	ite	ne
 800b52a:	2301      	movne	r3, #1
 800b52c:	2300      	moveq	r3, #0
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	e02f      	b.n	800b592 <HAL_TIM_PWM_Start+0x9e>
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	2b08      	cmp	r3, #8
 800b536:	d109      	bne.n	800b54c <HAL_TIM_PWM_Start+0x58>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	2b01      	cmp	r3, #1
 800b542:	bf14      	ite	ne
 800b544:	2301      	movne	r3, #1
 800b546:	2300      	moveq	r3, #0
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	e022      	b.n	800b592 <HAL_TIM_PWM_Start+0x9e>
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	2b0c      	cmp	r3, #12
 800b550:	d109      	bne.n	800b566 <HAL_TIM_PWM_Start+0x72>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	bf14      	ite	ne
 800b55e:	2301      	movne	r3, #1
 800b560:	2300      	moveq	r3, #0
 800b562:	b2db      	uxtb	r3, r3
 800b564:	e015      	b.n	800b592 <HAL_TIM_PWM_Start+0x9e>
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	2b10      	cmp	r3, #16
 800b56a:	d109      	bne.n	800b580 <HAL_TIM_PWM_Start+0x8c>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b572:	b2db      	uxtb	r3, r3
 800b574:	2b01      	cmp	r3, #1
 800b576:	bf14      	ite	ne
 800b578:	2301      	movne	r3, #1
 800b57a:	2300      	moveq	r3, #0
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	e008      	b.n	800b592 <HAL_TIM_PWM_Start+0x9e>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b586:	b2db      	uxtb	r3, r3
 800b588:	2b01      	cmp	r3, #1
 800b58a:	bf14      	ite	ne
 800b58c:	2301      	movne	r3, #1
 800b58e:	2300      	moveq	r3, #0
 800b590:	b2db      	uxtb	r3, r3
 800b592:	2b00      	cmp	r3, #0
 800b594:	d001      	beq.n	800b59a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b596:	2301      	movs	r3, #1
 800b598:	e0ab      	b.n	800b6f2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d104      	bne.n	800b5aa <HAL_TIM_PWM_Start+0xb6>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b5a8:	e023      	b.n	800b5f2 <HAL_TIM_PWM_Start+0xfe>
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	2b04      	cmp	r3, #4
 800b5ae:	d104      	bne.n	800b5ba <HAL_TIM_PWM_Start+0xc6>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2202      	movs	r2, #2
 800b5b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b5b8:	e01b      	b.n	800b5f2 <HAL_TIM_PWM_Start+0xfe>
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	2b08      	cmp	r3, #8
 800b5be:	d104      	bne.n	800b5ca <HAL_TIM_PWM_Start+0xd6>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2202      	movs	r2, #2
 800b5c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5c8:	e013      	b.n	800b5f2 <HAL_TIM_PWM_Start+0xfe>
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	2b0c      	cmp	r3, #12
 800b5ce:	d104      	bne.n	800b5da <HAL_TIM_PWM_Start+0xe6>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2202      	movs	r2, #2
 800b5d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b5d8:	e00b      	b.n	800b5f2 <HAL_TIM_PWM_Start+0xfe>
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	2b10      	cmp	r3, #16
 800b5de:	d104      	bne.n	800b5ea <HAL_TIM_PWM_Start+0xf6>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2202      	movs	r2, #2
 800b5e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b5e8:	e003      	b.n	800b5f2 <HAL_TIM_PWM_Start+0xfe>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2202      	movs	r2, #2
 800b5ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f001 f938 	bl	800c870 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a3d      	ldr	r2, [pc, #244]	; (800b6fc <HAL_TIM_PWM_Start+0x208>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d013      	beq.n	800b632 <HAL_TIM_PWM_Start+0x13e>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a3c      	ldr	r2, [pc, #240]	; (800b700 <HAL_TIM_PWM_Start+0x20c>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d00e      	beq.n	800b632 <HAL_TIM_PWM_Start+0x13e>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a3a      	ldr	r2, [pc, #232]	; (800b704 <HAL_TIM_PWM_Start+0x210>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d009      	beq.n	800b632 <HAL_TIM_PWM_Start+0x13e>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a39      	ldr	r2, [pc, #228]	; (800b708 <HAL_TIM_PWM_Start+0x214>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d004      	beq.n	800b632 <HAL_TIM_PWM_Start+0x13e>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a37      	ldr	r2, [pc, #220]	; (800b70c <HAL_TIM_PWM_Start+0x218>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d101      	bne.n	800b636 <HAL_TIM_PWM_Start+0x142>
 800b632:	2301      	movs	r3, #1
 800b634:	e000      	b.n	800b638 <HAL_TIM_PWM_Start+0x144>
 800b636:	2300      	movs	r3, #0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d007      	beq.n	800b64c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b64a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a2a      	ldr	r2, [pc, #168]	; (800b6fc <HAL_TIM_PWM_Start+0x208>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d02c      	beq.n	800b6b0 <HAL_TIM_PWM_Start+0x1bc>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b65e:	d027      	beq.n	800b6b0 <HAL_TIM_PWM_Start+0x1bc>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a2a      	ldr	r2, [pc, #168]	; (800b710 <HAL_TIM_PWM_Start+0x21c>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d022      	beq.n	800b6b0 <HAL_TIM_PWM_Start+0x1bc>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a29      	ldr	r2, [pc, #164]	; (800b714 <HAL_TIM_PWM_Start+0x220>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d01d      	beq.n	800b6b0 <HAL_TIM_PWM_Start+0x1bc>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a27      	ldr	r2, [pc, #156]	; (800b718 <HAL_TIM_PWM_Start+0x224>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d018      	beq.n	800b6b0 <HAL_TIM_PWM_Start+0x1bc>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a1f      	ldr	r2, [pc, #124]	; (800b700 <HAL_TIM_PWM_Start+0x20c>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d013      	beq.n	800b6b0 <HAL_TIM_PWM_Start+0x1bc>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a23      	ldr	r2, [pc, #140]	; (800b71c <HAL_TIM_PWM_Start+0x228>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d00e      	beq.n	800b6b0 <HAL_TIM_PWM_Start+0x1bc>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a1b      	ldr	r2, [pc, #108]	; (800b704 <HAL_TIM_PWM_Start+0x210>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d009      	beq.n	800b6b0 <HAL_TIM_PWM_Start+0x1bc>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a1f      	ldr	r2, [pc, #124]	; (800b720 <HAL_TIM_PWM_Start+0x22c>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d004      	beq.n	800b6b0 <HAL_TIM_PWM_Start+0x1bc>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a1e      	ldr	r2, [pc, #120]	; (800b724 <HAL_TIM_PWM_Start+0x230>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d115      	bne.n	800b6dc <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	689a      	ldr	r2, [r3, #8]
 800b6b6:	4b1c      	ldr	r3, [pc, #112]	; (800b728 <HAL_TIM_PWM_Start+0x234>)
 800b6b8:	4013      	ands	r3, r2
 800b6ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2b06      	cmp	r3, #6
 800b6c0:	d015      	beq.n	800b6ee <HAL_TIM_PWM_Start+0x1fa>
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6c8:	d011      	beq.n	800b6ee <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f042 0201 	orr.w	r2, r2, #1
 800b6d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6da:	e008      	b.n	800b6ee <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f042 0201 	orr.w	r2, r2, #1
 800b6ea:	601a      	str	r2, [r3, #0]
 800b6ec:	e000      	b.n	800b6f0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	40010000 	.word	0x40010000
 800b700:	40010400 	.word	0x40010400
 800b704:	40014000 	.word	0x40014000
 800b708:	40014400 	.word	0x40014400
 800b70c:	40014800 	.word	0x40014800
 800b710:	40000400 	.word	0x40000400
 800b714:	40000800 	.word	0x40000800
 800b718:	40000c00 	.word	0x40000c00
 800b71c:	40001800 	.word	0x40001800
 800b720:	4000e000 	.word	0x4000e000
 800b724:	4000e400 	.word	0x4000e400
 800b728:	00010007 	.word	0x00010007

0800b72c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b086      	sub	sp, #24
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d101      	bne.n	800b740 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	e08f      	b.n	800b860 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b746:	b2db      	uxtb	r3, r3
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d106      	bne.n	800b75a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7f9 f85d 	bl	8004814 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2202      	movs	r2, #2
 800b75e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	6899      	ldr	r1, [r3, #8]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	4b3e      	ldr	r3, [pc, #248]	; (800b868 <HAL_TIM_Encoder_Init+0x13c>)
 800b76e:	400b      	ands	r3, r1
 800b770:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	3304      	adds	r3, #4
 800b77a:	4619      	mov	r1, r3
 800b77c:	4610      	mov	r0, r2
 800b77e:	f000 fc5d 	bl	800c03c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	699b      	ldr	r3, [r3, #24]
 800b790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	6a1b      	ldr	r3, [r3, #32]
 800b798:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	697a      	ldr	r2, [r7, #20]
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b7a4:	693a      	ldr	r2, [r7, #16]
 800b7a6:	4b31      	ldr	r3, [pc, #196]	; (800b86c <HAL_TIM_Encoder_Init+0x140>)
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	689a      	ldr	r2, [r3, #8]
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	699b      	ldr	r3, [r3, #24]
 800b7b4:	021b      	lsls	r3, r3, #8
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	693a      	ldr	r2, [r7, #16]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b7be:	693a      	ldr	r2, [r7, #16]
 800b7c0:	4b2b      	ldr	r3, [pc, #172]	; (800b870 <HAL_TIM_Encoder_Init+0x144>)
 800b7c2:	4013      	ands	r3, r2
 800b7c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b7c6:	693a      	ldr	r2, [r7, #16]
 800b7c8:	4b2a      	ldr	r3, [pc, #168]	; (800b874 <HAL_TIM_Encoder_Init+0x148>)
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	68da      	ldr	r2, [r3, #12]
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	69db      	ldr	r3, [r3, #28]
 800b7d6:	021b      	lsls	r3, r3, #8
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	693a      	ldr	r2, [r7, #16]
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	011a      	lsls	r2, r3, #4
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	6a1b      	ldr	r3, [r3, #32]
 800b7ea:	031b      	lsls	r3, r3, #12
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	693a      	ldr	r2, [r7, #16]
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b7fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b802:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	685a      	ldr	r2, [r3, #4]
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	695b      	ldr	r3, [r3, #20]
 800b80c:	011b      	lsls	r3, r3, #4
 800b80e:	4313      	orrs	r3, r2
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	4313      	orrs	r3, r2
 800b814:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	697a      	ldr	r2, [r7, #20]
 800b81c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	693a      	ldr	r2, [r7, #16]
 800b824:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68fa      	ldr	r2, [r7, #12]
 800b82c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2201      	movs	r2, #1
 800b832:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2201      	movs	r2, #1
 800b83a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2201      	movs	r2, #1
 800b842:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2201      	movs	r2, #1
 800b84a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2201      	movs	r2, #1
 800b852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2201      	movs	r2, #1
 800b85a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b85e:	2300      	movs	r3, #0
}
 800b860:	4618      	mov	r0, r3
 800b862:	3718      	adds	r7, #24
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	fffebff8 	.word	0xfffebff8
 800b86c:	fffffcfc 	.word	0xfffffcfc
 800b870:	fffff3f3 	.word	0xfffff3f3
 800b874:	ffff0f0f 	.word	0xffff0f0f

0800b878 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b888:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b890:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b898:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d110      	bne.n	800b8ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b8a8:	7bfb      	ldrb	r3, [r7, #15]
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d102      	bne.n	800b8b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b8ae:	7b7b      	ldrb	r3, [r7, #13]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d001      	beq.n	800b8b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	e069      	b.n	800b98c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2202      	movs	r2, #2
 800b8bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2202      	movs	r2, #2
 800b8c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8c8:	e031      	b.n	800b92e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	2b04      	cmp	r3, #4
 800b8ce:	d110      	bne.n	800b8f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b8d0:	7bbb      	ldrb	r3, [r7, #14]
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d102      	bne.n	800b8dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b8d6:	7b3b      	ldrb	r3, [r7, #12]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d001      	beq.n	800b8e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e055      	b.n	800b98c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2202      	movs	r2, #2
 800b8e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2202      	movs	r2, #2
 800b8ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8f0:	e01d      	b.n	800b92e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b8f2:	7bfb      	ldrb	r3, [r7, #15]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d108      	bne.n	800b90a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b8f8:	7bbb      	ldrb	r3, [r7, #14]
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d105      	bne.n	800b90a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b8fe:	7b7b      	ldrb	r3, [r7, #13]
 800b900:	2b01      	cmp	r3, #1
 800b902:	d102      	bne.n	800b90a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b904:	7b3b      	ldrb	r3, [r7, #12]
 800b906:	2b01      	cmp	r3, #1
 800b908:	d001      	beq.n	800b90e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b90a:	2301      	movs	r3, #1
 800b90c:	e03e      	b.n	800b98c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2202      	movs	r2, #2
 800b912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2202      	movs	r2, #2
 800b91a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2202      	movs	r2, #2
 800b922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2202      	movs	r2, #2
 800b92a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d003      	beq.n	800b93c <HAL_TIM_Encoder_Start+0xc4>
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	2b04      	cmp	r3, #4
 800b938:	d008      	beq.n	800b94c <HAL_TIM_Encoder_Start+0xd4>
 800b93a:	e00f      	b.n	800b95c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2201      	movs	r2, #1
 800b942:	2100      	movs	r1, #0
 800b944:	4618      	mov	r0, r3
 800b946:	f000 ff93 	bl	800c870 <TIM_CCxChannelCmd>
      break;
 800b94a:	e016      	b.n	800b97a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2201      	movs	r2, #1
 800b952:	2104      	movs	r1, #4
 800b954:	4618      	mov	r0, r3
 800b956:	f000 ff8b 	bl	800c870 <TIM_CCxChannelCmd>
      break;
 800b95a:	e00e      	b.n	800b97a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2201      	movs	r2, #1
 800b962:	2100      	movs	r1, #0
 800b964:	4618      	mov	r0, r3
 800b966:	f000 ff83 	bl	800c870 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2201      	movs	r2, #1
 800b970:	2104      	movs	r1, #4
 800b972:	4618      	mov	r0, r3
 800b974:	f000 ff7c 	bl	800c870 <TIM_CCxChannelCmd>
      break;
 800b978:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f042 0201 	orr.w	r2, r2, #1
 800b988:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b98a:	2300      	movs	r3, #0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3710      	adds	r7, #16
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	f003 0302 	and.w	r3, r3, #2
 800b9a6:	2b02      	cmp	r3, #2
 800b9a8:	d122      	bne.n	800b9f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	f003 0302 	and.w	r3, r3, #2
 800b9b4:	2b02      	cmp	r3, #2
 800b9b6:	d11b      	bne.n	800b9f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f06f 0202 	mvn.w	r2, #2
 800b9c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	699b      	ldr	r3, [r3, #24]
 800b9ce:	f003 0303 	and.w	r3, r3, #3
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d003      	beq.n	800b9de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 fb12 	bl	800c000 <HAL_TIM_IC_CaptureCallback>
 800b9dc:	e005      	b.n	800b9ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 fb04 	bl	800bfec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 fb15 	bl	800c014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	691b      	ldr	r3, [r3, #16]
 800b9f6:	f003 0304 	and.w	r3, r3, #4
 800b9fa:	2b04      	cmp	r3, #4
 800b9fc:	d122      	bne.n	800ba44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	f003 0304 	and.w	r3, r3, #4
 800ba08:	2b04      	cmp	r3, #4
 800ba0a:	d11b      	bne.n	800ba44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f06f 0204 	mvn.w	r2, #4
 800ba14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2202      	movs	r2, #2
 800ba1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	699b      	ldr	r3, [r3, #24]
 800ba22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d003      	beq.n	800ba32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 fae8 	bl	800c000 <HAL_TIM_IC_CaptureCallback>
 800ba30:	e005      	b.n	800ba3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 fada 	bl	800bfec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 faeb 	bl	800c014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	691b      	ldr	r3, [r3, #16]
 800ba4a:	f003 0308 	and.w	r3, r3, #8
 800ba4e:	2b08      	cmp	r3, #8
 800ba50:	d122      	bne.n	800ba98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	f003 0308 	and.w	r3, r3, #8
 800ba5c:	2b08      	cmp	r3, #8
 800ba5e:	d11b      	bne.n	800ba98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f06f 0208 	mvn.w	r2, #8
 800ba68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2204      	movs	r2, #4
 800ba6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	69db      	ldr	r3, [r3, #28]
 800ba76:	f003 0303 	and.w	r3, r3, #3
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d003      	beq.n	800ba86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 fabe 	bl	800c000 <HAL_TIM_IC_CaptureCallback>
 800ba84:	e005      	b.n	800ba92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 fab0 	bl	800bfec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 fac1 	bl	800c014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	f003 0310 	and.w	r3, r3, #16
 800baa2:	2b10      	cmp	r3, #16
 800baa4:	d122      	bne.n	800baec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	f003 0310 	and.w	r3, r3, #16
 800bab0:	2b10      	cmp	r3, #16
 800bab2:	d11b      	bne.n	800baec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f06f 0210 	mvn.w	r2, #16
 800babc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2208      	movs	r2, #8
 800bac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	69db      	ldr	r3, [r3, #28]
 800baca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d003      	beq.n	800bada <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 fa94 	bl	800c000 <HAL_TIM_IC_CaptureCallback>
 800bad8:	e005      	b.n	800bae6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 fa86 	bl	800bfec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 fa97 	bl	800c014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	f003 0301 	and.w	r3, r3, #1
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d10e      	bne.n	800bb18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	f003 0301 	and.w	r3, r3, #1
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d107      	bne.n	800bb18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f06f 0201 	mvn.w	r2, #1
 800bb10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7f5 fd2a 	bl	800156c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb22:	2b80      	cmp	r3, #128	; 0x80
 800bb24:	d10e      	bne.n	800bb44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb30:	2b80      	cmp	r3, #128	; 0x80
 800bb32:	d107      	bne.n	800bb44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bb3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f001 f802 	bl	800cb48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb52:	d10e      	bne.n	800bb72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb5e:	2b80      	cmp	r3, #128	; 0x80
 800bb60:	d107      	bne.n	800bb72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bb6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fff5 	bl	800cb5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	691b      	ldr	r3, [r3, #16]
 800bb78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb7c:	2b40      	cmp	r3, #64	; 0x40
 800bb7e:	d10e      	bne.n	800bb9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb8a:	2b40      	cmp	r3, #64	; 0x40
 800bb8c:	d107      	bne.n	800bb9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bb96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 fa45 	bl	800c028 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	691b      	ldr	r3, [r3, #16]
 800bba4:	f003 0320 	and.w	r3, r3, #32
 800bba8:	2b20      	cmp	r3, #32
 800bbaa:	d10e      	bne.n	800bbca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	f003 0320 	and.w	r3, r3, #32
 800bbb6:	2b20      	cmp	r3, #32
 800bbb8:	d107      	bne.n	800bbca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f06f 0220 	mvn.w	r2, #32
 800bbc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 ffb5 	bl	800cb34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bbca:	bf00      	nop
 800bbcc:	3708      	adds	r7, #8
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
	...

0800bbd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d101      	bne.n	800bbf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bbee:	2302      	movs	r3, #2
 800bbf0:	e0ff      	b.n	800bdf2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2b14      	cmp	r3, #20
 800bbfe:	f200 80f0 	bhi.w	800bde2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bc02:	a201      	add	r2, pc, #4	; (adr r2, 800bc08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bc04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc08:	0800bc5d 	.word	0x0800bc5d
 800bc0c:	0800bde3 	.word	0x0800bde3
 800bc10:	0800bde3 	.word	0x0800bde3
 800bc14:	0800bde3 	.word	0x0800bde3
 800bc18:	0800bc9d 	.word	0x0800bc9d
 800bc1c:	0800bde3 	.word	0x0800bde3
 800bc20:	0800bde3 	.word	0x0800bde3
 800bc24:	0800bde3 	.word	0x0800bde3
 800bc28:	0800bcdf 	.word	0x0800bcdf
 800bc2c:	0800bde3 	.word	0x0800bde3
 800bc30:	0800bde3 	.word	0x0800bde3
 800bc34:	0800bde3 	.word	0x0800bde3
 800bc38:	0800bd1f 	.word	0x0800bd1f
 800bc3c:	0800bde3 	.word	0x0800bde3
 800bc40:	0800bde3 	.word	0x0800bde3
 800bc44:	0800bde3 	.word	0x0800bde3
 800bc48:	0800bd61 	.word	0x0800bd61
 800bc4c:	0800bde3 	.word	0x0800bde3
 800bc50:	0800bde3 	.word	0x0800bde3
 800bc54:	0800bde3 	.word	0x0800bde3
 800bc58:	0800bda1 	.word	0x0800bda1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68b9      	ldr	r1, [r7, #8]
 800bc62:	4618      	mov	r0, r3
 800bc64:	f000 fa90 	bl	800c188 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	699a      	ldr	r2, [r3, #24]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f042 0208 	orr.w	r2, r2, #8
 800bc76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	699a      	ldr	r2, [r3, #24]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f022 0204 	bic.w	r2, r2, #4
 800bc86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	6999      	ldr	r1, [r3, #24]
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	691a      	ldr	r2, [r3, #16]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	430a      	orrs	r2, r1
 800bc98:	619a      	str	r2, [r3, #24]
      break;
 800bc9a:	e0a5      	b.n	800bde8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	68b9      	ldr	r1, [r7, #8]
 800bca2:	4618      	mov	r0, r3
 800bca4:	f000 fb00 	bl	800c2a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	699a      	ldr	r2, [r3, #24]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bcb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	699a      	ldr	r2, [r3, #24]
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	6999      	ldr	r1, [r3, #24]
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	691b      	ldr	r3, [r3, #16]
 800bcd2:	021a      	lsls	r2, r3, #8
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	430a      	orrs	r2, r1
 800bcda:	619a      	str	r2, [r3, #24]
      break;
 800bcdc:	e084      	b.n	800bde8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68b9      	ldr	r1, [r7, #8]
 800bce4:	4618      	mov	r0, r3
 800bce6:	f000 fb69 	bl	800c3bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	69da      	ldr	r2, [r3, #28]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f042 0208 	orr.w	r2, r2, #8
 800bcf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	69da      	ldr	r2, [r3, #28]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f022 0204 	bic.w	r2, r2, #4
 800bd08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	69d9      	ldr	r1, [r3, #28]
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	691a      	ldr	r2, [r3, #16]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	430a      	orrs	r2, r1
 800bd1a:	61da      	str	r2, [r3, #28]
      break;
 800bd1c:	e064      	b.n	800bde8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	68b9      	ldr	r1, [r7, #8]
 800bd24:	4618      	mov	r0, r3
 800bd26:	f000 fbd1 	bl	800c4cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	69da      	ldr	r2, [r3, #28]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	69da      	ldr	r2, [r3, #28]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	69d9      	ldr	r1, [r3, #28]
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	691b      	ldr	r3, [r3, #16]
 800bd54:	021a      	lsls	r2, r3, #8
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	430a      	orrs	r2, r1
 800bd5c:	61da      	str	r2, [r3, #28]
      break;
 800bd5e:	e043      	b.n	800bde8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	68b9      	ldr	r1, [r7, #8]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f000 fc1a 	bl	800c5a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f042 0208 	orr.w	r2, r2, #8
 800bd7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f022 0204 	bic.w	r2, r2, #4
 800bd8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	691a      	ldr	r2, [r3, #16]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	430a      	orrs	r2, r1
 800bd9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bd9e:	e023      	b.n	800bde8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	68b9      	ldr	r1, [r7, #8]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f000 fc5e 	bl	800c668 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	691b      	ldr	r3, [r3, #16]
 800bdd6:	021a      	lsls	r2, r3, #8
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	430a      	orrs	r2, r1
 800bdde:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bde0:	e002      	b.n	800bde8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bde2:	2301      	movs	r3, #1
 800bde4:	75fb      	strb	r3, [r7, #23]
      break;
 800bde6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bdf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3718      	adds	r7, #24
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop

0800bdfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be06:	2300      	movs	r3, #0
 800be08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be10:	2b01      	cmp	r3, #1
 800be12:	d101      	bne.n	800be18 <HAL_TIM_ConfigClockSource+0x1c>
 800be14:	2302      	movs	r3, #2
 800be16:	e0dc      	b.n	800bfd2 <HAL_TIM_ConfigClockSource+0x1d6>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2201      	movs	r2, #1
 800be1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2202      	movs	r2, #2
 800be24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800be30:	68ba      	ldr	r2, [r7, #8]
 800be32:	4b6a      	ldr	r3, [pc, #424]	; (800bfdc <HAL_TIM_ConfigClockSource+0x1e0>)
 800be34:	4013      	ands	r3, r2
 800be36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	68ba      	ldr	r2, [r7, #8]
 800be46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a64      	ldr	r2, [pc, #400]	; (800bfe0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	f000 80a9 	beq.w	800bfa6 <HAL_TIM_ConfigClockSource+0x1aa>
 800be54:	4a62      	ldr	r2, [pc, #392]	; (800bfe0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800be56:	4293      	cmp	r3, r2
 800be58:	f200 80ae 	bhi.w	800bfb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800be5c:	4a61      	ldr	r2, [pc, #388]	; (800bfe4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	f000 80a1 	beq.w	800bfa6 <HAL_TIM_ConfigClockSource+0x1aa>
 800be64:	4a5f      	ldr	r2, [pc, #380]	; (800bfe4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800be66:	4293      	cmp	r3, r2
 800be68:	f200 80a6 	bhi.w	800bfb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800be6c:	4a5e      	ldr	r2, [pc, #376]	; (800bfe8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	f000 8099 	beq.w	800bfa6 <HAL_TIM_ConfigClockSource+0x1aa>
 800be74:	4a5c      	ldr	r2, [pc, #368]	; (800bfe8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800be76:	4293      	cmp	r3, r2
 800be78:	f200 809e 	bhi.w	800bfb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800be7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800be80:	f000 8091 	beq.w	800bfa6 <HAL_TIM_ConfigClockSource+0x1aa>
 800be84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800be88:	f200 8096 	bhi.w	800bfb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800be8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be90:	f000 8089 	beq.w	800bfa6 <HAL_TIM_ConfigClockSource+0x1aa>
 800be94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be98:	f200 808e 	bhi.w	800bfb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800be9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bea0:	d03e      	beq.n	800bf20 <HAL_TIM_ConfigClockSource+0x124>
 800bea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bea6:	f200 8087 	bhi.w	800bfb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800beaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beae:	f000 8086 	beq.w	800bfbe <HAL_TIM_ConfigClockSource+0x1c2>
 800beb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beb6:	d87f      	bhi.n	800bfb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800beb8:	2b70      	cmp	r3, #112	; 0x70
 800beba:	d01a      	beq.n	800bef2 <HAL_TIM_ConfigClockSource+0xf6>
 800bebc:	2b70      	cmp	r3, #112	; 0x70
 800bebe:	d87b      	bhi.n	800bfb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bec0:	2b60      	cmp	r3, #96	; 0x60
 800bec2:	d050      	beq.n	800bf66 <HAL_TIM_ConfigClockSource+0x16a>
 800bec4:	2b60      	cmp	r3, #96	; 0x60
 800bec6:	d877      	bhi.n	800bfb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bec8:	2b50      	cmp	r3, #80	; 0x50
 800beca:	d03c      	beq.n	800bf46 <HAL_TIM_ConfigClockSource+0x14a>
 800becc:	2b50      	cmp	r3, #80	; 0x50
 800bece:	d873      	bhi.n	800bfb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bed0:	2b40      	cmp	r3, #64	; 0x40
 800bed2:	d058      	beq.n	800bf86 <HAL_TIM_ConfigClockSource+0x18a>
 800bed4:	2b40      	cmp	r3, #64	; 0x40
 800bed6:	d86f      	bhi.n	800bfb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bed8:	2b30      	cmp	r3, #48	; 0x30
 800beda:	d064      	beq.n	800bfa6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bedc:	2b30      	cmp	r3, #48	; 0x30
 800bede:	d86b      	bhi.n	800bfb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bee0:	2b20      	cmp	r3, #32
 800bee2:	d060      	beq.n	800bfa6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bee4:	2b20      	cmp	r3, #32
 800bee6:	d867      	bhi.n	800bfb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d05c      	beq.n	800bfa6 <HAL_TIM_ConfigClockSource+0x1aa>
 800beec:	2b10      	cmp	r3, #16
 800beee:	d05a      	beq.n	800bfa6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bef0:	e062      	b.n	800bfb8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6818      	ldr	r0, [r3, #0]
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	6899      	ldr	r1, [r3, #8]
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	685a      	ldr	r2, [r3, #4]
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	f000 fc95 	bl	800c830 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bf14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	68ba      	ldr	r2, [r7, #8]
 800bf1c:	609a      	str	r2, [r3, #8]
      break;
 800bf1e:	e04f      	b.n	800bfc0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6818      	ldr	r0, [r3, #0]
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	6899      	ldr	r1, [r3, #8]
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	685a      	ldr	r2, [r3, #4]
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	f000 fc7e 	bl	800c830 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	689a      	ldr	r2, [r3, #8]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf42:	609a      	str	r2, [r3, #8]
      break;
 800bf44:	e03c      	b.n	800bfc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6818      	ldr	r0, [r3, #0]
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	6859      	ldr	r1, [r3, #4]
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	461a      	mov	r2, r3
 800bf54:	f000 fbee 	bl	800c734 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2150      	movs	r1, #80	; 0x50
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f000 fc48 	bl	800c7f4 <TIM_ITRx_SetConfig>
      break;
 800bf64:	e02c      	b.n	800bfc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6818      	ldr	r0, [r3, #0]
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	6859      	ldr	r1, [r3, #4]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	461a      	mov	r2, r3
 800bf74:	f000 fc0d 	bl	800c792 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2160      	movs	r1, #96	; 0x60
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f000 fc38 	bl	800c7f4 <TIM_ITRx_SetConfig>
      break;
 800bf84:	e01c      	b.n	800bfc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6818      	ldr	r0, [r3, #0]
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	6859      	ldr	r1, [r3, #4]
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	461a      	mov	r2, r3
 800bf94:	f000 fbce 	bl	800c734 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2140      	movs	r1, #64	; 0x40
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f000 fc28 	bl	800c7f4 <TIM_ITRx_SetConfig>
      break;
 800bfa4:	e00c      	b.n	800bfc0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4619      	mov	r1, r3
 800bfb0:	4610      	mov	r0, r2
 800bfb2:	f000 fc1f 	bl	800c7f4 <TIM_ITRx_SetConfig>
      break;
 800bfb6:	e003      	b.n	800bfc0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	73fb      	strb	r3, [r7, #15]
      break;
 800bfbc:	e000      	b.n	800bfc0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bfbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bfd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	ffceff88 	.word	0xffceff88
 800bfe0:	00100040 	.word	0x00100040
 800bfe4:	00100030 	.word	0x00100030
 800bfe8:	00100020 	.word	0x00100020

0800bfec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bff4:	bf00      	nop
 800bff6:	370c      	adds	r7, #12
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr

0800c000 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c008:	bf00      	nop
 800c00a:	370c      	adds	r7, #12
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c014:	b480      	push	{r7}
 800c016:	b083      	sub	sp, #12
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c01c:	bf00      	nop
 800c01e:	370c      	adds	r7, #12
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr

0800c028 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c030:	bf00      	nop
 800c032:	370c      	adds	r7, #12
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b085      	sub	sp, #20
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4a44      	ldr	r2, [pc, #272]	; (800c160 <TIM_Base_SetConfig+0x124>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d013      	beq.n	800c07c <TIM_Base_SetConfig+0x40>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c05a:	d00f      	beq.n	800c07c <TIM_Base_SetConfig+0x40>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	4a41      	ldr	r2, [pc, #260]	; (800c164 <TIM_Base_SetConfig+0x128>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d00b      	beq.n	800c07c <TIM_Base_SetConfig+0x40>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	4a40      	ldr	r2, [pc, #256]	; (800c168 <TIM_Base_SetConfig+0x12c>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d007      	beq.n	800c07c <TIM_Base_SetConfig+0x40>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4a3f      	ldr	r2, [pc, #252]	; (800c16c <TIM_Base_SetConfig+0x130>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d003      	beq.n	800c07c <TIM_Base_SetConfig+0x40>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4a3e      	ldr	r2, [pc, #248]	; (800c170 <TIM_Base_SetConfig+0x134>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d108      	bne.n	800c08e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4a33      	ldr	r2, [pc, #204]	; (800c160 <TIM_Base_SetConfig+0x124>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d027      	beq.n	800c0e6 <TIM_Base_SetConfig+0xaa>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c09c:	d023      	beq.n	800c0e6 <TIM_Base_SetConfig+0xaa>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4a30      	ldr	r2, [pc, #192]	; (800c164 <TIM_Base_SetConfig+0x128>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d01f      	beq.n	800c0e6 <TIM_Base_SetConfig+0xaa>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	4a2f      	ldr	r2, [pc, #188]	; (800c168 <TIM_Base_SetConfig+0x12c>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d01b      	beq.n	800c0e6 <TIM_Base_SetConfig+0xaa>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4a2e      	ldr	r2, [pc, #184]	; (800c16c <TIM_Base_SetConfig+0x130>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d017      	beq.n	800c0e6 <TIM_Base_SetConfig+0xaa>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4a2d      	ldr	r2, [pc, #180]	; (800c170 <TIM_Base_SetConfig+0x134>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d013      	beq.n	800c0e6 <TIM_Base_SetConfig+0xaa>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	4a2c      	ldr	r2, [pc, #176]	; (800c174 <TIM_Base_SetConfig+0x138>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d00f      	beq.n	800c0e6 <TIM_Base_SetConfig+0xaa>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4a2b      	ldr	r2, [pc, #172]	; (800c178 <TIM_Base_SetConfig+0x13c>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d00b      	beq.n	800c0e6 <TIM_Base_SetConfig+0xaa>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4a2a      	ldr	r2, [pc, #168]	; (800c17c <TIM_Base_SetConfig+0x140>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d007      	beq.n	800c0e6 <TIM_Base_SetConfig+0xaa>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	4a29      	ldr	r2, [pc, #164]	; (800c180 <TIM_Base_SetConfig+0x144>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d003      	beq.n	800c0e6 <TIM_Base_SetConfig+0xaa>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4a28      	ldr	r2, [pc, #160]	; (800c184 <TIM_Base_SetConfig+0x148>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d108      	bne.n	800c0f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	695b      	ldr	r3, [r3, #20]
 800c102:	4313      	orrs	r3, r2
 800c104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	689a      	ldr	r2, [r3, #8]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	4a10      	ldr	r2, [pc, #64]	; (800c160 <TIM_Base_SetConfig+0x124>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d00f      	beq.n	800c144 <TIM_Base_SetConfig+0x108>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4a12      	ldr	r2, [pc, #72]	; (800c170 <TIM_Base_SetConfig+0x134>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d00b      	beq.n	800c144 <TIM_Base_SetConfig+0x108>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4a11      	ldr	r2, [pc, #68]	; (800c174 <TIM_Base_SetConfig+0x138>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d007      	beq.n	800c144 <TIM_Base_SetConfig+0x108>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	4a10      	ldr	r2, [pc, #64]	; (800c178 <TIM_Base_SetConfig+0x13c>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d003      	beq.n	800c144 <TIM_Base_SetConfig+0x108>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	4a0f      	ldr	r2, [pc, #60]	; (800c17c <TIM_Base_SetConfig+0x140>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d103      	bne.n	800c14c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	691a      	ldr	r2, [r3, #16]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2201      	movs	r2, #1
 800c150:	615a      	str	r2, [r3, #20]
}
 800c152:	bf00      	nop
 800c154:	3714      	adds	r7, #20
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop
 800c160:	40010000 	.word	0x40010000
 800c164:	40000400 	.word	0x40000400
 800c168:	40000800 	.word	0x40000800
 800c16c:	40000c00 	.word	0x40000c00
 800c170:	40010400 	.word	0x40010400
 800c174:	40014000 	.word	0x40014000
 800c178:	40014400 	.word	0x40014400
 800c17c:	40014800 	.word	0x40014800
 800c180:	4000e000 	.word	0x4000e000
 800c184:	4000e400 	.word	0x4000e400

0800c188 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c188:	b480      	push	{r7}
 800c18a:	b087      	sub	sp, #28
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6a1b      	ldr	r3, [r3, #32]
 800c196:	f023 0201 	bic.w	r2, r3, #1
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6a1b      	ldr	r3, [r3, #32]
 800c1a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	699b      	ldr	r3, [r3, #24]
 800c1ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c1b0:	68fa      	ldr	r2, [r7, #12]
 800c1b2:	4b37      	ldr	r3, [pc, #220]	; (800c290 <TIM_OC1_SetConfig+0x108>)
 800c1b4:	4013      	ands	r3, r2
 800c1b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f023 0303 	bic.w	r3, r3, #3
 800c1be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	f023 0302 	bic.w	r3, r3, #2
 800c1d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	697a      	ldr	r2, [r7, #20]
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a2d      	ldr	r2, [pc, #180]	; (800c294 <TIM_OC1_SetConfig+0x10c>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d00f      	beq.n	800c204 <TIM_OC1_SetConfig+0x7c>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	4a2c      	ldr	r2, [pc, #176]	; (800c298 <TIM_OC1_SetConfig+0x110>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d00b      	beq.n	800c204 <TIM_OC1_SetConfig+0x7c>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	4a2b      	ldr	r2, [pc, #172]	; (800c29c <TIM_OC1_SetConfig+0x114>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d007      	beq.n	800c204 <TIM_OC1_SetConfig+0x7c>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	4a2a      	ldr	r2, [pc, #168]	; (800c2a0 <TIM_OC1_SetConfig+0x118>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d003      	beq.n	800c204 <TIM_OC1_SetConfig+0x7c>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	4a29      	ldr	r2, [pc, #164]	; (800c2a4 <TIM_OC1_SetConfig+0x11c>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d10c      	bne.n	800c21e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	f023 0308 	bic.w	r3, r3, #8
 800c20a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	697a      	ldr	r2, [r7, #20]
 800c212:	4313      	orrs	r3, r2
 800c214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	f023 0304 	bic.w	r3, r3, #4
 800c21c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	4a1c      	ldr	r2, [pc, #112]	; (800c294 <TIM_OC1_SetConfig+0x10c>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d00f      	beq.n	800c246 <TIM_OC1_SetConfig+0xbe>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	4a1b      	ldr	r2, [pc, #108]	; (800c298 <TIM_OC1_SetConfig+0x110>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d00b      	beq.n	800c246 <TIM_OC1_SetConfig+0xbe>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	4a1a      	ldr	r2, [pc, #104]	; (800c29c <TIM_OC1_SetConfig+0x114>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d007      	beq.n	800c246 <TIM_OC1_SetConfig+0xbe>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	4a19      	ldr	r2, [pc, #100]	; (800c2a0 <TIM_OC1_SetConfig+0x118>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d003      	beq.n	800c246 <TIM_OC1_SetConfig+0xbe>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	4a18      	ldr	r2, [pc, #96]	; (800c2a4 <TIM_OC1_SetConfig+0x11c>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d111      	bne.n	800c26a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c24c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	695b      	ldr	r3, [r3, #20]
 800c25a:	693a      	ldr	r2, [r7, #16]
 800c25c:	4313      	orrs	r3, r2
 800c25e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	699b      	ldr	r3, [r3, #24]
 800c264:	693a      	ldr	r2, [r7, #16]
 800c266:	4313      	orrs	r3, r2
 800c268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	693a      	ldr	r2, [r7, #16]
 800c26e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	68fa      	ldr	r2, [r7, #12]
 800c274:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	685a      	ldr	r2, [r3, #4]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	697a      	ldr	r2, [r7, #20]
 800c282:	621a      	str	r2, [r3, #32]
}
 800c284:	bf00      	nop
 800c286:	371c      	adds	r7, #28
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr
 800c290:	fffeff8f 	.word	0xfffeff8f
 800c294:	40010000 	.word	0x40010000
 800c298:	40010400 	.word	0x40010400
 800c29c:	40014000 	.word	0x40014000
 800c2a0:	40014400 	.word	0x40014400
 800c2a4:	40014800 	.word	0x40014800

0800c2a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b087      	sub	sp, #28
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6a1b      	ldr	r3, [r3, #32]
 800c2b6:	f023 0210 	bic.w	r2, r3, #16
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a1b      	ldr	r3, [r3, #32]
 800c2c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	699b      	ldr	r3, [r3, #24]
 800c2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c2d0:	68fa      	ldr	r2, [r7, #12]
 800c2d2:	4b34      	ldr	r3, [pc, #208]	; (800c3a4 <TIM_OC2_SetConfig+0xfc>)
 800c2d4:	4013      	ands	r3, r2
 800c2d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	021b      	lsls	r3, r3, #8
 800c2e6:	68fa      	ldr	r2, [r7, #12]
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	f023 0320 	bic.w	r3, r3, #32
 800c2f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	011b      	lsls	r3, r3, #4
 800c2fa:	697a      	ldr	r2, [r7, #20]
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4a29      	ldr	r2, [pc, #164]	; (800c3a8 <TIM_OC2_SetConfig+0x100>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d003      	beq.n	800c310 <TIM_OC2_SetConfig+0x68>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	4a28      	ldr	r2, [pc, #160]	; (800c3ac <TIM_OC2_SetConfig+0x104>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d10d      	bne.n	800c32c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	011b      	lsls	r3, r3, #4
 800c31e:	697a      	ldr	r2, [r7, #20]
 800c320:	4313      	orrs	r3, r2
 800c322:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c32a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	4a1e      	ldr	r2, [pc, #120]	; (800c3a8 <TIM_OC2_SetConfig+0x100>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d00f      	beq.n	800c354 <TIM_OC2_SetConfig+0xac>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	4a1d      	ldr	r2, [pc, #116]	; (800c3ac <TIM_OC2_SetConfig+0x104>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d00b      	beq.n	800c354 <TIM_OC2_SetConfig+0xac>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	4a1c      	ldr	r2, [pc, #112]	; (800c3b0 <TIM_OC2_SetConfig+0x108>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d007      	beq.n	800c354 <TIM_OC2_SetConfig+0xac>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4a1b      	ldr	r2, [pc, #108]	; (800c3b4 <TIM_OC2_SetConfig+0x10c>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d003      	beq.n	800c354 <TIM_OC2_SetConfig+0xac>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	4a1a      	ldr	r2, [pc, #104]	; (800c3b8 <TIM_OC2_SetConfig+0x110>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d113      	bne.n	800c37c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c35a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c362:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	695b      	ldr	r3, [r3, #20]
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	693a      	ldr	r2, [r7, #16]
 800c36c:	4313      	orrs	r3, r2
 800c36e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	699b      	ldr	r3, [r3, #24]
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	693a      	ldr	r2, [r7, #16]
 800c378:	4313      	orrs	r3, r2
 800c37a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	693a      	ldr	r2, [r7, #16]
 800c380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	685a      	ldr	r2, [r3, #4]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	697a      	ldr	r2, [r7, #20]
 800c394:	621a      	str	r2, [r3, #32]
}
 800c396:	bf00      	nop
 800c398:	371c      	adds	r7, #28
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	feff8fff 	.word	0xfeff8fff
 800c3a8:	40010000 	.word	0x40010000
 800c3ac:	40010400 	.word	0x40010400
 800c3b0:	40014000 	.word	0x40014000
 800c3b4:	40014400 	.word	0x40014400
 800c3b8:	40014800 	.word	0x40014800

0800c3bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b087      	sub	sp, #28
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6a1b      	ldr	r3, [r3, #32]
 800c3ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	69db      	ldr	r3, [r3, #28]
 800c3e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c3e4:	68fa      	ldr	r2, [r7, #12]
 800c3e6:	4b33      	ldr	r3, [pc, #204]	; (800c4b4 <TIM_OC3_SetConfig+0xf8>)
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f023 0303 	bic.w	r3, r3, #3
 800c3f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	689b      	ldr	r3, [r3, #8]
 800c40a:	021b      	lsls	r3, r3, #8
 800c40c:	697a      	ldr	r2, [r7, #20]
 800c40e:	4313      	orrs	r3, r2
 800c410:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4a28      	ldr	r2, [pc, #160]	; (800c4b8 <TIM_OC3_SetConfig+0xfc>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d003      	beq.n	800c422 <TIM_OC3_SetConfig+0x66>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	4a27      	ldr	r2, [pc, #156]	; (800c4bc <TIM_OC3_SetConfig+0x100>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d10d      	bne.n	800c43e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c428:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	68db      	ldr	r3, [r3, #12]
 800c42e:	021b      	lsls	r3, r3, #8
 800c430:	697a      	ldr	r2, [r7, #20]
 800c432:	4313      	orrs	r3, r2
 800c434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c43c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	4a1d      	ldr	r2, [pc, #116]	; (800c4b8 <TIM_OC3_SetConfig+0xfc>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d00f      	beq.n	800c466 <TIM_OC3_SetConfig+0xaa>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4a1c      	ldr	r2, [pc, #112]	; (800c4bc <TIM_OC3_SetConfig+0x100>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d00b      	beq.n	800c466 <TIM_OC3_SetConfig+0xaa>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4a1b      	ldr	r2, [pc, #108]	; (800c4c0 <TIM_OC3_SetConfig+0x104>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d007      	beq.n	800c466 <TIM_OC3_SetConfig+0xaa>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4a1a      	ldr	r2, [pc, #104]	; (800c4c4 <TIM_OC3_SetConfig+0x108>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d003      	beq.n	800c466 <TIM_OC3_SetConfig+0xaa>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	4a19      	ldr	r2, [pc, #100]	; (800c4c8 <TIM_OC3_SetConfig+0x10c>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d113      	bne.n	800c48e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c46c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	695b      	ldr	r3, [r3, #20]
 800c47a:	011b      	lsls	r3, r3, #4
 800c47c:	693a      	ldr	r2, [r7, #16]
 800c47e:	4313      	orrs	r3, r2
 800c480:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	699b      	ldr	r3, [r3, #24]
 800c486:	011b      	lsls	r3, r3, #4
 800c488:	693a      	ldr	r2, [r7, #16]
 800c48a:	4313      	orrs	r3, r2
 800c48c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	693a      	ldr	r2, [r7, #16]
 800c492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	685a      	ldr	r2, [r3, #4]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	697a      	ldr	r2, [r7, #20]
 800c4a6:	621a      	str	r2, [r3, #32]
}
 800c4a8:	bf00      	nop
 800c4aa:	371c      	adds	r7, #28
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr
 800c4b4:	fffeff8f 	.word	0xfffeff8f
 800c4b8:	40010000 	.word	0x40010000
 800c4bc:	40010400 	.word	0x40010400
 800c4c0:	40014000 	.word	0x40014000
 800c4c4:	40014400 	.word	0x40014400
 800c4c8:	40014800 	.word	0x40014800

0800c4cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b087      	sub	sp, #28
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6a1b      	ldr	r3, [r3, #32]
 800c4da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6a1b      	ldr	r3, [r3, #32]
 800c4e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	69db      	ldr	r3, [r3, #28]
 800c4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c4f4:	68fa      	ldr	r2, [r7, #12]
 800c4f6:	4b24      	ldr	r3, [pc, #144]	; (800c588 <TIM_OC4_SetConfig+0xbc>)
 800c4f8:	4013      	ands	r3, r2
 800c4fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	021b      	lsls	r3, r3, #8
 800c50a:	68fa      	ldr	r2, [r7, #12]
 800c50c:	4313      	orrs	r3, r2
 800c50e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c516:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	689b      	ldr	r3, [r3, #8]
 800c51c:	031b      	lsls	r3, r3, #12
 800c51e:	693a      	ldr	r2, [r7, #16]
 800c520:	4313      	orrs	r3, r2
 800c522:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	4a19      	ldr	r2, [pc, #100]	; (800c58c <TIM_OC4_SetConfig+0xc0>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d00f      	beq.n	800c54c <TIM_OC4_SetConfig+0x80>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	4a18      	ldr	r2, [pc, #96]	; (800c590 <TIM_OC4_SetConfig+0xc4>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d00b      	beq.n	800c54c <TIM_OC4_SetConfig+0x80>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	4a17      	ldr	r2, [pc, #92]	; (800c594 <TIM_OC4_SetConfig+0xc8>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d007      	beq.n	800c54c <TIM_OC4_SetConfig+0x80>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	4a16      	ldr	r2, [pc, #88]	; (800c598 <TIM_OC4_SetConfig+0xcc>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d003      	beq.n	800c54c <TIM_OC4_SetConfig+0x80>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	4a15      	ldr	r2, [pc, #84]	; (800c59c <TIM_OC4_SetConfig+0xd0>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d109      	bne.n	800c560 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c552:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	695b      	ldr	r3, [r3, #20]
 800c558:	019b      	lsls	r3, r3, #6
 800c55a:	697a      	ldr	r2, [r7, #20]
 800c55c:	4313      	orrs	r3, r2
 800c55e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	697a      	ldr	r2, [r7, #20]
 800c564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	685a      	ldr	r2, [r3, #4]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	693a      	ldr	r2, [r7, #16]
 800c578:	621a      	str	r2, [r3, #32]
}
 800c57a:	bf00      	nop
 800c57c:	371c      	adds	r7, #28
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
 800c586:	bf00      	nop
 800c588:	feff8fff 	.word	0xfeff8fff
 800c58c:	40010000 	.word	0x40010000
 800c590:	40010400 	.word	0x40010400
 800c594:	40014000 	.word	0x40014000
 800c598:	40014400 	.word	0x40014400
 800c59c:	40014800 	.word	0x40014800

0800c5a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b087      	sub	sp, #28
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6a1b      	ldr	r3, [r3, #32]
 800c5ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6a1b      	ldr	r3, [r3, #32]
 800c5ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c5c8:	68fa      	ldr	r2, [r7, #12]
 800c5ca:	4b21      	ldr	r3, [pc, #132]	; (800c650 <TIM_OC5_SetConfig+0xb0>)
 800c5cc:	4013      	ands	r3, r2
 800c5ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	68fa      	ldr	r2, [r7, #12]
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c5e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	041b      	lsls	r3, r3, #16
 800c5e8:	693a      	ldr	r2, [r7, #16]
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	4a18      	ldr	r2, [pc, #96]	; (800c654 <TIM_OC5_SetConfig+0xb4>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d00f      	beq.n	800c616 <TIM_OC5_SetConfig+0x76>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	4a17      	ldr	r2, [pc, #92]	; (800c658 <TIM_OC5_SetConfig+0xb8>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d00b      	beq.n	800c616 <TIM_OC5_SetConfig+0x76>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	4a16      	ldr	r2, [pc, #88]	; (800c65c <TIM_OC5_SetConfig+0xbc>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d007      	beq.n	800c616 <TIM_OC5_SetConfig+0x76>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	4a15      	ldr	r2, [pc, #84]	; (800c660 <TIM_OC5_SetConfig+0xc0>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d003      	beq.n	800c616 <TIM_OC5_SetConfig+0x76>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	4a14      	ldr	r2, [pc, #80]	; (800c664 <TIM_OC5_SetConfig+0xc4>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d109      	bne.n	800c62a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c61c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	695b      	ldr	r3, [r3, #20]
 800c622:	021b      	lsls	r3, r3, #8
 800c624:	697a      	ldr	r2, [r7, #20]
 800c626:	4313      	orrs	r3, r2
 800c628:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	697a      	ldr	r2, [r7, #20]
 800c62e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	68fa      	ldr	r2, [r7, #12]
 800c634:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	685a      	ldr	r2, [r3, #4]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	693a      	ldr	r2, [r7, #16]
 800c642:	621a      	str	r2, [r3, #32]
}
 800c644:	bf00      	nop
 800c646:	371c      	adds	r7, #28
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr
 800c650:	fffeff8f 	.word	0xfffeff8f
 800c654:	40010000 	.word	0x40010000
 800c658:	40010400 	.word	0x40010400
 800c65c:	40014000 	.word	0x40014000
 800c660:	40014400 	.word	0x40014400
 800c664:	40014800 	.word	0x40014800

0800c668 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c668:	b480      	push	{r7}
 800c66a:	b087      	sub	sp, #28
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6a1b      	ldr	r3, [r3, #32]
 800c676:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6a1b      	ldr	r3, [r3, #32]
 800c682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c68e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	4b22      	ldr	r3, [pc, #136]	; (800c71c <TIM_OC6_SetConfig+0xb4>)
 800c694:	4013      	ands	r3, r2
 800c696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	021b      	lsls	r3, r3, #8
 800c69e:	68fa      	ldr	r2, [r7, #12]
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c6aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	051b      	lsls	r3, r3, #20
 800c6b2:	693a      	ldr	r2, [r7, #16]
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	4a19      	ldr	r2, [pc, #100]	; (800c720 <TIM_OC6_SetConfig+0xb8>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d00f      	beq.n	800c6e0 <TIM_OC6_SetConfig+0x78>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	4a18      	ldr	r2, [pc, #96]	; (800c724 <TIM_OC6_SetConfig+0xbc>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d00b      	beq.n	800c6e0 <TIM_OC6_SetConfig+0x78>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	4a17      	ldr	r2, [pc, #92]	; (800c728 <TIM_OC6_SetConfig+0xc0>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d007      	beq.n	800c6e0 <TIM_OC6_SetConfig+0x78>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	4a16      	ldr	r2, [pc, #88]	; (800c72c <TIM_OC6_SetConfig+0xc4>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d003      	beq.n	800c6e0 <TIM_OC6_SetConfig+0x78>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	4a15      	ldr	r2, [pc, #84]	; (800c730 <TIM_OC6_SetConfig+0xc8>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d109      	bne.n	800c6f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c6e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	695b      	ldr	r3, [r3, #20]
 800c6ec:	029b      	lsls	r3, r3, #10
 800c6ee:	697a      	ldr	r2, [r7, #20]
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	697a      	ldr	r2, [r7, #20]
 800c6f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	68fa      	ldr	r2, [r7, #12]
 800c6fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	685a      	ldr	r2, [r3, #4]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	693a      	ldr	r2, [r7, #16]
 800c70c:	621a      	str	r2, [r3, #32]
}
 800c70e:	bf00      	nop
 800c710:	371c      	adds	r7, #28
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	feff8fff 	.word	0xfeff8fff
 800c720:	40010000 	.word	0x40010000
 800c724:	40010400 	.word	0x40010400
 800c728:	40014000 	.word	0x40014000
 800c72c:	40014400 	.word	0x40014400
 800c730:	40014800 	.word	0x40014800

0800c734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c734:	b480      	push	{r7}
 800c736:	b087      	sub	sp, #28
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	6a1b      	ldr	r3, [r3, #32]
 800c744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	6a1b      	ldr	r3, [r3, #32]
 800c74a:	f023 0201 	bic.w	r2, r3, #1
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	699b      	ldr	r3, [r3, #24]
 800c756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c75e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	011b      	lsls	r3, r3, #4
 800c764:	693a      	ldr	r2, [r7, #16]
 800c766:	4313      	orrs	r3, r2
 800c768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	f023 030a 	bic.w	r3, r3, #10
 800c770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c772:	697a      	ldr	r2, [r7, #20]
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	4313      	orrs	r3, r2
 800c778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	693a      	ldr	r2, [r7, #16]
 800c77e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	697a      	ldr	r2, [r7, #20]
 800c784:	621a      	str	r2, [r3, #32]
}
 800c786:	bf00      	nop
 800c788:	371c      	adds	r7, #28
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr

0800c792 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c792:	b480      	push	{r7}
 800c794:	b087      	sub	sp, #28
 800c796:	af00      	add	r7, sp, #0
 800c798:	60f8      	str	r0, [r7, #12]
 800c79a:	60b9      	str	r1, [r7, #8]
 800c79c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	6a1b      	ldr	r3, [r3, #32]
 800c7a2:	f023 0210 	bic.w	r2, r3, #16
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	699b      	ldr	r3, [r3, #24]
 800c7ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	6a1b      	ldr	r3, [r3, #32]
 800c7b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c7bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	031b      	lsls	r3, r3, #12
 800c7c2:	697a      	ldr	r2, [r7, #20]
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c7ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	011b      	lsls	r3, r3, #4
 800c7d4:	693a      	ldr	r2, [r7, #16]
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	697a      	ldr	r2, [r7, #20]
 800c7de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	693a      	ldr	r2, [r7, #16]
 800c7e4:	621a      	str	r2, [r3, #32]
}
 800c7e6:	bf00      	nop
 800c7e8:	371c      	adds	r7, #28
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
	...

0800c7f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	4b09      	ldr	r3, [pc, #36]	; (800c82c <TIM_ITRx_SetConfig+0x38>)
 800c808:	4013      	ands	r3, r2
 800c80a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c80c:	683a      	ldr	r2, [r7, #0]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	4313      	orrs	r3, r2
 800c812:	f043 0307 	orr.w	r3, r3, #7
 800c816:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	68fa      	ldr	r2, [r7, #12]
 800c81c:	609a      	str	r2, [r3, #8]
}
 800c81e:	bf00      	nop
 800c820:	3714      	adds	r7, #20
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	ffcfff8f 	.word	0xffcfff8f

0800c830 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c830:	b480      	push	{r7}
 800c832:	b087      	sub	sp, #28
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	60b9      	str	r1, [r7, #8]
 800c83a:	607a      	str	r2, [r7, #4]
 800c83c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c84a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	021a      	lsls	r2, r3, #8
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	431a      	orrs	r2, r3
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	4313      	orrs	r3, r2
 800c858:	697a      	ldr	r2, [r7, #20]
 800c85a:	4313      	orrs	r3, r2
 800c85c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	697a      	ldr	r2, [r7, #20]
 800c862:	609a      	str	r2, [r3, #8]
}
 800c864:	bf00      	nop
 800c866:	371c      	adds	r7, #28
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c870:	b480      	push	{r7}
 800c872:	b087      	sub	sp, #28
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	f003 031f 	and.w	r3, r3, #31
 800c882:	2201      	movs	r2, #1
 800c884:	fa02 f303 	lsl.w	r3, r2, r3
 800c888:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	6a1a      	ldr	r2, [r3, #32]
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	43db      	mvns	r3, r3
 800c892:	401a      	ands	r2, r3
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6a1a      	ldr	r2, [r3, #32]
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	f003 031f 	and.w	r3, r3, #31
 800c8a2:	6879      	ldr	r1, [r7, #4]
 800c8a4:	fa01 f303 	lsl.w	r3, r1, r3
 800c8a8:	431a      	orrs	r2, r3
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	621a      	str	r2, [r3, #32]
}
 800c8ae:	bf00      	nop
 800c8b0:	371c      	adds	r7, #28
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr
	...

0800c8bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b085      	sub	sp, #20
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d101      	bne.n	800c8d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c8d0:	2302      	movs	r3, #2
 800c8d2:	e077      	b.n	800c9c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2202      	movs	r2, #2
 800c8e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a35      	ldr	r2, [pc, #212]	; (800c9d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d004      	beq.n	800c908 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4a34      	ldr	r2, [pc, #208]	; (800c9d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d108      	bne.n	800c91a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c90e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	4313      	orrs	r3, r2
 800c918:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c920:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	4313      	orrs	r3, r2
 800c92a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	68fa      	ldr	r2, [r7, #12]
 800c932:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4a25      	ldr	r2, [pc, #148]	; (800c9d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d02c      	beq.n	800c998 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c946:	d027      	beq.n	800c998 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a22      	ldr	r2, [pc, #136]	; (800c9d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d022      	beq.n	800c998 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4a21      	ldr	r2, [pc, #132]	; (800c9dc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d01d      	beq.n	800c998 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a1f      	ldr	r2, [pc, #124]	; (800c9e0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d018      	beq.n	800c998 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a1a      	ldr	r2, [pc, #104]	; (800c9d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d013      	beq.n	800c998 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a1b      	ldr	r2, [pc, #108]	; (800c9e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d00e      	beq.n	800c998 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4a1a      	ldr	r2, [pc, #104]	; (800c9e8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c980:	4293      	cmp	r3, r2
 800c982:	d009      	beq.n	800c998 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a18      	ldr	r2, [pc, #96]	; (800c9ec <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d004      	beq.n	800c998 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a17      	ldr	r2, [pc, #92]	; (800c9f0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d10c      	bne.n	800c9b2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c99e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	68ba      	ldr	r2, [r7, #8]
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	68ba      	ldr	r2, [r7, #8]
 800c9b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9c2:	2300      	movs	r3, #0
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3714      	adds	r7, #20
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr
 800c9d0:	40010000 	.word	0x40010000
 800c9d4:	40010400 	.word	0x40010400
 800c9d8:	40000400 	.word	0x40000400
 800c9dc:	40000800 	.word	0x40000800
 800c9e0:	40000c00 	.word	0x40000c00
 800c9e4:	40001800 	.word	0x40001800
 800c9e8:	40014000 	.word	0x40014000
 800c9ec:	4000e000 	.word	0x4000e000
 800c9f0:	4000e400 	.word	0x4000e400

0800c9f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b085      	sub	sp, #20
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d101      	bne.n	800ca10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ca0c:	2302      	movs	r3, #2
 800ca0e:	e087      	b.n	800cb20 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2201      	movs	r2, #1
 800ca14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	4313      	orrs	r3, r2
 800ca24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	689b      	ldr	r3, [r3, #8]
 800ca30:	4313      	orrs	r3, r2
 800ca32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	691b      	ldr	r3, [r3, #16]
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	695b      	ldr	r3, [r3, #20]
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca76:	4313      	orrs	r3, r2
 800ca78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	699b      	ldr	r3, [r3, #24]
 800ca84:	041b      	lsls	r3, r3, #16
 800ca86:	4313      	orrs	r3, r2
 800ca88:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a27      	ldr	r2, [pc, #156]	; (800cb2c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d004      	beq.n	800ca9e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a25      	ldr	r2, [pc, #148]	; (800cb30 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d106      	bne.n	800caac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	69db      	ldr	r3, [r3, #28]
 800caa8:	4313      	orrs	r3, r2
 800caaa:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4a1e      	ldr	r2, [pc, #120]	; (800cb2c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d004      	beq.n	800cac0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4a1d      	ldr	r2, [pc, #116]	; (800cb30 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d126      	bne.n	800cb0e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caca:	051b      	lsls	r3, r3, #20
 800cacc:	4313      	orrs	r3, r2
 800cace:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	6a1b      	ldr	r3, [r3, #32]
 800cada:	4313      	orrs	r3, r2
 800cadc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae8:	4313      	orrs	r3, r2
 800caea:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4a0e      	ldr	r2, [pc, #56]	; (800cb2c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d004      	beq.n	800cb00 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4a0d      	ldr	r2, [pc, #52]	; (800cb30 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d106      	bne.n	800cb0e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3714      	adds	r7, #20
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	40010000 	.word	0x40010000
 800cb30:	40010400 	.word	0x40010400

0800cb34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb3c:	bf00      	nop
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b083      	sub	sp, #12
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb50:	bf00      	nop
 800cb52:	370c      	adds	r7, #12
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cb64:	bf00      	nop
 800cb66:	370c      	adds	r7, #12
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr

0800cb70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d101      	bne.n	800cb82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	e042      	b.n	800cc08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d106      	bne.n	800cb9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f7f8 f85d 	bl	8004c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2224      	movs	r2, #36	; 0x24
 800cb9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	681a      	ldr	r2, [r3, #0]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f022 0201 	bic.w	r2, r2, #1
 800cbb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 fd1c 	bl	800d5f0 <UART_SetConfig>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d101      	bne.n	800cbc2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e022      	b.n	800cc08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d002      	beq.n	800cbd0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f001 fb7c 	bl	800e2c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	685a      	ldr	r2, [r3, #4]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cbde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	689a      	ldr	r2, [r3, #8]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cbee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f042 0201 	orr.w	r2, r2, #1
 800cbfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f001 fc03 	bl	800e40c <UART_CheckIdleState>
 800cc06:	4603      	mov	r3, r0
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3708      	adds	r7, #8
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d101      	bne.n	800cc22 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e031      	b.n	800cc86 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2224      	movs	r2, #36	; 0x24
 800cc26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f022 0201 	bic.w	r2, r2, #1
 800cc38:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2200      	movs	r2, #0
 800cc48:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f7f8 f8d6 	bl	8004e04 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2200      	movs	r2, #0
 800cc64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2200      	movs	r2, #0
 800cc74:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cc84:	2300      	movs	r3, #0
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3708      	adds	r7, #8
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
	...

0800cc90 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b08a      	sub	sp, #40	; 0x28
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cca4:	2b20      	cmp	r3, #32
 800cca6:	d167      	bne.n	800cd78 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d002      	beq.n	800ccb4 <HAL_UART_Transmit_DMA+0x24>
 800ccae:	88fb      	ldrh	r3, [r7, #6]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d101      	bne.n	800ccb8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e060      	b.n	800cd7a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	68ba      	ldr	r2, [r7, #8]
 800ccbc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	88fa      	ldrh	r2, [r7, #6]
 800ccc2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	88fa      	ldrh	r2, [r7, #6]
 800ccca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2221      	movs	r2, #33	; 0x21
 800ccda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d028      	beq.n	800cd38 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccea:	4a26      	ldr	r2, [pc, #152]	; (800cd84 <HAL_UART_Transmit_DMA+0xf4>)
 800ccec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccf2:	4a25      	ldr	r2, [pc, #148]	; (800cd88 <HAL_UART_Transmit_DMA+0xf8>)
 800ccf4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccfa:	4a24      	ldr	r2, [pc, #144]	; (800cd8c <HAL_UART_Transmit_DMA+0xfc>)
 800ccfc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd02:	2200      	movs	r2, #0
 800cd04:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd0e:	4619      	mov	r1, r3
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	3328      	adds	r3, #40	; 0x28
 800cd16:	461a      	mov	r2, r3
 800cd18:	88fb      	ldrh	r3, [r7, #6]
 800cd1a:	f7f8 ffaf 	bl	8005c7c <HAL_DMA_Start_IT>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d009      	beq.n	800cd38 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2210      	movs	r2, #16
 800cd28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2220      	movs	r2, #32
 800cd30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800cd34:	2301      	movs	r3, #1
 800cd36:	e020      	b.n	800cd7a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2240      	movs	r2, #64	; 0x40
 800cd3e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	3308      	adds	r3, #8
 800cd46:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	e853 3f00 	ldrex	r3, [r3]
 800cd4e:	613b      	str	r3, [r7, #16]
   return(result);
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd56:	627b      	str	r3, [r7, #36]	; 0x24
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	3308      	adds	r3, #8
 800cd5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd60:	623a      	str	r2, [r7, #32]
 800cd62:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd64:	69f9      	ldr	r1, [r7, #28]
 800cd66:	6a3a      	ldr	r2, [r7, #32]
 800cd68:	e841 2300 	strex	r3, r2, [r1]
 800cd6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd6e:	69bb      	ldr	r3, [r7, #24]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d1e5      	bne.n	800cd40 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800cd74:	2300      	movs	r3, #0
 800cd76:	e000      	b.n	800cd7a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800cd78:	2302      	movs	r3, #2
  }
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3728      	adds	r7, #40	; 0x28
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	0800e8cd 	.word	0x0800e8cd
 800cd88:	0800e963 	.word	0x0800e963
 800cd8c:	0800eae5 	.word	0x0800eae5

0800cd90 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b08a      	sub	sp, #40	; 0x28
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	60f8      	str	r0, [r7, #12]
 800cd98:	60b9      	str	r1, [r7, #8]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cda4:	2b20      	cmp	r3, #32
 800cda6:	d137      	bne.n	800ce18 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d002      	beq.n	800cdb4 <HAL_UART_Receive_DMA+0x24>
 800cdae:	88fb      	ldrh	r3, [r7, #6]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d101      	bne.n	800cdb8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	e030      	b.n	800ce1a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4a18      	ldr	r2, [pc, #96]	; (800ce24 <HAL_UART_Receive_DMA+0x94>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d01f      	beq.n	800ce08 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	685b      	ldr	r3, [r3, #4]
 800cdce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d018      	beq.n	800ce08 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	e853 3f00 	ldrex	r3, [r3]
 800cde2:	613b      	str	r3, [r7, #16]
   return(result);
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cdea:	627b      	str	r3, [r7, #36]	; 0x24
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf4:	623b      	str	r3, [r7, #32]
 800cdf6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf8:	69f9      	ldr	r1, [r7, #28]
 800cdfa:	6a3a      	ldr	r2, [r7, #32]
 800cdfc:	e841 2300 	strex	r3, r2, [r1]
 800ce00:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d1e6      	bne.n	800cdd6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ce08:	88fb      	ldrh	r3, [r7, #6]
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	68b9      	ldr	r1, [r7, #8]
 800ce0e:	68f8      	ldr	r0, [r7, #12]
 800ce10:	f001 fc0e 	bl	800e630 <UART_Start_Receive_DMA>
 800ce14:	4603      	mov	r3, r0
 800ce16:	e000      	b.n	800ce1a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ce18:	2302      	movs	r3, #2
  }
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3728      	adds	r7, #40	; 0x28
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}
 800ce22:	bf00      	nop
 800ce24:	58000c00 	.word	0x58000c00

0800ce28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b0ba      	sub	sp, #232	; 0xe8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	69db      	ldr	r3, [r3, #28]
 800ce36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	689b      	ldr	r3, [r3, #8]
 800ce4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ce4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ce52:	f640 030f 	movw	r3, #2063	; 0x80f
 800ce56:	4013      	ands	r3, r2
 800ce58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ce5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d11b      	bne.n	800ce9c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ce64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce68:	f003 0320 	and.w	r3, r3, #32
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d015      	beq.n	800ce9c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ce70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce74:	f003 0320 	and.w	r3, r3, #32
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d105      	bne.n	800ce88 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ce7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d009      	beq.n	800ce9c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f000 8377 	beq.w	800d580 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	4798      	blx	r3
      }
      return;
 800ce9a:	e371      	b.n	800d580 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ce9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f000 8123 	beq.w	800d0ec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cea6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ceaa:	4b8d      	ldr	r3, [pc, #564]	; (800d0e0 <HAL_UART_IRQHandler+0x2b8>)
 800ceac:	4013      	ands	r3, r2
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d106      	bne.n	800cec0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ceb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ceb6:	4b8b      	ldr	r3, [pc, #556]	; (800d0e4 <HAL_UART_IRQHandler+0x2bc>)
 800ceb8:	4013      	ands	r3, r2
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	f000 8116 	beq.w	800d0ec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cec4:	f003 0301 	and.w	r3, r3, #1
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d011      	beq.n	800cef0 <HAL_UART_IRQHandler+0xc8>
 800cecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ced0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d00b      	beq.n	800cef0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2201      	movs	r2, #1
 800cede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cee6:	f043 0201 	orr.w	r2, r3, #1
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cef4:	f003 0302 	and.w	r3, r3, #2
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d011      	beq.n	800cf20 <HAL_UART_IRQHandler+0xf8>
 800cefc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf00:	f003 0301 	and.w	r3, r3, #1
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d00b      	beq.n	800cf20 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2202      	movs	r2, #2
 800cf0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf16:	f043 0204 	orr.w	r2, r3, #4
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf24:	f003 0304 	and.w	r3, r3, #4
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d011      	beq.n	800cf50 <HAL_UART_IRQHandler+0x128>
 800cf2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf30:	f003 0301 	and.w	r3, r3, #1
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d00b      	beq.n	800cf50 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2204      	movs	r2, #4
 800cf3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf46:	f043 0202 	orr.w	r2, r3, #2
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cf50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf54:	f003 0308 	and.w	r3, r3, #8
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d017      	beq.n	800cf8c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cf5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf60:	f003 0320 	and.w	r3, r3, #32
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d105      	bne.n	800cf74 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cf68:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cf6c:	4b5c      	ldr	r3, [pc, #368]	; (800d0e0 <HAL_UART_IRQHandler+0x2b8>)
 800cf6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d00b      	beq.n	800cf8c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2208      	movs	r2, #8
 800cf7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf82:	f043 0208 	orr.w	r2, r3, #8
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cf8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d012      	beq.n	800cfbe <HAL_UART_IRQHandler+0x196>
 800cf98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d00c      	beq.n	800cfbe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfb4:	f043 0220 	orr.w	r2, r3, #32
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f000 82dd 	beq.w	800d584 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cfca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfce:	f003 0320 	and.w	r3, r3, #32
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d013      	beq.n	800cffe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cfd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfda:	f003 0320 	and.w	r3, r3, #32
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d105      	bne.n	800cfee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cfe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d007      	beq.n	800cffe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d003      	beq.n	800cffe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d004:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d012:	2b40      	cmp	r3, #64	; 0x40
 800d014:	d005      	beq.n	800d022 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d01a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d054      	beq.n	800d0cc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f001 fbec 	bl	800e800 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d032:	2b40      	cmp	r3, #64	; 0x40
 800d034:	d146      	bne.n	800d0c4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	3308      	adds	r3, #8
 800d03c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d040:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d044:	e853 3f00 	ldrex	r3, [r3]
 800d048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d04c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d054:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	3308      	adds	r3, #8
 800d05e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d062:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d066:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d06a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d06e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d072:	e841 2300 	strex	r3, r2, [r1]
 800d076:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d07a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d1d9      	bne.n	800d036 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d017      	beq.n	800d0bc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d092:	4a15      	ldr	r2, [pc, #84]	; (800d0e8 <HAL_UART_IRQHandler+0x2c0>)
 800d094:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7f9 fb75 	bl	800678c <HAL_DMA_Abort_IT>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d019      	beq.n	800d0dc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d0b6:	4610      	mov	r0, r2
 800d0b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0ba:	e00f      	b.n	800d0dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f7f4 faaf 	bl	8001620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0c2:	e00b      	b.n	800d0dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f7f4 faab 	bl	8001620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0ca:	e007      	b.n	800d0dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f7f4 faa7 	bl	8001620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d0da:	e253      	b.n	800d584 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0dc:	bf00      	nop
    return;
 800d0de:	e251      	b.n	800d584 <HAL_UART_IRQHandler+0x75c>
 800d0e0:	10000001 	.word	0x10000001
 800d0e4:	04000120 	.word	0x04000120
 800d0e8:	0800eb65 	.word	0x0800eb65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	f040 81e7 	bne.w	800d4c4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d0f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0fa:	f003 0310 	and.w	r3, r3, #16
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	f000 81e0 	beq.w	800d4c4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d108:	f003 0310 	and.w	r3, r3, #16
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	f000 81d9 	beq.w	800d4c4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2210      	movs	r2, #16
 800d118:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	689b      	ldr	r3, [r3, #8]
 800d120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d124:	2b40      	cmp	r3, #64	; 0x40
 800d126:	f040 8151 	bne.w	800d3cc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4a96      	ldr	r2, [pc, #600]	; (800d38c <HAL_UART_IRQHandler+0x564>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d068      	beq.n	800d20a <HAL_UART_IRQHandler+0x3e2>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a93      	ldr	r2, [pc, #588]	; (800d390 <HAL_UART_IRQHandler+0x568>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d061      	beq.n	800d20a <HAL_UART_IRQHandler+0x3e2>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4a91      	ldr	r2, [pc, #580]	; (800d394 <HAL_UART_IRQHandler+0x56c>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d05a      	beq.n	800d20a <HAL_UART_IRQHandler+0x3e2>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4a8e      	ldr	r2, [pc, #568]	; (800d398 <HAL_UART_IRQHandler+0x570>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d053      	beq.n	800d20a <HAL_UART_IRQHandler+0x3e2>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a8c      	ldr	r2, [pc, #560]	; (800d39c <HAL_UART_IRQHandler+0x574>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d04c      	beq.n	800d20a <HAL_UART_IRQHandler+0x3e2>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a89      	ldr	r2, [pc, #548]	; (800d3a0 <HAL_UART_IRQHandler+0x578>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d045      	beq.n	800d20a <HAL_UART_IRQHandler+0x3e2>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4a87      	ldr	r2, [pc, #540]	; (800d3a4 <HAL_UART_IRQHandler+0x57c>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d03e      	beq.n	800d20a <HAL_UART_IRQHandler+0x3e2>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4a84      	ldr	r2, [pc, #528]	; (800d3a8 <HAL_UART_IRQHandler+0x580>)
 800d196:	4293      	cmp	r3, r2
 800d198:	d037      	beq.n	800d20a <HAL_UART_IRQHandler+0x3e2>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4a82      	ldr	r2, [pc, #520]	; (800d3ac <HAL_UART_IRQHandler+0x584>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d030      	beq.n	800d20a <HAL_UART_IRQHandler+0x3e2>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a7f      	ldr	r2, [pc, #508]	; (800d3b0 <HAL_UART_IRQHandler+0x588>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d029      	beq.n	800d20a <HAL_UART_IRQHandler+0x3e2>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4a7d      	ldr	r2, [pc, #500]	; (800d3b4 <HAL_UART_IRQHandler+0x58c>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d022      	beq.n	800d20a <HAL_UART_IRQHandler+0x3e2>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4a7a      	ldr	r2, [pc, #488]	; (800d3b8 <HAL_UART_IRQHandler+0x590>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d01b      	beq.n	800d20a <HAL_UART_IRQHandler+0x3e2>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a78      	ldr	r2, [pc, #480]	; (800d3bc <HAL_UART_IRQHandler+0x594>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d014      	beq.n	800d20a <HAL_UART_IRQHandler+0x3e2>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a75      	ldr	r2, [pc, #468]	; (800d3c0 <HAL_UART_IRQHandler+0x598>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d00d      	beq.n	800d20a <HAL_UART_IRQHandler+0x3e2>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a73      	ldr	r2, [pc, #460]	; (800d3c4 <HAL_UART_IRQHandler+0x59c>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d006      	beq.n	800d20a <HAL_UART_IRQHandler+0x3e2>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4a70      	ldr	r2, [pc, #448]	; (800d3c8 <HAL_UART_IRQHandler+0x5a0>)
 800d206:	4293      	cmp	r3, r2
 800d208:	d106      	bne.n	800d218 <HAL_UART_IRQHandler+0x3f0>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	b29b      	uxth	r3, r3
 800d216:	e005      	b.n	800d224 <HAL_UART_IRQHandler+0x3fc>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	685b      	ldr	r3, [r3, #4]
 800d222:	b29b      	uxth	r3, r3
 800d224:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d228:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	f000 81ab 	beq.w	800d588 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d238:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d23c:	429a      	cmp	r2, r3
 800d23e:	f080 81a3 	bcs.w	800d588 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d248:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d252:	69db      	ldr	r3, [r3, #28]
 800d254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d258:	f000 8087 	beq.w	800d36a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d264:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d268:	e853 3f00 	ldrex	r3, [r3]
 800d26c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d270:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	461a      	mov	r2, r3
 800d282:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d286:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d28a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d28e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d292:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d296:	e841 2300 	strex	r3, r2, [r1]
 800d29a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d29e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d1da      	bne.n	800d25c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	3308      	adds	r3, #8
 800d2ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2b0:	e853 3f00 	ldrex	r3, [r3]
 800d2b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d2b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d2b8:	f023 0301 	bic.w	r3, r3, #1
 800d2bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	3308      	adds	r3, #8
 800d2c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d2ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d2ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d2d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d2d6:	e841 2300 	strex	r3, r2, [r1]
 800d2da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d2dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d1e1      	bne.n	800d2a6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	3308      	adds	r3, #8
 800d2e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2ec:	e853 3f00 	ldrex	r3, [r3]
 800d2f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d2f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	3308      	adds	r3, #8
 800d302:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d306:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d308:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d30a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d30c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d30e:	e841 2300 	strex	r3, r2, [r1]
 800d312:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d316:	2b00      	cmp	r3, #0
 800d318:	d1e3      	bne.n	800d2e2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2220      	movs	r2, #32
 800d31e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2200      	movs	r2, #0
 800d326:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d32e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d330:	e853 3f00 	ldrex	r3, [r3]
 800d334:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d338:	f023 0310 	bic.w	r3, r3, #16
 800d33c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	461a      	mov	r2, r3
 800d346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d34a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d34c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d34e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d350:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d352:	e841 2300 	strex	r3, r2, [r1]
 800d356:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d1e4      	bne.n	800d328 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d364:	4618      	mov	r0, r3
 800d366:	f7f8 fef3 	bl	8006150 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2202      	movs	r2, #2
 800d36e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	1ad3      	subs	r3, r2, r3
 800d380:	b29b      	uxth	r3, r3
 800d382:	4619      	mov	r1, r3
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 f927 	bl	800d5d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d38a:	e0fd      	b.n	800d588 <HAL_UART_IRQHandler+0x760>
 800d38c:	40020010 	.word	0x40020010
 800d390:	40020028 	.word	0x40020028
 800d394:	40020040 	.word	0x40020040
 800d398:	40020058 	.word	0x40020058
 800d39c:	40020070 	.word	0x40020070
 800d3a0:	40020088 	.word	0x40020088
 800d3a4:	400200a0 	.word	0x400200a0
 800d3a8:	400200b8 	.word	0x400200b8
 800d3ac:	40020410 	.word	0x40020410
 800d3b0:	40020428 	.word	0x40020428
 800d3b4:	40020440 	.word	0x40020440
 800d3b8:	40020458 	.word	0x40020458
 800d3bc:	40020470 	.word	0x40020470
 800d3c0:	40020488 	.word	0x40020488
 800d3c4:	400204a0 	.word	0x400204a0
 800d3c8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3d8:	b29b      	uxth	r3, r3
 800d3da:	1ad3      	subs	r3, r2, r3
 800d3dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	f000 80cf 	beq.w	800d58c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d3ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f000 80ca 	beq.w	800d58c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d400:	e853 3f00 	ldrex	r3, [r3]
 800d404:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d408:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d40c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	461a      	mov	r2, r3
 800d416:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d41a:	647b      	str	r3, [r7, #68]	; 0x44
 800d41c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d420:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d422:	e841 2300 	strex	r3, r2, [r1]
 800d426:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d1e4      	bne.n	800d3f8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	3308      	adds	r3, #8
 800d434:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d438:	e853 3f00 	ldrex	r3, [r3]
 800d43c:	623b      	str	r3, [r7, #32]
   return(result);
 800d43e:	6a3a      	ldr	r2, [r7, #32]
 800d440:	4b55      	ldr	r3, [pc, #340]	; (800d598 <HAL_UART_IRQHandler+0x770>)
 800d442:	4013      	ands	r3, r2
 800d444:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	3308      	adds	r3, #8
 800d44e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d452:	633a      	str	r2, [r7, #48]	; 0x30
 800d454:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d456:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d45a:	e841 2300 	strex	r3, r2, [r1]
 800d45e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d462:	2b00      	cmp	r3, #0
 800d464:	d1e3      	bne.n	800d42e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2220      	movs	r2, #32
 800d46a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2200      	movs	r2, #0
 800d472:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2200      	movs	r2, #0
 800d478:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	e853 3f00 	ldrex	r3, [r3]
 800d486:	60fb      	str	r3, [r7, #12]
   return(result);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f023 0310 	bic.w	r3, r3, #16
 800d48e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	461a      	mov	r2, r3
 800d498:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d49c:	61fb      	str	r3, [r7, #28]
 800d49e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a0:	69b9      	ldr	r1, [r7, #24]
 800d4a2:	69fa      	ldr	r2, [r7, #28]
 800d4a4:	e841 2300 	strex	r3, r2, [r1]
 800d4a8:	617b      	str	r3, [r7, #20]
   return(result);
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d1e4      	bne.n	800d47a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2202      	movs	r2, #2
 800d4b4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d4b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 f88b 	bl	800d5d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d4c2:	e063      	b.n	800d58c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d4c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d00e      	beq.n	800d4ee <HAL_UART_IRQHandler+0x6c6>
 800d4d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d008      	beq.n	800d4ee <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d4e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f001 fb7d 	bl	800ebe6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d4ec:	e051      	b.n	800d592 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d014      	beq.n	800d524 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d4fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d502:	2b00      	cmp	r3, #0
 800d504:	d105      	bne.n	800d512 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d50a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d008      	beq.n	800d524 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d516:	2b00      	cmp	r3, #0
 800d518:	d03a      	beq.n	800d590 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	4798      	blx	r3
    }
    return;
 800d522:	e035      	b.n	800d590 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d009      	beq.n	800d544 <HAL_UART_IRQHandler+0x71c>
 800d530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d003      	beq.n	800d544 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f001 fb27 	bl	800eb90 <UART_EndTransmit_IT>
    return;
 800d542:	e026      	b.n	800d592 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d548:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d009      	beq.n	800d564 <HAL_UART_IRQHandler+0x73c>
 800d550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d554:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d003      	beq.n	800d564 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f001 fb56 	bl	800ec0e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d562:	e016      	b.n	800d592 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d010      	beq.n	800d592 <HAL_UART_IRQHandler+0x76a>
 800d570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d574:	2b00      	cmp	r3, #0
 800d576:	da0c      	bge.n	800d592 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f001 fb3e 	bl	800ebfa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d57e:	e008      	b.n	800d592 <HAL_UART_IRQHandler+0x76a>
      return;
 800d580:	bf00      	nop
 800d582:	e006      	b.n	800d592 <HAL_UART_IRQHandler+0x76a>
    return;
 800d584:	bf00      	nop
 800d586:	e004      	b.n	800d592 <HAL_UART_IRQHandler+0x76a>
      return;
 800d588:	bf00      	nop
 800d58a:	e002      	b.n	800d592 <HAL_UART_IRQHandler+0x76a>
      return;
 800d58c:	bf00      	nop
 800d58e:	e000      	b.n	800d592 <HAL_UART_IRQHandler+0x76a>
    return;
 800d590:	bf00      	nop
  }
}
 800d592:	37e8      	adds	r7, #232	; 0xe8
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	effffffe 	.word	0xeffffffe

0800d59c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d5a4:	bf00      	nop
 800d5a6:	370c      	adds	r7, #12
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr

0800d5b0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b083      	sub	sp, #12
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d5b8:	bf00      	nop
 800d5ba:	370c      	adds	r7, #12
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b083      	sub	sp, #12
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d5cc:	bf00      	nop
 800d5ce:	370c      	adds	r7, #12
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr

0800d5d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b083      	sub	sp, #12
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d5e4:	bf00      	nop
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr

0800d5f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d5f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d5f4:	b092      	sub	sp, #72	; 0x48
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	689a      	ldr	r2, [r3, #8]
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	691b      	ldr	r3, [r3, #16]
 800d608:	431a      	orrs	r2, r3
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	695b      	ldr	r3, [r3, #20]
 800d60e:	431a      	orrs	r2, r3
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	69db      	ldr	r3, [r3, #28]
 800d614:	4313      	orrs	r3, r2
 800d616:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	4bbe      	ldr	r3, [pc, #760]	; (800d918 <UART_SetConfig+0x328>)
 800d620:	4013      	ands	r3, r2
 800d622:	697a      	ldr	r2, [r7, #20]
 800d624:	6812      	ldr	r2, [r2, #0]
 800d626:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d628:	430b      	orrs	r3, r1
 800d62a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	68da      	ldr	r2, [r3, #12]
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	430a      	orrs	r2, r1
 800d640:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	699b      	ldr	r3, [r3, #24]
 800d646:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4ab3      	ldr	r2, [pc, #716]	; (800d91c <UART_SetConfig+0x32c>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d004      	beq.n	800d65c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	6a1b      	ldr	r3, [r3, #32]
 800d656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d658:	4313      	orrs	r3, r2
 800d65a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	689a      	ldr	r2, [r3, #8]
 800d662:	4baf      	ldr	r3, [pc, #700]	; (800d920 <UART_SetConfig+0x330>)
 800d664:	4013      	ands	r3, r2
 800d666:	697a      	ldr	r2, [r7, #20]
 800d668:	6812      	ldr	r2, [r2, #0]
 800d66a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d66c:	430b      	orrs	r3, r1
 800d66e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d676:	f023 010f 	bic.w	r1, r3, #15
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	430a      	orrs	r2, r1
 800d684:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4aa6      	ldr	r2, [pc, #664]	; (800d924 <UART_SetConfig+0x334>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d177      	bne.n	800d780 <UART_SetConfig+0x190>
 800d690:	4ba5      	ldr	r3, [pc, #660]	; (800d928 <UART_SetConfig+0x338>)
 800d692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d694:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d698:	2b28      	cmp	r3, #40	; 0x28
 800d69a:	d86d      	bhi.n	800d778 <UART_SetConfig+0x188>
 800d69c:	a201      	add	r2, pc, #4	; (adr r2, 800d6a4 <UART_SetConfig+0xb4>)
 800d69e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a2:	bf00      	nop
 800d6a4:	0800d749 	.word	0x0800d749
 800d6a8:	0800d779 	.word	0x0800d779
 800d6ac:	0800d779 	.word	0x0800d779
 800d6b0:	0800d779 	.word	0x0800d779
 800d6b4:	0800d779 	.word	0x0800d779
 800d6b8:	0800d779 	.word	0x0800d779
 800d6bc:	0800d779 	.word	0x0800d779
 800d6c0:	0800d779 	.word	0x0800d779
 800d6c4:	0800d751 	.word	0x0800d751
 800d6c8:	0800d779 	.word	0x0800d779
 800d6cc:	0800d779 	.word	0x0800d779
 800d6d0:	0800d779 	.word	0x0800d779
 800d6d4:	0800d779 	.word	0x0800d779
 800d6d8:	0800d779 	.word	0x0800d779
 800d6dc:	0800d779 	.word	0x0800d779
 800d6e0:	0800d779 	.word	0x0800d779
 800d6e4:	0800d759 	.word	0x0800d759
 800d6e8:	0800d779 	.word	0x0800d779
 800d6ec:	0800d779 	.word	0x0800d779
 800d6f0:	0800d779 	.word	0x0800d779
 800d6f4:	0800d779 	.word	0x0800d779
 800d6f8:	0800d779 	.word	0x0800d779
 800d6fc:	0800d779 	.word	0x0800d779
 800d700:	0800d779 	.word	0x0800d779
 800d704:	0800d761 	.word	0x0800d761
 800d708:	0800d779 	.word	0x0800d779
 800d70c:	0800d779 	.word	0x0800d779
 800d710:	0800d779 	.word	0x0800d779
 800d714:	0800d779 	.word	0x0800d779
 800d718:	0800d779 	.word	0x0800d779
 800d71c:	0800d779 	.word	0x0800d779
 800d720:	0800d779 	.word	0x0800d779
 800d724:	0800d769 	.word	0x0800d769
 800d728:	0800d779 	.word	0x0800d779
 800d72c:	0800d779 	.word	0x0800d779
 800d730:	0800d779 	.word	0x0800d779
 800d734:	0800d779 	.word	0x0800d779
 800d738:	0800d779 	.word	0x0800d779
 800d73c:	0800d779 	.word	0x0800d779
 800d740:	0800d779 	.word	0x0800d779
 800d744:	0800d771 	.word	0x0800d771
 800d748:	2301      	movs	r3, #1
 800d74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d74e:	e326      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d750:	2304      	movs	r3, #4
 800d752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d756:	e322      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d758:	2308      	movs	r3, #8
 800d75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d75e:	e31e      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d760:	2310      	movs	r3, #16
 800d762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d766:	e31a      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d768:	2320      	movs	r3, #32
 800d76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d76e:	e316      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d770:	2340      	movs	r3, #64	; 0x40
 800d772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d776:	e312      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d778:	2380      	movs	r3, #128	; 0x80
 800d77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d77e:	e30e      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a69      	ldr	r2, [pc, #420]	; (800d92c <UART_SetConfig+0x33c>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d130      	bne.n	800d7ec <UART_SetConfig+0x1fc>
 800d78a:	4b67      	ldr	r3, [pc, #412]	; (800d928 <UART_SetConfig+0x338>)
 800d78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d78e:	f003 0307 	and.w	r3, r3, #7
 800d792:	2b05      	cmp	r3, #5
 800d794:	d826      	bhi.n	800d7e4 <UART_SetConfig+0x1f4>
 800d796:	a201      	add	r2, pc, #4	; (adr r2, 800d79c <UART_SetConfig+0x1ac>)
 800d798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d79c:	0800d7b5 	.word	0x0800d7b5
 800d7a0:	0800d7bd 	.word	0x0800d7bd
 800d7a4:	0800d7c5 	.word	0x0800d7c5
 800d7a8:	0800d7cd 	.word	0x0800d7cd
 800d7ac:	0800d7d5 	.word	0x0800d7d5
 800d7b0:	0800d7dd 	.word	0x0800d7dd
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ba:	e2f0      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d7bc:	2304      	movs	r3, #4
 800d7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7c2:	e2ec      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d7c4:	2308      	movs	r3, #8
 800d7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ca:	e2e8      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d7cc:	2310      	movs	r3, #16
 800d7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7d2:	e2e4      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d7d4:	2320      	movs	r3, #32
 800d7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7da:	e2e0      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d7dc:	2340      	movs	r3, #64	; 0x40
 800d7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7e2:	e2dc      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d7e4:	2380      	movs	r3, #128	; 0x80
 800d7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ea:	e2d8      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4a4f      	ldr	r2, [pc, #316]	; (800d930 <UART_SetConfig+0x340>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d130      	bne.n	800d858 <UART_SetConfig+0x268>
 800d7f6:	4b4c      	ldr	r3, [pc, #304]	; (800d928 <UART_SetConfig+0x338>)
 800d7f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7fa:	f003 0307 	and.w	r3, r3, #7
 800d7fe:	2b05      	cmp	r3, #5
 800d800:	d826      	bhi.n	800d850 <UART_SetConfig+0x260>
 800d802:	a201      	add	r2, pc, #4	; (adr r2, 800d808 <UART_SetConfig+0x218>)
 800d804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d808:	0800d821 	.word	0x0800d821
 800d80c:	0800d829 	.word	0x0800d829
 800d810:	0800d831 	.word	0x0800d831
 800d814:	0800d839 	.word	0x0800d839
 800d818:	0800d841 	.word	0x0800d841
 800d81c:	0800d849 	.word	0x0800d849
 800d820:	2300      	movs	r3, #0
 800d822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d826:	e2ba      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d828:	2304      	movs	r3, #4
 800d82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d82e:	e2b6      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d830:	2308      	movs	r3, #8
 800d832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d836:	e2b2      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d838:	2310      	movs	r3, #16
 800d83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d83e:	e2ae      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d840:	2320      	movs	r3, #32
 800d842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d846:	e2aa      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d848:	2340      	movs	r3, #64	; 0x40
 800d84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d84e:	e2a6      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d850:	2380      	movs	r3, #128	; 0x80
 800d852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d856:	e2a2      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4a35      	ldr	r2, [pc, #212]	; (800d934 <UART_SetConfig+0x344>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d130      	bne.n	800d8c4 <UART_SetConfig+0x2d4>
 800d862:	4b31      	ldr	r3, [pc, #196]	; (800d928 <UART_SetConfig+0x338>)
 800d864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d866:	f003 0307 	and.w	r3, r3, #7
 800d86a:	2b05      	cmp	r3, #5
 800d86c:	d826      	bhi.n	800d8bc <UART_SetConfig+0x2cc>
 800d86e:	a201      	add	r2, pc, #4	; (adr r2, 800d874 <UART_SetConfig+0x284>)
 800d870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d874:	0800d88d 	.word	0x0800d88d
 800d878:	0800d895 	.word	0x0800d895
 800d87c:	0800d89d 	.word	0x0800d89d
 800d880:	0800d8a5 	.word	0x0800d8a5
 800d884:	0800d8ad 	.word	0x0800d8ad
 800d888:	0800d8b5 	.word	0x0800d8b5
 800d88c:	2300      	movs	r3, #0
 800d88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d892:	e284      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d894:	2304      	movs	r3, #4
 800d896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d89a:	e280      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d89c:	2308      	movs	r3, #8
 800d89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8a2:	e27c      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d8a4:	2310      	movs	r3, #16
 800d8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8aa:	e278      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d8ac:	2320      	movs	r3, #32
 800d8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8b2:	e274      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d8b4:	2340      	movs	r3, #64	; 0x40
 800d8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ba:	e270      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d8bc:	2380      	movs	r3, #128	; 0x80
 800d8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8c2:	e26c      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a1b      	ldr	r2, [pc, #108]	; (800d938 <UART_SetConfig+0x348>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d142      	bne.n	800d954 <UART_SetConfig+0x364>
 800d8ce:	4b16      	ldr	r3, [pc, #88]	; (800d928 <UART_SetConfig+0x338>)
 800d8d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8d2:	f003 0307 	and.w	r3, r3, #7
 800d8d6:	2b05      	cmp	r3, #5
 800d8d8:	d838      	bhi.n	800d94c <UART_SetConfig+0x35c>
 800d8da:	a201      	add	r2, pc, #4	; (adr r2, 800d8e0 <UART_SetConfig+0x2f0>)
 800d8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e0:	0800d8f9 	.word	0x0800d8f9
 800d8e4:	0800d901 	.word	0x0800d901
 800d8e8:	0800d909 	.word	0x0800d909
 800d8ec:	0800d911 	.word	0x0800d911
 800d8f0:	0800d93d 	.word	0x0800d93d
 800d8f4:	0800d945 	.word	0x0800d945
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8fe:	e24e      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d900:	2304      	movs	r3, #4
 800d902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d906:	e24a      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d908:	2308      	movs	r3, #8
 800d90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d90e:	e246      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d910:	2310      	movs	r3, #16
 800d912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d916:	e242      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d918:	cfff69f3 	.word	0xcfff69f3
 800d91c:	58000c00 	.word	0x58000c00
 800d920:	11fff4ff 	.word	0x11fff4ff
 800d924:	40011000 	.word	0x40011000
 800d928:	58024400 	.word	0x58024400
 800d92c:	40004400 	.word	0x40004400
 800d930:	40004800 	.word	0x40004800
 800d934:	40004c00 	.word	0x40004c00
 800d938:	40005000 	.word	0x40005000
 800d93c:	2320      	movs	r3, #32
 800d93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d942:	e22c      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d944:	2340      	movs	r3, #64	; 0x40
 800d946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d94a:	e228      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d94c:	2380      	movs	r3, #128	; 0x80
 800d94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d952:	e224      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4ab1      	ldr	r2, [pc, #708]	; (800dc20 <UART_SetConfig+0x630>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d176      	bne.n	800da4c <UART_SetConfig+0x45c>
 800d95e:	4bb1      	ldr	r3, [pc, #708]	; (800dc24 <UART_SetConfig+0x634>)
 800d960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d962:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d966:	2b28      	cmp	r3, #40	; 0x28
 800d968:	d86c      	bhi.n	800da44 <UART_SetConfig+0x454>
 800d96a:	a201      	add	r2, pc, #4	; (adr r2, 800d970 <UART_SetConfig+0x380>)
 800d96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d970:	0800da15 	.word	0x0800da15
 800d974:	0800da45 	.word	0x0800da45
 800d978:	0800da45 	.word	0x0800da45
 800d97c:	0800da45 	.word	0x0800da45
 800d980:	0800da45 	.word	0x0800da45
 800d984:	0800da45 	.word	0x0800da45
 800d988:	0800da45 	.word	0x0800da45
 800d98c:	0800da45 	.word	0x0800da45
 800d990:	0800da1d 	.word	0x0800da1d
 800d994:	0800da45 	.word	0x0800da45
 800d998:	0800da45 	.word	0x0800da45
 800d99c:	0800da45 	.word	0x0800da45
 800d9a0:	0800da45 	.word	0x0800da45
 800d9a4:	0800da45 	.word	0x0800da45
 800d9a8:	0800da45 	.word	0x0800da45
 800d9ac:	0800da45 	.word	0x0800da45
 800d9b0:	0800da25 	.word	0x0800da25
 800d9b4:	0800da45 	.word	0x0800da45
 800d9b8:	0800da45 	.word	0x0800da45
 800d9bc:	0800da45 	.word	0x0800da45
 800d9c0:	0800da45 	.word	0x0800da45
 800d9c4:	0800da45 	.word	0x0800da45
 800d9c8:	0800da45 	.word	0x0800da45
 800d9cc:	0800da45 	.word	0x0800da45
 800d9d0:	0800da2d 	.word	0x0800da2d
 800d9d4:	0800da45 	.word	0x0800da45
 800d9d8:	0800da45 	.word	0x0800da45
 800d9dc:	0800da45 	.word	0x0800da45
 800d9e0:	0800da45 	.word	0x0800da45
 800d9e4:	0800da45 	.word	0x0800da45
 800d9e8:	0800da45 	.word	0x0800da45
 800d9ec:	0800da45 	.word	0x0800da45
 800d9f0:	0800da35 	.word	0x0800da35
 800d9f4:	0800da45 	.word	0x0800da45
 800d9f8:	0800da45 	.word	0x0800da45
 800d9fc:	0800da45 	.word	0x0800da45
 800da00:	0800da45 	.word	0x0800da45
 800da04:	0800da45 	.word	0x0800da45
 800da08:	0800da45 	.word	0x0800da45
 800da0c:	0800da45 	.word	0x0800da45
 800da10:	0800da3d 	.word	0x0800da3d
 800da14:	2301      	movs	r3, #1
 800da16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da1a:	e1c0      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800da1c:	2304      	movs	r3, #4
 800da1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da22:	e1bc      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800da24:	2308      	movs	r3, #8
 800da26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da2a:	e1b8      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800da2c:	2310      	movs	r3, #16
 800da2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da32:	e1b4      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800da34:	2320      	movs	r3, #32
 800da36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da3a:	e1b0      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800da3c:	2340      	movs	r3, #64	; 0x40
 800da3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da42:	e1ac      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800da44:	2380      	movs	r3, #128	; 0x80
 800da46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da4a:	e1a8      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4a75      	ldr	r2, [pc, #468]	; (800dc28 <UART_SetConfig+0x638>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d130      	bne.n	800dab8 <UART_SetConfig+0x4c8>
 800da56:	4b73      	ldr	r3, [pc, #460]	; (800dc24 <UART_SetConfig+0x634>)
 800da58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da5a:	f003 0307 	and.w	r3, r3, #7
 800da5e:	2b05      	cmp	r3, #5
 800da60:	d826      	bhi.n	800dab0 <UART_SetConfig+0x4c0>
 800da62:	a201      	add	r2, pc, #4	; (adr r2, 800da68 <UART_SetConfig+0x478>)
 800da64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da68:	0800da81 	.word	0x0800da81
 800da6c:	0800da89 	.word	0x0800da89
 800da70:	0800da91 	.word	0x0800da91
 800da74:	0800da99 	.word	0x0800da99
 800da78:	0800daa1 	.word	0x0800daa1
 800da7c:	0800daa9 	.word	0x0800daa9
 800da80:	2300      	movs	r3, #0
 800da82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da86:	e18a      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800da88:	2304      	movs	r3, #4
 800da8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da8e:	e186      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800da90:	2308      	movs	r3, #8
 800da92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da96:	e182      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800da98:	2310      	movs	r3, #16
 800da9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da9e:	e17e      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800daa0:	2320      	movs	r3, #32
 800daa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daa6:	e17a      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800daa8:	2340      	movs	r3, #64	; 0x40
 800daaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daae:	e176      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dab0:	2380      	movs	r3, #128	; 0x80
 800dab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dab6:	e172      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a5b      	ldr	r2, [pc, #364]	; (800dc2c <UART_SetConfig+0x63c>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d130      	bne.n	800db24 <UART_SetConfig+0x534>
 800dac2:	4b58      	ldr	r3, [pc, #352]	; (800dc24 <UART_SetConfig+0x634>)
 800dac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dac6:	f003 0307 	and.w	r3, r3, #7
 800daca:	2b05      	cmp	r3, #5
 800dacc:	d826      	bhi.n	800db1c <UART_SetConfig+0x52c>
 800dace:	a201      	add	r2, pc, #4	; (adr r2, 800dad4 <UART_SetConfig+0x4e4>)
 800dad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dad4:	0800daed 	.word	0x0800daed
 800dad8:	0800daf5 	.word	0x0800daf5
 800dadc:	0800dafd 	.word	0x0800dafd
 800dae0:	0800db05 	.word	0x0800db05
 800dae4:	0800db0d 	.word	0x0800db0d
 800dae8:	0800db15 	.word	0x0800db15
 800daec:	2300      	movs	r3, #0
 800daee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daf2:	e154      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800daf4:	2304      	movs	r3, #4
 800daf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dafa:	e150      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dafc:	2308      	movs	r3, #8
 800dafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db02:	e14c      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800db04:	2310      	movs	r3, #16
 800db06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db0a:	e148      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800db0c:	2320      	movs	r3, #32
 800db0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db12:	e144      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800db14:	2340      	movs	r3, #64	; 0x40
 800db16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db1a:	e140      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800db1c:	2380      	movs	r3, #128	; 0x80
 800db1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db22:	e13c      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	4a41      	ldr	r2, [pc, #260]	; (800dc30 <UART_SetConfig+0x640>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	f040 8082 	bne.w	800dc34 <UART_SetConfig+0x644>
 800db30:	4b3c      	ldr	r3, [pc, #240]	; (800dc24 <UART_SetConfig+0x634>)
 800db32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db38:	2b28      	cmp	r3, #40	; 0x28
 800db3a:	d86d      	bhi.n	800dc18 <UART_SetConfig+0x628>
 800db3c:	a201      	add	r2, pc, #4	; (adr r2, 800db44 <UART_SetConfig+0x554>)
 800db3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db42:	bf00      	nop
 800db44:	0800dbe9 	.word	0x0800dbe9
 800db48:	0800dc19 	.word	0x0800dc19
 800db4c:	0800dc19 	.word	0x0800dc19
 800db50:	0800dc19 	.word	0x0800dc19
 800db54:	0800dc19 	.word	0x0800dc19
 800db58:	0800dc19 	.word	0x0800dc19
 800db5c:	0800dc19 	.word	0x0800dc19
 800db60:	0800dc19 	.word	0x0800dc19
 800db64:	0800dbf1 	.word	0x0800dbf1
 800db68:	0800dc19 	.word	0x0800dc19
 800db6c:	0800dc19 	.word	0x0800dc19
 800db70:	0800dc19 	.word	0x0800dc19
 800db74:	0800dc19 	.word	0x0800dc19
 800db78:	0800dc19 	.word	0x0800dc19
 800db7c:	0800dc19 	.word	0x0800dc19
 800db80:	0800dc19 	.word	0x0800dc19
 800db84:	0800dbf9 	.word	0x0800dbf9
 800db88:	0800dc19 	.word	0x0800dc19
 800db8c:	0800dc19 	.word	0x0800dc19
 800db90:	0800dc19 	.word	0x0800dc19
 800db94:	0800dc19 	.word	0x0800dc19
 800db98:	0800dc19 	.word	0x0800dc19
 800db9c:	0800dc19 	.word	0x0800dc19
 800dba0:	0800dc19 	.word	0x0800dc19
 800dba4:	0800dc01 	.word	0x0800dc01
 800dba8:	0800dc19 	.word	0x0800dc19
 800dbac:	0800dc19 	.word	0x0800dc19
 800dbb0:	0800dc19 	.word	0x0800dc19
 800dbb4:	0800dc19 	.word	0x0800dc19
 800dbb8:	0800dc19 	.word	0x0800dc19
 800dbbc:	0800dc19 	.word	0x0800dc19
 800dbc0:	0800dc19 	.word	0x0800dc19
 800dbc4:	0800dc09 	.word	0x0800dc09
 800dbc8:	0800dc19 	.word	0x0800dc19
 800dbcc:	0800dc19 	.word	0x0800dc19
 800dbd0:	0800dc19 	.word	0x0800dc19
 800dbd4:	0800dc19 	.word	0x0800dc19
 800dbd8:	0800dc19 	.word	0x0800dc19
 800dbdc:	0800dc19 	.word	0x0800dc19
 800dbe0:	0800dc19 	.word	0x0800dc19
 800dbe4:	0800dc11 	.word	0x0800dc11
 800dbe8:	2301      	movs	r3, #1
 800dbea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbee:	e0d6      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dbf0:	2304      	movs	r3, #4
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf6:	e0d2      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dbf8:	2308      	movs	r3, #8
 800dbfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbfe:	e0ce      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dc00:	2310      	movs	r3, #16
 800dc02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc06:	e0ca      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dc08:	2320      	movs	r3, #32
 800dc0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc0e:	e0c6      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dc10:	2340      	movs	r3, #64	; 0x40
 800dc12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc16:	e0c2      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dc18:	2380      	movs	r3, #128	; 0x80
 800dc1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc1e:	e0be      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dc20:	40011400 	.word	0x40011400
 800dc24:	58024400 	.word	0x58024400
 800dc28:	40007800 	.word	0x40007800
 800dc2c:	40007c00 	.word	0x40007c00
 800dc30:	40011800 	.word	0x40011800
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	4aad      	ldr	r2, [pc, #692]	; (800def0 <UART_SetConfig+0x900>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d176      	bne.n	800dd2c <UART_SetConfig+0x73c>
 800dc3e:	4bad      	ldr	r3, [pc, #692]	; (800def4 <UART_SetConfig+0x904>)
 800dc40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc46:	2b28      	cmp	r3, #40	; 0x28
 800dc48:	d86c      	bhi.n	800dd24 <UART_SetConfig+0x734>
 800dc4a:	a201      	add	r2, pc, #4	; (adr r2, 800dc50 <UART_SetConfig+0x660>)
 800dc4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc50:	0800dcf5 	.word	0x0800dcf5
 800dc54:	0800dd25 	.word	0x0800dd25
 800dc58:	0800dd25 	.word	0x0800dd25
 800dc5c:	0800dd25 	.word	0x0800dd25
 800dc60:	0800dd25 	.word	0x0800dd25
 800dc64:	0800dd25 	.word	0x0800dd25
 800dc68:	0800dd25 	.word	0x0800dd25
 800dc6c:	0800dd25 	.word	0x0800dd25
 800dc70:	0800dcfd 	.word	0x0800dcfd
 800dc74:	0800dd25 	.word	0x0800dd25
 800dc78:	0800dd25 	.word	0x0800dd25
 800dc7c:	0800dd25 	.word	0x0800dd25
 800dc80:	0800dd25 	.word	0x0800dd25
 800dc84:	0800dd25 	.word	0x0800dd25
 800dc88:	0800dd25 	.word	0x0800dd25
 800dc8c:	0800dd25 	.word	0x0800dd25
 800dc90:	0800dd05 	.word	0x0800dd05
 800dc94:	0800dd25 	.word	0x0800dd25
 800dc98:	0800dd25 	.word	0x0800dd25
 800dc9c:	0800dd25 	.word	0x0800dd25
 800dca0:	0800dd25 	.word	0x0800dd25
 800dca4:	0800dd25 	.word	0x0800dd25
 800dca8:	0800dd25 	.word	0x0800dd25
 800dcac:	0800dd25 	.word	0x0800dd25
 800dcb0:	0800dd0d 	.word	0x0800dd0d
 800dcb4:	0800dd25 	.word	0x0800dd25
 800dcb8:	0800dd25 	.word	0x0800dd25
 800dcbc:	0800dd25 	.word	0x0800dd25
 800dcc0:	0800dd25 	.word	0x0800dd25
 800dcc4:	0800dd25 	.word	0x0800dd25
 800dcc8:	0800dd25 	.word	0x0800dd25
 800dccc:	0800dd25 	.word	0x0800dd25
 800dcd0:	0800dd15 	.word	0x0800dd15
 800dcd4:	0800dd25 	.word	0x0800dd25
 800dcd8:	0800dd25 	.word	0x0800dd25
 800dcdc:	0800dd25 	.word	0x0800dd25
 800dce0:	0800dd25 	.word	0x0800dd25
 800dce4:	0800dd25 	.word	0x0800dd25
 800dce8:	0800dd25 	.word	0x0800dd25
 800dcec:	0800dd25 	.word	0x0800dd25
 800dcf0:	0800dd1d 	.word	0x0800dd1d
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcfa:	e050      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dcfc:	2304      	movs	r3, #4
 800dcfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd02:	e04c      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dd04:	2308      	movs	r3, #8
 800dd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd0a:	e048      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dd0c:	2310      	movs	r3, #16
 800dd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd12:	e044      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dd14:	2320      	movs	r3, #32
 800dd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd1a:	e040      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dd1c:	2340      	movs	r3, #64	; 0x40
 800dd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd22:	e03c      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dd24:	2380      	movs	r3, #128	; 0x80
 800dd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd2a:	e038      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a71      	ldr	r2, [pc, #452]	; (800def8 <UART_SetConfig+0x908>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d130      	bne.n	800dd98 <UART_SetConfig+0x7a8>
 800dd36:	4b6f      	ldr	r3, [pc, #444]	; (800def4 <UART_SetConfig+0x904>)
 800dd38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd3a:	f003 0307 	and.w	r3, r3, #7
 800dd3e:	2b05      	cmp	r3, #5
 800dd40:	d826      	bhi.n	800dd90 <UART_SetConfig+0x7a0>
 800dd42:	a201      	add	r2, pc, #4	; (adr r2, 800dd48 <UART_SetConfig+0x758>)
 800dd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd48:	0800dd61 	.word	0x0800dd61
 800dd4c:	0800dd69 	.word	0x0800dd69
 800dd50:	0800dd71 	.word	0x0800dd71
 800dd54:	0800dd79 	.word	0x0800dd79
 800dd58:	0800dd81 	.word	0x0800dd81
 800dd5c:	0800dd89 	.word	0x0800dd89
 800dd60:	2302      	movs	r3, #2
 800dd62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd66:	e01a      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dd68:	2304      	movs	r3, #4
 800dd6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd6e:	e016      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dd70:	2308      	movs	r3, #8
 800dd72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd76:	e012      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dd78:	2310      	movs	r3, #16
 800dd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd7e:	e00e      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dd80:	2320      	movs	r3, #32
 800dd82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd86:	e00a      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dd88:	2340      	movs	r3, #64	; 0x40
 800dd8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd8e:	e006      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dd90:	2380      	movs	r3, #128	; 0x80
 800dd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd96:	e002      	b.n	800dd9e <UART_SetConfig+0x7ae>
 800dd98:	2380      	movs	r3, #128	; 0x80
 800dd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4a55      	ldr	r2, [pc, #340]	; (800def8 <UART_SetConfig+0x908>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	f040 80f8 	bne.w	800df9a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ddaa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ddae:	2b20      	cmp	r3, #32
 800ddb0:	dc46      	bgt.n	800de40 <UART_SetConfig+0x850>
 800ddb2:	2b02      	cmp	r3, #2
 800ddb4:	db75      	blt.n	800dea2 <UART_SetConfig+0x8b2>
 800ddb6:	3b02      	subs	r3, #2
 800ddb8:	2b1e      	cmp	r3, #30
 800ddba:	d872      	bhi.n	800dea2 <UART_SetConfig+0x8b2>
 800ddbc:	a201      	add	r2, pc, #4	; (adr r2, 800ddc4 <UART_SetConfig+0x7d4>)
 800ddbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddc2:	bf00      	nop
 800ddc4:	0800de47 	.word	0x0800de47
 800ddc8:	0800dea3 	.word	0x0800dea3
 800ddcc:	0800de4f 	.word	0x0800de4f
 800ddd0:	0800dea3 	.word	0x0800dea3
 800ddd4:	0800dea3 	.word	0x0800dea3
 800ddd8:	0800dea3 	.word	0x0800dea3
 800dddc:	0800de5f 	.word	0x0800de5f
 800dde0:	0800dea3 	.word	0x0800dea3
 800dde4:	0800dea3 	.word	0x0800dea3
 800dde8:	0800dea3 	.word	0x0800dea3
 800ddec:	0800dea3 	.word	0x0800dea3
 800ddf0:	0800dea3 	.word	0x0800dea3
 800ddf4:	0800dea3 	.word	0x0800dea3
 800ddf8:	0800dea3 	.word	0x0800dea3
 800ddfc:	0800de6f 	.word	0x0800de6f
 800de00:	0800dea3 	.word	0x0800dea3
 800de04:	0800dea3 	.word	0x0800dea3
 800de08:	0800dea3 	.word	0x0800dea3
 800de0c:	0800dea3 	.word	0x0800dea3
 800de10:	0800dea3 	.word	0x0800dea3
 800de14:	0800dea3 	.word	0x0800dea3
 800de18:	0800dea3 	.word	0x0800dea3
 800de1c:	0800dea3 	.word	0x0800dea3
 800de20:	0800dea3 	.word	0x0800dea3
 800de24:	0800dea3 	.word	0x0800dea3
 800de28:	0800dea3 	.word	0x0800dea3
 800de2c:	0800dea3 	.word	0x0800dea3
 800de30:	0800dea3 	.word	0x0800dea3
 800de34:	0800dea3 	.word	0x0800dea3
 800de38:	0800dea3 	.word	0x0800dea3
 800de3c:	0800de95 	.word	0x0800de95
 800de40:	2b40      	cmp	r3, #64	; 0x40
 800de42:	d02a      	beq.n	800de9a <UART_SetConfig+0x8aa>
 800de44:	e02d      	b.n	800dea2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800de46:	f7fc fdfd 	bl	800aa44 <HAL_RCCEx_GetD3PCLK1Freq>
 800de4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800de4c:	e02f      	b.n	800deae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de52:	4618      	mov	r0, r3
 800de54:	f7fc fe0c 	bl	800aa70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de5c:	e027      	b.n	800deae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de5e:	f107 0318 	add.w	r3, r7, #24
 800de62:	4618      	mov	r0, r3
 800de64:	f7fc ff58 	bl	800ad18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de6c:	e01f      	b.n	800deae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de6e:	4b21      	ldr	r3, [pc, #132]	; (800def4 <UART_SetConfig+0x904>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f003 0320 	and.w	r3, r3, #32
 800de76:	2b00      	cmp	r3, #0
 800de78:	d009      	beq.n	800de8e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de7a:	4b1e      	ldr	r3, [pc, #120]	; (800def4 <UART_SetConfig+0x904>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	08db      	lsrs	r3, r3, #3
 800de80:	f003 0303 	and.w	r3, r3, #3
 800de84:	4a1d      	ldr	r2, [pc, #116]	; (800defc <UART_SetConfig+0x90c>)
 800de86:	fa22 f303 	lsr.w	r3, r2, r3
 800de8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de8c:	e00f      	b.n	800deae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800de8e:	4b1b      	ldr	r3, [pc, #108]	; (800defc <UART_SetConfig+0x90c>)
 800de90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de92:	e00c      	b.n	800deae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de94:	4b1a      	ldr	r3, [pc, #104]	; (800df00 <UART_SetConfig+0x910>)
 800de96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de98:	e009      	b.n	800deae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dea0:	e005      	b.n	800deae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dea2:	2300      	movs	r3, #0
 800dea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dea6:	2301      	movs	r3, #1
 800dea8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800deac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800deae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	f000 81ee 	beq.w	800e292 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deba:	4a12      	ldr	r2, [pc, #72]	; (800df04 <UART_SetConfig+0x914>)
 800debc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dec0:	461a      	mov	r2, r3
 800dec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dec4:	fbb3 f3f2 	udiv	r3, r3, r2
 800dec8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	685a      	ldr	r2, [r3, #4]
 800dece:	4613      	mov	r3, r2
 800ded0:	005b      	lsls	r3, r3, #1
 800ded2:	4413      	add	r3, r2
 800ded4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d305      	bcc.n	800dee6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d910      	bls.n	800df08 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800dee6:	2301      	movs	r3, #1
 800dee8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800deec:	e1d1      	b.n	800e292 <UART_SetConfig+0xca2>
 800deee:	bf00      	nop
 800def0:	40011c00 	.word	0x40011c00
 800def4:	58024400 	.word	0x58024400
 800def8:	58000c00 	.word	0x58000c00
 800defc:	03d09000 	.word	0x03d09000
 800df00:	003d0900 	.word	0x003d0900
 800df04:	0800f4c0 	.word	0x0800f4c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df0a:	2200      	movs	r2, #0
 800df0c:	60bb      	str	r3, [r7, #8]
 800df0e:	60fa      	str	r2, [r7, #12]
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df14:	4ac0      	ldr	r2, [pc, #768]	; (800e218 <UART_SetConfig+0xc28>)
 800df16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	2200      	movs	r2, #0
 800df1e:	603b      	str	r3, [r7, #0]
 800df20:	607a      	str	r2, [r7, #4]
 800df22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800df2a:	f7f2 f9f9 	bl	8000320 <__aeabi_uldivmod>
 800df2e:	4602      	mov	r2, r0
 800df30:	460b      	mov	r3, r1
 800df32:	4610      	mov	r0, r2
 800df34:	4619      	mov	r1, r3
 800df36:	f04f 0200 	mov.w	r2, #0
 800df3a:	f04f 0300 	mov.w	r3, #0
 800df3e:	020b      	lsls	r3, r1, #8
 800df40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800df44:	0202      	lsls	r2, r0, #8
 800df46:	6979      	ldr	r1, [r7, #20]
 800df48:	6849      	ldr	r1, [r1, #4]
 800df4a:	0849      	lsrs	r1, r1, #1
 800df4c:	2000      	movs	r0, #0
 800df4e:	460c      	mov	r4, r1
 800df50:	4605      	mov	r5, r0
 800df52:	eb12 0804 	adds.w	r8, r2, r4
 800df56:	eb43 0905 	adc.w	r9, r3, r5
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	2200      	movs	r2, #0
 800df60:	469a      	mov	sl, r3
 800df62:	4693      	mov	fp, r2
 800df64:	4652      	mov	r2, sl
 800df66:	465b      	mov	r3, fp
 800df68:	4640      	mov	r0, r8
 800df6a:	4649      	mov	r1, r9
 800df6c:	f7f2 f9d8 	bl	8000320 <__aeabi_uldivmod>
 800df70:	4602      	mov	r2, r0
 800df72:	460b      	mov	r3, r1
 800df74:	4613      	mov	r3, r2
 800df76:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800df78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df7e:	d308      	bcc.n	800df92 <UART_SetConfig+0x9a2>
 800df80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df86:	d204      	bcs.n	800df92 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df8e:	60da      	str	r2, [r3, #12]
 800df90:	e17f      	b.n	800e292 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800df92:	2301      	movs	r3, #1
 800df94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800df98:	e17b      	b.n	800e292 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	69db      	ldr	r3, [r3, #28]
 800df9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfa2:	f040 80bd 	bne.w	800e120 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800dfa6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dfaa:	2b20      	cmp	r3, #32
 800dfac:	dc48      	bgt.n	800e040 <UART_SetConfig+0xa50>
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	db7b      	blt.n	800e0aa <UART_SetConfig+0xaba>
 800dfb2:	2b20      	cmp	r3, #32
 800dfb4:	d879      	bhi.n	800e0aa <UART_SetConfig+0xaba>
 800dfb6:	a201      	add	r2, pc, #4	; (adr r2, 800dfbc <UART_SetConfig+0x9cc>)
 800dfb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfbc:	0800e047 	.word	0x0800e047
 800dfc0:	0800e04f 	.word	0x0800e04f
 800dfc4:	0800e0ab 	.word	0x0800e0ab
 800dfc8:	0800e0ab 	.word	0x0800e0ab
 800dfcc:	0800e057 	.word	0x0800e057
 800dfd0:	0800e0ab 	.word	0x0800e0ab
 800dfd4:	0800e0ab 	.word	0x0800e0ab
 800dfd8:	0800e0ab 	.word	0x0800e0ab
 800dfdc:	0800e067 	.word	0x0800e067
 800dfe0:	0800e0ab 	.word	0x0800e0ab
 800dfe4:	0800e0ab 	.word	0x0800e0ab
 800dfe8:	0800e0ab 	.word	0x0800e0ab
 800dfec:	0800e0ab 	.word	0x0800e0ab
 800dff0:	0800e0ab 	.word	0x0800e0ab
 800dff4:	0800e0ab 	.word	0x0800e0ab
 800dff8:	0800e0ab 	.word	0x0800e0ab
 800dffc:	0800e077 	.word	0x0800e077
 800e000:	0800e0ab 	.word	0x0800e0ab
 800e004:	0800e0ab 	.word	0x0800e0ab
 800e008:	0800e0ab 	.word	0x0800e0ab
 800e00c:	0800e0ab 	.word	0x0800e0ab
 800e010:	0800e0ab 	.word	0x0800e0ab
 800e014:	0800e0ab 	.word	0x0800e0ab
 800e018:	0800e0ab 	.word	0x0800e0ab
 800e01c:	0800e0ab 	.word	0x0800e0ab
 800e020:	0800e0ab 	.word	0x0800e0ab
 800e024:	0800e0ab 	.word	0x0800e0ab
 800e028:	0800e0ab 	.word	0x0800e0ab
 800e02c:	0800e0ab 	.word	0x0800e0ab
 800e030:	0800e0ab 	.word	0x0800e0ab
 800e034:	0800e0ab 	.word	0x0800e0ab
 800e038:	0800e0ab 	.word	0x0800e0ab
 800e03c:	0800e09d 	.word	0x0800e09d
 800e040:	2b40      	cmp	r3, #64	; 0x40
 800e042:	d02e      	beq.n	800e0a2 <UART_SetConfig+0xab2>
 800e044:	e031      	b.n	800e0aa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e046:	f7fb fb31 	bl	80096ac <HAL_RCC_GetPCLK1Freq>
 800e04a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e04c:	e033      	b.n	800e0b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e04e:	f7fb fb43 	bl	80096d8 <HAL_RCC_GetPCLK2Freq>
 800e052:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e054:	e02f      	b.n	800e0b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7fc fd08 	bl	800aa70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e064:	e027      	b.n	800e0b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e066:	f107 0318 	add.w	r3, r7, #24
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fc fe54 	bl	800ad18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e070:	69fb      	ldr	r3, [r7, #28]
 800e072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e074:	e01f      	b.n	800e0b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e076:	4b69      	ldr	r3, [pc, #420]	; (800e21c <UART_SetConfig+0xc2c>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f003 0320 	and.w	r3, r3, #32
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d009      	beq.n	800e096 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e082:	4b66      	ldr	r3, [pc, #408]	; (800e21c <UART_SetConfig+0xc2c>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	08db      	lsrs	r3, r3, #3
 800e088:	f003 0303 	and.w	r3, r3, #3
 800e08c:	4a64      	ldr	r2, [pc, #400]	; (800e220 <UART_SetConfig+0xc30>)
 800e08e:	fa22 f303 	lsr.w	r3, r2, r3
 800e092:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e094:	e00f      	b.n	800e0b6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e096:	4b62      	ldr	r3, [pc, #392]	; (800e220 <UART_SetConfig+0xc30>)
 800e098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e09a:	e00c      	b.n	800e0b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e09c:	4b61      	ldr	r3, [pc, #388]	; (800e224 <UART_SetConfig+0xc34>)
 800e09e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0a0:	e009      	b.n	800e0b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e0a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0a8:	e005      	b.n	800e0b6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e0b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e0b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	f000 80ea 	beq.w	800e292 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c2:	4a55      	ldr	r2, [pc, #340]	; (800e218 <UART_SetConfig+0xc28>)
 800e0c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0d0:	005a      	lsls	r2, r3, #1
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	085b      	lsrs	r3, r3, #1
 800e0d8:	441a      	add	r2, r3
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e6:	2b0f      	cmp	r3, #15
 800e0e8:	d916      	bls.n	800e118 <UART_SetConfig+0xb28>
 800e0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0f0:	d212      	bcs.n	800e118 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	f023 030f 	bic.w	r3, r3, #15
 800e0fa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fe:	085b      	lsrs	r3, r3, #1
 800e100:	b29b      	uxth	r3, r3
 800e102:	f003 0307 	and.w	r3, r3, #7
 800e106:	b29a      	uxth	r2, r3
 800e108:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e10a:	4313      	orrs	r3, r2
 800e10c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e114:	60da      	str	r2, [r3, #12]
 800e116:	e0bc      	b.n	800e292 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e118:	2301      	movs	r3, #1
 800e11a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e11e:	e0b8      	b.n	800e292 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e120:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e124:	2b20      	cmp	r3, #32
 800e126:	dc4b      	bgt.n	800e1c0 <UART_SetConfig+0xbd0>
 800e128:	2b00      	cmp	r3, #0
 800e12a:	f2c0 8087 	blt.w	800e23c <UART_SetConfig+0xc4c>
 800e12e:	2b20      	cmp	r3, #32
 800e130:	f200 8084 	bhi.w	800e23c <UART_SetConfig+0xc4c>
 800e134:	a201      	add	r2, pc, #4	; (adr r2, 800e13c <UART_SetConfig+0xb4c>)
 800e136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e13a:	bf00      	nop
 800e13c:	0800e1c7 	.word	0x0800e1c7
 800e140:	0800e1cf 	.word	0x0800e1cf
 800e144:	0800e23d 	.word	0x0800e23d
 800e148:	0800e23d 	.word	0x0800e23d
 800e14c:	0800e1d7 	.word	0x0800e1d7
 800e150:	0800e23d 	.word	0x0800e23d
 800e154:	0800e23d 	.word	0x0800e23d
 800e158:	0800e23d 	.word	0x0800e23d
 800e15c:	0800e1e7 	.word	0x0800e1e7
 800e160:	0800e23d 	.word	0x0800e23d
 800e164:	0800e23d 	.word	0x0800e23d
 800e168:	0800e23d 	.word	0x0800e23d
 800e16c:	0800e23d 	.word	0x0800e23d
 800e170:	0800e23d 	.word	0x0800e23d
 800e174:	0800e23d 	.word	0x0800e23d
 800e178:	0800e23d 	.word	0x0800e23d
 800e17c:	0800e1f7 	.word	0x0800e1f7
 800e180:	0800e23d 	.word	0x0800e23d
 800e184:	0800e23d 	.word	0x0800e23d
 800e188:	0800e23d 	.word	0x0800e23d
 800e18c:	0800e23d 	.word	0x0800e23d
 800e190:	0800e23d 	.word	0x0800e23d
 800e194:	0800e23d 	.word	0x0800e23d
 800e198:	0800e23d 	.word	0x0800e23d
 800e19c:	0800e23d 	.word	0x0800e23d
 800e1a0:	0800e23d 	.word	0x0800e23d
 800e1a4:	0800e23d 	.word	0x0800e23d
 800e1a8:	0800e23d 	.word	0x0800e23d
 800e1ac:	0800e23d 	.word	0x0800e23d
 800e1b0:	0800e23d 	.word	0x0800e23d
 800e1b4:	0800e23d 	.word	0x0800e23d
 800e1b8:	0800e23d 	.word	0x0800e23d
 800e1bc:	0800e22f 	.word	0x0800e22f
 800e1c0:	2b40      	cmp	r3, #64	; 0x40
 800e1c2:	d037      	beq.n	800e234 <UART_SetConfig+0xc44>
 800e1c4:	e03a      	b.n	800e23c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1c6:	f7fb fa71 	bl	80096ac <HAL_RCC_GetPCLK1Freq>
 800e1ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1cc:	e03c      	b.n	800e248 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e1ce:	f7fb fa83 	bl	80096d8 <HAL_RCC_GetPCLK2Freq>
 800e1d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1d4:	e038      	b.n	800e248 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7fc fc48 	bl	800aa70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1e4:	e030      	b.n	800e248 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1e6:	f107 0318 	add.w	r3, r7, #24
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fc fd94 	bl	800ad18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1f0:	69fb      	ldr	r3, [r7, #28]
 800e1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1f4:	e028      	b.n	800e248 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1f6:	4b09      	ldr	r3, [pc, #36]	; (800e21c <UART_SetConfig+0xc2c>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f003 0320 	and.w	r3, r3, #32
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d012      	beq.n	800e228 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e202:	4b06      	ldr	r3, [pc, #24]	; (800e21c <UART_SetConfig+0xc2c>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	08db      	lsrs	r3, r3, #3
 800e208:	f003 0303 	and.w	r3, r3, #3
 800e20c:	4a04      	ldr	r2, [pc, #16]	; (800e220 <UART_SetConfig+0xc30>)
 800e20e:	fa22 f303 	lsr.w	r3, r2, r3
 800e212:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e214:	e018      	b.n	800e248 <UART_SetConfig+0xc58>
 800e216:	bf00      	nop
 800e218:	0800f4c0 	.word	0x0800f4c0
 800e21c:	58024400 	.word	0x58024400
 800e220:	03d09000 	.word	0x03d09000
 800e224:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e228:	4b24      	ldr	r3, [pc, #144]	; (800e2bc <UART_SetConfig+0xccc>)
 800e22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e22c:	e00c      	b.n	800e248 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e22e:	4b24      	ldr	r3, [pc, #144]	; (800e2c0 <UART_SetConfig+0xcd0>)
 800e230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e232:	e009      	b.n	800e248 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e238:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e23a:	e005      	b.n	800e248 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e23c:	2300      	movs	r3, #0
 800e23e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e240:	2301      	movs	r3, #1
 800e242:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e246:	bf00      	nop
    }

    if (pclk != 0U)
 800e248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d021      	beq.n	800e292 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e252:	4a1c      	ldr	r2, [pc, #112]	; (800e2c4 <UART_SetConfig+0xcd4>)
 800e254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e258:	461a      	mov	r2, r3
 800e25a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e25c:	fbb3 f2f2 	udiv	r2, r3, r2
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	085b      	lsrs	r3, r3, #1
 800e266:	441a      	add	r2, r3
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e270:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e274:	2b0f      	cmp	r3, #15
 800e276:	d909      	bls.n	800e28c <UART_SetConfig+0xc9c>
 800e278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e27e:	d205      	bcs.n	800e28c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e282:	b29a      	uxth	r2, r3
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	60da      	str	r2, [r3, #12]
 800e28a:	e002      	b.n	800e292 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e28c:	2301      	movs	r3, #1
 800e28e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	2201      	movs	r2, #1
 800e296:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	2201      	movs	r2, #1
 800e29e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e2ae:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3748      	adds	r7, #72	; 0x48
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e2bc:	03d09000 	.word	0x03d09000
 800e2c0:	003d0900 	.word	0x003d0900
 800e2c4:	0800f4c0 	.word	0x0800f4c0

0800e2c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2d4:	f003 0301 	and.w	r3, r3, #1
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d00a      	beq.n	800e2f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	430a      	orrs	r2, r1
 800e2f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2f6:	f003 0302 	and.w	r3, r3, #2
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d00a      	beq.n	800e314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	430a      	orrs	r2, r1
 800e312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e318:	f003 0304 	and.w	r3, r3, #4
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d00a      	beq.n	800e336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	430a      	orrs	r2, r1
 800e334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e33a:	f003 0308 	and.w	r3, r3, #8
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00a      	beq.n	800e358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	430a      	orrs	r2, r1
 800e356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e35c:	f003 0310 	and.w	r3, r3, #16
 800e360:	2b00      	cmp	r3, #0
 800e362:	d00a      	beq.n	800e37a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	689b      	ldr	r3, [r3, #8]
 800e36a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	430a      	orrs	r2, r1
 800e378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e37e:	f003 0320 	and.w	r3, r3, #32
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00a      	beq.n	800e39c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	689b      	ldr	r3, [r3, #8]
 800e38c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	430a      	orrs	r2, r1
 800e39a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d01a      	beq.n	800e3de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	430a      	orrs	r2, r1
 800e3bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3c6:	d10a      	bne.n	800e3de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	685b      	ldr	r3, [r3, #4]
 800e3ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	430a      	orrs	r2, r1
 800e3dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d00a      	beq.n	800e400 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	430a      	orrs	r2, r1
 800e3fe:	605a      	str	r2, [r3, #4]
  }
}
 800e400:	bf00      	nop
 800e402:	370c      	adds	r7, #12
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr

0800e40c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b098      	sub	sp, #96	; 0x60
 800e410:	af02      	add	r7, sp, #8
 800e412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2200      	movs	r2, #0
 800e418:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e41c:	f7f6 fdd0 	bl	8004fc0 <HAL_GetTick>
 800e420:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f003 0308 	and.w	r3, r3, #8
 800e42c:	2b08      	cmp	r3, #8
 800e42e:	d12f      	bne.n	800e490 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e430:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e434:	9300      	str	r3, [sp, #0]
 800e436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e438:	2200      	movs	r2, #0
 800e43a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f000 f88e 	bl	800e560 <UART_WaitOnFlagUntilTimeout>
 800e444:	4603      	mov	r3, r0
 800e446:	2b00      	cmp	r3, #0
 800e448:	d022      	beq.n	800e490 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e452:	e853 3f00 	ldrex	r3, [r3]
 800e456:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e45a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e45e:	653b      	str	r3, [r7, #80]	; 0x50
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	461a      	mov	r2, r3
 800e466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e468:	647b      	str	r3, [r7, #68]	; 0x44
 800e46a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e46c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e46e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e470:	e841 2300 	strex	r3, r2, [r1]
 800e474:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d1e6      	bne.n	800e44a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2220      	movs	r2, #32
 800e480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2200      	movs	r2, #0
 800e488:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e48c:	2303      	movs	r3, #3
 800e48e:	e063      	b.n	800e558 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f003 0304 	and.w	r3, r3, #4
 800e49a:	2b04      	cmp	r3, #4
 800e49c:	d149      	bne.n	800e532 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e49e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e4a2:	9300      	str	r3, [sp, #0]
 800e4a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 f857 	bl	800e560 <UART_WaitOnFlagUntilTimeout>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d03c      	beq.n	800e532 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c0:	e853 3f00 	ldrex	r3, [r3]
 800e4c4:	623b      	str	r3, [r7, #32]
   return(result);
 800e4c6:	6a3b      	ldr	r3, [r7, #32]
 800e4c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e4cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	461a      	mov	r2, r3
 800e4d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4d6:	633b      	str	r3, [r7, #48]	; 0x30
 800e4d8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e4dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4de:	e841 2300 	strex	r3, r2, [r1]
 800e4e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d1e6      	bne.n	800e4b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	3308      	adds	r3, #8
 800e4f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	e853 3f00 	ldrex	r3, [r3]
 800e4f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	f023 0301 	bic.w	r3, r3, #1
 800e500:	64bb      	str	r3, [r7, #72]	; 0x48
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	3308      	adds	r3, #8
 800e508:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e50a:	61fa      	str	r2, [r7, #28]
 800e50c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e50e:	69b9      	ldr	r1, [r7, #24]
 800e510:	69fa      	ldr	r2, [r7, #28]
 800e512:	e841 2300 	strex	r3, r2, [r1]
 800e516:	617b      	str	r3, [r7, #20]
   return(result);
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d1e5      	bne.n	800e4ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2220      	movs	r2, #32
 800e522:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e52e:	2303      	movs	r3, #3
 800e530:	e012      	b.n	800e558 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2220      	movs	r2, #32
 800e536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2220      	movs	r2, #32
 800e53e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2200      	movs	r2, #0
 800e546:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2200      	movs	r2, #0
 800e54c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2200      	movs	r2, #0
 800e552:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e556:	2300      	movs	r3, #0
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3758      	adds	r7, #88	; 0x58
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b084      	sub	sp, #16
 800e564:	af00      	add	r7, sp, #0
 800e566:	60f8      	str	r0, [r7, #12]
 800e568:	60b9      	str	r1, [r7, #8]
 800e56a:	603b      	str	r3, [r7, #0]
 800e56c:	4613      	mov	r3, r2
 800e56e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e570:	e049      	b.n	800e606 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e572:	69bb      	ldr	r3, [r7, #24]
 800e574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e578:	d045      	beq.n	800e606 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e57a:	f7f6 fd21 	bl	8004fc0 <HAL_GetTick>
 800e57e:	4602      	mov	r2, r0
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	1ad3      	subs	r3, r2, r3
 800e584:	69ba      	ldr	r2, [r7, #24]
 800e586:	429a      	cmp	r2, r3
 800e588:	d302      	bcc.n	800e590 <UART_WaitOnFlagUntilTimeout+0x30>
 800e58a:	69bb      	ldr	r3, [r7, #24]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d101      	bne.n	800e594 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e590:	2303      	movs	r3, #3
 800e592:	e048      	b.n	800e626 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f003 0304 	and.w	r3, r3, #4
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d031      	beq.n	800e606 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	69db      	ldr	r3, [r3, #28]
 800e5a8:	f003 0308 	and.w	r3, r3, #8
 800e5ac:	2b08      	cmp	r3, #8
 800e5ae:	d110      	bne.n	800e5d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	2208      	movs	r2, #8
 800e5b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e5b8:	68f8      	ldr	r0, [r7, #12]
 800e5ba:	f000 f921 	bl	800e800 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	2208      	movs	r2, #8
 800e5c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e029      	b.n	800e626 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	69db      	ldr	r3, [r3, #28]
 800e5d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e5dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5e0:	d111      	bne.n	800e606 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e5ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e5ec:	68f8      	ldr	r0, [r7, #12]
 800e5ee:	f000 f907 	bl	800e800 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2220      	movs	r2, #32
 800e5f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e602:	2303      	movs	r3, #3
 800e604:	e00f      	b.n	800e626 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	69da      	ldr	r2, [r3, #28]
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	4013      	ands	r3, r2
 800e610:	68ba      	ldr	r2, [r7, #8]
 800e612:	429a      	cmp	r2, r3
 800e614:	bf0c      	ite	eq
 800e616:	2301      	moveq	r3, #1
 800e618:	2300      	movne	r3, #0
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	461a      	mov	r2, r3
 800e61e:	79fb      	ldrb	r3, [r7, #7]
 800e620:	429a      	cmp	r2, r3
 800e622:	d0a6      	beq.n	800e572 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e624:	2300      	movs	r3, #0
}
 800e626:	4618      	mov	r0, r3
 800e628:	3710      	adds	r7, #16
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
	...

0800e630 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b096      	sub	sp, #88	; 0x58
 800e634:	af00      	add	r7, sp, #0
 800e636:	60f8      	str	r0, [r7, #12]
 800e638:	60b9      	str	r1, [r7, #8]
 800e63a:	4613      	mov	r3, r2
 800e63c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	68ba      	ldr	r2, [r7, #8]
 800e642:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	88fa      	ldrh	r2, [r7, #6]
 800e648:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2200      	movs	r2, #0
 800e650:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2222      	movs	r2, #34	; 0x22
 800e658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e662:	2b00      	cmp	r3, #0
 800e664:	d02d      	beq.n	800e6c2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e66c:	4a40      	ldr	r2, [pc, #256]	; (800e770 <UART_Start_Receive_DMA+0x140>)
 800e66e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e676:	4a3f      	ldr	r2, [pc, #252]	; (800e774 <UART_Start_Receive_DMA+0x144>)
 800e678:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e680:	4a3d      	ldr	r2, [pc, #244]	; (800e778 <UART_Start_Receive_DMA+0x148>)
 800e682:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e68a:	2200      	movs	r2, #0
 800e68c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	3324      	adds	r3, #36	; 0x24
 800e69a:	4619      	mov	r1, r3
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	88fb      	ldrh	r3, [r7, #6]
 800e6a4:	f7f7 faea 	bl	8005c7c <HAL_DMA_Start_IT>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d009      	beq.n	800e6c2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	2210      	movs	r2, #16
 800e6b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	2220      	movs	r2, #32
 800e6ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	e051      	b.n	800e766 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	691b      	ldr	r3, [r3, #16]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d018      	beq.n	800e6fc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6d2:	e853 3f00 	ldrex	r3, [r3]
 800e6d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6de:	657b      	str	r3, [r7, #84]	; 0x54
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	461a      	mov	r2, r3
 800e6e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6ea:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6f0:	e841 2300 	strex	r3, r2, [r1]
 800e6f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e6f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d1e6      	bne.n	800e6ca <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	3308      	adds	r3, #8
 800e702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e706:	e853 3f00 	ldrex	r3, [r3]
 800e70a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70e:	f043 0301 	orr.w	r3, r3, #1
 800e712:	653b      	str	r3, [r7, #80]	; 0x50
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	3308      	adds	r3, #8
 800e71a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e71c:	637a      	str	r2, [r7, #52]	; 0x34
 800e71e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e720:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e724:	e841 2300 	strex	r3, r2, [r1]
 800e728:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d1e5      	bne.n	800e6fc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	3308      	adds	r3, #8
 800e736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	e853 3f00 	ldrex	r3, [r3]
 800e73e:	613b      	str	r3, [r7, #16]
   return(result);
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e746:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	3308      	adds	r3, #8
 800e74e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e750:	623a      	str	r2, [r7, #32]
 800e752:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e754:	69f9      	ldr	r1, [r7, #28]
 800e756:	6a3a      	ldr	r2, [r7, #32]
 800e758:	e841 2300 	strex	r3, r2, [r1]
 800e75c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d1e5      	bne.n	800e730 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e764:	2300      	movs	r3, #0
}
 800e766:	4618      	mov	r0, r3
 800e768:	3758      	adds	r7, #88	; 0x58
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop
 800e770:	0800e97f 	.word	0x0800e97f
 800e774:	0800eaa7 	.word	0x0800eaa7
 800e778:	0800eae5 	.word	0x0800eae5

0800e77c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e77c:	b480      	push	{r7}
 800e77e:	b08f      	sub	sp, #60	; 0x3c
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e78a:	6a3b      	ldr	r3, [r7, #32]
 800e78c:	e853 3f00 	ldrex	r3, [r3]
 800e790:	61fb      	str	r3, [r7, #28]
   return(result);
 800e792:	69fb      	ldr	r3, [r7, #28]
 800e794:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e798:	637b      	str	r3, [r7, #52]	; 0x34
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	461a      	mov	r2, r3
 800e7a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7a4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e7a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7aa:	e841 2300 	strex	r3, r2, [r1]
 800e7ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d1e6      	bne.n	800e784 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	3308      	adds	r3, #8
 800e7bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	e853 3f00 	ldrex	r3, [r3]
 800e7c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e7cc:	633b      	str	r3, [r7, #48]	; 0x30
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	3308      	adds	r3, #8
 800e7d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7d6:	61ba      	str	r2, [r7, #24]
 800e7d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7da:	6979      	ldr	r1, [r7, #20]
 800e7dc:	69ba      	ldr	r2, [r7, #24]
 800e7de:	e841 2300 	strex	r3, r2, [r1]
 800e7e2:	613b      	str	r3, [r7, #16]
   return(result);
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d1e5      	bne.n	800e7b6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2220      	movs	r2, #32
 800e7ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800e7f2:	bf00      	nop
 800e7f4:	373c      	adds	r7, #60	; 0x3c
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fc:	4770      	bx	lr
	...

0800e800 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e800:	b480      	push	{r7}
 800e802:	b095      	sub	sp, #84	; 0x54
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e810:	e853 3f00 	ldrex	r3, [r3]
 800e814:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e818:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e81c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	461a      	mov	r2, r3
 800e824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e826:	643b      	str	r3, [r7, #64]	; 0x40
 800e828:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e82a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e82c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e82e:	e841 2300 	strex	r3, r2, [r1]
 800e832:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e836:	2b00      	cmp	r3, #0
 800e838:	d1e6      	bne.n	800e808 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	3308      	adds	r3, #8
 800e840:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e842:	6a3b      	ldr	r3, [r7, #32]
 800e844:	e853 3f00 	ldrex	r3, [r3]
 800e848:	61fb      	str	r3, [r7, #28]
   return(result);
 800e84a:	69fa      	ldr	r2, [r7, #28]
 800e84c:	4b1e      	ldr	r3, [pc, #120]	; (800e8c8 <UART_EndRxTransfer+0xc8>)
 800e84e:	4013      	ands	r3, r2
 800e850:	64bb      	str	r3, [r7, #72]	; 0x48
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	3308      	adds	r3, #8
 800e858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e85a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e85c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e85e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e862:	e841 2300 	strex	r3, r2, [r1]
 800e866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d1e5      	bne.n	800e83a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e872:	2b01      	cmp	r3, #1
 800e874:	d118      	bne.n	800e8a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	e853 3f00 	ldrex	r3, [r3]
 800e882:	60bb      	str	r3, [r7, #8]
   return(result);
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	f023 0310 	bic.w	r3, r3, #16
 800e88a:	647b      	str	r3, [r7, #68]	; 0x44
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	461a      	mov	r2, r3
 800e892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e894:	61bb      	str	r3, [r7, #24]
 800e896:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e898:	6979      	ldr	r1, [r7, #20]
 800e89a:	69ba      	ldr	r2, [r7, #24]
 800e89c:	e841 2300 	strex	r3, r2, [r1]
 800e8a0:	613b      	str	r3, [r7, #16]
   return(result);
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d1e6      	bne.n	800e876 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2220      	movs	r2, #32
 800e8ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e8bc:	bf00      	nop
 800e8be:	3754      	adds	r7, #84	; 0x54
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr
 800e8c8:	effffffe 	.word	0xeffffffe

0800e8cc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b090      	sub	sp, #64	; 0x40
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8d8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	69db      	ldr	r3, [r3, #28]
 800e8de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8e2:	d037      	beq.n	800e954 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	3308      	adds	r3, #8
 800e8f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f6:	e853 3f00 	ldrex	r3, [r3]
 800e8fa:	623b      	str	r3, [r7, #32]
   return(result);
 800e8fc:	6a3b      	ldr	r3, [r7, #32]
 800e8fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e902:	63bb      	str	r3, [r7, #56]	; 0x38
 800e904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	3308      	adds	r3, #8
 800e90a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e90c:	633a      	str	r2, [r7, #48]	; 0x30
 800e90e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e910:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e914:	e841 2300 	strex	r3, r2, [r1]
 800e918:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d1e5      	bne.n	800e8ec <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	e853 3f00 	ldrex	r3, [r3]
 800e92c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e934:	637b      	str	r3, [r7, #52]	; 0x34
 800e936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	461a      	mov	r2, r3
 800e93c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e93e:	61fb      	str	r3, [r7, #28]
 800e940:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e942:	69b9      	ldr	r1, [r7, #24]
 800e944:	69fa      	ldr	r2, [r7, #28]
 800e946:	e841 2300 	strex	r3, r2, [r1]
 800e94a:	617b      	str	r3, [r7, #20]
   return(result);
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d1e6      	bne.n	800e920 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e952:	e002      	b.n	800e95a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e954:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e956:	f7f4 fc7d 	bl	8003254 <HAL_UART_TxCpltCallback>
}
 800e95a:	bf00      	nop
 800e95c:	3740      	adds	r7, #64	; 0x40
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}

0800e962 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e962:	b580      	push	{r7, lr}
 800e964:	b084      	sub	sp, #16
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e96e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e970:	68f8      	ldr	r0, [r7, #12]
 800e972:	f7fe fe13 	bl	800d59c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e976:	bf00      	nop
 800e978:	3710      	adds	r7, #16
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e97e:	b580      	push	{r7, lr}
 800e980:	b09c      	sub	sp, #112	; 0x70
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e98a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	69db      	ldr	r3, [r3, #28]
 800e990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e994:	d071      	beq.n	800ea7a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e998:	2200      	movs	r2, #0
 800e99a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e99e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9a6:	e853 3f00 	ldrex	r3, [r3]
 800e9aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e9ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e9b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e9b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	461a      	mov	r2, r3
 800e9ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9bc:	65bb      	str	r3, [r7, #88]	; 0x58
 800e9be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e9c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e9c4:	e841 2300 	strex	r3, r2, [r1]
 800e9c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e9ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d1e6      	bne.n	800e99e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	3308      	adds	r3, #8
 800e9d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9da:	e853 3f00 	ldrex	r3, [r3]
 800e9de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9e2:	f023 0301 	bic.w	r3, r3, #1
 800e9e6:	667b      	str	r3, [r7, #100]	; 0x64
 800e9e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	3308      	adds	r3, #8
 800e9ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e9f0:	647a      	str	r2, [r7, #68]	; 0x44
 800e9f2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e9f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9f8:	e841 2300 	strex	r3, r2, [r1]
 800e9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d1e5      	bne.n	800e9d0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	3308      	adds	r3, #8
 800ea0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0e:	e853 3f00 	ldrex	r3, [r3]
 800ea12:	623b      	str	r3, [r7, #32]
   return(result);
 800ea14:	6a3b      	ldr	r3, [r7, #32]
 800ea16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea1a:	663b      	str	r3, [r7, #96]	; 0x60
 800ea1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	3308      	adds	r3, #8
 800ea22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea24:	633a      	str	r2, [r7, #48]	; 0x30
 800ea26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea2c:	e841 2300 	strex	r3, r2, [r1]
 800ea30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d1e5      	bne.n	800ea04 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ea38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea3a:	2220      	movs	r2, #32
 800ea3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d118      	bne.n	800ea7a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	e853 3f00 	ldrex	r3, [r3]
 800ea54:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	f023 0310 	bic.w	r3, r3, #16
 800ea5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	461a      	mov	r2, r3
 800ea64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea66:	61fb      	str	r3, [r7, #28]
 800ea68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea6a:	69b9      	ldr	r1, [r7, #24]
 800ea6c:	69fa      	ldr	r2, [r7, #28]
 800ea6e:	e841 2300 	strex	r3, r2, [r1]
 800ea72:	617b      	str	r3, [r7, #20]
   return(result);
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d1e6      	bne.n	800ea48 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ea7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d107      	bne.n	800ea98 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ea8e:	4619      	mov	r1, r3
 800ea90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ea92:	f7fe fda1 	bl	800d5d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ea96:	e002      	b.n	800ea9e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800ea98:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ea9a:	f7fe fd89 	bl	800d5b0 <HAL_UART_RxCpltCallback>
}
 800ea9e:	bf00      	nop
 800eaa0:	3770      	adds	r7, #112	; 0x70
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}

0800eaa6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eaa6:	b580      	push	{r7, lr}
 800eaa8:	b084      	sub	sp, #16
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eab2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2201      	movs	r2, #1
 800eab8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d109      	bne.n	800ead6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eac8:	085b      	lsrs	r3, r3, #1
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	4619      	mov	r1, r3
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f7fe fd82 	bl	800d5d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ead4:	e002      	b.n	800eadc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ead6:	68f8      	ldr	r0, [r7, #12]
 800ead8:	f7fe fd74 	bl	800d5c4 <HAL_UART_RxHalfCpltCallback>
}
 800eadc:	bf00      	nop
 800eade:	3710      	adds	r7, #16
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b086      	sub	sp, #24
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaf0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eaf8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb00:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	689b      	ldr	r3, [r3, #8]
 800eb08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb0c:	2b80      	cmp	r3, #128	; 0x80
 800eb0e:	d109      	bne.n	800eb24 <UART_DMAError+0x40>
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	2b21      	cmp	r3, #33	; 0x21
 800eb14:	d106      	bne.n	800eb24 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800eb1e:	6978      	ldr	r0, [r7, #20]
 800eb20:	f7ff fe2c 	bl	800e77c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	689b      	ldr	r3, [r3, #8]
 800eb2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb2e:	2b40      	cmp	r3, #64	; 0x40
 800eb30:	d109      	bne.n	800eb46 <UART_DMAError+0x62>
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	2b22      	cmp	r3, #34	; 0x22
 800eb36:	d106      	bne.n	800eb46 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800eb40:	6978      	ldr	r0, [r7, #20]
 800eb42:	f7ff fe5d 	bl	800e800 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb4c:	f043 0210 	orr.w	r2, r3, #16
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb56:	6978      	ldr	r0, [r7, #20]
 800eb58:	f7f2 fd62 	bl	8001620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb5c:	bf00      	nop
 800eb5e:	3718      	adds	r7, #24
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b084      	sub	sp, #16
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2200      	movs	r2, #0
 800eb76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb82:	68f8      	ldr	r0, [r7, #12]
 800eb84:	f7f2 fd4c 	bl	8001620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb88:	bf00      	nop
 800eb8a:	3710      	adds	r7, #16
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}

0800eb90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b088      	sub	sp, #32
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	e853 3f00 	ldrex	r3, [r3]
 800eba4:	60bb      	str	r3, [r7, #8]
   return(result);
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebac:	61fb      	str	r3, [r7, #28]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	69fb      	ldr	r3, [r7, #28]
 800ebb6:	61bb      	str	r3, [r7, #24]
 800ebb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebba:	6979      	ldr	r1, [r7, #20]
 800ebbc:	69ba      	ldr	r2, [r7, #24]
 800ebbe:	e841 2300 	strex	r3, r2, [r1]
 800ebc2:	613b      	str	r3, [r7, #16]
   return(result);
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d1e6      	bne.n	800eb98 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2220      	movs	r2, #32
 800ebce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f7f4 fb3b 	bl	8003254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebde:	bf00      	nop
 800ebe0:	3720      	adds	r7, #32
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}

0800ebe6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ebe6:	b480      	push	{r7}
 800ebe8:	b083      	sub	sp, #12
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ebee:	bf00      	nop
 800ebf0:	370c      	adds	r7, #12
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf8:	4770      	bx	lr

0800ebfa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ebfa:	b480      	push	{r7}
 800ebfc:	b083      	sub	sp, #12
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ec02:	bf00      	nop
 800ec04:	370c      	adds	r7, #12
 800ec06:	46bd      	mov	sp, r7
 800ec08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0c:	4770      	bx	lr

0800ec0e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ec0e:	b480      	push	{r7}
 800ec10:	b083      	sub	sp, #12
 800ec12:	af00      	add	r7, sp, #0
 800ec14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ec16:	bf00      	nop
 800ec18:	370c      	adds	r7, #12
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec20:	4770      	bx	lr

0800ec22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ec22:	b480      	push	{r7}
 800ec24:	b085      	sub	sp, #20
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ec30:	2b01      	cmp	r3, #1
 800ec32:	d101      	bne.n	800ec38 <HAL_UARTEx_DisableFifoMode+0x16>
 800ec34:	2302      	movs	r3, #2
 800ec36:	e027      	b.n	800ec88 <HAL_UARTEx_DisableFifoMode+0x66>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2224      	movs	r2, #36	; 0x24
 800ec44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	681a      	ldr	r2, [r3, #0]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	f022 0201 	bic.w	r2, r2, #1
 800ec5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ec66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	68fa      	ldr	r2, [r7, #12]
 800ec74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2220      	movs	r2, #32
 800ec7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2200      	movs	r2, #0
 800ec82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ec86:	2300      	movs	r3, #0
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3714      	adds	r7, #20
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr

0800ec94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d101      	bne.n	800ecac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eca8:	2302      	movs	r3, #2
 800ecaa:	e02d      	b.n	800ed08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2201      	movs	r2, #1
 800ecb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2224      	movs	r2, #36	; 0x24
 800ecb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f022 0201 	bic.w	r2, r2, #1
 800ecd2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	689b      	ldr	r3, [r3, #8]
 800ecda:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	683a      	ldr	r2, [r7, #0]
 800ece4:	430a      	orrs	r2, r1
 800ece6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f000 f84f 	bl	800ed8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	68fa      	ldr	r2, [r7, #12]
 800ecf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2220      	movs	r2, #32
 800ecfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2200      	movs	r2, #0
 800ed02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ed06:	2300      	movs	r3, #0
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3710      	adds	r7, #16
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b084      	sub	sp, #16
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	d101      	bne.n	800ed28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ed24:	2302      	movs	r3, #2
 800ed26:	e02d      	b.n	800ed84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2224      	movs	r2, #36	; 0x24
 800ed34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	681a      	ldr	r2, [r3, #0]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f022 0201 	bic.w	r2, r2, #1
 800ed4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	689b      	ldr	r3, [r3, #8]
 800ed56:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	683a      	ldr	r2, [r7, #0]
 800ed60:	430a      	orrs	r2, r1
 800ed62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f000 f811 	bl	800ed8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	68fa      	ldr	r2, [r7, #12]
 800ed70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2220      	movs	r2, #32
 800ed76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ed82:	2300      	movs	r3, #0
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3710      	adds	r7, #16
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b085      	sub	sp, #20
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d108      	bne.n	800edae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2201      	movs	r2, #1
 800eda0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2201      	movs	r2, #1
 800eda8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800edac:	e031      	b.n	800ee12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800edae:	2310      	movs	r3, #16
 800edb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800edb2:	2310      	movs	r3, #16
 800edb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	689b      	ldr	r3, [r3, #8]
 800edbc:	0e5b      	lsrs	r3, r3, #25
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	f003 0307 	and.w	r3, r3, #7
 800edc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	689b      	ldr	r3, [r3, #8]
 800edcc:	0f5b      	lsrs	r3, r3, #29
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	f003 0307 	and.w	r3, r3, #7
 800edd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800edd6:	7bbb      	ldrb	r3, [r7, #14]
 800edd8:	7b3a      	ldrb	r2, [r7, #12]
 800edda:	4911      	ldr	r1, [pc, #68]	; (800ee20 <UARTEx_SetNbDataToProcess+0x94>)
 800eddc:	5c8a      	ldrb	r2, [r1, r2]
 800edde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ede2:	7b3a      	ldrb	r2, [r7, #12]
 800ede4:	490f      	ldr	r1, [pc, #60]	; (800ee24 <UARTEx_SetNbDataToProcess+0x98>)
 800ede6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ede8:	fb93 f3f2 	sdiv	r3, r3, r2
 800edec:	b29a      	uxth	r2, r3
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800edf4:	7bfb      	ldrb	r3, [r7, #15]
 800edf6:	7b7a      	ldrb	r2, [r7, #13]
 800edf8:	4909      	ldr	r1, [pc, #36]	; (800ee20 <UARTEx_SetNbDataToProcess+0x94>)
 800edfa:	5c8a      	ldrb	r2, [r1, r2]
 800edfc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ee00:	7b7a      	ldrb	r2, [r7, #13]
 800ee02:	4908      	ldr	r1, [pc, #32]	; (800ee24 <UARTEx_SetNbDataToProcess+0x98>)
 800ee04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee06:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee0a:	b29a      	uxth	r2, r3
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ee12:	bf00      	nop
 800ee14:	3714      	adds	r7, #20
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr
 800ee1e:	bf00      	nop
 800ee20:	0800f4d8 	.word	0x0800f4d8
 800ee24:	0800f4e0 	.word	0x0800f4e0

0800ee28 <__cxa_pure_virtual>:
 800ee28:	b508      	push	{r3, lr}
 800ee2a:	f000 f80d 	bl	800ee48 <_ZSt9terminatev>

0800ee2e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ee2e:	b508      	push	{r3, lr}
 800ee30:	4780      	blx	r0
 800ee32:	f000 f80e 	bl	800ee52 <abort>
	...

0800ee38 <_ZSt13get_terminatev>:
 800ee38:	4b02      	ldr	r3, [pc, #8]	; (800ee44 <_ZSt13get_terminatev+0xc>)
 800ee3a:	6818      	ldr	r0, [r3, #0]
 800ee3c:	f3bf 8f5b 	dmb	ish
 800ee40:	4770      	bx	lr
 800ee42:	bf00      	nop
 800ee44:	24000010 	.word	0x24000010

0800ee48 <_ZSt9terminatev>:
 800ee48:	b508      	push	{r3, lr}
 800ee4a:	f7ff fff5 	bl	800ee38 <_ZSt13get_terminatev>
 800ee4e:	f7ff ffee 	bl	800ee2e <_ZN10__cxxabiv111__terminateEPFvvE>

0800ee52 <abort>:
 800ee52:	b508      	push	{r3, lr}
 800ee54:	2006      	movs	r0, #6
 800ee56:	f000 f873 	bl	800ef40 <raise>
 800ee5a:	2001      	movs	r0, #1
 800ee5c:	f7f5 f986 	bl	800416c <_exit>

0800ee60 <__errno>:
 800ee60:	4b01      	ldr	r3, [pc, #4]	; (800ee68 <__errno+0x8>)
 800ee62:	6818      	ldr	r0, [r3, #0]
 800ee64:	4770      	bx	lr
 800ee66:	bf00      	nop
 800ee68:	24000014 	.word	0x24000014

0800ee6c <__libc_init_array>:
 800ee6c:	b570      	push	{r4, r5, r6, lr}
 800ee6e:	4d0d      	ldr	r5, [pc, #52]	; (800eea4 <__libc_init_array+0x38>)
 800ee70:	4c0d      	ldr	r4, [pc, #52]	; (800eea8 <__libc_init_array+0x3c>)
 800ee72:	1b64      	subs	r4, r4, r5
 800ee74:	10a4      	asrs	r4, r4, #2
 800ee76:	2600      	movs	r6, #0
 800ee78:	42a6      	cmp	r6, r4
 800ee7a:	d109      	bne.n	800ee90 <__libc_init_array+0x24>
 800ee7c:	4d0b      	ldr	r5, [pc, #44]	; (800eeac <__libc_init_array+0x40>)
 800ee7e:	4c0c      	ldr	r4, [pc, #48]	; (800eeb0 <__libc_init_array+0x44>)
 800ee80:	f000 f9b0 	bl	800f1e4 <_init>
 800ee84:	1b64      	subs	r4, r4, r5
 800ee86:	10a4      	asrs	r4, r4, #2
 800ee88:	2600      	movs	r6, #0
 800ee8a:	42a6      	cmp	r6, r4
 800ee8c:	d105      	bne.n	800ee9a <__libc_init_array+0x2e>
 800ee8e:	bd70      	pop	{r4, r5, r6, pc}
 800ee90:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee94:	4798      	blx	r3
 800ee96:	3601      	adds	r6, #1
 800ee98:	e7ee      	b.n	800ee78 <__libc_init_array+0xc>
 800ee9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee9e:	4798      	blx	r3
 800eea0:	3601      	adds	r6, #1
 800eea2:	e7f2      	b.n	800ee8a <__libc_init_array+0x1e>
 800eea4:	0800f4f0 	.word	0x0800f4f0
 800eea8:	0800f4f0 	.word	0x0800f4f0
 800eeac:	0800f4f0 	.word	0x0800f4f0
 800eeb0:	0800f4f8 	.word	0x0800f4f8

0800eeb4 <memcpy>:
 800eeb4:	440a      	add	r2, r1
 800eeb6:	4291      	cmp	r1, r2
 800eeb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800eebc:	d100      	bne.n	800eec0 <memcpy+0xc>
 800eebe:	4770      	bx	lr
 800eec0:	b510      	push	{r4, lr}
 800eec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eeca:	4291      	cmp	r1, r2
 800eecc:	d1f9      	bne.n	800eec2 <memcpy+0xe>
 800eece:	bd10      	pop	{r4, pc}

0800eed0 <memset>:
 800eed0:	4402      	add	r2, r0
 800eed2:	4603      	mov	r3, r0
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d100      	bne.n	800eeda <memset+0xa>
 800eed8:	4770      	bx	lr
 800eeda:	f803 1b01 	strb.w	r1, [r3], #1
 800eede:	e7f9      	b.n	800eed4 <memset+0x4>

0800eee0 <realloc>:
 800eee0:	4b02      	ldr	r3, [pc, #8]	; (800eeec <realloc+0xc>)
 800eee2:	460a      	mov	r2, r1
 800eee4:	4601      	mov	r1, r0
 800eee6:	6818      	ldr	r0, [r3, #0]
 800eee8:	f000 b8da 	b.w	800f0a0 <_realloc_r>
 800eeec:	24000014 	.word	0x24000014

0800eef0 <_raise_r>:
 800eef0:	291f      	cmp	r1, #31
 800eef2:	b538      	push	{r3, r4, r5, lr}
 800eef4:	4604      	mov	r4, r0
 800eef6:	460d      	mov	r5, r1
 800eef8:	d904      	bls.n	800ef04 <_raise_r+0x14>
 800eefa:	2316      	movs	r3, #22
 800eefc:	6003      	str	r3, [r0, #0]
 800eefe:	f04f 30ff 	mov.w	r0, #4294967295
 800ef02:	bd38      	pop	{r3, r4, r5, pc}
 800ef04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ef06:	b112      	cbz	r2, 800ef0e <_raise_r+0x1e>
 800ef08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef0c:	b94b      	cbnz	r3, 800ef22 <_raise_r+0x32>
 800ef0e:	4620      	mov	r0, r4
 800ef10:	f000 f830 	bl	800ef74 <_getpid_r>
 800ef14:	462a      	mov	r2, r5
 800ef16:	4601      	mov	r1, r0
 800ef18:	4620      	mov	r0, r4
 800ef1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef1e:	f000 b817 	b.w	800ef50 <_kill_r>
 800ef22:	2b01      	cmp	r3, #1
 800ef24:	d00a      	beq.n	800ef3c <_raise_r+0x4c>
 800ef26:	1c59      	adds	r1, r3, #1
 800ef28:	d103      	bne.n	800ef32 <_raise_r+0x42>
 800ef2a:	2316      	movs	r3, #22
 800ef2c:	6003      	str	r3, [r0, #0]
 800ef2e:	2001      	movs	r0, #1
 800ef30:	e7e7      	b.n	800ef02 <_raise_r+0x12>
 800ef32:	2400      	movs	r4, #0
 800ef34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef38:	4628      	mov	r0, r5
 800ef3a:	4798      	blx	r3
 800ef3c:	2000      	movs	r0, #0
 800ef3e:	e7e0      	b.n	800ef02 <_raise_r+0x12>

0800ef40 <raise>:
 800ef40:	4b02      	ldr	r3, [pc, #8]	; (800ef4c <raise+0xc>)
 800ef42:	4601      	mov	r1, r0
 800ef44:	6818      	ldr	r0, [r3, #0]
 800ef46:	f7ff bfd3 	b.w	800eef0 <_raise_r>
 800ef4a:	bf00      	nop
 800ef4c:	24000014 	.word	0x24000014

0800ef50 <_kill_r>:
 800ef50:	b538      	push	{r3, r4, r5, lr}
 800ef52:	4d07      	ldr	r5, [pc, #28]	; (800ef70 <_kill_r+0x20>)
 800ef54:	2300      	movs	r3, #0
 800ef56:	4604      	mov	r4, r0
 800ef58:	4608      	mov	r0, r1
 800ef5a:	4611      	mov	r1, r2
 800ef5c:	602b      	str	r3, [r5, #0]
 800ef5e:	f7f5 f8f5 	bl	800414c <_kill>
 800ef62:	1c43      	adds	r3, r0, #1
 800ef64:	d102      	bne.n	800ef6c <_kill_r+0x1c>
 800ef66:	682b      	ldr	r3, [r5, #0]
 800ef68:	b103      	cbz	r3, 800ef6c <_kill_r+0x1c>
 800ef6a:	6023      	str	r3, [r4, #0]
 800ef6c:	bd38      	pop	{r3, r4, r5, pc}
 800ef6e:	bf00      	nop
 800ef70:	24001a80 	.word	0x24001a80

0800ef74 <_getpid_r>:
 800ef74:	f7f5 b8e2 	b.w	800413c <_getpid>

0800ef78 <sbrk_aligned>:
 800ef78:	b570      	push	{r4, r5, r6, lr}
 800ef7a:	4e0e      	ldr	r6, [pc, #56]	; (800efb4 <sbrk_aligned+0x3c>)
 800ef7c:	460c      	mov	r4, r1
 800ef7e:	6831      	ldr	r1, [r6, #0]
 800ef80:	4605      	mov	r5, r0
 800ef82:	b911      	cbnz	r1, 800ef8a <sbrk_aligned+0x12>
 800ef84:	f000 f8bc 	bl	800f100 <_sbrk_r>
 800ef88:	6030      	str	r0, [r6, #0]
 800ef8a:	4621      	mov	r1, r4
 800ef8c:	4628      	mov	r0, r5
 800ef8e:	f000 f8b7 	bl	800f100 <_sbrk_r>
 800ef92:	1c43      	adds	r3, r0, #1
 800ef94:	d00a      	beq.n	800efac <sbrk_aligned+0x34>
 800ef96:	1cc4      	adds	r4, r0, #3
 800ef98:	f024 0403 	bic.w	r4, r4, #3
 800ef9c:	42a0      	cmp	r0, r4
 800ef9e:	d007      	beq.n	800efb0 <sbrk_aligned+0x38>
 800efa0:	1a21      	subs	r1, r4, r0
 800efa2:	4628      	mov	r0, r5
 800efa4:	f000 f8ac 	bl	800f100 <_sbrk_r>
 800efa8:	3001      	adds	r0, #1
 800efaa:	d101      	bne.n	800efb0 <sbrk_aligned+0x38>
 800efac:	f04f 34ff 	mov.w	r4, #4294967295
 800efb0:	4620      	mov	r0, r4
 800efb2:	bd70      	pop	{r4, r5, r6, pc}
 800efb4:	24001a7c 	.word	0x24001a7c

0800efb8 <_malloc_r>:
 800efb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efbc:	1ccd      	adds	r5, r1, #3
 800efbe:	f025 0503 	bic.w	r5, r5, #3
 800efc2:	3508      	adds	r5, #8
 800efc4:	2d0c      	cmp	r5, #12
 800efc6:	bf38      	it	cc
 800efc8:	250c      	movcc	r5, #12
 800efca:	2d00      	cmp	r5, #0
 800efcc:	4607      	mov	r7, r0
 800efce:	db01      	blt.n	800efd4 <_malloc_r+0x1c>
 800efd0:	42a9      	cmp	r1, r5
 800efd2:	d905      	bls.n	800efe0 <_malloc_r+0x28>
 800efd4:	230c      	movs	r3, #12
 800efd6:	603b      	str	r3, [r7, #0]
 800efd8:	2600      	movs	r6, #0
 800efda:	4630      	mov	r0, r6
 800efdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efe0:	4e2e      	ldr	r6, [pc, #184]	; (800f09c <_malloc_r+0xe4>)
 800efe2:	f000 f89d 	bl	800f120 <__malloc_lock>
 800efe6:	6833      	ldr	r3, [r6, #0]
 800efe8:	461c      	mov	r4, r3
 800efea:	bb34      	cbnz	r4, 800f03a <_malloc_r+0x82>
 800efec:	4629      	mov	r1, r5
 800efee:	4638      	mov	r0, r7
 800eff0:	f7ff ffc2 	bl	800ef78 <sbrk_aligned>
 800eff4:	1c43      	adds	r3, r0, #1
 800eff6:	4604      	mov	r4, r0
 800eff8:	d14d      	bne.n	800f096 <_malloc_r+0xde>
 800effa:	6834      	ldr	r4, [r6, #0]
 800effc:	4626      	mov	r6, r4
 800effe:	2e00      	cmp	r6, #0
 800f000:	d140      	bne.n	800f084 <_malloc_r+0xcc>
 800f002:	6823      	ldr	r3, [r4, #0]
 800f004:	4631      	mov	r1, r6
 800f006:	4638      	mov	r0, r7
 800f008:	eb04 0803 	add.w	r8, r4, r3
 800f00c:	f000 f878 	bl	800f100 <_sbrk_r>
 800f010:	4580      	cmp	r8, r0
 800f012:	d13a      	bne.n	800f08a <_malloc_r+0xd2>
 800f014:	6821      	ldr	r1, [r4, #0]
 800f016:	3503      	adds	r5, #3
 800f018:	1a6d      	subs	r5, r5, r1
 800f01a:	f025 0503 	bic.w	r5, r5, #3
 800f01e:	3508      	adds	r5, #8
 800f020:	2d0c      	cmp	r5, #12
 800f022:	bf38      	it	cc
 800f024:	250c      	movcc	r5, #12
 800f026:	4629      	mov	r1, r5
 800f028:	4638      	mov	r0, r7
 800f02a:	f7ff ffa5 	bl	800ef78 <sbrk_aligned>
 800f02e:	3001      	adds	r0, #1
 800f030:	d02b      	beq.n	800f08a <_malloc_r+0xd2>
 800f032:	6823      	ldr	r3, [r4, #0]
 800f034:	442b      	add	r3, r5
 800f036:	6023      	str	r3, [r4, #0]
 800f038:	e00e      	b.n	800f058 <_malloc_r+0xa0>
 800f03a:	6822      	ldr	r2, [r4, #0]
 800f03c:	1b52      	subs	r2, r2, r5
 800f03e:	d41e      	bmi.n	800f07e <_malloc_r+0xc6>
 800f040:	2a0b      	cmp	r2, #11
 800f042:	d916      	bls.n	800f072 <_malloc_r+0xba>
 800f044:	1961      	adds	r1, r4, r5
 800f046:	42a3      	cmp	r3, r4
 800f048:	6025      	str	r5, [r4, #0]
 800f04a:	bf18      	it	ne
 800f04c:	6059      	strne	r1, [r3, #4]
 800f04e:	6863      	ldr	r3, [r4, #4]
 800f050:	bf08      	it	eq
 800f052:	6031      	streq	r1, [r6, #0]
 800f054:	5162      	str	r2, [r4, r5]
 800f056:	604b      	str	r3, [r1, #4]
 800f058:	4638      	mov	r0, r7
 800f05a:	f104 060b 	add.w	r6, r4, #11
 800f05e:	f000 f865 	bl	800f12c <__malloc_unlock>
 800f062:	f026 0607 	bic.w	r6, r6, #7
 800f066:	1d23      	adds	r3, r4, #4
 800f068:	1af2      	subs	r2, r6, r3
 800f06a:	d0b6      	beq.n	800efda <_malloc_r+0x22>
 800f06c:	1b9b      	subs	r3, r3, r6
 800f06e:	50a3      	str	r3, [r4, r2]
 800f070:	e7b3      	b.n	800efda <_malloc_r+0x22>
 800f072:	6862      	ldr	r2, [r4, #4]
 800f074:	42a3      	cmp	r3, r4
 800f076:	bf0c      	ite	eq
 800f078:	6032      	streq	r2, [r6, #0]
 800f07a:	605a      	strne	r2, [r3, #4]
 800f07c:	e7ec      	b.n	800f058 <_malloc_r+0xa0>
 800f07e:	4623      	mov	r3, r4
 800f080:	6864      	ldr	r4, [r4, #4]
 800f082:	e7b2      	b.n	800efea <_malloc_r+0x32>
 800f084:	4634      	mov	r4, r6
 800f086:	6876      	ldr	r6, [r6, #4]
 800f088:	e7b9      	b.n	800effe <_malloc_r+0x46>
 800f08a:	230c      	movs	r3, #12
 800f08c:	603b      	str	r3, [r7, #0]
 800f08e:	4638      	mov	r0, r7
 800f090:	f000 f84c 	bl	800f12c <__malloc_unlock>
 800f094:	e7a1      	b.n	800efda <_malloc_r+0x22>
 800f096:	6025      	str	r5, [r4, #0]
 800f098:	e7de      	b.n	800f058 <_malloc_r+0xa0>
 800f09a:	bf00      	nop
 800f09c:	24001a78 	.word	0x24001a78

0800f0a0 <_realloc_r>:
 800f0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a4:	4680      	mov	r8, r0
 800f0a6:	4614      	mov	r4, r2
 800f0a8:	460e      	mov	r6, r1
 800f0aa:	b921      	cbnz	r1, 800f0b6 <_realloc_r+0x16>
 800f0ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0b0:	4611      	mov	r1, r2
 800f0b2:	f7ff bf81 	b.w	800efb8 <_malloc_r>
 800f0b6:	b92a      	cbnz	r2, 800f0c4 <_realloc_r+0x24>
 800f0b8:	f000 f83e 	bl	800f138 <_free_r>
 800f0bc:	4625      	mov	r5, r4
 800f0be:	4628      	mov	r0, r5
 800f0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0c4:	f000 f884 	bl	800f1d0 <_malloc_usable_size_r>
 800f0c8:	4284      	cmp	r4, r0
 800f0ca:	4607      	mov	r7, r0
 800f0cc:	d802      	bhi.n	800f0d4 <_realloc_r+0x34>
 800f0ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f0d2:	d812      	bhi.n	800f0fa <_realloc_r+0x5a>
 800f0d4:	4621      	mov	r1, r4
 800f0d6:	4640      	mov	r0, r8
 800f0d8:	f7ff ff6e 	bl	800efb8 <_malloc_r>
 800f0dc:	4605      	mov	r5, r0
 800f0de:	2800      	cmp	r0, #0
 800f0e0:	d0ed      	beq.n	800f0be <_realloc_r+0x1e>
 800f0e2:	42bc      	cmp	r4, r7
 800f0e4:	4622      	mov	r2, r4
 800f0e6:	4631      	mov	r1, r6
 800f0e8:	bf28      	it	cs
 800f0ea:	463a      	movcs	r2, r7
 800f0ec:	f7ff fee2 	bl	800eeb4 <memcpy>
 800f0f0:	4631      	mov	r1, r6
 800f0f2:	4640      	mov	r0, r8
 800f0f4:	f000 f820 	bl	800f138 <_free_r>
 800f0f8:	e7e1      	b.n	800f0be <_realloc_r+0x1e>
 800f0fa:	4635      	mov	r5, r6
 800f0fc:	e7df      	b.n	800f0be <_realloc_r+0x1e>
	...

0800f100 <_sbrk_r>:
 800f100:	b538      	push	{r3, r4, r5, lr}
 800f102:	4d06      	ldr	r5, [pc, #24]	; (800f11c <_sbrk_r+0x1c>)
 800f104:	2300      	movs	r3, #0
 800f106:	4604      	mov	r4, r0
 800f108:	4608      	mov	r0, r1
 800f10a:	602b      	str	r3, [r5, #0]
 800f10c:	f7f5 f838 	bl	8004180 <_sbrk>
 800f110:	1c43      	adds	r3, r0, #1
 800f112:	d102      	bne.n	800f11a <_sbrk_r+0x1a>
 800f114:	682b      	ldr	r3, [r5, #0]
 800f116:	b103      	cbz	r3, 800f11a <_sbrk_r+0x1a>
 800f118:	6023      	str	r3, [r4, #0]
 800f11a:	bd38      	pop	{r3, r4, r5, pc}
 800f11c:	24001a80 	.word	0x24001a80

0800f120 <__malloc_lock>:
 800f120:	4801      	ldr	r0, [pc, #4]	; (800f128 <__malloc_lock+0x8>)
 800f122:	f000 b85d 	b.w	800f1e0 <__retarget_lock_acquire_recursive>
 800f126:	bf00      	nop
 800f128:	24001a84 	.word	0x24001a84

0800f12c <__malloc_unlock>:
 800f12c:	4801      	ldr	r0, [pc, #4]	; (800f134 <__malloc_unlock+0x8>)
 800f12e:	f000 b858 	b.w	800f1e2 <__retarget_lock_release_recursive>
 800f132:	bf00      	nop
 800f134:	24001a84 	.word	0x24001a84

0800f138 <_free_r>:
 800f138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f13a:	2900      	cmp	r1, #0
 800f13c:	d044      	beq.n	800f1c8 <_free_r+0x90>
 800f13e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f142:	9001      	str	r0, [sp, #4]
 800f144:	2b00      	cmp	r3, #0
 800f146:	f1a1 0404 	sub.w	r4, r1, #4
 800f14a:	bfb8      	it	lt
 800f14c:	18e4      	addlt	r4, r4, r3
 800f14e:	f7ff ffe7 	bl	800f120 <__malloc_lock>
 800f152:	4a1e      	ldr	r2, [pc, #120]	; (800f1cc <_free_r+0x94>)
 800f154:	9801      	ldr	r0, [sp, #4]
 800f156:	6813      	ldr	r3, [r2, #0]
 800f158:	b933      	cbnz	r3, 800f168 <_free_r+0x30>
 800f15a:	6063      	str	r3, [r4, #4]
 800f15c:	6014      	str	r4, [r2, #0]
 800f15e:	b003      	add	sp, #12
 800f160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f164:	f7ff bfe2 	b.w	800f12c <__malloc_unlock>
 800f168:	42a3      	cmp	r3, r4
 800f16a:	d908      	bls.n	800f17e <_free_r+0x46>
 800f16c:	6825      	ldr	r5, [r4, #0]
 800f16e:	1961      	adds	r1, r4, r5
 800f170:	428b      	cmp	r3, r1
 800f172:	bf01      	itttt	eq
 800f174:	6819      	ldreq	r1, [r3, #0]
 800f176:	685b      	ldreq	r3, [r3, #4]
 800f178:	1949      	addeq	r1, r1, r5
 800f17a:	6021      	streq	r1, [r4, #0]
 800f17c:	e7ed      	b.n	800f15a <_free_r+0x22>
 800f17e:	461a      	mov	r2, r3
 800f180:	685b      	ldr	r3, [r3, #4]
 800f182:	b10b      	cbz	r3, 800f188 <_free_r+0x50>
 800f184:	42a3      	cmp	r3, r4
 800f186:	d9fa      	bls.n	800f17e <_free_r+0x46>
 800f188:	6811      	ldr	r1, [r2, #0]
 800f18a:	1855      	adds	r5, r2, r1
 800f18c:	42a5      	cmp	r5, r4
 800f18e:	d10b      	bne.n	800f1a8 <_free_r+0x70>
 800f190:	6824      	ldr	r4, [r4, #0]
 800f192:	4421      	add	r1, r4
 800f194:	1854      	adds	r4, r2, r1
 800f196:	42a3      	cmp	r3, r4
 800f198:	6011      	str	r1, [r2, #0]
 800f19a:	d1e0      	bne.n	800f15e <_free_r+0x26>
 800f19c:	681c      	ldr	r4, [r3, #0]
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	6053      	str	r3, [r2, #4]
 800f1a2:	4421      	add	r1, r4
 800f1a4:	6011      	str	r1, [r2, #0]
 800f1a6:	e7da      	b.n	800f15e <_free_r+0x26>
 800f1a8:	d902      	bls.n	800f1b0 <_free_r+0x78>
 800f1aa:	230c      	movs	r3, #12
 800f1ac:	6003      	str	r3, [r0, #0]
 800f1ae:	e7d6      	b.n	800f15e <_free_r+0x26>
 800f1b0:	6825      	ldr	r5, [r4, #0]
 800f1b2:	1961      	adds	r1, r4, r5
 800f1b4:	428b      	cmp	r3, r1
 800f1b6:	bf04      	itt	eq
 800f1b8:	6819      	ldreq	r1, [r3, #0]
 800f1ba:	685b      	ldreq	r3, [r3, #4]
 800f1bc:	6063      	str	r3, [r4, #4]
 800f1be:	bf04      	itt	eq
 800f1c0:	1949      	addeq	r1, r1, r5
 800f1c2:	6021      	streq	r1, [r4, #0]
 800f1c4:	6054      	str	r4, [r2, #4]
 800f1c6:	e7ca      	b.n	800f15e <_free_r+0x26>
 800f1c8:	b003      	add	sp, #12
 800f1ca:	bd30      	pop	{r4, r5, pc}
 800f1cc:	24001a78 	.word	0x24001a78

0800f1d0 <_malloc_usable_size_r>:
 800f1d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1d4:	1f18      	subs	r0, r3, #4
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	bfbc      	itt	lt
 800f1da:	580b      	ldrlt	r3, [r1, r0]
 800f1dc:	18c0      	addlt	r0, r0, r3
 800f1de:	4770      	bx	lr

0800f1e0 <__retarget_lock_acquire_recursive>:
 800f1e0:	4770      	bx	lr

0800f1e2 <__retarget_lock_release_recursive>:
 800f1e2:	4770      	bx	lr

0800f1e4 <_init>:
 800f1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1e6:	bf00      	nop
 800f1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ea:	bc08      	pop	{r3}
 800f1ec:	469e      	mov	lr, r3
 800f1ee:	4770      	bx	lr

0800f1f0 <_fini>:
 800f1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1f2:	bf00      	nop
 800f1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1f6:	bc08      	pop	{r3}
 800f1f8:	469e      	mov	lr, r3
 800f1fa:	4770      	bx	lr
