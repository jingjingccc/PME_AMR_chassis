
PME_AMR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2a8  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800f578  0800f578  0001f578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f870  0800f870  0001f870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f878  0800f878  0001f878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f880  0800f880  0001f880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800f884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001a90  24000078  0800f8fc  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001b08  0800f8fc  00021b08  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021dfd  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003b4c  00000000  00000000  00041ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001538  00000000  00000000  000459f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013f8  00000000  00000000  00046f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035f2d  00000000  00000000  00048320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d54b  00000000  00000000  0007e24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153988  00000000  00000000  0009b798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ef120  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005dd4  00000000  00000000  001ef170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f560 	.word	0x0800f560

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800f560 	.word	0x0800f560

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <Control_Init>:
/**
 * @ brief Include all the initial function
 * @ retval None
 * */
void Control_Init()
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b0ab      	sub	sp, #172	; 0xac
 8000684:	af28      	add	r7, sp, #160	; 0xa0
	Hardware_Info_Init();
 8000686:	f000 faf3 	bl	8000c70 <Hardware_Info_Init>
	Control_Timer_Init();
 800068a:	f000 fabf 	bl	8000c0c <Control_Timer_Init>
	Motor_Driver_Init(&WheelA, M1_PHASE_Pin, M1_PHASE_GPIO_port, M1_Encoder_timer, M1_Encoder_timerchannel, M1_Encoder_dir, M1_PWM_timer, M1_PWM_timerchannel);
	Motor_Driver_Init(&WheelB, M2_PHASE_Pin, M2_PHASE_GPIO_port, M2_Encoder_timer, M2_Encoder_timerchannel, M2_Encoder_dir, M2_PWM_timer, M2_PWM_timerchannel);
	Motor_Driver_Init(&WheelC, M3_PHASE_Pin, M3_PHASE_GPIO_port, M3_Encoder_timer, M3_Encoder_timerchannel, M3_Encoder_dir, M3_PWM_timer, M3_PWM_timerchannel);
#endif
#ifdef G2_18V17
	Motor_Driver_Init(&WheelA, M1_DIR_Pin, M1_DIR_GPIO_port, M1_Encoder_timer, M1_Encoder_timerchannel, M1_Encoder_dir, M1_PWM_timer, M1_PWM_timerchannel);
 800068e:	4cb0      	ldr	r4, [pc, #704]	; (8000950 <Control_Init+0x2d0>)
 8000690:	2300      	movs	r3, #0
 8000692:	9327      	str	r3, [sp, #156]	; 0x9c
 8000694:	4aaf      	ldr	r2, [pc, #700]	; (8000954 <Control_Init+0x2d4>)
 8000696:	ab14      	add	r3, sp, #80	; 0x50
 8000698:	4611      	mov	r1, r2
 800069a:	224c      	movs	r2, #76	; 0x4c
 800069c:	4618      	mov	r0, r3
 800069e:	f00e fdc7 	bl	800f230 <memcpy>
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80006a8:	2304      	movs	r3, #4
 80006aa:	9312      	str	r3, [sp, #72]	; 0x48
 80006ac:	4668      	mov	r0, sp
 80006ae:	1d23      	adds	r3, r4, #4
 80006b0:	2248      	movs	r2, #72	; 0x48
 80006b2:	4619      	mov	r1, r3
 80006b4:	f00e fdbc 	bl	800f230 <memcpy>
 80006b8:	6823      	ldr	r3, [r4, #0]
 80006ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006be:	49a6      	ldr	r1, [pc, #664]	; (8000958 <Control_Init+0x2d8>)
 80006c0:	48a6      	ldr	r0, [pc, #664]	; (800095c <Control_Init+0x2dc>)
 80006c2:	f000 fa6e 	bl	8000ba2 <Motor_Driver_Init>
	Motor_Driver_Init(&WheelB, M2_DIR_Pin, M2_DIR_GPIO_port, M2_Encoder_timer, M2_Encoder_timerchannel, M2_Encoder_dir, M2_PWM_timer, M2_PWM_timerchannel);
 80006c6:	4ca6      	ldr	r4, [pc, #664]	; (8000960 <Control_Init+0x2e0>)
 80006c8:	2304      	movs	r3, #4
 80006ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80006cc:	4aa1      	ldr	r2, [pc, #644]	; (8000954 <Control_Init+0x2d4>)
 80006ce:	ab14      	add	r3, sp, #80	; 0x50
 80006d0:	4611      	mov	r1, r2
 80006d2:	224c      	movs	r2, #76	; 0x4c
 80006d4:	4618      	mov	r0, r3
 80006d6:	f00e fdab 	bl	800f230 <memcpy>
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	9313      	str	r3, [sp, #76]	; 0x4c
 80006e0:	2304      	movs	r3, #4
 80006e2:	9312      	str	r3, [sp, #72]	; 0x48
 80006e4:	4668      	mov	r0, sp
 80006e6:	1d23      	adds	r3, r4, #4
 80006e8:	2248      	movs	r2, #72	; 0x48
 80006ea:	4619      	mov	r1, r3
 80006ec:	f00e fda0 	bl	800f230 <memcpy>
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006f6:	499b      	ldr	r1, [pc, #620]	; (8000964 <Control_Init+0x2e4>)
 80006f8:	489b      	ldr	r0, [pc, #620]	; (8000968 <Control_Init+0x2e8>)
 80006fa:	f000 fa52 	bl	8000ba2 <Motor_Driver_Init>
	Motor_Driver_Init(&WheelC, M3_DIR_Pin, M3_DIR_GPIO_port, M3_Encoder_timer, M3_Encoder_timerchannel, M3_Encoder_dir, M3_PWM_timer, M3_PWM_timerchannel);
 80006fe:	4c9b      	ldr	r4, [pc, #620]	; (800096c <Control_Init+0x2ec>)
 8000700:	2300      	movs	r3, #0
 8000702:	9327      	str	r3, [sp, #156]	; 0x9c
 8000704:	4a9a      	ldr	r2, [pc, #616]	; (8000970 <Control_Init+0x2f0>)
 8000706:	ab14      	add	r3, sp, #80	; 0x50
 8000708:	4611      	mov	r1, r2
 800070a:	224c      	movs	r2, #76	; 0x4c
 800070c:	4618      	mov	r0, r3
 800070e:	f00e fd8f 	bl	800f230 <memcpy>
 8000712:	2301      	movs	r3, #1
 8000714:	9313      	str	r3, [sp, #76]	; 0x4c
 8000716:	2304      	movs	r3, #4
 8000718:	9312      	str	r3, [sp, #72]	; 0x48
 800071a:	4668      	mov	r0, sp
 800071c:	1d23      	adds	r3, r4, #4
 800071e:	2248      	movs	r2, #72	; 0x48
 8000720:	4619      	mov	r1, r3
 8000722:	f00e fd85 	bl	800f230 <memcpy>
 8000726:	6823      	ldr	r3, [r4, #0]
 8000728:	2208      	movs	r2, #8
 800072a:	4992      	ldr	r1, [pc, #584]	; (8000974 <Control_Init+0x2f4>)
 800072c:	4892      	ldr	r0, [pc, #584]	; (8000978 <Control_Init+0x2f8>)
 800072e:	f000 fa38 	bl	8000ba2 <Motor_Driver_Init>
	Motor_Driver_Init(&WheelD, M4_DIR_Pin, M4_DIR_GPIO_port, M4_Encoder_timer, M4_Encoder_timerchannel, M4_Encoder_dir, M4_PWM_timer, M4_PWM_timerchannel);
 8000732:	4c92      	ldr	r4, [pc, #584]	; (800097c <Control_Init+0x2fc>)
 8000734:	2304      	movs	r3, #4
 8000736:	9327      	str	r3, [sp, #156]	; 0x9c
 8000738:	4a8d      	ldr	r2, [pc, #564]	; (8000970 <Control_Init+0x2f0>)
 800073a:	ab14      	add	r3, sp, #80	; 0x50
 800073c:	4611      	mov	r1, r2
 800073e:	224c      	movs	r2, #76	; 0x4c
 8000740:	4618      	mov	r0, r3
 8000742:	f00e fd75 	bl	800f230 <memcpy>
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	9313      	str	r3, [sp, #76]	; 0x4c
 800074c:	2304      	movs	r3, #4
 800074e:	9312      	str	r3, [sp, #72]	; 0x48
 8000750:	4668      	mov	r0, sp
 8000752:	1d23      	adds	r3, r4, #4
 8000754:	2248      	movs	r2, #72	; 0x48
 8000756:	4619      	mov	r1, r3
 8000758:	f00e fd6a 	bl	800f230 <memcpy>
 800075c:	6823      	ldr	r3, [r4, #0]
 800075e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000762:	4987      	ldr	r1, [pc, #540]	; (8000980 <Control_Init+0x300>)
 8000764:	4887      	ldr	r0, [pc, #540]	; (8000984 <Control_Init+0x304>)
 8000766:	f000 fa1c 	bl	8000ba2 <Motor_Driver_Init>
#endif

	Pid_Param_Init(&WheelA, M1_KP, M1_KI, M1_KD);
 800076a:	ed9f 2b71 	vldr	d2, [pc, #452]	; 8000930 <Control_Init+0x2b0>
 800076e:	ed9f 1b72 	vldr	d1, [pc, #456]	; 8000938 <Control_Init+0x2b8>
 8000772:	eeb7 0b08 	vmov.f64	d0, #120	; 0x3fc00000  1.5
 8000776:	4879      	ldr	r0, [pc, #484]	; (800095c <Control_Init+0x2dc>)
 8000778:	f000 f9f4 	bl	8000b64 <Pid_Param_Init>
	Pid_Param_Init(&WheelB, M2_KP, M2_KI, M2_KD);
 800077c:	ed9f 2b6c 	vldr	d2, [pc, #432]	; 8000930 <Control_Init+0x2b0>
 8000780:	eeb3 1b0e 	vmov.f64	d1, #62	; 0x41f00000  30.0
 8000784:	eeb0 0b08 	vmov.f64	d0, #8	; 0x40400000  3.0
 8000788:	4877      	ldr	r0, [pc, #476]	; (8000968 <Control_Init+0x2e8>)
 800078a:	f000 f9eb 	bl	8000b64 <Pid_Param_Init>
	Pid_Param_Init(&WheelC, M3_KP, M3_KI, M3_KD);
 800078e:	ed9f 2b68 	vldr	d2, [pc, #416]	; 8000930 <Control_Init+0x2b0>
 8000792:	eeb3 1b0e 	vmov.f64	d1, #62	; 0x41f00000  30.0
 8000796:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 800079a:	4877      	ldr	r0, [pc, #476]	; (8000978 <Control_Init+0x2f8>)
 800079c:	f000 f9e2 	bl	8000b64 <Pid_Param_Init>
	Pid_Param_Init(&WheelD, M4_KP, M4_KI, M4_KD);
 80007a0:	ed9f 2b63 	vldr	d2, [pc, #396]	; 8000930 <Control_Init+0x2b0>
 80007a4:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8000940 <Control_Init+0x2c0>
 80007a8:	ed9f 0b67 	vldr	d0, [pc, #412]	; 8000948 <Control_Init+0x2c8>
 80007ac:	4875      	ldr	r0, [pc, #468]	; (8000984 <Control_Init+0x304>)
 80007ae:	f000 f9d9 	bl	8000b64 <Pid_Param_Init>

	i = 0;
 80007b2:	4b75      	ldr	r3, [pc, #468]	; (8000988 <Control_Init+0x308>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
	limit_integral = 1.0;
 80007b8:	4974      	ldr	r1, [pc, #464]	; (800098c <Control_Init+0x30c>)
 80007ba:	f04f 0200 	mov.w	r2, #0
 80007be:	4b74      	ldr	r3, [pc, #464]	; (8000990 <Control_Init+0x310>)
 80007c0:	e9c1 2300 	strd	r2, r3, [r1]
	pwm_arr = M1_PWM_timer.Init.Period;
 80007c4:	4b63      	ldr	r3, [pc, #396]	; (8000954 <Control_Init+0x2d4>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	ee07 3a90 	vmov	s15, r3
 80007cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007d0:	4b70      	ldr	r3, [pc, #448]	; (8000994 <Control_Init+0x314>)
 80007d2:	ed83 7b00 	vstr	d7, [r3]

	// PCLK1_freq, APB1 timer frequency
	int32_t PCLK1_freq = HAL_RCC_GetPCLK1Freq();
 80007d6:	f009 f927 	bl	8009a28 <HAL_RCC_GetPCLK1Freq>
 80007da:	4603      	mov	r3, r0
 80007dc:	607b      	str	r3, [r7, #4]

	if((RCC->CFGR & RCC_D2CFGR_D2PPRE1) != 0)
 80007de:	4b6e      	ldr	r3, [pc, #440]	; (8000998 <Control_Init+0x318>)
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d002      	beq.n	80007f0 <Control_Init+0x170>
	{
		PCLK1_freq *=2;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
	}

	int32_t timer_interrupt_freq = (double)PCLK1_freq / (Encoder_Interrupt_timer.Init.Prescaler + 1) / (Encoder_Interrupt_timer.Init.Period + 1);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	ee07 3a90 	vmov	s15, r3
 80007f6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007fa:	4b68      	ldr	r3, [pc, #416]	; (800099c <Control_Init+0x31c>)
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	3301      	adds	r3, #1
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000808:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800080c:	4b63      	ldr	r3, [pc, #396]	; (800099c <Control_Init+0x31c>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	3301      	adds	r3, #1
 8000812:	ee07 3a90 	vmov	s15, r3
 8000816:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800081a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800081e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000822:	ee17 3a90 	vmov	r3, s15
 8000826:	603b      	str	r3, [r7, #0]
	control_period = (double)(1 / (double)timer_interrupt_freq);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	ee07 3a90 	vmov	s15, r3
 800082e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000832:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000836:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800083a:	4b59      	ldr	r3, [pc, #356]	; (80009a0 <Control_Init+0x320>)
 800083c:	ed83 7b00 	vstr	d7, [r3]

	WheelA.integral = 0.0;
 8000840:	4946      	ldr	r1, [pc, #280]	; (800095c <Control_Init+0x2dc>)
 8000842:	f04f 0200 	mov.w	r2, #0
 8000846:	f04f 0300 	mov.w	r3, #0
 800084a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	WheelB.integral = 0.0;
 800084e:	4946      	ldr	r1, [pc, #280]	; (8000968 <Control_Init+0x2e8>)
 8000850:	f04f 0200 	mov.w	r2, #0
 8000854:	f04f 0300 	mov.w	r3, #0
 8000858:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	WheelC.integral = 0.0;
 800085c:	4946      	ldr	r1, [pc, #280]	; (8000978 <Control_Init+0x2f8>)
 800085e:	f04f 0200 	mov.w	r2, #0
 8000862:	f04f 0300 	mov.w	r3, #0
 8000866:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	WheelD.integral = 0.0;
 800086a:	4946      	ldr	r1, [pc, #280]	; (8000984 <Control_Init+0x304>)
 800086c:	f04f 0200 	mov.w	r2, #0
 8000870:	f04f 0300 	mov.w	r3, #0
 8000874:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	WheelA.goal = 0.0;
 8000878:	4938      	ldr	r1, [pc, #224]	; (800095c <Control_Init+0x2dc>)
 800087a:	f04f 0200 	mov.w	r2, #0
 800087e:	f04f 0300 	mov.w	r3, #0
 8000882:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	WheelB.goal = 0.0;
 8000886:	4938      	ldr	r1, [pc, #224]	; (8000968 <Control_Init+0x2e8>)
 8000888:	f04f 0200 	mov.w	r2, #0
 800088c:	f04f 0300 	mov.w	r3, #0
 8000890:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	WheelC.goal = 0.0;
 8000894:	4938      	ldr	r1, [pc, #224]	; (8000978 <Control_Init+0x2f8>)
 8000896:	f04f 0200 	mov.w	r2, #0
 800089a:	f04f 0300 	mov.w	r3, #0
 800089e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	WheelD.goal = 0.0;
 80008a2:	4938      	ldr	r1, [pc, #224]	; (8000984 <Control_Init+0x304>)
 80008a4:	f04f 0200 	mov.w	r2, #0
 80008a8:	f04f 0300 	mov.w	r3, #0
 80008ac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	// stop chassis
	HAL_GPIO_WritePin(WheelA.DIR_pin_type, WheelA.DIR_pin_Num, GPIO_PIN_RESET);
 80008b0:	4b2a      	ldr	r3, [pc, #168]	; (800095c <Control_Init+0x2dc>)
 80008b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b4:	4a29      	ldr	r2, [pc, #164]	; (800095c <Control_Init+0x2dc>)
 80008b6:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 80008ba:	2200      	movs	r2, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f008 f925 	bl	8008b0c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelA.pwm_timer), WheelA.pwm_timer_channel, 0);
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <Control_Init+0x2dc>)
 80008c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d105      	bne.n	80008d8 <Control_Init+0x258>
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <Control_Init+0x2dc>)
 80008ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80008d2:	2200      	movs	r2, #0
 80008d4:	635a      	str	r2, [r3, #52]	; 0x34
 80008d6:	e06a      	b.n	80009ae <Control_Init+0x32e>
 80008d8:	4b20      	ldr	r3, [pc, #128]	; (800095c <Control_Init+0x2dc>)
 80008da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008de:	2b04      	cmp	r3, #4
 80008e0:	d105      	bne.n	80008ee <Control_Init+0x26e>
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <Control_Init+0x2dc>)
 80008e4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80008e8:	2300      	movs	r3, #0
 80008ea:	6393      	str	r3, [r2, #56]	; 0x38
 80008ec:	e05f      	b.n	80009ae <Control_Init+0x32e>
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <Control_Init+0x2dc>)
 80008f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008f4:	2b08      	cmp	r3, #8
 80008f6:	d105      	bne.n	8000904 <Control_Init+0x284>
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <Control_Init+0x2dc>)
 80008fa:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80008fe:	2300      	movs	r3, #0
 8000900:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000902:	e054      	b.n	80009ae <Control_Init+0x32e>
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <Control_Init+0x2dc>)
 8000906:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800090a:	2b0c      	cmp	r3, #12
 800090c:	d105      	bne.n	800091a <Control_Init+0x29a>
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <Control_Init+0x2dc>)
 8000910:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000914:	2300      	movs	r3, #0
 8000916:	6413      	str	r3, [r2, #64]	; 0x40
 8000918:	e049      	b.n	80009ae <Control_Init+0x32e>
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <Control_Init+0x2dc>)
 800091c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000920:	2b10      	cmp	r3, #16
 8000922:	d13f      	bne.n	80009a4 <Control_Init+0x324>
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <Control_Init+0x2dc>)
 8000926:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800092a:	2300      	movs	r3, #0
 800092c:	6593      	str	r3, [r2, #88]	; 0x58
 800092e:	e03e      	b.n	80009ae <Control_Init+0x32e>
	...
 800093c:	40490000 	.word	0x40490000
 8000940:	00000000 	.word	0x00000000
 8000944:	404e0000 	.word	0x404e0000
 8000948:	33333333 	.word	0x33333333
 800094c:	40173333 	.word	0x40173333
 8000950:	2400175c 	.word	0x2400175c
 8000954:	2400188c 	.word	0x2400188c
 8000958:	58020c00 	.word	0x58020c00
 800095c:	240000f0 	.word	0x240000f0
 8000960:	24001840 	.word	0x24001840
 8000964:	58020400 	.word	0x58020400
 8000968:	24000200 	.word	0x24000200
 800096c:	240017a8 	.word	0x240017a8
 8000970:	240018d8 	.word	0x240018d8
 8000974:	58021000 	.word	0x58021000
 8000978:	24000310 	.word	0x24000310
 800097c:	240017f4 	.word	0x240017f4
 8000980:	58020800 	.word	0x58020800
 8000984:	24000420 	.word	0x24000420
 8000988:	24000530 	.word	0x24000530
 800098c:	240000d8 	.word	0x240000d8
 8000990:	3ff00000 	.word	0x3ff00000
 8000994:	240000e0 	.word	0x240000e0
 8000998:	58024400 	.word	0x58024400
 800099c:	24001924 	.word	0x24001924
 80009a0:	240000e8 	.word	0x240000e8
 80009a4:	4b6b      	ldr	r3, [pc, #428]	; (8000b54 <Control_Init+0x4d4>)
 80009a6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80009aa:	2300      	movs	r3, #0
 80009ac:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_GPIO_WritePin(WheelB.DIR_pin_type, WheelB.DIR_pin_Num, GPIO_PIN_RESET);
 80009ae:	4b6a      	ldr	r3, [pc, #424]	; (8000b58 <Control_Init+0x4d8>)
 80009b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b2:	4a69      	ldr	r2, [pc, #420]	; (8000b58 <Control_Init+0x4d8>)
 80009b4:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 80009b8:	2200      	movs	r2, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f008 f8a6 	bl	8008b0c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelB.pwm_timer), WheelB.pwm_timer_channel, 0);
 80009c0:	4b65      	ldr	r3, [pc, #404]	; (8000b58 <Control_Init+0x4d8>)
 80009c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d105      	bne.n	80009d6 <Control_Init+0x356>
 80009ca:	4b63      	ldr	r3, [pc, #396]	; (8000b58 <Control_Init+0x4d8>)
 80009cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80009d0:	2200      	movs	r2, #0
 80009d2:	635a      	str	r2, [r3, #52]	; 0x34
 80009d4:	e030      	b.n	8000a38 <Control_Init+0x3b8>
 80009d6:	4b60      	ldr	r3, [pc, #384]	; (8000b58 <Control_Init+0x4d8>)
 80009d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009dc:	2b04      	cmp	r3, #4
 80009de:	d105      	bne.n	80009ec <Control_Init+0x36c>
 80009e0:	4b5d      	ldr	r3, [pc, #372]	; (8000b58 <Control_Init+0x4d8>)
 80009e2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80009e6:	2300      	movs	r3, #0
 80009e8:	6393      	str	r3, [r2, #56]	; 0x38
 80009ea:	e025      	b.n	8000a38 <Control_Init+0x3b8>
 80009ec:	4b5a      	ldr	r3, [pc, #360]	; (8000b58 <Control_Init+0x4d8>)
 80009ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009f2:	2b08      	cmp	r3, #8
 80009f4:	d105      	bne.n	8000a02 <Control_Init+0x382>
 80009f6:	4b58      	ldr	r3, [pc, #352]	; (8000b58 <Control_Init+0x4d8>)
 80009f8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80009fc:	2300      	movs	r3, #0
 80009fe:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000a00:	e01a      	b.n	8000a38 <Control_Init+0x3b8>
 8000a02:	4b55      	ldr	r3, [pc, #340]	; (8000b58 <Control_Init+0x4d8>)
 8000a04:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a08:	2b0c      	cmp	r3, #12
 8000a0a:	d105      	bne.n	8000a18 <Control_Init+0x398>
 8000a0c:	4b52      	ldr	r3, [pc, #328]	; (8000b58 <Control_Init+0x4d8>)
 8000a0e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a12:	2300      	movs	r3, #0
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	e00f      	b.n	8000a38 <Control_Init+0x3b8>
 8000a18:	4b4f      	ldr	r3, [pc, #316]	; (8000b58 <Control_Init+0x4d8>)
 8000a1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a1e:	2b10      	cmp	r3, #16
 8000a20:	d105      	bne.n	8000a2e <Control_Init+0x3ae>
 8000a22:	4b4d      	ldr	r3, [pc, #308]	; (8000b58 <Control_Init+0x4d8>)
 8000a24:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a28:	2300      	movs	r3, #0
 8000a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2c:	e004      	b.n	8000a38 <Control_Init+0x3b8>
 8000a2e:	4b4a      	ldr	r3, [pc, #296]	; (8000b58 <Control_Init+0x4d8>)
 8000a30:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a34:	2300      	movs	r3, #0
 8000a36:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_GPIO_WritePin(WheelC.DIR_pin_type, WheelC.DIR_pin_Num, GPIO_PIN_RESET);
 8000a38:	4b48      	ldr	r3, [pc, #288]	; (8000b5c <Control_Init+0x4dc>)
 8000a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3c:	4a47      	ldr	r2, [pc, #284]	; (8000b5c <Control_Init+0x4dc>)
 8000a3e:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8000a42:	2200      	movs	r2, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f008 f861 	bl	8008b0c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelC.pwm_timer), WheelC.pwm_timer_channel, 0);
 8000a4a:	4b44      	ldr	r3, [pc, #272]	; (8000b5c <Control_Init+0x4dc>)
 8000a4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d105      	bne.n	8000a60 <Control_Init+0x3e0>
 8000a54:	4b41      	ldr	r3, [pc, #260]	; (8000b5c <Control_Init+0x4dc>)
 8000a56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5e:	e030      	b.n	8000ac2 <Control_Init+0x442>
 8000a60:	4b3e      	ldr	r3, [pc, #248]	; (8000b5c <Control_Init+0x4dc>)
 8000a62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	d105      	bne.n	8000a76 <Control_Init+0x3f6>
 8000a6a:	4b3c      	ldr	r3, [pc, #240]	; (8000b5c <Control_Init+0x4dc>)
 8000a6c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a70:	2300      	movs	r3, #0
 8000a72:	6393      	str	r3, [r2, #56]	; 0x38
 8000a74:	e025      	b.n	8000ac2 <Control_Init+0x442>
 8000a76:	4b39      	ldr	r3, [pc, #228]	; (8000b5c <Control_Init+0x4dc>)
 8000a78:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a7c:	2b08      	cmp	r3, #8
 8000a7e:	d105      	bne.n	8000a8c <Control_Init+0x40c>
 8000a80:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <Control_Init+0x4dc>)
 8000a82:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a86:	2300      	movs	r3, #0
 8000a88:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000a8a:	e01a      	b.n	8000ac2 <Control_Init+0x442>
 8000a8c:	4b33      	ldr	r3, [pc, #204]	; (8000b5c <Control_Init+0x4dc>)
 8000a8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a92:	2b0c      	cmp	r3, #12
 8000a94:	d105      	bne.n	8000aa2 <Control_Init+0x422>
 8000a96:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <Control_Init+0x4dc>)
 8000a98:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa0:	e00f      	b.n	8000ac2 <Control_Init+0x442>
 8000aa2:	4b2e      	ldr	r3, [pc, #184]	; (8000b5c <Control_Init+0x4dc>)
 8000aa4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000aa8:	2b10      	cmp	r3, #16
 8000aaa:	d105      	bne.n	8000ab8 <Control_Init+0x438>
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <Control_Init+0x4dc>)
 8000aae:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab6:	e004      	b.n	8000ac2 <Control_Init+0x442>
 8000ab8:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <Control_Init+0x4dc>)
 8000aba:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000abe:	2300      	movs	r3, #0
 8000ac0:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_GPIO_WritePin(WheelD.DIR_pin_type, WheelD.DIR_pin_Num, GPIO_PIN_RESET);
 8000ac2:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <Control_Init+0x4e0>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac6:	4a26      	ldr	r2, [pc, #152]	; (8000b60 <Control_Init+0x4e0>)
 8000ac8:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8000acc:	2200      	movs	r2, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f008 f81c 	bl	8008b0c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <Control_Init+0x4e0>)
 8000ad6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d105      	bne.n	8000aea <Control_Init+0x46a>
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <Control_Init+0x4e0>)
 8000ae0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ae8:	e030      	b.n	8000b4c <Control_Init+0x4cc>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <Control_Init+0x4e0>)
 8000aec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000af0:	2b04      	cmp	r3, #4
 8000af2:	d105      	bne.n	8000b00 <Control_Init+0x480>
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <Control_Init+0x4e0>)
 8000af6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000afa:	2300      	movs	r3, #0
 8000afc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000afe:	e025      	b.n	8000b4c <Control_Init+0x4cc>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b00:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <Control_Init+0x4e0>)
 8000b02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000b06:	2b08      	cmp	r3, #8
 8000b08:	d105      	bne.n	8000b16 <Control_Init+0x496>
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <Control_Init+0x4e0>)
 8000b0c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b10:	2300      	movs	r3, #0
 8000b12:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000b14:	e01a      	b.n	8000b4c <Control_Init+0x4cc>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <Control_Init+0x4e0>)
 8000b18:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000b1c:	2b0c      	cmp	r3, #12
 8000b1e:	d105      	bne.n	8000b2c <Control_Init+0x4ac>
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <Control_Init+0x4e0>)
 8000b22:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b26:	2300      	movs	r3, #0
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b2a:	e00f      	b.n	8000b4c <Control_Init+0x4cc>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <Control_Init+0x4e0>)
 8000b2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000b32:	2b10      	cmp	r3, #16
 8000b34:	d105      	bne.n	8000b42 <Control_Init+0x4c2>
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <Control_Init+0x4e0>)
 8000b38:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000b40:	e004      	b.n	8000b4c <Control_Init+0x4cc>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <Control_Init+0x4e0>)
 8000b44:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b48:	2300      	movs	r3, #0
 8000b4a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	240000f0 	.word	0x240000f0
 8000b58:	24000200 	.word	0x24000200
 8000b5c:	24000310 	.word	0x24000310
 8000b60:	24000420 	.word	0x24000420

08000b64 <Pid_Param_Init>:
/**
 * @ brief assign the pid gain value into the PID_Controll object
 * @ retval None
 * */
void Pid_Param_Init(PID_Control *Wheel_, double kp, double ki, double kd)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	61f8      	str	r0, [r7, #28]
 8000b6c:	ed87 0b04 	vstr	d0, [r7, #16]
 8000b70:	ed87 1b02 	vstr	d1, [r7, #8]
 8000b74:	ed87 2b00 	vstr	d2, [r7]
	Wheel_->Kp = kp;
 8000b78:	69f9      	ldr	r1, [r7, #28]
 8000b7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b7e:	e9c1 2300 	strd	r2, r3, [r1]
	Wheel_->Ki = ki;
 8000b82:	69f9      	ldr	r1, [r7, #28]
 8000b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b88:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Wheel_->Kd = kd;
 8000b8c:	69f9      	ldr	r1, [r7, #28]
 8000b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b92:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8000b96:	bf00      	nop
 8000b98:	3724      	adds	r7, #36	; 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <Motor_Driver_Init>:
#ifdef G2_18V17
void Motor_Driver_Init(PID_Control *Wheel_,
		GPIO_TypeDef *DIR_pin_type, uint16_t DIR_pin_num_,
		TIM_HandleTypeDef encoder_timer_, uint32_t encoder_timer_channel_, int encoder_dir_,
		TIM_HandleTypeDef pwm_timer_, uint32_t pwm_timer_channel_)
{
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	61fb      	str	r3, [r7, #28]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	80fb      	strh	r3, [r7, #6]
	Wheel_->DIR_pin_type = DIR_pin_type;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	661a      	str	r2, [r3, #96]	; 0x60
	Wheel_->DIR_pin_Num = DIR_pin_num_;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	88fa      	ldrh	r2, [r7, #6]
 8000bbe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	Wheel_->encoder_timer = encoder_timer_;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3368      	adds	r3, #104	; 0x68
 8000bc6:	f107 011c 	add.w	r1, r7, #28
 8000bca:	224c      	movs	r2, #76	; 0x4c
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00e fb2f 	bl	800f230 <memcpy>
	Wheel_->encoder_timer_channel = encoder_timer_channel_;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000bd6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	Wheel_->encoder_dir = encoder_dir_;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000bde:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	Wheel_->pwm_timer = pwm_timer_;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	33bc      	adds	r3, #188	; 0xbc
 8000be6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000bea:	224c      	movs	r2, #76	; 0x4c
 8000bec:	4618      	mov	r0, r3
 8000bee:	f00e fb1f 	bl	800f230 <memcpy>
	Wheel_->pwm_timer_channel = pwm_timer_channel_;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000bf8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c06:	b002      	add	sp, #8
 8000c08:	4770      	bx	lr
	...

08000c0c <Control_Timer_Init>:
 * @ brief initialize the timers that encoder and pwm used
 * @ all the definition in the function are in "control.h"
 * @ retval None
 * */
void Control_Timer_Init()
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&M1_Encoder_timer, M1_Encoder_timerchannel);
 8000c10:	2104      	movs	r1, #4
 8000c12:	4810      	ldr	r0, [pc, #64]	; (8000c54 <Control_Timer_Init+0x48>)
 8000c14:	f00a ffee 	bl	800bbf4 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M1_PWM_timer, M1_PWM_timerchannel);
 8000c18:	2100      	movs	r1, #0
 8000c1a:	480f      	ldr	r0, [pc, #60]	; (8000c58 <Control_Timer_Init+0x4c>)
 8000c1c:	f00a fe28 	bl	800b870 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M2_Encoder_timer, M2_Encoder_timerchannel);
 8000c20:	2104      	movs	r1, #4
 8000c22:	480e      	ldr	r0, [pc, #56]	; (8000c5c <Control_Timer_Init+0x50>)
 8000c24:	f00a ffe6 	bl	800bbf4 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M2_PWM_timer, M2_PWM_timerchannel);
 8000c28:	2104      	movs	r1, #4
 8000c2a:	480b      	ldr	r0, [pc, #44]	; (8000c58 <Control_Timer_Init+0x4c>)
 8000c2c:	f00a fe20 	bl	800b870 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M3_Encoder_timer, M3_Encoder_timerchannel);
 8000c30:	2104      	movs	r1, #4
 8000c32:	480b      	ldr	r0, [pc, #44]	; (8000c60 <Control_Timer_Init+0x54>)
 8000c34:	f00a ffde 	bl	800bbf4 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M3_PWM_timer, M3_PWM_timerchannel);
 8000c38:	2100      	movs	r1, #0
 8000c3a:	480a      	ldr	r0, [pc, #40]	; (8000c64 <Control_Timer_Init+0x58>)
 8000c3c:	f00a fe18 	bl	800b870 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M4_Encoder_timer, M4_Encoder_timerchannel);
 8000c40:	2104      	movs	r1, #4
 8000c42:	4809      	ldr	r0, [pc, #36]	; (8000c68 <Control_Timer_Init+0x5c>)
 8000c44:	f00a ffd6 	bl	800bbf4 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M4_PWM_timer, M4_PWM_timerchannel);
 8000c48:	2104      	movs	r1, #4
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <Control_Timer_Init+0x58>)
 8000c4c:	f00a fe10 	bl	800b870 <HAL_TIM_PWM_Start>
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2400175c 	.word	0x2400175c
 8000c58:	2400188c 	.word	0x2400188c
 8000c5c:	24001840 	.word	0x24001840
 8000c60:	240017a8 	.word	0x240017a8
 8000c64:	240018d8 	.word	0x240018d8
 8000c68:	240017f4 	.word	0x240017f4
 8000c6c:	00000000 	.word	0x00000000

08000c70 <Hardware_Info_Init>:
/**
 * @ brief assign the hardware value for motor and chassis radius error
 * @ retval None
 * */
void Hardware_Info_Init()
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
	radius_error_a = 0.69;
 8000c74:	491a      	ldr	r1, [pc, #104]	; (8000ce0 <Hardware_Info_Init+0x70>)
 8000c76:	a312      	add	r3, pc, #72	; (adr r3, 8000cc0 <Hardware_Info_Init+0x50>)
 8000c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7c:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_b = 0.565;
 8000c80:	4918      	ldr	r1, [pc, #96]	; (8000ce4 <Hardware_Info_Init+0x74>)
 8000c82:	a311      	add	r3, pc, #68	; (adr r3, 8000cc8 <Hardware_Info_Init+0x58>)
 8000c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c88:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_c = 0.69;
 8000c8c:	4916      	ldr	r1, [pc, #88]	; (8000ce8 <Hardware_Info_Init+0x78>)
 8000c8e:	a30c      	add	r3, pc, #48	; (adr r3, 8000cc0 <Hardware_Info_Init+0x50>)
 8000c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c94:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_d = 0.56;
 8000c98:	4914      	ldr	r1, [pc, #80]	; (8000cec <Hardware_Info_Init+0x7c>)
 8000c9a:	a30d      	add	r3, pc, #52	; (adr r3, 8000cd0 <Hardware_Info_Init+0x60>)
 8000c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca0:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_chassis = 0.7;
 8000ca4:	4912      	ldr	r1, [pc, #72]	; (8000cf0 <Hardware_Info_Init+0x80>)
 8000ca6:	a30c      	add	r3, pc, #48	; (adr r3, 8000cd8 <Hardware_Info_Init+0x68>)
 8000ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cac:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	f3af 8000 	nop.w
 8000cc0:	e147ae14 	.word	0xe147ae14
 8000cc4:	3fe6147a 	.word	0x3fe6147a
 8000cc8:	e147ae14 	.word	0xe147ae14
 8000ccc:	3fe2147a 	.word	0x3fe2147a
 8000cd0:	1eb851ec 	.word	0x1eb851ec
 8000cd4:	3fe1eb85 	.word	0x3fe1eb85
 8000cd8:	66666666 	.word	0x66666666
 8000cdc:	3fe66666 	.word	0x3fe66666
 8000ce0:	24000098 	.word	0x24000098
 8000ce4:	240000a0 	.word	0x240000a0
 8000ce8:	240000a8 	.word	0x240000a8
 8000cec:	240000b0 	.word	0x240000b0
 8000cf0:	240000b8 	.word	0x240000b8
 8000cf4:	00000000 	.word	0x00000000

08000cf8 <PID_Controller>:
 * @ brief PID control for the motor
 * @ param Wheel_ the object declare for each motor (WheelA, WheelB, WheelC)
 * @ retval None
 * */
void PID_Controller(PID_Control *Wheel_)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]

	Wheel_->CountNum = __HAL_TIM_GetCounter(&Wheel_->encoder_timer)* Wheel_->encoder_dir;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	fb12 f303 	smulbb	r3, r2, r3
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	831a      	strh	r2, [r3, #24]

	if(Wheel_ == &WheelA)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4abe      	ldr	r2, [pc, #760]	; (8001018 <PID_Controller+0x320>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d113      	bne.n	8000d4c <PID_Controller+0x54>
	{
		Wheel_->rps = (double)Wheel_->CountNum / ((double)4 * encoder_resolution * (double)(12 / 1.125) * control_period);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000d2a:	ee07 3a90 	vmov	s15, r3
 8000d2e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000d32:	4bba      	ldr	r3, [pc, #744]	; (800101c <PID_Controller+0x324>)
 8000d34:	ed93 7b00 	vldr	d7, [r3]
 8000d38:	ed9f 6bb3 	vldr	d6, [pc, #716]	; 8001008 <PID_Controller+0x310>
 8000d3c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d40:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	ed83 7b08 	vstr	d7, [r3, #32]
 8000d4a:	e012      	b.n	8000d72 <PID_Controller+0x7a>
	}
	else
	{
		Wheel_->rps = (double)Wheel_->CountNum / ((double)4 * encoder_resolution * speed_reduction_ratio * control_period);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000d52:	ee07 3a90 	vmov	s15, r3
 8000d56:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000d5a:	4bb0      	ldr	r3, [pc, #704]	; (800101c <PID_Controller+0x324>)
 8000d5c:	ed93 7b00 	vldr	d7, [r3]
 8000d60:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8001010 <PID_Controller+0x318>
 8000d64:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d68:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	ed83 7b08 	vstr	d7, [r3, #32]
	}

	__HAL_TIM_SetCounter(&Wheel_->encoder_timer ,0);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d76:	2200      	movs	r2, #0
 8000d78:	625a      	str	r2, [r3, #36]	; 0x24
//	{
//		sssss[i] = Wheel_->rps;
//		i++;
//	}

	Wheel_->err = Wheel_->goal - Wheel_->rps;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	ed93 7b08 	vldr	d7, [r3, #32]
 8000d86:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	Wheel_->propotional = (double)Wheel_->err * Wheel_->Kp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	ed93 7b00 	vldr	d7, [r3]
 8000d9c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	Wheel_->integral += (double)Wheel_->err * Wheel_->Ki * control_period;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	ed93 7b02 	vldr	d7, [r3, #8]
 8000db8:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000dbc:	4b97      	ldr	r3, [pc, #604]	; (800101c <PID_Controller+0x324>)
 8000dbe:	ed93 7b00 	vldr	d7, [r3]
 8000dc2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000dc6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	Wheel_->integral = (Wheel_->integral > limit_integral)? limit_integral : Wheel_->integral;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000dd6:	4b92      	ldr	r3, [pc, #584]	; (8001020 <PID_Controller+0x328>)
 8000dd8:	ed93 7b00 	vldr	d7, [r3]
 8000ddc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de4:	dd03      	ble.n	8000dee <PID_Controller+0xf6>
 8000de6:	4b8e      	ldr	r3, [pc, #568]	; (8001020 <PID_Controller+0x328>)
 8000de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dec:	e002      	b.n	8000df4 <PID_Controller+0xfc>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8000df4:	6879      	ldr	r1, [r7, #4]
 8000df6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	Wheel_->integral = (Wheel_->integral < (double)(-1) * limit_integral)? (double)(-1) * limit_integral : Wheel_->integral;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000e00:	4b87      	ldr	r3, [pc, #540]	; (8001020 <PID_Controller+0x328>)
 8000e02:	ed93 7b00 	vldr	d7, [r3]
 8000e06:	eeb1 7b47 	vneg.f64	d7, d7
 8000e0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e12:	d505      	bpl.n	8000e20 <PID_Controller+0x128>
 8000e14:	4b82      	ldr	r3, [pc, #520]	; (8001020 <PID_Controller+0x328>)
 8000e16:	ed93 7b00 	vldr	d7, [r3]
 8000e1a:	eeb1 7b47 	vneg.f64	d7, d7
 8000e1e:	e002      	b.n	8000e26 <PID_Controller+0x12e>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	Wheel_->differential = (double) Wheel_->Kd * (-1) * (Wheel_->rps - Wheel_->rps_before) / control_period;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	ed93 7b04 	vldr	d7, [r3, #16]
 8000e32:	eeb1 6b47 	vneg.f64	d6, d7
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	ed93 5b08 	vldr	d5, [r3, #32]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8000e42:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000e46:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000e4a:	4b74      	ldr	r3, [pc, #464]	; (800101c <PID_Controller+0x324>)
 8000e4c:	ed93 6b00 	vldr	d6, [r3]
 8000e50:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50

	Wheel_->duty = Wheel_->propotional + Wheel_->integral + Wheel_->differential;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000e66:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8000e70:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	Wheel_->duty = (Wheel_->duty > 1)? 1 : Wheel_->duty;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000e80:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e84:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8c:	dd03      	ble.n	8000e96 <PID_Controller+0x19e>
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	4b64      	ldr	r3, [pc, #400]	; (8001024 <PID_Controller+0x32c>)
 8000e94:	e002      	b.n	8000e9c <PID_Controller+0x1a4>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	Wheel_->duty = (Wheel_->duty < -1)? -1 : Wheel_->duty;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000ea8:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000eac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb4:	d503      	bpl.n	8000ebe <PID_Controller+0x1c6>
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	4b5b      	ldr	r3, [pc, #364]	; (8001028 <PID_Controller+0x330>)
 8000ebc:	e002      	b.n	8000ec4 <PID_Controller+0x1cc>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		HAL_GPIO_WritePin(Wheel_->PHASE_pin_type, Wheel_->PHASE_pin_Num, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
	}
#endif
#ifdef G2_18V17
	if(Wheel_->duty >= 0)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000ed0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed8:	f2c0 80aa 	blt.w	8001030 <PID_Controller+0x338>
	{
		HAL_GPIO_WritePin(Wheel_->DIR_pin_type, Wheel_->DIR_pin_Num, GPIO_PIN_RESET);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f007 fe0f 	bl	8008b0c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d112      	bne.n	8000f1e <PID_Controller+0x226>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000efe:	4b4b      	ldr	r3, [pc, #300]	; (800102c <PID_Controller+0x334>)
 8000f00:	ed93 7b00 	vldr	d7, [r3]
 8000f04:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f08:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000f12:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f16:	ee17 2a90 	vmov	r2, s15
 8000f1a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f1c:	e11b      	b.n	8001156 <PID_Controller+0x45e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	d112      	bne.n	8000f4e <PID_Controller+0x256>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f2e:	4b3f      	ldr	r3, [pc, #252]	; (800102c <PID_Controller+0x334>)
 8000f30:	ed93 7b00 	vldr	d7, [r3]
 8000f34:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f38:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000f42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f46:	ee17 3a90 	vmov	r3, s15
 8000f4a:	6393      	str	r3, [r2, #56]	; 0x38
 8000f4c:	e103      	b.n	8001156 <PID_Controller+0x45e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d112      	bne.n	8000f7e <PID_Controller+0x286>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f5e:	4b33      	ldr	r3, [pc, #204]	; (800102c <PID_Controller+0x334>)
 8000f60:	ed93 7b00 	vldr	d7, [r3]
 8000f64:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f68:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000f72:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f76:	ee17 3a90 	vmov	r3, s15
 8000f7a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000f7c:	e0eb      	b.n	8001156 <PID_Controller+0x45e>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f84:	2b0c      	cmp	r3, #12
 8000f86:	d112      	bne.n	8000fae <PID_Controller+0x2b6>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <PID_Controller+0x334>)
 8000f90:	ed93 7b00 	vldr	d7, [r3]
 8000f94:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f98:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000fa2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fa6:	ee17 3a90 	vmov	r3, s15
 8000faa:	6413      	str	r3, [r2, #64]	; 0x40
 8000fac:	e0d3      	b.n	8001156 <PID_Controller+0x45e>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000fb4:	2b10      	cmp	r3, #16
 8000fb6:	d112      	bne.n	8000fde <PID_Controller+0x2e6>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <PID_Controller+0x334>)
 8000fc0:	ed93 7b00 	vldr	d7, [r3]
 8000fc4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000fc8:	eeb0 7bc7 	vabs.f64	d7, d7
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000fd2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fd6:	ee17 3a90 	vmov	r3, s15
 8000fda:	6593      	str	r3, [r2, #88]	; 0x58
 8000fdc:	e0bb      	b.n	8001156 <PID_Controller+0x45e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <PID_Controller+0x334>)
 8000fe6:	ed93 7b00 	vldr	d7, [r3]
 8000fea:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000fee:	eeb0 7bc7 	vabs.f64	d7, d7
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000ff8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ffc:	ee17 3a90 	vmov	r3, s15
 8001000:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001002:	e0a8      	b.n	8001156 <PID_Controller+0x45e>
 8001004:	f3af 8000 	nop.w
 8001008:	55555555 	.word	0x55555555
 800100c:	40d55555 	.word	0x40d55555
 8001010:	00000000 	.word	0x00000000
 8001014:	40f00000 	.word	0x40f00000
 8001018:	240000f0 	.word	0x240000f0
 800101c:	240000e8 	.word	0x240000e8
 8001020:	240000d8 	.word	0x240000d8
 8001024:	3ff00000 	.word	0x3ff00000
 8001028:	bff00000 	.word	0xbff00000
 800102c:	240000e0 	.word	0x240000e0
	}
	else
	{
		HAL_GPIO_WritePin(Wheel_->DIR_pin_type, Wheel_->DIR_pin_Num, GPIO_PIN_SET);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800103a:	2201      	movs	r2, #1
 800103c:	4619      	mov	r1, r3
 800103e:	f007 fd65 	bl	8008b0c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001048:	2b00      	cmp	r3, #0
 800104a:	d112      	bne.n	8001072 <PID_Controller+0x37a>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8001052:	4b46      	ldr	r3, [pc, #280]	; (800116c <PID_Controller+0x474>)
 8001054:	ed93 7b00 	vldr	d7, [r3]
 8001058:	ee26 7b07 	vmul.f64	d7, d6, d7
 800105c:	eeb0 7bc7 	vabs.f64	d7, d7
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001066:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800106a:	ee17 2a90 	vmov	r2, s15
 800106e:	635a      	str	r2, [r3, #52]	; 0x34
 8001070:	e071      	b.n	8001156 <PID_Controller+0x45e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001078:	2b04      	cmp	r3, #4
 800107a:	d112      	bne.n	80010a2 <PID_Controller+0x3aa>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8001082:	4b3a      	ldr	r3, [pc, #232]	; (800116c <PID_Controller+0x474>)
 8001084:	ed93 7b00 	vldr	d7, [r3]
 8001088:	ee26 7b07 	vmul.f64	d7, d6, d7
 800108c:	eeb0 7bc7 	vabs.f64	d7, d7
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001096:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800109a:	ee17 3a90 	vmov	r3, s15
 800109e:	6393      	str	r3, [r2, #56]	; 0x38
 80010a0:	e059      	b.n	8001156 <PID_Controller+0x45e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d112      	bne.n	80010d2 <PID_Controller+0x3da>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80010b2:	4b2e      	ldr	r3, [pc, #184]	; (800116c <PID_Controller+0x474>)
 80010b4:	ed93 7b00 	vldr	d7, [r3]
 80010b8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010bc:	eeb0 7bc7 	vabs.f64	d7, d7
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80010c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010ca:	ee17 3a90 	vmov	r3, s15
 80010ce:	63d3      	str	r3, [r2, #60]	; 0x3c
 80010d0:	e041      	b.n	8001156 <PID_Controller+0x45e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010d8:	2b0c      	cmp	r3, #12
 80010da:	d112      	bne.n	8001102 <PID_Controller+0x40a>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80010e2:	4b22      	ldr	r3, [pc, #136]	; (800116c <PID_Controller+0x474>)
 80010e4:	ed93 7b00 	vldr	d7, [r3]
 80010e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010ec:	eeb0 7bc7 	vabs.f64	d7, d7
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80010f6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010fa:	ee17 3a90 	vmov	r3, s15
 80010fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001100:	e029      	b.n	8001156 <PID_Controller+0x45e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001108:	2b10      	cmp	r3, #16
 800110a:	d112      	bne.n	8001132 <PID_Controller+0x43a>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8001112:	4b16      	ldr	r3, [pc, #88]	; (800116c <PID_Controller+0x474>)
 8001114:	ed93 7b00 	vldr	d7, [r3]
 8001118:	ee26 7b07 	vmul.f64	d7, d6, d7
 800111c:	eeb0 7bc7 	vabs.f64	d7, d7
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001126:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800112a:	ee17 3a90 	vmov	r3, s15
 800112e:	6593      	str	r3, [r2, #88]	; 0x58
 8001130:	e011      	b.n	8001156 <PID_Controller+0x45e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <PID_Controller+0x474>)
 800113a:	ed93 7b00 	vldr	d7, [r3]
 800113e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001142:	eeb0 7bc7 	vabs.f64	d7, d7
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800114c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001150:	ee17 3a90 	vmov	r3, s15
 8001154:	65d3      	str	r3, [r2, #92]	; 0x5c
	}
#endif

	Wheel_->rps_before = Wheel_->rps;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	240000e0 	.word	0x240000e0

08001170 <Forward_Kinematics>:
 *       /     \        y(+) ←---
 *      B-------C
 * @ retval None
 * */
void Forward_Kinematics(double x, double y, double w)
{
 8001170:	b480      	push	{r7}
 8001172:	b08f      	sub	sp, #60	; 0x3c
 8001174:	af00      	add	r7, sp, #0
 8001176:	ed87 0b04 	vstr	d0, [r7, #16]
 800117a:	ed87 1b02 	vstr	d1, [r7, #8]
 800117e:	ed87 2b00 	vstr	d2, [r7]
	double omega_a = (y + w * chassis_radius * radius_error_chassis)/(wheel_radius * radius_error_a);
 8001182:	ed97 7b00 	vldr	d7, [r7]
 8001186:	ed9f 6b48 	vldr	d6, [pc, #288]	; 80012a8 <Forward_Kinematics+0x138>
 800118a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800118e:	4b4c      	ldr	r3, [pc, #304]	; (80012c0 <Forward_Kinematics+0x150>)
 8001190:	ed93 7b00 	vldr	d7, [r3]
 8001194:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001198:	ed97 7b02 	vldr	d7, [r7, #8]
 800119c:	ee36 5b07 	vadd.f64	d5, d6, d7
 80011a0:	4b48      	ldr	r3, [pc, #288]	; (80012c4 <Forward_Kinematics+0x154>)
 80011a2:	ed93 7b00 	vldr	d7, [r3]
 80011a6:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80012b0 <Forward_Kinematics+0x140>
 80011aa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011ae:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011b2:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	double omega_b = (-x + w * chassis_radius * radius_error_chassis)/(wheel_radius * radius_error_b);
 80011b6:	ed97 7b00 	vldr	d7, [r7]
 80011ba:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80012a8 <Forward_Kinematics+0x138>
 80011be:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011c2:	4b3f      	ldr	r3, [pc, #252]	; (80012c0 <Forward_Kinematics+0x150>)
 80011c4:	ed93 7b00 	vldr	d7, [r3]
 80011c8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011cc:	ed97 7b04 	vldr	d7, [r7, #16]
 80011d0:	ee36 5b47 	vsub.f64	d5, d6, d7
 80011d4:	4b3c      	ldr	r3, [pc, #240]	; (80012c8 <Forward_Kinematics+0x158>)
 80011d6:	ed93 7b00 	vldr	d7, [r3]
 80011da:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80012b0 <Forward_Kinematics+0x140>
 80011de:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011e2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011e6:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	double omega_c = (-y + w * chassis_radius * radius_error_chassis)/(wheel_radius * radius_error_c);
 80011ea:	ed97 7b00 	vldr	d7, [r7]
 80011ee:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 80012a8 <Forward_Kinematics+0x138>
 80011f2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011f6:	4b32      	ldr	r3, [pc, #200]	; (80012c0 <Forward_Kinematics+0x150>)
 80011f8:	ed93 7b00 	vldr	d7, [r3]
 80011fc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001200:	ed97 7b02 	vldr	d7, [r7, #8]
 8001204:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001208:	4b30      	ldr	r3, [pc, #192]	; (80012cc <Forward_Kinematics+0x15c>)
 800120a:	ed93 7b00 	vldr	d7, [r3]
 800120e:	ed9f 6b28 	vldr	d6, [pc, #160]	; 80012b0 <Forward_Kinematics+0x140>
 8001212:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001216:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800121a:	ed87 7b08 	vstr	d7, [r7, #32]
	double omega_d = (x + w * chassis_radius * radius_error_chassis)/(wheel_radius * radius_error_d);
 800121e:	ed97 7b00 	vldr	d7, [r7]
 8001222:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80012a8 <Forward_Kinematics+0x138>
 8001226:	ee27 6b06 	vmul.f64	d6, d7, d6
 800122a:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <Forward_Kinematics+0x150>)
 800122c:	ed93 7b00 	vldr	d7, [r3]
 8001230:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001234:	ed97 7b04 	vldr	d7, [r7, #16]
 8001238:	ee36 5b07 	vadd.f64	d5, d6, d7
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <Forward_Kinematics+0x160>)
 800123e:	ed93 7b00 	vldr	d7, [r3]
 8001242:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 80012b0 <Forward_Kinematics+0x140>
 8001246:	ee27 6b06 	vmul.f64	d6, d7, d6
 800124a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800124e:	ed87 7b06 	vstr	d7, [r7, #24]

	WheelA.goal = omega_a / (2 * M_PI);
 8001252:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8001256:	ed9f 5b18 	vldr	d5, [pc, #96]	; 80012b8 <Forward_Kinematics+0x148>
 800125a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <Forward_Kinematics+0x164>)
 8001260:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	WheelB.goal = omega_b / (2 * M_PI);
 8001264:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001268:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80012b8 <Forward_Kinematics+0x148>
 800126c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <Forward_Kinematics+0x168>)
 8001272:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	WheelC.goal = omega_c / (2 * M_PI);
 8001276:	ed97 6b08 	vldr	d6, [r7, #32]
 800127a:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 80012b8 <Forward_Kinematics+0x148>
 800127e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <Forward_Kinematics+0x16c>)
 8001284:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	WheelD.goal = omega_d / (2 * M_PI);
 8001288:	ed97 6b06 	vldr	d6, [r7, #24]
 800128c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80012b8 <Forward_Kinematics+0x148>
 8001290:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <Forward_Kinematics+0x170>)
 8001296:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
}
 800129a:	bf00      	nop
 800129c:	373c      	adds	r7, #60	; 0x3c
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	33333333 	.word	0x33333333
 80012ac:	3fd33333 	.word	0x3fd33333
 80012b0:	6c8b4396 	.word	0x6c8b4396
 80012b4:	3fa9fbe7 	.word	0x3fa9fbe7
 80012b8:	54442d18 	.word	0x54442d18
 80012bc:	401921fb 	.word	0x401921fb
 80012c0:	240000b8 	.word	0x240000b8
 80012c4:	24000098 	.word	0x24000098
 80012c8:	240000a0 	.word	0x240000a0
 80012cc:	240000a8 	.word	0x240000a8
 80012d0:	240000b0 	.word	0x240000b0
 80012d4:	240000f0 	.word	0x240000f0
 80012d8:	24000200 	.word	0x24000200
 80012dc:	24000310 	.word	0x24000310
 80012e0:	24000420 	.word	0x24000420
 80012e4:	00000000 	.word	0x00000000

080012e8 <Inverse_Kinematics>:


void Inverse_Kinematics(PID_Control *WheelA_, PID_Control *WheelB_, PID_Control *WheelC_, PID_Control *WheelD_)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b092      	sub	sp, #72	; 0x48
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	603b      	str	r3, [r7, #0]
	double omega_a = WheelA_->rps * (2 * M_PI) * (wheel_radius * radius_error_a);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	ed93 7b08 	vldr	d7, [r3, #32]
 80012fc:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001418 <Inverse_Kinematics+0x130>
 8001300:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001304:	4b4a      	ldr	r3, [pc, #296]	; (8001430 <Inverse_Kinematics+0x148>)
 8001306:	ed93 7b00 	vldr	d7, [r3]
 800130a:	ed9f 5b45 	vldr	d5, [pc, #276]	; 8001420 <Inverse_Kinematics+0x138>
 800130e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001312:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001316:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	double omega_b = WheelB_->rps * (2 * M_PI) * (wheel_radius * radius_error_b);
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	ed93 7b08 	vldr	d7, [r3, #32]
 8001320:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8001418 <Inverse_Kinematics+0x130>
 8001324:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001328:	4b42      	ldr	r3, [pc, #264]	; (8001434 <Inverse_Kinematics+0x14c>)
 800132a:	ed93 7b00 	vldr	d7, [r3]
 800132e:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8001420 <Inverse_Kinematics+0x138>
 8001332:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001336:	ee26 7b07 	vmul.f64	d7, d6, d7
 800133a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	double omega_c = WheelC_->rps * (2 * M_PI) * (wheel_radius * radius_error_c);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	ed93 7b08 	vldr	d7, [r3, #32]
 8001344:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8001418 <Inverse_Kinematics+0x130>
 8001348:	ee27 6b06 	vmul.f64	d6, d7, d6
 800134c:	4b3a      	ldr	r3, [pc, #232]	; (8001438 <Inverse_Kinematics+0x150>)
 800134e:	ed93 7b00 	vldr	d7, [r3]
 8001352:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8001420 <Inverse_Kinematics+0x138>
 8001356:	ee27 7b05 	vmul.f64	d7, d7, d5
 800135a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800135e:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	double omega_d = WheelD_->rps * (2 * M_PI) * (wheel_radius * radius_error_d);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	ed93 7b08 	vldr	d7, [r3, #32]
 8001368:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001418 <Inverse_Kinematics+0x130>
 800136c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001370:	4b32      	ldr	r3, [pc, #200]	; (800143c <Inverse_Kinematics+0x154>)
 8001372:	ed93 7b00 	vldr	d7, [r3]
 8001376:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8001420 <Inverse_Kinematics+0x138>
 800137a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800137e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001382:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28

	double Vx = (omega_d - omega_b) / 2;
 8001386:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 800138a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800138e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001392:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001396:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800139a:	ed87 7b08 	vstr	d7, [r7, #32]
	double Vy = (omega_a - omega_c) / 2;
 800139e:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 80013a2:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80013a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80013aa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80013ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013b2:	ed87 7b06 	vstr	d7, [r7, #24]
	double Vw = (omega_a + omega_b + omega_c + omega_d) / (4 * chassis_radius * radius_error_chassis);
 80013b6:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 80013ba:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80013be:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013c2:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80013c6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013ca:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80013ce:	ee36 5b07 	vadd.f64	d5, d6, d7
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <Inverse_Kinematics+0x158>)
 80013d4:	ed93 7b00 	vldr	d7, [r3]
 80013d8:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8001428 <Inverse_Kinematics+0x140>
 80013dc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013e0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013e4:	ed87 7b04 	vstr	d7, [r7, #16]

	odom_vel[0] = Vx;
 80013e8:	4916      	ldr	r1, [pc, #88]	; (8001444 <Inverse_Kinematics+0x15c>)
 80013ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013ee:	e9c1 2300 	strd	r2, r3, [r1]
	odom_vel[1] = Vy;
 80013f2:	4914      	ldr	r1, [pc, #80]	; (8001444 <Inverse_Kinematics+0x15c>)
 80013f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	odom_vel[2] = Vw;
 80013fc:	4911      	ldr	r1, [pc, #68]	; (8001444 <Inverse_Kinematics+0x15c>)
 80013fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001402:	e9c1 2304 	strd	r2, r3, [r1, #16]
	odom_store();
 8001406:	f002 f87f 	bl	8003508 <odom_store>
}
 800140a:	bf00      	nop
 800140c:	3748      	adds	r7, #72	; 0x48
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	f3af 8000 	nop.w
 8001418:	54442d18 	.word	0x54442d18
 800141c:	401921fb 	.word	0x401921fb
 8001420:	6c8b4396 	.word	0x6c8b4396
 8001424:	3fa9fbe7 	.word	0x3fa9fbe7
 8001428:	33333333 	.word	0x33333333
 800142c:	3ff33333 	.word	0x3ff33333
 8001430:	24000098 	.word	0x24000098
 8001434:	240000a0 	.word	0x240000a0
 8001438:	240000a8 	.word	0x240000a8
 800143c:	240000b0 	.word	0x240000b0
 8001440:	240000b8 	.word	0x240000b8
 8001444:	24001740 	.word	0x24001740

08001448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_DMA_Init+0x4c>)
 8001450:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001454:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <MX_DMA_Init+0x4c>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <MX_DMA_Init+0x4c>)
 8001460:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	200b      	movs	r0, #11
 8001472:	f004 f86e 	bl	8005552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001476:	200b      	movs	r0, #11
 8001478:	f004 f885 	bl	8005586 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	2100      	movs	r1, #0
 8001480:	200c      	movs	r0, #12
 8001482:	f004 f866 	bl	8005552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001486:	200c      	movs	r0, #12
 8001488:	f004 f87d 	bl	8005586 <HAL_NVIC_EnableIRQ>

}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	58024400 	.word	0x58024400

08001498 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08c      	sub	sp, #48	; 0x30
 800149c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ae:	4b58      	ldr	r3, [pc, #352]	; (8001610 <MX_GPIO_Init+0x178>)
 80014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b4:	4a56      	ldr	r2, [pc, #344]	; (8001610 <MX_GPIO_Init+0x178>)
 80014b6:	f043 0310 	orr.w	r3, r3, #16
 80014ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014be:	4b54      	ldr	r3, [pc, #336]	; (8001610 <MX_GPIO_Init+0x178>)
 80014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014cc:	4b50      	ldr	r3, [pc, #320]	; (8001610 <MX_GPIO_Init+0x178>)
 80014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d2:	4a4f      	ldr	r2, [pc, #316]	; (8001610 <MX_GPIO_Init+0x178>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014dc:	4b4c      	ldr	r3, [pc, #304]	; (8001610 <MX_GPIO_Init+0x178>)
 80014de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ea:	4b49      	ldr	r3, [pc, #292]	; (8001610 <MX_GPIO_Init+0x178>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f0:	4a47      	ldr	r2, [pc, #284]	; (8001610 <MX_GPIO_Init+0x178>)
 80014f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014fa:	4b45      	ldr	r3, [pc, #276]	; (8001610 <MX_GPIO_Init+0x178>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	4b41      	ldr	r3, [pc, #260]	; (8001610 <MX_GPIO_Init+0x178>)
 800150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150e:	4a40      	ldr	r2, [pc, #256]	; (8001610 <MX_GPIO_Init+0x178>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001518:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <MX_GPIO_Init+0x178>)
 800151a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	4b3a      	ldr	r3, [pc, #232]	; (8001610 <MX_GPIO_Init+0x178>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152c:	4a38      	ldr	r2, [pc, #224]	; (8001610 <MX_GPIO_Init+0x178>)
 800152e:	f043 0302 	orr.w	r3, r3, #2
 8001532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001536:	4b36      	ldr	r3, [pc, #216]	; (8001610 <MX_GPIO_Init+0x178>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001544:	4b32      	ldr	r3, [pc, #200]	; (8001610 <MX_GPIO_Init+0x178>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154a:	4a31      	ldr	r2, [pc, #196]	; (8001610 <MX_GPIO_Init+0x178>)
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001554:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <MX_GPIO_Init+0x178>)
 8001556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	2108      	movs	r1, #8
 8001566:	482b      	ldr	r0, [pc, #172]	; (8001614 <MX_GPIO_Init+0x17c>)
 8001568:	f007 fad0 	bl	8008b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001572:	4829      	ldr	r0, [pc, #164]	; (8001618 <MX_GPIO_Init+0x180>)
 8001574:	f007 faca 	bl	8008b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800157e:	4827      	ldr	r0, [pc, #156]	; (800161c <MX_GPIO_Init+0x184>)
 8001580:	f007 fac4 	bl	8008b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158a:	4825      	ldr	r0, [pc, #148]	; (8001620 <MX_GPIO_Init+0x188>)
 800158c:	f007 fabe 	bl	8008b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001590:	2308      	movs	r3, #8
 8001592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4619      	mov	r1, r3
 80015a6:	481b      	ldr	r0, [pc, #108]	; (8001614 <MX_GPIO_Init+0x17c>)
 80015a8:	f007 f806 	bl	80085b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4619      	mov	r1, r3
 80015c4:	4814      	ldr	r0, [pc, #80]	; (8001618 <MX_GPIO_Init+0x180>)
 80015c6:	f006 fff7 	bl	80085b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	4619      	mov	r1, r3
 80015e2:	480e      	ldr	r0, [pc, #56]	; (800161c <MX_GPIO_Init+0x184>)
 80015e4:	f006 ffe8 	bl	80085b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	4807      	ldr	r0, [pc, #28]	; (8001620 <MX_GPIO_Init+0x188>)
 8001602:	f006 ffd9 	bl	80085b8 <HAL_GPIO_Init>

}
 8001606:	bf00      	nop
 8001608:	3730      	adds	r7, #48	; 0x30
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	58024400 	.word	0x58024400
 8001614:	58021000 	.word	0x58021000
 8001618:	58020800 	.word	0x58020800
 800161c:	58020400 	.word	0x58020400
 8001620:	58020c00 	.word	0x58020c00

08001624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001628:	f003 fe02 	bl	8005230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162c:	f000 f824 	bl	8001678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001630:	f7ff ff32 	bl	8001498 <MX_GPIO_Init>
  MX_DMA_Init();
 8001634:	f7ff ff08 	bl	8001448 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001638:	f003 fc7e 	bl	8004f38 <MX_USART1_UART_Init>
  MX_TIM12_Init();
 800163c:	f003 f942 	bl	80048c4 <MX_TIM12_Init>
  MX_TIM15_Init();
 8001640:	f003 f9a6 	bl	8004990 <MX_TIM15_Init>
  MX_TIM2_Init();
 8001644:	f002 ffe8 	bl	8004618 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001648:	f003 f83a 	bl	80046c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800164c:	f003 f88e 	bl	800476c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001650:	f003 f8e2 	bl	8004818 <MX_TIM5_Init>
  MX_TIM23_Init();
 8001654:	f003 fa2e 	bl	8004ab4 <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */

//	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
  HAL_TIM_Base_Start_IT(&Encoder_Interrupt_timer);
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <main+0x4c>)
 800165a:	f00a f82b 	bl	800b6b4 <HAL_TIM_Base_Start_IT>
  Control_Init();
 800165e:	f7ff f80f 	bl	8000680 <Control_Init>
  Rosserial_Init();
 8001662:	f001 ff23 	bl	80034ac <Rosserial_Init>
  odom_count = 0;
 8001666:	4b03      	ldr	r3, [pc, #12]	; (8001674 <main+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800166c:	e7fe      	b.n	800166c <main+0x48>
 800166e:	bf00      	nop
 8001670:	24001924 	.word	0x24001924
 8001674:	24000534 	.word	0x24000534

08001678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b09c      	sub	sp, #112	; 0x70
 800167c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001682:	224c      	movs	r2, #76	; 0x4c
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f00d fde0 	bl	800f24c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	2220      	movs	r2, #32
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f00d fdda 	bl	800f24c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001698:	2002      	movs	r0, #2
 800169a:	f007 fa51 	bl	8008b40 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <SystemClock_Config+0xd8>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	4a2a      	ldr	r2, [pc, #168]	; (8001750 <SystemClock_Config+0xd8>)
 80016a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ac:	6193      	str	r3, [r2, #24]
 80016ae:	4b28      	ldr	r3, [pc, #160]	; (8001750 <SystemClock_Config+0xd8>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016ba:	bf00      	nop
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <SystemClock_Config+0xd8>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016c8:	d1f8      	bne.n	80016bc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016ca:	2301      	movs	r3, #1
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d4:	2302      	movs	r3, #2
 80016d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d8:	2302      	movs	r3, #2
 80016da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016dc:	2304      	movs	r3, #4
 80016de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016e0:	23a8      	movs	r3, #168	; 0xa8
 80016e2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80016e4:	2301      	movs	r3, #1
 80016e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016e8:	2304      	movs	r3, #4
 80016ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016ec:	2302      	movs	r3, #2
 80016ee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80016f0:	2304      	movs	r3, #4
 80016f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001700:	4618      	mov	r0, r3
 8001702:	f007 fa57 	bl	8008bb4 <HAL_RCC_OscConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800170c:	f000 f8a6 	bl	800185c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001710:	233f      	movs	r3, #63	; 0x3f
 8001712:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001714:	2303      	movs	r3, #3
 8001716:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800171c:	2308      	movs	r3, #8
 800171e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001720:	2340      	movs	r3, #64	; 0x40
 8001722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001724:	2340      	movs	r3, #64	; 0x40
 8001726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800172e:	2340      	movs	r3, #64	; 0x40
 8001730:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2102      	movs	r1, #2
 8001736:	4618      	mov	r0, r3
 8001738:	f007 fe16 	bl	8009368 <HAL_RCC_ClockConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001742:	f000 f88b 	bl	800185c <Error_Handler>
  }
}
 8001746:	bf00      	nop
 8001748:	3770      	adds	r7, #112	; 0x70
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	58024800 	.word	0x58024800

08001754 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == Encoder_Interrupt_timer.Instance)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d132      	bne.n	80017ce <HAL_TIM_PeriodElapsedCallback+0x7a>
	{
		odom_count++;
 8001768:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x88>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001770:	6013      	str	r3, [r2, #0]
		if(odom_count == 10)
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b0a      	cmp	r3, #10
 8001778:	d104      	bne.n	8001784 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			odom_count = 0;
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x88>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
			odom_publish();
 8001780:	f001 fee0 	bl	8003544 <odom_publish>
//		WheelA.goal = 0.0;
//		WheelB.goal = 0.0;
//		WheelC.goal = 0.0;
//		WheelD.goal = 0.0;

		Rosserial_Spin();
 8001784:	f001 fea8 	bl	80034d8 <Rosserial_Spin>
//		{
//			linearvelocity_x = 0.0;
//			linearvelocity_y = 0.0;
//			angularvelocity = 0.0;
//		}
		Forward_Kinematics(linearvelocity_x, linearvelocity_y, angularvelocity);
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800178a:	ed93 7b00 	vldr	d7, [r3]
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001790:	ed93 6b00 	vldr	d6, [r3]
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001796:	ed93 5b00 	vldr	d5, [r3]
 800179a:	eeb0 2b45 	vmov.f64	d2, d5
 800179e:	eeb0 1b46 	vmov.f64	d1, d6
 80017a2:	eeb0 0b47 	vmov.f64	d0, d7
 80017a6:	f7ff fce3 	bl	8001170 <Forward_Kinematics>
		PID_Controller(&WheelA);
 80017aa:	4810      	ldr	r0, [pc, #64]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x98>)
 80017ac:	f7ff faa4 	bl	8000cf8 <PID_Controller>
		PID_Controller(&WheelB);
 80017b0:	480f      	ldr	r0, [pc, #60]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80017b2:	f7ff faa1 	bl	8000cf8 <PID_Controller>
		PID_Controller(&WheelC);
 80017b6:	480f      	ldr	r0, [pc, #60]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80017b8:	f7ff fa9e 	bl	8000cf8 <PID_Controller>
		PID_Controller(&WheelD);
 80017bc:	480e      	ldr	r0, [pc, #56]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80017be:	f7ff fa9b 	bl	8000cf8 <PID_Controller>
		Inverse_Kinematics(&WheelA, &WheelB, &WheelC, &WheelD);
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80017c4:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80017c6:	490a      	ldr	r1, [pc, #40]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80017c8:	4808      	ldr	r0, [pc, #32]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x98>)
 80017ca:	f7ff fd8d 	bl	80012e8 <Inverse_Kinematics>
	}
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	24001924 	.word	0x24001924
 80017dc:	24000534 	.word	0x24000534
 80017e0:	240000c0 	.word	0x240000c0
 80017e4:	240000c8 	.word	0x240000c8
 80017e8:	240000d0 	.word	0x240000d0
 80017ec:	240000f0 	.word	0x240000f0
 80017f0:	24000200 	.word	0x24000200
 80017f4:	24000310 	.word	0x24000310
 80017f8:	24000420 	.word	0x24000420

080017fc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a11      	ldr	r2, [pc, #68]	; (800184c <HAL_UART_ErrorCallback+0x50>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d11b      	bne.n	8001844 <HAL_UART_ErrorCallback+0x48>
	{
		linearvelocity_x = 0;
 800180c:	4910      	ldr	r1, [pc, #64]	; (8001850 <HAL_UART_ErrorCallback+0x54>)
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	e9c1 2300 	strd	r2, r3, [r1]
		linearvelocity_y = 0;
 800181a:	490e      	ldr	r1, [pc, #56]	; (8001854 <HAL_UART_ErrorCallback+0x58>)
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	e9c1 2300 	strd	r2, r3, [r1]
		angularvelocity = 0;
 8001828:	490b      	ldr	r1, [pc, #44]	; (8001858 <HAL_UART_ErrorCallback+0x5c>)
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_UART_DeInit(&huart1);
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <HAL_UART_ErrorCallback+0x50>)
 8001838:	f00b fba8 	bl	800cf8c <HAL_UART_DeInit>
		MX_USART1_UART_Init();
 800183c:	f003 fb7c 	bl	8004f38 <MX_USART1_UART_Init>
		Rosserial_GetHardware();
 8001840:	f001 fe54 	bl	80034ec <Rosserial_GetHardware>
	}
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	24001970 	.word	0x24001970
 8001850:	240000c0 	.word	0x240000c0
 8001854:	240000c8 	.word	0x240000c8
 8001858:	240000d0 	.word	0x240000d0

0800185c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
}
 8001862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001864:	e7fe      	b.n	8001864 <Error_Handler+0x8>

08001866 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <_ZN3ros3MsgC1Ev+0x1c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	0800f820 	.word	0x0800f820

080018a8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
      data()
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff ffe8 	bl	8001888 <_ZN3ros3MsgC1Ev>
 80018b8:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3304      	adds	r3, #4
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ffcf 	bl	8001866 <_ZN3ros4TimeC1Ev>
    {
    }
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	0800f808 	.word	0x0800f808

080018d8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6859      	ldr	r1, [r3, #4]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	b2ca      	uxtb	r2, r1
 80018f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	0a19      	lsrs	r1, r3, #8
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3301      	adds	r3, #1
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	4413      	add	r3, r2
 8001902:	b2ca      	uxtb	r2, r1
 8001904:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	0c19      	lsrs	r1, r3, #16
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3302      	adds	r3, #2
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	4413      	add	r3, r2
 8001914:	b2ca      	uxtb	r2, r1
 8001916:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	0e19      	lsrs	r1, r3, #24
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3303      	adds	r3, #3
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	4413      	add	r3, r2
 8001926:	b2ca      	uxtb	r2, r1
 8001928:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3304      	adds	r3, #4
 800192e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6899      	ldr	r1, [r3, #8]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	4413      	add	r3, r2
 800193a:	b2ca      	uxtb	r2, r1
 800193c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	0a19      	lsrs	r1, r3, #8
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	3301      	adds	r3, #1
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	4413      	add	r3, r2
 800194c:	b2ca      	uxtb	r2, r1
 800194e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	0c19      	lsrs	r1, r3, #16
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3302      	adds	r3, #2
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	4413      	add	r3, r2
 800195e:	b2ca      	uxtb	r2, r1
 8001960:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	0e19      	lsrs	r1, r3, #24
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3303      	adds	r3, #3
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	4413      	add	r3, r2
 8001970:	b2ca      	uxtb	r2, r1
 8001972:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	3304      	adds	r3, #4
 8001978:	60fb      	str	r3, [r7, #12]
      return offset;
 800197a:	68fb      	ldr	r3, [r7, #12]
    }
 800197c:	4618      	mov	r0, r3
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	4413      	add	r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3301      	adds	r3, #1
 80019ac:	6839      	ldr	r1, [r7, #0]
 80019ae:	440b      	add	r3, r1
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3302      	adds	r3, #2
 80019c2:	6839      	ldr	r1, [r7, #0]
 80019c4:	440b      	add	r3, r1
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	041b      	lsls	r3, r3, #16
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3303      	adds	r3, #3
 80019d8:	6839      	ldr	r1, [r7, #0]
 80019da:	440b      	add	r3, r1
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	061b      	lsls	r3, r3, #24
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3304      	adds	r3, #4
 80019ea:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	4413      	add	r3, r2
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3301      	adds	r3, #1
 8001a02:	6839      	ldr	r1, [r7, #0]
 8001a04:	440b      	add	r3, r1
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3302      	adds	r3, #2
 8001a18:	6839      	ldr	r1, [r7, #0]
 8001a1a:	440b      	add	r3, r1
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	041b      	lsls	r3, r3, #16
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3303      	adds	r3, #3
 8001a2e:	6839      	ldr	r1, [r7, #0]
 8001a30:	440b      	add	r3, r1
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	061b      	lsls	r3, r3, #24
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	3304      	adds	r3, #4
 8001a40:	60fb      	str	r3, [r7, #12]
     return offset;
 8001a42:	68fb      	ldr	r3, [r7, #12]
    }
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	0800f578 	.word	0x0800f578

08001a6c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	0800f588 	.word	0x0800f588

08001a88 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fef8 	bl	8001888 <_ZN3ros3MsgC1Ev>
 8001a98:	4a0b      	ldr	r2, [pc, #44]	; (8001ac8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	809a      	strh	r2, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a09      	ldr	r2, [pc, #36]	; (8001acc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a07      	ldr	r2, [pc, #28]	; (8001acc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a06      	ldr	r2, [pc, #24]	; (8001acc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001ab4:	611a      	str	r2, [r3, #16]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	615a      	str	r2, [r3, #20]
    {
    }
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	0800f7f0 	.word	0x0800f7f0
 8001acc:	0800f5ac 	.word	0x0800f5ac

08001ad0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	8899      	ldrh	r1, [r3, #4]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	b2ca      	uxtb	r2, r1
 8001aea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	889b      	ldrh	r3, [r3, #4]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	b299      	uxth	r1, r3
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	3301      	adds	r3, #1
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	b2ca      	uxtb	r2, r1
 8001afe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	3302      	adds	r3, #2
 8001b04:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fc00 	bl	8000310 <strlen>
 8001b10:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	69b9      	ldr	r1, [r7, #24]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f001 fd24 	bl	8003568 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	3304      	adds	r3, #4
 8001b24:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	18d0      	adds	r0, r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4619      	mov	r1, r3
 8001b34:	f00d fb7c 	bl	800f230 <memcpy>
      offset += length_topic_name;
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fbe3 	bl	8000310 <strlen>
 8001b4a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	4413      	add	r3, r2
 8001b52:	6979      	ldr	r1, [r7, #20]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 fd07 	bl	8003568 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	18d0      	adds	r0, r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f00d fb5f 	bl	800f230 <memcpy>
      offset += length_message_type;
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	4413      	add	r3, r2
 8001b78:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fbc6 	bl	8000310 <strlen>
 8001b84:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	6939      	ldr	r1, [r7, #16]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f001 fcea 	bl	8003568 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	3304      	adds	r3, #4
 8001b98:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	18d0      	adds	r0, r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f00d fb42 	bl	800f230 <memcpy>
      offset += length_md5sum;
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001bba:	68f9      	ldr	r1, [r7, #12]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	b2ca      	uxtb	r2, r1
 8001bc4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	0a19      	lsrs	r1, r3, #8
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b2ca      	uxtb	r2, r1
 8001bd4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	0c19      	lsrs	r1, r3, #16
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3302      	adds	r3, #2
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	4413      	add	r3, r2
 8001be2:	b2ca      	uxtb	r2, r1
 8001be4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	0e19      	lsrs	r1, r3, #24
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3303      	adds	r3, #3
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	b2ca      	uxtb	r2, r1
 8001bf4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	61fb      	str	r3, [r7, #28]
      return offset;
 8001bfc:	69fb      	ldr	r3, [r7, #28]
    }
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3720      	adds	r7, #32
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b08a      	sub	sp, #40	; 0x28
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	889b      	ldrh	r3, [r3, #4]
 8001c26:	b21a      	sxth	r2, r3
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	6839      	ldr	r1, [r7, #0]
 8001c2e:	440b      	add	r3, r1
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	4313      	orrs	r3, r2
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	3302      	adds	r3, #2
 8001c44:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	441a      	add	r2, r3
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 fca6 	bl	80035a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	4413      	add	r3, r2
 8001c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d20c      	bcs.n	8001c88 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	441a      	add	r2, r3
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	3b01      	subs	r3, #1
 8001c78:	6839      	ldr	r1, [r7, #0]
 8001c7a:	440b      	add	r3, r1
 8001c7c:	7812      	ldrb	r2, [r2, #0]
 8001c7e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	3301      	adds	r3, #1
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
 8001c86:	e7ec      	b.n	8001c62 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	441a      	add	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	4413      	add	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	441a      	add	r2, r3
 8001cb2:	f107 0310 	add.w	r3, r7, #16
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f001 fc73 	bl	80035a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	623b      	str	r3, [r7, #32]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4413      	add	r3, r2
 8001cce:	6a3a      	ldr	r2, [r7, #32]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d20c      	bcs.n	8001cee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	441a      	add	r2, r3
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	6839      	ldr	r1, [r7, #0]
 8001ce0:	440b      	add	r3, r1
 8001ce2:	7812      	ldrb	r2, [r2, #0]
 8001ce4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	623b      	str	r3, [r7, #32]
 8001cec:	e7ec      	b.n	8001cc8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	441a      	add	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4413      	add	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	441a      	add	r2, r3
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f001 fc40 	bl	80035a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	3304      	adds	r3, #4
 8001d28:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	69fa      	ldr	r2, [r7, #28]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d20c      	bcs.n	8001d54 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	441a      	add	r2, r3
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	6839      	ldr	r1, [r7, #0]
 8001d46:	440b      	add	r3, r1
 8001d48:	7812      	ldrb	r2, [r2, #0]
 8001d4a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	61fb      	str	r3, [r7, #28]
 8001d52:	e7ec      	b.n	8001d2e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4413      	add	r3, r2
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	441a      	add	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4413      	add	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	6839      	ldr	r1, [r7, #0]
 8001d82:	440a      	add	r2, r1
 8001d84:	7812      	ldrb	r2, [r2, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	6839      	ldr	r1, [r7, #0]
 8001d92:	440b      	add	r3, r1
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	3302      	adds	r3, #2
 8001da2:	6839      	ldr	r1, [r7, #0]
 8001da4:	440b      	add	r3, r1
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	041b      	lsls	r3, r3, #16
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	3303      	adds	r3, #3
 8001db4:	6839      	ldr	r1, [r7, #0]
 8001db6:	440b      	add	r3, r1
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	061b      	lsls	r3, r3, #24
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	61bb      	str	r3, [r7, #24]
     return offset;
 8001dcc:	69bb      	ldr	r3, [r7, #24]
    }
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3728      	adds	r7, #40	; 0x28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	0800f5b0 	.word	0x0800f5b0

08001df4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	0800f5cc 	.word	0x0800f5cc

08001e10 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fd34 	bl	8001888 <_ZN3ros3MsgC1Ev>
 8001e20:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	711a      	strb	r2, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001e30:	609a      	str	r2, [r3, #8]
    {
    }
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	0800f7d8 	.word	0x0800f7d8
 8001e40:	0800f5ac 	.word	0x0800f5ac

08001e44 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	7912      	ldrb	r2, [r2, #4]
 8001e5c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3301      	adds	r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fa51 	bl	8000310 <strlen>
 8001e6e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	4413      	add	r3, r2
 8001e76:	68b9      	ldr	r1, [r7, #8]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f001 fb75 	bl	8003568 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3304      	adds	r3, #4
 8001e82:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	18d0      	adds	r0, r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	4619      	mov	r1, r3
 8001e92:	f00d f9cd 	bl	800f230 <memcpy>
      offset += length_msg;
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
      return offset;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
    }
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	781a      	ldrb	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	441a      	add	r2, r3
 8001ece:	f107 030c 	add.w	r3, r7, #12
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 fb65 	bl	80035a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	3304      	adds	r3, #4
 8001ede:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4413      	add	r3, r2
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d20c      	bcs.n	8001f0a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	441a      	add	r2, r3
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	6839      	ldr	r1, [r7, #0]
 8001efc:	440b      	add	r3, r1
 8001efe:	7812      	ldrb	r2, [r2, #0]
 8001f00:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3301      	adds	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	e7ec      	b.n	8001ee4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	3b01      	subs	r3, #1
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	4413      	add	r3, r2
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	441a      	add	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
     return offset;
 8001f2e:	693b      	ldr	r3, [r7, #16]
    }
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	0800f5f0 	.word	0x0800f5f0

08001f54 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	0800f604 	.word	0x0800f604

08001f70 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fc84 	bl	8001888 <_ZN3ros3MsgC1Ev>
 8001f80:	4a0c      	ldr	r2, [pc, #48]	; (8001fb4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	619a      	str	r2, [r3, #24]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	61da      	str	r2, [r3, #28]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	0800f7c0 	.word	0x0800f7c0

08001fb8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6859      	ldr	r1, [r3, #4]
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	b2ca      	uxtb	r2, r1
 8001fd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	0a19      	lsrs	r1, r3, #8
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	3301      	adds	r3, #1
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b2ca      	uxtb	r2, r1
 8001fe4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	0c19      	lsrs	r1, r3, #16
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	3302      	adds	r3, #2
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	b2ca      	uxtb	r2, r1
 8001ff6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	0e19      	lsrs	r1, r3, #24
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	3303      	adds	r3, #3
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	4413      	add	r3, r2
 8002006:	b2ca      	uxtb	r2, r1
 8002008:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	3304      	adds	r3, #4
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002010:	2300      	movs	r3, #0
 8002012:	623b      	str	r3, [r7, #32]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	6a3a      	ldr	r2, [r7, #32]
 800201a:	429a      	cmp	r2, r3
 800201c:	d22b      	bcs.n	8002076 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800202c:	6939      	ldr	r1, [r7, #16]
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	4413      	add	r3, r2
 8002034:	b2ca      	uxtb	r2, r1
 8002036:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	0a19      	lsrs	r1, r3, #8
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	3301      	adds	r3, #1
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	4413      	add	r3, r2
 8002044:	b2ca      	uxtb	r2, r1
 8002046:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	0c19      	lsrs	r1, r3, #16
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	3302      	adds	r3, #2
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	4413      	add	r3, r2
 8002054:	b2ca      	uxtb	r2, r1
 8002056:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	0e19      	lsrs	r1, r3, #24
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	3303      	adds	r3, #3
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	4413      	add	r3, r2
 8002064:	b2ca      	uxtb	r2, r1
 8002066:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	3304      	adds	r3, #4
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	3301      	adds	r3, #1
 8002072:	623b      	str	r3, [r7, #32]
 8002074:	e7ce      	b.n	8002014 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6919      	ldr	r1, [r3, #16]
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	4413      	add	r3, r2
 8002080:	b2ca      	uxtb	r2, r1
 8002082:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	0a19      	lsrs	r1, r3, #8
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	3301      	adds	r3, #1
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	4413      	add	r3, r2
 8002092:	b2ca      	uxtb	r2, r1
 8002094:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	0c19      	lsrs	r1, r3, #16
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	3302      	adds	r3, #2
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	b2ca      	uxtb	r2, r1
 80020a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	0e19      	lsrs	r1, r3, #24
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	3303      	adds	r3, #3
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	4413      	add	r3, r2
 80020b6:	b2ca      	uxtb	r2, r1
 80020b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	3304      	adds	r3, #4
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80020c0:	2300      	movs	r3, #0
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	69fa      	ldr	r2, [r7, #28]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d22b      	bcs.n	8002126 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80020dc:	68f9      	ldr	r1, [r7, #12]
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	b2ca      	uxtb	r2, r1
 80020e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	0a19      	lsrs	r1, r3, #8
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	3301      	adds	r3, #1
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	b2ca      	uxtb	r2, r1
 80020f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	0c19      	lsrs	r1, r3, #16
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	3302      	adds	r3, #2
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	4413      	add	r3, r2
 8002104:	b2ca      	uxtb	r2, r1
 8002106:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	0e19      	lsrs	r1, r3, #24
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	3303      	adds	r3, #3
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	4413      	add	r3, r2
 8002114:	b2ca      	uxtb	r2, r1
 8002116:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	3304      	adds	r3, #4
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3301      	adds	r3, #1
 8002122:	61fb      	str	r3, [r7, #28]
 8002124:	e7ce      	b.n	80020c4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69d9      	ldr	r1, [r3, #28]
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	4413      	add	r3, r2
 8002130:	b2ca      	uxtb	r2, r1
 8002132:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	0a19      	lsrs	r1, r3, #8
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	3301      	adds	r3, #1
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	4413      	add	r3, r2
 8002142:	b2ca      	uxtb	r2, r1
 8002144:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	0c19      	lsrs	r1, r3, #16
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	3302      	adds	r3, #2
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	4413      	add	r3, r2
 8002154:	b2ca      	uxtb	r2, r1
 8002156:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	0e19      	lsrs	r1, r3, #24
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	3303      	adds	r3, #3
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	4413      	add	r3, r2
 8002166:	b2ca      	uxtb	r2, r1
 8002168:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	3304      	adds	r3, #4
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002170:	2300      	movs	r3, #0
 8002172:	61bb      	str	r3, [r7, #24]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	429a      	cmp	r2, r3
 800217c:	d228      	bcs.n	80021d0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f8c0 	bl	8000310 <strlen>
 8002190:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	4413      	add	r3, r2
 8002198:	6979      	ldr	r1, [r7, #20]
 800219a:	4618      	mov	r0, r3
 800219c:	f001 f9e4 	bl	8003568 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	3304      	adds	r3, #4
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	18d0      	adds	r0, r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	4619      	mov	r1, r3
 80021bc:	f00d f838 	bl	800f230 <memcpy>
      offset += length_stringsi;
 80021c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	4413      	add	r3, r2
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	3301      	adds	r3, #1
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	e7d1      	b.n	8002174 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80021d2:	4618      	mov	r0, r3
 80021d4:	3728      	adds	r7, #40	; 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80021da:	b580      	push	{r7, lr}
 80021dc:	b08e      	sub	sp, #56	; 0x38
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80021e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	4413      	add	r3, r2
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80021f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f4:	3301      	adds	r3, #1
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	4413      	add	r3, r2
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	6a3a      	ldr	r2, [r7, #32]
 8002200:	4313      	orrs	r3, r2
 8002202:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002206:	3302      	adds	r3, #2
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	4413      	add	r3, r2
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	041b      	lsls	r3, r3, #16
 8002210:	6a3a      	ldr	r2, [r7, #32]
 8002212:	4313      	orrs	r3, r2
 8002214:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002218:	3303      	adds	r3, #3
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	4413      	add	r3, r2
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	061b      	lsls	r3, r3, #24
 8002222:	6a3a      	ldr	r2, [r7, #32]
 8002224:	4313      	orrs	r3, r2
 8002226:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222a:	3304      	adds	r3, #4
 800222c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	6a3a      	ldr	r2, [r7, #32]
 8002234:	429a      	cmp	r2, r3
 8002236:	d90a      	bls.n	800224e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4619      	mov	r1, r3
 8002242:	4610      	mov	r0, r2
 8002244:	f00d f80a 	bl	800f25c <realloc>
 8002248:	4602      	mov	r2, r0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a3a      	ldr	r2, [r7, #32]
 8002252:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002254:	2300      	movs	r3, #0
 8002256:	633b      	str	r3, [r7, #48]	; 0x30
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800225e:	429a      	cmp	r2, r3
 8002260:	d236      	bcs.n	80022d0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800226a:	6839      	ldr	r1, [r7, #0]
 800226c:	440a      	add	r2, r1
 800226e:	7812      	ldrb	r2, [r2, #0]
 8002270:	4313      	orrs	r3, r2
 8002272:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002278:	3301      	adds	r3, #1
 800227a:	6839      	ldr	r1, [r7, #0]
 800227c:	440b      	add	r3, r1
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	4313      	orrs	r3, r2
 8002284:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228a:	3302      	adds	r3, #2
 800228c:	6839      	ldr	r1, [r7, #0]
 800228e:	440b      	add	r3, r1
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	041b      	lsls	r3, r3, #16
 8002294:	4313      	orrs	r3, r2
 8002296:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229c:	3303      	adds	r3, #3
 800229e:	6839      	ldr	r1, [r7, #0]
 80022a0:	440b      	add	r3, r1
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	061b      	lsls	r3, r3, #24
 80022a6:	4313      	orrs	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80022b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b2:	3304      	adds	r3, #4
 80022b4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	3208      	adds	r2, #8
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80022c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ca:	3301      	adds	r3, #1
 80022cc:	633b      	str	r3, [r7, #48]	; 0x30
 80022ce:	e7c3      	b.n	8002258 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80022d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	4413      	add	r3, r2
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80022da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022dc:	3301      	adds	r3, #1
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	4413      	add	r3, r2
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	69fa      	ldr	r2, [r7, #28]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80022ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ee:	3302      	adds	r3, #2
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	041b      	lsls	r3, r3, #16
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80022fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002300:	3303      	adds	r3, #3
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	4413      	add	r3, r2
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	061b      	lsls	r3, r3, #24
 800230a:	69fa      	ldr	r2, [r7, #28]
 800230c:	4313      	orrs	r3, r2
 800230e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002312:	3304      	adds	r3, #4
 8002314:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	429a      	cmp	r2, r3
 800231e:	d90a      	bls.n	8002336 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4619      	mov	r1, r3
 800232a:	4610      	mov	r0, r2
 800232c:	f00c ff96 	bl	800f25c <realloc>
 8002330:	4602      	mov	r2, r0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69fa      	ldr	r2, [r7, #28]
 800233a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800233c:	2300      	movs	r3, #0
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002346:	429a      	cmp	r2, r3
 8002348:	d236      	bcs.n	80023b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002352:	6839      	ldr	r1, [r7, #0]
 8002354:	440a      	add	r2, r1
 8002356:	7812      	ldrb	r2, [r2, #0]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002360:	3301      	adds	r3, #1
 8002362:	6839      	ldr	r1, [r7, #0]
 8002364:	440b      	add	r3, r1
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	021b      	lsls	r3, r3, #8
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002372:	3302      	adds	r3, #2
 8002374:	6839      	ldr	r1, [r7, #0]
 8002376:	440b      	add	r3, r1
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	041b      	lsls	r3, r3, #16
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002384:	3303      	adds	r3, #3
 8002386:	6839      	ldr	r1, [r7, #0]
 8002388:	440b      	add	r3, r1
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	061b      	lsls	r3, r3, #24
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239a:	3304      	adds	r3, #4
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	3214      	adds	r2, #20
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80023b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b2:	3301      	adds	r3, #1
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023b6:	e7c3      	b.n	8002340 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80023b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	4413      	add	r3, r2
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80023c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c4:	3301      	adds	r3, #1
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	4413      	add	r3, r2
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80023d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d6:	3302      	adds	r3, #2
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	041b      	lsls	r3, r3, #16
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80023e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e8:	3303      	adds	r3, #3
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	4413      	add	r3, r2
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	061b      	lsls	r3, r3, #24
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80023f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fa:	3304      	adds	r3, #4
 80023fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	429a      	cmp	r2, r3
 8002406:	d90a      	bls.n	800241e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4619      	mov	r1, r3
 8002412:	4610      	mov	r0, r2
 8002414:	f00c ff22 	bl	800f25c <realloc>
 8002418:	4602      	mov	r2, r0
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002424:	2300      	movs	r3, #0
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800242e:	429a      	cmp	r2, r3
 8002430:	d23f      	bcs.n	80024b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	441a      	add	r2, r3
 8002438:	f107 030c 	add.w	r3, r7, #12
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f001 f8b0 	bl	80035a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002446:	3304      	adds	r3, #4
 8002448:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800244a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
 800244e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002456:	429a      	cmp	r2, r3
 8002458:	d20c      	bcs.n	8002474 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	441a      	add	r2, r3
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	3b01      	subs	r3, #1
 8002464:	6839      	ldr	r1, [r7, #0]
 8002466:	440b      	add	r3, r1
 8002468:	7812      	ldrb	r2, [r2, #0]
 800246a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	3301      	adds	r3, #1
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
 8002472:	e7ec      	b.n	800244e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4413      	add	r3, r2
 800247a:	3b01      	subs	r3, #1
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	4413      	add	r3, r2
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002486:	3b01      	subs	r3, #1
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	441a      	add	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4413      	add	r3, r2
 8002496:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	3220      	adds	r2, #32
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80024aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ac:	3301      	adds	r3, #1
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80024b0:	e7ba      	b.n	8002428 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80024b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80024b4:	4618      	mov	r0, r3
 80024b6:	3738      	adds	r7, #56	; 0x38
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	0800f714 	.word	0x0800f714

080024d8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	0800f628 	.word	0x0800f628

080024f4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	611a      	str	r2, [r3, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68d8      	ldr	r0, [r3, #12]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6891      	ldr	r1, [r2, #8]
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	4798      	blx	r3
 8002540:	4603      	mov	r3, r0
  };
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
  }
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a4b      	ldr	r2, [pc, #300]	; (80026a4 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d077      	beq.n	800266c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a48      	ldr	r2, [pc, #288]	; (80026a8 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d06f      	beq.n	800266c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a45      	ldr	r2, [pc, #276]	; (80026ac <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d067      	beq.n	800266c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a42      	ldr	r2, [pc, #264]	; (80026b0 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d05f      	beq.n	800266c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a3f      	ldr	r2, [pc, #252]	; (80026b4 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d057      	beq.n	800266c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a3c      	ldr	r2, [pc, #240]	; (80026b8 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d04f      	beq.n	800266c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a39      	ldr	r2, [pc, #228]	; (80026bc <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d047      	beq.n	800266c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a36      	ldr	r2, [pc, #216]	; (80026c0 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d03f      	beq.n	800266c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a33      	ldr	r2, [pc, #204]	; (80026c4 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d037      	beq.n	800266c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a30      	ldr	r2, [pc, #192]	; (80026c8 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d02f      	beq.n	800266c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a2d      	ldr	r2, [pc, #180]	; (80026cc <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d027      	beq.n	800266c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a2a      	ldr	r2, [pc, #168]	; (80026d0 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d01f      	beq.n	800266c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a27      	ldr	r2, [pc, #156]	; (80026d4 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d017      	beq.n	800266c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a24      	ldr	r2, [pc, #144]	; (80026d8 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d00f      	beq.n	800266c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a21      	ldr	r2, [pc, #132]	; (80026dc <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d007      	beq.n	800266c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1e      	ldr	r2, [pc, #120]	; (80026e0 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d10a      	bne.n	8002682 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800267c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002680:	e009      	b.n	8002696 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002692:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40020010 	.word	0x40020010
 80026a8:	40020028 	.word	0x40020028
 80026ac:	40020040 	.word	0x40020040
 80026b0:	40020058 	.word	0x40020058
 80026b4:	40020070 	.word	0x40020070
 80026b8:	40020088 	.word	0x40020088
 80026bc:	400200a0 	.word	0x400200a0
 80026c0:	400200b8 	.word	0x400200b8
 80026c4:	40020410 	.word	0x40020410
 80026c8:	40020428 	.word	0x40020428
 80026cc:	40020440 	.word	0x40020440
 80026d0:	40020458 	.word	0x40020458
 80026d4:	40020470 	.word	0x40020470
 80026d8:	40020488 	.word	0x40020488
 80026dc:	400204a0 	.word	0x400204a0
 80026e0:	400204b8 	.word	0x400204b8

080026e4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <_ZN13STM32HardwareC1Ev+0x34>)
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    }
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	24001970 	.word	0x24001970

0800271c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f804 	bl	8002732 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
    	HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6858      	ldr	r0, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3308      	adds	r3, #8
 8002742:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002746:	4619      	mov	r1, r3
 8002748:	f00a fce0 	bl	800d10c <HAL_UART_Receive_DMA>
    }
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800275c:	f04f 33ff 	mov.w	r3, #4294967295
 8002760:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f8d3 4408 	ldr.w	r4, [r3, #1032]	; 0x408
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff fefb 	bl	8002564 <_ZN13STM32Hardware10getRdmaIndEv>
 800276e:	4603      	mov	r3, r0
 8002770:	429c      	cmp	r4, r3
 8002772:	bf14      	ite	ne
 8002774:	2301      	movne	r3, #1
 8002776:	2300      	moveq	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d012      	beq.n	80027a4 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002784:	1c59      	adds	r1, r3, #1
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	4413      	add	r3, r2
 8002790:	7a1b      	ldrb	r3, [r3, #8]
 8002792:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800279a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
      }
      return c;
 80027a4:	68fb      	ldr	r3, [r7, #12]
    }
 80027a6:	4618      	mov	r0, r3
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd90      	pop	{r4, r7, pc}
	...

080027b0 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d108      	bne.n	80027d6 <_ZN13STM32Hardware5flushEv+0x26>
 80027c4:	4b28      	ldr	r3, [pc, #160]	; (8002868 <_ZN13STM32Hardware5flushEv+0xb8>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	f083 0301 	eor.w	r3, r3, #1
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <_ZN13STM32Hardware5flushEv+0x26>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <_ZN13STM32Hardware5flushEv+0x28>
 80027d6:	2300      	movs	r3, #0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d040      	beq.n	800285e <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80027dc:	4b22      	ldr	r3, [pc, #136]	; (8002868 <_ZN13STM32Hardware5flushEv+0xb8>)
 80027de:	2201      	movs	r2, #1
 80027e0:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d032      	beq.n	8002858 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80027fe:	429a      	cmp	r2, r3
 8002800:	d20a      	bcs.n	8002818 <_ZN13STM32Hardware5flushEv+0x68>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002808:	b29a      	uxth	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8002810:	b29b      	uxth	r3, r3
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	b29b      	uxth	r3, r3
 8002816:	e006      	b.n	8002826 <_ZN13STM32Hardware5flushEv+0x76>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800281e:	b29b      	uxth	r3, r3
 8002820:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002824:	b29b      	uxth	r3, r3
 8002826:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6858      	ldr	r0, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8002832:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	3304      	adds	r3, #4
 800283c:	89fa      	ldrh	r2, [r7, #14]
 800283e:	4619      	mov	r1, r3
 8002840:	f00a fbe4 	bl	800d00c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 800284a:	89fb      	ldrh	r3, [r7, #14]
 800284c:	4413      	add	r3, r2
 800284e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
        }
        mutex = false;
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <_ZN13STM32Hardware5flushEv+0xb8>)
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
      }
    }
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	24000538 	.word	0x24000538

0800286c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
      int n = length;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002882:	bfa8      	it	ge
 8002884:	f44f 6380 	movge.w	r3, #1024	; 0x400
 8002888:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002890:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	4293      	cmp	r3, r2
 8002898:	bf28      	it	cs
 800289a:	4613      	movcs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80028a4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	3304      	adds	r3, #4
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f00c fcbc 	bl	800f230 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	4413      	add	r3, r2
 80028c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c

      if(n != n_tail){
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d00b      	beq.n	80028ec <_ZN13STM32Hardware5writeEPhi+0x80>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	18d1      	adds	r1, r2, r3
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	f00c fca2 	bl	800f230 <memcpy>
      }

      flush();
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f7ff ff5f 	bl	80027b0 <_ZN13STM32Hardware5flushEv>
    }
 80028f2:	bf00      	nop
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	f002 fd1b 	bl	800533c <HAL_GetTick>
 8002906:	4603      	mov	r3, r0
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe ffb4 	bl	8001888 <_ZN3ros3MsgC1Ev>
 8002920:	4a0e      	ldr	r2, [pc, #56]	; (800295c <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	0800f77c 	.word	0x0800f77c

08002960 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002960:	b480      	push	{r7}
 8002962:	b08b      	sub	sp, #44	; 0x2c
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002974:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002978:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800297c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800297e:	6838      	ldr	r0, [r7, #0]
 8002980:	4401      	add	r1, r0
 8002982:	b2d3      	uxtb	r3, r2
 8002984:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002986:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	0a02      	lsrs	r2, r0, #8
 8002994:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002998:	0a0b      	lsrs	r3, r1, #8
 800299a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800299c:	3101      	adds	r1, #1
 800299e:	6838      	ldr	r0, [r7, #0]
 80029a0:	4401      	add	r1, r0
 80029a2:	b2d3      	uxtb	r3, r2
 80029a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80029a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	0c02      	lsrs	r2, r0, #16
 80029b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80029b8:	0c0b      	lsrs	r3, r1, #16
 80029ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029bc:	3102      	adds	r1, #2
 80029be:	6838      	ldr	r0, [r7, #0]
 80029c0:	4401      	add	r1, r0
 80029c2:	b2d3      	uxtb	r3, r2
 80029c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80029c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	0e02      	lsrs	r2, r0, #24
 80029d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80029d8:	0e0b      	lsrs	r3, r1, #24
 80029da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029dc:	3103      	adds	r1, #3
 80029de:	6838      	ldr	r0, [r7, #0]
 80029e0:	4401      	add	r1, r0
 80029e2:	b2d3      	uxtb	r3, r2
 80029e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80029e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	000a      	movs	r2, r1
 80029f4:	2300      	movs	r3, #0
 80029f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029f8:	3104      	adds	r1, #4
 80029fa:	6838      	ldr	r0, [r7, #0]
 80029fc:	4401      	add	r1, r0
 80029fe:	b2d3      	uxtb	r3, r2
 8002a00:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002a02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	0a0a      	lsrs	r2, r1, #8
 8002a10:	2300      	movs	r3, #0
 8002a12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a14:	3105      	adds	r1, #5
 8002a16:	6838      	ldr	r0, [r7, #0]
 8002a18:	4401      	add	r1, r0
 8002a1a:	b2d3      	uxtb	r3, r2
 8002a1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002a1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	0c0a      	lsrs	r2, r1, #16
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a30:	3106      	adds	r1, #6
 8002a32:	6838      	ldr	r0, [r7, #0]
 8002a34:	4401      	add	r1, r0
 8002a36:	b2d3      	uxtb	r3, r2
 8002a38:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002a3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	0e0a      	lsrs	r2, r1, #24
 8002a48:	2300      	movs	r3, #0
 8002a4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a4c:	3107      	adds	r1, #7
 8002a4e:	6838      	ldr	r0, [r7, #0]
 8002a50:	4401      	add	r1, r0
 8002a52:	b2d3      	uxtb	r3, r2
 8002a54:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	3308      	adds	r3, #8
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a62:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002a66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a6c:	6838      	ldr	r0, [r7, #0]
 8002a6e:	4401      	add	r1, r0
 8002a70:	b2d3      	uxtb	r3, r2
 8002a72:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002a74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	0a02      	lsrs	r2, r0, #8
 8002a82:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002a86:	0a0b      	lsrs	r3, r1, #8
 8002a88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a8a:	3101      	adds	r1, #1
 8002a8c:	6838      	ldr	r0, [r7, #0]
 8002a8e:	4401      	add	r1, r0
 8002a90:	b2d3      	uxtb	r3, r2
 8002a92:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002a94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	0c02      	lsrs	r2, r0, #16
 8002aa2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002aa6:	0c0b      	lsrs	r3, r1, #16
 8002aa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aaa:	3102      	adds	r1, #2
 8002aac:	6838      	ldr	r0, [r7, #0]
 8002aae:	4401      	add	r1, r0
 8002ab0:	b2d3      	uxtb	r3, r2
 8002ab2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002ab4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	0e02      	lsrs	r2, r0, #24
 8002ac2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ac6:	0e0b      	lsrs	r3, r1, #24
 8002ac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aca:	3103      	adds	r1, #3
 8002acc:	6838      	ldr	r0, [r7, #0]
 8002ace:	4401      	add	r1, r0
 8002ad0:	b2d3      	uxtb	r3, r2
 8002ad2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002ad4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	000a      	movs	r2, r1
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae6:	3104      	adds	r1, #4
 8002ae8:	6838      	ldr	r0, [r7, #0]
 8002aea:	4401      	add	r1, r0
 8002aec:	b2d3      	uxtb	r3, r2
 8002aee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002af0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	0a0a      	lsrs	r2, r1, #8
 8002afe:	2300      	movs	r3, #0
 8002b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b02:	3105      	adds	r1, #5
 8002b04:	6838      	ldr	r0, [r7, #0]
 8002b06:	4401      	add	r1, r0
 8002b08:	b2d3      	uxtb	r3, r2
 8002b0a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002b0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	0c0a      	lsrs	r2, r1, #16
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b1e:	3106      	adds	r1, #6
 8002b20:	6838      	ldr	r0, [r7, #0]
 8002b22:	4401      	add	r1, r0
 8002b24:	b2d3      	uxtb	r3, r2
 8002b26:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002b28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	0e0a      	lsrs	r2, r1, #24
 8002b36:	2300      	movs	r3, #0
 8002b38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b3a:	3107      	adds	r1, #7
 8002b3c:	6838      	ldr	r0, [r7, #0]
 8002b3e:	4401      	add	r1, r0
 8002b40:	b2d3      	uxtb	r3, r2
 8002b42:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	3308      	adds	r3, #8
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002b50:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002b54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b5a:	6838      	ldr	r0, [r7, #0]
 8002b5c:	4401      	add	r1, r0
 8002b5e:	b2d3      	uxtb	r3, r2
 8002b60:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002b62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	0a02      	lsrs	r2, r0, #8
 8002b70:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002b74:	0a0b      	lsrs	r3, r1, #8
 8002b76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b78:	3101      	adds	r1, #1
 8002b7a:	6838      	ldr	r0, [r7, #0]
 8002b7c:	4401      	add	r1, r0
 8002b7e:	b2d3      	uxtb	r3, r2
 8002b80:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002b82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	0c02      	lsrs	r2, r0, #16
 8002b90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002b94:	0c0b      	lsrs	r3, r1, #16
 8002b96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b98:	3102      	adds	r1, #2
 8002b9a:	6838      	ldr	r0, [r7, #0]
 8002b9c:	4401      	add	r1, r0
 8002b9e:	b2d3      	uxtb	r3, r2
 8002ba0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002ba2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	0e02      	lsrs	r2, r0, #24
 8002bb0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002bb4:	0e0b      	lsrs	r3, r1, #24
 8002bb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bb8:	3103      	adds	r1, #3
 8002bba:	6838      	ldr	r0, [r7, #0]
 8002bbc:	4401      	add	r1, r0
 8002bbe:	b2d3      	uxtb	r3, r2
 8002bc0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002bc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	000a      	movs	r2, r1
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd4:	3104      	adds	r1, #4
 8002bd6:	6838      	ldr	r0, [r7, #0]
 8002bd8:	4401      	add	r1, r0
 8002bda:	b2d3      	uxtb	r3, r2
 8002bdc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002bde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	0a0a      	lsrs	r2, r1, #8
 8002bec:	2300      	movs	r3, #0
 8002bee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bf0:	3105      	adds	r1, #5
 8002bf2:	6838      	ldr	r0, [r7, #0]
 8002bf4:	4401      	add	r1, r0
 8002bf6:	b2d3      	uxtb	r3, r2
 8002bf8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002bfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	0c0a      	lsrs	r2, r1, #16
 8002c08:	2300      	movs	r3, #0
 8002c0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c0c:	3106      	adds	r1, #6
 8002c0e:	6838      	ldr	r0, [r7, #0]
 8002c10:	4401      	add	r1, r0
 8002c12:	b2d3      	uxtb	r3, r2
 8002c14:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002c16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	0e0a      	lsrs	r2, r1, #24
 8002c24:	2300      	movs	r3, #0
 8002c26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c28:	3107      	adds	r1, #7
 8002c2a:	6838      	ldr	r0, [r7, #0]
 8002c2c:	4401      	add	r1, r0
 8002c2e:	b2d3      	uxtb	r3, r2
 8002c30:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	3308      	adds	r3, #8
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	372c      	adds	r7, #44	; 0x2c
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002c46:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002c4a:	b0eb      	sub	sp, #428	; 0x1ac
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002c52:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c68:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c6c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002c70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c74:	4413      	add	r3, r2
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	461c      	mov	r4, r3
 8002c7e:	4615      	mov	r5, r2
 8002c80:	ea40 0804 	orr.w	r8, r0, r4
 8002c84:	ea41 0905 	orr.w	r9, r1, r5
 8002c88:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c8c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c9a:	4413      	add	r3, r2
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	469a      	mov	sl, r3
 8002ca4:	4693      	mov	fp, r2
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002cb2:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002cb6:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002cba:	ea40 0402 	orr.w	r4, r0, r2
 8002cbe:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002cc8:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002ccc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002cd0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002cd4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cd8:	1c9a      	adds	r2, r3, #2
 8002cda:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cde:	4413      	add	r3, r2
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002cea:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002cfa:	464c      	mov	r4, r9
 8002cfc:	0423      	lsls	r3, r4, #16
 8002cfe:	4644      	mov	r4, r8
 8002d00:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002d04:	4644      	mov	r4, r8
 8002d06:	0422      	lsls	r2, r4, #16
 8002d08:	ea40 0402 	orr.w	r4, r0, r2
 8002d0c:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002d10:	430b      	orrs	r3, r1
 8002d12:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002d16:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002d1a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d1e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002d22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d26:	1cda      	adds	r2, r3, #3
 8002d28:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d2c:	4413      	add	r3, r2
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2200      	movs	r2, #0
 8002d34:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002d38:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002d3c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002d40:	4623      	mov	r3, r4
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002d48:	4623      	mov	r3, r4
 8002d4a:	061b      	lsls	r3, r3, #24
 8002d4c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002d50:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002d54:	4623      	mov	r3, r4
 8002d56:	4303      	orrs	r3, r0
 8002d58:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d5c:	462b      	mov	r3, r5
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d64:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002d68:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002d6c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002d70:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d74:	1d1a      	adds	r2, r3, #4
 8002d76:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d7a:	4413      	add	r3, r2
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2200      	movs	r2, #0
 8002d82:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002d86:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002d96:	0023      	movs	r3, r4
 8002d98:	2200      	movs	r2, #0
 8002d9a:	ea40 0402 	orr.w	r4, r0, r2
 8002d9e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002da2:	430b      	orrs	r3, r1
 8002da4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002da8:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002dac:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002db0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002db4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002db8:	1d5a      	adds	r2, r3, #5
 8002dba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dbe:	4413      	add	r3, r2
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002dca:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002dda:	0223      	lsls	r3, r4, #8
 8002ddc:	2200      	movs	r2, #0
 8002dde:	ea40 0402 	orr.w	r4, r0, r2
 8002de2:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002de6:	430b      	orrs	r3, r1
 8002de8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002dec:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002df0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002df4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002df8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dfc:	1d9a      	adds	r2, r3, #6
 8002dfe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e02:	4413      	add	r3, r2
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002e0e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002e1e:	0423      	lsls	r3, r4, #16
 8002e20:	2200      	movs	r2, #0
 8002e22:	ea40 0402 	orr.w	r4, r0, r2
 8002e26:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002e2a:	430b      	orrs	r3, r1
 8002e2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e30:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002e34:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002e38:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002e3c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e40:	1dda      	adds	r2, r3, #7
 8002e42:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e46:	4413      	add	r3, r2
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002e52:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002e62:	0623      	lsls	r3, r4, #24
 8002e64:	2200      	movs	r2, #0
 8002e66:	ea40 0402 	orr.w	r4, r0, r2
 8002e6a:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002e74:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002e78:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002e7c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002e80:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002e84:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002e88:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e8c:	3308      	adds	r3, #8
 8002e8e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e9e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ea2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002ea6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002eaa:	4413      	add	r3, r2
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002eb6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002eba:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002ebe:	4623      	mov	r3, r4
 8002ec0:	4303      	orrs	r3, r0
 8002ec2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002ec6:	462b      	mov	r3, r5
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ece:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002ed2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ed6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002eda:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ee4:	4413      	add	r3, r2
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002ef0:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002f00:	464c      	mov	r4, r9
 8002f02:	0223      	lsls	r3, r4, #8
 8002f04:	4644      	mov	r4, r8
 8002f06:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f0a:	4644      	mov	r4, r8
 8002f0c:	0222      	lsls	r2, r4, #8
 8002f0e:	ea40 0402 	orr.w	r4, r0, r2
 8002f12:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002f16:	430b      	orrs	r3, r1
 8002f18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002f1c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002f20:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f24:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002f28:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f2c:	1c9a      	adds	r2, r3, #2
 8002f2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f32:	4413      	add	r3, r2
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002f4e:	464c      	mov	r4, r9
 8002f50:	0423      	lsls	r3, r4, #16
 8002f52:	4644      	mov	r4, r8
 8002f54:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002f58:	4644      	mov	r4, r8
 8002f5a:	0422      	lsls	r2, r4, #16
 8002f5c:	ea40 0402 	orr.w	r4, r0, r2
 8002f60:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002f64:	430b      	orrs	r3, r1
 8002f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f6a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002f6e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f72:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002f76:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f7a:	1cda      	adds	r2, r3, #3
 8002f7c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f80:	4413      	add	r3, r2
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2200      	movs	r2, #0
 8002f88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f8c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f90:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002f94:	4623      	mov	r3, r4
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002f9c:	4623      	mov	r3, r4
 8002f9e:	061b      	lsls	r3, r3, #24
 8002fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fa4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002fa8:	4623      	mov	r3, r4
 8002faa:	4303      	orrs	r3, r0
 8002fac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fb0:	462b      	mov	r3, r5
 8002fb2:	430b      	orrs	r3, r1
 8002fb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fb8:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002fbc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002fc0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002fc4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fc8:	1d1a      	adds	r2, r3, #4
 8002fca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fce:	4413      	add	r3, r2
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fda:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002fea:	0023      	movs	r3, r4
 8002fec:	2200      	movs	r2, #0
 8002fee:	ea40 0402 	orr.w	r4, r0, r2
 8002ff2:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002ffc:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003000:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003004:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003008:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800300c:	1d5a      	adds	r2, r3, #5
 800300e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003012:	4413      	add	r3, r2
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2200      	movs	r2, #0
 800301a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800301e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800302e:	0223      	lsls	r3, r4, #8
 8003030:	2200      	movs	r2, #0
 8003032:	ea40 0402 	orr.w	r4, r0, r2
 8003036:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800303a:	430b      	orrs	r3, r1
 800303c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003040:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003044:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003048:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800304c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003050:	1d9a      	adds	r2, r3, #6
 8003052:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003056:	4413      	add	r3, r2
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2200      	movs	r2, #0
 800305e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003062:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003072:	0423      	lsls	r3, r4, #16
 8003074:	2200      	movs	r2, #0
 8003076:	ea40 0402 	orr.w	r4, r0, r2
 800307a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800307e:	430b      	orrs	r3, r1
 8003080:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003084:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003088:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800308c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003090:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003094:	1dda      	adds	r2, r3, #7
 8003096:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800309a:	4413      	add	r3, r2
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2200      	movs	r2, #0
 80030a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80030b6:	0623      	lsls	r3, r4, #24
 80030b8:	2200      	movs	r2, #0
 80030ba:	ea40 0402 	orr.w	r4, r0, r2
 80030be:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80030c2:	430b      	orrs	r3, r1
 80030c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80030c8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80030cc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 80030d0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80030d4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80030d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80030dc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030e0:	3308      	adds	r3, #8
 80030e2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80030f2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80030f6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80030fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030fe:	4413      	add	r3, r2
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2200      	movs	r2, #0
 8003106:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800310a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800310e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003112:	4623      	mov	r3, r4
 8003114:	4303      	orrs	r3, r0
 8003116:	67bb      	str	r3, [r7, #120]	; 0x78
 8003118:	462b      	mov	r3, r5
 800311a:	430b      	orrs	r3, r1
 800311c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800311e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003122:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003126:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800312a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003134:	4413      	add	r3, r2
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2200      	movs	r2, #0
 800313c:	673b      	str	r3, [r7, #112]	; 0x70
 800313e:	677a      	str	r2, [r7, #116]	; 0x74
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800314c:	464c      	mov	r4, r9
 800314e:	0223      	lsls	r3, r4, #8
 8003150:	4644      	mov	r4, r8
 8003152:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003156:	4644      	mov	r4, r8
 8003158:	0222      	lsls	r2, r4, #8
 800315a:	ea40 0402 	orr.w	r4, r0, r2
 800315e:	66bc      	str	r4, [r7, #104]	; 0x68
 8003160:	430b      	orrs	r3, r1
 8003162:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003164:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003168:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800316c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003170:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003174:	1c9a      	adds	r2, r3, #2
 8003176:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800317a:	4413      	add	r3, r2
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2200      	movs	r2, #0
 8003182:	663b      	str	r3, [r7, #96]	; 0x60
 8003184:	667a      	str	r2, [r7, #100]	; 0x64
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003192:	464c      	mov	r4, r9
 8003194:	0423      	lsls	r3, r4, #16
 8003196:	4644      	mov	r4, r8
 8003198:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800319c:	4644      	mov	r4, r8
 800319e:	0422      	lsls	r2, r4, #16
 80031a0:	ea40 0402 	orr.w	r4, r0, r2
 80031a4:	65bc      	str	r4, [r7, #88]	; 0x58
 80031a6:	430b      	orrs	r3, r1
 80031a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031aa:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80031ae:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80031b2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80031b6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031ba:	1cda      	adds	r2, r3, #3
 80031bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031c0:	4413      	add	r3, r2
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2200      	movs	r2, #0
 80031c8:	653b      	str	r3, [r7, #80]	; 0x50
 80031ca:	657a      	str	r2, [r7, #84]	; 0x54
 80031cc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80031d0:	4623      	mov	r3, r4
 80031d2:	0a1b      	lsrs	r3, r3, #8
 80031d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031d6:	4623      	mov	r3, r4
 80031d8:	061b      	lsls	r3, r3, #24
 80031da:	64bb      	str	r3, [r7, #72]	; 0x48
 80031dc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80031e0:	4623      	mov	r3, r4
 80031e2:	4303      	orrs	r3, r0
 80031e4:	643b      	str	r3, [r7, #64]	; 0x40
 80031e6:	462b      	mov	r3, r5
 80031e8:	430b      	orrs	r3, r1
 80031ea:	647b      	str	r3, [r7, #68]	; 0x44
 80031ec:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80031f0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80031f4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80031f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031fc:	1d1a      	adds	r2, r3, #4
 80031fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003202:	4413      	add	r3, r2
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2200      	movs	r2, #0
 800320a:	63bb      	str	r3, [r7, #56]	; 0x38
 800320c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003218:	0023      	movs	r3, r4
 800321a:	2200      	movs	r2, #0
 800321c:	ea40 0402 	orr.w	r4, r0, r2
 8003220:	633c      	str	r4, [r7, #48]	; 0x30
 8003222:	430b      	orrs	r3, r1
 8003224:	637b      	str	r3, [r7, #52]	; 0x34
 8003226:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800322a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800322e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003232:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003236:	1d5a      	adds	r2, r3, #5
 8003238:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800323c:	4413      	add	r3, r2
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2200      	movs	r2, #0
 8003244:	62bb      	str	r3, [r7, #40]	; 0x28
 8003246:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003252:	0223      	lsls	r3, r4, #8
 8003254:	2200      	movs	r2, #0
 8003256:	ea40 0402 	orr.w	r4, r0, r2
 800325a:	623c      	str	r4, [r7, #32]
 800325c:	430b      	orrs	r3, r1
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
 8003260:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003264:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003268:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800326c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003270:	3306      	adds	r3, #6
 8003272:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003276:	4413      	add	r3, r2
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2200      	movs	r2, #0
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	61fa      	str	r2, [r7, #28]
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	69bc      	ldr	r4, [r7, #24]
 800328c:	0423      	lsls	r3, r4, #16
 800328e:	2200      	movs	r2, #0
 8003290:	ea40 0402 	orr.w	r4, r0, r2
 8003294:	613c      	str	r4, [r7, #16]
 8003296:	430b      	orrs	r3, r1
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800329e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80032a2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80032a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032aa:	3307      	adds	r3, #7
 80032ac:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80032b0:	4413      	add	r3, r2
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2200      	movs	r2, #0
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	60fa      	str	r2, [r7, #12]
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	68bc      	ldr	r4, [r7, #8]
 80032c6:	0623      	lsls	r3, r4, #24
 80032c8:	2200      	movs	r2, #0
 80032ca:	ea40 0402 	orr.w	r4, r0, r2
 80032ce:	603c      	str	r4, [r7, #0]
 80032d0:	430b      	orrs	r3, r1
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80032d8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 80032dc:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80032e0:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 80032e4:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80032e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032ec:	3308      	adds	r3, #8
 80032ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80032f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 80032f6:	4618      	mov	r0, r3
 80032f8:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80032fc:	46bd      	mov	sp, r7
 80032fe:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003302:	4770      	bx	lr

08003304 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	4b03      	ldr	r3, [pc, #12]	; (800331c <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	0800f64c 	.word	0x0800f64c

08003320 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	4b03      	ldr	r3, [pc, #12]	; (8003338 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	0800f664 	.word	0x0800f664

0800333c <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe fa9e 	bl	8001888 <_ZN3ros3MsgC1Ev>
 800334c:	4a08      	ldr	r2, [pc, #32]	; (8003370 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3308      	adds	r3, #8
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fada 	bl	8002910 <_ZN13geometry_msgs7Vector3C1Ev>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3328      	adds	r3, #40	; 0x28
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fad5 	bl	8002910 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	0800f764 	.word	0x0800f764

08003374 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f103 0008 	add.w	r0, r3, #8
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	4413      	add	r3, r2
 800338e:	4619      	mov	r1, r3
 8003390:	f7ff fae6 	bl	8002960 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003394:	4602      	mov	r2, r0
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4413      	add	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	4413      	add	r3, r2
 80033a8:	4619      	mov	r1, r3
 80033aa:	f7ff fad9 	bl	8002960 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80033ae:	4602      	mov	r2, r0
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4413      	add	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
      return offset;
 80033b6:	68fb      	ldr	r3, [r7, #12]
    }
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f103 0008 	add.w	r0, r3, #8
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	4413      	add	r3, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	f7ff fc33 	bl	8002c46 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4413      	add	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	4413      	add	r3, r2
 80033f4:	4619      	mov	r1, r3
 80033f6:	f7ff fc26 	bl	8002c46 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80033fa:	4602      	mov	r2, r0
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
     return offset;
 8003402:	68fb      	ldr	r3, [r7, #12]
    }
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	0800f688 	.word	0x0800f688

08003428 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	4b03      	ldr	r3, [pc, #12]	; (8003440 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	0800f69c 	.word	0x0800f69c

08003444 <_Z12vel_callbackRKN13geometry_msgs5TwistE>:
#include <ros.h>
#include <rosserial.h>
#include "geometry_msgs/TwistWithCovariance.h"

void vel_callback(const geometry_msgs::Twist &msg)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	linearvelocity_x = msg.linear.x;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003452:	490a      	ldr	r1, [pc, #40]	; (800347c <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 8003454:	e9c1 2300 	strd	r2, r3, [r1]
	linearvelocity_y = msg.linear.y;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800345e:	4908      	ldr	r1, [pc, #32]	; (8003480 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x3c>)
 8003460:	e9c1 2300 	strd	r2, r3, [r1]
	angularvelocity = msg.angular.z;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800346a:	4906      	ldr	r1, [pc, #24]	; (8003484 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x40>)
 800346c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	240000c0 	.word	0x240000c0
 8003480:	240000c8 	.word	0x240000c8
 8003484:	240000d0 	.word	0x240000d0

08003488 <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Twist> vel_sub("/cmd_vel", vel_callback);
ros::Publisher odom_pub("Toposition", &real_speed);
double odom_vel[3];

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003490:	4805      	ldr	r0, [pc, #20]	; (80034a8 <HAL_UART_TxCpltCallback+0x20>)
 8003492:	f000 f987 	bl	80037a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8003496:	4603      	mov	r3, r0
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff f989 	bl	80027b0 <_ZN13STM32Hardware5flushEv>
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	2400053c 	.word	0x2400053c

080034ac <Rosserial_Init>:

void Rosserial_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
    nh.initNode();
 80034b0:	4806      	ldr	r0, [pc, #24]	; (80034cc <Rosserial_Init+0x20>)
 80034b2:	f000 f983 	bl	80037bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
    nh.advertise(odom_pub);
 80034b6:	4906      	ldr	r1, [pc, #24]	; (80034d0 <Rosserial_Init+0x24>)
 80034b8:	4804      	ldr	r0, [pc, #16]	; (80034cc <Rosserial_Init+0x20>)
 80034ba:	f000 f9a8 	bl	800380e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
    nh.subscribe(vel_sub);
 80034be:	4905      	ldr	r1, [pc, #20]	; (80034d4 <Rosserial_Init+0x28>)
 80034c0:	4802      	ldr	r0, [pc, #8]	; (80034cc <Rosserial_Init+0x20>)
 80034c2:	f000 f9d2 	bl	800386a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	2400053c 	.word	0x2400053c
 80034d0:	24001728 	.word	0x24001728
 80034d4:	240016c8 	.word	0x240016c8

080034d8 <Rosserial_Spin>:

void Rosserial_Spin(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
		nh.spinOnce();
 80034dc:	4802      	ldr	r0, [pc, #8]	; (80034e8 <Rosserial_Spin+0x10>)
 80034de:	f000 f9f1 	bl	80038c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	2400053c 	.word	0x2400053c

080034ec <Rosserial_GetHardware>:
{
		return nh.config_state();
}

void Rosserial_GetHardware(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
		nh.getHardware()->init();
 80034f0:	4804      	ldr	r0, [pc, #16]	; (8003504 <Rosserial_GetHardware+0x18>)
 80034f2:	f000 f957 	bl	80037a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 80034f6:	4603      	mov	r3, r0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff f90f 	bl	800271c <_ZN13STM32Hardware4initEv>
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	2400053c 	.word	0x2400053c

08003508 <odom_store>:

void odom_store(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
		real_speed.linear.x =  odom_vel[0];
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <odom_store+0x34>)
 800350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003512:	490b      	ldr	r1, [pc, #44]	; (8003540 <odom_store+0x38>)
 8003514:	e9c1 2304 	strd	r2, r3, [r1, #16]
		real_speed.linear.y = odom_vel[1];
 8003518:	4b08      	ldr	r3, [pc, #32]	; (800353c <odom_store+0x34>)
 800351a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800351e:	4908      	ldr	r1, [pc, #32]	; (8003540 <odom_store+0x38>)
 8003520:	e9c1 2306 	strd	r2, r3, [r1, #24]
		real_speed.angular.z = odom_vel[2];
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <odom_store+0x34>)
 8003526:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800352a:	4905      	ldr	r1, [pc, #20]	; (8003540 <odom_store+0x38>)
 800352c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	24001740 	.word	0x24001740
 8003540:	24001680 	.word	0x24001680

08003544 <odom_publish>:

void odom_publish(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
		odom_pub.publish(&real_speed);
 8003548:	4904      	ldr	r1, [pc, #16]	; (800355c <odom_publish+0x18>)
 800354a:	4805      	ldr	r0, [pc, #20]	; (8003560 <odom_publish+0x1c>)
 800354c:	f7fe ffe9 	bl	8002522 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 8003550:	4804      	ldr	r0, [pc, #16]	; (8003564 <odom_publish+0x20>)
 8003552:	f000 f9b7 	bl	80038c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	24001680 	.word	0x24001680
 8003560:	24001728 	.word	0x24001728
 8003564:	2400053c 	.word	0x2400053c

08003568 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d80d      	bhi.n	8003598 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	fa22 f103 	lsr.w	r1, r2, r3
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	b2ca      	uxtb	r2, r1
 800358e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3301      	adds	r3, #1
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	e7ee      	b.n	8003576 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d811      	bhi.n	80035e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6839      	ldr	r1, [r7, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	440a      	add	r2, r1
 80035c8:	7812      	ldrb	r2, [r2, #0]
 80035ca:	4611      	mov	r1, r2
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	00d2      	lsls	r2, r2, #3
 80035d0:	fa01 f202 	lsl.w	r2, r1, r2
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	3301      	adds	r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	e7ea      	b.n	80035b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	4a04      	ldr	r2, [pc, #16]	; (800360c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	0800f7ac 	.word	0x0800f7ac

08003610 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff ffe8 	bl	80035f0 <_ZN3ros15NodeHandleBase_C1Ev>
 8003620:	4a45      	ldr	r2, [pc, #276]	; (8003738 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x128>)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3304      	adds	r3, #4
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff f85a 	bl	80026e4 <_ZN13STM32HardwareC1Ev>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	f241 1318 	movw	r3, #4376	; 0x1118
 8003642:	4413      	add	r3, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f7fe fc93 	bl	8001f70 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b18      	cmp	r3, #24
 8003652:	d80a      	bhi.n	800366a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5a>
      publishers[i] = 0;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 800365c:	2100      	movs	r1, #0
 800365e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	3301      	adds	r3, #1
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	e7f1      	b.n	800364e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800366a:	2300      	movs	r3, #0
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b18      	cmp	r3, #24
 8003672:	d80b      	bhi.n	800368c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7c>
      subscribers[i] = 0;
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f203 4322 	addw	r3, r3, #1058	; 0x422
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	2200      	movs	r2, #0
 8003682:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	3301      	adds	r3, #1
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	e7f0      	b.n	800366e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5e>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003696:	d20a      	bcs.n	80036ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9e>
      message_in[i] = 0;
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4413      	add	r3, r2
 800369e:	f603 0328 	addw	r3, r3, #2088	; 0x828
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	3301      	adds	r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e7f0      	b.n	8003690 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80036ae:	2300      	movs	r3, #0
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b8:	d20a      	bcs.n	80036d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xc0>
      message_out[i] = 0;
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4413      	add	r3, r2
 80036c0:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 80036c4:	2200      	movs	r2, #0
 80036c6:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	3301      	adds	r3, #1
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	e7f0      	b.n	80036b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa2>

    req_param_resp.ints_length = 0;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d6:	461a      	mov	r2, r3
 80036d8:	2300      	movs	r3, #0
 80036da:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    req_param_resp.ints = NULL;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e4:	461a      	mov	r2, r3
 80036e6:	2300      	movs	r3, #0
 80036e8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    req_param_resp.floats_length = 0;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f2:	461a      	mov	r2, r3
 80036f4:	2300      	movs	r3, #0
 80036f6:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    req_param_resp.floats = NULL;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003700:	461a      	mov	r2, r3
 8003702:	2300      	movs	r3, #0
 8003704:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
    req_param_resp.ints_length = 0;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800370e:	461a      	mov	r2, r3
 8003710:	2300      	movs	r3, #0
 8003712:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    req_param_resp.ints = NULL;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800371c:	461a      	mov	r2, r3
 800371e:	2300      	movs	r3, #0
 8003720:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

    spin_timeout_ = 0;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  }
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	0800f750 	.word	0x0800f750

0800373c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	4a04      	ldr	r2, [pc, #16]	; (8003758 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4618      	mov	r0, r3
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	0800f794 	.word	0x0800f794

0800375c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ffe5 	bl	800373c <_ZN3ros11Subscriber_C1Ev>
 8003772:	4a0b      	ldr	r2, [pc, #44]	; (80037a0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	3310      	adds	r3, #16
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fddd 	bl	800333c <_ZN13geometry_msgs5TwistC1Ev>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	659a      	str	r2, [r3, #88]	; 0x58
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	609a      	str	r2, [r3, #8]
  };
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	0800f738 	.word	0x0800f738

080037a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:

  Hardware* getHardware()
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3304      	adds	r3, #4
  }
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fe ffa7 	bl	800271c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d4:	461a      	mov	r2, r3
 80037d6:	2300      	movs	r3, #0
 80037d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    bytes_ = 0;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037e2:	461a      	mov	r2, r3
 80037e4:	2300      	movs	r3, #0
 80037e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    index_ = 0;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f0:	461a      	mov	r2, r3
 80037f2:	2300      	movs	r3, #0
 80037f4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    topic_ = 0;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037fe:	461a      	mov	r2, r3
 8003800:	2300      	movs	r3, #0
 8003802:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
  };
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b18      	cmp	r3, #24
 8003820:	dc1c      	bgt.n	800385c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4e>
    {
      if (publishers[i] == 0) // empty slot
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 800382a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d110      	bne.n	8003854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 800383a:	6839      	ldr	r1, [r7, #0]
 800383c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	60da      	str	r2, [r3, #12]
        return true;
 8003850:	2301      	movs	r3, #1
 8003852:	e004      	b.n	800385e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	3301      	adds	r3, #1
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	e7df      	b.n	800381c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 800385c:	2300      	movs	r3, #0
  }
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800386a:	b480      	push	{r7}
 800386c:	b085      	sub	sp, #20
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b18      	cmp	r3, #24
 800387c:	dc1b      	bgt.n	80038b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10e      	bne.n	80038ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f203 4322 	addw	r3, r3, #1058	; 0x422
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	605a      	str	r2, [r3, #4]
        return true;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e004      	b.n	80038b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	3301      	adds	r3, #1
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	e7e0      	b.n	8003878 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 80038b6:	2300      	movs	r3, #0
  }
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3304      	adds	r3, #4
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff f812 	bl	80028fa <_ZN13STM32Hardware4timeEv>
 80038d6:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038de:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d905      	bls.n	80038fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    if (mode_ != MODE_FIRST_FF)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00e      	beq.n	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800390e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	429a      	cmp	r2, r3
 8003916:	d906      	bls.n	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800391e:	461a      	mov	r2, r3
 8003920:	2300      	movs	r3, #0
 8003922:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      if (spin_timeout_ > 0)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800392c:	2b00      	cmp	r3, #0
 800392e:	d014      	beq.n	800395a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe ffe0 	bl	80028fa <_ZN13STM32Hardware4timeEv>
 800393a:	4602      	mov	r2, r0
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	1ad2      	subs	r2, r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8003946:	429a      	cmp	r2, r3
 8003948:	bf8c      	ite	hi
 800394a:	2301      	movhi	r3, #1
 800394c:	2300      	movls	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 8003954:	f06f 0301 	mvn.w	r3, #1
 8003958:	e221      	b.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      int data = hardware_.read();
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3304      	adds	r3, #4
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe fef8 	bl	8002754 <_ZN13STM32Hardware4readEv>
 8003964:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	f2c0 81fa 	blt.w	8003d62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x49e>
      checksum_ += data;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003974:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4413      	add	r3, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003982:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800398c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003990:	2b07      	cmp	r3, #7
 8003992:	d12b      	bne.n	80039ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x128>
        message_in[index_++] = data;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800399a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80039a6:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	b2d1      	uxtb	r1, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	4413      	add	r3, r2
 80039b2:	460a      	mov	r2, r1
 80039b4:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
        bytes_--;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039c2:	3b01      	subs	r3, #1
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1a4      	bne.n	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039e2:	461a      	mov	r2, r3
 80039e4:	2308      	movs	r3, #8
 80039e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80039ea:	e79c      	b.n	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d130      	bne.n	8003a5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x198>
        if (data == 0xff)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2bff      	cmp	r3, #255	; 0xff
 80039fe:	d112      	bne.n	8003a26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	3314      	adds	r3, #20
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a20:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
 8003a24:	e77f      	b.n	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe ff65 	bl	80028fa <_ZN13STM32Hardware4timeEv>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	bf8c      	ite	hi
 8003a3e:	2301      	movhi	r3, #1
 8003a40:	2300      	movls	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f43f af6e 	beq.w	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
          return SPIN_TIMEOUT;
 8003a56:	f06f 0301 	mvn.w	r3, #1
 8003a5a:	e1a0      	b.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d121      	bne.n	8003aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ea>
        if (data == PROTOCOL_VER)
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2bfe      	cmp	r3, #254	; 0xfe
 8003a6e:	d10b      	bne.n	8003a88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1c4>
          mode_++;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a86:	e74e      	b.n	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8e:	461a      	mov	r2, r3
 8003a90:	2300      	movs	r3, #0
 8003a92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
          if (configured_ == false)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a9c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f47f af40 	bne.w	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f97d 	bl	8003da6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 8003aac:	e73b      	b.n	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d120      	bne.n	8003afe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23a>
        bytes_ = data;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        index_ = 0;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
        mode_++;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003aea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        checksum_ = data;               /* first byte for calculating size checksum */
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003af4:	461a      	mov	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8003afc:	e713      	b.n	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d118      	bne.n	8003b3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27a>
        bytes_ += data << 8;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b12:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	4413      	add	r3, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b30:	3301      	adds	r3, #1
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b38:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b3c:	e6f3      	b.n	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d11f      	bne.n	8003b8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c8>
        if ((checksum_ % 256) == 255)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b52:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b56:	425a      	negs	r2, r3
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	bf58      	it	pl
 8003b5e:	4253      	negpl	r3, r2
 8003b60:	2bff      	cmp	r3, #255	; 0xff
 8003b62:	d10b      	bne.n	8003b7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b8>
          mode_++;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b6e:	3301      	adds	r3, #1
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b7a:	e6d4      	b.n	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b82:	461a      	mov	r2, r3
 8003b84:	2300      	movs	r3, #0
 8003b86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b8a:	e6cc      	b.n	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b96:	2b05      	cmp	r3, #5
 8003b98:	d119      	bne.n	8003bce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30a>
        topic_ = data;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        checksum_ = data;               /* first byte included in checksum */
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8003bcc:	e6ab      	b.n	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bd8:	2b06      	cmp	r3, #6
 8003bda:	d123      	bne.n	8003c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x360>
        topic_ += data << 8;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003be2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	4413      	add	r3, r2
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bf2:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_ = MODE_MESSAGE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	2307      	movs	r3, #7
 8003c00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f47f ae89 	bne.w	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c22:	e680      	b.n	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	f47f ae79 	bne.w	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if ((checksum_ % 256) == 255)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c48:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003c4c:	425a      	negs	r2, r3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	bf58      	it	pl
 8003c54:	4253      	negpl	r3, r2
 8003c56:	2bff      	cmp	r3, #255	; 0xff
 8003c58:	f47f ae65 	bne.w	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c62:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d116      	bne.n	8003c98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d4>
            requestSyncTime();
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f89b 	bl	8003da6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f8b6 	bl	8003de2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            last_sync_receive_time = c_time;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            return SPIN_ERR;
 8003c92:	f04f 33ff 	mov.w	r3, #4294967295
 8003c96:	e082      	b.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
          else if (topic_ == TopicInfo::ID_TIME)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c9e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003ca2:	2b0a      	cmp	r3, #10
 8003ca4:	d107      	bne.n	8003cb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f2>
            syncTime(message_in);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f603 0328 	addw	r3, r3, #2088	; 0x828
 8003cac:	4619      	mov	r1, r3
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f97a 	bl	8003fa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 8003cb4:	e637      	b.n	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cbc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003cc0:	2b06      	cmp	r3, #6
 8003cc2:	d111      	bne.n	8003ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
            req_param_resp.deserialize(message_in);
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	f241 1318 	movw	r3, #4376	; 0x1118
 8003cca:	4413      	add	r3, r2
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	f602 0228 	addw	r2, r2, #2088	; 0x828
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fe fa80 	bl	80021da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8003ce6:	e61e      	b.n	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cee:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003cf2:	2b0b      	cmp	r3, #11
 8003cf4:	d106      	bne.n	8003d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x440>
            configured_ = false;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8003d02:	e610      	b.n	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d0a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003d0e:	3b64      	subs	r3, #100	; 0x64
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f43f ae02 	beq.w	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d28:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003d2c:	3b64      	subs	r3, #100	; 0x64
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	6858      	ldr	r0, [r3, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d40:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003d44:	3b64      	subs	r3, #100	; 0x64
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	f602 0228 	addw	r2, r2, #2088	; 0x828
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	4798      	blx	r3
    while (true)
 8003d60:	e5e1      	b.n	8003926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 8003d62:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d6a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d014      	beq.n	8003d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d78:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d909      	bls.n	8003d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
      requestSyncTime();
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f80c 	bl	8003da6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d94:	461a      	mov	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    return SPIN_OK;
 8003d9c:	2300      	movs	r3, #0
  }
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003dae:	f107 030c 	add.w	r3, r7, #12
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fd fd78 	bl	80018a8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f107 020c 	add.w	r2, r7, #12
 8003dc2:	210a      	movs	r1, #10
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4798      	blx	r3
    rt_time = hardware_.time();
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fe fd94 	bl	80028fa <_ZN13STM32Hardware4timeEv>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
  }
 8003dda:	bf00      	nop
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003de2:	b590      	push	{r4, r7, lr}
 8003de4:	b08b      	sub	sp, #44	; 0x2c
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003dea:	f107 030c 	add.w	r3, r7, #12
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fd fe4a 	bl	8001a88 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003df4:	2300      	movs	r3, #0
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	2b18      	cmp	r3, #24
 8003dfc:	dc5b      	bgt.n	8003eb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e02:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d04f      	beq.n	8003eae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e12:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e24:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e34:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e3c:	6859      	ldr	r1, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e42:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3308      	adds	r3, #8
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4608      	mov	r0, r1
 8003e54:	4798      	blx	r3
 8003e56:	4603      	mov	r3, r0
 8003e58:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5e:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e66:	6859      	ldr	r1, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6c:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	4798      	blx	r3
 8003e80:	4603      	mov	r3, r0
 8003e82:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e88:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681c      	ldr	r4, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e94:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fe fb54 	bl	800254a <_ZN3ros9Publisher15getEndpointTypeEv>
 8003ea2:	4601      	mov	r1, r0
 8003ea4:	f107 030c 	add.w	r3, r7, #12
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb4:	e7a0      	b.n	8003df8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	2b18      	cmp	r3, #24
 8003ebe:	dc68      	bgt.n	8003f92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d05b      	beq.n	8003f8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3308      	adds	r3, #8
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4608      	mov	r0, r1
 8003f1c:	4798      	blx	r3
 8003f1e:	4603      	mov	r3, r0
 8003f20:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	6859      	ldr	r1, [r3, #4]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4608      	mov	r0, r1
 8003f46:	4798      	blx	r3
 8003f48:	4603      	mov	r3, r0
 8003f4a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f50:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681c      	ldr	r4, [r3, #0]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	6859      	ldr	r1, [r3, #4]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3304      	adds	r3, #4
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4608      	mov	r0, r1
 8003f7c:	4798      	blx	r3
 8003f7e:	4601      	mov	r1, r0
 8003f80:	f107 030c 	add.w	r3, r7, #12
 8003f84:	461a      	mov	r2, r3
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f90:	e793      	b.n	8003eba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
  }
 8003f9e:	bf00      	nop
 8003fa0:	372c      	adds	r7, #44	; 0x2c
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd90      	pop	{r4, r7, pc}
	...

08003fa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003fb2:	f107 0308 	add.w	r3, r7, #8
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fd fc76 	bl	80018a8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe fc9a 	bl	80028fa <_ZN13STM32Hardware4timeEv>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003fd2:	f107 0308 	add.w	r3, r7, #8
 8003fd6:	6839      	ldr	r1, [r7, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fd fcd5 	bl	8001988 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	4916      	ldr	r1, [pc, #88]	; (800403c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003fe4:	fba1 1303 	umull	r1, r3, r1, r3
 8003fe8:	099b      	lsrs	r3, r3, #6
 8003fea:	4413      	add	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003fee:	6939      	ldr	r1, [r7, #16]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	4b12      	ldr	r3, [pc, #72]	; (800403c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003ff4:	fba3 0302 	umull	r0, r3, r3, r2
 8003ff8:	099b      	lsrs	r3, r3, #6
 8003ffa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ffe:	fb00 f303 	mul.w	r3, r0, r3
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	4a0e      	ldr	r2, [pc, #56]	; (8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 8004006:	fb02 f303 	mul.w	r3, r2, r3
 800400a:	440b      	add	r3, r1
 800400c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800400e:	f107 0308 	add.w	r3, r7, #8
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f8aa 	bl	8004170 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3304      	adds	r3, #4
 8004020:	4618      	mov	r0, r3
 8004022:	f7fe fc6a 	bl	80028fa <_ZN13STM32Hardware4timeEv>
 8004026:	4602      	mov	r2, r0
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800402e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
 8004032:	bf00      	nop
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	10624dd3 	.word	0x10624dd3
 8004040:	000f4240 	.word	0x000f4240

08004044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b63      	cmp	r3, #99	; 0x63
 8004054:	dd0b      	ble.n	800406e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800405c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8004060:	f083 0301 	eor.w	r3, r3, #1
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 800406a:	2300      	movs	r3, #0
 800406c:	e079      	b.n	8004162 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	f602 4228 	addw	r2, r2, #3112	; 0xc28
 800407a:	3207      	adds	r2, #7
 800407c:	4611      	mov	r1, r2
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	4798      	blx	r3
 8004082:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	22ff      	movs	r2, #255	; 0xff
 8004088:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[1] = PROTOCOL_VER;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	22fe      	movs	r2, #254	; 0xfe
 8004090:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	b2da      	uxtb	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f883 2c2b 	strb.w	r2, [r3, #3115]	; 0xc2b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f893 2c2a 	ldrb.w	r2, [r3, #3114]	; 0xc2a
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f893 3c2b 	ldrb.w	r3, [r3, #3115]	; 0xc2b
 80040ba:	4413      	add	r3, r2
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	43db      	mvns	r3, r3
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f883 2c2c 	strb.w	r2, [r3, #3116]	; 0xc2c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f883 2c2d 	strb.w	r2, [r3, #3117]	; 0xc2d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	b21b      	sxth	r3, r3
 80040d6:	121b      	asrs	r3, r3, #8
 80040d8:	b21b      	sxth	r3, r3
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f883 2c2e 	strb.w	r2, [r3, #3118]	; 0xc2e

    /* calculate checksum */
    int chk = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80040e6:	2305      	movs	r3, #5
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	3306      	adds	r3, #6
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	dc0d      	bgt.n	8004110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	4413      	add	r3, r2
 80040fa:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	4413      	add	r3, r2
 8004106:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	3301      	adds	r3, #1
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	e7ec      	b.n	80040ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	3307      	adds	r3, #7
 8004114:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	425a      	negs	r2, r3
 800411a:	b2db      	uxtb	r3, r3
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	bf58      	it	pl
 8004120:	4253      	negpl	r3, r2
 8004122:	b2da      	uxtb	r2, r3
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	1c59      	adds	r1, r3, #1
 8004128:	6179      	str	r1, [r7, #20]
 800412a:	43d2      	mvns	r2, r2
 800412c:	b2d1      	uxtb	r1, r2
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4413      	add	r3, r2
 8004132:	460a      	mov	r2, r1
 8004134:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28

    if (l <= OUTPUT_SIZE)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413e:	dc0a      	bgt.n	8004156 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x112>
    {
      hardware_.write(message_out, l);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	1d18      	adds	r0, r3, #4
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4619      	mov	r1, r3
 800414e:	f7fe fb8d 	bl	800286c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	e005      	b.n	8004162 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004156:	4905      	ldr	r1, [pc, #20]	; (800416c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x128>)
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f849 	bl	80041f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 800415e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004162:	4618      	mov	r0, r3
 8004164:	3720      	adds	r7, #32
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	0800f6c0 	.word	0x0800f6c0

08004170 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3304      	adds	r3, #4
 800417e:	4618      	mov	r0, r3
 8004180:	f7fe fbbb 	bl	80028fa <_ZN13STM32Hardware4timeEv>
 8004184:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4915      	ldr	r1, [pc, #84]	; (80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 800418e:	fba1 1303 	umull	r1, r3, r1, r3
 8004192:	099b      	lsrs	r3, r3, #6
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	1e5a      	subs	r2, r3, #1
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6859      	ldr	r1, [r3, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 80041a6:	fba3 0302 	umull	r0, r3, r3, r2
 80041aa:	099b      	lsrs	r3, r3, #6
 80041ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041b0:	fb00 f303 	mul.w	r3, r0, r3
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 80041b8:	fb02 f303 	mul.w	r3, r2, r3
 80041bc:	1aca      	subs	r2, r1, r3
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 80041c0:	4413      	add	r3, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	f8c2 3820 	str.w	r3, [r2, #2080]	; 0x820
    normalizeSecNSec(sec_offset, nsec_offset);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f603 021c 	addw	r2, r3, #2076	; 0x81c
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80041d4:	4619      	mov	r1, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	f7fc fa24 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80041dc:	bf00      	nop
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	10624dd3 	.word	0x10624dd3
 80041e8:	000f4240 	.word	0x000f4240
 80041ec:	3b9aca00 	.word	0x3b9aca00

080041f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	2103      	movs	r1, #3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f804 	bl	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	460b      	mov	r3, r1
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800421a:	f107 0314 	add.w	r3, r7, #20
 800421e:	4618      	mov	r0, r3
 8004220:	f7fd fdf6 	bl	8001e10 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004224:	7afb      	ldrb	r3, [r7, #11]
 8004226:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f107 0214 	add.w	r2, r7, #20
 8004236:	2107      	movs	r1, #7
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	4798      	blx	r3
  }
 800423c:	bf00      	nop
 800423e:	3720      	adds	r7, #32
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <_Z41__static_initialization_and_destruction_0ii>:
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d116      	bne.n	8004282 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800425a:	4293      	cmp	r3, r2
 800425c:	d111      	bne.n	8004282 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 800425e:	480b      	ldr	r0, [pc, #44]	; (800428c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004260:	f7ff f9d6 	bl	8003610 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
geometry_msgs::Twist real_speed;
 8004264:	480a      	ldr	r0, [pc, #40]	; (8004290 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004266:	f7ff f869 	bl	800333c <_ZN13geometry_msgs5TwistC1Ev>
ros::Subscriber<geometry_msgs::Twist> vel_sub("/cmd_vel", vel_callback);
 800426a:	2301      	movs	r3, #1
 800426c:	4a09      	ldr	r2, [pc, #36]	; (8004294 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800426e:	490a      	ldr	r1, [pc, #40]	; (8004298 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004270:	480a      	ldr	r0, [pc, #40]	; (800429c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004272:	f7ff fa73 	bl	800375c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher odom_pub("Toposition", &real_speed);
 8004276:	2300      	movs	r3, #0
 8004278:	4a05      	ldr	r2, [pc, #20]	; (8004290 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800427a:	4909      	ldr	r1, [pc, #36]	; (80042a0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800427c:	4809      	ldr	r0, [pc, #36]	; (80042a4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800427e:	f7fe f939 	bl	80024f4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	2400053c 	.word	0x2400053c
 8004290:	24001680 	.word	0x24001680
 8004294:	08003445 	.word	0x08003445
 8004298:	0800f6fc 	.word	0x0800f6fc
 800429c:	240016c8 	.word	0x240016c8
 80042a0:	0800f708 	.word	0x0800f708
 80042a4:	24001728 	.word	0x24001728

080042a8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3310      	adds	r3, #16
 80042b6:	6839      	ldr	r1, [r7, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff f881 	bl	80033c0 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	3210      	adds	r2, #16
 80042c6:	4610      	mov	r0, r2
 80042c8:	4798      	blx	r3
  }
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 80042de:	4618      	mov	r0, r3
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3310      	adds	r3, #16
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff f888 	bl	800340c <_ZN13geometry_msgs5Twist7getTypeEv>
 80042fc:	4603      	mov	r3, r0
  }
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3310      	adds	r3, #16
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff f888 	bl	8003428 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004318:	4603      	mov	r3, r0
  }
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
    return configured_;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004330:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
  };
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <_GLOBAL__sub_I__Z12vel_callbackRKN13geometry_msgs5TwistE>:
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
 8004344:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004348:	2001      	movs	r0, #1
 800434a:	f7ff ff7b 	bl	8004244 <_Z41__static_initialization_and_destruction_0ii>
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004356:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <HAL_MspInit+0x30>)
 8004358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800435c:	4a08      	ldr	r2, [pc, #32]	; (8004380 <HAL_MspInit+0x30>)
 800435e:	f043 0302 	orr.w	r3, r3, #2
 8004362:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <HAL_MspInit+0x30>)
 8004368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	607b      	str	r3, [r7, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	58024400 	.word	0x58024400

08004384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004388:	e7fe      	b.n	8004388 <NMI_Handler+0x4>

0800438a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800438a:	b480      	push	{r7}
 800438c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800438e:	e7fe      	b.n	800438e <HardFault_Handler+0x4>

08004390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004394:	e7fe      	b.n	8004394 <MemManage_Handler+0x4>

08004396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004396:	b480      	push	{r7}
 8004398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800439a:	e7fe      	b.n	800439a <BusFault_Handler+0x4>

0800439c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043a0:	e7fe      	b.n	80043a0 <UsageFault_Handler+0x4>

080043a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043a2:	b480      	push	{r7}
 80043a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043a6:	bf00      	nop
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043be:	b480      	push	{r7}
 80043c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043c2:	bf00      	nop
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043d0:	f000 ffa0 	bl	8005314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043d4:	bf00      	nop
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80043dc:	4802      	ldr	r0, [pc, #8]	; (80043e8 <DMA1_Stream0_IRQHandler+0x10>)
 80043de:	f002 fdd9 	bl	8006f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80043e2:	bf00      	nop
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	24001a04 	.word	0x24001a04

080043ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80043f0:	4802      	ldr	r0, [pc, #8]	; (80043fc <DMA1_Stream1_IRQHandler+0x10>)
 80043f2:	f002 fdcf 	bl	8006f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	24001a7c 	.word	0x24001a7c

08004400 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004404:	4802      	ldr	r0, [pc, #8]	; (8004410 <TIM2_IRQHandler+0x10>)
 8004406:	f007 fc83 	bl	800bd10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800440a:	bf00      	nop
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	2400175c 	.word	0x2400175c

08004414 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004418:	4802      	ldr	r0, [pc, #8]	; (8004424 <TIM3_IRQHandler+0x10>)
 800441a:	f007 fc79 	bl	800bd10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800441e:	bf00      	nop
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	240017a8 	.word	0x240017a8

08004428 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800442c:	4802      	ldr	r0, [pc, #8]	; (8004438 <TIM4_IRQHandler+0x10>)
 800442e:	f007 fc6f 	bl	800bd10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004432:	bf00      	nop
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	240017f4 	.word	0x240017f4

0800443c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004440:	4802      	ldr	r0, [pc, #8]	; (800444c <USART1_IRQHandler+0x10>)
 8004442:	f008 feaf 	bl	800d1a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004446:	bf00      	nop
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	24001970 	.word	0x24001970

08004450 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004454:	4802      	ldr	r0, [pc, #8]	; (8004460 <TIM5_IRQHandler+0x10>)
 8004456:	f007 fc5b 	bl	800bd10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	24001840 	.word	0x24001840

08004464 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8004468:	4802      	ldr	r0, [pc, #8]	; (8004474 <TIM23_IRQHandler+0x10>)
 800446a:	f007 fc51 	bl	800bd10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 800446e:	bf00      	nop
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	24001924 	.word	0x24001924

08004478 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  return 1;
 800447c:	2301      	movs	r3, #1
}
 800447e:	4618      	mov	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <_kill>:

int _kill(int pid, int sig)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004492:	f00a fea3 	bl	800f1dc <__errno>
 8004496:	4603      	mov	r3, r0
 8004498:	2216      	movs	r2, #22
 800449a:	601a      	str	r2, [r3, #0]
  return -1;
 800449c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <_exit>:

void _exit (int status)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80044b0:	f04f 31ff 	mov.w	r1, #4294967295
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff ffe7 	bl	8004488 <_kill>
  while (1) {}    /* Make sure we hang here */
 80044ba:	e7fe      	b.n	80044ba <_exit+0x12>

080044bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044c4:	4a14      	ldr	r2, [pc, #80]	; (8004518 <_sbrk+0x5c>)
 80044c6:	4b15      	ldr	r3, [pc, #84]	; (800451c <_sbrk+0x60>)
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044d0:	4b13      	ldr	r3, [pc, #76]	; (8004520 <_sbrk+0x64>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d102      	bne.n	80044de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044d8:	4b11      	ldr	r3, [pc, #68]	; (8004520 <_sbrk+0x64>)
 80044da:	4a12      	ldr	r2, [pc, #72]	; (8004524 <_sbrk+0x68>)
 80044dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044de:	4b10      	ldr	r3, [pc, #64]	; (8004520 <_sbrk+0x64>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4413      	add	r3, r2
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d207      	bcs.n	80044fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044ec:	f00a fe76 	bl	800f1dc <__errno>
 80044f0:	4603      	mov	r3, r0
 80044f2:	220c      	movs	r2, #12
 80044f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044f6:	f04f 33ff 	mov.w	r3, #4294967295
 80044fa:	e009      	b.n	8004510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044fc:	4b08      	ldr	r3, [pc, #32]	; (8004520 <_sbrk+0x64>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004502:	4b07      	ldr	r3, [pc, #28]	; (8004520 <_sbrk+0x64>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4413      	add	r3, r2
 800450a:	4a05      	ldr	r2, [pc, #20]	; (8004520 <_sbrk+0x64>)
 800450c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800450e:	68fb      	ldr	r3, [r7, #12]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	24050000 	.word	0x24050000
 800451c:	00000400 	.word	0x00000400
 8004520:	24001758 	.word	0x24001758
 8004524:	24001b08 	.word	0x24001b08

08004528 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800452c:	4b32      	ldr	r3, [pc, #200]	; (80045f8 <SystemInit+0xd0>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004532:	4a31      	ldr	r2, [pc, #196]	; (80045f8 <SystemInit+0xd0>)
 8004534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800453c:	4b2f      	ldr	r3, [pc, #188]	; (80045fc <SystemInit+0xd4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	2b06      	cmp	r3, #6
 8004546:	d807      	bhi.n	8004558 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004548:	4b2c      	ldr	r3, [pc, #176]	; (80045fc <SystemInit+0xd4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f023 030f 	bic.w	r3, r3, #15
 8004550:	4a2a      	ldr	r2, [pc, #168]	; (80045fc <SystemInit+0xd4>)
 8004552:	f043 0307 	orr.w	r3, r3, #7
 8004556:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004558:	4b29      	ldr	r3, [pc, #164]	; (8004600 <SystemInit+0xd8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a28      	ldr	r2, [pc, #160]	; (8004600 <SystemInit+0xd8>)
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004564:	4b26      	ldr	r3, [pc, #152]	; (8004600 <SystemInit+0xd8>)
 8004566:	2200      	movs	r2, #0
 8004568:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800456a:	4b25      	ldr	r3, [pc, #148]	; (8004600 <SystemInit+0xd8>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	4924      	ldr	r1, [pc, #144]	; (8004600 <SystemInit+0xd8>)
 8004570:	4b24      	ldr	r3, [pc, #144]	; (8004604 <SystemInit+0xdc>)
 8004572:	4013      	ands	r3, r2
 8004574:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004576:	4b21      	ldr	r3, [pc, #132]	; (80045fc <SystemInit+0xd4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d007      	beq.n	8004592 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004582:	4b1e      	ldr	r3, [pc, #120]	; (80045fc <SystemInit+0xd4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 030f 	bic.w	r3, r3, #15
 800458a:	4a1c      	ldr	r2, [pc, #112]	; (80045fc <SystemInit+0xd4>)
 800458c:	f043 0307 	orr.w	r3, r3, #7
 8004590:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004592:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <SystemInit+0xd8>)
 8004594:	2200      	movs	r2, #0
 8004596:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004598:	4b19      	ldr	r3, [pc, #100]	; (8004600 <SystemInit+0xd8>)
 800459a:	2200      	movs	r2, #0
 800459c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800459e:	4b18      	ldr	r3, [pc, #96]	; (8004600 <SystemInit+0xd8>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80045a4:	4b16      	ldr	r3, [pc, #88]	; (8004600 <SystemInit+0xd8>)
 80045a6:	4a18      	ldr	r2, [pc, #96]	; (8004608 <SystemInit+0xe0>)
 80045a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80045aa:	4b15      	ldr	r3, [pc, #84]	; (8004600 <SystemInit+0xd8>)
 80045ac:	4a17      	ldr	r2, [pc, #92]	; (800460c <SystemInit+0xe4>)
 80045ae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80045b0:	4b13      	ldr	r3, [pc, #76]	; (8004600 <SystemInit+0xd8>)
 80045b2:	4a17      	ldr	r2, [pc, #92]	; (8004610 <SystemInit+0xe8>)
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80045b6:	4b12      	ldr	r3, [pc, #72]	; (8004600 <SystemInit+0xd8>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80045bc:	4b10      	ldr	r3, [pc, #64]	; (8004600 <SystemInit+0xd8>)
 80045be:	4a14      	ldr	r2, [pc, #80]	; (8004610 <SystemInit+0xe8>)
 80045c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80045c2:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <SystemInit+0xd8>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80045c8:	4b0d      	ldr	r3, [pc, #52]	; (8004600 <SystemInit+0xd8>)
 80045ca:	4a11      	ldr	r2, [pc, #68]	; (8004610 <SystemInit+0xe8>)
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80045ce:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <SystemInit+0xd8>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80045d4:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <SystemInit+0xd8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a09      	ldr	r2, [pc, #36]	; (8004600 <SystemInit+0xd8>)
 80045da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80045e0:	4b07      	ldr	r3, [pc, #28]	; (8004600 <SystemInit+0xd8>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80045e6:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <SystemInit+0xec>)
 80045e8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80045ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80045ee:	bf00      	nop
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	e000ed00 	.word	0xe000ed00
 80045fc:	52002000 	.word	0x52002000
 8004600:	58024400 	.word	0x58024400
 8004604:	eaf6ed7f 	.word	0xeaf6ed7f
 8004608:	02020200 	.word	0x02020200
 800460c:	01ff0000 	.word	0x01ff0000
 8004610:	01010280 	.word	0x01010280
 8004614:	52004000 	.word	0x52004000

08004618 <MX_TIM2_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim23;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08c      	sub	sp, #48	; 0x30
 800461c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800461e:	f107 030c 	add.w	r3, r7, #12
 8004622:	2224      	movs	r2, #36	; 0x24
 8004624:	2100      	movs	r1, #0
 8004626:	4618      	mov	r0, r3
 8004628:	f00a fe10 	bl	800f24c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800462c:	463b      	mov	r3, r7
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	605a      	str	r2, [r3, #4]
 8004634:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004636:	4b21      	ldr	r3, [pc, #132]	; (80046bc <MX_TIM2_Init+0xa4>)
 8004638:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800463c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800463e:	4b1f      	ldr	r3, [pc, #124]	; (80046bc <MX_TIM2_Init+0xa4>)
 8004640:	2200      	movs	r2, #0
 8004642:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004644:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <MX_TIM2_Init+0xa4>)
 8004646:	2200      	movs	r2, #0
 8004648:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800464a:	4b1c      	ldr	r3, [pc, #112]	; (80046bc <MX_TIM2_Init+0xa4>)
 800464c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004650:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004652:	4b1a      	ldr	r3, [pc, #104]	; (80046bc <MX_TIM2_Init+0xa4>)
 8004654:	2200      	movs	r2, #0
 8004656:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004658:	4b18      	ldr	r3, [pc, #96]	; (80046bc <MX_TIM2_Init+0xa4>)
 800465a:	2200      	movs	r2, #0
 800465c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800465e:	2303      	movs	r3, #3
 8004660:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004662:	2300      	movs	r3, #0
 8004664:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004666:	2301      	movs	r3, #1
 8004668:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800466e:	2300      	movs	r3, #0
 8004670:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004672:	2300      	movs	r3, #0
 8004674:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004676:	2301      	movs	r3, #1
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800467a:	2300      	movs	r3, #0
 800467c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800467e:	2300      	movs	r3, #0
 8004680:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004682:	f107 030c 	add.w	r3, r7, #12
 8004686:	4619      	mov	r1, r3
 8004688:	480c      	ldr	r0, [pc, #48]	; (80046bc <MX_TIM2_Init+0xa4>)
 800468a:	f007 fa0d 	bl	800baa8 <HAL_TIM_Encoder_Init>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004694:	f7fd f8e2 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004698:	2300      	movs	r3, #0
 800469a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800469c:	2300      	movs	r3, #0
 800469e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80046a0:	463b      	mov	r3, r7
 80046a2:	4619      	mov	r1, r3
 80046a4:	4805      	ldr	r0, [pc, #20]	; (80046bc <MX_TIM2_Init+0xa4>)
 80046a6:	f008 fac7 	bl	800cc38 <HAL_TIMEx_MasterConfigSynchronization>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80046b0:	f7fd f8d4 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80046b4:	bf00      	nop
 80046b6:	3730      	adds	r7, #48	; 0x30
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	2400175c 	.word	0x2400175c

080046c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08c      	sub	sp, #48	; 0x30
 80046c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80046c6:	f107 030c 	add.w	r3, r7, #12
 80046ca:	2224      	movs	r2, #36	; 0x24
 80046cc:	2100      	movs	r1, #0
 80046ce:	4618      	mov	r0, r3
 80046d0:	f00a fdbc 	bl	800f24c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046d4:	463b      	mov	r3, r7
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	605a      	str	r2, [r3, #4]
 80046dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80046de:	4b21      	ldr	r3, [pc, #132]	; (8004764 <MX_TIM3_Init+0xa4>)
 80046e0:	4a21      	ldr	r2, [pc, #132]	; (8004768 <MX_TIM3_Init+0xa8>)
 80046e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80046e4:	4b1f      	ldr	r3, [pc, #124]	; (8004764 <MX_TIM3_Init+0xa4>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046ea:	4b1e      	ldr	r3, [pc, #120]	; (8004764 <MX_TIM3_Init+0xa4>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80046f0:	4b1c      	ldr	r3, [pc, #112]	; (8004764 <MX_TIM3_Init+0xa4>)
 80046f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046f8:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <MX_TIM3_Init+0xa4>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046fe:	4b19      	ldr	r3, [pc, #100]	; (8004764 <MX_TIM3_Init+0xa4>)
 8004700:	2200      	movs	r2, #0
 8004702:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004704:	2303      	movs	r3, #3
 8004706:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800470c:	2301      	movs	r3, #1
 800470e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004710:	2300      	movs	r3, #0
 8004712:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004714:	2300      	movs	r3, #0
 8004716:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004718:	2300      	movs	r3, #0
 800471a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800471c:	2301      	movs	r3, #1
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004720:	2300      	movs	r3, #0
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004728:	f107 030c 	add.w	r3, r7, #12
 800472c:	4619      	mov	r1, r3
 800472e:	480d      	ldr	r0, [pc, #52]	; (8004764 <MX_TIM3_Init+0xa4>)
 8004730:	f007 f9ba 	bl	800baa8 <HAL_TIM_Encoder_Init>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800473a:	f7fd f88f 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800473e:	2300      	movs	r3, #0
 8004740:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004742:	2300      	movs	r3, #0
 8004744:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004746:	463b      	mov	r3, r7
 8004748:	4619      	mov	r1, r3
 800474a:	4806      	ldr	r0, [pc, #24]	; (8004764 <MX_TIM3_Init+0xa4>)
 800474c:	f008 fa74 	bl	800cc38 <HAL_TIMEx_MasterConfigSynchronization>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8004756:	f7fd f881 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800475a:	bf00      	nop
 800475c:	3730      	adds	r7, #48	; 0x30
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	240017a8 	.word	0x240017a8
 8004768:	40000400 	.word	0x40000400

0800476c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08c      	sub	sp, #48	; 0x30
 8004770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004772:	f107 030c 	add.w	r3, r7, #12
 8004776:	2224      	movs	r2, #36	; 0x24
 8004778:	2100      	movs	r1, #0
 800477a:	4618      	mov	r0, r3
 800477c:	f00a fd66 	bl	800f24c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004780:	463b      	mov	r3, r7
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	605a      	str	r2, [r3, #4]
 8004788:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800478a:	4b21      	ldr	r3, [pc, #132]	; (8004810 <MX_TIM4_Init+0xa4>)
 800478c:	4a21      	ldr	r2, [pc, #132]	; (8004814 <MX_TIM4_Init+0xa8>)
 800478e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004790:	4b1f      	ldr	r3, [pc, #124]	; (8004810 <MX_TIM4_Init+0xa4>)
 8004792:	2200      	movs	r2, #0
 8004794:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004796:	4b1e      	ldr	r3, [pc, #120]	; (8004810 <MX_TIM4_Init+0xa4>)
 8004798:	2200      	movs	r2, #0
 800479a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800479c:	4b1c      	ldr	r3, [pc, #112]	; (8004810 <MX_TIM4_Init+0xa4>)
 800479e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047a4:	4b1a      	ldr	r3, [pc, #104]	; (8004810 <MX_TIM4_Init+0xa4>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047aa:	4b19      	ldr	r3, [pc, #100]	; (8004810 <MX_TIM4_Init+0xa4>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80047b0:	2303      	movs	r3, #3
 80047b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80047b4:	2300      	movs	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80047b8:	2301      	movs	r3, #1
 80047ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80047bc:	2300      	movs	r3, #0
 80047be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80047c4:	2300      	movs	r3, #0
 80047c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80047c8:	2301      	movs	r3, #1
 80047ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80047cc:	2300      	movs	r3, #0
 80047ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80047d4:	f107 030c 	add.w	r3, r7, #12
 80047d8:	4619      	mov	r1, r3
 80047da:	480d      	ldr	r0, [pc, #52]	; (8004810 <MX_TIM4_Init+0xa4>)
 80047dc:	f007 f964 	bl	800baa8 <HAL_TIM_Encoder_Init>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80047e6:	f7fd f839 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047ea:	2300      	movs	r3, #0
 80047ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80047f2:	463b      	mov	r3, r7
 80047f4:	4619      	mov	r1, r3
 80047f6:	4806      	ldr	r0, [pc, #24]	; (8004810 <MX_TIM4_Init+0xa4>)
 80047f8:	f008 fa1e 	bl	800cc38 <HAL_TIMEx_MasterConfigSynchronization>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8004802:	f7fd f82b 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004806:	bf00      	nop
 8004808:	3730      	adds	r7, #48	; 0x30
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	240017f4 	.word	0x240017f4
 8004814:	40000800 	.word	0x40000800

08004818 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08c      	sub	sp, #48	; 0x30
 800481c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800481e:	f107 030c 	add.w	r3, r7, #12
 8004822:	2224      	movs	r2, #36	; 0x24
 8004824:	2100      	movs	r1, #0
 8004826:	4618      	mov	r0, r3
 8004828:	f00a fd10 	bl	800f24c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800482c:	463b      	mov	r3, r7
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	605a      	str	r2, [r3, #4]
 8004834:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004836:	4b21      	ldr	r3, [pc, #132]	; (80048bc <MX_TIM5_Init+0xa4>)
 8004838:	4a21      	ldr	r2, [pc, #132]	; (80048c0 <MX_TIM5_Init+0xa8>)
 800483a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800483c:	4b1f      	ldr	r3, [pc, #124]	; (80048bc <MX_TIM5_Init+0xa4>)
 800483e:	2200      	movs	r2, #0
 8004840:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004842:	4b1e      	ldr	r3, [pc, #120]	; (80048bc <MX_TIM5_Init+0xa4>)
 8004844:	2200      	movs	r2, #0
 8004846:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8004848:	4b1c      	ldr	r3, [pc, #112]	; (80048bc <MX_TIM5_Init+0xa4>)
 800484a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800484e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004850:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <MX_TIM5_Init+0xa4>)
 8004852:	2200      	movs	r2, #0
 8004854:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004856:	4b19      	ldr	r3, [pc, #100]	; (80048bc <MX_TIM5_Init+0xa4>)
 8004858:	2200      	movs	r2, #0
 800485a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800485c:	2303      	movs	r3, #3
 800485e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004860:	2300      	movs	r3, #0
 8004862:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004864:	2301      	movs	r3, #1
 8004866:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004868:	2300      	movs	r3, #0
 800486a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004870:	2300      	movs	r3, #0
 8004872:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004874:	2301      	movs	r3, #1
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004878:	2300      	movs	r3, #0
 800487a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800487c:	2300      	movs	r3, #0
 800487e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8004880:	f107 030c 	add.w	r3, r7, #12
 8004884:	4619      	mov	r1, r3
 8004886:	480d      	ldr	r0, [pc, #52]	; (80048bc <MX_TIM5_Init+0xa4>)
 8004888:	f007 f90e 	bl	800baa8 <HAL_TIM_Encoder_Init>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8004892:	f7fc ffe3 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004896:	2300      	movs	r3, #0
 8004898:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800489a:	2300      	movs	r3, #0
 800489c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800489e:	463b      	mov	r3, r7
 80048a0:	4619      	mov	r1, r3
 80048a2:	4806      	ldr	r0, [pc, #24]	; (80048bc <MX_TIM5_Init+0xa4>)
 80048a4:	f008 f9c8 	bl	800cc38 <HAL_TIMEx_MasterConfigSynchronization>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80048ae:	f7fc ffd5 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80048b2:	bf00      	nop
 80048b4:	3730      	adds	r7, #48	; 0x30
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	24001840 	.word	0x24001840
 80048c0:	40000c00 	.word	0x40000c00

080048c4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08a      	sub	sp, #40	; 0x28
 80048c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048ca:	f107 031c 	add.w	r3, r7, #28
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	605a      	str	r2, [r3, #4]
 80048d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048d6:	463b      	mov	r3, r7
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	605a      	str	r2, [r3, #4]
 80048de:	609a      	str	r2, [r3, #8]
 80048e0:	60da      	str	r2, [r3, #12]
 80048e2:	611a      	str	r2, [r3, #16]
 80048e4:	615a      	str	r2, [r3, #20]
 80048e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80048e8:	4b27      	ldr	r3, [pc, #156]	; (8004988 <MX_TIM12_Init+0xc4>)
 80048ea:	4a28      	ldr	r2, [pc, #160]	; (800498c <MX_TIM12_Init+0xc8>)
 80048ec:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80048ee:	4b26      	ldr	r3, [pc, #152]	; (8004988 <MX_TIM12_Init+0xc4>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048f4:	4b24      	ldr	r3, [pc, #144]	; (8004988 <MX_TIM12_Init+0xc4>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 3000;
 80048fa:	4b23      	ldr	r3, [pc, #140]	; (8004988 <MX_TIM12_Init+0xc4>)
 80048fc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004900:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004902:	4b21      	ldr	r3, [pc, #132]	; (8004988 <MX_TIM12_Init+0xc4>)
 8004904:	2200      	movs	r2, #0
 8004906:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004908:	4b1f      	ldr	r3, [pc, #124]	; (8004988 <MX_TIM12_Init+0xc4>)
 800490a:	2200      	movs	r2, #0
 800490c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800490e:	481e      	ldr	r0, [pc, #120]	; (8004988 <MX_TIM12_Init+0xc4>)
 8004910:	f006 ff56 	bl	800b7c0 <HAL_TIM_PWM_Init>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 800491a:	f7fc ff9f 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004922:	2300      	movs	r3, #0
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8004926:	f107 031c 	add.w	r3, r7, #28
 800492a:	4619      	mov	r1, r3
 800492c:	4816      	ldr	r0, [pc, #88]	; (8004988 <MX_TIM12_Init+0xc4>)
 800492e:	f008 f983 	bl	800cc38 <HAL_TIMEx_MasterConfigSynchronization>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8004938:	f7fc ff90 	bl	800185c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800493c:	2360      	movs	r3, #96	; 0x60
 800493e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004944:	2300      	movs	r3, #0
 8004946:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800494c:	463b      	mov	r3, r7
 800494e:	2200      	movs	r2, #0
 8004950:	4619      	mov	r1, r3
 8004952:	480d      	ldr	r0, [pc, #52]	; (8004988 <MX_TIM12_Init+0xc4>)
 8004954:	f007 fafc 	bl	800bf50 <HAL_TIM_PWM_ConfigChannel>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 800495e:	f7fc ff7d 	bl	800185c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004962:	463b      	mov	r3, r7
 8004964:	2204      	movs	r2, #4
 8004966:	4619      	mov	r1, r3
 8004968:	4807      	ldr	r0, [pc, #28]	; (8004988 <MX_TIM12_Init+0xc4>)
 800496a:	f007 faf1 	bl	800bf50 <HAL_TIM_PWM_ConfigChannel>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <MX_TIM12_Init+0xb4>
  {
    Error_Handler();
 8004974:	f7fc ff72 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8004978:	4803      	ldr	r0, [pc, #12]	; (8004988 <MX_TIM12_Init+0xc4>)
 800497a:	f000 fa79 	bl	8004e70 <HAL_TIM_MspPostInit>

}
 800497e:	bf00      	nop
 8004980:	3728      	adds	r7, #40	; 0x28
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	2400188c 	.word	0x2400188c
 800498c:	40001800 	.word	0x40001800

08004990 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b098      	sub	sp, #96	; 0x60
 8004994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004996:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	605a      	str	r2, [r3, #4]
 80049a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	605a      	str	r2, [r3, #4]
 80049ac:	609a      	str	r2, [r3, #8]
 80049ae:	60da      	str	r2, [r3, #12]
 80049b0:	611a      	str	r2, [r3, #16]
 80049b2:	615a      	str	r2, [r3, #20]
 80049b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80049b6:	1d3b      	adds	r3, r7, #4
 80049b8:	2234      	movs	r2, #52	; 0x34
 80049ba:	2100      	movs	r1, #0
 80049bc:	4618      	mov	r0, r3
 80049be:	f00a fc45 	bl	800f24c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80049c2:	4b3a      	ldr	r3, [pc, #232]	; (8004aac <MX_TIM15_Init+0x11c>)
 80049c4:	4a3a      	ldr	r2, [pc, #232]	; (8004ab0 <MX_TIM15_Init+0x120>)
 80049c6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80049c8:	4b38      	ldr	r3, [pc, #224]	; (8004aac <MX_TIM15_Init+0x11c>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049ce:	4b37      	ldr	r3, [pc, #220]	; (8004aac <MX_TIM15_Init+0x11c>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3000;
 80049d4:	4b35      	ldr	r3, [pc, #212]	; (8004aac <MX_TIM15_Init+0x11c>)
 80049d6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80049da:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049dc:	4b33      	ldr	r3, [pc, #204]	; (8004aac <MX_TIM15_Init+0x11c>)
 80049de:	2200      	movs	r2, #0
 80049e0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80049e2:	4b32      	ldr	r3, [pc, #200]	; (8004aac <MX_TIM15_Init+0x11c>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049e8:	4b30      	ldr	r3, [pc, #192]	; (8004aac <MX_TIM15_Init+0x11c>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80049ee:	482f      	ldr	r0, [pc, #188]	; (8004aac <MX_TIM15_Init+0x11c>)
 80049f0:	f006 fee6 	bl	800b7c0 <HAL_TIM_PWM_Init>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80049fa:	f7fc ff2f 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049fe:	2300      	movs	r3, #0
 8004a00:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004a06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4827      	ldr	r0, [pc, #156]	; (8004aac <MX_TIM15_Init+0x11c>)
 8004a0e:	f008 f913 	bl	800cc38 <HAL_TIMEx_MasterConfigSynchronization>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8004a18:	f7fc ff20 	bl	800185c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a1c:	2360      	movs	r3, #96	; 0x60
 8004a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a24:	2300      	movs	r3, #0
 8004a26:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a30:	2300      	movs	r3, #0
 8004a32:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a34:	2300      	movs	r3, #0
 8004a36:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	4619      	mov	r1, r3
 8004a40:	481a      	ldr	r0, [pc, #104]	; (8004aac <MX_TIM15_Init+0x11c>)
 8004a42:	f007 fa85 	bl	800bf50 <HAL_TIM_PWM_ConfigChannel>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8004a4c:	f7fc ff06 	bl	800185c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a54:	2204      	movs	r2, #4
 8004a56:	4619      	mov	r1, r3
 8004a58:	4814      	ldr	r0, [pc, #80]	; (8004aac <MX_TIM15_Init+0x11c>)
 8004a5a:	f007 fa79 	bl	800bf50 <HAL_TIM_PWM_ConfigChannel>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8004a64:	f7fc fefa 	bl	800185c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004a74:	2300      	movs	r3, #0
 8004a76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004a7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004a8a:	1d3b      	adds	r3, r7, #4
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4807      	ldr	r0, [pc, #28]	; (8004aac <MX_TIM15_Init+0x11c>)
 8004a90:	f008 f96e 	bl	800cd70 <HAL_TIMEx_ConfigBreakDeadTime>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8004a9a:	f7fc fedf 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8004a9e:	4803      	ldr	r0, [pc, #12]	; (8004aac <MX_TIM15_Init+0x11c>)
 8004aa0:	f000 f9e6 	bl	8004e70 <HAL_TIM_MspPostInit>

}
 8004aa4:	bf00      	nop
 8004aa6:	3760      	adds	r7, #96	; 0x60
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	240018d8 	.word	0x240018d8
 8004ab0:	40014000 	.word	0x40014000

08004ab4 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004aba:	f107 0310 	add.w	r3, r7, #16
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	605a      	str	r2, [r3, #4]
 8004ac4:	609a      	str	r2, [r3, #8]
 8004ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ac8:	1d3b      	adds	r3, r7, #4
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	605a      	str	r2, [r3, #4]
 8004ad0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8004ad2:	4b1d      	ldr	r3, [pc, #116]	; (8004b48 <MX_TIM23_Init+0x94>)
 8004ad4:	4a1d      	ldr	r2, [pc, #116]	; (8004b4c <MX_TIM23_Init+0x98>)
 8004ad6:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 13;
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <MX_TIM23_Init+0x94>)
 8004ada:	220d      	movs	r2, #13
 8004adc:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ade:	4b1a      	ldr	r3, [pc, #104]	; (8004b48 <MX_TIM23_Init+0x94>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 11999;
 8004ae4:	4b18      	ldr	r3, [pc, #96]	; (8004b48 <MX_TIM23_Init+0x94>)
 8004ae6:	f642 62df 	movw	r2, #11999	; 0x2edf
 8004aea:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004aec:	4b16      	ldr	r3, [pc, #88]	; (8004b48 <MX_TIM23_Init+0x94>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004af2:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <MX_TIM23_Init+0x94>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8004af8:	4813      	ldr	r0, [pc, #76]	; (8004b48 <MX_TIM23_Init+0x94>)
 8004afa:	f006 fd83 	bl	800b604 <HAL_TIM_Base_Init>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <MX_TIM23_Init+0x54>
  {
    Error_Handler();
 8004b04:	f7fc feaa 	bl	800185c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8004b0e:	f107 0310 	add.w	r3, r7, #16
 8004b12:	4619      	mov	r1, r3
 8004b14:	480c      	ldr	r0, [pc, #48]	; (8004b48 <MX_TIM23_Init+0x94>)
 8004b16:	f007 fb2f 	bl	800c178 <HAL_TIM_ConfigClockSource>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <MX_TIM23_Init+0x70>
  {
    Error_Handler();
 8004b20:	f7fc fe9c 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b24:	2300      	movs	r3, #0
 8004b26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8004b2c:	1d3b      	adds	r3, r7, #4
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4805      	ldr	r0, [pc, #20]	; (8004b48 <MX_TIM23_Init+0x94>)
 8004b32:	f008 f881 	bl	800cc38 <HAL_TIMEx_MasterConfigSynchronization>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <MX_TIM23_Init+0x8c>
  {
    Error_Handler();
 8004b3c:	f7fc fe8e 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8004b40:	bf00      	nop
 8004b42:	3720      	adds	r7, #32
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	24001924 	.word	0x24001924
 8004b4c:	4000e000 	.word	0x4000e000

08004b50 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b090      	sub	sp, #64	; 0x40
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	605a      	str	r2, [r3, #4]
 8004b62:	609a      	str	r2, [r3, #8]
 8004b64:	60da      	str	r2, [r3, #12]
 8004b66:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b70:	d156      	bne.n	8004c20 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b72:	4b87      	ldr	r3, [pc, #540]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004b74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b78:	4a85      	ldr	r2, [pc, #532]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004b82:	4b83      	ldr	r3, [pc, #524]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004b84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b90:	4b7f      	ldr	r3, [pc, #508]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b96:	4a7e      	ldr	r2, [pc, #504]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004b98:	f043 0301 	orr.w	r3, r3, #1
 8004b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ba0:	4b7b      	ldr	r3, [pc, #492]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	627b      	str	r3, [r7, #36]	; 0x24
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bae:	4b78      	ldr	r3, [pc, #480]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bb4:	4a76      	ldr	r2, [pc, #472]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004bb6:	f043 0302 	orr.w	r3, r3, #2
 8004bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bbe:	4b74      	ldr	r3, [pc, #464]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	623b      	str	r3, [r7, #32]
 8004bca:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004bcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004bde:	2301      	movs	r3, #1
 8004be0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004be2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004be6:	4619      	mov	r1, r3
 8004be8:	486a      	ldr	r0, [pc, #424]	; (8004d94 <HAL_TIM_Encoder_MspInit+0x244>)
 8004bea:	f003 fce5 	bl	80085b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004bee:	2308      	movs	r3, #8
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c06:	4619      	mov	r1, r3
 8004c08:	4863      	ldr	r0, [pc, #396]	; (8004d98 <HAL_TIM_Encoder_MspInit+0x248>)
 8004c0a:	f003 fcd5 	bl	80085b8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2100      	movs	r1, #0
 8004c12:	201c      	movs	r0, #28
 8004c14:	f000 fc9d 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004c18:	201c      	movs	r0, #28
 8004c1a:	f000 fcb4 	bl	8005586 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004c1e:	e0b3      	b.n	8004d88 <HAL_TIM_Encoder_MspInit+0x238>
  else if(tim_encoderHandle->Instance==TIM3)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a5d      	ldr	r2, [pc, #372]	; (8004d9c <HAL_TIM_Encoder_MspInit+0x24c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d136      	bne.n	8004c98 <HAL_TIM_Encoder_MspInit+0x148>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c2a:	4b59      	ldr	r3, [pc, #356]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c30:	4a57      	ldr	r2, [pc, #348]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c32:	f043 0302 	orr.w	r3, r3, #2
 8004c36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004c3a:	4b55      	ldr	r3, [pc, #340]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c48:	4b51      	ldr	r3, [pc, #324]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c4e:	4a50      	ldr	r2, [pc, #320]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c50:	f043 0302 	orr.w	r3, r3, #2
 8004c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c58:	4b4d      	ldr	r3, [pc, #308]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	61bb      	str	r3, [r7, #24]
 8004c64:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004c66:	2330      	movs	r3, #48	; 0x30
 8004c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c72:	2300      	movs	r3, #0
 8004c74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c76:	2302      	movs	r3, #2
 8004c78:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4845      	ldr	r0, [pc, #276]	; (8004d98 <HAL_TIM_Encoder_MspInit+0x248>)
 8004c82:	f003 fc99 	bl	80085b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004c86:	2200      	movs	r2, #0
 8004c88:	2100      	movs	r1, #0
 8004c8a:	201d      	movs	r0, #29
 8004c8c:	f000 fc61 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004c90:	201d      	movs	r0, #29
 8004c92:	f000 fc78 	bl	8005586 <HAL_NVIC_EnableIRQ>
}
 8004c96:	e077      	b.n	8004d88 <HAL_TIM_Encoder_MspInit+0x238>
  else if(tim_encoderHandle->Instance==TIM4)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a40      	ldr	r2, [pc, #256]	; (8004da0 <HAL_TIM_Encoder_MspInit+0x250>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d137      	bne.n	8004d12 <HAL_TIM_Encoder_MspInit+0x1c2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ca2:	4b3b      	ldr	r3, [pc, #236]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ca8:	4a39      	ldr	r2, [pc, #228]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004caa:	f043 0304 	orr.w	r3, r3, #4
 8004cae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004cb2:	4b37      	ldr	r3, [pc, #220]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	617b      	str	r3, [r7, #20]
 8004cbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cc0:	4b33      	ldr	r3, [pc, #204]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cc6:	4a32      	ldr	r2, [pc, #200]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004cc8:	f043 0308 	orr.w	r3, r3, #8
 8004ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004cd0:	4b2f      	ldr	r3, [pc, #188]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004cde:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cec:	2300      	movs	r3, #0
 8004cee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	482a      	ldr	r0, [pc, #168]	; (8004da4 <HAL_TIM_Encoder_MspInit+0x254>)
 8004cfc:	f003 fc5c 	bl	80085b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004d00:	2200      	movs	r2, #0
 8004d02:	2100      	movs	r1, #0
 8004d04:	201e      	movs	r0, #30
 8004d06:	f000 fc24 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004d0a:	201e      	movs	r0, #30
 8004d0c:	f000 fc3b 	bl	8005586 <HAL_NVIC_EnableIRQ>
}
 8004d10:	e03a      	b.n	8004d88 <HAL_TIM_Encoder_MspInit+0x238>
  else if(tim_encoderHandle->Instance==TIM5)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a24      	ldr	r2, [pc, #144]	; (8004da8 <HAL_TIM_Encoder_MspInit+0x258>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d135      	bne.n	8004d88 <HAL_TIM_Encoder_MspInit+0x238>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d1c:	4b1c      	ldr	r3, [pc, #112]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004d1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d22:	4a1b      	ldr	r2, [pc, #108]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004d24:	f043 0308 	orr.w	r3, r3, #8
 8004d28:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d2c:	4b18      	ldr	r3, [pc, #96]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004d2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d3a:	4b15      	ldr	r3, [pc, #84]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d40:	4a13      	ldr	r2, [pc, #76]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d4a:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x240>)
 8004d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	60bb      	str	r3, [r7, #8]
 8004d56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d64:	2300      	movs	r3, #0
 8004d66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d70:	4619      	mov	r1, r3
 8004d72:	4808      	ldr	r0, [pc, #32]	; (8004d94 <HAL_TIM_Encoder_MspInit+0x244>)
 8004d74:	f003 fc20 	bl	80085b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	2032      	movs	r0, #50	; 0x32
 8004d7e:	f000 fbe8 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004d82:	2032      	movs	r0, #50	; 0x32
 8004d84:	f000 fbff 	bl	8005586 <HAL_NVIC_EnableIRQ>
}
 8004d88:	bf00      	nop
 8004d8a:	3740      	adds	r7, #64	; 0x40
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	58024400 	.word	0x58024400
 8004d94:	58020000 	.word	0x58020000
 8004d98:	58020400 	.word	0x58020400
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	40000800 	.word	0x40000800
 8004da4:	58020c00 	.word	0x58020c00
 8004da8:	40000c00 	.word	0x40000c00

08004dac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a16      	ldr	r2, [pc, #88]	; (8004e14 <HAL_TIM_PWM_MspInit+0x68>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d10f      	bne.n	8004dde <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004dbe:	4b16      	ldr	r3, [pc, #88]	; (8004e18 <HAL_TIM_PWM_MspInit+0x6c>)
 8004dc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dc4:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <HAL_TIM_PWM_MspInit+0x6c>)
 8004dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004dce:	4b12      	ldr	r3, [pc, #72]	; (8004e18 <HAL_TIM_PWM_MspInit+0x6c>)
 8004dd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004ddc:	e013      	b.n	8004e06 <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM15)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a0e      	ldr	r2, [pc, #56]	; (8004e1c <HAL_TIM_PWM_MspInit+0x70>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d10e      	bne.n	8004e06 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004de8:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <HAL_TIM_PWM_MspInit+0x6c>)
 8004dea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dee:	4a0a      	ldr	r2, [pc, #40]	; (8004e18 <HAL_TIM_PWM_MspInit+0x6c>)
 8004df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004df8:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <HAL_TIM_PWM_MspInit+0x6c>)
 8004dfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e02:	60bb      	str	r3, [r7, #8]
 8004e04:	68bb      	ldr	r3, [r7, #8]
}
 8004e06:	bf00      	nop
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40001800 	.word	0x40001800
 8004e18:	58024400 	.word	0x58024400
 8004e1c:	40014000 	.word	0x40014000

08004e20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM23)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a0e      	ldr	r2, [pc, #56]	; (8004e68 <HAL_TIM_Base_MspInit+0x48>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d116      	bne.n	8004e60 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* TIM23 clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 8004e32:	4b0e      	ldr	r3, [pc, #56]	; (8004e6c <HAL_TIM_Base_MspInit+0x4c>)
 8004e34:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004e38:	4a0c      	ldr	r2, [pc, #48]	; (8004e6c <HAL_TIM_Base_MspInit+0x4c>)
 8004e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e3e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004e42:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <HAL_TIM_Base_MspInit+0x4c>)
 8004e44:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	68fb      	ldr	r3, [r7, #12]

    /* TIM23 interrupt Init */
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8004e50:	2200      	movs	r2, #0
 8004e52:	2100      	movs	r1, #0
 8004e54:	20a1      	movs	r0, #161	; 0xa1
 8004e56:	f000 fb7c 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8004e5a:	20a1      	movs	r0, #161	; 0xa1
 8004e5c:	f000 fb93 	bl	8005586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }
}
 8004e60:	bf00      	nop
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	4000e000 	.word	0x4000e000
 8004e6c:	58024400 	.word	0x58024400

08004e70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08a      	sub	sp, #40	; 0x28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e78:	f107 0314 	add.w	r3, r7, #20
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	605a      	str	r2, [r3, #4]
 8004e82:	609a      	str	r2, [r3, #8]
 8004e84:	60da      	str	r2, [r3, #12]
 8004e86:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a25      	ldr	r2, [pc, #148]	; (8004f24 <HAL_TIM_MspPostInit+0xb4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d120      	bne.n	8004ed4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e92:	4b25      	ldr	r3, [pc, #148]	; (8004f28 <HAL_TIM_MspPostInit+0xb8>)
 8004e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e98:	4a23      	ldr	r2, [pc, #140]	; (8004f28 <HAL_TIM_MspPostInit+0xb8>)
 8004e9a:	f043 0302 	orr.w	r3, r3, #2
 8004e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ea2:	4b21      	ldr	r3, [pc, #132]	; (8004f28 <HAL_TIM_MspPostInit+0xb8>)
 8004ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004eb0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ec6:	f107 0314 	add.w	r3, r7, #20
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4817      	ldr	r0, [pc, #92]	; (8004f2c <HAL_TIM_MspPostInit+0xbc>)
 8004ece:	f003 fb73 	bl	80085b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004ed2:	e023      	b.n	8004f1c <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM15)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a15      	ldr	r2, [pc, #84]	; (8004f30 <HAL_TIM_MspPostInit+0xc0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d11e      	bne.n	8004f1c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ede:	4b12      	ldr	r3, [pc, #72]	; (8004f28 <HAL_TIM_MspPostInit+0xb8>)
 8004ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ee4:	4a10      	ldr	r2, [pc, #64]	; (8004f28 <HAL_TIM_MspPostInit+0xb8>)
 8004ee6:	f043 0310 	orr.w	r3, r3, #16
 8004eea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004eee:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <HAL_TIM_MspPostInit+0xb8>)
 8004ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ef4:	f003 0310 	and.w	r3, r3, #16
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004efc:	2360      	movs	r3, #96	; 0x60
 8004efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f00:	2302      	movs	r3, #2
 8004f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f04:	2300      	movs	r3, #0
 8004f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f10:	f107 0314 	add.w	r3, r7, #20
 8004f14:	4619      	mov	r1, r3
 8004f16:	4807      	ldr	r0, [pc, #28]	; (8004f34 <HAL_TIM_MspPostInit+0xc4>)
 8004f18:	f003 fb4e 	bl	80085b8 <HAL_GPIO_Init>
}
 8004f1c:	bf00      	nop
 8004f1e:	3728      	adds	r7, #40	; 0x28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40001800 	.word	0x40001800
 8004f28:	58024400 	.word	0x58024400
 8004f2c:	58020400 	.word	0x58020400
 8004f30:	40014000 	.word	0x40014000
 8004f34:	58021000 	.word	0x58021000

08004f38 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004f3c:	4b22      	ldr	r3, [pc, #136]	; (8004fc8 <MX_USART1_UART_Init+0x90>)
 8004f3e:	4a23      	ldr	r2, [pc, #140]	; (8004fcc <MX_USART1_UART_Init+0x94>)
 8004f40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004f42:	4b21      	ldr	r3, [pc, #132]	; (8004fc8 <MX_USART1_UART_Init+0x90>)
 8004f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f4a:	4b1f      	ldr	r3, [pc, #124]	; (8004fc8 <MX_USART1_UART_Init+0x90>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f50:	4b1d      	ldr	r3, [pc, #116]	; (8004fc8 <MX_USART1_UART_Init+0x90>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004f56:	4b1c      	ldr	r3, [pc, #112]	; (8004fc8 <MX_USART1_UART_Init+0x90>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <MX_USART1_UART_Init+0x90>)
 8004f5e:	220c      	movs	r2, #12
 8004f60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f62:	4b19      	ldr	r3, [pc, #100]	; (8004fc8 <MX_USART1_UART_Init+0x90>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f68:	4b17      	ldr	r3, [pc, #92]	; (8004fc8 <MX_USART1_UART_Init+0x90>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f6e:	4b16      	ldr	r3, [pc, #88]	; (8004fc8 <MX_USART1_UART_Init+0x90>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004f74:	4b14      	ldr	r3, [pc, #80]	; (8004fc8 <MX_USART1_UART_Init+0x90>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f7a:	4b13      	ldr	r3, [pc, #76]	; (8004fc8 <MX_USART1_UART_Init+0x90>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f80:	4811      	ldr	r0, [pc, #68]	; (8004fc8 <MX_USART1_UART_Init+0x90>)
 8004f82:	f007 ffb3 	bl	800ceec <HAL_UART_Init>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004f8c:	f7fc fc66 	bl	800185c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f90:	2100      	movs	r1, #0
 8004f92:	480d      	ldr	r0, [pc, #52]	; (8004fc8 <MX_USART1_UART_Init+0x90>)
 8004f94:	f00a f83c 	bl	800f010 <HAL_UARTEx_SetTxFifoThreshold>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004f9e:	f7fc fc5d 	bl	800185c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	4808      	ldr	r0, [pc, #32]	; (8004fc8 <MX_USART1_UART_Init+0x90>)
 8004fa6:	f00a f871 	bl	800f08c <HAL_UARTEx_SetRxFifoThreshold>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004fb0:	f7fc fc54 	bl	800185c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004fb4:	4804      	ldr	r0, [pc, #16]	; (8004fc8 <MX_USART1_UART_Init+0x90>)
 8004fb6:	f009 fff2 	bl	800ef9e <HAL_UARTEx_DisableFifoMode>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004fc0:	f7fc fc4c 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004fc4:	bf00      	nop
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	24001970 	.word	0x24001970
 8004fcc:	40011000 	.word	0x40011000

08004fd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b0b8      	sub	sp, #224	; 0xe0
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	605a      	str	r2, [r3, #4]
 8004fe2:	609a      	str	r2, [r3, #8]
 8004fe4:	60da      	str	r2, [r3, #12]
 8004fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004fe8:	f107 0310 	add.w	r3, r7, #16
 8004fec:	22b8      	movs	r2, #184	; 0xb8
 8004fee:	2100      	movs	r1, #0
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f00a f92b 	bl	800f24c <memset>
  if(uartHandle->Instance==USART1)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a5a      	ldr	r2, [pc, #360]	; (8005164 <HAL_UART_MspInit+0x194>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	f040 80ad 	bne.w	800515c <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005002:	f04f 0201 	mov.w	r2, #1
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800500e:	2300      	movs	r3, #0
 8005010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005014:	f107 0310 	add.w	r3, r7, #16
 8005018:	4618      	mov	r0, r3
 800501a:	f004 fd31 	bl	8009a80 <HAL_RCCEx_PeriphCLKConfig>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8005024:	f7fc fc1a 	bl	800185c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005028:	4b4f      	ldr	r3, [pc, #316]	; (8005168 <HAL_UART_MspInit+0x198>)
 800502a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800502e:	4a4e      	ldr	r2, [pc, #312]	; (8005168 <HAL_UART_MspInit+0x198>)
 8005030:	f043 0310 	orr.w	r3, r3, #16
 8005034:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005038:	4b4b      	ldr	r3, [pc, #300]	; (8005168 <HAL_UART_MspInit+0x198>)
 800503a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800503e:	f003 0310 	and.w	r3, r3, #16
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005046:	4b48      	ldr	r3, [pc, #288]	; (8005168 <HAL_UART_MspInit+0x198>)
 8005048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800504c:	4a46      	ldr	r2, [pc, #280]	; (8005168 <HAL_UART_MspInit+0x198>)
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005056:	4b44      	ldr	r3, [pc, #272]	; (8005168 <HAL_UART_MspInit+0x198>)
 8005058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	60bb      	str	r3, [r7, #8]
 8005062:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005064:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005068:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506c:	2302      	movs	r3, #2
 800506e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005072:	2300      	movs	r3, #0
 8005074:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005078:	2300      	movs	r3, #0
 800507a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800507e:	2307      	movs	r3, #7
 8005080:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005084:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005088:	4619      	mov	r1, r3
 800508a:	4838      	ldr	r0, [pc, #224]	; (800516c <HAL_UART_MspInit+0x19c>)
 800508c:	f003 fa94 	bl	80085b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8005090:	4b37      	ldr	r3, [pc, #220]	; (8005170 <HAL_UART_MspInit+0x1a0>)
 8005092:	4a38      	ldr	r2, [pc, #224]	; (8005174 <HAL_UART_MspInit+0x1a4>)
 8005094:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8005096:	4b36      	ldr	r3, [pc, #216]	; (8005170 <HAL_UART_MspInit+0x1a0>)
 8005098:	2229      	movs	r2, #41	; 0x29
 800509a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800509c:	4b34      	ldr	r3, [pc, #208]	; (8005170 <HAL_UART_MspInit+0x1a0>)
 800509e:	2200      	movs	r2, #0
 80050a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050a2:	4b33      	ldr	r3, [pc, #204]	; (8005170 <HAL_UART_MspInit+0x1a0>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050a8:	4b31      	ldr	r3, [pc, #196]	; (8005170 <HAL_UART_MspInit+0x1a0>)
 80050aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050b0:	4b2f      	ldr	r3, [pc, #188]	; (8005170 <HAL_UART_MspInit+0x1a0>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050b6:	4b2e      	ldr	r3, [pc, #184]	; (8005170 <HAL_UART_MspInit+0x1a0>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80050bc:	4b2c      	ldr	r3, [pc, #176]	; (8005170 <HAL_UART_MspInit+0x1a0>)
 80050be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050c2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80050c4:	4b2a      	ldr	r3, [pc, #168]	; (8005170 <HAL_UART_MspInit+0x1a0>)
 80050c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050cc:	4b28      	ldr	r3, [pc, #160]	; (8005170 <HAL_UART_MspInit+0x1a0>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80050d2:	4827      	ldr	r0, [pc, #156]	; (8005170 <HAL_UART_MspInit+0x1a0>)
 80050d4:	f000 fa80 	bl	80055d8 <HAL_DMA_Init>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80050de:	f7fc fbbd 	bl	800185c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a22      	ldr	r2, [pc, #136]	; (8005170 <HAL_UART_MspInit+0x1a0>)
 80050e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80050ea:	4a21      	ldr	r2, [pc, #132]	; (8005170 <HAL_UART_MspInit+0x1a0>)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80050f0:	4b21      	ldr	r3, [pc, #132]	; (8005178 <HAL_UART_MspInit+0x1a8>)
 80050f2:	4a22      	ldr	r2, [pc, #136]	; (800517c <HAL_UART_MspInit+0x1ac>)
 80050f4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80050f6:	4b20      	ldr	r3, [pc, #128]	; (8005178 <HAL_UART_MspInit+0x1a8>)
 80050f8:	222a      	movs	r2, #42	; 0x2a
 80050fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050fc:	4b1e      	ldr	r3, [pc, #120]	; (8005178 <HAL_UART_MspInit+0x1a8>)
 80050fe:	2240      	movs	r2, #64	; 0x40
 8005100:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005102:	4b1d      	ldr	r3, [pc, #116]	; (8005178 <HAL_UART_MspInit+0x1a8>)
 8005104:	2200      	movs	r2, #0
 8005106:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005108:	4b1b      	ldr	r3, [pc, #108]	; (8005178 <HAL_UART_MspInit+0x1a8>)
 800510a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800510e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005110:	4b19      	ldr	r3, [pc, #100]	; (8005178 <HAL_UART_MspInit+0x1a8>)
 8005112:	2200      	movs	r2, #0
 8005114:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005116:	4b18      	ldr	r3, [pc, #96]	; (8005178 <HAL_UART_MspInit+0x1a8>)
 8005118:	2200      	movs	r2, #0
 800511a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800511c:	4b16      	ldr	r3, [pc, #88]	; (8005178 <HAL_UART_MspInit+0x1a8>)
 800511e:	2200      	movs	r2, #0
 8005120:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005122:	4b15      	ldr	r3, [pc, #84]	; (8005178 <HAL_UART_MspInit+0x1a8>)
 8005124:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005128:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800512a:	4b13      	ldr	r3, [pc, #76]	; (8005178 <HAL_UART_MspInit+0x1a8>)
 800512c:	2200      	movs	r2, #0
 800512e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005130:	4811      	ldr	r0, [pc, #68]	; (8005178 <HAL_UART_MspInit+0x1a8>)
 8005132:	f000 fa51 	bl	80055d8 <HAL_DMA_Init>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 800513c:	f7fc fb8e 	bl	800185c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a0d      	ldr	r2, [pc, #52]	; (8005178 <HAL_UART_MspInit+0x1a8>)
 8005144:	67da      	str	r2, [r3, #124]	; 0x7c
 8005146:	4a0c      	ldr	r2, [pc, #48]	; (8005178 <HAL_UART_MspInit+0x1a8>)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800514c:	2200      	movs	r2, #0
 800514e:	2100      	movs	r1, #0
 8005150:	2025      	movs	r0, #37	; 0x25
 8005152:	f000 f9fe 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005156:	2025      	movs	r0, #37	; 0x25
 8005158:	f000 fa15 	bl	8005586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800515c:	bf00      	nop
 800515e:	37e0      	adds	r7, #224	; 0xe0
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40011000 	.word	0x40011000
 8005168:	58024400 	.word	0x58024400
 800516c:	58020000 	.word	0x58020000
 8005170:	24001a04 	.word	0x24001a04
 8005174:	40020010 	.word	0x40020010
 8005178:	24001a7c 	.word	0x24001a7c
 800517c:	40020028 	.word	0x40020028

08005180 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a10      	ldr	r2, [pc, #64]	; (80051d0 <HAL_UART_MspDeInit+0x50>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d11a      	bne.n	80051c8 <HAL_UART_MspDeInit+0x48>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005192:	4b10      	ldr	r3, [pc, #64]	; (80051d4 <HAL_UART_MspDeInit+0x54>)
 8005194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005198:	4a0e      	ldr	r2, [pc, #56]	; (80051d4 <HAL_UART_MspDeInit+0x54>)
 800519a:	f023 0310 	bic.w	r3, r3, #16
 800519e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80051a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051a6:	480c      	ldr	r0, [pc, #48]	; (80051d8 <HAL_UART_MspDeInit+0x58>)
 80051a8:	f003 fbae 	bl	8008908 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fd6a 	bl	8005c8c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 fd65 	bl	8005c8c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80051c2:	2025      	movs	r0, #37	; 0x25
 80051c4:	f000 f9ed 	bl	80055a2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80051c8:	bf00      	nop
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40011000 	.word	0x40011000
 80051d4:	58024400 	.word	0x58024400
 80051d8:	58020000 	.word	0x58020000

080051dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80051dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005214 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80051e0:	f7ff f9a2 	bl	8004528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051e4:	480c      	ldr	r0, [pc, #48]	; (8005218 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80051e6:	490d      	ldr	r1, [pc, #52]	; (800521c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80051e8:	4a0d      	ldr	r2, [pc, #52]	; (8005220 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80051ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051ec:	e002      	b.n	80051f4 <LoopCopyDataInit>

080051ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051f2:	3304      	adds	r3, #4

080051f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051f8:	d3f9      	bcc.n	80051ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051fa:	4a0a      	ldr	r2, [pc, #40]	; (8005224 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80051fc:	4c0a      	ldr	r4, [pc, #40]	; (8005228 <LoopFillZerobss+0x22>)
  movs r3, #0
 80051fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005200:	e001      	b.n	8005206 <LoopFillZerobss>

08005202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005204:	3204      	adds	r2, #4

08005206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005208:	d3fb      	bcc.n	8005202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800520a:	f009 ffed 	bl	800f1e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800520e:	f7fc fa09 	bl	8001624 <main>
  bx  lr
 8005212:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005214:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8005218:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800521c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8005220:	0800f884 	.word	0x0800f884
  ldr r2, =_sbss
 8005224:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8005228:	24001b08 	.word	0x24001b08

0800522c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800522c:	e7fe      	b.n	800522c <ADC3_IRQHandler>
	...

08005230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005236:	2003      	movs	r0, #3
 8005238:	f000 f980 	bl	800553c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800523c:	f004 fa4a 	bl	80096d4 <HAL_RCC_GetSysClockFreq>
 8005240:	4602      	mov	r2, r0
 8005242:	4b15      	ldr	r3, [pc, #84]	; (8005298 <HAL_Init+0x68>)
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	0a1b      	lsrs	r3, r3, #8
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	4913      	ldr	r1, [pc, #76]	; (800529c <HAL_Init+0x6c>)
 800524e:	5ccb      	ldrb	r3, [r1, r3]
 8005250:	f003 031f 	and.w	r3, r3, #31
 8005254:	fa22 f303 	lsr.w	r3, r2, r3
 8005258:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800525a:	4b0f      	ldr	r3, [pc, #60]	; (8005298 <HAL_Init+0x68>)
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	4a0e      	ldr	r2, [pc, #56]	; (800529c <HAL_Init+0x6c>)
 8005264:	5cd3      	ldrb	r3, [r2, r3]
 8005266:	f003 031f 	and.w	r3, r3, #31
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	fa22 f303 	lsr.w	r3, r2, r3
 8005270:	4a0b      	ldr	r2, [pc, #44]	; (80052a0 <HAL_Init+0x70>)
 8005272:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005274:	4a0b      	ldr	r2, [pc, #44]	; (80052a4 <HAL_Init+0x74>)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800527a:	2000      	movs	r0, #0
 800527c:	f000 f814 	bl	80052a8 <HAL_InitTick>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e002      	b.n	8005290 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800528a:	f7ff f861 	bl	8004350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	58024400 	.word	0x58024400
 800529c:	0800f830 	.word	0x0800f830
 80052a0:	24000004 	.word	0x24000004
 80052a4:	24000000 	.word	0x24000000

080052a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80052b0:	4b15      	ldr	r3, [pc, #84]	; (8005308 <HAL_InitTick+0x60>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e021      	b.n	8005300 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80052bc:	4b13      	ldr	r3, [pc, #76]	; (800530c <HAL_InitTick+0x64>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4b11      	ldr	r3, [pc, #68]	; (8005308 <HAL_InitTick+0x60>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	4619      	mov	r1, r3
 80052c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80052ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 f973 	bl	80055be <HAL_SYSTICK_Config>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e00e      	b.n	8005300 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b0f      	cmp	r3, #15
 80052e6:	d80a      	bhi.n	80052fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052e8:	2200      	movs	r2, #0
 80052ea:	6879      	ldr	r1, [r7, #4]
 80052ec:	f04f 30ff 	mov.w	r0, #4294967295
 80052f0:	f000 f92f 	bl	8005552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80052f4:	4a06      	ldr	r2, [pc, #24]	; (8005310 <HAL_InitTick+0x68>)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	e000      	b.n	8005300 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	2400000c 	.word	0x2400000c
 800530c:	24000000 	.word	0x24000000
 8005310:	24000008 	.word	0x24000008

08005314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005318:	4b06      	ldr	r3, [pc, #24]	; (8005334 <HAL_IncTick+0x20>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	4b06      	ldr	r3, [pc, #24]	; (8005338 <HAL_IncTick+0x24>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4413      	add	r3, r2
 8005324:	4a04      	ldr	r2, [pc, #16]	; (8005338 <HAL_IncTick+0x24>)
 8005326:	6013      	str	r3, [r2, #0]
}
 8005328:	bf00      	nop
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	2400000c 	.word	0x2400000c
 8005338:	24001af4 	.word	0x24001af4

0800533c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  return uwTick;
 8005340:	4b03      	ldr	r3, [pc, #12]	; (8005350 <HAL_GetTick+0x14>)
 8005342:	681b      	ldr	r3, [r3, #0]
}
 8005344:	4618      	mov	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	24001af4 	.word	0x24001af4

08005354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005364:	4b0b      	ldr	r3, [pc, #44]	; (8005394 <__NVIC_SetPriorityGrouping+0x40>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005370:	4013      	ands	r3, r2
 8005372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800537c:	4b06      	ldr	r3, [pc, #24]	; (8005398 <__NVIC_SetPriorityGrouping+0x44>)
 800537e:	4313      	orrs	r3, r2
 8005380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005382:	4a04      	ldr	r2, [pc, #16]	; (8005394 <__NVIC_SetPriorityGrouping+0x40>)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	60d3      	str	r3, [r2, #12]
}
 8005388:	bf00      	nop
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	e000ed00 	.word	0xe000ed00
 8005398:	05fa0000 	.word	0x05fa0000

0800539c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053a0:	4b04      	ldr	r3, [pc, #16]	; (80053b4 <__NVIC_GetPriorityGrouping+0x18>)
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	0a1b      	lsrs	r3, r3, #8
 80053a6:	f003 0307 	and.w	r3, r3, #7
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	e000ed00 	.word	0xe000ed00

080053b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	4603      	mov	r3, r0
 80053c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	db0b      	blt.n	80053e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	f003 021f 	and.w	r2, r3, #31
 80053d0:	4907      	ldr	r1, [pc, #28]	; (80053f0 <__NVIC_EnableIRQ+0x38>)
 80053d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	2001      	movs	r0, #1
 80053da:	fa00 f202 	lsl.w	r2, r0, r2
 80053de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	e000e100 	.word	0xe000e100

080053f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	4603      	mov	r3, r0
 80053fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005402:	2b00      	cmp	r3, #0
 8005404:	db12      	blt.n	800542c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	f003 021f 	and.w	r2, r3, #31
 800540c:	490a      	ldr	r1, [pc, #40]	; (8005438 <__NVIC_DisableIRQ+0x44>)
 800540e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	2001      	movs	r0, #1
 8005416:	fa00 f202 	lsl.w	r2, r0, r2
 800541a:	3320      	adds	r3, #32
 800541c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005420:	f3bf 8f4f 	dsb	sy
}
 8005424:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005426:	f3bf 8f6f 	isb	sy
}
 800542a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	e000e100 	.word	0xe000e100

0800543c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	6039      	str	r1, [r7, #0]
 8005446:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005448:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800544c:	2b00      	cmp	r3, #0
 800544e:	db0a      	blt.n	8005466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	b2da      	uxtb	r2, r3
 8005454:	490c      	ldr	r1, [pc, #48]	; (8005488 <__NVIC_SetPriority+0x4c>)
 8005456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800545a:	0112      	lsls	r2, r2, #4
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	440b      	add	r3, r1
 8005460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005464:	e00a      	b.n	800547c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	b2da      	uxtb	r2, r3
 800546a:	4908      	ldr	r1, [pc, #32]	; (800548c <__NVIC_SetPriority+0x50>)
 800546c:	88fb      	ldrh	r3, [r7, #6]
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	3b04      	subs	r3, #4
 8005474:	0112      	lsls	r2, r2, #4
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	440b      	add	r3, r1
 800547a:	761a      	strb	r2, [r3, #24]
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	e000e100 	.word	0xe000e100
 800548c:	e000ed00 	.word	0xe000ed00

08005490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005490:	b480      	push	{r7}
 8005492:	b089      	sub	sp, #36	; 0x24
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f1c3 0307 	rsb	r3, r3, #7
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	bf28      	it	cs
 80054ae:	2304      	movcs	r3, #4
 80054b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	3304      	adds	r3, #4
 80054b6:	2b06      	cmp	r3, #6
 80054b8:	d902      	bls.n	80054c0 <NVIC_EncodePriority+0x30>
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	3b03      	subs	r3, #3
 80054be:	e000      	b.n	80054c2 <NVIC_EncodePriority+0x32>
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c4:	f04f 32ff 	mov.w	r2, #4294967295
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	43da      	mvns	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	401a      	ands	r2, r3
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054d8:	f04f 31ff 	mov.w	r1, #4294967295
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	fa01 f303 	lsl.w	r3, r1, r3
 80054e2:	43d9      	mvns	r1, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054e8:	4313      	orrs	r3, r2
         );
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3724      	adds	r7, #36	; 0x24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
	...

080054f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3b01      	subs	r3, #1
 8005504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005508:	d301      	bcc.n	800550e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800550a:	2301      	movs	r3, #1
 800550c:	e00f      	b.n	800552e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800550e:	4a0a      	ldr	r2, [pc, #40]	; (8005538 <SysTick_Config+0x40>)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3b01      	subs	r3, #1
 8005514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005516:	210f      	movs	r1, #15
 8005518:	f04f 30ff 	mov.w	r0, #4294967295
 800551c:	f7ff ff8e 	bl	800543c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005520:	4b05      	ldr	r3, [pc, #20]	; (8005538 <SysTick_Config+0x40>)
 8005522:	2200      	movs	r2, #0
 8005524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005526:	4b04      	ldr	r3, [pc, #16]	; (8005538 <SysTick_Config+0x40>)
 8005528:	2207      	movs	r2, #7
 800552a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	e000e010 	.word	0xe000e010

0800553c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff ff05 	bl	8005354 <__NVIC_SetPriorityGrouping>
}
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b086      	sub	sp, #24
 8005556:	af00      	add	r7, sp, #0
 8005558:	4603      	mov	r3, r0
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	607a      	str	r2, [r7, #4]
 800555e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005560:	f7ff ff1c 	bl	800539c <__NVIC_GetPriorityGrouping>
 8005564:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	6978      	ldr	r0, [r7, #20]
 800556c:	f7ff ff90 	bl	8005490 <NVIC_EncodePriority>
 8005570:	4602      	mov	r2, r0
 8005572:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005576:	4611      	mov	r1, r2
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff ff5f 	bl	800543c <__NVIC_SetPriority>
}
 800557e:	bf00      	nop
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	4603      	mov	r3, r0
 800558e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005590:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff ff0f 	bl	80053b8 <__NVIC_EnableIRQ>
}
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	4603      	mov	r3, r0
 80055aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80055ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff ff1f 	bl	80053f4 <__NVIC_DisableIRQ>
}
 80055b6:	bf00      	nop
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b082      	sub	sp, #8
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7ff ff96 	bl	80054f8 <SysTick_Config>
 80055cc:	4603      	mov	r3, r0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80055e0:	f7ff feac 	bl	800533c <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e314      	b.n	8005c1a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a66      	ldr	r2, [pc, #408]	; (8005790 <HAL_DMA_Init+0x1b8>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d04a      	beq.n	8005690 <HAL_DMA_Init+0xb8>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a65      	ldr	r2, [pc, #404]	; (8005794 <HAL_DMA_Init+0x1bc>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d045      	beq.n	8005690 <HAL_DMA_Init+0xb8>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a63      	ldr	r2, [pc, #396]	; (8005798 <HAL_DMA_Init+0x1c0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d040      	beq.n	8005690 <HAL_DMA_Init+0xb8>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a62      	ldr	r2, [pc, #392]	; (800579c <HAL_DMA_Init+0x1c4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d03b      	beq.n	8005690 <HAL_DMA_Init+0xb8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a60      	ldr	r2, [pc, #384]	; (80057a0 <HAL_DMA_Init+0x1c8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d036      	beq.n	8005690 <HAL_DMA_Init+0xb8>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a5f      	ldr	r2, [pc, #380]	; (80057a4 <HAL_DMA_Init+0x1cc>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d031      	beq.n	8005690 <HAL_DMA_Init+0xb8>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a5d      	ldr	r2, [pc, #372]	; (80057a8 <HAL_DMA_Init+0x1d0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d02c      	beq.n	8005690 <HAL_DMA_Init+0xb8>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a5c      	ldr	r2, [pc, #368]	; (80057ac <HAL_DMA_Init+0x1d4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d027      	beq.n	8005690 <HAL_DMA_Init+0xb8>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a5a      	ldr	r2, [pc, #360]	; (80057b0 <HAL_DMA_Init+0x1d8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d022      	beq.n	8005690 <HAL_DMA_Init+0xb8>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a59      	ldr	r2, [pc, #356]	; (80057b4 <HAL_DMA_Init+0x1dc>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d01d      	beq.n	8005690 <HAL_DMA_Init+0xb8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a57      	ldr	r2, [pc, #348]	; (80057b8 <HAL_DMA_Init+0x1e0>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d018      	beq.n	8005690 <HAL_DMA_Init+0xb8>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a56      	ldr	r2, [pc, #344]	; (80057bc <HAL_DMA_Init+0x1e4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d013      	beq.n	8005690 <HAL_DMA_Init+0xb8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a54      	ldr	r2, [pc, #336]	; (80057c0 <HAL_DMA_Init+0x1e8>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00e      	beq.n	8005690 <HAL_DMA_Init+0xb8>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a53      	ldr	r2, [pc, #332]	; (80057c4 <HAL_DMA_Init+0x1ec>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d009      	beq.n	8005690 <HAL_DMA_Init+0xb8>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a51      	ldr	r2, [pc, #324]	; (80057c8 <HAL_DMA_Init+0x1f0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d004      	beq.n	8005690 <HAL_DMA_Init+0xb8>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a50      	ldr	r2, [pc, #320]	; (80057cc <HAL_DMA_Init+0x1f4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d101      	bne.n	8005694 <HAL_DMA_Init+0xbc>
 8005690:	2301      	movs	r3, #1
 8005692:	e000      	b.n	8005696 <HAL_DMA_Init+0xbe>
 8005694:	2300      	movs	r3, #0
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 813c 	beq.w	8005914 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a37      	ldr	r2, [pc, #220]	; (8005790 <HAL_DMA_Init+0x1b8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d04a      	beq.n	800574c <HAL_DMA_Init+0x174>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a36      	ldr	r2, [pc, #216]	; (8005794 <HAL_DMA_Init+0x1bc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d045      	beq.n	800574c <HAL_DMA_Init+0x174>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a34      	ldr	r2, [pc, #208]	; (8005798 <HAL_DMA_Init+0x1c0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d040      	beq.n	800574c <HAL_DMA_Init+0x174>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a33      	ldr	r2, [pc, #204]	; (800579c <HAL_DMA_Init+0x1c4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d03b      	beq.n	800574c <HAL_DMA_Init+0x174>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a31      	ldr	r2, [pc, #196]	; (80057a0 <HAL_DMA_Init+0x1c8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d036      	beq.n	800574c <HAL_DMA_Init+0x174>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a30      	ldr	r2, [pc, #192]	; (80057a4 <HAL_DMA_Init+0x1cc>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d031      	beq.n	800574c <HAL_DMA_Init+0x174>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a2e      	ldr	r2, [pc, #184]	; (80057a8 <HAL_DMA_Init+0x1d0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d02c      	beq.n	800574c <HAL_DMA_Init+0x174>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a2d      	ldr	r2, [pc, #180]	; (80057ac <HAL_DMA_Init+0x1d4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d027      	beq.n	800574c <HAL_DMA_Init+0x174>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a2b      	ldr	r2, [pc, #172]	; (80057b0 <HAL_DMA_Init+0x1d8>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d022      	beq.n	800574c <HAL_DMA_Init+0x174>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a2a      	ldr	r2, [pc, #168]	; (80057b4 <HAL_DMA_Init+0x1dc>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d01d      	beq.n	800574c <HAL_DMA_Init+0x174>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a28      	ldr	r2, [pc, #160]	; (80057b8 <HAL_DMA_Init+0x1e0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d018      	beq.n	800574c <HAL_DMA_Init+0x174>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a27      	ldr	r2, [pc, #156]	; (80057bc <HAL_DMA_Init+0x1e4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d013      	beq.n	800574c <HAL_DMA_Init+0x174>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a25      	ldr	r2, [pc, #148]	; (80057c0 <HAL_DMA_Init+0x1e8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00e      	beq.n	800574c <HAL_DMA_Init+0x174>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a24      	ldr	r2, [pc, #144]	; (80057c4 <HAL_DMA_Init+0x1ec>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d009      	beq.n	800574c <HAL_DMA_Init+0x174>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a22      	ldr	r2, [pc, #136]	; (80057c8 <HAL_DMA_Init+0x1f0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d004      	beq.n	800574c <HAL_DMA_Init+0x174>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a21      	ldr	r2, [pc, #132]	; (80057cc <HAL_DMA_Init+0x1f4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d108      	bne.n	800575e <HAL_DMA_Init+0x186>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0201 	bic.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	e007      	b.n	800576e <HAL_DMA_Init+0x196>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0201 	bic.w	r2, r2, #1
 800576c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800576e:	e02f      	b.n	80057d0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005770:	f7ff fde4 	bl	800533c <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b05      	cmp	r3, #5
 800577c:	d928      	bls.n	80057d0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2203      	movs	r2, #3
 8005788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e244      	b.n	8005c1a <HAL_DMA_Init+0x642>
 8005790:	40020010 	.word	0x40020010
 8005794:	40020028 	.word	0x40020028
 8005798:	40020040 	.word	0x40020040
 800579c:	40020058 	.word	0x40020058
 80057a0:	40020070 	.word	0x40020070
 80057a4:	40020088 	.word	0x40020088
 80057a8:	400200a0 	.word	0x400200a0
 80057ac:	400200b8 	.word	0x400200b8
 80057b0:	40020410 	.word	0x40020410
 80057b4:	40020428 	.word	0x40020428
 80057b8:	40020440 	.word	0x40020440
 80057bc:	40020458 	.word	0x40020458
 80057c0:	40020470 	.word	0x40020470
 80057c4:	40020488 	.word	0x40020488
 80057c8:	400204a0 	.word	0x400204a0
 80057cc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1c8      	bne.n	8005770 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4b84      	ldr	r3, [pc, #528]	; (80059fc <HAL_DMA_Init+0x424>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80057f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005802:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800580e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	2b04      	cmp	r3, #4
 8005822:	d107      	bne.n	8005834 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582c:	4313      	orrs	r3, r2
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b28      	cmp	r3, #40	; 0x28
 800583a:	d903      	bls.n	8005844 <HAL_DMA_Init+0x26c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b2e      	cmp	r3, #46	; 0x2e
 8005842:	d91f      	bls.n	8005884 <HAL_DMA_Init+0x2ac>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b3e      	cmp	r3, #62	; 0x3e
 800584a:	d903      	bls.n	8005854 <HAL_DMA_Init+0x27c>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b42      	cmp	r3, #66	; 0x42
 8005852:	d917      	bls.n	8005884 <HAL_DMA_Init+0x2ac>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b46      	cmp	r3, #70	; 0x46
 800585a:	d903      	bls.n	8005864 <HAL_DMA_Init+0x28c>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b48      	cmp	r3, #72	; 0x48
 8005862:	d90f      	bls.n	8005884 <HAL_DMA_Init+0x2ac>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2b4e      	cmp	r3, #78	; 0x4e
 800586a:	d903      	bls.n	8005874 <HAL_DMA_Init+0x29c>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	2b52      	cmp	r3, #82	; 0x52
 8005872:	d907      	bls.n	8005884 <HAL_DMA_Init+0x2ac>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2b73      	cmp	r3, #115	; 0x73
 800587a:	d905      	bls.n	8005888 <HAL_DMA_Init+0x2b0>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	2b77      	cmp	r3, #119	; 0x77
 8005882:	d801      	bhi.n	8005888 <HAL_DMA_Init+0x2b0>
 8005884:	2301      	movs	r3, #1
 8005886:	e000      	b.n	800588a <HAL_DMA_Init+0x2b2>
 8005888:	2300      	movs	r3, #0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005894:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f023 0307 	bic.w	r3, r3, #7
 80058ac:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d117      	bne.n	80058f0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00e      	beq.n	80058f0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f002 fce6 	bl	80082a4 <DMA_CheckFifoParam>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d008      	beq.n	80058f0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2240      	movs	r2, #64	; 0x40
 80058e2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e194      	b.n	8005c1a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f002 fc21 	bl	8008140 <DMA_CalcBaseAndBitshift>
 80058fe:	4603      	mov	r3, r0
 8005900:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005906:	f003 031f 	and.w	r3, r3, #31
 800590a:	223f      	movs	r2, #63	; 0x3f
 800590c:	409a      	lsls	r2, r3
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	609a      	str	r2, [r3, #8]
 8005912:	e0ca      	b.n	8005aaa <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a39      	ldr	r2, [pc, #228]	; (8005a00 <HAL_DMA_Init+0x428>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d022      	beq.n	8005964 <HAL_DMA_Init+0x38c>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a38      	ldr	r2, [pc, #224]	; (8005a04 <HAL_DMA_Init+0x42c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d01d      	beq.n	8005964 <HAL_DMA_Init+0x38c>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a36      	ldr	r2, [pc, #216]	; (8005a08 <HAL_DMA_Init+0x430>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d018      	beq.n	8005964 <HAL_DMA_Init+0x38c>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a35      	ldr	r2, [pc, #212]	; (8005a0c <HAL_DMA_Init+0x434>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d013      	beq.n	8005964 <HAL_DMA_Init+0x38c>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a33      	ldr	r2, [pc, #204]	; (8005a10 <HAL_DMA_Init+0x438>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00e      	beq.n	8005964 <HAL_DMA_Init+0x38c>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a32      	ldr	r2, [pc, #200]	; (8005a14 <HAL_DMA_Init+0x43c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d009      	beq.n	8005964 <HAL_DMA_Init+0x38c>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a30      	ldr	r2, [pc, #192]	; (8005a18 <HAL_DMA_Init+0x440>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d004      	beq.n	8005964 <HAL_DMA_Init+0x38c>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a2f      	ldr	r2, [pc, #188]	; (8005a1c <HAL_DMA_Init+0x444>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d101      	bne.n	8005968 <HAL_DMA_Init+0x390>
 8005964:	2301      	movs	r3, #1
 8005966:	e000      	b.n	800596a <HAL_DMA_Init+0x392>
 8005968:	2300      	movs	r3, #0
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 8094 	beq.w	8005a98 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a22      	ldr	r2, [pc, #136]	; (8005a00 <HAL_DMA_Init+0x428>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d021      	beq.n	80059be <HAL_DMA_Init+0x3e6>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a21      	ldr	r2, [pc, #132]	; (8005a04 <HAL_DMA_Init+0x42c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d01c      	beq.n	80059be <HAL_DMA_Init+0x3e6>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a1f      	ldr	r2, [pc, #124]	; (8005a08 <HAL_DMA_Init+0x430>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d017      	beq.n	80059be <HAL_DMA_Init+0x3e6>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1e      	ldr	r2, [pc, #120]	; (8005a0c <HAL_DMA_Init+0x434>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d012      	beq.n	80059be <HAL_DMA_Init+0x3e6>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1c      	ldr	r2, [pc, #112]	; (8005a10 <HAL_DMA_Init+0x438>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00d      	beq.n	80059be <HAL_DMA_Init+0x3e6>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1b      	ldr	r2, [pc, #108]	; (8005a14 <HAL_DMA_Init+0x43c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d008      	beq.n	80059be <HAL_DMA_Init+0x3e6>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a19      	ldr	r2, [pc, #100]	; (8005a18 <HAL_DMA_Init+0x440>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d003      	beq.n	80059be <HAL_DMA_Init+0x3e6>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a18      	ldr	r2, [pc, #96]	; (8005a1c <HAL_DMA_Init+0x444>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4b11      	ldr	r3, [pc, #68]	; (8005a20 <HAL_DMA_Init+0x448>)
 80059dc:	4013      	ands	r3, r2
 80059de:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d01d      	beq.n	8005a24 <HAL_DMA_Init+0x44c>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	2b80      	cmp	r3, #128	; 0x80
 80059ee:	d102      	bne.n	80059f6 <HAL_DMA_Init+0x41e>
 80059f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059f4:	e017      	b.n	8005a26 <HAL_DMA_Init+0x44e>
 80059f6:	2300      	movs	r3, #0
 80059f8:	e015      	b.n	8005a26 <HAL_DMA_Init+0x44e>
 80059fa:	bf00      	nop
 80059fc:	fe10803f 	.word	0xfe10803f
 8005a00:	58025408 	.word	0x58025408
 8005a04:	5802541c 	.word	0x5802541c
 8005a08:	58025430 	.word	0x58025430
 8005a0c:	58025444 	.word	0x58025444
 8005a10:	58025458 	.word	0x58025458
 8005a14:	5802546c 	.word	0x5802546c
 8005a18:	58025480 	.word	0x58025480
 8005a1c:	58025494 	.word	0x58025494
 8005a20:	fffe000f 	.word	0xfffe000f
 8005a24:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	68d2      	ldr	r2, [r2, #12]
 8005a2a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005a34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a54:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	4b6e      	ldr	r3, [pc, #440]	; (8005c24 <HAL_DMA_Init+0x64c>)
 8005a6c:	4413      	add	r3, r2
 8005a6e:	4a6e      	ldr	r2, [pc, #440]	; (8005c28 <HAL_DMA_Init+0x650>)
 8005a70:	fba2 2303 	umull	r2, r3, r2, r3
 8005a74:	091b      	lsrs	r3, r3, #4
 8005a76:	009a      	lsls	r2, r3, #2
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f002 fb5f 	bl	8008140 <DMA_CalcBaseAndBitshift>
 8005a82:	4603      	mov	r3, r0
 8005a84:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a8a:	f003 031f 	and.w	r3, r3, #31
 8005a8e:	2201      	movs	r2, #1
 8005a90:	409a      	lsls	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	605a      	str	r2, [r3, #4]
 8005a96:	e008      	b.n	8005aaa <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2240      	movs	r2, #64	; 0x40
 8005a9c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2203      	movs	r2, #3
 8005aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e0b7      	b.n	8005c1a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a5f      	ldr	r2, [pc, #380]	; (8005c2c <HAL_DMA_Init+0x654>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d072      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a5d      	ldr	r2, [pc, #372]	; (8005c30 <HAL_DMA_Init+0x658>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d06d      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a5c      	ldr	r2, [pc, #368]	; (8005c34 <HAL_DMA_Init+0x65c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d068      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a5a      	ldr	r2, [pc, #360]	; (8005c38 <HAL_DMA_Init+0x660>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d063      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a59      	ldr	r2, [pc, #356]	; (8005c3c <HAL_DMA_Init+0x664>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d05e      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a57      	ldr	r2, [pc, #348]	; (8005c40 <HAL_DMA_Init+0x668>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d059      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a56      	ldr	r2, [pc, #344]	; (8005c44 <HAL_DMA_Init+0x66c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d054      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a54      	ldr	r2, [pc, #336]	; (8005c48 <HAL_DMA_Init+0x670>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d04f      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a53      	ldr	r2, [pc, #332]	; (8005c4c <HAL_DMA_Init+0x674>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d04a      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a51      	ldr	r2, [pc, #324]	; (8005c50 <HAL_DMA_Init+0x678>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d045      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a50      	ldr	r2, [pc, #320]	; (8005c54 <HAL_DMA_Init+0x67c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d040      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a4e      	ldr	r2, [pc, #312]	; (8005c58 <HAL_DMA_Init+0x680>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d03b      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a4d      	ldr	r2, [pc, #308]	; (8005c5c <HAL_DMA_Init+0x684>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d036      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a4b      	ldr	r2, [pc, #300]	; (8005c60 <HAL_DMA_Init+0x688>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d031      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a4a      	ldr	r2, [pc, #296]	; (8005c64 <HAL_DMA_Init+0x68c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d02c      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a48      	ldr	r2, [pc, #288]	; (8005c68 <HAL_DMA_Init+0x690>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d027      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a47      	ldr	r2, [pc, #284]	; (8005c6c <HAL_DMA_Init+0x694>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d022      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a45      	ldr	r2, [pc, #276]	; (8005c70 <HAL_DMA_Init+0x698>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d01d      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a44      	ldr	r2, [pc, #272]	; (8005c74 <HAL_DMA_Init+0x69c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d018      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a42      	ldr	r2, [pc, #264]	; (8005c78 <HAL_DMA_Init+0x6a0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d013      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a41      	ldr	r2, [pc, #260]	; (8005c7c <HAL_DMA_Init+0x6a4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00e      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a3f      	ldr	r2, [pc, #252]	; (8005c80 <HAL_DMA_Init+0x6a8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d009      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a3e      	ldr	r2, [pc, #248]	; (8005c84 <HAL_DMA_Init+0x6ac>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d004      	beq.n	8005b9a <HAL_DMA_Init+0x5c2>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a3c      	ldr	r2, [pc, #240]	; (8005c88 <HAL_DMA_Init+0x6b0>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d101      	bne.n	8005b9e <HAL_DMA_Init+0x5c6>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e000      	b.n	8005ba0 <HAL_DMA_Init+0x5c8>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d032      	beq.n	8005c0a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f002 fbf9 	bl	800839c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	2b80      	cmp	r3, #128	; 0x80
 8005bb0:	d102      	bne.n	8005bb8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005bcc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d010      	beq.n	8005bf8 <HAL_DMA_Init+0x620>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b08      	cmp	r3, #8
 8005bdc:	d80c      	bhi.n	8005bf8 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f002 fc76 	bl	80084d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005bf4:	605a      	str	r2, [r3, #4]
 8005bf6:	e008      	b.n	8005c0a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	a7fdabf8 	.word	0xa7fdabf8
 8005c28:	cccccccd 	.word	0xcccccccd
 8005c2c:	40020010 	.word	0x40020010
 8005c30:	40020028 	.word	0x40020028
 8005c34:	40020040 	.word	0x40020040
 8005c38:	40020058 	.word	0x40020058
 8005c3c:	40020070 	.word	0x40020070
 8005c40:	40020088 	.word	0x40020088
 8005c44:	400200a0 	.word	0x400200a0
 8005c48:	400200b8 	.word	0x400200b8
 8005c4c:	40020410 	.word	0x40020410
 8005c50:	40020428 	.word	0x40020428
 8005c54:	40020440 	.word	0x40020440
 8005c58:	40020458 	.word	0x40020458
 8005c5c:	40020470 	.word	0x40020470
 8005c60:	40020488 	.word	0x40020488
 8005c64:	400204a0 	.word	0x400204a0
 8005c68:	400204b8 	.word	0x400204b8
 8005c6c:	58025408 	.word	0x58025408
 8005c70:	5802541c 	.word	0x5802541c
 8005c74:	58025430 	.word	0x58025430
 8005c78:	58025444 	.word	0x58025444
 8005c7c:	58025458 	.word	0x58025458
 8005c80:	5802546c 	.word	0x5802546c
 8005c84:	58025480 	.word	0x58025480
 8005c88:	58025494 	.word	0x58025494

08005c8c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e1a8      	b.n	8005ff0 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a82      	ldr	r2, [pc, #520]	; (8005eac <HAL_DMA_DeInit+0x220>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d04a      	beq.n	8005d3e <HAL_DMA_DeInit+0xb2>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a80      	ldr	r2, [pc, #512]	; (8005eb0 <HAL_DMA_DeInit+0x224>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d045      	beq.n	8005d3e <HAL_DMA_DeInit+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a7f      	ldr	r2, [pc, #508]	; (8005eb4 <HAL_DMA_DeInit+0x228>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d040      	beq.n	8005d3e <HAL_DMA_DeInit+0xb2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a7d      	ldr	r2, [pc, #500]	; (8005eb8 <HAL_DMA_DeInit+0x22c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d03b      	beq.n	8005d3e <HAL_DMA_DeInit+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a7c      	ldr	r2, [pc, #496]	; (8005ebc <HAL_DMA_DeInit+0x230>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d036      	beq.n	8005d3e <HAL_DMA_DeInit+0xb2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a7a      	ldr	r2, [pc, #488]	; (8005ec0 <HAL_DMA_DeInit+0x234>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d031      	beq.n	8005d3e <HAL_DMA_DeInit+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a79      	ldr	r2, [pc, #484]	; (8005ec4 <HAL_DMA_DeInit+0x238>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d02c      	beq.n	8005d3e <HAL_DMA_DeInit+0xb2>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a77      	ldr	r2, [pc, #476]	; (8005ec8 <HAL_DMA_DeInit+0x23c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d027      	beq.n	8005d3e <HAL_DMA_DeInit+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a76      	ldr	r2, [pc, #472]	; (8005ecc <HAL_DMA_DeInit+0x240>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d022      	beq.n	8005d3e <HAL_DMA_DeInit+0xb2>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a74      	ldr	r2, [pc, #464]	; (8005ed0 <HAL_DMA_DeInit+0x244>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d01d      	beq.n	8005d3e <HAL_DMA_DeInit+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a73      	ldr	r2, [pc, #460]	; (8005ed4 <HAL_DMA_DeInit+0x248>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d018      	beq.n	8005d3e <HAL_DMA_DeInit+0xb2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a71      	ldr	r2, [pc, #452]	; (8005ed8 <HAL_DMA_DeInit+0x24c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d013      	beq.n	8005d3e <HAL_DMA_DeInit+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a70      	ldr	r2, [pc, #448]	; (8005edc <HAL_DMA_DeInit+0x250>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00e      	beq.n	8005d3e <HAL_DMA_DeInit+0xb2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a6e      	ldr	r2, [pc, #440]	; (8005ee0 <HAL_DMA_DeInit+0x254>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d009      	beq.n	8005d3e <HAL_DMA_DeInit+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a6d      	ldr	r2, [pc, #436]	; (8005ee4 <HAL_DMA_DeInit+0x258>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d004      	beq.n	8005d3e <HAL_DMA_DeInit+0xb2>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a6b      	ldr	r2, [pc, #428]	; (8005ee8 <HAL_DMA_DeInit+0x25c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d108      	bne.n	8005d50 <HAL_DMA_DeInit+0xc4>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0201 	bic.w	r2, r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	e007      	b.n	8005d60 <HAL_DMA_DeInit+0xd4>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0201 	bic.w	r2, r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a51      	ldr	r2, [pc, #324]	; (8005eac <HAL_DMA_DeInit+0x220>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d04a      	beq.n	8005e00 <HAL_DMA_DeInit+0x174>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a50      	ldr	r2, [pc, #320]	; (8005eb0 <HAL_DMA_DeInit+0x224>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d045      	beq.n	8005e00 <HAL_DMA_DeInit+0x174>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a4e      	ldr	r2, [pc, #312]	; (8005eb4 <HAL_DMA_DeInit+0x228>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d040      	beq.n	8005e00 <HAL_DMA_DeInit+0x174>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a4d      	ldr	r2, [pc, #308]	; (8005eb8 <HAL_DMA_DeInit+0x22c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d03b      	beq.n	8005e00 <HAL_DMA_DeInit+0x174>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a4b      	ldr	r2, [pc, #300]	; (8005ebc <HAL_DMA_DeInit+0x230>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d036      	beq.n	8005e00 <HAL_DMA_DeInit+0x174>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a4a      	ldr	r2, [pc, #296]	; (8005ec0 <HAL_DMA_DeInit+0x234>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d031      	beq.n	8005e00 <HAL_DMA_DeInit+0x174>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a48      	ldr	r2, [pc, #288]	; (8005ec4 <HAL_DMA_DeInit+0x238>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d02c      	beq.n	8005e00 <HAL_DMA_DeInit+0x174>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a47      	ldr	r2, [pc, #284]	; (8005ec8 <HAL_DMA_DeInit+0x23c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d027      	beq.n	8005e00 <HAL_DMA_DeInit+0x174>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a45      	ldr	r2, [pc, #276]	; (8005ecc <HAL_DMA_DeInit+0x240>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d022      	beq.n	8005e00 <HAL_DMA_DeInit+0x174>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a44      	ldr	r2, [pc, #272]	; (8005ed0 <HAL_DMA_DeInit+0x244>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d01d      	beq.n	8005e00 <HAL_DMA_DeInit+0x174>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a42      	ldr	r2, [pc, #264]	; (8005ed4 <HAL_DMA_DeInit+0x248>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d018      	beq.n	8005e00 <HAL_DMA_DeInit+0x174>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a41      	ldr	r2, [pc, #260]	; (8005ed8 <HAL_DMA_DeInit+0x24c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d013      	beq.n	8005e00 <HAL_DMA_DeInit+0x174>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a3f      	ldr	r2, [pc, #252]	; (8005edc <HAL_DMA_DeInit+0x250>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00e      	beq.n	8005e00 <HAL_DMA_DeInit+0x174>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a3e      	ldr	r2, [pc, #248]	; (8005ee0 <HAL_DMA_DeInit+0x254>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d009      	beq.n	8005e00 <HAL_DMA_DeInit+0x174>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a3c      	ldr	r2, [pc, #240]	; (8005ee4 <HAL_DMA_DeInit+0x258>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d004      	beq.n	8005e00 <HAL_DMA_DeInit+0x174>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a3b      	ldr	r2, [pc, #236]	; (8005ee8 <HAL_DMA_DeInit+0x25c>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d101      	bne.n	8005e04 <HAL_DMA_DeInit+0x178>
 8005e00:	2301      	movs	r3, #1
 8005e02:	e000      	b.n	8005e06 <HAL_DMA_DeInit+0x17a>
 8005e04:	2300      	movs	r3, #0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d025      	beq.n	8005e56 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2200      	movs	r2, #0
 8005e18:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2200      	movs	r2, #0
 8005e28:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2221      	movs	r2, #33	; 0x21
 8005e38:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f002 f980 	bl	8008140 <DMA_CalcBaseAndBitshift>
 8005e40:	4603      	mov	r3, r0
 8005e42:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e48:	f003 031f 	and.w	r3, r3, #31
 8005e4c:	223f      	movs	r2, #63	; 0x3f
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	609a      	str	r2, [r3, #8]
 8005e54:	e081      	b.n	8005f5a <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a24      	ldr	r2, [pc, #144]	; (8005eec <HAL_DMA_DeInit+0x260>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d022      	beq.n	8005ea6 <HAL_DMA_DeInit+0x21a>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a22      	ldr	r2, [pc, #136]	; (8005ef0 <HAL_DMA_DeInit+0x264>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d01d      	beq.n	8005ea6 <HAL_DMA_DeInit+0x21a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a21      	ldr	r2, [pc, #132]	; (8005ef4 <HAL_DMA_DeInit+0x268>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d018      	beq.n	8005ea6 <HAL_DMA_DeInit+0x21a>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1f      	ldr	r2, [pc, #124]	; (8005ef8 <HAL_DMA_DeInit+0x26c>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d013      	beq.n	8005ea6 <HAL_DMA_DeInit+0x21a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a1e      	ldr	r2, [pc, #120]	; (8005efc <HAL_DMA_DeInit+0x270>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00e      	beq.n	8005ea6 <HAL_DMA_DeInit+0x21a>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a1c      	ldr	r2, [pc, #112]	; (8005f00 <HAL_DMA_DeInit+0x274>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d009      	beq.n	8005ea6 <HAL_DMA_DeInit+0x21a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1b      	ldr	r2, [pc, #108]	; (8005f04 <HAL_DMA_DeInit+0x278>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d004      	beq.n	8005ea6 <HAL_DMA_DeInit+0x21a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a19      	ldr	r2, [pc, #100]	; (8005f08 <HAL_DMA_DeInit+0x27c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d132      	bne.n	8005f0c <HAL_DMA_DeInit+0x280>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e031      	b.n	8005f0e <HAL_DMA_DeInit+0x282>
 8005eaa:	bf00      	nop
 8005eac:	40020010 	.word	0x40020010
 8005eb0:	40020028 	.word	0x40020028
 8005eb4:	40020040 	.word	0x40020040
 8005eb8:	40020058 	.word	0x40020058
 8005ebc:	40020070 	.word	0x40020070
 8005ec0:	40020088 	.word	0x40020088
 8005ec4:	400200a0 	.word	0x400200a0
 8005ec8:	400200b8 	.word	0x400200b8
 8005ecc:	40020410 	.word	0x40020410
 8005ed0:	40020428 	.word	0x40020428
 8005ed4:	40020440 	.word	0x40020440
 8005ed8:	40020458 	.word	0x40020458
 8005edc:	40020470 	.word	0x40020470
 8005ee0:	40020488 	.word	0x40020488
 8005ee4:	400204a0 	.word	0x400204a0
 8005ee8:	400204b8 	.word	0x400204b8
 8005eec:	58025408 	.word	0x58025408
 8005ef0:	5802541c 	.word	0x5802541c
 8005ef4:	58025430 	.word	0x58025430
 8005ef8:	58025444 	.word	0x58025444
 8005efc:	58025458 	.word	0x58025458
 8005f00:	5802546c 	.word	0x5802546c
 8005f04:	58025480 	.word	0x58025480
 8005f08:	58025494 	.word	0x58025494
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d021      	beq.n	8005f56 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2200      	movs	r2, #0
 8005f28:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2200      	movs	r2, #0
 8005f38:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f002 f900 	bl	8008140 <DMA_CalcBaseAndBitshift>
 8005f40:	4603      	mov	r3, r0
 8005f42:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f48:	f003 031f 	and.w	r3, r3, #31
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	409a      	lsls	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	605a      	str	r2, [r3, #4]
 8005f54:	e001      	b.n	8005f5a <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e04a      	b.n	8005ff0 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f002 fa1e 	bl	800839c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d008      	beq.n	8005f7a <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f78:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00f      	beq.n	8005fa2 <HAL_DMA_DeInit+0x316>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d80b      	bhi.n	8005fa2 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f002 faa0 	bl	80084d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005fa0:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e226      	b.n	8006462 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_DMA_Start_IT+0x2a>
 800601e:	2302      	movs	r3, #2
 8006020:	e21f      	b.n	8006462 <HAL_DMA_Start_IT+0x46a>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b01      	cmp	r3, #1
 8006034:	f040 820a 	bne.w	800644c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a68      	ldr	r2, [pc, #416]	; (80061ec <HAL_DMA_Start_IT+0x1f4>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d04a      	beq.n	80060e6 <HAL_DMA_Start_IT+0xee>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a66      	ldr	r2, [pc, #408]	; (80061f0 <HAL_DMA_Start_IT+0x1f8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d045      	beq.n	80060e6 <HAL_DMA_Start_IT+0xee>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a65      	ldr	r2, [pc, #404]	; (80061f4 <HAL_DMA_Start_IT+0x1fc>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d040      	beq.n	80060e6 <HAL_DMA_Start_IT+0xee>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a63      	ldr	r2, [pc, #396]	; (80061f8 <HAL_DMA_Start_IT+0x200>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d03b      	beq.n	80060e6 <HAL_DMA_Start_IT+0xee>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a62      	ldr	r2, [pc, #392]	; (80061fc <HAL_DMA_Start_IT+0x204>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d036      	beq.n	80060e6 <HAL_DMA_Start_IT+0xee>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a60      	ldr	r2, [pc, #384]	; (8006200 <HAL_DMA_Start_IT+0x208>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d031      	beq.n	80060e6 <HAL_DMA_Start_IT+0xee>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a5f      	ldr	r2, [pc, #380]	; (8006204 <HAL_DMA_Start_IT+0x20c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d02c      	beq.n	80060e6 <HAL_DMA_Start_IT+0xee>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a5d      	ldr	r2, [pc, #372]	; (8006208 <HAL_DMA_Start_IT+0x210>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d027      	beq.n	80060e6 <HAL_DMA_Start_IT+0xee>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a5c      	ldr	r2, [pc, #368]	; (800620c <HAL_DMA_Start_IT+0x214>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d022      	beq.n	80060e6 <HAL_DMA_Start_IT+0xee>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a5a      	ldr	r2, [pc, #360]	; (8006210 <HAL_DMA_Start_IT+0x218>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d01d      	beq.n	80060e6 <HAL_DMA_Start_IT+0xee>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a59      	ldr	r2, [pc, #356]	; (8006214 <HAL_DMA_Start_IT+0x21c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d018      	beq.n	80060e6 <HAL_DMA_Start_IT+0xee>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a57      	ldr	r2, [pc, #348]	; (8006218 <HAL_DMA_Start_IT+0x220>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d013      	beq.n	80060e6 <HAL_DMA_Start_IT+0xee>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a56      	ldr	r2, [pc, #344]	; (800621c <HAL_DMA_Start_IT+0x224>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d00e      	beq.n	80060e6 <HAL_DMA_Start_IT+0xee>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a54      	ldr	r2, [pc, #336]	; (8006220 <HAL_DMA_Start_IT+0x228>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d009      	beq.n	80060e6 <HAL_DMA_Start_IT+0xee>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a53      	ldr	r2, [pc, #332]	; (8006224 <HAL_DMA_Start_IT+0x22c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d004      	beq.n	80060e6 <HAL_DMA_Start_IT+0xee>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a51      	ldr	r2, [pc, #324]	; (8006228 <HAL_DMA_Start_IT+0x230>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d108      	bne.n	80060f8 <HAL_DMA_Start_IT+0x100>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0201 	bic.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	e007      	b.n	8006108 <HAL_DMA_Start_IT+0x110>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0201 	bic.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f001 fe6a 	bl	8007de8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a34      	ldr	r2, [pc, #208]	; (80061ec <HAL_DMA_Start_IT+0x1f4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d04a      	beq.n	80061b4 <HAL_DMA_Start_IT+0x1bc>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a33      	ldr	r2, [pc, #204]	; (80061f0 <HAL_DMA_Start_IT+0x1f8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d045      	beq.n	80061b4 <HAL_DMA_Start_IT+0x1bc>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a31      	ldr	r2, [pc, #196]	; (80061f4 <HAL_DMA_Start_IT+0x1fc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d040      	beq.n	80061b4 <HAL_DMA_Start_IT+0x1bc>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a30      	ldr	r2, [pc, #192]	; (80061f8 <HAL_DMA_Start_IT+0x200>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d03b      	beq.n	80061b4 <HAL_DMA_Start_IT+0x1bc>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a2e      	ldr	r2, [pc, #184]	; (80061fc <HAL_DMA_Start_IT+0x204>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d036      	beq.n	80061b4 <HAL_DMA_Start_IT+0x1bc>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a2d      	ldr	r2, [pc, #180]	; (8006200 <HAL_DMA_Start_IT+0x208>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d031      	beq.n	80061b4 <HAL_DMA_Start_IT+0x1bc>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a2b      	ldr	r2, [pc, #172]	; (8006204 <HAL_DMA_Start_IT+0x20c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d02c      	beq.n	80061b4 <HAL_DMA_Start_IT+0x1bc>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a2a      	ldr	r2, [pc, #168]	; (8006208 <HAL_DMA_Start_IT+0x210>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d027      	beq.n	80061b4 <HAL_DMA_Start_IT+0x1bc>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a28      	ldr	r2, [pc, #160]	; (800620c <HAL_DMA_Start_IT+0x214>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d022      	beq.n	80061b4 <HAL_DMA_Start_IT+0x1bc>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a27      	ldr	r2, [pc, #156]	; (8006210 <HAL_DMA_Start_IT+0x218>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d01d      	beq.n	80061b4 <HAL_DMA_Start_IT+0x1bc>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a25      	ldr	r2, [pc, #148]	; (8006214 <HAL_DMA_Start_IT+0x21c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d018      	beq.n	80061b4 <HAL_DMA_Start_IT+0x1bc>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a24      	ldr	r2, [pc, #144]	; (8006218 <HAL_DMA_Start_IT+0x220>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d013      	beq.n	80061b4 <HAL_DMA_Start_IT+0x1bc>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a22      	ldr	r2, [pc, #136]	; (800621c <HAL_DMA_Start_IT+0x224>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00e      	beq.n	80061b4 <HAL_DMA_Start_IT+0x1bc>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a21      	ldr	r2, [pc, #132]	; (8006220 <HAL_DMA_Start_IT+0x228>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d009      	beq.n	80061b4 <HAL_DMA_Start_IT+0x1bc>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a1f      	ldr	r2, [pc, #124]	; (8006224 <HAL_DMA_Start_IT+0x22c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d004      	beq.n	80061b4 <HAL_DMA_Start_IT+0x1bc>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a1e      	ldr	r2, [pc, #120]	; (8006228 <HAL_DMA_Start_IT+0x230>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d101      	bne.n	80061b8 <HAL_DMA_Start_IT+0x1c0>
 80061b4:	2301      	movs	r3, #1
 80061b6:	e000      	b.n	80061ba <HAL_DMA_Start_IT+0x1c2>
 80061b8:	2300      	movs	r3, #0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d036      	beq.n	800622c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f023 021e 	bic.w	r2, r3, #30
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0216 	orr.w	r2, r2, #22
 80061d0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d03e      	beq.n	8006258 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0208 	orr.w	r2, r2, #8
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	e035      	b.n	8006258 <HAL_DMA_Start_IT+0x260>
 80061ec:	40020010 	.word	0x40020010
 80061f0:	40020028 	.word	0x40020028
 80061f4:	40020040 	.word	0x40020040
 80061f8:	40020058 	.word	0x40020058
 80061fc:	40020070 	.word	0x40020070
 8006200:	40020088 	.word	0x40020088
 8006204:	400200a0 	.word	0x400200a0
 8006208:	400200b8 	.word	0x400200b8
 800620c:	40020410 	.word	0x40020410
 8006210:	40020428 	.word	0x40020428
 8006214:	40020440 	.word	0x40020440
 8006218:	40020458 	.word	0x40020458
 800621c:	40020470 	.word	0x40020470
 8006220:	40020488 	.word	0x40020488
 8006224:	400204a0 	.word	0x400204a0
 8006228:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f023 020e 	bic.w	r2, r3, #14
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 020a 	orr.w	r2, r2, #10
 800623e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006244:	2b00      	cmp	r3, #0
 8006246:	d007      	beq.n	8006258 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0204 	orr.w	r2, r2, #4
 8006256:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a83      	ldr	r2, [pc, #524]	; (800646c <HAL_DMA_Start_IT+0x474>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d072      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a82      	ldr	r2, [pc, #520]	; (8006470 <HAL_DMA_Start_IT+0x478>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d06d      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a80      	ldr	r2, [pc, #512]	; (8006474 <HAL_DMA_Start_IT+0x47c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d068      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a7f      	ldr	r2, [pc, #508]	; (8006478 <HAL_DMA_Start_IT+0x480>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d063      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a7d      	ldr	r2, [pc, #500]	; (800647c <HAL_DMA_Start_IT+0x484>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d05e      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a7c      	ldr	r2, [pc, #496]	; (8006480 <HAL_DMA_Start_IT+0x488>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d059      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a7a      	ldr	r2, [pc, #488]	; (8006484 <HAL_DMA_Start_IT+0x48c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d054      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a79      	ldr	r2, [pc, #484]	; (8006488 <HAL_DMA_Start_IT+0x490>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d04f      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a77      	ldr	r2, [pc, #476]	; (800648c <HAL_DMA_Start_IT+0x494>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d04a      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a76      	ldr	r2, [pc, #472]	; (8006490 <HAL_DMA_Start_IT+0x498>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d045      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a74      	ldr	r2, [pc, #464]	; (8006494 <HAL_DMA_Start_IT+0x49c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d040      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a73      	ldr	r2, [pc, #460]	; (8006498 <HAL_DMA_Start_IT+0x4a0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d03b      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a71      	ldr	r2, [pc, #452]	; (800649c <HAL_DMA_Start_IT+0x4a4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d036      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a70      	ldr	r2, [pc, #448]	; (80064a0 <HAL_DMA_Start_IT+0x4a8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d031      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a6e      	ldr	r2, [pc, #440]	; (80064a4 <HAL_DMA_Start_IT+0x4ac>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d02c      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a6d      	ldr	r2, [pc, #436]	; (80064a8 <HAL_DMA_Start_IT+0x4b0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d027      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a6b      	ldr	r2, [pc, #428]	; (80064ac <HAL_DMA_Start_IT+0x4b4>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d022      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a6a      	ldr	r2, [pc, #424]	; (80064b0 <HAL_DMA_Start_IT+0x4b8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d01d      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a68      	ldr	r2, [pc, #416]	; (80064b4 <HAL_DMA_Start_IT+0x4bc>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d018      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a67      	ldr	r2, [pc, #412]	; (80064b8 <HAL_DMA_Start_IT+0x4c0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d013      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a65      	ldr	r2, [pc, #404]	; (80064bc <HAL_DMA_Start_IT+0x4c4>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d00e      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a64      	ldr	r2, [pc, #400]	; (80064c0 <HAL_DMA_Start_IT+0x4c8>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d009      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a62      	ldr	r2, [pc, #392]	; (80064c4 <HAL_DMA_Start_IT+0x4cc>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d004      	beq.n	8006348 <HAL_DMA_Start_IT+0x350>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a61      	ldr	r2, [pc, #388]	; (80064c8 <HAL_DMA_Start_IT+0x4d0>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d101      	bne.n	800634c <HAL_DMA_Start_IT+0x354>
 8006348:	2301      	movs	r3, #1
 800634a:	e000      	b.n	800634e <HAL_DMA_Start_IT+0x356>
 800634c:	2300      	movs	r3, #0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d01a      	beq.n	8006388 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d007      	beq.n	8006370 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800636a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800636e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d007      	beq.n	8006388 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006382:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006386:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a37      	ldr	r2, [pc, #220]	; (800646c <HAL_DMA_Start_IT+0x474>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d04a      	beq.n	8006428 <HAL_DMA_Start_IT+0x430>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a36      	ldr	r2, [pc, #216]	; (8006470 <HAL_DMA_Start_IT+0x478>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d045      	beq.n	8006428 <HAL_DMA_Start_IT+0x430>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a34      	ldr	r2, [pc, #208]	; (8006474 <HAL_DMA_Start_IT+0x47c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d040      	beq.n	8006428 <HAL_DMA_Start_IT+0x430>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a33      	ldr	r2, [pc, #204]	; (8006478 <HAL_DMA_Start_IT+0x480>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d03b      	beq.n	8006428 <HAL_DMA_Start_IT+0x430>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a31      	ldr	r2, [pc, #196]	; (800647c <HAL_DMA_Start_IT+0x484>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d036      	beq.n	8006428 <HAL_DMA_Start_IT+0x430>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a30      	ldr	r2, [pc, #192]	; (8006480 <HAL_DMA_Start_IT+0x488>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d031      	beq.n	8006428 <HAL_DMA_Start_IT+0x430>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a2e      	ldr	r2, [pc, #184]	; (8006484 <HAL_DMA_Start_IT+0x48c>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d02c      	beq.n	8006428 <HAL_DMA_Start_IT+0x430>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a2d      	ldr	r2, [pc, #180]	; (8006488 <HAL_DMA_Start_IT+0x490>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d027      	beq.n	8006428 <HAL_DMA_Start_IT+0x430>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a2b      	ldr	r2, [pc, #172]	; (800648c <HAL_DMA_Start_IT+0x494>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d022      	beq.n	8006428 <HAL_DMA_Start_IT+0x430>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a2a      	ldr	r2, [pc, #168]	; (8006490 <HAL_DMA_Start_IT+0x498>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d01d      	beq.n	8006428 <HAL_DMA_Start_IT+0x430>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a28      	ldr	r2, [pc, #160]	; (8006494 <HAL_DMA_Start_IT+0x49c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d018      	beq.n	8006428 <HAL_DMA_Start_IT+0x430>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a27      	ldr	r2, [pc, #156]	; (8006498 <HAL_DMA_Start_IT+0x4a0>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d013      	beq.n	8006428 <HAL_DMA_Start_IT+0x430>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a25      	ldr	r2, [pc, #148]	; (800649c <HAL_DMA_Start_IT+0x4a4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00e      	beq.n	8006428 <HAL_DMA_Start_IT+0x430>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a24      	ldr	r2, [pc, #144]	; (80064a0 <HAL_DMA_Start_IT+0x4a8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d009      	beq.n	8006428 <HAL_DMA_Start_IT+0x430>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a22      	ldr	r2, [pc, #136]	; (80064a4 <HAL_DMA_Start_IT+0x4ac>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d004      	beq.n	8006428 <HAL_DMA_Start_IT+0x430>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a21      	ldr	r2, [pc, #132]	; (80064a8 <HAL_DMA_Start_IT+0x4b0>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d108      	bne.n	800643a <HAL_DMA_Start_IT+0x442>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f042 0201 	orr.w	r2, r2, #1
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	e012      	b.n	8006460 <HAL_DMA_Start_IT+0x468>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0201 	orr.w	r2, r2, #1
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	e009      	b.n	8006460 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006452:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	40020010 	.word	0x40020010
 8006470:	40020028 	.word	0x40020028
 8006474:	40020040 	.word	0x40020040
 8006478:	40020058 	.word	0x40020058
 800647c:	40020070 	.word	0x40020070
 8006480:	40020088 	.word	0x40020088
 8006484:	400200a0 	.word	0x400200a0
 8006488:	400200b8 	.word	0x400200b8
 800648c:	40020410 	.word	0x40020410
 8006490:	40020428 	.word	0x40020428
 8006494:	40020440 	.word	0x40020440
 8006498:	40020458 	.word	0x40020458
 800649c:	40020470 	.word	0x40020470
 80064a0:	40020488 	.word	0x40020488
 80064a4:	400204a0 	.word	0x400204a0
 80064a8:	400204b8 	.word	0x400204b8
 80064ac:	58025408 	.word	0x58025408
 80064b0:	5802541c 	.word	0x5802541c
 80064b4:	58025430 	.word	0x58025430
 80064b8:	58025444 	.word	0x58025444
 80064bc:	58025458 	.word	0x58025458
 80064c0:	5802546c 	.word	0x5802546c
 80064c4:	58025480 	.word	0x58025480
 80064c8:	58025494 	.word	0x58025494

080064cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80064d4:	f7fe ff32 	bl	800533c <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e2dc      	b.n	8006a9e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d008      	beq.n	8006502 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2280      	movs	r2, #128	; 0x80
 80064f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e2cd      	b.n	8006a9e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a76      	ldr	r2, [pc, #472]	; (80066e0 <HAL_DMA_Abort+0x214>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d04a      	beq.n	80065a2 <HAL_DMA_Abort+0xd6>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a74      	ldr	r2, [pc, #464]	; (80066e4 <HAL_DMA_Abort+0x218>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d045      	beq.n	80065a2 <HAL_DMA_Abort+0xd6>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a73      	ldr	r2, [pc, #460]	; (80066e8 <HAL_DMA_Abort+0x21c>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d040      	beq.n	80065a2 <HAL_DMA_Abort+0xd6>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a71      	ldr	r2, [pc, #452]	; (80066ec <HAL_DMA_Abort+0x220>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d03b      	beq.n	80065a2 <HAL_DMA_Abort+0xd6>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a70      	ldr	r2, [pc, #448]	; (80066f0 <HAL_DMA_Abort+0x224>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d036      	beq.n	80065a2 <HAL_DMA_Abort+0xd6>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a6e      	ldr	r2, [pc, #440]	; (80066f4 <HAL_DMA_Abort+0x228>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d031      	beq.n	80065a2 <HAL_DMA_Abort+0xd6>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a6d      	ldr	r2, [pc, #436]	; (80066f8 <HAL_DMA_Abort+0x22c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d02c      	beq.n	80065a2 <HAL_DMA_Abort+0xd6>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a6b      	ldr	r2, [pc, #428]	; (80066fc <HAL_DMA_Abort+0x230>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d027      	beq.n	80065a2 <HAL_DMA_Abort+0xd6>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a6a      	ldr	r2, [pc, #424]	; (8006700 <HAL_DMA_Abort+0x234>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d022      	beq.n	80065a2 <HAL_DMA_Abort+0xd6>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a68      	ldr	r2, [pc, #416]	; (8006704 <HAL_DMA_Abort+0x238>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d01d      	beq.n	80065a2 <HAL_DMA_Abort+0xd6>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a67      	ldr	r2, [pc, #412]	; (8006708 <HAL_DMA_Abort+0x23c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d018      	beq.n	80065a2 <HAL_DMA_Abort+0xd6>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a65      	ldr	r2, [pc, #404]	; (800670c <HAL_DMA_Abort+0x240>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d013      	beq.n	80065a2 <HAL_DMA_Abort+0xd6>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a64      	ldr	r2, [pc, #400]	; (8006710 <HAL_DMA_Abort+0x244>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d00e      	beq.n	80065a2 <HAL_DMA_Abort+0xd6>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a62      	ldr	r2, [pc, #392]	; (8006714 <HAL_DMA_Abort+0x248>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d009      	beq.n	80065a2 <HAL_DMA_Abort+0xd6>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a61      	ldr	r2, [pc, #388]	; (8006718 <HAL_DMA_Abort+0x24c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d004      	beq.n	80065a2 <HAL_DMA_Abort+0xd6>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a5f      	ldr	r2, [pc, #380]	; (800671c <HAL_DMA_Abort+0x250>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d101      	bne.n	80065a6 <HAL_DMA_Abort+0xda>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <HAL_DMA_Abort+0xdc>
 80065a6:	2300      	movs	r3, #0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d013      	beq.n	80065d4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 021e 	bic.w	r2, r2, #30
 80065ba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	695a      	ldr	r2, [r3, #20]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065ca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	e00a      	b.n	80065ea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 020e 	bic.w	r2, r2, #14
 80065e2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a3c      	ldr	r2, [pc, #240]	; (80066e0 <HAL_DMA_Abort+0x214>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d072      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a3a      	ldr	r2, [pc, #232]	; (80066e4 <HAL_DMA_Abort+0x218>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d06d      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a39      	ldr	r2, [pc, #228]	; (80066e8 <HAL_DMA_Abort+0x21c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d068      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a37      	ldr	r2, [pc, #220]	; (80066ec <HAL_DMA_Abort+0x220>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d063      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a36      	ldr	r2, [pc, #216]	; (80066f0 <HAL_DMA_Abort+0x224>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d05e      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a34      	ldr	r2, [pc, #208]	; (80066f4 <HAL_DMA_Abort+0x228>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d059      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a33      	ldr	r2, [pc, #204]	; (80066f8 <HAL_DMA_Abort+0x22c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d054      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a31      	ldr	r2, [pc, #196]	; (80066fc <HAL_DMA_Abort+0x230>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d04f      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a30      	ldr	r2, [pc, #192]	; (8006700 <HAL_DMA_Abort+0x234>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d04a      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a2e      	ldr	r2, [pc, #184]	; (8006704 <HAL_DMA_Abort+0x238>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d045      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a2d      	ldr	r2, [pc, #180]	; (8006708 <HAL_DMA_Abort+0x23c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d040      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a2b      	ldr	r2, [pc, #172]	; (800670c <HAL_DMA_Abort+0x240>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d03b      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a2a      	ldr	r2, [pc, #168]	; (8006710 <HAL_DMA_Abort+0x244>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d036      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a28      	ldr	r2, [pc, #160]	; (8006714 <HAL_DMA_Abort+0x248>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d031      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a27      	ldr	r2, [pc, #156]	; (8006718 <HAL_DMA_Abort+0x24c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d02c      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a25      	ldr	r2, [pc, #148]	; (800671c <HAL_DMA_Abort+0x250>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d027      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a24      	ldr	r2, [pc, #144]	; (8006720 <HAL_DMA_Abort+0x254>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d022      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a22      	ldr	r2, [pc, #136]	; (8006724 <HAL_DMA_Abort+0x258>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d01d      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a21      	ldr	r2, [pc, #132]	; (8006728 <HAL_DMA_Abort+0x25c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d018      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a1f      	ldr	r2, [pc, #124]	; (800672c <HAL_DMA_Abort+0x260>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d013      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a1e      	ldr	r2, [pc, #120]	; (8006730 <HAL_DMA_Abort+0x264>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00e      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a1c      	ldr	r2, [pc, #112]	; (8006734 <HAL_DMA_Abort+0x268>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d009      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a1b      	ldr	r2, [pc, #108]	; (8006738 <HAL_DMA_Abort+0x26c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d004      	beq.n	80066da <HAL_DMA_Abort+0x20e>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a19      	ldr	r2, [pc, #100]	; (800673c <HAL_DMA_Abort+0x270>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d132      	bne.n	8006740 <HAL_DMA_Abort+0x274>
 80066da:	2301      	movs	r3, #1
 80066dc:	e031      	b.n	8006742 <HAL_DMA_Abort+0x276>
 80066de:	bf00      	nop
 80066e0:	40020010 	.word	0x40020010
 80066e4:	40020028 	.word	0x40020028
 80066e8:	40020040 	.word	0x40020040
 80066ec:	40020058 	.word	0x40020058
 80066f0:	40020070 	.word	0x40020070
 80066f4:	40020088 	.word	0x40020088
 80066f8:	400200a0 	.word	0x400200a0
 80066fc:	400200b8 	.word	0x400200b8
 8006700:	40020410 	.word	0x40020410
 8006704:	40020428 	.word	0x40020428
 8006708:	40020440 	.word	0x40020440
 800670c:	40020458 	.word	0x40020458
 8006710:	40020470 	.word	0x40020470
 8006714:	40020488 	.word	0x40020488
 8006718:	400204a0 	.word	0x400204a0
 800671c:	400204b8 	.word	0x400204b8
 8006720:	58025408 	.word	0x58025408
 8006724:	5802541c 	.word	0x5802541c
 8006728:	58025430 	.word	0x58025430
 800672c:	58025444 	.word	0x58025444
 8006730:	58025458 	.word	0x58025458
 8006734:	5802546c 	.word	0x5802546c
 8006738:	58025480 	.word	0x58025480
 800673c:	58025494 	.word	0x58025494
 8006740:	2300      	movs	r3, #0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d007      	beq.n	8006756 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006750:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006754:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a6d      	ldr	r2, [pc, #436]	; (8006910 <HAL_DMA_Abort+0x444>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d04a      	beq.n	80067f6 <HAL_DMA_Abort+0x32a>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a6b      	ldr	r2, [pc, #428]	; (8006914 <HAL_DMA_Abort+0x448>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d045      	beq.n	80067f6 <HAL_DMA_Abort+0x32a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a6a      	ldr	r2, [pc, #424]	; (8006918 <HAL_DMA_Abort+0x44c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d040      	beq.n	80067f6 <HAL_DMA_Abort+0x32a>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a68      	ldr	r2, [pc, #416]	; (800691c <HAL_DMA_Abort+0x450>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d03b      	beq.n	80067f6 <HAL_DMA_Abort+0x32a>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a67      	ldr	r2, [pc, #412]	; (8006920 <HAL_DMA_Abort+0x454>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d036      	beq.n	80067f6 <HAL_DMA_Abort+0x32a>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a65      	ldr	r2, [pc, #404]	; (8006924 <HAL_DMA_Abort+0x458>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d031      	beq.n	80067f6 <HAL_DMA_Abort+0x32a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a64      	ldr	r2, [pc, #400]	; (8006928 <HAL_DMA_Abort+0x45c>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d02c      	beq.n	80067f6 <HAL_DMA_Abort+0x32a>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a62      	ldr	r2, [pc, #392]	; (800692c <HAL_DMA_Abort+0x460>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d027      	beq.n	80067f6 <HAL_DMA_Abort+0x32a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a61      	ldr	r2, [pc, #388]	; (8006930 <HAL_DMA_Abort+0x464>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d022      	beq.n	80067f6 <HAL_DMA_Abort+0x32a>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a5f      	ldr	r2, [pc, #380]	; (8006934 <HAL_DMA_Abort+0x468>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d01d      	beq.n	80067f6 <HAL_DMA_Abort+0x32a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a5e      	ldr	r2, [pc, #376]	; (8006938 <HAL_DMA_Abort+0x46c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d018      	beq.n	80067f6 <HAL_DMA_Abort+0x32a>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a5c      	ldr	r2, [pc, #368]	; (800693c <HAL_DMA_Abort+0x470>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d013      	beq.n	80067f6 <HAL_DMA_Abort+0x32a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a5b      	ldr	r2, [pc, #364]	; (8006940 <HAL_DMA_Abort+0x474>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00e      	beq.n	80067f6 <HAL_DMA_Abort+0x32a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a59      	ldr	r2, [pc, #356]	; (8006944 <HAL_DMA_Abort+0x478>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d009      	beq.n	80067f6 <HAL_DMA_Abort+0x32a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a58      	ldr	r2, [pc, #352]	; (8006948 <HAL_DMA_Abort+0x47c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d004      	beq.n	80067f6 <HAL_DMA_Abort+0x32a>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a56      	ldr	r2, [pc, #344]	; (800694c <HAL_DMA_Abort+0x480>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d108      	bne.n	8006808 <HAL_DMA_Abort+0x33c>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0201 	bic.w	r2, r2, #1
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	e007      	b.n	8006818 <HAL_DMA_Abort+0x34c>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f022 0201 	bic.w	r2, r2, #1
 8006816:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006818:	e013      	b.n	8006842 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800681a:	f7fe fd8f 	bl	800533c <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b05      	cmp	r3, #5
 8006826:	d90c      	bls.n	8006842 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2220      	movs	r2, #32
 800682c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2203      	movs	r2, #3
 8006832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e12d      	b.n	8006a9e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e5      	bne.n	800681a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a2f      	ldr	r2, [pc, #188]	; (8006910 <HAL_DMA_Abort+0x444>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d04a      	beq.n	80068ee <HAL_DMA_Abort+0x422>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a2d      	ldr	r2, [pc, #180]	; (8006914 <HAL_DMA_Abort+0x448>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d045      	beq.n	80068ee <HAL_DMA_Abort+0x422>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a2c      	ldr	r2, [pc, #176]	; (8006918 <HAL_DMA_Abort+0x44c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d040      	beq.n	80068ee <HAL_DMA_Abort+0x422>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a2a      	ldr	r2, [pc, #168]	; (800691c <HAL_DMA_Abort+0x450>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d03b      	beq.n	80068ee <HAL_DMA_Abort+0x422>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a29      	ldr	r2, [pc, #164]	; (8006920 <HAL_DMA_Abort+0x454>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d036      	beq.n	80068ee <HAL_DMA_Abort+0x422>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a27      	ldr	r2, [pc, #156]	; (8006924 <HAL_DMA_Abort+0x458>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d031      	beq.n	80068ee <HAL_DMA_Abort+0x422>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a26      	ldr	r2, [pc, #152]	; (8006928 <HAL_DMA_Abort+0x45c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d02c      	beq.n	80068ee <HAL_DMA_Abort+0x422>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a24      	ldr	r2, [pc, #144]	; (800692c <HAL_DMA_Abort+0x460>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d027      	beq.n	80068ee <HAL_DMA_Abort+0x422>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a23      	ldr	r2, [pc, #140]	; (8006930 <HAL_DMA_Abort+0x464>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d022      	beq.n	80068ee <HAL_DMA_Abort+0x422>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a21      	ldr	r2, [pc, #132]	; (8006934 <HAL_DMA_Abort+0x468>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d01d      	beq.n	80068ee <HAL_DMA_Abort+0x422>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a20      	ldr	r2, [pc, #128]	; (8006938 <HAL_DMA_Abort+0x46c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d018      	beq.n	80068ee <HAL_DMA_Abort+0x422>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a1e      	ldr	r2, [pc, #120]	; (800693c <HAL_DMA_Abort+0x470>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d013      	beq.n	80068ee <HAL_DMA_Abort+0x422>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a1d      	ldr	r2, [pc, #116]	; (8006940 <HAL_DMA_Abort+0x474>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00e      	beq.n	80068ee <HAL_DMA_Abort+0x422>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1b      	ldr	r2, [pc, #108]	; (8006944 <HAL_DMA_Abort+0x478>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d009      	beq.n	80068ee <HAL_DMA_Abort+0x422>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a1a      	ldr	r2, [pc, #104]	; (8006948 <HAL_DMA_Abort+0x47c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_DMA_Abort+0x422>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a18      	ldr	r2, [pc, #96]	; (800694c <HAL_DMA_Abort+0x480>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d101      	bne.n	80068f2 <HAL_DMA_Abort+0x426>
 80068ee:	2301      	movs	r3, #1
 80068f0:	e000      	b.n	80068f4 <HAL_DMA_Abort+0x428>
 80068f2:	2300      	movs	r3, #0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d02b      	beq.n	8006950 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068fc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006902:	f003 031f 	and.w	r3, r3, #31
 8006906:	223f      	movs	r2, #63	; 0x3f
 8006908:	409a      	lsls	r2, r3
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	609a      	str	r2, [r3, #8]
 800690e:	e02a      	b.n	8006966 <HAL_DMA_Abort+0x49a>
 8006910:	40020010 	.word	0x40020010
 8006914:	40020028 	.word	0x40020028
 8006918:	40020040 	.word	0x40020040
 800691c:	40020058 	.word	0x40020058
 8006920:	40020070 	.word	0x40020070
 8006924:	40020088 	.word	0x40020088
 8006928:	400200a0 	.word	0x400200a0
 800692c:	400200b8 	.word	0x400200b8
 8006930:	40020410 	.word	0x40020410
 8006934:	40020428 	.word	0x40020428
 8006938:	40020440 	.word	0x40020440
 800693c:	40020458 	.word	0x40020458
 8006940:	40020470 	.word	0x40020470
 8006944:	40020488 	.word	0x40020488
 8006948:	400204a0 	.word	0x400204a0
 800694c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006954:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695a:	f003 031f 	and.w	r3, r3, #31
 800695e:	2201      	movs	r2, #1
 8006960:	409a      	lsls	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a4f      	ldr	r2, [pc, #316]	; (8006aa8 <HAL_DMA_Abort+0x5dc>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d072      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a4d      	ldr	r2, [pc, #308]	; (8006aac <HAL_DMA_Abort+0x5e0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d06d      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a4c      	ldr	r2, [pc, #304]	; (8006ab0 <HAL_DMA_Abort+0x5e4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d068      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a4a      	ldr	r2, [pc, #296]	; (8006ab4 <HAL_DMA_Abort+0x5e8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d063      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a49      	ldr	r2, [pc, #292]	; (8006ab8 <HAL_DMA_Abort+0x5ec>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d05e      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a47      	ldr	r2, [pc, #284]	; (8006abc <HAL_DMA_Abort+0x5f0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d059      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a46      	ldr	r2, [pc, #280]	; (8006ac0 <HAL_DMA_Abort+0x5f4>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d054      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a44      	ldr	r2, [pc, #272]	; (8006ac4 <HAL_DMA_Abort+0x5f8>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d04f      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a43      	ldr	r2, [pc, #268]	; (8006ac8 <HAL_DMA_Abort+0x5fc>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d04a      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a41      	ldr	r2, [pc, #260]	; (8006acc <HAL_DMA_Abort+0x600>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d045      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a40      	ldr	r2, [pc, #256]	; (8006ad0 <HAL_DMA_Abort+0x604>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d040      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a3e      	ldr	r2, [pc, #248]	; (8006ad4 <HAL_DMA_Abort+0x608>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d03b      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a3d      	ldr	r2, [pc, #244]	; (8006ad8 <HAL_DMA_Abort+0x60c>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d036      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a3b      	ldr	r2, [pc, #236]	; (8006adc <HAL_DMA_Abort+0x610>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d031      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a3a      	ldr	r2, [pc, #232]	; (8006ae0 <HAL_DMA_Abort+0x614>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d02c      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a38      	ldr	r2, [pc, #224]	; (8006ae4 <HAL_DMA_Abort+0x618>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d027      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a37      	ldr	r2, [pc, #220]	; (8006ae8 <HAL_DMA_Abort+0x61c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d022      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a35      	ldr	r2, [pc, #212]	; (8006aec <HAL_DMA_Abort+0x620>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d01d      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a34      	ldr	r2, [pc, #208]	; (8006af0 <HAL_DMA_Abort+0x624>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d018      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a32      	ldr	r2, [pc, #200]	; (8006af4 <HAL_DMA_Abort+0x628>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d013      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a31      	ldr	r2, [pc, #196]	; (8006af8 <HAL_DMA_Abort+0x62c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d00e      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a2f      	ldr	r2, [pc, #188]	; (8006afc <HAL_DMA_Abort+0x630>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d009      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a2e      	ldr	r2, [pc, #184]	; (8006b00 <HAL_DMA_Abort+0x634>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d004      	beq.n	8006a56 <HAL_DMA_Abort+0x58a>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a2c      	ldr	r2, [pc, #176]	; (8006b04 <HAL_DMA_Abort+0x638>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d101      	bne.n	8006a5a <HAL_DMA_Abort+0x58e>
 8006a56:	2301      	movs	r3, #1
 8006a58:	e000      	b.n	8006a5c <HAL_DMA_Abort+0x590>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d015      	beq.n	8006a8c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a68:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00c      	beq.n	8006a8c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a80:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a8a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	40020010 	.word	0x40020010
 8006aac:	40020028 	.word	0x40020028
 8006ab0:	40020040 	.word	0x40020040
 8006ab4:	40020058 	.word	0x40020058
 8006ab8:	40020070 	.word	0x40020070
 8006abc:	40020088 	.word	0x40020088
 8006ac0:	400200a0 	.word	0x400200a0
 8006ac4:	400200b8 	.word	0x400200b8
 8006ac8:	40020410 	.word	0x40020410
 8006acc:	40020428 	.word	0x40020428
 8006ad0:	40020440 	.word	0x40020440
 8006ad4:	40020458 	.word	0x40020458
 8006ad8:	40020470 	.word	0x40020470
 8006adc:	40020488 	.word	0x40020488
 8006ae0:	400204a0 	.word	0x400204a0
 8006ae4:	400204b8 	.word	0x400204b8
 8006ae8:	58025408 	.word	0x58025408
 8006aec:	5802541c 	.word	0x5802541c
 8006af0:	58025430 	.word	0x58025430
 8006af4:	58025444 	.word	0x58025444
 8006af8:	58025458 	.word	0x58025458
 8006afc:	5802546c 	.word	0x5802546c
 8006b00:	58025480 	.word	0x58025480
 8006b04:	58025494 	.word	0x58025494

08006b08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e237      	b.n	8006f8a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d004      	beq.n	8006b30 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2280      	movs	r2, #128	; 0x80
 8006b2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e22c      	b.n	8006f8a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a5c      	ldr	r2, [pc, #368]	; (8006ca8 <HAL_DMA_Abort_IT+0x1a0>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d04a      	beq.n	8006bd0 <HAL_DMA_Abort_IT+0xc8>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a5b      	ldr	r2, [pc, #364]	; (8006cac <HAL_DMA_Abort_IT+0x1a4>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d045      	beq.n	8006bd0 <HAL_DMA_Abort_IT+0xc8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a59      	ldr	r2, [pc, #356]	; (8006cb0 <HAL_DMA_Abort_IT+0x1a8>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d040      	beq.n	8006bd0 <HAL_DMA_Abort_IT+0xc8>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a58      	ldr	r2, [pc, #352]	; (8006cb4 <HAL_DMA_Abort_IT+0x1ac>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d03b      	beq.n	8006bd0 <HAL_DMA_Abort_IT+0xc8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a56      	ldr	r2, [pc, #344]	; (8006cb8 <HAL_DMA_Abort_IT+0x1b0>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d036      	beq.n	8006bd0 <HAL_DMA_Abort_IT+0xc8>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a55      	ldr	r2, [pc, #340]	; (8006cbc <HAL_DMA_Abort_IT+0x1b4>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d031      	beq.n	8006bd0 <HAL_DMA_Abort_IT+0xc8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a53      	ldr	r2, [pc, #332]	; (8006cc0 <HAL_DMA_Abort_IT+0x1b8>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d02c      	beq.n	8006bd0 <HAL_DMA_Abort_IT+0xc8>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a52      	ldr	r2, [pc, #328]	; (8006cc4 <HAL_DMA_Abort_IT+0x1bc>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d027      	beq.n	8006bd0 <HAL_DMA_Abort_IT+0xc8>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a50      	ldr	r2, [pc, #320]	; (8006cc8 <HAL_DMA_Abort_IT+0x1c0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d022      	beq.n	8006bd0 <HAL_DMA_Abort_IT+0xc8>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a4f      	ldr	r2, [pc, #316]	; (8006ccc <HAL_DMA_Abort_IT+0x1c4>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d01d      	beq.n	8006bd0 <HAL_DMA_Abort_IT+0xc8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a4d      	ldr	r2, [pc, #308]	; (8006cd0 <HAL_DMA_Abort_IT+0x1c8>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d018      	beq.n	8006bd0 <HAL_DMA_Abort_IT+0xc8>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a4c      	ldr	r2, [pc, #304]	; (8006cd4 <HAL_DMA_Abort_IT+0x1cc>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d013      	beq.n	8006bd0 <HAL_DMA_Abort_IT+0xc8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a4a      	ldr	r2, [pc, #296]	; (8006cd8 <HAL_DMA_Abort_IT+0x1d0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00e      	beq.n	8006bd0 <HAL_DMA_Abort_IT+0xc8>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a49      	ldr	r2, [pc, #292]	; (8006cdc <HAL_DMA_Abort_IT+0x1d4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d009      	beq.n	8006bd0 <HAL_DMA_Abort_IT+0xc8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a47      	ldr	r2, [pc, #284]	; (8006ce0 <HAL_DMA_Abort_IT+0x1d8>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d004      	beq.n	8006bd0 <HAL_DMA_Abort_IT+0xc8>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a46      	ldr	r2, [pc, #280]	; (8006ce4 <HAL_DMA_Abort_IT+0x1dc>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d101      	bne.n	8006bd4 <HAL_DMA_Abort_IT+0xcc>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e000      	b.n	8006bd6 <HAL_DMA_Abort_IT+0xce>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 8086 	beq.w	8006ce8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2204      	movs	r2, #4
 8006be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a2f      	ldr	r2, [pc, #188]	; (8006ca8 <HAL_DMA_Abort_IT+0x1a0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d04a      	beq.n	8006c84 <HAL_DMA_Abort_IT+0x17c>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a2e      	ldr	r2, [pc, #184]	; (8006cac <HAL_DMA_Abort_IT+0x1a4>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d045      	beq.n	8006c84 <HAL_DMA_Abort_IT+0x17c>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a2c      	ldr	r2, [pc, #176]	; (8006cb0 <HAL_DMA_Abort_IT+0x1a8>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d040      	beq.n	8006c84 <HAL_DMA_Abort_IT+0x17c>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a2b      	ldr	r2, [pc, #172]	; (8006cb4 <HAL_DMA_Abort_IT+0x1ac>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d03b      	beq.n	8006c84 <HAL_DMA_Abort_IT+0x17c>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a29      	ldr	r2, [pc, #164]	; (8006cb8 <HAL_DMA_Abort_IT+0x1b0>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d036      	beq.n	8006c84 <HAL_DMA_Abort_IT+0x17c>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a28      	ldr	r2, [pc, #160]	; (8006cbc <HAL_DMA_Abort_IT+0x1b4>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d031      	beq.n	8006c84 <HAL_DMA_Abort_IT+0x17c>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a26      	ldr	r2, [pc, #152]	; (8006cc0 <HAL_DMA_Abort_IT+0x1b8>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d02c      	beq.n	8006c84 <HAL_DMA_Abort_IT+0x17c>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a25      	ldr	r2, [pc, #148]	; (8006cc4 <HAL_DMA_Abort_IT+0x1bc>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d027      	beq.n	8006c84 <HAL_DMA_Abort_IT+0x17c>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a23      	ldr	r2, [pc, #140]	; (8006cc8 <HAL_DMA_Abort_IT+0x1c0>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d022      	beq.n	8006c84 <HAL_DMA_Abort_IT+0x17c>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a22      	ldr	r2, [pc, #136]	; (8006ccc <HAL_DMA_Abort_IT+0x1c4>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d01d      	beq.n	8006c84 <HAL_DMA_Abort_IT+0x17c>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a20      	ldr	r2, [pc, #128]	; (8006cd0 <HAL_DMA_Abort_IT+0x1c8>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d018      	beq.n	8006c84 <HAL_DMA_Abort_IT+0x17c>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a1f      	ldr	r2, [pc, #124]	; (8006cd4 <HAL_DMA_Abort_IT+0x1cc>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d013      	beq.n	8006c84 <HAL_DMA_Abort_IT+0x17c>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a1d      	ldr	r2, [pc, #116]	; (8006cd8 <HAL_DMA_Abort_IT+0x1d0>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d00e      	beq.n	8006c84 <HAL_DMA_Abort_IT+0x17c>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a1c      	ldr	r2, [pc, #112]	; (8006cdc <HAL_DMA_Abort_IT+0x1d4>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d009      	beq.n	8006c84 <HAL_DMA_Abort_IT+0x17c>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a1a      	ldr	r2, [pc, #104]	; (8006ce0 <HAL_DMA_Abort_IT+0x1d8>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d004      	beq.n	8006c84 <HAL_DMA_Abort_IT+0x17c>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a19      	ldr	r2, [pc, #100]	; (8006ce4 <HAL_DMA_Abort_IT+0x1dc>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d108      	bne.n	8006c96 <HAL_DMA_Abort_IT+0x18e>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0201 	bic.w	r2, r2, #1
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	e178      	b.n	8006f88 <HAL_DMA_Abort_IT+0x480>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 0201 	bic.w	r2, r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	e16f      	b.n	8006f88 <HAL_DMA_Abort_IT+0x480>
 8006ca8:	40020010 	.word	0x40020010
 8006cac:	40020028 	.word	0x40020028
 8006cb0:	40020040 	.word	0x40020040
 8006cb4:	40020058 	.word	0x40020058
 8006cb8:	40020070 	.word	0x40020070
 8006cbc:	40020088 	.word	0x40020088
 8006cc0:	400200a0 	.word	0x400200a0
 8006cc4:	400200b8 	.word	0x400200b8
 8006cc8:	40020410 	.word	0x40020410
 8006ccc:	40020428 	.word	0x40020428
 8006cd0:	40020440 	.word	0x40020440
 8006cd4:	40020458 	.word	0x40020458
 8006cd8:	40020470 	.word	0x40020470
 8006cdc:	40020488 	.word	0x40020488
 8006ce0:	400204a0 	.word	0x400204a0
 8006ce4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 020e 	bic.w	r2, r2, #14
 8006cf6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a6c      	ldr	r2, [pc, #432]	; (8006eb0 <HAL_DMA_Abort_IT+0x3a8>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d04a      	beq.n	8006d98 <HAL_DMA_Abort_IT+0x290>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a6b      	ldr	r2, [pc, #428]	; (8006eb4 <HAL_DMA_Abort_IT+0x3ac>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d045      	beq.n	8006d98 <HAL_DMA_Abort_IT+0x290>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a69      	ldr	r2, [pc, #420]	; (8006eb8 <HAL_DMA_Abort_IT+0x3b0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d040      	beq.n	8006d98 <HAL_DMA_Abort_IT+0x290>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a68      	ldr	r2, [pc, #416]	; (8006ebc <HAL_DMA_Abort_IT+0x3b4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d03b      	beq.n	8006d98 <HAL_DMA_Abort_IT+0x290>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a66      	ldr	r2, [pc, #408]	; (8006ec0 <HAL_DMA_Abort_IT+0x3b8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d036      	beq.n	8006d98 <HAL_DMA_Abort_IT+0x290>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a65      	ldr	r2, [pc, #404]	; (8006ec4 <HAL_DMA_Abort_IT+0x3bc>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d031      	beq.n	8006d98 <HAL_DMA_Abort_IT+0x290>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a63      	ldr	r2, [pc, #396]	; (8006ec8 <HAL_DMA_Abort_IT+0x3c0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d02c      	beq.n	8006d98 <HAL_DMA_Abort_IT+0x290>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a62      	ldr	r2, [pc, #392]	; (8006ecc <HAL_DMA_Abort_IT+0x3c4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d027      	beq.n	8006d98 <HAL_DMA_Abort_IT+0x290>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a60      	ldr	r2, [pc, #384]	; (8006ed0 <HAL_DMA_Abort_IT+0x3c8>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d022      	beq.n	8006d98 <HAL_DMA_Abort_IT+0x290>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a5f      	ldr	r2, [pc, #380]	; (8006ed4 <HAL_DMA_Abort_IT+0x3cc>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d01d      	beq.n	8006d98 <HAL_DMA_Abort_IT+0x290>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a5d      	ldr	r2, [pc, #372]	; (8006ed8 <HAL_DMA_Abort_IT+0x3d0>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d018      	beq.n	8006d98 <HAL_DMA_Abort_IT+0x290>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a5c      	ldr	r2, [pc, #368]	; (8006edc <HAL_DMA_Abort_IT+0x3d4>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d013      	beq.n	8006d98 <HAL_DMA_Abort_IT+0x290>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a5a      	ldr	r2, [pc, #360]	; (8006ee0 <HAL_DMA_Abort_IT+0x3d8>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d00e      	beq.n	8006d98 <HAL_DMA_Abort_IT+0x290>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a59      	ldr	r2, [pc, #356]	; (8006ee4 <HAL_DMA_Abort_IT+0x3dc>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d009      	beq.n	8006d98 <HAL_DMA_Abort_IT+0x290>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a57      	ldr	r2, [pc, #348]	; (8006ee8 <HAL_DMA_Abort_IT+0x3e0>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d004      	beq.n	8006d98 <HAL_DMA_Abort_IT+0x290>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a56      	ldr	r2, [pc, #344]	; (8006eec <HAL_DMA_Abort_IT+0x3e4>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d108      	bne.n	8006daa <HAL_DMA_Abort_IT+0x2a2>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 0201 	bic.w	r2, r2, #1
 8006da6:	601a      	str	r2, [r3, #0]
 8006da8:	e007      	b.n	8006dba <HAL_DMA_Abort_IT+0x2b2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0201 	bic.w	r2, r2, #1
 8006db8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a3c      	ldr	r2, [pc, #240]	; (8006eb0 <HAL_DMA_Abort_IT+0x3a8>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d072      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a3a      	ldr	r2, [pc, #232]	; (8006eb4 <HAL_DMA_Abort_IT+0x3ac>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d06d      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a39      	ldr	r2, [pc, #228]	; (8006eb8 <HAL_DMA_Abort_IT+0x3b0>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d068      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a37      	ldr	r2, [pc, #220]	; (8006ebc <HAL_DMA_Abort_IT+0x3b4>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d063      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a36      	ldr	r2, [pc, #216]	; (8006ec0 <HAL_DMA_Abort_IT+0x3b8>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d05e      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a34      	ldr	r2, [pc, #208]	; (8006ec4 <HAL_DMA_Abort_IT+0x3bc>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d059      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a33      	ldr	r2, [pc, #204]	; (8006ec8 <HAL_DMA_Abort_IT+0x3c0>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d054      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a31      	ldr	r2, [pc, #196]	; (8006ecc <HAL_DMA_Abort_IT+0x3c4>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d04f      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a30      	ldr	r2, [pc, #192]	; (8006ed0 <HAL_DMA_Abort_IT+0x3c8>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d04a      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a2e      	ldr	r2, [pc, #184]	; (8006ed4 <HAL_DMA_Abort_IT+0x3cc>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d045      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a2d      	ldr	r2, [pc, #180]	; (8006ed8 <HAL_DMA_Abort_IT+0x3d0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d040      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a2b      	ldr	r2, [pc, #172]	; (8006edc <HAL_DMA_Abort_IT+0x3d4>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d03b      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a2a      	ldr	r2, [pc, #168]	; (8006ee0 <HAL_DMA_Abort_IT+0x3d8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d036      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a28      	ldr	r2, [pc, #160]	; (8006ee4 <HAL_DMA_Abort_IT+0x3dc>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d031      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a27      	ldr	r2, [pc, #156]	; (8006ee8 <HAL_DMA_Abort_IT+0x3e0>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d02c      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a25      	ldr	r2, [pc, #148]	; (8006eec <HAL_DMA_Abort_IT+0x3e4>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d027      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a24      	ldr	r2, [pc, #144]	; (8006ef0 <HAL_DMA_Abort_IT+0x3e8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d022      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a22      	ldr	r2, [pc, #136]	; (8006ef4 <HAL_DMA_Abort_IT+0x3ec>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d01d      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a21      	ldr	r2, [pc, #132]	; (8006ef8 <HAL_DMA_Abort_IT+0x3f0>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d018      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a1f      	ldr	r2, [pc, #124]	; (8006efc <HAL_DMA_Abort_IT+0x3f4>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d013      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a1e      	ldr	r2, [pc, #120]	; (8006f00 <HAL_DMA_Abort_IT+0x3f8>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d00e      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a1c      	ldr	r2, [pc, #112]	; (8006f04 <HAL_DMA_Abort_IT+0x3fc>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d009      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a1b      	ldr	r2, [pc, #108]	; (8006f08 <HAL_DMA_Abort_IT+0x400>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d004      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x3a2>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a19      	ldr	r2, [pc, #100]	; (8006f0c <HAL_DMA_Abort_IT+0x404>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d132      	bne.n	8006f10 <HAL_DMA_Abort_IT+0x408>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e031      	b.n	8006f12 <HAL_DMA_Abort_IT+0x40a>
 8006eae:	bf00      	nop
 8006eb0:	40020010 	.word	0x40020010
 8006eb4:	40020028 	.word	0x40020028
 8006eb8:	40020040 	.word	0x40020040
 8006ebc:	40020058 	.word	0x40020058
 8006ec0:	40020070 	.word	0x40020070
 8006ec4:	40020088 	.word	0x40020088
 8006ec8:	400200a0 	.word	0x400200a0
 8006ecc:	400200b8 	.word	0x400200b8
 8006ed0:	40020410 	.word	0x40020410
 8006ed4:	40020428 	.word	0x40020428
 8006ed8:	40020440 	.word	0x40020440
 8006edc:	40020458 	.word	0x40020458
 8006ee0:	40020470 	.word	0x40020470
 8006ee4:	40020488 	.word	0x40020488
 8006ee8:	400204a0 	.word	0x400204a0
 8006eec:	400204b8 	.word	0x400204b8
 8006ef0:	58025408 	.word	0x58025408
 8006ef4:	5802541c 	.word	0x5802541c
 8006ef8:	58025430 	.word	0x58025430
 8006efc:	58025444 	.word	0x58025444
 8006f00:	58025458 	.word	0x58025458
 8006f04:	5802546c 	.word	0x5802546c
 8006f08:	58025480 	.word	0x58025480
 8006f0c:	58025494 	.word	0x58025494
 8006f10:	2300      	movs	r3, #0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d028      	beq.n	8006f68 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f24:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f30:	f003 031f 	and.w	r3, r3, #31
 8006f34:	2201      	movs	r2, #1
 8006f36:	409a      	lsls	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f44:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00c      	beq.n	8006f68 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f5c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f66:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop

08006f94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08a      	sub	sp, #40	; 0x28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006fa0:	4b67      	ldr	r3, [pc, #412]	; (8007140 <HAL_DMA_IRQHandler+0x1ac>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a67      	ldr	r2, [pc, #412]	; (8007144 <HAL_DMA_IRQHandler+0x1b0>)
 8006fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006faa:	0a9b      	lsrs	r3, r3, #10
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a5f      	ldr	r2, [pc, #380]	; (8007148 <HAL_DMA_IRQHandler+0x1b4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d04a      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a5d      	ldr	r2, [pc, #372]	; (800714c <HAL_DMA_IRQHandler+0x1b8>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d045      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a5c      	ldr	r2, [pc, #368]	; (8007150 <HAL_DMA_IRQHandler+0x1bc>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d040      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a5a      	ldr	r2, [pc, #360]	; (8007154 <HAL_DMA_IRQHandler+0x1c0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d03b      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a59      	ldr	r2, [pc, #356]	; (8007158 <HAL_DMA_IRQHandler+0x1c4>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d036      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a57      	ldr	r2, [pc, #348]	; (800715c <HAL_DMA_IRQHandler+0x1c8>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d031      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a56      	ldr	r2, [pc, #344]	; (8007160 <HAL_DMA_IRQHandler+0x1cc>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d02c      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a54      	ldr	r2, [pc, #336]	; (8007164 <HAL_DMA_IRQHandler+0x1d0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d027      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a53      	ldr	r2, [pc, #332]	; (8007168 <HAL_DMA_IRQHandler+0x1d4>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d022      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a51      	ldr	r2, [pc, #324]	; (800716c <HAL_DMA_IRQHandler+0x1d8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d01d      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a50      	ldr	r2, [pc, #320]	; (8007170 <HAL_DMA_IRQHandler+0x1dc>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d018      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a4e      	ldr	r2, [pc, #312]	; (8007174 <HAL_DMA_IRQHandler+0x1e0>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d013      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a4d      	ldr	r2, [pc, #308]	; (8007178 <HAL_DMA_IRQHandler+0x1e4>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d00e      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a4b      	ldr	r2, [pc, #300]	; (800717c <HAL_DMA_IRQHandler+0x1e8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d009      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a4a      	ldr	r2, [pc, #296]	; (8007180 <HAL_DMA_IRQHandler+0x1ec>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d004      	beq.n	8007066 <HAL_DMA_IRQHandler+0xd2>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a48      	ldr	r2, [pc, #288]	; (8007184 <HAL_DMA_IRQHandler+0x1f0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d101      	bne.n	800706a <HAL_DMA_IRQHandler+0xd6>
 8007066:	2301      	movs	r3, #1
 8007068:	e000      	b.n	800706c <HAL_DMA_IRQHandler+0xd8>
 800706a:	2300      	movs	r3, #0
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 842b 	beq.w	80078c8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007076:	f003 031f 	and.w	r3, r3, #31
 800707a:	2208      	movs	r2, #8
 800707c:	409a      	lsls	r2, r3
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	4013      	ands	r3, r2
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 80a2 	beq.w	80071cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a2e      	ldr	r2, [pc, #184]	; (8007148 <HAL_DMA_IRQHandler+0x1b4>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d04a      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a2d      	ldr	r2, [pc, #180]	; (800714c <HAL_DMA_IRQHandler+0x1b8>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d045      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a2b      	ldr	r2, [pc, #172]	; (8007150 <HAL_DMA_IRQHandler+0x1bc>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d040      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a2a      	ldr	r2, [pc, #168]	; (8007154 <HAL_DMA_IRQHandler+0x1c0>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d03b      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a28      	ldr	r2, [pc, #160]	; (8007158 <HAL_DMA_IRQHandler+0x1c4>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d036      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a27      	ldr	r2, [pc, #156]	; (800715c <HAL_DMA_IRQHandler+0x1c8>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d031      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a25      	ldr	r2, [pc, #148]	; (8007160 <HAL_DMA_IRQHandler+0x1cc>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d02c      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a24      	ldr	r2, [pc, #144]	; (8007164 <HAL_DMA_IRQHandler+0x1d0>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d027      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a22      	ldr	r2, [pc, #136]	; (8007168 <HAL_DMA_IRQHandler+0x1d4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d022      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a21      	ldr	r2, [pc, #132]	; (800716c <HAL_DMA_IRQHandler+0x1d8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d01d      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a1f      	ldr	r2, [pc, #124]	; (8007170 <HAL_DMA_IRQHandler+0x1dc>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d018      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a1e      	ldr	r2, [pc, #120]	; (8007174 <HAL_DMA_IRQHandler+0x1e0>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d013      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1c      	ldr	r2, [pc, #112]	; (8007178 <HAL_DMA_IRQHandler+0x1e4>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d00e      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a1b      	ldr	r2, [pc, #108]	; (800717c <HAL_DMA_IRQHandler+0x1e8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d009      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a19      	ldr	r2, [pc, #100]	; (8007180 <HAL_DMA_IRQHandler+0x1ec>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d004      	beq.n	8007128 <HAL_DMA_IRQHandler+0x194>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a18      	ldr	r2, [pc, #96]	; (8007184 <HAL_DMA_IRQHandler+0x1f0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d12f      	bne.n	8007188 <HAL_DMA_IRQHandler+0x1f4>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0304 	and.w	r3, r3, #4
 8007132:	2b00      	cmp	r3, #0
 8007134:	bf14      	ite	ne
 8007136:	2301      	movne	r3, #1
 8007138:	2300      	moveq	r3, #0
 800713a:	b2db      	uxtb	r3, r3
 800713c:	e02e      	b.n	800719c <HAL_DMA_IRQHandler+0x208>
 800713e:	bf00      	nop
 8007140:	24000000 	.word	0x24000000
 8007144:	1b4e81b5 	.word	0x1b4e81b5
 8007148:	40020010 	.word	0x40020010
 800714c:	40020028 	.word	0x40020028
 8007150:	40020040 	.word	0x40020040
 8007154:	40020058 	.word	0x40020058
 8007158:	40020070 	.word	0x40020070
 800715c:	40020088 	.word	0x40020088
 8007160:	400200a0 	.word	0x400200a0
 8007164:	400200b8 	.word	0x400200b8
 8007168:	40020410 	.word	0x40020410
 800716c:	40020428 	.word	0x40020428
 8007170:	40020440 	.word	0x40020440
 8007174:	40020458 	.word	0x40020458
 8007178:	40020470 	.word	0x40020470
 800717c:	40020488 	.word	0x40020488
 8007180:	400204a0 	.word	0x400204a0
 8007184:	400204b8 	.word	0x400204b8
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0308 	and.w	r3, r3, #8
 8007192:	2b00      	cmp	r3, #0
 8007194:	bf14      	ite	ne
 8007196:	2301      	movne	r3, #1
 8007198:	2300      	moveq	r3, #0
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b00      	cmp	r3, #0
 800719e:	d015      	beq.n	80071cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0204 	bic.w	r2, r2, #4
 80071ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b4:	f003 031f 	and.w	r3, r3, #31
 80071b8:	2208      	movs	r2, #8
 80071ba:	409a      	lsls	r2, r3
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c4:	f043 0201 	orr.w	r2, r3, #1
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071d0:	f003 031f 	and.w	r3, r3, #31
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	fa22 f303 	lsr.w	r3, r2, r3
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d06e      	beq.n	80072c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a69      	ldr	r2, [pc, #420]	; (800738c <HAL_DMA_IRQHandler+0x3f8>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d04a      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a67      	ldr	r2, [pc, #412]	; (8007390 <HAL_DMA_IRQHandler+0x3fc>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d045      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a66      	ldr	r2, [pc, #408]	; (8007394 <HAL_DMA_IRQHandler+0x400>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d040      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a64      	ldr	r2, [pc, #400]	; (8007398 <HAL_DMA_IRQHandler+0x404>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d03b      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a63      	ldr	r2, [pc, #396]	; (800739c <HAL_DMA_IRQHandler+0x408>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d036      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a61      	ldr	r2, [pc, #388]	; (80073a0 <HAL_DMA_IRQHandler+0x40c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d031      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a60      	ldr	r2, [pc, #384]	; (80073a4 <HAL_DMA_IRQHandler+0x410>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d02c      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a5e      	ldr	r2, [pc, #376]	; (80073a8 <HAL_DMA_IRQHandler+0x414>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d027      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a5d      	ldr	r2, [pc, #372]	; (80073ac <HAL_DMA_IRQHandler+0x418>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d022      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a5b      	ldr	r2, [pc, #364]	; (80073b0 <HAL_DMA_IRQHandler+0x41c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d01d      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a5a      	ldr	r2, [pc, #360]	; (80073b4 <HAL_DMA_IRQHandler+0x420>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d018      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a58      	ldr	r2, [pc, #352]	; (80073b8 <HAL_DMA_IRQHandler+0x424>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d013      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a57      	ldr	r2, [pc, #348]	; (80073bc <HAL_DMA_IRQHandler+0x428>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d00e      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a55      	ldr	r2, [pc, #340]	; (80073c0 <HAL_DMA_IRQHandler+0x42c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d009      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a54      	ldr	r2, [pc, #336]	; (80073c4 <HAL_DMA_IRQHandler+0x430>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d004      	beq.n	8007282 <HAL_DMA_IRQHandler+0x2ee>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a52      	ldr	r2, [pc, #328]	; (80073c8 <HAL_DMA_IRQHandler+0x434>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d10a      	bne.n	8007298 <HAL_DMA_IRQHandler+0x304>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800728c:	2b00      	cmp	r3, #0
 800728e:	bf14      	ite	ne
 8007290:	2301      	movne	r3, #1
 8007292:	2300      	moveq	r3, #0
 8007294:	b2db      	uxtb	r3, r3
 8007296:	e003      	b.n	80072a0 <HAL_DMA_IRQHandler+0x30c>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2300      	movs	r3, #0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00d      	beq.n	80072c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a8:	f003 031f 	and.w	r3, r3, #31
 80072ac:	2201      	movs	r2, #1
 80072ae:	409a      	lsls	r2, r3
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b8:	f043 0202 	orr.w	r2, r3, #2
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c4:	f003 031f 	and.w	r3, r3, #31
 80072c8:	2204      	movs	r2, #4
 80072ca:	409a      	lsls	r2, r3
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	4013      	ands	r3, r2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 808f 	beq.w	80073f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a2c      	ldr	r2, [pc, #176]	; (800738c <HAL_DMA_IRQHandler+0x3f8>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d04a      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a2a      	ldr	r2, [pc, #168]	; (8007390 <HAL_DMA_IRQHandler+0x3fc>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d045      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a29      	ldr	r2, [pc, #164]	; (8007394 <HAL_DMA_IRQHandler+0x400>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d040      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a27      	ldr	r2, [pc, #156]	; (8007398 <HAL_DMA_IRQHandler+0x404>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d03b      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a26      	ldr	r2, [pc, #152]	; (800739c <HAL_DMA_IRQHandler+0x408>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d036      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a24      	ldr	r2, [pc, #144]	; (80073a0 <HAL_DMA_IRQHandler+0x40c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d031      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a23      	ldr	r2, [pc, #140]	; (80073a4 <HAL_DMA_IRQHandler+0x410>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d02c      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a21      	ldr	r2, [pc, #132]	; (80073a8 <HAL_DMA_IRQHandler+0x414>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d027      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a20      	ldr	r2, [pc, #128]	; (80073ac <HAL_DMA_IRQHandler+0x418>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d022      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a1e      	ldr	r2, [pc, #120]	; (80073b0 <HAL_DMA_IRQHandler+0x41c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d01d      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a1d      	ldr	r2, [pc, #116]	; (80073b4 <HAL_DMA_IRQHandler+0x420>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d018      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a1b      	ldr	r2, [pc, #108]	; (80073b8 <HAL_DMA_IRQHandler+0x424>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d013      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a1a      	ldr	r2, [pc, #104]	; (80073bc <HAL_DMA_IRQHandler+0x428>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d00e      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a18      	ldr	r2, [pc, #96]	; (80073c0 <HAL_DMA_IRQHandler+0x42c>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d009      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a17      	ldr	r2, [pc, #92]	; (80073c4 <HAL_DMA_IRQHandler+0x430>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d004      	beq.n	8007376 <HAL_DMA_IRQHandler+0x3e2>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a15      	ldr	r2, [pc, #84]	; (80073c8 <HAL_DMA_IRQHandler+0x434>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d12a      	bne.n	80073cc <HAL_DMA_IRQHandler+0x438>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	bf14      	ite	ne
 8007384:	2301      	movne	r3, #1
 8007386:	2300      	moveq	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	e023      	b.n	80073d4 <HAL_DMA_IRQHandler+0x440>
 800738c:	40020010 	.word	0x40020010
 8007390:	40020028 	.word	0x40020028
 8007394:	40020040 	.word	0x40020040
 8007398:	40020058 	.word	0x40020058
 800739c:	40020070 	.word	0x40020070
 80073a0:	40020088 	.word	0x40020088
 80073a4:	400200a0 	.word	0x400200a0
 80073a8:	400200b8 	.word	0x400200b8
 80073ac:	40020410 	.word	0x40020410
 80073b0:	40020428 	.word	0x40020428
 80073b4:	40020440 	.word	0x40020440
 80073b8:	40020458 	.word	0x40020458
 80073bc:	40020470 	.word	0x40020470
 80073c0:	40020488 	.word	0x40020488
 80073c4:	400204a0 	.word	0x400204a0
 80073c8:	400204b8 	.word	0x400204b8
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2300      	movs	r3, #0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00d      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073dc:	f003 031f 	and.w	r3, r3, #31
 80073e0:	2204      	movs	r2, #4
 80073e2:	409a      	lsls	r2, r3
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ec:	f043 0204 	orr.w	r2, r3, #4
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f8:	f003 031f 	and.w	r3, r3, #31
 80073fc:	2210      	movs	r2, #16
 80073fe:	409a      	lsls	r2, r3
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	4013      	ands	r3, r2
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 80a6 	beq.w	8007556 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a85      	ldr	r2, [pc, #532]	; (8007624 <HAL_DMA_IRQHandler+0x690>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d04a      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a83      	ldr	r2, [pc, #524]	; (8007628 <HAL_DMA_IRQHandler+0x694>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d045      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a82      	ldr	r2, [pc, #520]	; (800762c <HAL_DMA_IRQHandler+0x698>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d040      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a80      	ldr	r2, [pc, #512]	; (8007630 <HAL_DMA_IRQHandler+0x69c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d03b      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a7f      	ldr	r2, [pc, #508]	; (8007634 <HAL_DMA_IRQHandler+0x6a0>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d036      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a7d      	ldr	r2, [pc, #500]	; (8007638 <HAL_DMA_IRQHandler+0x6a4>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d031      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a7c      	ldr	r2, [pc, #496]	; (800763c <HAL_DMA_IRQHandler+0x6a8>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d02c      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a7a      	ldr	r2, [pc, #488]	; (8007640 <HAL_DMA_IRQHandler+0x6ac>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d027      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a79      	ldr	r2, [pc, #484]	; (8007644 <HAL_DMA_IRQHandler+0x6b0>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d022      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a77      	ldr	r2, [pc, #476]	; (8007648 <HAL_DMA_IRQHandler+0x6b4>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d01d      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a76      	ldr	r2, [pc, #472]	; (800764c <HAL_DMA_IRQHandler+0x6b8>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d018      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a74      	ldr	r2, [pc, #464]	; (8007650 <HAL_DMA_IRQHandler+0x6bc>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d013      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a73      	ldr	r2, [pc, #460]	; (8007654 <HAL_DMA_IRQHandler+0x6c0>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d00e      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a71      	ldr	r2, [pc, #452]	; (8007658 <HAL_DMA_IRQHandler+0x6c4>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d009      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a70      	ldr	r2, [pc, #448]	; (800765c <HAL_DMA_IRQHandler+0x6c8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d004      	beq.n	80074aa <HAL_DMA_IRQHandler+0x516>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a6e      	ldr	r2, [pc, #440]	; (8007660 <HAL_DMA_IRQHandler+0x6cc>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d10a      	bne.n	80074c0 <HAL_DMA_IRQHandler+0x52c>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0308 	and.w	r3, r3, #8
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	bf14      	ite	ne
 80074b8:	2301      	movne	r3, #1
 80074ba:	2300      	moveq	r3, #0
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	e009      	b.n	80074d4 <HAL_DMA_IRQHandler+0x540>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0304 	and.w	r3, r3, #4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	bf14      	ite	ne
 80074ce:	2301      	movne	r3, #1
 80074d0:	2300      	moveq	r3, #0
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d03e      	beq.n	8007556 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074dc:	f003 031f 	and.w	r3, r3, #31
 80074e0:	2210      	movs	r2, #16
 80074e2:	409a      	lsls	r2, r3
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d018      	beq.n	8007528 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d108      	bne.n	8007516 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007508:	2b00      	cmp	r3, #0
 800750a:	d024      	beq.n	8007556 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	4798      	blx	r3
 8007514:	e01f      	b.n	8007556 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800751a:	2b00      	cmp	r3, #0
 800751c:	d01b      	beq.n	8007556 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	4798      	blx	r3
 8007526:	e016      	b.n	8007556 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007532:	2b00      	cmp	r3, #0
 8007534:	d107      	bne.n	8007546 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f022 0208 	bic.w	r2, r2, #8
 8007544:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800755a:	f003 031f 	and.w	r3, r3, #31
 800755e:	2220      	movs	r2, #32
 8007560:	409a      	lsls	r2, r3
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	4013      	ands	r3, r2
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 8110 	beq.w	800778c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a2c      	ldr	r2, [pc, #176]	; (8007624 <HAL_DMA_IRQHandler+0x690>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d04a      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a2b      	ldr	r2, [pc, #172]	; (8007628 <HAL_DMA_IRQHandler+0x694>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d045      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a29      	ldr	r2, [pc, #164]	; (800762c <HAL_DMA_IRQHandler+0x698>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d040      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a28      	ldr	r2, [pc, #160]	; (8007630 <HAL_DMA_IRQHandler+0x69c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d03b      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a26      	ldr	r2, [pc, #152]	; (8007634 <HAL_DMA_IRQHandler+0x6a0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d036      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a25      	ldr	r2, [pc, #148]	; (8007638 <HAL_DMA_IRQHandler+0x6a4>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d031      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a23      	ldr	r2, [pc, #140]	; (800763c <HAL_DMA_IRQHandler+0x6a8>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d02c      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a22      	ldr	r2, [pc, #136]	; (8007640 <HAL_DMA_IRQHandler+0x6ac>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d027      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a20      	ldr	r2, [pc, #128]	; (8007644 <HAL_DMA_IRQHandler+0x6b0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d022      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1f      	ldr	r2, [pc, #124]	; (8007648 <HAL_DMA_IRQHandler+0x6b4>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d01d      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a1d      	ldr	r2, [pc, #116]	; (800764c <HAL_DMA_IRQHandler+0x6b8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d018      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a1c      	ldr	r2, [pc, #112]	; (8007650 <HAL_DMA_IRQHandler+0x6bc>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d013      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a1a      	ldr	r2, [pc, #104]	; (8007654 <HAL_DMA_IRQHandler+0x6c0>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d00e      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a19      	ldr	r2, [pc, #100]	; (8007658 <HAL_DMA_IRQHandler+0x6c4>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d009      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a17      	ldr	r2, [pc, #92]	; (800765c <HAL_DMA_IRQHandler+0x6c8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d004      	beq.n	800760c <HAL_DMA_IRQHandler+0x678>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a16      	ldr	r2, [pc, #88]	; (8007660 <HAL_DMA_IRQHandler+0x6cc>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d12b      	bne.n	8007664 <HAL_DMA_IRQHandler+0x6d0>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0310 	and.w	r3, r3, #16
 8007616:	2b00      	cmp	r3, #0
 8007618:	bf14      	ite	ne
 800761a:	2301      	movne	r3, #1
 800761c:	2300      	moveq	r3, #0
 800761e:	b2db      	uxtb	r3, r3
 8007620:	e02a      	b.n	8007678 <HAL_DMA_IRQHandler+0x6e4>
 8007622:	bf00      	nop
 8007624:	40020010 	.word	0x40020010
 8007628:	40020028 	.word	0x40020028
 800762c:	40020040 	.word	0x40020040
 8007630:	40020058 	.word	0x40020058
 8007634:	40020070 	.word	0x40020070
 8007638:	40020088 	.word	0x40020088
 800763c:	400200a0 	.word	0x400200a0
 8007640:	400200b8 	.word	0x400200b8
 8007644:	40020410 	.word	0x40020410
 8007648:	40020428 	.word	0x40020428
 800764c:	40020440 	.word	0x40020440
 8007650:	40020458 	.word	0x40020458
 8007654:	40020470 	.word	0x40020470
 8007658:	40020488 	.word	0x40020488
 800765c:	400204a0 	.word	0x400204a0
 8007660:	400204b8 	.word	0x400204b8
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b00      	cmp	r3, #0
 8007670:	bf14      	ite	ne
 8007672:	2301      	movne	r3, #1
 8007674:	2300      	moveq	r3, #0
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 8087 	beq.w	800778c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007682:	f003 031f 	and.w	r3, r3, #31
 8007686:	2220      	movs	r2, #32
 8007688:	409a      	lsls	r2, r3
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b04      	cmp	r3, #4
 8007698:	d139      	bne.n	800770e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 0216 	bic.w	r2, r2, #22
 80076a8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	695a      	ldr	r2, [r3, #20]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076b8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d103      	bne.n	80076ca <HAL_DMA_IRQHandler+0x736>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d007      	beq.n	80076da <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f022 0208 	bic.w	r2, r2, #8
 80076d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076de:	f003 031f 	and.w	r3, r3, #31
 80076e2:	223f      	movs	r2, #63	; 0x3f
 80076e4:	409a      	lsls	r2, r3
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 834a 	beq.w	8007d98 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	4798      	blx	r3
          }
          return;
 800770c:	e344      	b.n	8007d98 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d018      	beq.n	800774e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d108      	bne.n	800773c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800772e:	2b00      	cmp	r3, #0
 8007730:	d02c      	beq.n	800778c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	4798      	blx	r3
 800773a:	e027      	b.n	800778c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007740:	2b00      	cmp	r3, #0
 8007742:	d023      	beq.n	800778c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	4798      	blx	r3
 800774c:	e01e      	b.n	800778c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10f      	bne.n	800777c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0210 	bic.w	r2, r2, #16
 800776a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 8306 	beq.w	8007da2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 8088 	beq.w	80078b4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2204      	movs	r2, #4
 80077a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a7a      	ldr	r2, [pc, #488]	; (800799c <HAL_DMA_IRQHandler+0xa08>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d04a      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a79      	ldr	r2, [pc, #484]	; (80079a0 <HAL_DMA_IRQHandler+0xa0c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d045      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a77      	ldr	r2, [pc, #476]	; (80079a4 <HAL_DMA_IRQHandler+0xa10>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d040      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a76      	ldr	r2, [pc, #472]	; (80079a8 <HAL_DMA_IRQHandler+0xa14>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d03b      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a74      	ldr	r2, [pc, #464]	; (80079ac <HAL_DMA_IRQHandler+0xa18>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d036      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a73      	ldr	r2, [pc, #460]	; (80079b0 <HAL_DMA_IRQHandler+0xa1c>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d031      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a71      	ldr	r2, [pc, #452]	; (80079b4 <HAL_DMA_IRQHandler+0xa20>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d02c      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a70      	ldr	r2, [pc, #448]	; (80079b8 <HAL_DMA_IRQHandler+0xa24>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d027      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a6e      	ldr	r2, [pc, #440]	; (80079bc <HAL_DMA_IRQHandler+0xa28>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d022      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a6d      	ldr	r2, [pc, #436]	; (80079c0 <HAL_DMA_IRQHandler+0xa2c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d01d      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a6b      	ldr	r2, [pc, #428]	; (80079c4 <HAL_DMA_IRQHandler+0xa30>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d018      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a6a      	ldr	r2, [pc, #424]	; (80079c8 <HAL_DMA_IRQHandler+0xa34>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d013      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a68      	ldr	r2, [pc, #416]	; (80079cc <HAL_DMA_IRQHandler+0xa38>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d00e      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a67      	ldr	r2, [pc, #412]	; (80079d0 <HAL_DMA_IRQHandler+0xa3c>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d009      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a65      	ldr	r2, [pc, #404]	; (80079d4 <HAL_DMA_IRQHandler+0xa40>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d004      	beq.n	800784c <HAL_DMA_IRQHandler+0x8b8>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a64      	ldr	r2, [pc, #400]	; (80079d8 <HAL_DMA_IRQHandler+0xa44>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d108      	bne.n	800785e <HAL_DMA_IRQHandler+0x8ca>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 0201 	bic.w	r2, r2, #1
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	e007      	b.n	800786e <HAL_DMA_IRQHandler+0x8da>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f022 0201 	bic.w	r2, r2, #1
 800786c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	3301      	adds	r3, #1
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007876:	429a      	cmp	r2, r3
 8007878:	d307      	bcc.n	800788a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1f2      	bne.n	800786e <HAL_DMA_IRQHandler+0x8da>
 8007888:	e000      	b.n	800788c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800788a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	d004      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2203      	movs	r2, #3
 800789e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80078a2:	e003      	b.n	80078ac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 8272 	beq.w	8007da2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	4798      	blx	r3
 80078c6:	e26c      	b.n	8007da2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a43      	ldr	r2, [pc, #268]	; (80079dc <HAL_DMA_IRQHandler+0xa48>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d022      	beq.n	8007918 <HAL_DMA_IRQHandler+0x984>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a42      	ldr	r2, [pc, #264]	; (80079e0 <HAL_DMA_IRQHandler+0xa4c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d01d      	beq.n	8007918 <HAL_DMA_IRQHandler+0x984>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a40      	ldr	r2, [pc, #256]	; (80079e4 <HAL_DMA_IRQHandler+0xa50>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d018      	beq.n	8007918 <HAL_DMA_IRQHandler+0x984>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a3f      	ldr	r2, [pc, #252]	; (80079e8 <HAL_DMA_IRQHandler+0xa54>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d013      	beq.n	8007918 <HAL_DMA_IRQHandler+0x984>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a3d      	ldr	r2, [pc, #244]	; (80079ec <HAL_DMA_IRQHandler+0xa58>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00e      	beq.n	8007918 <HAL_DMA_IRQHandler+0x984>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a3c      	ldr	r2, [pc, #240]	; (80079f0 <HAL_DMA_IRQHandler+0xa5c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d009      	beq.n	8007918 <HAL_DMA_IRQHandler+0x984>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a3a      	ldr	r2, [pc, #232]	; (80079f4 <HAL_DMA_IRQHandler+0xa60>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d004      	beq.n	8007918 <HAL_DMA_IRQHandler+0x984>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a39      	ldr	r2, [pc, #228]	; (80079f8 <HAL_DMA_IRQHandler+0xa64>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d101      	bne.n	800791c <HAL_DMA_IRQHandler+0x988>
 8007918:	2301      	movs	r3, #1
 800791a:	e000      	b.n	800791e <HAL_DMA_IRQHandler+0x98a>
 800791c:	2300      	movs	r3, #0
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 823f 	beq.w	8007da2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	2204      	movs	r2, #4
 8007936:	409a      	lsls	r2, r3
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	4013      	ands	r3, r2
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 80cd 	beq.w	8007adc <HAL_DMA_IRQHandler+0xb48>
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 80c7 	beq.w	8007adc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007952:	f003 031f 	and.w	r3, r3, #31
 8007956:	2204      	movs	r2, #4
 8007958:	409a      	lsls	r2, r3
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d049      	beq.n	80079fc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d109      	bne.n	8007986 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 8210 	beq.w	8007d9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007984:	e20a      	b.n	8007d9c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 8206 	beq.w	8007d9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007998:	e200      	b.n	8007d9c <HAL_DMA_IRQHandler+0xe08>
 800799a:	bf00      	nop
 800799c:	40020010 	.word	0x40020010
 80079a0:	40020028 	.word	0x40020028
 80079a4:	40020040 	.word	0x40020040
 80079a8:	40020058 	.word	0x40020058
 80079ac:	40020070 	.word	0x40020070
 80079b0:	40020088 	.word	0x40020088
 80079b4:	400200a0 	.word	0x400200a0
 80079b8:	400200b8 	.word	0x400200b8
 80079bc:	40020410 	.word	0x40020410
 80079c0:	40020428 	.word	0x40020428
 80079c4:	40020440 	.word	0x40020440
 80079c8:	40020458 	.word	0x40020458
 80079cc:	40020470 	.word	0x40020470
 80079d0:	40020488 	.word	0x40020488
 80079d4:	400204a0 	.word	0x400204a0
 80079d8:	400204b8 	.word	0x400204b8
 80079dc:	58025408 	.word	0x58025408
 80079e0:	5802541c 	.word	0x5802541c
 80079e4:	58025430 	.word	0x58025430
 80079e8:	58025444 	.word	0x58025444
 80079ec:	58025458 	.word	0x58025458
 80079f0:	5802546c 	.word	0x5802546c
 80079f4:	58025480 	.word	0x58025480
 80079f8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d160      	bne.n	8007ac8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a7f      	ldr	r2, [pc, #508]	; (8007c08 <HAL_DMA_IRQHandler+0xc74>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d04a      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a7d      	ldr	r2, [pc, #500]	; (8007c0c <HAL_DMA_IRQHandler+0xc78>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d045      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a7c      	ldr	r2, [pc, #496]	; (8007c10 <HAL_DMA_IRQHandler+0xc7c>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d040      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a7a      	ldr	r2, [pc, #488]	; (8007c14 <HAL_DMA_IRQHandler+0xc80>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d03b      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a79      	ldr	r2, [pc, #484]	; (8007c18 <HAL_DMA_IRQHandler+0xc84>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d036      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a77      	ldr	r2, [pc, #476]	; (8007c1c <HAL_DMA_IRQHandler+0xc88>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d031      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a76      	ldr	r2, [pc, #472]	; (8007c20 <HAL_DMA_IRQHandler+0xc8c>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d02c      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a74      	ldr	r2, [pc, #464]	; (8007c24 <HAL_DMA_IRQHandler+0xc90>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d027      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a73      	ldr	r2, [pc, #460]	; (8007c28 <HAL_DMA_IRQHandler+0xc94>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d022      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a71      	ldr	r2, [pc, #452]	; (8007c2c <HAL_DMA_IRQHandler+0xc98>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d01d      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a70      	ldr	r2, [pc, #448]	; (8007c30 <HAL_DMA_IRQHandler+0xc9c>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d018      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a6e      	ldr	r2, [pc, #440]	; (8007c34 <HAL_DMA_IRQHandler+0xca0>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d013      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a6d      	ldr	r2, [pc, #436]	; (8007c38 <HAL_DMA_IRQHandler+0xca4>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d00e      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a6b      	ldr	r2, [pc, #428]	; (8007c3c <HAL_DMA_IRQHandler+0xca8>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d009      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a6a      	ldr	r2, [pc, #424]	; (8007c40 <HAL_DMA_IRQHandler+0xcac>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d004      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xb12>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a68      	ldr	r2, [pc, #416]	; (8007c44 <HAL_DMA_IRQHandler+0xcb0>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d108      	bne.n	8007ab8 <HAL_DMA_IRQHandler+0xb24>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 0208 	bic.w	r2, r2, #8
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	e007      	b.n	8007ac8 <HAL_DMA_IRQHandler+0xb34>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f022 0204 	bic.w	r2, r2, #4
 8007ac6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 8165 	beq.w	8007d9c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ada:	e15f      	b.n	8007d9c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae0:	f003 031f 	and.w	r3, r3, #31
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	409a      	lsls	r2, r3
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	4013      	ands	r3, r2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 80c5 	beq.w	8007c7c <HAL_DMA_IRQHandler+0xce8>
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	f003 0302 	and.w	r3, r3, #2
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 80bf 	beq.w	8007c7c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b02:	f003 031f 	and.w	r3, r3, #31
 8007b06:	2202      	movs	r2, #2
 8007b08:	409a      	lsls	r2, r3
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d018      	beq.n	8007b4a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 813a 	beq.w	8007da0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b34:	e134      	b.n	8007da0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 8130 	beq.w	8007da0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b48:	e12a      	b.n	8007da0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f003 0320 	and.w	r3, r3, #32
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f040 8089 	bne.w	8007c68 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a2b      	ldr	r2, [pc, #172]	; (8007c08 <HAL_DMA_IRQHandler+0xc74>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d04a      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a29      	ldr	r2, [pc, #164]	; (8007c0c <HAL_DMA_IRQHandler+0xc78>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d045      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a28      	ldr	r2, [pc, #160]	; (8007c10 <HAL_DMA_IRQHandler+0xc7c>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d040      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a26      	ldr	r2, [pc, #152]	; (8007c14 <HAL_DMA_IRQHandler+0xc80>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d03b      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a25      	ldr	r2, [pc, #148]	; (8007c18 <HAL_DMA_IRQHandler+0xc84>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d036      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a23      	ldr	r2, [pc, #140]	; (8007c1c <HAL_DMA_IRQHandler+0xc88>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d031      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a22      	ldr	r2, [pc, #136]	; (8007c20 <HAL_DMA_IRQHandler+0xc8c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d02c      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a20      	ldr	r2, [pc, #128]	; (8007c24 <HAL_DMA_IRQHandler+0xc90>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d027      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a1f      	ldr	r2, [pc, #124]	; (8007c28 <HAL_DMA_IRQHandler+0xc94>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d022      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a1d      	ldr	r2, [pc, #116]	; (8007c2c <HAL_DMA_IRQHandler+0xc98>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d01d      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a1c      	ldr	r2, [pc, #112]	; (8007c30 <HAL_DMA_IRQHandler+0xc9c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d018      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a1a      	ldr	r2, [pc, #104]	; (8007c34 <HAL_DMA_IRQHandler+0xca0>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d013      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a19      	ldr	r2, [pc, #100]	; (8007c38 <HAL_DMA_IRQHandler+0xca4>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d00e      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a17      	ldr	r2, [pc, #92]	; (8007c3c <HAL_DMA_IRQHandler+0xca8>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d009      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a16      	ldr	r2, [pc, #88]	; (8007c40 <HAL_DMA_IRQHandler+0xcac>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d004      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0xc62>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a14      	ldr	r2, [pc, #80]	; (8007c44 <HAL_DMA_IRQHandler+0xcb0>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d128      	bne.n	8007c48 <HAL_DMA_IRQHandler+0xcb4>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f022 0214 	bic.w	r2, r2, #20
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	e027      	b.n	8007c58 <HAL_DMA_IRQHandler+0xcc4>
 8007c08:	40020010 	.word	0x40020010
 8007c0c:	40020028 	.word	0x40020028
 8007c10:	40020040 	.word	0x40020040
 8007c14:	40020058 	.word	0x40020058
 8007c18:	40020070 	.word	0x40020070
 8007c1c:	40020088 	.word	0x40020088
 8007c20:	400200a0 	.word	0x400200a0
 8007c24:	400200b8 	.word	0x400200b8
 8007c28:	40020410 	.word	0x40020410
 8007c2c:	40020428 	.word	0x40020428
 8007c30:	40020440 	.word	0x40020440
 8007c34:	40020458 	.word	0x40020458
 8007c38:	40020470 	.word	0x40020470
 8007c3c:	40020488 	.word	0x40020488
 8007c40:	400204a0 	.word	0x400204a0
 8007c44:	400204b8 	.word	0x400204b8
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f022 020a 	bic.w	r2, r2, #10
 8007c56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 8097 	beq.w	8007da0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c7a:	e091      	b.n	8007da0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c80:	f003 031f 	and.w	r3, r3, #31
 8007c84:	2208      	movs	r2, #8
 8007c86:	409a      	lsls	r2, r3
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 8088 	beq.w	8007da2 <HAL_DMA_IRQHandler+0xe0e>
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f003 0308 	and.w	r3, r3, #8
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 8082 	beq.w	8007da2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a41      	ldr	r2, [pc, #260]	; (8007da8 <HAL_DMA_IRQHandler+0xe14>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d04a      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a3f      	ldr	r2, [pc, #252]	; (8007dac <HAL_DMA_IRQHandler+0xe18>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d045      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a3e      	ldr	r2, [pc, #248]	; (8007db0 <HAL_DMA_IRQHandler+0xe1c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d040      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a3c      	ldr	r2, [pc, #240]	; (8007db4 <HAL_DMA_IRQHandler+0xe20>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d03b      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a3b      	ldr	r2, [pc, #236]	; (8007db8 <HAL_DMA_IRQHandler+0xe24>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d036      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a39      	ldr	r2, [pc, #228]	; (8007dbc <HAL_DMA_IRQHandler+0xe28>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d031      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a38      	ldr	r2, [pc, #224]	; (8007dc0 <HAL_DMA_IRQHandler+0xe2c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d02c      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a36      	ldr	r2, [pc, #216]	; (8007dc4 <HAL_DMA_IRQHandler+0xe30>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d027      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a35      	ldr	r2, [pc, #212]	; (8007dc8 <HAL_DMA_IRQHandler+0xe34>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d022      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a33      	ldr	r2, [pc, #204]	; (8007dcc <HAL_DMA_IRQHandler+0xe38>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d01d      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a32      	ldr	r2, [pc, #200]	; (8007dd0 <HAL_DMA_IRQHandler+0xe3c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d018      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a30      	ldr	r2, [pc, #192]	; (8007dd4 <HAL_DMA_IRQHandler+0xe40>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d013      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a2f      	ldr	r2, [pc, #188]	; (8007dd8 <HAL_DMA_IRQHandler+0xe44>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d00e      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a2d      	ldr	r2, [pc, #180]	; (8007ddc <HAL_DMA_IRQHandler+0xe48>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d009      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a2c      	ldr	r2, [pc, #176]	; (8007de0 <HAL_DMA_IRQHandler+0xe4c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d004      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xdaa>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a2a      	ldr	r2, [pc, #168]	; (8007de4 <HAL_DMA_IRQHandler+0xe50>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d108      	bne.n	8007d50 <HAL_DMA_IRQHandler+0xdbc>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 021c 	bic.w	r2, r2, #28
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	e007      	b.n	8007d60 <HAL_DMA_IRQHandler+0xdcc>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f022 020e 	bic.w	r2, r2, #14
 8007d5e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d64:	f003 031f 	and.w	r3, r3, #31
 8007d68:	2201      	movs	r2, #1
 8007d6a:	409a      	lsls	r2, r3
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d009      	beq.n	8007da2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	4798      	blx	r3
 8007d96:	e004      	b.n	8007da2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007d98:	bf00      	nop
 8007d9a:	e002      	b.n	8007da2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d9c:	bf00      	nop
 8007d9e:	e000      	b.n	8007da2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007da0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007da2:	3728      	adds	r7, #40	; 0x28
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	40020010 	.word	0x40020010
 8007dac:	40020028 	.word	0x40020028
 8007db0:	40020040 	.word	0x40020040
 8007db4:	40020058 	.word	0x40020058
 8007db8:	40020070 	.word	0x40020070
 8007dbc:	40020088 	.word	0x40020088
 8007dc0:	400200a0 	.word	0x400200a0
 8007dc4:	400200b8 	.word	0x400200b8
 8007dc8:	40020410 	.word	0x40020410
 8007dcc:	40020428 	.word	0x40020428
 8007dd0:	40020440 	.word	0x40020440
 8007dd4:	40020458 	.word	0x40020458
 8007dd8:	40020470 	.word	0x40020470
 8007ddc:	40020488 	.word	0x40020488
 8007de0:	400204a0 	.word	0x400204a0
 8007de4:	400204b8 	.word	0x400204b8

08007de8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
 8007df4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dfa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e00:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a7f      	ldr	r2, [pc, #508]	; (8008004 <DMA_SetConfig+0x21c>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d072      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a7d      	ldr	r2, [pc, #500]	; (8008008 <DMA_SetConfig+0x220>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d06d      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a7c      	ldr	r2, [pc, #496]	; (800800c <DMA_SetConfig+0x224>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d068      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a7a      	ldr	r2, [pc, #488]	; (8008010 <DMA_SetConfig+0x228>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d063      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a79      	ldr	r2, [pc, #484]	; (8008014 <DMA_SetConfig+0x22c>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d05e      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a77      	ldr	r2, [pc, #476]	; (8008018 <DMA_SetConfig+0x230>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d059      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a76      	ldr	r2, [pc, #472]	; (800801c <DMA_SetConfig+0x234>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d054      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a74      	ldr	r2, [pc, #464]	; (8008020 <DMA_SetConfig+0x238>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d04f      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a73      	ldr	r2, [pc, #460]	; (8008024 <DMA_SetConfig+0x23c>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d04a      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a71      	ldr	r2, [pc, #452]	; (8008028 <DMA_SetConfig+0x240>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d045      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a70      	ldr	r2, [pc, #448]	; (800802c <DMA_SetConfig+0x244>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d040      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a6e      	ldr	r2, [pc, #440]	; (8008030 <DMA_SetConfig+0x248>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d03b      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a6d      	ldr	r2, [pc, #436]	; (8008034 <DMA_SetConfig+0x24c>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d036      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a6b      	ldr	r2, [pc, #428]	; (8008038 <DMA_SetConfig+0x250>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d031      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a6a      	ldr	r2, [pc, #424]	; (800803c <DMA_SetConfig+0x254>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d02c      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a68      	ldr	r2, [pc, #416]	; (8008040 <DMA_SetConfig+0x258>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d027      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a67      	ldr	r2, [pc, #412]	; (8008044 <DMA_SetConfig+0x25c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d022      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a65      	ldr	r2, [pc, #404]	; (8008048 <DMA_SetConfig+0x260>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d01d      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a64      	ldr	r2, [pc, #400]	; (800804c <DMA_SetConfig+0x264>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d018      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a62      	ldr	r2, [pc, #392]	; (8008050 <DMA_SetConfig+0x268>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d013      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a61      	ldr	r2, [pc, #388]	; (8008054 <DMA_SetConfig+0x26c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d00e      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a5f      	ldr	r2, [pc, #380]	; (8008058 <DMA_SetConfig+0x270>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d009      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a5e      	ldr	r2, [pc, #376]	; (800805c <DMA_SetConfig+0x274>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d004      	beq.n	8007ef2 <DMA_SetConfig+0x10a>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a5c      	ldr	r2, [pc, #368]	; (8008060 <DMA_SetConfig+0x278>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d101      	bne.n	8007ef6 <DMA_SetConfig+0x10e>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e000      	b.n	8007ef8 <DMA_SetConfig+0x110>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00d      	beq.n	8007f18 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007f04:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d004      	beq.n	8007f18 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007f16:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a39      	ldr	r2, [pc, #228]	; (8008004 <DMA_SetConfig+0x21c>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d04a      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a38      	ldr	r2, [pc, #224]	; (8008008 <DMA_SetConfig+0x220>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d045      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a36      	ldr	r2, [pc, #216]	; (800800c <DMA_SetConfig+0x224>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d040      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a35      	ldr	r2, [pc, #212]	; (8008010 <DMA_SetConfig+0x228>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d03b      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a33      	ldr	r2, [pc, #204]	; (8008014 <DMA_SetConfig+0x22c>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d036      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a32      	ldr	r2, [pc, #200]	; (8008018 <DMA_SetConfig+0x230>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d031      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a30      	ldr	r2, [pc, #192]	; (800801c <DMA_SetConfig+0x234>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d02c      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a2f      	ldr	r2, [pc, #188]	; (8008020 <DMA_SetConfig+0x238>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d027      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a2d      	ldr	r2, [pc, #180]	; (8008024 <DMA_SetConfig+0x23c>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d022      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a2c      	ldr	r2, [pc, #176]	; (8008028 <DMA_SetConfig+0x240>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d01d      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a2a      	ldr	r2, [pc, #168]	; (800802c <DMA_SetConfig+0x244>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d018      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a29      	ldr	r2, [pc, #164]	; (8008030 <DMA_SetConfig+0x248>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d013      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a27      	ldr	r2, [pc, #156]	; (8008034 <DMA_SetConfig+0x24c>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d00e      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a26      	ldr	r2, [pc, #152]	; (8008038 <DMA_SetConfig+0x250>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d009      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a24      	ldr	r2, [pc, #144]	; (800803c <DMA_SetConfig+0x254>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d004      	beq.n	8007fb8 <DMA_SetConfig+0x1d0>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a23      	ldr	r2, [pc, #140]	; (8008040 <DMA_SetConfig+0x258>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d101      	bne.n	8007fbc <DMA_SetConfig+0x1d4>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e000      	b.n	8007fbe <DMA_SetConfig+0x1d6>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d059      	beq.n	8008076 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc6:	f003 031f 	and.w	r3, r3, #31
 8007fca:	223f      	movs	r2, #63	; 0x3f
 8007fcc:	409a      	lsls	r2, r3
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007fe0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	2b40      	cmp	r3, #64	; 0x40
 8007ff0:	d138      	bne.n	8008064 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008002:	e086      	b.n	8008112 <DMA_SetConfig+0x32a>
 8008004:	40020010 	.word	0x40020010
 8008008:	40020028 	.word	0x40020028
 800800c:	40020040 	.word	0x40020040
 8008010:	40020058 	.word	0x40020058
 8008014:	40020070 	.word	0x40020070
 8008018:	40020088 	.word	0x40020088
 800801c:	400200a0 	.word	0x400200a0
 8008020:	400200b8 	.word	0x400200b8
 8008024:	40020410 	.word	0x40020410
 8008028:	40020428 	.word	0x40020428
 800802c:	40020440 	.word	0x40020440
 8008030:	40020458 	.word	0x40020458
 8008034:	40020470 	.word	0x40020470
 8008038:	40020488 	.word	0x40020488
 800803c:	400204a0 	.word	0x400204a0
 8008040:	400204b8 	.word	0x400204b8
 8008044:	58025408 	.word	0x58025408
 8008048:	5802541c 	.word	0x5802541c
 800804c:	58025430 	.word	0x58025430
 8008050:	58025444 	.word	0x58025444
 8008054:	58025458 	.word	0x58025458
 8008058:	5802546c 	.word	0x5802546c
 800805c:	58025480 	.word	0x58025480
 8008060:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	60da      	str	r2, [r3, #12]
}
 8008074:	e04d      	b.n	8008112 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a29      	ldr	r2, [pc, #164]	; (8008120 <DMA_SetConfig+0x338>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d022      	beq.n	80080c6 <DMA_SetConfig+0x2de>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a27      	ldr	r2, [pc, #156]	; (8008124 <DMA_SetConfig+0x33c>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d01d      	beq.n	80080c6 <DMA_SetConfig+0x2de>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a26      	ldr	r2, [pc, #152]	; (8008128 <DMA_SetConfig+0x340>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d018      	beq.n	80080c6 <DMA_SetConfig+0x2de>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a24      	ldr	r2, [pc, #144]	; (800812c <DMA_SetConfig+0x344>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d013      	beq.n	80080c6 <DMA_SetConfig+0x2de>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a23      	ldr	r2, [pc, #140]	; (8008130 <DMA_SetConfig+0x348>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d00e      	beq.n	80080c6 <DMA_SetConfig+0x2de>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a21      	ldr	r2, [pc, #132]	; (8008134 <DMA_SetConfig+0x34c>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d009      	beq.n	80080c6 <DMA_SetConfig+0x2de>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a20      	ldr	r2, [pc, #128]	; (8008138 <DMA_SetConfig+0x350>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d004      	beq.n	80080c6 <DMA_SetConfig+0x2de>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a1e      	ldr	r2, [pc, #120]	; (800813c <DMA_SetConfig+0x354>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d101      	bne.n	80080ca <DMA_SetConfig+0x2e2>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e000      	b.n	80080cc <DMA_SetConfig+0x2e4>
 80080ca:	2300      	movs	r3, #0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d020      	beq.n	8008112 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d4:	f003 031f 	and.w	r3, r3, #31
 80080d8:	2201      	movs	r2, #1
 80080da:	409a      	lsls	r2, r3
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	2b40      	cmp	r3, #64	; 0x40
 80080ee:	d108      	bne.n	8008102 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	60da      	str	r2, [r3, #12]
}
 8008100:	e007      	b.n	8008112 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	60da      	str	r2, [r3, #12]
}
 8008112:	bf00      	nop
 8008114:	371c      	adds	r7, #28
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	58025408 	.word	0x58025408
 8008124:	5802541c 	.word	0x5802541c
 8008128:	58025430 	.word	0x58025430
 800812c:	58025444 	.word	0x58025444
 8008130:	58025458 	.word	0x58025458
 8008134:	5802546c 	.word	0x5802546c
 8008138:	58025480 	.word	0x58025480
 800813c:	58025494 	.word	0x58025494

08008140 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a42      	ldr	r2, [pc, #264]	; (8008258 <DMA_CalcBaseAndBitshift+0x118>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d04a      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a41      	ldr	r2, [pc, #260]	; (800825c <DMA_CalcBaseAndBitshift+0x11c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d045      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a3f      	ldr	r2, [pc, #252]	; (8008260 <DMA_CalcBaseAndBitshift+0x120>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d040      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a3e      	ldr	r2, [pc, #248]	; (8008264 <DMA_CalcBaseAndBitshift+0x124>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d03b      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a3c      	ldr	r2, [pc, #240]	; (8008268 <DMA_CalcBaseAndBitshift+0x128>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d036      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a3b      	ldr	r2, [pc, #236]	; (800826c <DMA_CalcBaseAndBitshift+0x12c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d031      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a39      	ldr	r2, [pc, #228]	; (8008270 <DMA_CalcBaseAndBitshift+0x130>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d02c      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a38      	ldr	r2, [pc, #224]	; (8008274 <DMA_CalcBaseAndBitshift+0x134>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d027      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a36      	ldr	r2, [pc, #216]	; (8008278 <DMA_CalcBaseAndBitshift+0x138>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d022      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a35      	ldr	r2, [pc, #212]	; (800827c <DMA_CalcBaseAndBitshift+0x13c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d01d      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a33      	ldr	r2, [pc, #204]	; (8008280 <DMA_CalcBaseAndBitshift+0x140>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d018      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a32      	ldr	r2, [pc, #200]	; (8008284 <DMA_CalcBaseAndBitshift+0x144>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d013      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a30      	ldr	r2, [pc, #192]	; (8008288 <DMA_CalcBaseAndBitshift+0x148>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d00e      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a2f      	ldr	r2, [pc, #188]	; (800828c <DMA_CalcBaseAndBitshift+0x14c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d009      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a2d      	ldr	r2, [pc, #180]	; (8008290 <DMA_CalcBaseAndBitshift+0x150>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d004      	beq.n	80081e8 <DMA_CalcBaseAndBitshift+0xa8>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a2c      	ldr	r2, [pc, #176]	; (8008294 <DMA_CalcBaseAndBitshift+0x154>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d101      	bne.n	80081ec <DMA_CalcBaseAndBitshift+0xac>
 80081e8:	2301      	movs	r3, #1
 80081ea:	e000      	b.n	80081ee <DMA_CalcBaseAndBitshift+0xae>
 80081ec:	2300      	movs	r3, #0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d024      	beq.n	800823c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	3b10      	subs	r3, #16
 80081fa:	4a27      	ldr	r2, [pc, #156]	; (8008298 <DMA_CalcBaseAndBitshift+0x158>)
 80081fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008200:	091b      	lsrs	r3, r3, #4
 8008202:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f003 0307 	and.w	r3, r3, #7
 800820a:	4a24      	ldr	r2, [pc, #144]	; (800829c <DMA_CalcBaseAndBitshift+0x15c>)
 800820c:	5cd3      	ldrb	r3, [r2, r3]
 800820e:	461a      	mov	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2b03      	cmp	r3, #3
 8008218:	d908      	bls.n	800822c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	4b1f      	ldr	r3, [pc, #124]	; (80082a0 <DMA_CalcBaseAndBitshift+0x160>)
 8008222:	4013      	ands	r3, r2
 8008224:	1d1a      	adds	r2, r3, #4
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	659a      	str	r2, [r3, #88]	; 0x58
 800822a:	e00d      	b.n	8008248 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	461a      	mov	r2, r3
 8008232:	4b1b      	ldr	r3, [pc, #108]	; (80082a0 <DMA_CalcBaseAndBitshift+0x160>)
 8008234:	4013      	ands	r3, r2
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	6593      	str	r3, [r2, #88]	; 0x58
 800823a:	e005      	b.n	8008248 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800824c:	4618      	mov	r0, r3
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	40020010 	.word	0x40020010
 800825c:	40020028 	.word	0x40020028
 8008260:	40020040 	.word	0x40020040
 8008264:	40020058 	.word	0x40020058
 8008268:	40020070 	.word	0x40020070
 800826c:	40020088 	.word	0x40020088
 8008270:	400200a0 	.word	0x400200a0
 8008274:	400200b8 	.word	0x400200b8
 8008278:	40020410 	.word	0x40020410
 800827c:	40020428 	.word	0x40020428
 8008280:	40020440 	.word	0x40020440
 8008284:	40020458 	.word	0x40020458
 8008288:	40020470 	.word	0x40020470
 800828c:	40020488 	.word	0x40020488
 8008290:	400204a0 	.word	0x400204a0
 8008294:	400204b8 	.word	0x400204b8
 8008298:	aaaaaaab 	.word	0xaaaaaaab
 800829c:	0800f840 	.word	0x0800f840
 80082a0:	fffffc00 	.word	0xfffffc00

080082a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d120      	bne.n	80082fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d858      	bhi.n	8008372 <DMA_CheckFifoParam+0xce>
 80082c0:	a201      	add	r2, pc, #4	; (adr r2, 80082c8 <DMA_CheckFifoParam+0x24>)
 80082c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c6:	bf00      	nop
 80082c8:	080082d9 	.word	0x080082d9
 80082cc:	080082eb 	.word	0x080082eb
 80082d0:	080082d9 	.word	0x080082d9
 80082d4:	08008373 	.word	0x08008373
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d048      	beq.n	8008376 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082e8:	e045      	b.n	8008376 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80082f2:	d142      	bne.n	800837a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082f8:	e03f      	b.n	800837a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008302:	d123      	bne.n	800834c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008308:	2b03      	cmp	r3, #3
 800830a:	d838      	bhi.n	800837e <DMA_CheckFifoParam+0xda>
 800830c:	a201      	add	r2, pc, #4	; (adr r2, 8008314 <DMA_CheckFifoParam+0x70>)
 800830e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008312:	bf00      	nop
 8008314:	08008325 	.word	0x08008325
 8008318:	0800832b 	.word	0x0800832b
 800831c:	08008325 	.word	0x08008325
 8008320:	0800833d 	.word	0x0800833d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	73fb      	strb	r3, [r7, #15]
        break;
 8008328:	e030      	b.n	800838c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d025      	beq.n	8008382 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800833a:	e022      	b.n	8008382 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008340:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008344:	d11f      	bne.n	8008386 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800834a:	e01c      	b.n	8008386 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008350:	2b02      	cmp	r3, #2
 8008352:	d902      	bls.n	800835a <DMA_CheckFifoParam+0xb6>
 8008354:	2b03      	cmp	r3, #3
 8008356:	d003      	beq.n	8008360 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008358:	e018      	b.n	800838c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	73fb      	strb	r3, [r7, #15]
        break;
 800835e:	e015      	b.n	800838c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00e      	beq.n	800838a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	73fb      	strb	r3, [r7, #15]
    break;
 8008370:	e00b      	b.n	800838a <DMA_CheckFifoParam+0xe6>
        break;
 8008372:	bf00      	nop
 8008374:	e00a      	b.n	800838c <DMA_CheckFifoParam+0xe8>
        break;
 8008376:	bf00      	nop
 8008378:	e008      	b.n	800838c <DMA_CheckFifoParam+0xe8>
        break;
 800837a:	bf00      	nop
 800837c:	e006      	b.n	800838c <DMA_CheckFifoParam+0xe8>
        break;
 800837e:	bf00      	nop
 8008380:	e004      	b.n	800838c <DMA_CheckFifoParam+0xe8>
        break;
 8008382:	bf00      	nop
 8008384:	e002      	b.n	800838c <DMA_CheckFifoParam+0xe8>
        break;
 8008386:	bf00      	nop
 8008388:	e000      	b.n	800838c <DMA_CheckFifoParam+0xe8>
    break;
 800838a:	bf00      	nop
    }
  }

  return status;
 800838c:	7bfb      	ldrb	r3, [r7, #15]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop

0800839c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a38      	ldr	r2, [pc, #224]	; (8008490 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d022      	beq.n	80083fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a36      	ldr	r2, [pc, #216]	; (8008494 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d01d      	beq.n	80083fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a35      	ldr	r2, [pc, #212]	; (8008498 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d018      	beq.n	80083fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a33      	ldr	r2, [pc, #204]	; (800849c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d013      	beq.n	80083fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a32      	ldr	r2, [pc, #200]	; (80084a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d00e      	beq.n	80083fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a30      	ldr	r2, [pc, #192]	; (80084a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d009      	beq.n	80083fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a2f      	ldr	r2, [pc, #188]	; (80084a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d004      	beq.n	80083fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a2d      	ldr	r2, [pc, #180]	; (80084ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d101      	bne.n	80083fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80083fa:	2301      	movs	r3, #1
 80083fc:	e000      	b.n	8008400 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80083fe:	2300      	movs	r3, #0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d01a      	beq.n	800843a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	b2db      	uxtb	r3, r3
 800840a:	3b08      	subs	r3, #8
 800840c:	4a28      	ldr	r2, [pc, #160]	; (80084b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800840e:	fba2 2303 	umull	r2, r3, r2, r3
 8008412:	091b      	lsrs	r3, r3, #4
 8008414:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4b26      	ldr	r3, [pc, #152]	; (80084b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800841a:	4413      	add	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	461a      	mov	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a24      	ldr	r2, [pc, #144]	; (80084b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008428:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f003 031f 	and.w	r3, r3, #31
 8008430:	2201      	movs	r2, #1
 8008432:	409a      	lsls	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008438:	e024      	b.n	8008484 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	b2db      	uxtb	r3, r3
 8008440:	3b10      	subs	r3, #16
 8008442:	4a1e      	ldr	r2, [pc, #120]	; (80084bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008444:	fba2 2303 	umull	r2, r3, r2, r3
 8008448:	091b      	lsrs	r3, r3, #4
 800844a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	4a1c      	ldr	r2, [pc, #112]	; (80084c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d806      	bhi.n	8008462 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	4a1b      	ldr	r2, [pc, #108]	; (80084c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d902      	bls.n	8008462 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	3308      	adds	r3, #8
 8008460:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	4b18      	ldr	r3, [pc, #96]	; (80084c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008466:	4413      	add	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	461a      	mov	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a16      	ldr	r2, [pc, #88]	; (80084cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008474:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f003 031f 	and.w	r3, r3, #31
 800847c:	2201      	movs	r2, #1
 800847e:	409a      	lsls	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008484:	bf00      	nop
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	58025408 	.word	0x58025408
 8008494:	5802541c 	.word	0x5802541c
 8008498:	58025430 	.word	0x58025430
 800849c:	58025444 	.word	0x58025444
 80084a0:	58025458 	.word	0x58025458
 80084a4:	5802546c 	.word	0x5802546c
 80084a8:	58025480 	.word	0x58025480
 80084ac:	58025494 	.word	0x58025494
 80084b0:	cccccccd 	.word	0xcccccccd
 80084b4:	16009600 	.word	0x16009600
 80084b8:	58025880 	.word	0x58025880
 80084bc:	aaaaaaab 	.word	0xaaaaaaab
 80084c0:	400204b8 	.word	0x400204b8
 80084c4:	4002040f 	.word	0x4002040f
 80084c8:	10008200 	.word	0x10008200
 80084cc:	40020880 	.word	0x40020880

080084d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d04a      	beq.n	800857c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2b08      	cmp	r3, #8
 80084ea:	d847      	bhi.n	800857c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a25      	ldr	r2, [pc, #148]	; (8008588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d022      	beq.n	800853c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a24      	ldr	r2, [pc, #144]	; (800858c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d01d      	beq.n	800853c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a22      	ldr	r2, [pc, #136]	; (8008590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d018      	beq.n	800853c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a21      	ldr	r2, [pc, #132]	; (8008594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d013      	beq.n	800853c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a1f      	ldr	r2, [pc, #124]	; (8008598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d00e      	beq.n	800853c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a1e      	ldr	r2, [pc, #120]	; (800859c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d009      	beq.n	800853c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a1c      	ldr	r2, [pc, #112]	; (80085a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d004      	beq.n	800853c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a1b      	ldr	r2, [pc, #108]	; (80085a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d101      	bne.n	8008540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800853c:	2301      	movs	r3, #1
 800853e:	e000      	b.n	8008542 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008540:	2300      	movs	r3, #0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00a      	beq.n	800855c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	4b17      	ldr	r3, [pc, #92]	; (80085a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800854a:	4413      	add	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	461a      	mov	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a15      	ldr	r2, [pc, #84]	; (80085ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008558:	671a      	str	r2, [r3, #112]	; 0x70
 800855a:	e009      	b.n	8008570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	4b14      	ldr	r3, [pc, #80]	; (80085b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008560:	4413      	add	r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	461a      	mov	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a11      	ldr	r2, [pc, #68]	; (80085b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800856e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	3b01      	subs	r3, #1
 8008574:	2201      	movs	r2, #1
 8008576:	409a      	lsls	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800857c:	bf00      	nop
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	58025408 	.word	0x58025408
 800858c:	5802541c 	.word	0x5802541c
 8008590:	58025430 	.word	0x58025430
 8008594:	58025444 	.word	0x58025444
 8008598:	58025458 	.word	0x58025458
 800859c:	5802546c 	.word	0x5802546c
 80085a0:	58025480 	.word	0x58025480
 80085a4:	58025494 	.word	0x58025494
 80085a8:	1600963f 	.word	0x1600963f
 80085ac:	58025940 	.word	0x58025940
 80085b0:	1000823f 	.word	0x1000823f
 80085b4:	40020940 	.word	0x40020940

080085b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b089      	sub	sp, #36	; 0x24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80085c6:	4b86      	ldr	r3, [pc, #536]	; (80087e0 <HAL_GPIO_Init+0x228>)
 80085c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80085ca:	e18c      	b.n	80088e6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	2101      	movs	r1, #1
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	fa01 f303 	lsl.w	r3, r1, r3
 80085d8:	4013      	ands	r3, r2
 80085da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f000 817e 	beq.w	80088e0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f003 0303 	and.w	r3, r3, #3
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d005      	beq.n	80085fc <HAL_GPIO_Init+0x44>
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f003 0303 	and.w	r3, r3, #3
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d130      	bne.n	800865e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	005b      	lsls	r3, r3, #1
 8008606:	2203      	movs	r2, #3
 8008608:	fa02 f303 	lsl.w	r3, r2, r3
 800860c:	43db      	mvns	r3, r3
 800860e:	69ba      	ldr	r2, [r7, #24]
 8008610:	4013      	ands	r3, r2
 8008612:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	68da      	ldr	r2, [r3, #12]
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	005b      	lsls	r3, r3, #1
 800861c:	fa02 f303 	lsl.w	r3, r2, r3
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	4313      	orrs	r3, r2
 8008624:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	69ba      	ldr	r2, [r7, #24]
 800862a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008632:	2201      	movs	r2, #1
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	fa02 f303 	lsl.w	r3, r2, r3
 800863a:	43db      	mvns	r3, r3
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	4013      	ands	r3, r2
 8008640:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	091b      	lsrs	r3, r3, #4
 8008648:	f003 0201 	and.w	r2, r3, #1
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	fa02 f303 	lsl.w	r3, r2, r3
 8008652:	69ba      	ldr	r2, [r7, #24]
 8008654:	4313      	orrs	r3, r2
 8008656:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	69ba      	ldr	r2, [r7, #24]
 800865c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f003 0303 	and.w	r3, r3, #3
 8008666:	2b03      	cmp	r3, #3
 8008668:	d017      	beq.n	800869a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	005b      	lsls	r3, r3, #1
 8008674:	2203      	movs	r2, #3
 8008676:	fa02 f303 	lsl.w	r3, r2, r3
 800867a:	43db      	mvns	r3, r3
 800867c:	69ba      	ldr	r2, [r7, #24]
 800867e:	4013      	ands	r3, r2
 8008680:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	689a      	ldr	r2, [r3, #8]
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	fa02 f303 	lsl.w	r3, r2, r3
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	4313      	orrs	r3, r2
 8008692:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	69ba      	ldr	r2, [r7, #24]
 8008698:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f003 0303 	and.w	r3, r3, #3
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d123      	bne.n	80086ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	08da      	lsrs	r2, r3, #3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	3208      	adds	r2, #8
 80086ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	f003 0307 	and.w	r3, r3, #7
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	220f      	movs	r2, #15
 80086be:	fa02 f303 	lsl.w	r3, r2, r3
 80086c2:	43db      	mvns	r3, r3
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	4013      	ands	r3, r2
 80086c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	691a      	ldr	r2, [r3, #16]
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	f003 0307 	and.w	r3, r3, #7
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	fa02 f303 	lsl.w	r3, r2, r3
 80086da:	69ba      	ldr	r2, [r7, #24]
 80086dc:	4313      	orrs	r3, r2
 80086de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	08da      	lsrs	r2, r3, #3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	3208      	adds	r2, #8
 80086e8:	69b9      	ldr	r1, [r7, #24]
 80086ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	2203      	movs	r2, #3
 80086fa:	fa02 f303 	lsl.w	r3, r2, r3
 80086fe:	43db      	mvns	r3, r3
 8008700:	69ba      	ldr	r2, [r7, #24]
 8008702:	4013      	ands	r3, r2
 8008704:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	f003 0203 	and.w	r2, r3, #3
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	005b      	lsls	r3, r3, #1
 8008712:	fa02 f303 	lsl.w	r3, r2, r3
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	4313      	orrs	r3, r2
 800871a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	69ba      	ldr	r2, [r7, #24]
 8008720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 80d8 	beq.w	80088e0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008730:	4b2c      	ldr	r3, [pc, #176]	; (80087e4 <HAL_GPIO_Init+0x22c>)
 8008732:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008736:	4a2b      	ldr	r2, [pc, #172]	; (80087e4 <HAL_GPIO_Init+0x22c>)
 8008738:	f043 0302 	orr.w	r3, r3, #2
 800873c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008740:	4b28      	ldr	r3, [pc, #160]	; (80087e4 <HAL_GPIO_Init+0x22c>)
 8008742:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008746:	f003 0302 	and.w	r3, r3, #2
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800874e:	4a26      	ldr	r2, [pc, #152]	; (80087e8 <HAL_GPIO_Init+0x230>)
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	089b      	lsrs	r3, r3, #2
 8008754:	3302      	adds	r3, #2
 8008756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800875a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	f003 0303 	and.w	r3, r3, #3
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	220f      	movs	r2, #15
 8008766:	fa02 f303 	lsl.w	r3, r2, r3
 800876a:	43db      	mvns	r3, r3
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	4013      	ands	r3, r2
 8008770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a1d      	ldr	r2, [pc, #116]	; (80087ec <HAL_GPIO_Init+0x234>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d04a      	beq.n	8008810 <HAL_GPIO_Init+0x258>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a1c      	ldr	r2, [pc, #112]	; (80087f0 <HAL_GPIO_Init+0x238>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d02b      	beq.n	80087da <HAL_GPIO_Init+0x222>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a1b      	ldr	r2, [pc, #108]	; (80087f4 <HAL_GPIO_Init+0x23c>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d025      	beq.n	80087d6 <HAL_GPIO_Init+0x21e>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a1a      	ldr	r2, [pc, #104]	; (80087f8 <HAL_GPIO_Init+0x240>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d01f      	beq.n	80087d2 <HAL_GPIO_Init+0x21a>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a19      	ldr	r2, [pc, #100]	; (80087fc <HAL_GPIO_Init+0x244>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d019      	beq.n	80087ce <HAL_GPIO_Init+0x216>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a18      	ldr	r2, [pc, #96]	; (8008800 <HAL_GPIO_Init+0x248>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d013      	beq.n	80087ca <HAL_GPIO_Init+0x212>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a17      	ldr	r2, [pc, #92]	; (8008804 <HAL_GPIO_Init+0x24c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d00d      	beq.n	80087c6 <HAL_GPIO_Init+0x20e>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a16      	ldr	r2, [pc, #88]	; (8008808 <HAL_GPIO_Init+0x250>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d007      	beq.n	80087c2 <HAL_GPIO_Init+0x20a>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a15      	ldr	r2, [pc, #84]	; (800880c <HAL_GPIO_Init+0x254>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d101      	bne.n	80087be <HAL_GPIO_Init+0x206>
 80087ba:	2309      	movs	r3, #9
 80087bc:	e029      	b.n	8008812 <HAL_GPIO_Init+0x25a>
 80087be:	230a      	movs	r3, #10
 80087c0:	e027      	b.n	8008812 <HAL_GPIO_Init+0x25a>
 80087c2:	2307      	movs	r3, #7
 80087c4:	e025      	b.n	8008812 <HAL_GPIO_Init+0x25a>
 80087c6:	2306      	movs	r3, #6
 80087c8:	e023      	b.n	8008812 <HAL_GPIO_Init+0x25a>
 80087ca:	2305      	movs	r3, #5
 80087cc:	e021      	b.n	8008812 <HAL_GPIO_Init+0x25a>
 80087ce:	2304      	movs	r3, #4
 80087d0:	e01f      	b.n	8008812 <HAL_GPIO_Init+0x25a>
 80087d2:	2303      	movs	r3, #3
 80087d4:	e01d      	b.n	8008812 <HAL_GPIO_Init+0x25a>
 80087d6:	2302      	movs	r3, #2
 80087d8:	e01b      	b.n	8008812 <HAL_GPIO_Init+0x25a>
 80087da:	2301      	movs	r3, #1
 80087dc:	e019      	b.n	8008812 <HAL_GPIO_Init+0x25a>
 80087de:	bf00      	nop
 80087e0:	58000080 	.word	0x58000080
 80087e4:	58024400 	.word	0x58024400
 80087e8:	58000400 	.word	0x58000400
 80087ec:	58020000 	.word	0x58020000
 80087f0:	58020400 	.word	0x58020400
 80087f4:	58020800 	.word	0x58020800
 80087f8:	58020c00 	.word	0x58020c00
 80087fc:	58021000 	.word	0x58021000
 8008800:	58021400 	.word	0x58021400
 8008804:	58021800 	.word	0x58021800
 8008808:	58021c00 	.word	0x58021c00
 800880c:	58022400 	.word	0x58022400
 8008810:	2300      	movs	r3, #0
 8008812:	69fa      	ldr	r2, [r7, #28]
 8008814:	f002 0203 	and.w	r2, r2, #3
 8008818:	0092      	lsls	r2, r2, #2
 800881a:	4093      	lsls	r3, r2
 800881c:	69ba      	ldr	r2, [r7, #24]
 800881e:	4313      	orrs	r3, r2
 8008820:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008822:	4938      	ldr	r1, [pc, #224]	; (8008904 <HAL_GPIO_Init+0x34c>)
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	089b      	lsrs	r3, r3, #2
 8008828:	3302      	adds	r3, #2
 800882a:	69ba      	ldr	r2, [r7, #24]
 800882c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	43db      	mvns	r3, r3
 800883c:	69ba      	ldr	r2, [r7, #24]
 800883e:	4013      	ands	r3, r2
 8008840:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d003      	beq.n	8008856 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800884e:	69ba      	ldr	r2, [r7, #24]
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	4313      	orrs	r3, r2
 8008854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008856:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800885e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	43db      	mvns	r3, r3
 800886a:	69ba      	ldr	r2, [r7, #24]
 800886c:	4013      	ands	r3, r2
 800886e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	4313      	orrs	r3, r2
 8008882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	43db      	mvns	r3, r3
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	4013      	ands	r3, r2
 800889a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d003      	beq.n	80088b0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80088a8:	69ba      	ldr	r2, [r7, #24]
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	69ba      	ldr	r2, [r7, #24]
 80088b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	43db      	mvns	r3, r3
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	4013      	ands	r3, r2
 80088c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d003      	beq.n	80088da <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80088d2:	69ba      	ldr	r2, [r7, #24]
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	69ba      	ldr	r2, [r7, #24]
 80088de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	3301      	adds	r3, #1
 80088e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	fa22 f303 	lsr.w	r3, r2, r3
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f47f ae6b 	bne.w	80085cc <HAL_GPIO_Init+0x14>
  }
}
 80088f6:	bf00      	nop
 80088f8:	bf00      	nop
 80088fa:	3724      	adds	r7, #36	; 0x24
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	58000400 	.word	0x58000400

08008908 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008908:	b480      	push	{r7}
 800890a:	b087      	sub	sp, #28
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008912:	2300      	movs	r3, #0
 8008914:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008916:	4b72      	ldr	r3, [pc, #456]	; (8008ae0 <HAL_GPIO_DeInit+0x1d8>)
 8008918:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800891a:	e0d3      	b.n	8008ac4 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800891c:	2201      	movs	r2, #1
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	fa02 f303 	lsl.w	r3, r2, r3
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	4013      	ands	r3, r2
 8008928:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 80c6 	beq.w	8008abe <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008932:	4a6c      	ldr	r2, [pc, #432]	; (8008ae4 <HAL_GPIO_DeInit+0x1dc>)
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	089b      	lsrs	r3, r3, #2
 8008938:	3302      	adds	r3, #2
 800893a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800893e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	f003 0303 	and.w	r3, r3, #3
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	220f      	movs	r2, #15
 800894a:	fa02 f303 	lsl.w	r3, r2, r3
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	4013      	ands	r3, r2
 8008952:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a64      	ldr	r2, [pc, #400]	; (8008ae8 <HAL_GPIO_DeInit+0x1e0>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d031      	beq.n	80089c0 <HAL_GPIO_DeInit+0xb8>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a63      	ldr	r2, [pc, #396]	; (8008aec <HAL_GPIO_DeInit+0x1e4>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d02b      	beq.n	80089bc <HAL_GPIO_DeInit+0xb4>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a62      	ldr	r2, [pc, #392]	; (8008af0 <HAL_GPIO_DeInit+0x1e8>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d025      	beq.n	80089b8 <HAL_GPIO_DeInit+0xb0>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a61      	ldr	r2, [pc, #388]	; (8008af4 <HAL_GPIO_DeInit+0x1ec>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d01f      	beq.n	80089b4 <HAL_GPIO_DeInit+0xac>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a60      	ldr	r2, [pc, #384]	; (8008af8 <HAL_GPIO_DeInit+0x1f0>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d019      	beq.n	80089b0 <HAL_GPIO_DeInit+0xa8>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a5f      	ldr	r2, [pc, #380]	; (8008afc <HAL_GPIO_DeInit+0x1f4>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d013      	beq.n	80089ac <HAL_GPIO_DeInit+0xa4>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a5e      	ldr	r2, [pc, #376]	; (8008b00 <HAL_GPIO_DeInit+0x1f8>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d00d      	beq.n	80089a8 <HAL_GPIO_DeInit+0xa0>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a5d      	ldr	r2, [pc, #372]	; (8008b04 <HAL_GPIO_DeInit+0x1fc>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d007      	beq.n	80089a4 <HAL_GPIO_DeInit+0x9c>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a5c      	ldr	r2, [pc, #368]	; (8008b08 <HAL_GPIO_DeInit+0x200>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d101      	bne.n	80089a0 <HAL_GPIO_DeInit+0x98>
 800899c:	2309      	movs	r3, #9
 800899e:	e010      	b.n	80089c2 <HAL_GPIO_DeInit+0xba>
 80089a0:	230a      	movs	r3, #10
 80089a2:	e00e      	b.n	80089c2 <HAL_GPIO_DeInit+0xba>
 80089a4:	2307      	movs	r3, #7
 80089a6:	e00c      	b.n	80089c2 <HAL_GPIO_DeInit+0xba>
 80089a8:	2306      	movs	r3, #6
 80089aa:	e00a      	b.n	80089c2 <HAL_GPIO_DeInit+0xba>
 80089ac:	2305      	movs	r3, #5
 80089ae:	e008      	b.n	80089c2 <HAL_GPIO_DeInit+0xba>
 80089b0:	2304      	movs	r3, #4
 80089b2:	e006      	b.n	80089c2 <HAL_GPIO_DeInit+0xba>
 80089b4:	2303      	movs	r3, #3
 80089b6:	e004      	b.n	80089c2 <HAL_GPIO_DeInit+0xba>
 80089b8:	2302      	movs	r3, #2
 80089ba:	e002      	b.n	80089c2 <HAL_GPIO_DeInit+0xba>
 80089bc:	2301      	movs	r3, #1
 80089be:	e000      	b.n	80089c2 <HAL_GPIO_DeInit+0xba>
 80089c0:	2300      	movs	r3, #0
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	f002 0203 	and.w	r2, r2, #3
 80089c8:	0092      	lsls	r2, r2, #2
 80089ca:	4093      	lsls	r3, r2
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d136      	bne.n	8008a40 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	43db      	mvns	r3, r3
 80089da:	401a      	ands	r2, r3
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	685a      	ldr	r2, [r3, #4]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	43db      	mvns	r3, r3
 80089e8:	401a      	ands	r2, r3
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80089ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	43db      	mvns	r3, r3
 80089f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089fc:	4013      	ands	r3, r2
 80089fe:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	43db      	mvns	r3, r3
 8008a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a0e:	4013      	ands	r3, r2
 8008a10:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f003 0303 	and.w	r3, r3, #3
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	220f      	movs	r2, #15
 8008a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a20:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008a22:	4a30      	ldr	r2, [pc, #192]	; (8008ae4 <HAL_GPIO_DeInit+0x1dc>)
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	089b      	lsrs	r3, r3, #2
 8008a28:	3302      	adds	r3, #2
 8008a2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	43da      	mvns	r2, r3
 8008a32:	482c      	ldr	r0, [pc, #176]	; (8008ae4 <HAL_GPIO_DeInit+0x1dc>)
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	089b      	lsrs	r3, r3, #2
 8008a38:	400a      	ands	r2, r1
 8008a3a:	3302      	adds	r3, #2
 8008a3c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	2103      	movs	r1, #3
 8008a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a4e:	431a      	orrs	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	08da      	lsrs	r2, r3, #3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	3208      	adds	r2, #8
 8008a5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f003 0307 	and.w	r3, r3, #7
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	220f      	movs	r2, #15
 8008a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6e:	43db      	mvns	r3, r3
 8008a70:	697a      	ldr	r2, [r7, #20]
 8008a72:	08d2      	lsrs	r2, r2, #3
 8008a74:	4019      	ands	r1, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	3208      	adds	r2, #8
 8008a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68da      	ldr	r2, [r3, #12]
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	005b      	lsls	r3, r3, #1
 8008a86:	2103      	movs	r1, #3
 8008a88:	fa01 f303 	lsl.w	r3, r1, r3
 8008a8c:	43db      	mvns	r3, r3
 8008a8e:	401a      	ands	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685a      	ldr	r2, [r3, #4]
 8008a98:	2101      	movs	r1, #1
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008aa0:	43db      	mvns	r3, r3
 8008aa2:	401a      	ands	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	689a      	ldr	r2, [r3, #8]
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	005b      	lsls	r3, r3, #1
 8008ab0:	2103      	movs	r1, #3
 8008ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ab6:	43db      	mvns	r3, r3
 8008ab8:	401a      	ands	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f47f af25 	bne.w	800891c <HAL_GPIO_DeInit+0x14>
  }
}
 8008ad2:	bf00      	nop
 8008ad4:	bf00      	nop
 8008ad6:	371c      	adds	r7, #28
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	58000080 	.word	0x58000080
 8008ae4:	58000400 	.word	0x58000400
 8008ae8:	58020000 	.word	0x58020000
 8008aec:	58020400 	.word	0x58020400
 8008af0:	58020800 	.word	0x58020800
 8008af4:	58020c00 	.word	0x58020c00
 8008af8:	58021000 	.word	0x58021000
 8008afc:	58021400 	.word	0x58021400
 8008b00:	58021800 	.word	0x58021800
 8008b04:	58021c00 	.word	0x58021c00
 8008b08:	58022400 	.word	0x58022400

08008b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	807b      	strh	r3, [r7, #2]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008b1c:	787b      	ldrb	r3, [r7, #1]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d003      	beq.n	8008b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b22:	887a      	ldrh	r2, [r7, #2]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008b28:	e003      	b.n	8008b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008b2a:	887b      	ldrh	r3, [r7, #2]
 8008b2c:	041a      	lsls	r2, r3, #16
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	619a      	str	r2, [r3, #24]
}
 8008b32:	bf00      	nop
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
	...

08008b40 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008b48:	4b19      	ldr	r3, [pc, #100]	; (8008bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f003 0304 	and.w	r3, r3, #4
 8008b50:	2b04      	cmp	r3, #4
 8008b52:	d00a      	beq.n	8008b6a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008b54:	4b16      	ldr	r3, [pc, #88]	; (8008bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	f003 0307 	and.w	r3, r3, #7
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d001      	beq.n	8008b66 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	e01f      	b.n	8008ba6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	e01d      	b.n	8008ba6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008b6a:	4b11      	ldr	r3, [pc, #68]	; (8008bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	f023 0207 	bic.w	r2, r3, #7
 8008b72:	490f      	ldr	r1, [pc, #60]	; (8008bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008b7a:	f7fc fbdf 	bl	800533c <HAL_GetTick>
 8008b7e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008b80:	e009      	b.n	8008b96 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008b82:	f7fc fbdb 	bl	800533c <HAL_GetTick>
 8008b86:	4602      	mov	r2, r0
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b90:	d901      	bls.n	8008b96 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e007      	b.n	8008ba6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008b96:	4b06      	ldr	r3, [pc, #24]	; (8008bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ba2:	d1ee      	bne.n	8008b82 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	58024800 	.word	0x58024800

08008bb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b08c      	sub	sp, #48	; 0x30
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e3c8      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 8087 	beq.w	8008ce2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bd4:	4b88      	ldr	r3, [pc, #544]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008bde:	4b86      	ldr	r3, [pc, #536]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be6:	2b10      	cmp	r3, #16
 8008be8:	d007      	beq.n	8008bfa <HAL_RCC_OscConfig+0x46>
 8008bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bec:	2b18      	cmp	r3, #24
 8008bee:	d110      	bne.n	8008c12 <HAL_RCC_OscConfig+0x5e>
 8008bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d10b      	bne.n	8008c12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bfa:	4b7f      	ldr	r3, [pc, #508]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d06c      	beq.n	8008ce0 <HAL_RCC_OscConfig+0x12c>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d168      	bne.n	8008ce0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e3a2      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c1a:	d106      	bne.n	8008c2a <HAL_RCC_OscConfig+0x76>
 8008c1c:	4b76      	ldr	r3, [pc, #472]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a75      	ldr	r2, [pc, #468]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c26:	6013      	str	r3, [r2, #0]
 8008c28:	e02e      	b.n	8008c88 <HAL_RCC_OscConfig+0xd4>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10c      	bne.n	8008c4c <HAL_RCC_OscConfig+0x98>
 8008c32:	4b71      	ldr	r3, [pc, #452]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a70      	ldr	r2, [pc, #448]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c3c:	6013      	str	r3, [r2, #0]
 8008c3e:	4b6e      	ldr	r3, [pc, #440]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a6d      	ldr	r2, [pc, #436]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	e01d      	b.n	8008c88 <HAL_RCC_OscConfig+0xd4>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c54:	d10c      	bne.n	8008c70 <HAL_RCC_OscConfig+0xbc>
 8008c56:	4b68      	ldr	r3, [pc, #416]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a67      	ldr	r2, [pc, #412]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c60:	6013      	str	r3, [r2, #0]
 8008c62:	4b65      	ldr	r3, [pc, #404]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a64      	ldr	r2, [pc, #400]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c6c:	6013      	str	r3, [r2, #0]
 8008c6e:	e00b      	b.n	8008c88 <HAL_RCC_OscConfig+0xd4>
 8008c70:	4b61      	ldr	r3, [pc, #388]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a60      	ldr	r2, [pc, #384]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c7a:	6013      	str	r3, [r2, #0]
 8008c7c:	4b5e      	ldr	r3, [pc, #376]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a5d      	ldr	r2, [pc, #372]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d013      	beq.n	8008cb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c90:	f7fc fb54 	bl	800533c <HAL_GetTick>
 8008c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c96:	e008      	b.n	8008caa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c98:	f7fc fb50 	bl	800533c <HAL_GetTick>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	2b64      	cmp	r3, #100	; 0x64
 8008ca4:	d901      	bls.n	8008caa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e356      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008caa:	4b53      	ldr	r3, [pc, #332]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d0f0      	beq.n	8008c98 <HAL_RCC_OscConfig+0xe4>
 8008cb6:	e014      	b.n	8008ce2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cb8:	f7fc fb40 	bl	800533c <HAL_GetTick>
 8008cbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008cbe:	e008      	b.n	8008cd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008cc0:	f7fc fb3c 	bl	800533c <HAL_GetTick>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	2b64      	cmp	r3, #100	; 0x64
 8008ccc:	d901      	bls.n	8008cd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e342      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008cd2:	4b49      	ldr	r3, [pc, #292]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1f0      	bne.n	8008cc0 <HAL_RCC_OscConfig+0x10c>
 8008cde:	e000      	b.n	8008ce2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 0302 	and.w	r3, r3, #2
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 808c 	beq.w	8008e08 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cf0:	4b41      	ldr	r3, [pc, #260]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cf8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008cfa:	4b3f      	ldr	r3, [pc, #252]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d007      	beq.n	8008d16 <HAL_RCC_OscConfig+0x162>
 8008d06:	6a3b      	ldr	r3, [r7, #32]
 8008d08:	2b18      	cmp	r3, #24
 8008d0a:	d137      	bne.n	8008d7c <HAL_RCC_OscConfig+0x1c8>
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	f003 0303 	and.w	r3, r3, #3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d132      	bne.n	8008d7c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d16:	4b38      	ldr	r3, [pc, #224]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 0304 	and.w	r3, r3, #4
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d005      	beq.n	8008d2e <HAL_RCC_OscConfig+0x17a>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d101      	bne.n	8008d2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e314      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008d2e:	4b32      	ldr	r3, [pc, #200]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f023 0219 	bic.w	r2, r3, #25
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	492f      	ldr	r1, [pc, #188]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d40:	f7fc fafc 	bl	800533c <HAL_GetTick>
 8008d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d46:	e008      	b.n	8008d5a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d48:	f7fc faf8 	bl	800533c <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d901      	bls.n	8008d5a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e2fe      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d5a:	4b27      	ldr	r3, [pc, #156]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 0304 	and.w	r3, r3, #4
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0f0      	beq.n	8008d48 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d66:	4b24      	ldr	r3, [pc, #144]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	061b      	lsls	r3, r3, #24
 8008d74:	4920      	ldr	r1, [pc, #128]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d7a:	e045      	b.n	8008e08 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d026      	beq.n	8008dd2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008d84:	4b1c      	ldr	r3, [pc, #112]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f023 0219 	bic.w	r2, r3, #25
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	4919      	ldr	r1, [pc, #100]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008d92:	4313      	orrs	r3, r2
 8008d94:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d96:	f7fc fad1 	bl	800533c <HAL_GetTick>
 8008d9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d9c:	e008      	b.n	8008db0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d9e:	f7fc facd 	bl	800533c <HAL_GetTick>
 8008da2:	4602      	mov	r2, r0
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d901      	bls.n	8008db0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e2d3      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008db0:	4b11      	ldr	r3, [pc, #68]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0304 	and.w	r3, r3, #4
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d0f0      	beq.n	8008d9e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dbc:	4b0e      	ldr	r3, [pc, #56]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	061b      	lsls	r3, r3, #24
 8008dca:	490b      	ldr	r1, [pc, #44]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	604b      	str	r3, [r1, #4]
 8008dd0:	e01a      	b.n	8008e08 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008dd2:	4b09      	ldr	r3, [pc, #36]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a08      	ldr	r2, [pc, #32]	; (8008df8 <HAL_RCC_OscConfig+0x244>)
 8008dd8:	f023 0301 	bic.w	r3, r3, #1
 8008ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dde:	f7fc faad 	bl	800533c <HAL_GetTick>
 8008de2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008de4:	e00a      	b.n	8008dfc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008de6:	f7fc faa9 	bl	800533c <HAL_GetTick>
 8008dea:	4602      	mov	r2, r0
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d903      	bls.n	8008dfc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	e2af      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
 8008df8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008dfc:	4b96      	ldr	r3, [pc, #600]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 0304 	and.w	r3, r3, #4
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1ee      	bne.n	8008de6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 0310 	and.w	r3, r3, #16
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d06a      	beq.n	8008eea <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e14:	4b90      	ldr	r3, [pc, #576]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e1c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e1e:	4b8e      	ldr	r3, [pc, #568]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e22:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	2b08      	cmp	r3, #8
 8008e28:	d007      	beq.n	8008e3a <HAL_RCC_OscConfig+0x286>
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	2b18      	cmp	r3, #24
 8008e2e:	d11b      	bne.n	8008e68 <HAL_RCC_OscConfig+0x2b4>
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	f003 0303 	and.w	r3, r3, #3
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d116      	bne.n	8008e68 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e3a:	4b87      	ldr	r3, [pc, #540]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d005      	beq.n	8008e52 <HAL_RCC_OscConfig+0x29e>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	69db      	ldr	r3, [r3, #28]
 8008e4a:	2b80      	cmp	r3, #128	; 0x80
 8008e4c:	d001      	beq.n	8008e52 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e282      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e52:	4b81      	ldr	r3, [pc, #516]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	061b      	lsls	r3, r3, #24
 8008e60:	497d      	ldr	r1, [pc, #500]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e66:	e040      	b.n	8008eea <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	69db      	ldr	r3, [r3, #28]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d023      	beq.n	8008eb8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008e70:	4b79      	ldr	r3, [pc, #484]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a78      	ldr	r2, [pc, #480]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e7c:	f7fc fa5e 	bl	800533c <HAL_GetTick>
 8008e80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e82:	e008      	b.n	8008e96 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008e84:	f7fc fa5a 	bl	800533c <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d901      	bls.n	8008e96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	e260      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e96:	4b70      	ldr	r3, [pc, #448]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d0f0      	beq.n	8008e84 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ea2:	4b6d      	ldr	r3, [pc, #436]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a1b      	ldr	r3, [r3, #32]
 8008eae:	061b      	lsls	r3, r3, #24
 8008eb0:	4969      	ldr	r1, [pc, #420]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	60cb      	str	r3, [r1, #12]
 8008eb6:	e018      	b.n	8008eea <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008eb8:	4b67      	ldr	r3, [pc, #412]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a66      	ldr	r2, [pc, #408]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ec4:	f7fc fa3a 	bl	800533c <HAL_GetTick>
 8008ec8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008eca:	e008      	b.n	8008ede <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008ecc:	f7fc fa36 	bl	800533c <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d901      	bls.n	8008ede <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e23c      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ede:	4b5e      	ldr	r3, [pc, #376]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1f0      	bne.n	8008ecc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 0308 	and.w	r3, r3, #8
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d036      	beq.n	8008f64 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d019      	beq.n	8008f32 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008efe:	4b56      	ldr	r3, [pc, #344]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f02:	4a55      	ldr	r2, [pc, #340]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008f04:	f043 0301 	orr.w	r3, r3, #1
 8008f08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f0a:	f7fc fa17 	bl	800533c <HAL_GetTick>
 8008f0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f10:	e008      	b.n	8008f24 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f12:	f7fc fa13 	bl	800533c <HAL_GetTick>
 8008f16:	4602      	mov	r2, r0
 8008f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1a:	1ad3      	subs	r3, r2, r3
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d901      	bls.n	8008f24 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e219      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f24:	4b4c      	ldr	r3, [pc, #304]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f28:	f003 0302 	and.w	r3, r3, #2
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d0f0      	beq.n	8008f12 <HAL_RCC_OscConfig+0x35e>
 8008f30:	e018      	b.n	8008f64 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f32:	4b49      	ldr	r3, [pc, #292]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f36:	4a48      	ldr	r2, [pc, #288]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008f38:	f023 0301 	bic.w	r3, r3, #1
 8008f3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f3e:	f7fc f9fd 	bl	800533c <HAL_GetTick>
 8008f42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f44:	e008      	b.n	8008f58 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f46:	f7fc f9f9 	bl	800533c <HAL_GetTick>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d901      	bls.n	8008f58 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e1ff      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f58:	4b3f      	ldr	r3, [pc, #252]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f5c:	f003 0302 	and.w	r3, r3, #2
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1f0      	bne.n	8008f46 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0320 	and.w	r3, r3, #32
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d036      	beq.n	8008fde <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d019      	beq.n	8008fac <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008f78:	4b37      	ldr	r3, [pc, #220]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a36      	ldr	r2, [pc, #216]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008f7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008f82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008f84:	f7fc f9da 	bl	800533c <HAL_GetTick>
 8008f88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008f8a:	e008      	b.n	8008f9e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008f8c:	f7fc f9d6 	bl	800533c <HAL_GetTick>
 8008f90:	4602      	mov	r2, r0
 8008f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d901      	bls.n	8008f9e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	e1dc      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008f9e:	4b2e      	ldr	r3, [pc, #184]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d0f0      	beq.n	8008f8c <HAL_RCC_OscConfig+0x3d8>
 8008faa:	e018      	b.n	8008fde <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008fac:	4b2a      	ldr	r3, [pc, #168]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a29      	ldr	r2, [pc, #164]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008fb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fb6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008fb8:	f7fc f9c0 	bl	800533c <HAL_GetTick>
 8008fbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008fbe:	e008      	b.n	8008fd2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fc0:	f7fc f9bc 	bl	800533c <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d901      	bls.n	8008fd2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e1c2      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008fd2:	4b21      	ldr	r3, [pc, #132]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1f0      	bne.n	8008fc0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0304 	and.w	r3, r3, #4
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f000 8086 	beq.w	80090f8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008fec:	4b1b      	ldr	r3, [pc, #108]	; (800905c <HAL_RCC_OscConfig+0x4a8>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a1a      	ldr	r2, [pc, #104]	; (800905c <HAL_RCC_OscConfig+0x4a8>)
 8008ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ff6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ff8:	f7fc f9a0 	bl	800533c <HAL_GetTick>
 8008ffc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ffe:	e008      	b.n	8009012 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009000:	f7fc f99c 	bl	800533c <HAL_GetTick>
 8009004:	4602      	mov	r2, r0
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	2b64      	cmp	r3, #100	; 0x64
 800900c:	d901      	bls.n	8009012 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	e1a2      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009012:	4b12      	ldr	r3, [pc, #72]	; (800905c <HAL_RCC_OscConfig+0x4a8>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800901a:	2b00      	cmp	r3, #0
 800901c:	d0f0      	beq.n	8009000 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	2b01      	cmp	r3, #1
 8009024:	d106      	bne.n	8009034 <HAL_RCC_OscConfig+0x480>
 8009026:	4b0c      	ldr	r3, [pc, #48]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8009028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800902a:	4a0b      	ldr	r2, [pc, #44]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 800902c:	f043 0301 	orr.w	r3, r3, #1
 8009030:	6713      	str	r3, [r2, #112]	; 0x70
 8009032:	e032      	b.n	800909a <HAL_RCC_OscConfig+0x4e6>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d111      	bne.n	8009060 <HAL_RCC_OscConfig+0x4ac>
 800903c:	4b06      	ldr	r3, [pc, #24]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 800903e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009040:	4a05      	ldr	r2, [pc, #20]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 8009042:	f023 0301 	bic.w	r3, r3, #1
 8009046:	6713      	str	r3, [r2, #112]	; 0x70
 8009048:	4b03      	ldr	r3, [pc, #12]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 800904a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800904c:	4a02      	ldr	r2, [pc, #8]	; (8009058 <HAL_RCC_OscConfig+0x4a4>)
 800904e:	f023 0304 	bic.w	r3, r3, #4
 8009052:	6713      	str	r3, [r2, #112]	; 0x70
 8009054:	e021      	b.n	800909a <HAL_RCC_OscConfig+0x4e6>
 8009056:	bf00      	nop
 8009058:	58024400 	.word	0x58024400
 800905c:	58024800 	.word	0x58024800
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	2b05      	cmp	r3, #5
 8009066:	d10c      	bne.n	8009082 <HAL_RCC_OscConfig+0x4ce>
 8009068:	4b83      	ldr	r3, [pc, #524]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 800906a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800906c:	4a82      	ldr	r2, [pc, #520]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 800906e:	f043 0304 	orr.w	r3, r3, #4
 8009072:	6713      	str	r3, [r2, #112]	; 0x70
 8009074:	4b80      	ldr	r3, [pc, #512]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 8009076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009078:	4a7f      	ldr	r2, [pc, #508]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 800907a:	f043 0301 	orr.w	r3, r3, #1
 800907e:	6713      	str	r3, [r2, #112]	; 0x70
 8009080:	e00b      	b.n	800909a <HAL_RCC_OscConfig+0x4e6>
 8009082:	4b7d      	ldr	r3, [pc, #500]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 8009084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009086:	4a7c      	ldr	r2, [pc, #496]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 8009088:	f023 0301 	bic.w	r3, r3, #1
 800908c:	6713      	str	r3, [r2, #112]	; 0x70
 800908e:	4b7a      	ldr	r3, [pc, #488]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 8009090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009092:	4a79      	ldr	r2, [pc, #484]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 8009094:	f023 0304 	bic.w	r3, r3, #4
 8009098:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d015      	beq.n	80090ce <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090a2:	f7fc f94b 	bl	800533c <HAL_GetTick>
 80090a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090a8:	e00a      	b.n	80090c0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090aa:	f7fc f947 	bl	800533c <HAL_GetTick>
 80090ae:	4602      	mov	r2, r0
 80090b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d901      	bls.n	80090c0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80090bc:	2303      	movs	r3, #3
 80090be:	e14b      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090c0:	4b6d      	ldr	r3, [pc, #436]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 80090c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d0ee      	beq.n	80090aa <HAL_RCC_OscConfig+0x4f6>
 80090cc:	e014      	b.n	80090f8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090ce:	f7fc f935 	bl	800533c <HAL_GetTick>
 80090d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80090d4:	e00a      	b.n	80090ec <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090d6:	f7fc f931 	bl	800533c <HAL_GetTick>
 80090da:	4602      	mov	r2, r0
 80090dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090de:	1ad3      	subs	r3, r2, r3
 80090e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d901      	bls.n	80090ec <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e135      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80090ec:	4b62      	ldr	r3, [pc, #392]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 80090ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f0:	f003 0302 	and.w	r3, r3, #2
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1ee      	bne.n	80090d6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 812a 	beq.w	8009356 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009102:	4b5d      	ldr	r3, [pc, #372]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800910a:	2b18      	cmp	r3, #24
 800910c:	f000 80ba 	beq.w	8009284 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009114:	2b02      	cmp	r3, #2
 8009116:	f040 8095 	bne.w	8009244 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800911a:	4b57      	ldr	r3, [pc, #348]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a56      	ldr	r2, [pc, #344]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 8009120:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009126:	f7fc f909 	bl	800533c <HAL_GetTick>
 800912a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800912c:	e008      	b.n	8009140 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800912e:	f7fc f905 	bl	800533c <HAL_GetTick>
 8009132:	4602      	mov	r2, r0
 8009134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	2b02      	cmp	r3, #2
 800913a:	d901      	bls.n	8009140 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	e10b      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009140:	4b4d      	ldr	r3, [pc, #308]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1f0      	bne.n	800912e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800914c:	4b4a      	ldr	r3, [pc, #296]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 800914e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009150:	4b4a      	ldr	r3, [pc, #296]	; (800927c <HAL_RCC_OscConfig+0x6c8>)
 8009152:	4013      	ands	r3, r2
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800915c:	0112      	lsls	r2, r2, #4
 800915e:	430a      	orrs	r2, r1
 8009160:	4945      	ldr	r1, [pc, #276]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 8009162:	4313      	orrs	r3, r2
 8009164:	628b      	str	r3, [r1, #40]	; 0x28
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916a:	3b01      	subs	r3, #1
 800916c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009174:	3b01      	subs	r3, #1
 8009176:	025b      	lsls	r3, r3, #9
 8009178:	b29b      	uxth	r3, r3
 800917a:	431a      	orrs	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009180:	3b01      	subs	r3, #1
 8009182:	041b      	lsls	r3, r3, #16
 8009184:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009188:	431a      	orrs	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800918e:	3b01      	subs	r3, #1
 8009190:	061b      	lsls	r3, r3, #24
 8009192:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009196:	4938      	ldr	r1, [pc, #224]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 8009198:	4313      	orrs	r3, r2
 800919a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800919c:	4b36      	ldr	r3, [pc, #216]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 800919e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a0:	4a35      	ldr	r2, [pc, #212]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 80091a2:	f023 0301 	bic.w	r3, r3, #1
 80091a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80091a8:	4b33      	ldr	r3, [pc, #204]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 80091aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091ac:	4b34      	ldr	r3, [pc, #208]	; (8009280 <HAL_RCC_OscConfig+0x6cc>)
 80091ae:	4013      	ands	r3, r2
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80091b4:	00d2      	lsls	r2, r2, #3
 80091b6:	4930      	ldr	r1, [pc, #192]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 80091b8:	4313      	orrs	r3, r2
 80091ba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80091bc:	4b2e      	ldr	r3, [pc, #184]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 80091be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c0:	f023 020c 	bic.w	r2, r3, #12
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c8:	492b      	ldr	r1, [pc, #172]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 80091ca:	4313      	orrs	r3, r2
 80091cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80091ce:	4b2a      	ldr	r3, [pc, #168]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 80091d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d2:	f023 0202 	bic.w	r2, r3, #2
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091da:	4927      	ldr	r1, [pc, #156]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 80091dc:	4313      	orrs	r3, r2
 80091de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80091e0:	4b25      	ldr	r3, [pc, #148]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 80091e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e4:	4a24      	ldr	r2, [pc, #144]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 80091e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091ec:	4b22      	ldr	r3, [pc, #136]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 80091ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f0:	4a21      	ldr	r2, [pc, #132]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 80091f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80091f8:	4b1f      	ldr	r3, [pc, #124]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	4a1e      	ldr	r2, [pc, #120]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 80091fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009202:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009204:	4b1c      	ldr	r3, [pc, #112]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 8009206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009208:	4a1b      	ldr	r2, [pc, #108]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 800920a:	f043 0301 	orr.w	r3, r3, #1
 800920e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009210:	4b19      	ldr	r3, [pc, #100]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a18      	ldr	r2, [pc, #96]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 8009216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800921a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800921c:	f7fc f88e 	bl	800533c <HAL_GetTick>
 8009220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009222:	e008      	b.n	8009236 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009224:	f7fc f88a 	bl	800533c <HAL_GetTick>
 8009228:	4602      	mov	r2, r0
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	2b02      	cmp	r3, #2
 8009230:	d901      	bls.n	8009236 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009232:	2303      	movs	r3, #3
 8009234:	e090      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009236:	4b10      	ldr	r3, [pc, #64]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0f0      	beq.n	8009224 <HAL_RCC_OscConfig+0x670>
 8009242:	e088      	b.n	8009356 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009244:	4b0c      	ldr	r3, [pc, #48]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a0b      	ldr	r2, [pc, #44]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 800924a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800924e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009250:	f7fc f874 	bl	800533c <HAL_GetTick>
 8009254:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009256:	e008      	b.n	800926a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009258:	f7fc f870 	bl	800533c <HAL_GetTick>
 800925c:	4602      	mov	r2, r0
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	2b02      	cmp	r3, #2
 8009264:	d901      	bls.n	800926a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009266:	2303      	movs	r3, #3
 8009268:	e076      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800926a:	4b03      	ldr	r3, [pc, #12]	; (8009278 <HAL_RCC_OscConfig+0x6c4>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1f0      	bne.n	8009258 <HAL_RCC_OscConfig+0x6a4>
 8009276:	e06e      	b.n	8009356 <HAL_RCC_OscConfig+0x7a2>
 8009278:	58024400 	.word	0x58024400
 800927c:	fffffc0c 	.word	0xfffffc0c
 8009280:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009284:	4b36      	ldr	r3, [pc, #216]	; (8009360 <HAL_RCC_OscConfig+0x7ac>)
 8009286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009288:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800928a:	4b35      	ldr	r3, [pc, #212]	; (8009360 <HAL_RCC_OscConfig+0x7ac>)
 800928c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009294:	2b01      	cmp	r3, #1
 8009296:	d031      	beq.n	80092fc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	f003 0203 	and.w	r2, r3, #3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d12a      	bne.n	80092fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	091b      	lsrs	r3, r3, #4
 80092aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d122      	bne.n	80092fc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d11a      	bne.n	80092fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	0a5b      	lsrs	r3, r3, #9
 80092ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d111      	bne.n	80092fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	0c1b      	lsrs	r3, r3, #16
 80092dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d108      	bne.n	80092fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	0e1b      	lsrs	r3, r3, #24
 80092ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d001      	beq.n	8009300 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e02b      	b.n	8009358 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009300:	4b17      	ldr	r3, [pc, #92]	; (8009360 <HAL_RCC_OscConfig+0x7ac>)
 8009302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009304:	08db      	lsrs	r3, r3, #3
 8009306:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800930a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009310:	693a      	ldr	r2, [r7, #16]
 8009312:	429a      	cmp	r2, r3
 8009314:	d01f      	beq.n	8009356 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009316:	4b12      	ldr	r3, [pc, #72]	; (8009360 <HAL_RCC_OscConfig+0x7ac>)
 8009318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931a:	4a11      	ldr	r2, [pc, #68]	; (8009360 <HAL_RCC_OscConfig+0x7ac>)
 800931c:	f023 0301 	bic.w	r3, r3, #1
 8009320:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009322:	f7fc f80b 	bl	800533c <HAL_GetTick>
 8009326:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009328:	bf00      	nop
 800932a:	f7fc f807 	bl	800533c <HAL_GetTick>
 800932e:	4602      	mov	r2, r0
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	4293      	cmp	r3, r2
 8009334:	d0f9      	beq.n	800932a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009336:	4b0a      	ldr	r3, [pc, #40]	; (8009360 <HAL_RCC_OscConfig+0x7ac>)
 8009338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800933a:	4b0a      	ldr	r3, [pc, #40]	; (8009364 <HAL_RCC_OscConfig+0x7b0>)
 800933c:	4013      	ands	r3, r2
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009342:	00d2      	lsls	r2, r2, #3
 8009344:	4906      	ldr	r1, [pc, #24]	; (8009360 <HAL_RCC_OscConfig+0x7ac>)
 8009346:	4313      	orrs	r3, r2
 8009348:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800934a:	4b05      	ldr	r3, [pc, #20]	; (8009360 <HAL_RCC_OscConfig+0x7ac>)
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	4a04      	ldr	r2, [pc, #16]	; (8009360 <HAL_RCC_OscConfig+0x7ac>)
 8009350:	f043 0301 	orr.w	r3, r3, #1
 8009354:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3730      	adds	r7, #48	; 0x30
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	58024400 	.word	0x58024400
 8009364:	ffff0007 	.word	0xffff0007

08009368 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d101      	bne.n	800937c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	e19c      	b.n	80096b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800937c:	4b8a      	ldr	r3, [pc, #552]	; (80095a8 <HAL_RCC_ClockConfig+0x240>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 030f 	and.w	r3, r3, #15
 8009384:	683a      	ldr	r2, [r7, #0]
 8009386:	429a      	cmp	r2, r3
 8009388:	d910      	bls.n	80093ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800938a:	4b87      	ldr	r3, [pc, #540]	; (80095a8 <HAL_RCC_ClockConfig+0x240>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f023 020f 	bic.w	r2, r3, #15
 8009392:	4985      	ldr	r1, [pc, #532]	; (80095a8 <HAL_RCC_ClockConfig+0x240>)
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	4313      	orrs	r3, r2
 8009398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800939a:	4b83      	ldr	r3, [pc, #524]	; (80095a8 <HAL_RCC_ClockConfig+0x240>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f003 030f 	and.w	r3, r3, #15
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d001      	beq.n	80093ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	e184      	b.n	80096b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 0304 	and.w	r3, r3, #4
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d010      	beq.n	80093da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	691a      	ldr	r2, [r3, #16]
 80093bc:	4b7b      	ldr	r3, [pc, #492]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d908      	bls.n	80093da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80093c8:	4b78      	ldr	r3, [pc, #480]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	4975      	ldr	r1, [pc, #468]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 80093d6:	4313      	orrs	r3, r2
 80093d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 0308 	and.w	r3, r3, #8
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d010      	beq.n	8009408 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	695a      	ldr	r2, [r3, #20]
 80093ea:	4b70      	ldr	r3, [pc, #448]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 80093ec:	69db      	ldr	r3, [r3, #28]
 80093ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d908      	bls.n	8009408 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80093f6:	4b6d      	ldr	r3, [pc, #436]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 80093f8:	69db      	ldr	r3, [r3, #28]
 80093fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	496a      	ldr	r1, [pc, #424]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 8009404:	4313      	orrs	r3, r2
 8009406:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0310 	and.w	r3, r3, #16
 8009410:	2b00      	cmp	r3, #0
 8009412:	d010      	beq.n	8009436 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	699a      	ldr	r2, [r3, #24]
 8009418:	4b64      	ldr	r3, [pc, #400]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 800941a:	69db      	ldr	r3, [r3, #28]
 800941c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009420:	429a      	cmp	r2, r3
 8009422:	d908      	bls.n	8009436 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009424:	4b61      	ldr	r3, [pc, #388]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 8009426:	69db      	ldr	r3, [r3, #28]
 8009428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	495e      	ldr	r1, [pc, #376]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 8009432:	4313      	orrs	r3, r2
 8009434:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 0320 	and.w	r3, r3, #32
 800943e:	2b00      	cmp	r3, #0
 8009440:	d010      	beq.n	8009464 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	69da      	ldr	r2, [r3, #28]
 8009446:	4b59      	ldr	r3, [pc, #356]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800944e:	429a      	cmp	r2, r3
 8009450:	d908      	bls.n	8009464 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009452:	4b56      	ldr	r3, [pc, #344]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	69db      	ldr	r3, [r3, #28]
 800945e:	4953      	ldr	r1, [pc, #332]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 8009460:	4313      	orrs	r3, r2
 8009462:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0302 	and.w	r3, r3, #2
 800946c:	2b00      	cmp	r3, #0
 800946e:	d010      	beq.n	8009492 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	68da      	ldr	r2, [r3, #12]
 8009474:	4b4d      	ldr	r3, [pc, #308]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	f003 030f 	and.w	r3, r3, #15
 800947c:	429a      	cmp	r2, r3
 800947e:	d908      	bls.n	8009492 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009480:	4b4a      	ldr	r3, [pc, #296]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	f023 020f 	bic.w	r2, r3, #15
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	4947      	ldr	r1, [pc, #284]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 800948e:	4313      	orrs	r3, r2
 8009490:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 0301 	and.w	r3, r3, #1
 800949a:	2b00      	cmp	r3, #0
 800949c:	d055      	beq.n	800954a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800949e:	4b43      	ldr	r3, [pc, #268]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	4940      	ldr	r1, [pc, #256]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 80094ac:	4313      	orrs	r3, r2
 80094ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d107      	bne.n	80094c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094b8:	4b3c      	ldr	r3, [pc, #240]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d121      	bne.n	8009508 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e0f6      	b.n	80096b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	2b03      	cmp	r3, #3
 80094ce:	d107      	bne.n	80094e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80094d0:	4b36      	ldr	r3, [pc, #216]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d115      	bne.n	8009508 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e0ea      	b.n	80096b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d107      	bne.n	80094f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80094e8:	4b30      	ldr	r3, [pc, #192]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d109      	bne.n	8009508 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	e0de      	b.n	80096b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094f8:	4b2c      	ldr	r3, [pc, #176]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 0304 	and.w	r3, r3, #4
 8009500:	2b00      	cmp	r3, #0
 8009502:	d101      	bne.n	8009508 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e0d6      	b.n	80096b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009508:	4b28      	ldr	r3, [pc, #160]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	f023 0207 	bic.w	r2, r3, #7
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	4925      	ldr	r1, [pc, #148]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 8009516:	4313      	orrs	r3, r2
 8009518:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800951a:	f7fb ff0f 	bl	800533c <HAL_GetTick>
 800951e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009520:	e00a      	b.n	8009538 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009522:	f7fb ff0b 	bl	800533c <HAL_GetTick>
 8009526:	4602      	mov	r2, r0
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009530:	4293      	cmp	r3, r2
 8009532:	d901      	bls.n	8009538 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009534:	2303      	movs	r3, #3
 8009536:	e0be      	b.n	80096b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009538:	4b1c      	ldr	r3, [pc, #112]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	00db      	lsls	r3, r3, #3
 8009546:	429a      	cmp	r2, r3
 8009548:	d1eb      	bne.n	8009522 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0302 	and.w	r3, r3, #2
 8009552:	2b00      	cmp	r3, #0
 8009554:	d010      	beq.n	8009578 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	68da      	ldr	r2, [r3, #12]
 800955a:	4b14      	ldr	r3, [pc, #80]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	f003 030f 	and.w	r3, r3, #15
 8009562:	429a      	cmp	r2, r3
 8009564:	d208      	bcs.n	8009578 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009566:	4b11      	ldr	r3, [pc, #68]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	f023 020f 	bic.w	r2, r3, #15
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	490e      	ldr	r1, [pc, #56]	; (80095ac <HAL_RCC_ClockConfig+0x244>)
 8009574:	4313      	orrs	r3, r2
 8009576:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009578:	4b0b      	ldr	r3, [pc, #44]	; (80095a8 <HAL_RCC_ClockConfig+0x240>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 030f 	and.w	r3, r3, #15
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	429a      	cmp	r2, r3
 8009584:	d214      	bcs.n	80095b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009586:	4b08      	ldr	r3, [pc, #32]	; (80095a8 <HAL_RCC_ClockConfig+0x240>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f023 020f 	bic.w	r2, r3, #15
 800958e:	4906      	ldr	r1, [pc, #24]	; (80095a8 <HAL_RCC_ClockConfig+0x240>)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	4313      	orrs	r3, r2
 8009594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009596:	4b04      	ldr	r3, [pc, #16]	; (80095a8 <HAL_RCC_ClockConfig+0x240>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 030f 	and.w	r3, r3, #15
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d005      	beq.n	80095b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e086      	b.n	80096b6 <HAL_RCC_ClockConfig+0x34e>
 80095a8:	52002000 	.word	0x52002000
 80095ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 0304 	and.w	r3, r3, #4
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d010      	beq.n	80095de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	691a      	ldr	r2, [r3, #16]
 80095c0:	4b3f      	ldr	r3, [pc, #252]	; (80096c0 <HAL_RCC_ClockConfig+0x358>)
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d208      	bcs.n	80095de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80095cc:	4b3c      	ldr	r3, [pc, #240]	; (80096c0 <HAL_RCC_ClockConfig+0x358>)
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	4939      	ldr	r1, [pc, #228]	; (80096c0 <HAL_RCC_ClockConfig+0x358>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f003 0308 	and.w	r3, r3, #8
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d010      	beq.n	800960c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	695a      	ldr	r2, [r3, #20]
 80095ee:	4b34      	ldr	r3, [pc, #208]	; (80096c0 <HAL_RCC_ClockConfig+0x358>)
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d208      	bcs.n	800960c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80095fa:	4b31      	ldr	r3, [pc, #196]	; (80096c0 <HAL_RCC_ClockConfig+0x358>)
 80095fc:	69db      	ldr	r3, [r3, #28]
 80095fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	492e      	ldr	r1, [pc, #184]	; (80096c0 <HAL_RCC_ClockConfig+0x358>)
 8009608:	4313      	orrs	r3, r2
 800960a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 0310 	and.w	r3, r3, #16
 8009614:	2b00      	cmp	r3, #0
 8009616:	d010      	beq.n	800963a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	699a      	ldr	r2, [r3, #24]
 800961c:	4b28      	ldr	r3, [pc, #160]	; (80096c0 <HAL_RCC_ClockConfig+0x358>)
 800961e:	69db      	ldr	r3, [r3, #28]
 8009620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009624:	429a      	cmp	r2, r3
 8009626:	d208      	bcs.n	800963a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009628:	4b25      	ldr	r3, [pc, #148]	; (80096c0 <HAL_RCC_ClockConfig+0x358>)
 800962a:	69db      	ldr	r3, [r3, #28]
 800962c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	4922      	ldr	r1, [pc, #136]	; (80096c0 <HAL_RCC_ClockConfig+0x358>)
 8009636:	4313      	orrs	r3, r2
 8009638:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 0320 	and.w	r3, r3, #32
 8009642:	2b00      	cmp	r3, #0
 8009644:	d010      	beq.n	8009668 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	69da      	ldr	r2, [r3, #28]
 800964a:	4b1d      	ldr	r3, [pc, #116]	; (80096c0 <HAL_RCC_ClockConfig+0x358>)
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009652:	429a      	cmp	r2, r3
 8009654:	d208      	bcs.n	8009668 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009656:	4b1a      	ldr	r3, [pc, #104]	; (80096c0 <HAL_RCC_ClockConfig+0x358>)
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	69db      	ldr	r3, [r3, #28]
 8009662:	4917      	ldr	r1, [pc, #92]	; (80096c0 <HAL_RCC_ClockConfig+0x358>)
 8009664:	4313      	orrs	r3, r2
 8009666:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009668:	f000 f834 	bl	80096d4 <HAL_RCC_GetSysClockFreq>
 800966c:	4602      	mov	r2, r0
 800966e:	4b14      	ldr	r3, [pc, #80]	; (80096c0 <HAL_RCC_ClockConfig+0x358>)
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	0a1b      	lsrs	r3, r3, #8
 8009674:	f003 030f 	and.w	r3, r3, #15
 8009678:	4912      	ldr	r1, [pc, #72]	; (80096c4 <HAL_RCC_ClockConfig+0x35c>)
 800967a:	5ccb      	ldrb	r3, [r1, r3]
 800967c:	f003 031f 	and.w	r3, r3, #31
 8009680:	fa22 f303 	lsr.w	r3, r2, r3
 8009684:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009686:	4b0e      	ldr	r3, [pc, #56]	; (80096c0 <HAL_RCC_ClockConfig+0x358>)
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	f003 030f 	and.w	r3, r3, #15
 800968e:	4a0d      	ldr	r2, [pc, #52]	; (80096c4 <HAL_RCC_ClockConfig+0x35c>)
 8009690:	5cd3      	ldrb	r3, [r2, r3]
 8009692:	f003 031f 	and.w	r3, r3, #31
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	fa22 f303 	lsr.w	r3, r2, r3
 800969c:	4a0a      	ldr	r2, [pc, #40]	; (80096c8 <HAL_RCC_ClockConfig+0x360>)
 800969e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80096a0:	4a0a      	ldr	r2, [pc, #40]	; (80096cc <HAL_RCC_ClockConfig+0x364>)
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80096a6:	4b0a      	ldr	r3, [pc, #40]	; (80096d0 <HAL_RCC_ClockConfig+0x368>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fb fdfc 	bl	80052a8 <HAL_InitTick>
 80096b0:	4603      	mov	r3, r0
 80096b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	58024400 	.word	0x58024400
 80096c4:	0800f830 	.word	0x0800f830
 80096c8:	24000004 	.word	0x24000004
 80096cc:	24000000 	.word	0x24000000
 80096d0:	24000008 	.word	0x24000008

080096d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b089      	sub	sp, #36	; 0x24
 80096d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80096da:	4bb3      	ldr	r3, [pc, #716]	; (80099a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096e2:	2b18      	cmp	r3, #24
 80096e4:	f200 8155 	bhi.w	8009992 <HAL_RCC_GetSysClockFreq+0x2be>
 80096e8:	a201      	add	r2, pc, #4	; (adr r2, 80096f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80096ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ee:	bf00      	nop
 80096f0:	08009755 	.word	0x08009755
 80096f4:	08009993 	.word	0x08009993
 80096f8:	08009993 	.word	0x08009993
 80096fc:	08009993 	.word	0x08009993
 8009700:	08009993 	.word	0x08009993
 8009704:	08009993 	.word	0x08009993
 8009708:	08009993 	.word	0x08009993
 800970c:	08009993 	.word	0x08009993
 8009710:	0800977b 	.word	0x0800977b
 8009714:	08009993 	.word	0x08009993
 8009718:	08009993 	.word	0x08009993
 800971c:	08009993 	.word	0x08009993
 8009720:	08009993 	.word	0x08009993
 8009724:	08009993 	.word	0x08009993
 8009728:	08009993 	.word	0x08009993
 800972c:	08009993 	.word	0x08009993
 8009730:	08009781 	.word	0x08009781
 8009734:	08009993 	.word	0x08009993
 8009738:	08009993 	.word	0x08009993
 800973c:	08009993 	.word	0x08009993
 8009740:	08009993 	.word	0x08009993
 8009744:	08009993 	.word	0x08009993
 8009748:	08009993 	.word	0x08009993
 800974c:	08009993 	.word	0x08009993
 8009750:	08009787 	.word	0x08009787
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009754:	4b94      	ldr	r3, [pc, #592]	; (80099a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 0320 	and.w	r3, r3, #32
 800975c:	2b00      	cmp	r3, #0
 800975e:	d009      	beq.n	8009774 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009760:	4b91      	ldr	r3, [pc, #580]	; (80099a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	08db      	lsrs	r3, r3, #3
 8009766:	f003 0303 	and.w	r3, r3, #3
 800976a:	4a90      	ldr	r2, [pc, #576]	; (80099ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800976c:	fa22 f303 	lsr.w	r3, r2, r3
 8009770:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009772:	e111      	b.n	8009998 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009774:	4b8d      	ldr	r3, [pc, #564]	; (80099ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009776:	61bb      	str	r3, [r7, #24]
      break;
 8009778:	e10e      	b.n	8009998 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800977a:	4b8d      	ldr	r3, [pc, #564]	; (80099b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800977c:	61bb      	str	r3, [r7, #24]
      break;
 800977e:	e10b      	b.n	8009998 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009780:	4b8c      	ldr	r3, [pc, #560]	; (80099b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009782:	61bb      	str	r3, [r7, #24]
      break;
 8009784:	e108      	b.n	8009998 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009786:	4b88      	ldr	r3, [pc, #544]	; (80099a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978a:	f003 0303 	and.w	r3, r3, #3
 800978e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009790:	4b85      	ldr	r3, [pc, #532]	; (80099a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009794:	091b      	lsrs	r3, r3, #4
 8009796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800979a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800979c:	4b82      	ldr	r3, [pc, #520]	; (80099a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800979e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a0:	f003 0301 	and.w	r3, r3, #1
 80097a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80097a6:	4b80      	ldr	r3, [pc, #512]	; (80099a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097aa:	08db      	lsrs	r3, r3, #3
 80097ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	fb02 f303 	mul.w	r3, r2, r3
 80097b6:	ee07 3a90 	vmov	s15, r3
 80097ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f000 80e1 	beq.w	800998c <HAL_RCC_GetSysClockFreq+0x2b8>
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	f000 8083 	beq.w	80098d8 <HAL_RCC_GetSysClockFreq+0x204>
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	f200 80a1 	bhi.w	800991c <HAL_RCC_GetSysClockFreq+0x248>
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d003      	beq.n	80097e8 <HAL_RCC_GetSysClockFreq+0x114>
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d056      	beq.n	8009894 <HAL_RCC_GetSysClockFreq+0x1c0>
 80097e6:	e099      	b.n	800991c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097e8:	4b6f      	ldr	r3, [pc, #444]	; (80099a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 0320 	and.w	r3, r3, #32
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d02d      	beq.n	8009850 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097f4:	4b6c      	ldr	r3, [pc, #432]	; (80099a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	08db      	lsrs	r3, r3, #3
 80097fa:	f003 0303 	and.w	r3, r3, #3
 80097fe:	4a6b      	ldr	r2, [pc, #428]	; (80099ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009800:	fa22 f303 	lsr.w	r3, r2, r3
 8009804:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	ee07 3a90 	vmov	s15, r3
 800980c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	ee07 3a90 	vmov	s15, r3
 8009816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800981a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800981e:	4b62      	ldr	r3, [pc, #392]	; (80099a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009826:	ee07 3a90 	vmov	s15, r3
 800982a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800982e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009832:	eddf 5a61 	vldr	s11, [pc, #388]	; 80099b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800983a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800983e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800984a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800984e:	e087      	b.n	8009960 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	ee07 3a90 	vmov	s15, r3
 8009856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800985a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80099bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800985e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009862:	4b51      	ldr	r3, [pc, #324]	; (80099a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986a:	ee07 3a90 	vmov	s15, r3
 800986e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009872:	ed97 6a02 	vldr	s12, [r7, #8]
 8009876:	eddf 5a50 	vldr	s11, [pc, #320]	; 80099b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800987a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800987e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800988a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800988e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009892:	e065      	b.n	8009960 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	ee07 3a90 	vmov	s15, r3
 800989a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800989e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80099c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80098a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098a6:	4b40      	ldr	r3, [pc, #256]	; (80099a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ae:	ee07 3a90 	vmov	s15, r3
 80098b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80098ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80099b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80098be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80098d6:	e043      	b.n	8009960 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	ee07 3a90 	vmov	s15, r3
 80098de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80099c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80098e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ea:	4b2f      	ldr	r3, [pc, #188]	; (80099a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f2:	ee07 3a90 	vmov	s15, r3
 80098f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80098fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80099b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800990a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800990e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009916:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800991a:	e021      	b.n	8009960 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	ee07 3a90 	vmov	s15, r3
 8009922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009926:	eddf 6a26 	vldr	s13, [pc, #152]	; 80099c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800992a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800992e:	4b1e      	ldr	r3, [pc, #120]	; (80099a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800993e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009942:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80099b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800994a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800994e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800995a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800995e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009960:	4b11      	ldr	r3, [pc, #68]	; (80099a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009964:	0a5b      	lsrs	r3, r3, #9
 8009966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800996a:	3301      	adds	r3, #1
 800996c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	ee07 3a90 	vmov	s15, r3
 8009974:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009978:	edd7 6a07 	vldr	s13, [r7, #28]
 800997c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009984:	ee17 3a90 	vmov	r3, s15
 8009988:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800998a:	e005      	b.n	8009998 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800998c:	2300      	movs	r3, #0
 800998e:	61bb      	str	r3, [r7, #24]
      break;
 8009990:	e002      	b.n	8009998 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009992:	4b07      	ldr	r3, [pc, #28]	; (80099b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009994:	61bb      	str	r3, [r7, #24]
      break;
 8009996:	bf00      	nop
  }

  return sysclockfreq;
 8009998:	69bb      	ldr	r3, [r7, #24]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3724      	adds	r7, #36	; 0x24
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	58024400 	.word	0x58024400
 80099ac:	03d09000 	.word	0x03d09000
 80099b0:	003d0900 	.word	0x003d0900
 80099b4:	007a1200 	.word	0x007a1200
 80099b8:	46000000 	.word	0x46000000
 80099bc:	4c742400 	.word	0x4c742400
 80099c0:	4a742400 	.word	0x4a742400
 80099c4:	4af42400 	.word	0x4af42400

080099c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80099ce:	f7ff fe81 	bl	80096d4 <HAL_RCC_GetSysClockFreq>
 80099d2:	4602      	mov	r2, r0
 80099d4:	4b10      	ldr	r3, [pc, #64]	; (8009a18 <HAL_RCC_GetHCLKFreq+0x50>)
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	0a1b      	lsrs	r3, r3, #8
 80099da:	f003 030f 	and.w	r3, r3, #15
 80099de:	490f      	ldr	r1, [pc, #60]	; (8009a1c <HAL_RCC_GetHCLKFreq+0x54>)
 80099e0:	5ccb      	ldrb	r3, [r1, r3]
 80099e2:	f003 031f 	and.w	r3, r3, #31
 80099e6:	fa22 f303 	lsr.w	r3, r2, r3
 80099ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80099ec:	4b0a      	ldr	r3, [pc, #40]	; (8009a18 <HAL_RCC_GetHCLKFreq+0x50>)
 80099ee:	699b      	ldr	r3, [r3, #24]
 80099f0:	f003 030f 	and.w	r3, r3, #15
 80099f4:	4a09      	ldr	r2, [pc, #36]	; (8009a1c <HAL_RCC_GetHCLKFreq+0x54>)
 80099f6:	5cd3      	ldrb	r3, [r2, r3]
 80099f8:	f003 031f 	and.w	r3, r3, #31
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009a02:	4a07      	ldr	r2, [pc, #28]	; (8009a20 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a06:	4a07      	ldr	r2, [pc, #28]	; (8009a24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009a0c:	4b04      	ldr	r3, [pc, #16]	; (8009a20 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	58024400 	.word	0x58024400
 8009a1c:	0800f830 	.word	0x0800f830
 8009a20:	24000004 	.word	0x24000004
 8009a24:	24000000 	.word	0x24000000

08009a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009a2c:	f7ff ffcc 	bl	80099c8 <HAL_RCC_GetHCLKFreq>
 8009a30:	4602      	mov	r2, r0
 8009a32:	4b06      	ldr	r3, [pc, #24]	; (8009a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a34:	69db      	ldr	r3, [r3, #28]
 8009a36:	091b      	lsrs	r3, r3, #4
 8009a38:	f003 0307 	and.w	r3, r3, #7
 8009a3c:	4904      	ldr	r1, [pc, #16]	; (8009a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a3e:	5ccb      	ldrb	r3, [r1, r3]
 8009a40:	f003 031f 	and.w	r3, r3, #31
 8009a44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	58024400 	.word	0x58024400
 8009a50:	0800f830 	.word	0x0800f830

08009a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009a58:	f7ff ffb6 	bl	80099c8 <HAL_RCC_GetHCLKFreq>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	4b06      	ldr	r3, [pc, #24]	; (8009a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a60:	69db      	ldr	r3, [r3, #28]
 8009a62:	0a1b      	lsrs	r3, r3, #8
 8009a64:	f003 0307 	and.w	r3, r3, #7
 8009a68:	4904      	ldr	r1, [pc, #16]	; (8009a7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a6a:	5ccb      	ldrb	r3, [r1, r3]
 8009a6c:	f003 031f 	and.w	r3, r3, #31
 8009a70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	58024400 	.word	0x58024400
 8009a7c:	0800f830 	.word	0x0800f830

08009a80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a84:	b0c6      	sub	sp, #280	; 0x118
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009a92:	2300      	movs	r3, #0
 8009a94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009aa4:	2500      	movs	r5, #0
 8009aa6:	ea54 0305 	orrs.w	r3, r4, r5
 8009aaa:	d049      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ab2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ab6:	d02f      	beq.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009ab8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009abc:	d828      	bhi.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009abe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ac2:	d01a      	beq.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009ac4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ac8:	d822      	bhi.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d003      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ad2:	d007      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009ad4:	e01c      	b.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ad6:	4bab      	ldr	r3, [pc, #684]	; (8009d84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ada:	4aaa      	ldr	r2, [pc, #680]	; (8009d84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009ae2:	e01a      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ae8:	3308      	adds	r3, #8
 8009aea:	2102      	movs	r1, #2
 8009aec:	4618      	mov	r0, r3
 8009aee:	f001 fc25 	bl	800b33c <RCCEx_PLL2_Config>
 8009af2:	4603      	mov	r3, r0
 8009af4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009af8:	e00f      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009afe:	3328      	adds	r3, #40	; 0x28
 8009b00:	2102      	movs	r1, #2
 8009b02:	4618      	mov	r0, r3
 8009b04:	f001 fccc 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009b0e:	e004      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009b16:	e000      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10a      	bne.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009b22:	4b98      	ldr	r3, [pc, #608]	; (8009d84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b26:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b30:	4a94      	ldr	r2, [pc, #592]	; (8009d84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b32:	430b      	orrs	r3, r1
 8009b34:	6513      	str	r3, [r2, #80]	; 0x50
 8009b36:	e003      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009b4c:	f04f 0900 	mov.w	r9, #0
 8009b50:	ea58 0309 	orrs.w	r3, r8, r9
 8009b54:	d047      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b5c:	2b04      	cmp	r3, #4
 8009b5e:	d82a      	bhi.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009b60:	a201      	add	r2, pc, #4	; (adr r2, 8009b68 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b66:	bf00      	nop
 8009b68:	08009b7d 	.word	0x08009b7d
 8009b6c:	08009b8b 	.word	0x08009b8b
 8009b70:	08009ba1 	.word	0x08009ba1
 8009b74:	08009bbf 	.word	0x08009bbf
 8009b78:	08009bbf 	.word	0x08009bbf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b7c:	4b81      	ldr	r3, [pc, #516]	; (8009d84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b80:	4a80      	ldr	r2, [pc, #512]	; (8009d84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b88:	e01a      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b8e:	3308      	adds	r3, #8
 8009b90:	2100      	movs	r1, #0
 8009b92:	4618      	mov	r0, r3
 8009b94:	f001 fbd2 	bl	800b33c <RCCEx_PLL2_Config>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b9e:	e00f      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ba4:	3328      	adds	r3, #40	; 0x28
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f001 fc79 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009bb4:	e004      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009bbc:	e000      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d10a      	bne.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009bc8:	4b6e      	ldr	r3, [pc, #440]	; (8009d84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bcc:	f023 0107 	bic.w	r1, r3, #7
 8009bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bd6:	4a6b      	ldr	r2, [pc, #428]	; (8009d84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009bd8:	430b      	orrs	r3, r1
 8009bda:	6513      	str	r3, [r2, #80]	; 0x50
 8009bdc:	e003      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bde:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009be2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8009bf2:	f04f 0b00 	mov.w	fp, #0
 8009bf6:	ea5a 030b 	orrs.w	r3, sl, fp
 8009bfa:	d05b      	beq.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009c04:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009c08:	d03b      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009c0a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009c0e:	d834      	bhi.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009c10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c14:	d037      	beq.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009c16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c1a:	d82e      	bhi.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009c1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c20:	d033      	beq.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009c22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c26:	d828      	bhi.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c2c:	d01a      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c32:	d822      	bhi.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d003      	beq.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009c38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c3c:	d007      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009c3e:	e01c      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c40:	4b50      	ldr	r3, [pc, #320]	; (8009d84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c44:	4a4f      	ldr	r2, [pc, #316]	; (8009d84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c4c:	e01e      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c52:	3308      	adds	r3, #8
 8009c54:	2100      	movs	r1, #0
 8009c56:	4618      	mov	r0, r3
 8009c58:	f001 fb70 	bl	800b33c <RCCEx_PLL2_Config>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009c62:	e013      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c68:	3328      	adds	r3, #40	; 0x28
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f001 fc17 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009c72:	4603      	mov	r3, r0
 8009c74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c78:	e008      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009c80:	e004      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009c82:	bf00      	nop
 8009c84:	e002      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009c86:	bf00      	nop
 8009c88:	e000      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10b      	bne.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009c94:	4b3b      	ldr	r3, [pc, #236]	; (8009d84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c98:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ca0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009ca4:	4a37      	ldr	r2, [pc, #220]	; (8009d84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ca6:	430b      	orrs	r3, r1
 8009ca8:	6593      	str	r3, [r2, #88]	; 0x58
 8009caa:	e003      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009cb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009cc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009cca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009cce:	460b      	mov	r3, r1
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	d05d      	beq.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cd8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009cdc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009ce0:	d03b      	beq.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009ce2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009ce6:	d834      	bhi.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009ce8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cec:	d037      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009cee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cf2:	d82e      	bhi.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009cf4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009cf8:	d033      	beq.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009cfa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009cfe:	d828      	bhi.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009d00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d04:	d01a      	beq.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009d06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d0a:	d822      	bhi.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d003      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d14:	d007      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009d16:	e01c      	b.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d18:	4b1a      	ldr	r3, [pc, #104]	; (8009d84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1c:	4a19      	ldr	r2, [pc, #100]	; (8009d84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d24:	e01e      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d2a:	3308      	adds	r3, #8
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f001 fb04 	bl	800b33c <RCCEx_PLL2_Config>
 8009d34:	4603      	mov	r3, r0
 8009d36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009d3a:	e013      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d40:	3328      	adds	r3, #40	; 0x28
 8009d42:	2100      	movs	r1, #0
 8009d44:	4618      	mov	r0, r3
 8009d46:	f001 fbab 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d50:	e008      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009d58:	e004      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009d5a:	bf00      	nop
 8009d5c:	e002      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009d5e:	bf00      	nop
 8009d60:	e000      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d10d      	bne.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009d6c:	4b05      	ldr	r3, [pc, #20]	; (8009d84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d70:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009d7c:	4a01      	ldr	r2, [pc, #4]	; (8009d84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d7e:	430b      	orrs	r3, r1
 8009d80:	6593      	str	r3, [r2, #88]	; 0x58
 8009d82:	e005      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009d84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d98:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009d9c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009da0:	2300      	movs	r3, #0
 8009da2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009da6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009daa:	460b      	mov	r3, r1
 8009dac:	4313      	orrs	r3, r2
 8009dae:	d03a      	beq.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009db6:	2b30      	cmp	r3, #48	; 0x30
 8009db8:	d01f      	beq.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009dba:	2b30      	cmp	r3, #48	; 0x30
 8009dbc:	d819      	bhi.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009dbe:	2b20      	cmp	r3, #32
 8009dc0:	d00c      	beq.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009dc2:	2b20      	cmp	r3, #32
 8009dc4:	d815      	bhi.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d019      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009dca:	2b10      	cmp	r3, #16
 8009dcc:	d111      	bne.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dce:	4baa      	ldr	r3, [pc, #680]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd2:	4aa9      	ldr	r2, [pc, #676]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009dda:	e011      	b.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009de0:	3308      	adds	r3, #8
 8009de2:	2102      	movs	r1, #2
 8009de4:	4618      	mov	r0, r3
 8009de6:	f001 faa9 	bl	800b33c <RCCEx_PLL2_Config>
 8009dea:	4603      	mov	r3, r0
 8009dec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009df0:	e006      	b.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009df8:	e002      	b.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009dfa:	bf00      	nop
 8009dfc:	e000      	b.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009dfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10a      	bne.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009e08:	4b9b      	ldr	r3, [pc, #620]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e0c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e16:	4a98      	ldr	r2, [pc, #608]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009e18:	430b      	orrs	r3, r1
 8009e1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e1c:	e003      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e22:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009e32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e36:	2300      	movs	r3, #0
 8009e38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009e3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009e40:	460b      	mov	r3, r1
 8009e42:	4313      	orrs	r3, r2
 8009e44:	d051      	beq.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e50:	d035      	beq.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009e52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e56:	d82e      	bhi.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009e58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e5c:	d031      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009e5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e62:	d828      	bhi.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e68:	d01a      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e6e:	d822      	bhi.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d003      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e78:	d007      	beq.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009e7a:	e01c      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e7c:	4b7e      	ldr	r3, [pc, #504]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e80:	4a7d      	ldr	r2, [pc, #500]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009e88:	e01c      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e8e:	3308      	adds	r3, #8
 8009e90:	2100      	movs	r1, #0
 8009e92:	4618      	mov	r0, r3
 8009e94:	f001 fa52 	bl	800b33c <RCCEx_PLL2_Config>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009e9e:	e011      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ea4:	3328      	adds	r3, #40	; 0x28
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f001 faf9 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009eb4:	e006      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009ebc:	e002      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009ebe:	bf00      	nop
 8009ec0:	e000      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ec4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10a      	bne.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009ecc:	4b6a      	ldr	r3, [pc, #424]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ed0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eda:	4a67      	ldr	r2, [pc, #412]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009edc:	430b      	orrs	r3, r1
 8009ede:	6513      	str	r3, [r2, #80]	; 0x50
 8009ee0:	e003      	b.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ee6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009ef6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009efa:	2300      	movs	r3, #0
 8009efc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f00:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009f04:	460b      	mov	r3, r1
 8009f06:	4313      	orrs	r3, r2
 8009f08:	d053      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f14:	d033      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009f16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f1a:	d82c      	bhi.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009f1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f20:	d02f      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009f22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f26:	d826      	bhi.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009f28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009f2c:	d02b      	beq.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009f2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009f32:	d820      	bhi.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009f34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f38:	d012      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009f3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f3e:	d81a      	bhi.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d022      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f48:	d115      	bne.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f4e:	3308      	adds	r3, #8
 8009f50:	2101      	movs	r1, #1
 8009f52:	4618      	mov	r0, r3
 8009f54:	f001 f9f2 	bl	800b33c <RCCEx_PLL2_Config>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009f5e:	e015      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f64:	3328      	adds	r3, #40	; 0x28
 8009f66:	2101      	movs	r1, #1
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f001 fa99 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009f74:	e00a      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009f7c:	e006      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009f7e:	bf00      	nop
 8009f80:	e004      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009f82:	bf00      	nop
 8009f84:	e002      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009f86:	bf00      	nop
 8009f88:	e000      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009f8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10a      	bne.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009f94:	4b38      	ldr	r3, [pc, #224]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f98:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fa2:	4a35      	ldr	r2, [pc, #212]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009fa4:	430b      	orrs	r3, r1
 8009fa6:	6513      	str	r3, [r2, #80]	; 0x50
 8009fa8:	e003      	b.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009faa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fba:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009fc8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009fcc:	460b      	mov	r3, r1
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	d058      	beq.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009fda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fde:	d033      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fe4:	d82c      	bhi.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fea:	d02f      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ff0:	d826      	bhi.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009ff2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ff6:	d02b      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009ff8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ffc:	d820      	bhi.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009ffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a002:	d012      	beq.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a008:	d81a      	bhi.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d022      	beq.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a00e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a012:	d115      	bne.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a018:	3308      	adds	r3, #8
 800a01a:	2101      	movs	r1, #1
 800a01c:	4618      	mov	r0, r3
 800a01e:	f001 f98d 	bl	800b33c <RCCEx_PLL2_Config>
 800a022:	4603      	mov	r3, r0
 800a024:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a028:	e015      	b.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a02a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a02e:	3328      	adds	r3, #40	; 0x28
 800a030:	2101      	movs	r1, #1
 800a032:	4618      	mov	r0, r3
 800a034:	f001 fa34 	bl	800b4a0 <RCCEx_PLL3_Config>
 800a038:	4603      	mov	r3, r0
 800a03a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a03e:	e00a      	b.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a046:	e006      	b.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a048:	bf00      	nop
 800a04a:	e004      	b.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a04c:	bf00      	nop
 800a04e:	e002      	b.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a050:	bf00      	nop
 800a052:	e000      	b.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a054:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a056:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10e      	bne.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a05e:	4b06      	ldr	r3, [pc, #24]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a062:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a06a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a06e:	4a02      	ldr	r2, [pc, #8]	; (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a070:	430b      	orrs	r3, r1
 800a072:	6593      	str	r3, [r2, #88]	; 0x58
 800a074:	e006      	b.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a076:	bf00      	nop
 800a078:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a07c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a080:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a090:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a094:	2300      	movs	r3, #0
 800a096:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a09a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	d037      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0ae:	d00e      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a0b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0b4:	d816      	bhi.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d018      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a0ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0be:	d111      	bne.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0c0:	4bc4      	ldr	r3, [pc, #784]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c4:	4ac3      	ldr	r2, [pc, #780]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a0c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a0cc:	e00f      	b.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0d2:	3308      	adds	r3, #8
 800a0d4:	2101      	movs	r1, #1
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f001 f930 	bl	800b33c <RCCEx_PLL2_Config>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a0e2:	e004      	b.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a0ea:	e000      	b.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a0ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10a      	bne.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a0f6:	4bb7      	ldr	r3, [pc, #732]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a0f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0fa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a0fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a104:	4ab3      	ldr	r2, [pc, #716]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a106:	430b      	orrs	r3, r1
 800a108:	6513      	str	r3, [r2, #80]	; 0x50
 800a10a:	e003      	b.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a10c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a110:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a120:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a124:	2300      	movs	r3, #0
 800a126:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a12a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a12e:	460b      	mov	r3, r1
 800a130:	4313      	orrs	r3, r2
 800a132:	d039      	beq.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	d81c      	bhi.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a13e:	a201      	add	r2, pc, #4	; (adr r2, 800a144 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a144:	0800a181 	.word	0x0800a181
 800a148:	0800a155 	.word	0x0800a155
 800a14c:	0800a163 	.word	0x0800a163
 800a150:	0800a181 	.word	0x0800a181
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a154:	4b9f      	ldr	r3, [pc, #636]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a158:	4a9e      	ldr	r2, [pc, #632]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a15a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a15e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a160:	e00f      	b.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a166:	3308      	adds	r3, #8
 800a168:	2102      	movs	r1, #2
 800a16a:	4618      	mov	r0, r3
 800a16c:	f001 f8e6 	bl	800b33c <RCCEx_PLL2_Config>
 800a170:	4603      	mov	r3, r0
 800a172:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a176:	e004      	b.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a17e:	e000      	b.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a180:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a182:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10a      	bne.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a18a:	4b92      	ldr	r3, [pc, #584]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a18c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a18e:	f023 0103 	bic.w	r1, r3, #3
 800a192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a198:	4a8e      	ldr	r2, [pc, #568]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a19a:	430b      	orrs	r3, r1
 800a19c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a19e:	e003      	b.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a1b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	f000 8099 	beq.w	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a1ca:	4b83      	ldr	r3, [pc, #524]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a82      	ldr	r2, [pc, #520]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a1d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a1d6:	f7fb f8b1 	bl	800533c <HAL_GetTick>
 800a1da:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1de:	e00b      	b.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1e0:	f7fb f8ac 	bl	800533c <HAL_GetTick>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	2b64      	cmp	r3, #100	; 0x64
 800a1ee:	d903      	bls.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a1f6:	e005      	b.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1f8:	4b77      	ldr	r3, [pc, #476]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a200:	2b00      	cmp	r3, #0
 800a202:	d0ed      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a204:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d173      	bne.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a20c:	4b71      	ldr	r3, [pc, #452]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a20e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a214:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a218:	4053      	eors	r3, r2
 800a21a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d015      	beq.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a222:	4b6c      	ldr	r3, [pc, #432]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a22a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a22e:	4b69      	ldr	r3, [pc, #420]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a232:	4a68      	ldr	r2, [pc, #416]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a238:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a23a:	4b66      	ldr	r3, [pc, #408]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a23c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a23e:	4a65      	ldr	r2, [pc, #404]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a244:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a246:	4a63      	ldr	r2, [pc, #396]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a24c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a24e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a252:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a25a:	d118      	bne.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a25c:	f7fb f86e 	bl	800533c <HAL_GetTick>
 800a260:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a264:	e00d      	b.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a266:	f7fb f869 	bl	800533c <HAL_GetTick>
 800a26a:	4602      	mov	r2, r0
 800a26c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a270:	1ad2      	subs	r2, r2, r3
 800a272:	f241 3388 	movw	r3, #5000	; 0x1388
 800a276:	429a      	cmp	r2, r3
 800a278:	d903      	bls.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a27a:	2303      	movs	r3, #3
 800a27c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800a280:	e005      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a282:	4b54      	ldr	r3, [pc, #336]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a286:	f003 0302 	and.w	r3, r3, #2
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d0eb      	beq.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a28e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a292:	2b00      	cmp	r3, #0
 800a294:	d129      	bne.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a29a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a29e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2a6:	d10e      	bne.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a2a8:	4b4a      	ldr	r3, [pc, #296]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a2b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a2b8:	091a      	lsrs	r2, r3, #4
 800a2ba:	4b48      	ldr	r3, [pc, #288]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a2bc:	4013      	ands	r3, r2
 800a2be:	4a45      	ldr	r2, [pc, #276]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2c0:	430b      	orrs	r3, r1
 800a2c2:	6113      	str	r3, [r2, #16]
 800a2c4:	e005      	b.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a2c6:	4b43      	ldr	r3, [pc, #268]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	4a42      	ldr	r2, [pc, #264]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a2d0:	6113      	str	r3, [r2, #16]
 800a2d2:	4b40      	ldr	r3, [pc, #256]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2d4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a2de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2e2:	4a3c      	ldr	r2, [pc, #240]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2e4:	430b      	orrs	r3, r1
 800a2e6:	6713      	str	r3, [r2, #112]	; 0x70
 800a2e8:	e008      	b.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a2ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800a2f2:	e003      	b.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a304:	f002 0301 	and.w	r3, r2, #1
 800a308:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a30c:	2300      	movs	r3, #0
 800a30e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a312:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a316:	460b      	mov	r3, r1
 800a318:	4313      	orrs	r3, r2
 800a31a:	f000 808f 	beq.w	800a43c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a324:	2b28      	cmp	r3, #40	; 0x28
 800a326:	d871      	bhi.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a328:	a201      	add	r2, pc, #4	; (adr r2, 800a330 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a32e:	bf00      	nop
 800a330:	0800a415 	.word	0x0800a415
 800a334:	0800a40d 	.word	0x0800a40d
 800a338:	0800a40d 	.word	0x0800a40d
 800a33c:	0800a40d 	.word	0x0800a40d
 800a340:	0800a40d 	.word	0x0800a40d
 800a344:	0800a40d 	.word	0x0800a40d
 800a348:	0800a40d 	.word	0x0800a40d
 800a34c:	0800a40d 	.word	0x0800a40d
 800a350:	0800a3e1 	.word	0x0800a3e1
 800a354:	0800a40d 	.word	0x0800a40d
 800a358:	0800a40d 	.word	0x0800a40d
 800a35c:	0800a40d 	.word	0x0800a40d
 800a360:	0800a40d 	.word	0x0800a40d
 800a364:	0800a40d 	.word	0x0800a40d
 800a368:	0800a40d 	.word	0x0800a40d
 800a36c:	0800a40d 	.word	0x0800a40d
 800a370:	0800a3f7 	.word	0x0800a3f7
 800a374:	0800a40d 	.word	0x0800a40d
 800a378:	0800a40d 	.word	0x0800a40d
 800a37c:	0800a40d 	.word	0x0800a40d
 800a380:	0800a40d 	.word	0x0800a40d
 800a384:	0800a40d 	.word	0x0800a40d
 800a388:	0800a40d 	.word	0x0800a40d
 800a38c:	0800a40d 	.word	0x0800a40d
 800a390:	0800a415 	.word	0x0800a415
 800a394:	0800a40d 	.word	0x0800a40d
 800a398:	0800a40d 	.word	0x0800a40d
 800a39c:	0800a40d 	.word	0x0800a40d
 800a3a0:	0800a40d 	.word	0x0800a40d
 800a3a4:	0800a40d 	.word	0x0800a40d
 800a3a8:	0800a40d 	.word	0x0800a40d
 800a3ac:	0800a40d 	.word	0x0800a40d
 800a3b0:	0800a415 	.word	0x0800a415
 800a3b4:	0800a40d 	.word	0x0800a40d
 800a3b8:	0800a40d 	.word	0x0800a40d
 800a3bc:	0800a40d 	.word	0x0800a40d
 800a3c0:	0800a40d 	.word	0x0800a40d
 800a3c4:	0800a40d 	.word	0x0800a40d
 800a3c8:	0800a40d 	.word	0x0800a40d
 800a3cc:	0800a40d 	.word	0x0800a40d
 800a3d0:	0800a415 	.word	0x0800a415
 800a3d4:	58024400 	.word	0x58024400
 800a3d8:	58024800 	.word	0x58024800
 800a3dc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3e4:	3308      	adds	r3, #8
 800a3e6:	2101      	movs	r1, #1
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f000 ffa7 	bl	800b33c <RCCEx_PLL2_Config>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a3f4:	e00f      	b.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3fa:	3328      	adds	r3, #40	; 0x28
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	4618      	mov	r0, r3
 800a400:	f001 f84e 	bl	800b4a0 <RCCEx_PLL3_Config>
 800a404:	4603      	mov	r3, r0
 800a406:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a40a:	e004      	b.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a412:	e000      	b.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a414:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a416:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10a      	bne.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a41e:	4bbf      	ldr	r3, [pc, #764]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a422:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a42a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a42c:	4abb      	ldr	r2, [pc, #748]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a42e:	430b      	orrs	r3, r1
 800a430:	6553      	str	r3, [r2, #84]	; 0x54
 800a432:	e003      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a434:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a438:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a444:	f002 0302 	and.w	r3, r2, #2
 800a448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a44c:	2300      	movs	r3, #0
 800a44e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a452:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a456:	460b      	mov	r3, r1
 800a458:	4313      	orrs	r3, r2
 800a45a:	d041      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a45c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a462:	2b05      	cmp	r3, #5
 800a464:	d824      	bhi.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a466:	a201      	add	r2, pc, #4	; (adr r2, 800a46c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46c:	0800a4b9 	.word	0x0800a4b9
 800a470:	0800a485 	.word	0x0800a485
 800a474:	0800a49b 	.word	0x0800a49b
 800a478:	0800a4b9 	.word	0x0800a4b9
 800a47c:	0800a4b9 	.word	0x0800a4b9
 800a480:	0800a4b9 	.word	0x0800a4b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a488:	3308      	adds	r3, #8
 800a48a:	2101      	movs	r1, #1
 800a48c:	4618      	mov	r0, r3
 800a48e:	f000 ff55 	bl	800b33c <RCCEx_PLL2_Config>
 800a492:	4603      	mov	r3, r0
 800a494:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a498:	e00f      	b.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a49e:	3328      	adds	r3, #40	; 0x28
 800a4a0:	2101      	movs	r1, #1
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f000 fffc 	bl	800b4a0 <RCCEx_PLL3_Config>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a4ae:	e004      	b.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a4b6:	e000      	b.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a4b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10a      	bne.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a4c2:	4b96      	ldr	r3, [pc, #600]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a4c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c6:	f023 0107 	bic.w	r1, r3, #7
 800a4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4d0:	4a92      	ldr	r2, [pc, #584]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a4d2:	430b      	orrs	r3, r1
 800a4d4:	6553      	str	r3, [r2, #84]	; 0x54
 800a4d6:	e003      	b.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a4e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e8:	f002 0304 	and.w	r3, r2, #4
 800a4ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a4f6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	d044      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a508:	2b05      	cmp	r3, #5
 800a50a:	d825      	bhi.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a50c:	a201      	add	r2, pc, #4	; (adr r2, 800a514 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a512:	bf00      	nop
 800a514:	0800a561 	.word	0x0800a561
 800a518:	0800a52d 	.word	0x0800a52d
 800a51c:	0800a543 	.word	0x0800a543
 800a520:	0800a561 	.word	0x0800a561
 800a524:	0800a561 	.word	0x0800a561
 800a528:	0800a561 	.word	0x0800a561
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a530:	3308      	adds	r3, #8
 800a532:	2101      	movs	r1, #1
 800a534:	4618      	mov	r0, r3
 800a536:	f000 ff01 	bl	800b33c <RCCEx_PLL2_Config>
 800a53a:	4603      	mov	r3, r0
 800a53c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a540:	e00f      	b.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a546:	3328      	adds	r3, #40	; 0x28
 800a548:	2101      	movs	r1, #1
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 ffa8 	bl	800b4a0 <RCCEx_PLL3_Config>
 800a550:	4603      	mov	r3, r0
 800a552:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a556:	e004      	b.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a55e:	e000      	b.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a560:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a562:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a566:	2b00      	cmp	r3, #0
 800a568:	d10b      	bne.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a56a:	4b6c      	ldr	r3, [pc, #432]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a56c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a56e:	f023 0107 	bic.w	r1, r3, #7
 800a572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a57a:	4a68      	ldr	r2, [pc, #416]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a57c:	430b      	orrs	r3, r1
 800a57e:	6593      	str	r3, [r2, #88]	; 0x58
 800a580:	e003      	b.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a582:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a586:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a592:	f002 0320 	and.w	r3, r2, #32
 800a596:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a59a:	2300      	movs	r3, #0
 800a59c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a5a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	d055      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5b6:	d033      	beq.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a5b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5bc:	d82c      	bhi.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a5be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5c2:	d02f      	beq.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a5c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5c8:	d826      	bhi.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a5ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a5ce:	d02b      	beq.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a5d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a5d4:	d820      	bhi.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a5d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5da:	d012      	beq.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a5dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5e0:	d81a      	bhi.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d022      	beq.n	800a62c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a5e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5ea:	d115      	bne.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5f0:	3308      	adds	r3, #8
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f000 fea1 	bl	800b33c <RCCEx_PLL2_Config>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a600:	e015      	b.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a606:	3328      	adds	r3, #40	; 0x28
 800a608:	2102      	movs	r1, #2
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 ff48 	bl	800b4a0 <RCCEx_PLL3_Config>
 800a610:	4603      	mov	r3, r0
 800a612:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a616:	e00a      	b.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a61e:	e006      	b.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a620:	bf00      	nop
 800a622:	e004      	b.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a624:	bf00      	nop
 800a626:	e002      	b.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a628:	bf00      	nop
 800a62a:	e000      	b.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a62c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a62e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a632:	2b00      	cmp	r3, #0
 800a634:	d10b      	bne.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a636:	4b39      	ldr	r3, [pc, #228]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a63a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a63e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a646:	4a35      	ldr	r2, [pc, #212]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a648:	430b      	orrs	r3, r1
 800a64a:	6553      	str	r3, [r2, #84]	; 0x54
 800a64c:	e003      	b.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a64e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a652:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a662:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a666:	2300      	movs	r3, #0
 800a668:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a66c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a670:	460b      	mov	r3, r1
 800a672:	4313      	orrs	r3, r2
 800a674:	d058      	beq.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a67a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a67e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a682:	d033      	beq.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a684:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a688:	d82c      	bhi.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a68a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a68e:	d02f      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a694:	d826      	bhi.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a696:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a69a:	d02b      	beq.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a69c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a6a0:	d820      	bhi.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a6a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6a6:	d012      	beq.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a6a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6ac:	d81a      	bhi.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d022      	beq.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a6b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6b6:	d115      	bne.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6bc:	3308      	adds	r3, #8
 800a6be:	2100      	movs	r1, #0
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f000 fe3b 	bl	800b33c <RCCEx_PLL2_Config>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a6cc:	e015      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6d2:	3328      	adds	r3, #40	; 0x28
 800a6d4:	2102      	movs	r1, #2
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f000 fee2 	bl	800b4a0 <RCCEx_PLL3_Config>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a6e2:	e00a      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a6ea:	e006      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a6ec:	bf00      	nop
 800a6ee:	e004      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a6f0:	bf00      	nop
 800a6f2:	e002      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a6f4:	bf00      	nop
 800a6f6:	e000      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a6f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10e      	bne.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a702:	4b06      	ldr	r3, [pc, #24]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a706:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a70e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a712:	4a02      	ldr	r2, [pc, #8]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a714:	430b      	orrs	r3, r1
 800a716:	6593      	str	r3, [r2, #88]	; 0x58
 800a718:	e006      	b.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a71a:	bf00      	nop
 800a71c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a720:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a724:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a730:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a734:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a738:	2300      	movs	r3, #0
 800a73a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a73e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a742:	460b      	mov	r3, r1
 800a744:	4313      	orrs	r3, r2
 800a746:	d055      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a74c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a750:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a754:	d033      	beq.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a756:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a75a:	d82c      	bhi.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a75c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a760:	d02f      	beq.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a766:	d826      	bhi.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a768:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a76c:	d02b      	beq.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a76e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a772:	d820      	bhi.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a778:	d012      	beq.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a77a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a77e:	d81a      	bhi.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a780:	2b00      	cmp	r3, #0
 800a782:	d022      	beq.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a788:	d115      	bne.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a78a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a78e:	3308      	adds	r3, #8
 800a790:	2100      	movs	r1, #0
 800a792:	4618      	mov	r0, r3
 800a794:	f000 fdd2 	bl	800b33c <RCCEx_PLL2_Config>
 800a798:	4603      	mov	r3, r0
 800a79a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a79e:	e015      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7a4:	3328      	adds	r3, #40	; 0x28
 800a7a6:	2102      	movs	r1, #2
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f000 fe79 	bl	800b4a0 <RCCEx_PLL3_Config>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a7b4:	e00a      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a7bc:	e006      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a7be:	bf00      	nop
 800a7c0:	e004      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a7c2:	bf00      	nop
 800a7c4:	e002      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a7c6:	bf00      	nop
 800a7c8:	e000      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a7ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d10b      	bne.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a7d4:	4ba0      	ldr	r3, [pc, #640]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a7d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7d8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a7e4:	4a9c      	ldr	r2, [pc, #624]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a7e6:	430b      	orrs	r3, r1
 800a7e8:	6593      	str	r3, [r2, #88]	; 0x58
 800a7ea:	e003      	b.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	f002 0308 	and.w	r3, r2, #8
 800a800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a804:	2300      	movs	r3, #0
 800a806:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a80a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a80e:	460b      	mov	r3, r1
 800a810:	4313      	orrs	r3, r2
 800a812:	d01e      	beq.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a81c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a820:	d10c      	bne.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a826:	3328      	adds	r3, #40	; 0x28
 800a828:	2102      	movs	r1, #2
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 fe38 	bl	800b4a0 <RCCEx_PLL3_Config>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d002      	beq.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a83c:	4b86      	ldr	r3, [pc, #536]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a83e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a840:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a84c:	4a82      	ldr	r2, [pc, #520]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a84e:	430b      	orrs	r3, r1
 800a850:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85a:	f002 0310 	and.w	r3, r2, #16
 800a85e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a862:	2300      	movs	r3, #0
 800a864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a868:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a86c:	460b      	mov	r3, r1
 800a86e:	4313      	orrs	r3, r2
 800a870:	d01e      	beq.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a87a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a87e:	d10c      	bne.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a884:	3328      	adds	r3, #40	; 0x28
 800a886:	2102      	movs	r1, #2
 800a888:	4618      	mov	r0, r3
 800a88a:	f000 fe09 	bl	800b4a0 <RCCEx_PLL3_Config>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d002      	beq.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a89a:	4b6f      	ldr	r3, [pc, #444]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a89c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a89e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a8a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8aa:	4a6b      	ldr	r2, [pc, #428]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a8ac:	430b      	orrs	r3, r1
 800a8ae:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a8bc:	67bb      	str	r3, [r7, #120]	; 0x78
 800a8be:	2300      	movs	r3, #0
 800a8c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a8c2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	d03e      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a8cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a8d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8d8:	d022      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a8da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8de:	d81b      	bhi.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d003      	beq.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a8e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8e8:	d00b      	beq.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a8ea:	e015      	b.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f0:	3308      	adds	r3, #8
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f000 fd21 	bl	800b33c <RCCEx_PLL2_Config>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a900:	e00f      	b.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a906:	3328      	adds	r3, #40	; 0x28
 800a908:	2102      	movs	r1, #2
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 fdc8 	bl	800b4a0 <RCCEx_PLL3_Config>
 800a910:	4603      	mov	r3, r0
 800a912:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a916:	e004      	b.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a91e:	e000      	b.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a920:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a922:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10b      	bne.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a92a:	4b4b      	ldr	r3, [pc, #300]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a92c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a92e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a936:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a93a:	4a47      	ldr	r2, [pc, #284]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a93c:	430b      	orrs	r3, r1
 800a93e:	6593      	str	r3, [r2, #88]	; 0x58
 800a940:	e003      	b.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a942:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a946:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a94a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a956:	673b      	str	r3, [r7, #112]	; 0x70
 800a958:	2300      	movs	r3, #0
 800a95a:	677b      	str	r3, [r7, #116]	; 0x74
 800a95c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a960:	460b      	mov	r3, r1
 800a962:	4313      	orrs	r3, r2
 800a964:	d03b      	beq.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a96a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a96e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a972:	d01f      	beq.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a974:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a978:	d818      	bhi.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a97a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a97e:	d003      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a984:	d007      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a986:	e011      	b.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a988:	4b33      	ldr	r3, [pc, #204]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98c:	4a32      	ldr	r2, [pc, #200]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a98e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a992:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a994:	e00f      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a99a:	3328      	adds	r3, #40	; 0x28
 800a99c:	2101      	movs	r1, #1
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 fd7e 	bl	800b4a0 <RCCEx_PLL3_Config>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a9aa:	e004      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a9b2:	e000      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a9b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d10b      	bne.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a9be:	4b26      	ldr	r3, [pc, #152]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9c2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a9c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9ce:	4a22      	ldr	r2, [pc, #136]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9d0:	430b      	orrs	r3, r1
 800a9d2:	6553      	str	r3, [r2, #84]	; 0x54
 800a9d4:	e003      	b.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a9de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a9ea:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a9f0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	d034      	beq.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a9fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d003      	beq.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800aa04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa08:	d007      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800aa0a:	e011      	b.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa0c:	4b12      	ldr	r3, [pc, #72]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa10:	4a11      	ldr	r2, [pc, #68]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800aa18:	e00e      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa1e:	3308      	adds	r3, #8
 800aa20:	2102      	movs	r1, #2
 800aa22:	4618      	mov	r0, r3
 800aa24:	f000 fc8a 	bl	800b33c <RCCEx_PLL2_Config>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800aa2e:	e003      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10d      	bne.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aa40:	4b05      	ldr	r3, [pc, #20]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aa48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa4e:	4a02      	ldr	r2, [pc, #8]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa50:	430b      	orrs	r3, r1
 800aa52:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa54:	e006      	b.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800aa56:	bf00      	nop
 800aa58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aa64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800aa70:	663b      	str	r3, [r7, #96]	; 0x60
 800aa72:	2300      	movs	r3, #0
 800aa74:	667b      	str	r3, [r7, #100]	; 0x64
 800aa76:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	d00c      	beq.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa84:	3328      	adds	r3, #40	; 0x28
 800aa86:	2102      	movs	r1, #2
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f000 fd09 	bl	800b4a0 <RCCEx_PLL3_Config>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d002      	beq.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aa9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800aaa6:	65bb      	str	r3, [r7, #88]	; 0x58
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aaac:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800aab0:	460b      	mov	r3, r1
 800aab2:	4313      	orrs	r3, r2
 800aab4:	d036      	beq.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800aab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aabc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aac0:	d018      	beq.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800aac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aac6:	d811      	bhi.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800aac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aacc:	d014      	beq.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800aace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aad2:	d80b      	bhi.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d011      	beq.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800aad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aadc:	d106      	bne.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aade:	4bb7      	ldr	r3, [pc, #732]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae2:	4ab6      	ldr	r2, [pc, #728]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aae8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800aaea:	e008      	b.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
 800aaee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aaf2:	e004      	b.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800aaf4:	bf00      	nop
 800aaf6:	e002      	b.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800aaf8:	bf00      	nop
 800aafa:	e000      	b.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800aafc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aafe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d10a      	bne.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ab06:	4bad      	ldr	r3, [pc, #692]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ab0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab14:	4aa9      	ldr	r2, [pc, #676]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab16:	430b      	orrs	r3, r1
 800ab18:	6553      	str	r3, [r2, #84]	; 0x54
 800ab1a:	e003      	b.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ab24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ab30:	653b      	str	r3, [r7, #80]	; 0x50
 800ab32:	2300      	movs	r3, #0
 800ab34:	657b      	str	r3, [r7, #84]	; 0x54
 800ab36:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	d009      	beq.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ab40:	4b9e      	ldr	r3, [pc, #632]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ab48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab4e:	4a9b      	ldr	r2, [pc, #620]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab50:	430b      	orrs	r3, r1
 800ab52:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ab54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ab60:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab62:	2300      	movs	r3, #0
 800ab64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab66:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	d009      	beq.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ab70:	4b92      	ldr	r3, [pc, #584]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab74:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ab78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab7e:	4a8f      	ldr	r2, [pc, #572]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab80:	430b      	orrs	r3, r1
 800ab82:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ab84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ab90:	643b      	str	r3, [r7, #64]	; 0x40
 800ab92:	2300      	movs	r3, #0
 800ab94:	647b      	str	r3, [r7, #68]	; 0x44
 800ab96:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	d00e      	beq.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aba0:	4b86      	ldr	r3, [pc, #536]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	4a85      	ldr	r2, [pc, #532]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aba6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800abaa:	6113      	str	r3, [r2, #16]
 800abac:	4b83      	ldr	r3, [pc, #524]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800abae:	6919      	ldr	r1, [r3, #16]
 800abb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800abb8:	4a80      	ldr	r2, [pc, #512]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800abba:	430b      	orrs	r3, r1
 800abbc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800abbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800abca:	63bb      	str	r3, [r7, #56]	; 0x38
 800abcc:	2300      	movs	r3, #0
 800abce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abd0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800abd4:	460b      	mov	r3, r1
 800abd6:	4313      	orrs	r3, r2
 800abd8:	d009      	beq.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800abda:	4b78      	ldr	r3, [pc, #480]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800abdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abde:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800abe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abe8:	4a74      	ldr	r2, [pc, #464]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800abea:	430b      	orrs	r3, r1
 800abec:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800abee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800abfa:	633b      	str	r3, [r7, #48]	; 0x30
 800abfc:	2300      	movs	r3, #0
 800abfe:	637b      	str	r3, [r7, #52]	; 0x34
 800ac00:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ac04:	460b      	mov	r3, r1
 800ac06:	4313      	orrs	r3, r2
 800ac08:	d00a      	beq.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ac0a:	4b6c      	ldr	r3, [pc, #432]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac0e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ac12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac1a:	4a68      	ldr	r2, [pc, #416]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac1c:	430b      	orrs	r3, r1
 800ac1e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ac20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac28:	2100      	movs	r1, #0
 800ac2a:	62b9      	str	r1, [r7, #40]	; 0x28
 800ac2c:	f003 0301 	and.w	r3, r3, #1
 800ac30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac32:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ac36:	460b      	mov	r3, r1
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	d011      	beq.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac40:	3308      	adds	r3, #8
 800ac42:	2100      	movs	r1, #0
 800ac44:	4618      	mov	r0, r3
 800ac46:	f000 fb79 	bl	800b33c <RCCEx_PLL2_Config>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ac50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d003      	beq.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ac60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac68:	2100      	movs	r1, #0
 800ac6a:	6239      	str	r1, [r7, #32]
 800ac6c:	f003 0302 	and.w	r3, r3, #2
 800ac70:	627b      	str	r3, [r7, #36]	; 0x24
 800ac72:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ac76:	460b      	mov	r3, r1
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	d011      	beq.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac80:	3308      	adds	r3, #8
 800ac82:	2101      	movs	r1, #1
 800ac84:	4618      	mov	r0, r3
 800ac86:	f000 fb59 	bl	800b33c <RCCEx_PLL2_Config>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ac90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d003      	beq.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca8:	2100      	movs	r1, #0
 800acaa:	61b9      	str	r1, [r7, #24]
 800acac:	f003 0304 	and.w	r3, r3, #4
 800acb0:	61fb      	str	r3, [r7, #28]
 800acb2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800acb6:	460b      	mov	r3, r1
 800acb8:	4313      	orrs	r3, r2
 800acba:	d011      	beq.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800acbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acc0:	3308      	adds	r3, #8
 800acc2:	2102      	movs	r1, #2
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 fb39 	bl	800b33c <RCCEx_PLL2_Config>
 800acca:	4603      	mov	r3, r0
 800accc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800acd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d003      	beq.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acdc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ace0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace8:	2100      	movs	r1, #0
 800acea:	6139      	str	r1, [r7, #16]
 800acec:	f003 0308 	and.w	r3, r3, #8
 800acf0:	617b      	str	r3, [r7, #20]
 800acf2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800acf6:	460b      	mov	r3, r1
 800acf8:	4313      	orrs	r3, r2
 800acfa:	d011      	beq.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800acfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad00:	3328      	adds	r3, #40	; 0x28
 800ad02:	2100      	movs	r1, #0
 800ad04:	4618      	mov	r0, r3
 800ad06:	f000 fbcb 	bl	800b4a0 <RCCEx_PLL3_Config>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800ad10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d003      	beq.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ad20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad28:	2100      	movs	r1, #0
 800ad2a:	60b9      	str	r1, [r7, #8]
 800ad2c:	f003 0310 	and.w	r3, r3, #16
 800ad30:	60fb      	str	r3, [r7, #12]
 800ad32:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ad36:	460b      	mov	r3, r1
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	d011      	beq.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad40:	3328      	adds	r3, #40	; 0x28
 800ad42:	2101      	movs	r1, #1
 800ad44:	4618      	mov	r0, r3
 800ad46:	f000 fbab 	bl	800b4a0 <RCCEx_PLL3_Config>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ad50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d003      	beq.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ad60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad68:	2100      	movs	r1, #0
 800ad6a:	6039      	str	r1, [r7, #0]
 800ad6c:	f003 0320 	and.w	r3, r3, #32
 800ad70:	607b      	str	r3, [r7, #4]
 800ad72:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ad76:	460b      	mov	r3, r1
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	d011      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad80:	3328      	adds	r3, #40	; 0x28
 800ad82:	2102      	movs	r1, #2
 800ad84:	4618      	mov	r0, r3
 800ad86:	f000 fb8b 	bl	800b4a0 <RCCEx_PLL3_Config>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ad90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d003      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800ada0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800ada8:	2300      	movs	r3, #0
 800adaa:	e000      	b.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800adac:	2301      	movs	r3, #1
}
 800adae:	4618      	mov	r0, r3
 800adb0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800adb4:	46bd      	mov	sp, r7
 800adb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800adba:	bf00      	nop
 800adbc:	58024400 	.word	0x58024400

0800adc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800adc4:	f7fe fe00 	bl	80099c8 <HAL_RCC_GetHCLKFreq>
 800adc8:	4602      	mov	r2, r0
 800adca:	4b06      	ldr	r3, [pc, #24]	; (800ade4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	091b      	lsrs	r3, r3, #4
 800add0:	f003 0307 	and.w	r3, r3, #7
 800add4:	4904      	ldr	r1, [pc, #16]	; (800ade8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800add6:	5ccb      	ldrb	r3, [r1, r3]
 800add8:	f003 031f 	and.w	r3, r3, #31
 800addc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	58024400 	.word	0x58024400
 800ade8:	0800f830 	.word	0x0800f830

0800adec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800adec:	b480      	push	{r7}
 800adee:	b089      	sub	sp, #36	; 0x24
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adf4:	4ba1      	ldr	r3, [pc, #644]	; (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf8:	f003 0303 	and.w	r3, r3, #3
 800adfc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800adfe:	4b9f      	ldr	r3, [pc, #636]	; (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae02:	0b1b      	lsrs	r3, r3, #12
 800ae04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ae0a:	4b9c      	ldr	r3, [pc, #624]	; (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0e:	091b      	lsrs	r3, r3, #4
 800ae10:	f003 0301 	and.w	r3, r3, #1
 800ae14:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ae16:	4b99      	ldr	r3, [pc, #612]	; (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae1a:	08db      	lsrs	r3, r3, #3
 800ae1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae20:	693a      	ldr	r2, [r7, #16]
 800ae22:	fb02 f303 	mul.w	r3, r2, r3
 800ae26:	ee07 3a90 	vmov	s15, r3
 800ae2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f000 8111 	beq.w	800b05c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	f000 8083 	beq.w	800af48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	f200 80a1 	bhi.w	800af8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d003      	beq.n	800ae58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d056      	beq.n	800af04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ae56:	e099      	b.n	800af8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae58:	4b88      	ldr	r3, [pc, #544]	; (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 0320 	and.w	r3, r3, #32
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d02d      	beq.n	800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae64:	4b85      	ldr	r3, [pc, #532]	; (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	08db      	lsrs	r3, r3, #3
 800ae6a:	f003 0303 	and.w	r3, r3, #3
 800ae6e:	4a84      	ldr	r2, [pc, #528]	; (800b080 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ae70:	fa22 f303 	lsr.w	r3, r2, r3
 800ae74:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	ee07 3a90 	vmov	s15, r3
 800ae7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	ee07 3a90 	vmov	s15, r3
 800ae86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae8e:	4b7b      	ldr	r3, [pc, #492]	; (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae96:	ee07 3a90 	vmov	s15, r3
 800ae9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aea2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aebe:	e087      	b.n	800afd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	ee07 3a90 	vmov	s15, r3
 800aec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b088 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aed2:	4b6a      	ldr	r3, [pc, #424]	; (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeda:	ee07 3a90 	vmov	s15, r3
 800aede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aee2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aee6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aeea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aefa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aefe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af02:	e065      	b.n	800afd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	ee07 3a90 	vmov	s15, r3
 800af0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b08c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af16:	4b59      	ldr	r3, [pc, #356]	; (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af1e:	ee07 3a90 	vmov	s15, r3
 800af22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af26:	ed97 6a03 	vldr	s12, [r7, #12]
 800af2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af46:	e043      	b.n	800afd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	ee07 3a90 	vmov	s15, r3
 800af4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b090 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800af56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af5a:	4b48      	ldr	r3, [pc, #288]	; (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af62:	ee07 3a90 	vmov	s15, r3
 800af66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af8a:	e021      	b.n	800afd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	ee07 3a90 	vmov	s15, r3
 800af92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b08c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af9e:	4b37      	ldr	r3, [pc, #220]	; (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afa6:	ee07 3a90 	vmov	s15, r3
 800afaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afae:	ed97 6a03 	vldr	s12, [r7, #12]
 800afb2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800afd0:	4b2a      	ldr	r3, [pc, #168]	; (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd4:	0a5b      	lsrs	r3, r3, #9
 800afd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afda:	ee07 3a90 	vmov	s15, r3
 800afde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afea:	edd7 6a07 	vldr	s13, [r7, #28]
 800afee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff6:	ee17 2a90 	vmov	r2, s15
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800affe:	4b1f      	ldr	r3, [pc, #124]	; (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b002:	0c1b      	lsrs	r3, r3, #16
 800b004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b008:	ee07 3a90 	vmov	s15, r3
 800b00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b014:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b018:	edd7 6a07 	vldr	s13, [r7, #28]
 800b01c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b024:	ee17 2a90 	vmov	r2, s15
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b02c:	4b13      	ldr	r3, [pc, #76]	; (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b030:	0e1b      	lsrs	r3, r3, #24
 800b032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b036:	ee07 3a90 	vmov	s15, r3
 800b03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b03e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b042:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b046:	edd7 6a07 	vldr	s13, [r7, #28]
 800b04a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b04e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b052:	ee17 2a90 	vmov	r2, s15
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b05a:	e008      	b.n	800b06e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	609a      	str	r2, [r3, #8]
}
 800b06e:	bf00      	nop
 800b070:	3724      	adds	r7, #36	; 0x24
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	58024400 	.word	0x58024400
 800b080:	03d09000 	.word	0x03d09000
 800b084:	46000000 	.word	0x46000000
 800b088:	4c742400 	.word	0x4c742400
 800b08c:	4a742400 	.word	0x4a742400
 800b090:	4af42400 	.word	0x4af42400

0800b094 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b094:	b480      	push	{r7}
 800b096:	b089      	sub	sp, #36	; 0x24
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b09c:	4ba1      	ldr	r3, [pc, #644]	; (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a0:	f003 0303 	and.w	r3, r3, #3
 800b0a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b0a6:	4b9f      	ldr	r3, [pc, #636]	; (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0aa:	0d1b      	lsrs	r3, r3, #20
 800b0ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b0b2:	4b9c      	ldr	r3, [pc, #624]	; (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b6:	0a1b      	lsrs	r3, r3, #8
 800b0b8:	f003 0301 	and.w	r3, r3, #1
 800b0bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b0be:	4b99      	ldr	r3, [pc, #612]	; (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0c2:	08db      	lsrs	r3, r3, #3
 800b0c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0c8:	693a      	ldr	r2, [r7, #16]
 800b0ca:	fb02 f303 	mul.w	r3, r2, r3
 800b0ce:	ee07 3a90 	vmov	s15, r3
 800b0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	f000 8111 	beq.w	800b304 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	f000 8083 	beq.w	800b1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	2b02      	cmp	r3, #2
 800b0ee:	f200 80a1 	bhi.w	800b234 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d003      	beq.n	800b100 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d056      	beq.n	800b1ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b0fe:	e099      	b.n	800b234 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b100:	4b88      	ldr	r3, [pc, #544]	; (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f003 0320 	and.w	r3, r3, #32
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d02d      	beq.n	800b168 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b10c:	4b85      	ldr	r3, [pc, #532]	; (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	08db      	lsrs	r3, r3, #3
 800b112:	f003 0303 	and.w	r3, r3, #3
 800b116:	4a84      	ldr	r2, [pc, #528]	; (800b328 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b118:	fa22 f303 	lsr.w	r3, r2, r3
 800b11c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	ee07 3a90 	vmov	s15, r3
 800b124:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	ee07 3a90 	vmov	s15, r3
 800b12e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b136:	4b7b      	ldr	r3, [pc, #492]	; (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b13e:	ee07 3a90 	vmov	s15, r3
 800b142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b146:	ed97 6a03 	vldr	s12, [r7, #12]
 800b14a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b14e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b15a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b15e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b162:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b166:	e087      	b.n	800b278 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	ee07 3a90 	vmov	s15, r3
 800b16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b172:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b330 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b17a:	4b6a      	ldr	r3, [pc, #424]	; (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b182:	ee07 3a90 	vmov	s15, r3
 800b186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b18a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b18e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b19a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b19e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1aa:	e065      	b.n	800b278 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	ee07 3a90 	vmov	s15, r3
 800b1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b334 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b1ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1be:	4b59      	ldr	r3, [pc, #356]	; (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1c6:	ee07 3a90 	vmov	s15, r3
 800b1ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1ee:	e043      	b.n	800b278 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	ee07 3a90 	vmov	s15, r3
 800b1f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b1fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b202:	4b48      	ldr	r3, [pc, #288]	; (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b20a:	ee07 3a90 	vmov	s15, r3
 800b20e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b212:	ed97 6a03 	vldr	s12, [r7, #12]
 800b216:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b21a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b21e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b22a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b22e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b232:	e021      	b.n	800b278 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	ee07 3a90 	vmov	s15, r3
 800b23a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b23e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b334 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b246:	4b37      	ldr	r3, [pc, #220]	; (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b24a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b24e:	ee07 3a90 	vmov	s15, r3
 800b252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b256:	ed97 6a03 	vldr	s12, [r7, #12]
 800b25a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b25e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b26a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b26e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b276:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b278:	4b2a      	ldr	r3, [pc, #168]	; (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27c:	0a5b      	lsrs	r3, r3, #9
 800b27e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b282:	ee07 3a90 	vmov	s15, r3
 800b286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b28a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b28e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b292:	edd7 6a07 	vldr	s13, [r7, #28]
 800b296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b29a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b29e:	ee17 2a90 	vmov	r2, s15
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b2a6:	4b1f      	ldr	r3, [pc, #124]	; (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2aa:	0c1b      	lsrs	r3, r3, #16
 800b2ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2b0:	ee07 3a90 	vmov	s15, r3
 800b2b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2cc:	ee17 2a90 	vmov	r2, s15
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b2d4:	4b13      	ldr	r3, [pc, #76]	; (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d8:	0e1b      	lsrs	r3, r3, #24
 800b2da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2de:	ee07 3a90 	vmov	s15, r3
 800b2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2fa:	ee17 2a90 	vmov	r2, s15
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b302:	e008      	b.n	800b316 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	609a      	str	r2, [r3, #8]
}
 800b316:	bf00      	nop
 800b318:	3724      	adds	r7, #36	; 0x24
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop
 800b324:	58024400 	.word	0x58024400
 800b328:	03d09000 	.word	0x03d09000
 800b32c:	46000000 	.word	0x46000000
 800b330:	4c742400 	.word	0x4c742400
 800b334:	4a742400 	.word	0x4a742400
 800b338:	4af42400 	.word	0x4af42400

0800b33c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b346:	2300      	movs	r3, #0
 800b348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b34a:	4b53      	ldr	r3, [pc, #332]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b34e:	f003 0303 	and.w	r3, r3, #3
 800b352:	2b03      	cmp	r3, #3
 800b354:	d101      	bne.n	800b35a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	e099      	b.n	800b48e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b35a:	4b4f      	ldr	r3, [pc, #316]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a4e      	ldr	r2, [pc, #312]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b360:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b366:	f7f9 ffe9 	bl	800533c <HAL_GetTick>
 800b36a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b36c:	e008      	b.n	800b380 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b36e:	f7f9 ffe5 	bl	800533c <HAL_GetTick>
 800b372:	4602      	mov	r2, r0
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	1ad3      	subs	r3, r2, r3
 800b378:	2b02      	cmp	r3, #2
 800b37a:	d901      	bls.n	800b380 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b37c:	2303      	movs	r3, #3
 800b37e:	e086      	b.n	800b48e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b380:	4b45      	ldr	r3, [pc, #276]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1f0      	bne.n	800b36e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b38c:	4b42      	ldr	r3, [pc, #264]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b390:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	031b      	lsls	r3, r3, #12
 800b39a:	493f      	ldr	r1, [pc, #252]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b39c:	4313      	orrs	r3, r2
 800b39e:	628b      	str	r3, [r1, #40]	; 0x28
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	025b      	lsls	r3, r3, #9
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	431a      	orrs	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	041b      	lsls	r3, r3, #16
 800b3be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b3c2:	431a      	orrs	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	691b      	ldr	r3, [r3, #16]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	061b      	lsls	r3, r3, #24
 800b3cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3d0:	4931      	ldr	r1, [pc, #196]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b3d6:	4b30      	ldr	r3, [pc, #192]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	492d      	ldr	r1, [pc, #180]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b3e8:	4b2b      	ldr	r3, [pc, #172]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ec:	f023 0220 	bic.w	r2, r3, #32
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	699b      	ldr	r3, [r3, #24]
 800b3f4:	4928      	ldr	r1, [pc, #160]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b3fa:	4b27      	ldr	r3, [pc, #156]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fe:	4a26      	ldr	r2, [pc, #152]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b400:	f023 0310 	bic.w	r3, r3, #16
 800b404:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b406:	4b24      	ldr	r3, [pc, #144]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b408:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b40a:	4b24      	ldr	r3, [pc, #144]	; (800b49c <RCCEx_PLL2_Config+0x160>)
 800b40c:	4013      	ands	r3, r2
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	69d2      	ldr	r2, [r2, #28]
 800b412:	00d2      	lsls	r2, r2, #3
 800b414:	4920      	ldr	r1, [pc, #128]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b416:	4313      	orrs	r3, r2
 800b418:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b41a:	4b1f      	ldr	r3, [pc, #124]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41e:	4a1e      	ldr	r2, [pc, #120]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b420:	f043 0310 	orr.w	r3, r3, #16
 800b424:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d106      	bne.n	800b43a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b42c:	4b1a      	ldr	r3, [pc, #104]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b430:	4a19      	ldr	r2, [pc, #100]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b432:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b436:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b438:	e00f      	b.n	800b45a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d106      	bne.n	800b44e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b440:	4b15      	ldr	r3, [pc, #84]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b444:	4a14      	ldr	r2, [pc, #80]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b44a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b44c:	e005      	b.n	800b45a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b44e:	4b12      	ldr	r3, [pc, #72]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b452:	4a11      	ldr	r2, [pc, #68]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b454:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b458:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b45a:	4b0f      	ldr	r3, [pc, #60]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a0e      	ldr	r2, [pc, #56]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b460:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b466:	f7f9 ff69 	bl	800533c <HAL_GetTick>
 800b46a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b46c:	e008      	b.n	800b480 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b46e:	f7f9 ff65 	bl	800533c <HAL_GetTick>
 800b472:	4602      	mov	r2, r0
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d901      	bls.n	800b480 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b47c:	2303      	movs	r3, #3
 800b47e:	e006      	b.n	800b48e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b480:	4b05      	ldr	r3, [pc, #20]	; (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d0f0      	beq.n	800b46e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	58024400 	.word	0x58024400
 800b49c:	ffff0007 	.word	0xffff0007

0800b4a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b4ae:	4b53      	ldr	r3, [pc, #332]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b2:	f003 0303 	and.w	r3, r3, #3
 800b4b6:	2b03      	cmp	r3, #3
 800b4b8:	d101      	bne.n	800b4be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e099      	b.n	800b5f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b4be:	4b4f      	ldr	r3, [pc, #316]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a4e      	ldr	r2, [pc, #312]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b4c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4ca:	f7f9 ff37 	bl	800533c <HAL_GetTick>
 800b4ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4d0:	e008      	b.n	800b4e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b4d2:	f7f9 ff33 	bl	800533c <HAL_GetTick>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	1ad3      	subs	r3, r2, r3
 800b4dc:	2b02      	cmp	r3, #2
 800b4de:	d901      	bls.n	800b4e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b4e0:	2303      	movs	r3, #3
 800b4e2:	e086      	b.n	800b5f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4e4:	4b45      	ldr	r3, [pc, #276]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d1f0      	bne.n	800b4d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b4f0:	4b42      	ldr	r3, [pc, #264]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4f4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	051b      	lsls	r3, r3, #20
 800b4fe:	493f      	ldr	r1, [pc, #252]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b500:	4313      	orrs	r3, r2
 800b502:	628b      	str	r3, [r1, #40]	; 0x28
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	3b01      	subs	r3, #1
 800b50a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	3b01      	subs	r3, #1
 800b514:	025b      	lsls	r3, r3, #9
 800b516:	b29b      	uxth	r3, r3
 800b518:	431a      	orrs	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	3b01      	subs	r3, #1
 800b520:	041b      	lsls	r3, r3, #16
 800b522:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b526:	431a      	orrs	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	3b01      	subs	r3, #1
 800b52e:	061b      	lsls	r3, r3, #24
 800b530:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b534:	4931      	ldr	r1, [pc, #196]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b536:	4313      	orrs	r3, r2
 800b538:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b53a:	4b30      	ldr	r3, [pc, #192]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	492d      	ldr	r1, [pc, #180]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b548:	4313      	orrs	r3, r2
 800b54a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b54c:	4b2b      	ldr	r3, [pc, #172]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b550:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	699b      	ldr	r3, [r3, #24]
 800b558:	4928      	ldr	r1, [pc, #160]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b55a:	4313      	orrs	r3, r2
 800b55c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b55e:	4b27      	ldr	r3, [pc, #156]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b562:	4a26      	ldr	r2, [pc, #152]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b568:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b56a:	4b24      	ldr	r3, [pc, #144]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b56c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b56e:	4b24      	ldr	r3, [pc, #144]	; (800b600 <RCCEx_PLL3_Config+0x160>)
 800b570:	4013      	ands	r3, r2
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	69d2      	ldr	r2, [r2, #28]
 800b576:	00d2      	lsls	r2, r2, #3
 800b578:	4920      	ldr	r1, [pc, #128]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b57a:	4313      	orrs	r3, r2
 800b57c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b57e:	4b1f      	ldr	r3, [pc, #124]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b582:	4a1e      	ldr	r2, [pc, #120]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b588:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d106      	bne.n	800b59e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b590:	4b1a      	ldr	r3, [pc, #104]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b594:	4a19      	ldr	r2, [pc, #100]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b596:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b59a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b59c:	e00f      	b.n	800b5be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d106      	bne.n	800b5b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b5a4:	4b15      	ldr	r3, [pc, #84]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a8:	4a14      	ldr	r2, [pc, #80]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b5ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b5b0:	e005      	b.n	800b5be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b5b2:	4b12      	ldr	r3, [pc, #72]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b6:	4a11      	ldr	r2, [pc, #68]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b5bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b5be:	4b0f      	ldr	r3, [pc, #60]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4a0e      	ldr	r2, [pc, #56]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5ca:	f7f9 feb7 	bl	800533c <HAL_GetTick>
 800b5ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5d0:	e008      	b.n	800b5e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b5d2:	f7f9 feb3 	bl	800533c <HAL_GetTick>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d901      	bls.n	800b5e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b5e0:	2303      	movs	r3, #3
 800b5e2:	e006      	b.n	800b5f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5e4:	4b05      	ldr	r3, [pc, #20]	; (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d0f0      	beq.n	800b5d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	58024400 	.word	0x58024400
 800b600:	ffff0007 	.word	0xffff0007

0800b604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d101      	bne.n	800b616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	e049      	b.n	800b6aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d106      	bne.n	800b630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7f9 fbf8 	bl	8004e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2202      	movs	r2, #2
 800b634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	3304      	adds	r3, #4
 800b640:	4619      	mov	r1, r3
 800b642:	4610      	mov	r0, r2
 800b644:	f000 feb8 	bl	800c3b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2201      	movs	r2, #1
 800b65c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2201      	movs	r2, #1
 800b664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2201      	movs	r2, #1
 800b674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2201      	movs	r2, #1
 800b67c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2201      	movs	r2, #1
 800b684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2201      	movs	r2, #1
 800b694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2201      	movs	r2, #1
 800b69c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
	...

0800b6b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d001      	beq.n	800b6cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	e05e      	b.n	800b78a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2202      	movs	r2, #2
 800b6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	68da      	ldr	r2, [r3, #12]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f042 0201 	orr.w	r2, r2, #1
 800b6e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a2b      	ldr	r2, [pc, #172]	; (800b798 <HAL_TIM_Base_Start_IT+0xe4>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d02c      	beq.n	800b748 <HAL_TIM_Base_Start_IT+0x94>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6f6:	d027      	beq.n	800b748 <HAL_TIM_Base_Start_IT+0x94>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a27      	ldr	r2, [pc, #156]	; (800b79c <HAL_TIM_Base_Start_IT+0xe8>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d022      	beq.n	800b748 <HAL_TIM_Base_Start_IT+0x94>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4a26      	ldr	r2, [pc, #152]	; (800b7a0 <HAL_TIM_Base_Start_IT+0xec>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d01d      	beq.n	800b748 <HAL_TIM_Base_Start_IT+0x94>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a24      	ldr	r2, [pc, #144]	; (800b7a4 <HAL_TIM_Base_Start_IT+0xf0>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d018      	beq.n	800b748 <HAL_TIM_Base_Start_IT+0x94>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4a23      	ldr	r2, [pc, #140]	; (800b7a8 <HAL_TIM_Base_Start_IT+0xf4>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d013      	beq.n	800b748 <HAL_TIM_Base_Start_IT+0x94>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4a21      	ldr	r2, [pc, #132]	; (800b7ac <HAL_TIM_Base_Start_IT+0xf8>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d00e      	beq.n	800b748 <HAL_TIM_Base_Start_IT+0x94>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a20      	ldr	r2, [pc, #128]	; (800b7b0 <HAL_TIM_Base_Start_IT+0xfc>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d009      	beq.n	800b748 <HAL_TIM_Base_Start_IT+0x94>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a1e      	ldr	r2, [pc, #120]	; (800b7b4 <HAL_TIM_Base_Start_IT+0x100>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d004      	beq.n	800b748 <HAL_TIM_Base_Start_IT+0x94>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a1d      	ldr	r2, [pc, #116]	; (800b7b8 <HAL_TIM_Base_Start_IT+0x104>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d115      	bne.n	800b774 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	689a      	ldr	r2, [r3, #8]
 800b74e:	4b1b      	ldr	r3, [pc, #108]	; (800b7bc <HAL_TIM_Base_Start_IT+0x108>)
 800b750:	4013      	ands	r3, r2
 800b752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2b06      	cmp	r3, #6
 800b758:	d015      	beq.n	800b786 <HAL_TIM_Base_Start_IT+0xd2>
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b760:	d011      	beq.n	800b786 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f042 0201 	orr.w	r2, r2, #1
 800b770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b772:	e008      	b.n	800b786 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f042 0201 	orr.w	r2, r2, #1
 800b782:	601a      	str	r2, [r3, #0]
 800b784:	e000      	b.n	800b788 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b786:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3714      	adds	r7, #20
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop
 800b798:	40010000 	.word	0x40010000
 800b79c:	40000400 	.word	0x40000400
 800b7a0:	40000800 	.word	0x40000800
 800b7a4:	40000c00 	.word	0x40000c00
 800b7a8:	40010400 	.word	0x40010400
 800b7ac:	40001800 	.word	0x40001800
 800b7b0:	40014000 	.word	0x40014000
 800b7b4:	4000e000 	.word	0x4000e000
 800b7b8:	4000e400 	.word	0x4000e400
 800b7bc:	00010007 	.word	0x00010007

0800b7c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d101      	bne.n	800b7d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e049      	b.n	800b866 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d106      	bne.n	800b7ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f7f9 fae0 	bl	8004dac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2202      	movs	r2, #2
 800b7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	3304      	adds	r3, #4
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	4610      	mov	r0, r2
 800b800:	f000 fdda 	bl	800c3b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2201      	movs	r2, #1
 800b810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2201      	movs	r2, #1
 800b820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2201      	movs	r2, #1
 800b838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2201      	movs	r2, #1
 800b840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2201      	movs	r2, #1
 800b860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b864:	2300      	movs	r3, #0
}
 800b866:	4618      	mov	r0, r3
 800b868:	3708      	adds	r7, #8
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
	...

0800b870 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d109      	bne.n	800b894 <HAL_TIM_PWM_Start+0x24>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b886:	b2db      	uxtb	r3, r3
 800b888:	2b01      	cmp	r3, #1
 800b88a:	bf14      	ite	ne
 800b88c:	2301      	movne	r3, #1
 800b88e:	2300      	moveq	r3, #0
 800b890:	b2db      	uxtb	r3, r3
 800b892:	e03c      	b.n	800b90e <HAL_TIM_PWM_Start+0x9e>
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	2b04      	cmp	r3, #4
 800b898:	d109      	bne.n	800b8ae <HAL_TIM_PWM_Start+0x3e>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	bf14      	ite	ne
 800b8a6:	2301      	movne	r3, #1
 800b8a8:	2300      	moveq	r3, #0
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	e02f      	b.n	800b90e <HAL_TIM_PWM_Start+0x9e>
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b08      	cmp	r3, #8
 800b8b2:	d109      	bne.n	800b8c8 <HAL_TIM_PWM_Start+0x58>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	bf14      	ite	ne
 800b8c0:	2301      	movne	r3, #1
 800b8c2:	2300      	moveq	r3, #0
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	e022      	b.n	800b90e <HAL_TIM_PWM_Start+0x9e>
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	2b0c      	cmp	r3, #12
 800b8cc:	d109      	bne.n	800b8e2 <HAL_TIM_PWM_Start+0x72>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	bf14      	ite	ne
 800b8da:	2301      	movne	r3, #1
 800b8dc:	2300      	moveq	r3, #0
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	e015      	b.n	800b90e <HAL_TIM_PWM_Start+0x9e>
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	2b10      	cmp	r3, #16
 800b8e6:	d109      	bne.n	800b8fc <HAL_TIM_PWM_Start+0x8c>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	bf14      	ite	ne
 800b8f4:	2301      	movne	r3, #1
 800b8f6:	2300      	moveq	r3, #0
 800b8f8:	b2db      	uxtb	r3, r3
 800b8fa:	e008      	b.n	800b90e <HAL_TIM_PWM_Start+0x9e>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b902:	b2db      	uxtb	r3, r3
 800b904:	2b01      	cmp	r3, #1
 800b906:	bf14      	ite	ne
 800b908:	2301      	movne	r3, #1
 800b90a:	2300      	moveq	r3, #0
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d001      	beq.n	800b916 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	e0ab      	b.n	800ba6e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d104      	bne.n	800b926 <HAL_TIM_PWM_Start+0xb6>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2202      	movs	r2, #2
 800b920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b924:	e023      	b.n	800b96e <HAL_TIM_PWM_Start+0xfe>
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	2b04      	cmp	r3, #4
 800b92a:	d104      	bne.n	800b936 <HAL_TIM_PWM_Start+0xc6>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2202      	movs	r2, #2
 800b930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b934:	e01b      	b.n	800b96e <HAL_TIM_PWM_Start+0xfe>
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	2b08      	cmp	r3, #8
 800b93a:	d104      	bne.n	800b946 <HAL_TIM_PWM_Start+0xd6>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2202      	movs	r2, #2
 800b940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b944:	e013      	b.n	800b96e <HAL_TIM_PWM_Start+0xfe>
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	2b0c      	cmp	r3, #12
 800b94a:	d104      	bne.n	800b956 <HAL_TIM_PWM_Start+0xe6>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2202      	movs	r2, #2
 800b950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b954:	e00b      	b.n	800b96e <HAL_TIM_PWM_Start+0xfe>
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	2b10      	cmp	r3, #16
 800b95a:	d104      	bne.n	800b966 <HAL_TIM_PWM_Start+0xf6>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2202      	movs	r2, #2
 800b960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b964:	e003      	b.n	800b96e <HAL_TIM_PWM_Start+0xfe>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2202      	movs	r2, #2
 800b96a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2201      	movs	r2, #1
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	4618      	mov	r0, r3
 800b978:	f001 f938 	bl	800cbec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a3d      	ldr	r2, [pc, #244]	; (800ba78 <HAL_TIM_PWM_Start+0x208>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d013      	beq.n	800b9ae <HAL_TIM_PWM_Start+0x13e>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a3c      	ldr	r2, [pc, #240]	; (800ba7c <HAL_TIM_PWM_Start+0x20c>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d00e      	beq.n	800b9ae <HAL_TIM_PWM_Start+0x13e>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a3a      	ldr	r2, [pc, #232]	; (800ba80 <HAL_TIM_PWM_Start+0x210>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d009      	beq.n	800b9ae <HAL_TIM_PWM_Start+0x13e>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a39      	ldr	r2, [pc, #228]	; (800ba84 <HAL_TIM_PWM_Start+0x214>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d004      	beq.n	800b9ae <HAL_TIM_PWM_Start+0x13e>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a37      	ldr	r2, [pc, #220]	; (800ba88 <HAL_TIM_PWM_Start+0x218>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d101      	bne.n	800b9b2 <HAL_TIM_PWM_Start+0x142>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e000      	b.n	800b9b4 <HAL_TIM_PWM_Start+0x144>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d007      	beq.n	800b9c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b9c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a2a      	ldr	r2, [pc, #168]	; (800ba78 <HAL_TIM_PWM_Start+0x208>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d02c      	beq.n	800ba2c <HAL_TIM_PWM_Start+0x1bc>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9da:	d027      	beq.n	800ba2c <HAL_TIM_PWM_Start+0x1bc>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a2a      	ldr	r2, [pc, #168]	; (800ba8c <HAL_TIM_PWM_Start+0x21c>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d022      	beq.n	800ba2c <HAL_TIM_PWM_Start+0x1bc>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a29      	ldr	r2, [pc, #164]	; (800ba90 <HAL_TIM_PWM_Start+0x220>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d01d      	beq.n	800ba2c <HAL_TIM_PWM_Start+0x1bc>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a27      	ldr	r2, [pc, #156]	; (800ba94 <HAL_TIM_PWM_Start+0x224>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d018      	beq.n	800ba2c <HAL_TIM_PWM_Start+0x1bc>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4a1f      	ldr	r2, [pc, #124]	; (800ba7c <HAL_TIM_PWM_Start+0x20c>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d013      	beq.n	800ba2c <HAL_TIM_PWM_Start+0x1bc>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a23      	ldr	r2, [pc, #140]	; (800ba98 <HAL_TIM_PWM_Start+0x228>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d00e      	beq.n	800ba2c <HAL_TIM_PWM_Start+0x1bc>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a1b      	ldr	r2, [pc, #108]	; (800ba80 <HAL_TIM_PWM_Start+0x210>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d009      	beq.n	800ba2c <HAL_TIM_PWM_Start+0x1bc>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a1f      	ldr	r2, [pc, #124]	; (800ba9c <HAL_TIM_PWM_Start+0x22c>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d004      	beq.n	800ba2c <HAL_TIM_PWM_Start+0x1bc>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a1e      	ldr	r2, [pc, #120]	; (800baa0 <HAL_TIM_PWM_Start+0x230>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d115      	bne.n	800ba58 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	689a      	ldr	r2, [r3, #8]
 800ba32:	4b1c      	ldr	r3, [pc, #112]	; (800baa4 <HAL_TIM_PWM_Start+0x234>)
 800ba34:	4013      	ands	r3, r2
 800ba36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2b06      	cmp	r3, #6
 800ba3c:	d015      	beq.n	800ba6a <HAL_TIM_PWM_Start+0x1fa>
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba44:	d011      	beq.n	800ba6a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f042 0201 	orr.w	r2, r2, #1
 800ba54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba56:	e008      	b.n	800ba6a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f042 0201 	orr.w	r2, r2, #1
 800ba66:	601a      	str	r2, [r3, #0]
 800ba68:	e000      	b.n	800ba6c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	40010000 	.word	0x40010000
 800ba7c:	40010400 	.word	0x40010400
 800ba80:	40014000 	.word	0x40014000
 800ba84:	40014400 	.word	0x40014400
 800ba88:	40014800 	.word	0x40014800
 800ba8c:	40000400 	.word	0x40000400
 800ba90:	40000800 	.word	0x40000800
 800ba94:	40000c00 	.word	0x40000c00
 800ba98:	40001800 	.word	0x40001800
 800ba9c:	4000e000 	.word	0x4000e000
 800baa0:	4000e400 	.word	0x4000e400
 800baa4:	00010007 	.word	0x00010007

0800baa8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b086      	sub	sp, #24
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d101      	bne.n	800babc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bab8:	2301      	movs	r3, #1
 800baba:	e08f      	b.n	800bbdc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d106      	bne.n	800bad6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f7f9 f83d 	bl	8004b50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2202      	movs	r2, #2
 800bada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	6899      	ldr	r1, [r3, #8]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	4b3e      	ldr	r3, [pc, #248]	; (800bbe4 <HAL_TIM_Encoder_Init+0x13c>)
 800baea:	400b      	ands	r3, r1
 800baec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	3304      	adds	r3, #4
 800baf6:	4619      	mov	r1, r3
 800baf8:	4610      	mov	r0, r2
 800bafa:	f000 fc5d 	bl	800c3b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	6a1b      	ldr	r3, [r3, #32]
 800bb14:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	697a      	ldr	r2, [r7, #20]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bb20:	693a      	ldr	r2, [r7, #16]
 800bb22:	4b31      	ldr	r3, [pc, #196]	; (800bbe8 <HAL_TIM_Encoder_Init+0x140>)
 800bb24:	4013      	ands	r3, r2
 800bb26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	689a      	ldr	r2, [r3, #8]
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	699b      	ldr	r3, [r3, #24]
 800bb30:	021b      	lsls	r3, r3, #8
 800bb32:	4313      	orrs	r3, r2
 800bb34:	693a      	ldr	r2, [r7, #16]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bb3a:	693a      	ldr	r2, [r7, #16]
 800bb3c:	4b2b      	ldr	r3, [pc, #172]	; (800bbec <HAL_TIM_Encoder_Init+0x144>)
 800bb3e:	4013      	ands	r3, r2
 800bb40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bb42:	693a      	ldr	r2, [r7, #16]
 800bb44:	4b2a      	ldr	r3, [pc, #168]	; (800bbf0 <HAL_TIM_Encoder_Init+0x148>)
 800bb46:	4013      	ands	r3, r2
 800bb48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	68da      	ldr	r2, [r3, #12]
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	021b      	lsls	r3, r3, #8
 800bb54:	4313      	orrs	r3, r2
 800bb56:	693a      	ldr	r2, [r7, #16]
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	011a      	lsls	r2, r3, #4
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	6a1b      	ldr	r3, [r3, #32]
 800bb66:	031b      	lsls	r3, r3, #12
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	693a      	ldr	r2, [r7, #16]
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bb76:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bb7e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	685a      	ldr	r2, [r3, #4]
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	695b      	ldr	r3, [r3, #20]
 800bb88:	011b      	lsls	r3, r3, #4
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	697a      	ldr	r2, [r7, #20]
 800bb98:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	693a      	ldr	r2, [r7, #16]
 800bba0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2201      	movs	r2, #1
 800bbae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2201      	movs	r2, #1
 800bbce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbda:	2300      	movs	r3, #0
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3718      	adds	r7, #24
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	fffebff8 	.word	0xfffebff8
 800bbe8:	fffffcfc 	.word	0xfffffcfc
 800bbec:	fffff3f3 	.word	0xfffff3f3
 800bbf0:	ffff0f0f 	.word	0xffff0f0f

0800bbf4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc04:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bc0c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc14:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc1c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d110      	bne.n	800bc46 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc24:	7bfb      	ldrb	r3, [r7, #15]
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d102      	bne.n	800bc30 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bc2a:	7b7b      	ldrb	r3, [r7, #13]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d001      	beq.n	800bc34 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	e069      	b.n	800bd08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2202      	movs	r2, #2
 800bc38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2202      	movs	r2, #2
 800bc40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc44:	e031      	b.n	800bcaa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	2b04      	cmp	r3, #4
 800bc4a:	d110      	bne.n	800bc6e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc4c:	7bbb      	ldrb	r3, [r7, #14]
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d102      	bne.n	800bc58 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bc52:	7b3b      	ldrb	r3, [r7, #12]
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d001      	beq.n	800bc5c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	e055      	b.n	800bd08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2202      	movs	r2, #2
 800bc60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2202      	movs	r2, #2
 800bc68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc6c:	e01d      	b.n	800bcaa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc6e:	7bfb      	ldrb	r3, [r7, #15]
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d108      	bne.n	800bc86 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc74:	7bbb      	ldrb	r3, [r7, #14]
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d105      	bne.n	800bc86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc7a:	7b7b      	ldrb	r3, [r7, #13]
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d102      	bne.n	800bc86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bc80:	7b3b      	ldrb	r3, [r7, #12]
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d001      	beq.n	800bc8a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800bc86:	2301      	movs	r3, #1
 800bc88:	e03e      	b.n	800bd08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2202      	movs	r2, #2
 800bc8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2202      	movs	r2, #2
 800bc96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2202      	movs	r2, #2
 800bc9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2202      	movs	r2, #2
 800bca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d003      	beq.n	800bcb8 <HAL_TIM_Encoder_Start+0xc4>
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	2b04      	cmp	r3, #4
 800bcb4:	d008      	beq.n	800bcc8 <HAL_TIM_Encoder_Start+0xd4>
 800bcb6:	e00f      	b.n	800bcd8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f000 ff93 	bl	800cbec <TIM_CCxChannelCmd>
      break;
 800bcc6:	e016      	b.n	800bcf6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2201      	movs	r2, #1
 800bcce:	2104      	movs	r1, #4
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f000 ff8b 	bl	800cbec <TIM_CCxChannelCmd>
      break;
 800bcd6:	e00e      	b.n	800bcf6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2201      	movs	r2, #1
 800bcde:	2100      	movs	r1, #0
 800bce0:	4618      	mov	r0, r3
 800bce2:	f000 ff83 	bl	800cbec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2201      	movs	r2, #1
 800bcec:	2104      	movs	r1, #4
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f000 ff7c 	bl	800cbec <TIM_CCxChannelCmd>
      break;
 800bcf4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f042 0201 	orr.w	r2, r2, #1
 800bd04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	f003 0302 	and.w	r3, r3, #2
 800bd22:	2b02      	cmp	r3, #2
 800bd24:	d122      	bne.n	800bd6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	f003 0302 	and.w	r3, r3, #2
 800bd30:	2b02      	cmp	r3, #2
 800bd32:	d11b      	bne.n	800bd6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f06f 0202 	mvn.w	r2, #2
 800bd3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2201      	movs	r2, #1
 800bd42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	699b      	ldr	r3, [r3, #24]
 800bd4a:	f003 0303 	and.w	r3, r3, #3
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d003      	beq.n	800bd5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 fb12 	bl	800c37c <HAL_TIM_IC_CaptureCallback>
 800bd58:	e005      	b.n	800bd66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 fb04 	bl	800c368 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 fb15 	bl	800c390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	691b      	ldr	r3, [r3, #16]
 800bd72:	f003 0304 	and.w	r3, r3, #4
 800bd76:	2b04      	cmp	r3, #4
 800bd78:	d122      	bne.n	800bdc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	f003 0304 	and.w	r3, r3, #4
 800bd84:	2b04      	cmp	r3, #4
 800bd86:	d11b      	bne.n	800bdc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f06f 0204 	mvn.w	r2, #4
 800bd90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2202      	movs	r2, #2
 800bd96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	699b      	ldr	r3, [r3, #24]
 800bd9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d003      	beq.n	800bdae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 fae8 	bl	800c37c <HAL_TIM_IC_CaptureCallback>
 800bdac:	e005      	b.n	800bdba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 fada 	bl	800c368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f000 faeb 	bl	800c390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	691b      	ldr	r3, [r3, #16]
 800bdc6:	f003 0308 	and.w	r3, r3, #8
 800bdca:	2b08      	cmp	r3, #8
 800bdcc:	d122      	bne.n	800be14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	68db      	ldr	r3, [r3, #12]
 800bdd4:	f003 0308 	and.w	r3, r3, #8
 800bdd8:	2b08      	cmp	r3, #8
 800bdda:	d11b      	bne.n	800be14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f06f 0208 	mvn.w	r2, #8
 800bde4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2204      	movs	r2, #4
 800bdea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	69db      	ldr	r3, [r3, #28]
 800bdf2:	f003 0303 	and.w	r3, r3, #3
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d003      	beq.n	800be02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 fabe 	bl	800c37c <HAL_TIM_IC_CaptureCallback>
 800be00:	e005      	b.n	800be0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 fab0 	bl	800c368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 fac1 	bl	800c390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2200      	movs	r2, #0
 800be12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	691b      	ldr	r3, [r3, #16]
 800be1a:	f003 0310 	and.w	r3, r3, #16
 800be1e:	2b10      	cmp	r3, #16
 800be20:	d122      	bne.n	800be68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	f003 0310 	and.w	r3, r3, #16
 800be2c:	2b10      	cmp	r3, #16
 800be2e:	d11b      	bne.n	800be68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f06f 0210 	mvn.w	r2, #16
 800be38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2208      	movs	r2, #8
 800be3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	69db      	ldr	r3, [r3, #28]
 800be46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d003      	beq.n	800be56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 fa94 	bl	800c37c <HAL_TIM_IC_CaptureCallback>
 800be54:	e005      	b.n	800be62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 fa86 	bl	800c368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 fa97 	bl	800c390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	691b      	ldr	r3, [r3, #16]
 800be6e:	f003 0301 	and.w	r3, r3, #1
 800be72:	2b01      	cmp	r3, #1
 800be74:	d10e      	bne.n	800be94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	f003 0301 	and.w	r3, r3, #1
 800be80:	2b01      	cmp	r3, #1
 800be82:	d107      	bne.n	800be94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f06f 0201 	mvn.w	r2, #1
 800be8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f7f5 fc60 	bl	8001754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be9e:	2b80      	cmp	r3, #128	; 0x80
 800bea0:	d10e      	bne.n	800bec0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beac:	2b80      	cmp	r3, #128	; 0x80
 800beae:	d107      	bne.n	800bec0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800beb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f001 f802 	bl	800cec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bece:	d10e      	bne.n	800beee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beda:	2b80      	cmp	r3, #128	; 0x80
 800bedc:	d107      	bne.n	800beee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 fff5 	bl	800ced8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	691b      	ldr	r3, [r3, #16]
 800bef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bef8:	2b40      	cmp	r3, #64	; 0x40
 800befa:	d10e      	bne.n	800bf1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf06:	2b40      	cmp	r3, #64	; 0x40
 800bf08:	d107      	bne.n	800bf1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bf12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 fa45 	bl	800c3a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	f003 0320 	and.w	r3, r3, #32
 800bf24:	2b20      	cmp	r3, #32
 800bf26:	d10e      	bne.n	800bf46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	f003 0320 	and.w	r3, r3, #32
 800bf32:	2b20      	cmp	r3, #32
 800bf34:	d107      	bne.n	800bf46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f06f 0220 	mvn.w	r2, #32
 800bf3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 ffb5 	bl	800ceb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf46:	bf00      	nop
 800bf48:	3708      	adds	r7, #8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
	...

0800bf50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b086      	sub	sp, #24
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d101      	bne.n	800bf6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bf6a:	2302      	movs	r3, #2
 800bf6c:	e0ff      	b.n	800c16e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2201      	movs	r2, #1
 800bf72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2b14      	cmp	r3, #20
 800bf7a:	f200 80f0 	bhi.w	800c15e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bf7e:	a201      	add	r2, pc, #4	; (adr r2, 800bf84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bf80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf84:	0800bfd9 	.word	0x0800bfd9
 800bf88:	0800c15f 	.word	0x0800c15f
 800bf8c:	0800c15f 	.word	0x0800c15f
 800bf90:	0800c15f 	.word	0x0800c15f
 800bf94:	0800c019 	.word	0x0800c019
 800bf98:	0800c15f 	.word	0x0800c15f
 800bf9c:	0800c15f 	.word	0x0800c15f
 800bfa0:	0800c15f 	.word	0x0800c15f
 800bfa4:	0800c05b 	.word	0x0800c05b
 800bfa8:	0800c15f 	.word	0x0800c15f
 800bfac:	0800c15f 	.word	0x0800c15f
 800bfb0:	0800c15f 	.word	0x0800c15f
 800bfb4:	0800c09b 	.word	0x0800c09b
 800bfb8:	0800c15f 	.word	0x0800c15f
 800bfbc:	0800c15f 	.word	0x0800c15f
 800bfc0:	0800c15f 	.word	0x0800c15f
 800bfc4:	0800c0dd 	.word	0x0800c0dd
 800bfc8:	0800c15f 	.word	0x0800c15f
 800bfcc:	0800c15f 	.word	0x0800c15f
 800bfd0:	0800c15f 	.word	0x0800c15f
 800bfd4:	0800c11d 	.word	0x0800c11d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	68b9      	ldr	r1, [r7, #8]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f000 fa90 	bl	800c504 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	699a      	ldr	r2, [r3, #24]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f042 0208 	orr.w	r2, r2, #8
 800bff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	699a      	ldr	r2, [r3, #24]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f022 0204 	bic.w	r2, r2, #4
 800c002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	6999      	ldr	r1, [r3, #24]
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	691a      	ldr	r2, [r3, #16]
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	430a      	orrs	r2, r1
 800c014:	619a      	str	r2, [r3, #24]
      break;
 800c016:	e0a5      	b.n	800c164 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	68b9      	ldr	r1, [r7, #8]
 800c01e:	4618      	mov	r0, r3
 800c020:	f000 fb00 	bl	800c624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	699a      	ldr	r2, [r3, #24]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	699a      	ldr	r2, [r3, #24]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	6999      	ldr	r1, [r3, #24]
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	021a      	lsls	r2, r3, #8
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	430a      	orrs	r2, r1
 800c056:	619a      	str	r2, [r3, #24]
      break;
 800c058:	e084      	b.n	800c164 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	68b9      	ldr	r1, [r7, #8]
 800c060:	4618      	mov	r0, r3
 800c062:	f000 fb69 	bl	800c738 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	69da      	ldr	r2, [r3, #28]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f042 0208 	orr.w	r2, r2, #8
 800c074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	69da      	ldr	r2, [r3, #28]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f022 0204 	bic.w	r2, r2, #4
 800c084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	69d9      	ldr	r1, [r3, #28]
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	691a      	ldr	r2, [r3, #16]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	430a      	orrs	r2, r1
 800c096:	61da      	str	r2, [r3, #28]
      break;
 800c098:	e064      	b.n	800c164 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	68b9      	ldr	r1, [r7, #8]
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f000 fbd1 	bl	800c848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	69da      	ldr	r2, [r3, #28]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	69da      	ldr	r2, [r3, #28]
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	69d9      	ldr	r1, [r3, #28]
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	691b      	ldr	r3, [r3, #16]
 800c0d0:	021a      	lsls	r2, r3, #8
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	430a      	orrs	r2, r1
 800c0d8:	61da      	str	r2, [r3, #28]
      break;
 800c0da:	e043      	b.n	800c164 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	68b9      	ldr	r1, [r7, #8]
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f000 fc1a 	bl	800c91c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f042 0208 	orr.w	r2, r2, #8
 800c0f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f022 0204 	bic.w	r2, r2, #4
 800c106:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	691a      	ldr	r2, [r3, #16]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	430a      	orrs	r2, r1
 800c118:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c11a:	e023      	b.n	800c164 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	68b9      	ldr	r1, [r7, #8]
 800c122:	4618      	mov	r0, r3
 800c124:	f000 fc5e 	bl	800c9e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c136:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c146:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	691b      	ldr	r3, [r3, #16]
 800c152:	021a      	lsls	r2, r3, #8
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	430a      	orrs	r2, r1
 800c15a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c15c:	e002      	b.n	800c164 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c15e:	2301      	movs	r3, #1
 800c160:	75fb      	strb	r3, [r7, #23]
      break;
 800c162:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2200      	movs	r2, #0
 800c168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c16c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3718      	adds	r7, #24
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop

0800c178 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c182:	2300      	movs	r3, #0
 800c184:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d101      	bne.n	800c194 <HAL_TIM_ConfigClockSource+0x1c>
 800c190:	2302      	movs	r3, #2
 800c192:	e0dc      	b.n	800c34e <HAL_TIM_ConfigClockSource+0x1d6>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2201      	movs	r2, #1
 800c198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2202      	movs	r2, #2
 800c1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c1ac:	68ba      	ldr	r2, [r7, #8]
 800c1ae:	4b6a      	ldr	r3, [pc, #424]	; (800c358 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c1b0:	4013      	ands	r3, r2
 800c1b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c1ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	68ba      	ldr	r2, [r7, #8]
 800c1c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a64      	ldr	r2, [pc, #400]	; (800c35c <HAL_TIM_ConfigClockSource+0x1e4>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	f000 80a9 	beq.w	800c322 <HAL_TIM_ConfigClockSource+0x1aa>
 800c1d0:	4a62      	ldr	r2, [pc, #392]	; (800c35c <HAL_TIM_ConfigClockSource+0x1e4>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	f200 80ae 	bhi.w	800c334 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1d8:	4a61      	ldr	r2, [pc, #388]	; (800c360 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	f000 80a1 	beq.w	800c322 <HAL_TIM_ConfigClockSource+0x1aa>
 800c1e0:	4a5f      	ldr	r2, [pc, #380]	; (800c360 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	f200 80a6 	bhi.w	800c334 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1e8:	4a5e      	ldr	r2, [pc, #376]	; (800c364 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	f000 8099 	beq.w	800c322 <HAL_TIM_ConfigClockSource+0x1aa>
 800c1f0:	4a5c      	ldr	r2, [pc, #368]	; (800c364 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	f200 809e 	bhi.w	800c334 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c1fc:	f000 8091 	beq.w	800c322 <HAL_TIM_ConfigClockSource+0x1aa>
 800c200:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c204:	f200 8096 	bhi.w	800c334 <HAL_TIM_ConfigClockSource+0x1bc>
 800c208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c20c:	f000 8089 	beq.w	800c322 <HAL_TIM_ConfigClockSource+0x1aa>
 800c210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c214:	f200 808e 	bhi.w	800c334 <HAL_TIM_ConfigClockSource+0x1bc>
 800c218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c21c:	d03e      	beq.n	800c29c <HAL_TIM_ConfigClockSource+0x124>
 800c21e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c222:	f200 8087 	bhi.w	800c334 <HAL_TIM_ConfigClockSource+0x1bc>
 800c226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c22a:	f000 8086 	beq.w	800c33a <HAL_TIM_ConfigClockSource+0x1c2>
 800c22e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c232:	d87f      	bhi.n	800c334 <HAL_TIM_ConfigClockSource+0x1bc>
 800c234:	2b70      	cmp	r3, #112	; 0x70
 800c236:	d01a      	beq.n	800c26e <HAL_TIM_ConfigClockSource+0xf6>
 800c238:	2b70      	cmp	r3, #112	; 0x70
 800c23a:	d87b      	bhi.n	800c334 <HAL_TIM_ConfigClockSource+0x1bc>
 800c23c:	2b60      	cmp	r3, #96	; 0x60
 800c23e:	d050      	beq.n	800c2e2 <HAL_TIM_ConfigClockSource+0x16a>
 800c240:	2b60      	cmp	r3, #96	; 0x60
 800c242:	d877      	bhi.n	800c334 <HAL_TIM_ConfigClockSource+0x1bc>
 800c244:	2b50      	cmp	r3, #80	; 0x50
 800c246:	d03c      	beq.n	800c2c2 <HAL_TIM_ConfigClockSource+0x14a>
 800c248:	2b50      	cmp	r3, #80	; 0x50
 800c24a:	d873      	bhi.n	800c334 <HAL_TIM_ConfigClockSource+0x1bc>
 800c24c:	2b40      	cmp	r3, #64	; 0x40
 800c24e:	d058      	beq.n	800c302 <HAL_TIM_ConfigClockSource+0x18a>
 800c250:	2b40      	cmp	r3, #64	; 0x40
 800c252:	d86f      	bhi.n	800c334 <HAL_TIM_ConfigClockSource+0x1bc>
 800c254:	2b30      	cmp	r3, #48	; 0x30
 800c256:	d064      	beq.n	800c322 <HAL_TIM_ConfigClockSource+0x1aa>
 800c258:	2b30      	cmp	r3, #48	; 0x30
 800c25a:	d86b      	bhi.n	800c334 <HAL_TIM_ConfigClockSource+0x1bc>
 800c25c:	2b20      	cmp	r3, #32
 800c25e:	d060      	beq.n	800c322 <HAL_TIM_ConfigClockSource+0x1aa>
 800c260:	2b20      	cmp	r3, #32
 800c262:	d867      	bhi.n	800c334 <HAL_TIM_ConfigClockSource+0x1bc>
 800c264:	2b00      	cmp	r3, #0
 800c266:	d05c      	beq.n	800c322 <HAL_TIM_ConfigClockSource+0x1aa>
 800c268:	2b10      	cmp	r3, #16
 800c26a:	d05a      	beq.n	800c322 <HAL_TIM_ConfigClockSource+0x1aa>
 800c26c:	e062      	b.n	800c334 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6818      	ldr	r0, [r3, #0]
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	6899      	ldr	r1, [r3, #8]
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	685a      	ldr	r2, [r3, #4]
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	f000 fc95 	bl	800cbac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c290:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	68ba      	ldr	r2, [r7, #8]
 800c298:	609a      	str	r2, [r3, #8]
      break;
 800c29a:	e04f      	b.n	800c33c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6818      	ldr	r0, [r3, #0]
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	6899      	ldr	r1, [r3, #8]
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	685a      	ldr	r2, [r3, #4]
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	f000 fc7e 	bl	800cbac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	689a      	ldr	r2, [r3, #8]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2be:	609a      	str	r2, [r3, #8]
      break;
 800c2c0:	e03c      	b.n	800c33c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6818      	ldr	r0, [r3, #0]
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	6859      	ldr	r1, [r3, #4]
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	f000 fbee 	bl	800cab0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	2150      	movs	r1, #80	; 0x50
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f000 fc48 	bl	800cb70 <TIM_ITRx_SetConfig>
      break;
 800c2e0:	e02c      	b.n	800c33c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6818      	ldr	r0, [r3, #0]
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	6859      	ldr	r1, [r3, #4]
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	f000 fc0d 	bl	800cb0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2160      	movs	r1, #96	; 0x60
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f000 fc38 	bl	800cb70 <TIM_ITRx_SetConfig>
      break;
 800c300:	e01c      	b.n	800c33c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6818      	ldr	r0, [r3, #0]
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	6859      	ldr	r1, [r3, #4]
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	68db      	ldr	r3, [r3, #12]
 800c30e:	461a      	mov	r2, r3
 800c310:	f000 fbce 	bl	800cab0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	2140      	movs	r1, #64	; 0x40
 800c31a:	4618      	mov	r0, r3
 800c31c:	f000 fc28 	bl	800cb70 <TIM_ITRx_SetConfig>
      break;
 800c320:	e00c      	b.n	800c33c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4619      	mov	r1, r3
 800c32c:	4610      	mov	r0, r2
 800c32e:	f000 fc1f 	bl	800cb70 <TIM_ITRx_SetConfig>
      break;
 800c332:	e003      	b.n	800c33c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c334:	2301      	movs	r3, #1
 800c336:	73fb      	strb	r3, [r7, #15]
      break;
 800c338:	e000      	b.n	800c33c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c33a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2201      	movs	r2, #1
 800c340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2200      	movs	r2, #0
 800c348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	ffceff88 	.word	0xffceff88
 800c35c:	00100040 	.word	0x00100040
 800c360:	00100030 	.word	0x00100030
 800c364:	00100020 	.word	0x00100020

0800c368 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c370:	bf00      	nop
 800c372:	370c      	adds	r7, #12
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c384:	bf00      	nop
 800c386:	370c      	adds	r7, #12
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c390:	b480      	push	{r7}
 800c392:	b083      	sub	sp, #12
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c398:	bf00      	nop
 800c39a:	370c      	adds	r7, #12
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c3ac:	bf00      	nop
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4a44      	ldr	r2, [pc, #272]	; (800c4dc <TIM_Base_SetConfig+0x124>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d013      	beq.n	800c3f8 <TIM_Base_SetConfig+0x40>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3d6:	d00f      	beq.n	800c3f8 <TIM_Base_SetConfig+0x40>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	4a41      	ldr	r2, [pc, #260]	; (800c4e0 <TIM_Base_SetConfig+0x128>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d00b      	beq.n	800c3f8 <TIM_Base_SetConfig+0x40>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	4a40      	ldr	r2, [pc, #256]	; (800c4e4 <TIM_Base_SetConfig+0x12c>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d007      	beq.n	800c3f8 <TIM_Base_SetConfig+0x40>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	4a3f      	ldr	r2, [pc, #252]	; (800c4e8 <TIM_Base_SetConfig+0x130>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d003      	beq.n	800c3f8 <TIM_Base_SetConfig+0x40>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	4a3e      	ldr	r2, [pc, #248]	; (800c4ec <TIM_Base_SetConfig+0x134>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d108      	bne.n	800c40a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	68fa      	ldr	r2, [r7, #12]
 800c406:	4313      	orrs	r3, r2
 800c408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	4a33      	ldr	r2, [pc, #204]	; (800c4dc <TIM_Base_SetConfig+0x124>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d027      	beq.n	800c462 <TIM_Base_SetConfig+0xaa>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c418:	d023      	beq.n	800c462 <TIM_Base_SetConfig+0xaa>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	4a30      	ldr	r2, [pc, #192]	; (800c4e0 <TIM_Base_SetConfig+0x128>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d01f      	beq.n	800c462 <TIM_Base_SetConfig+0xaa>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	4a2f      	ldr	r2, [pc, #188]	; (800c4e4 <TIM_Base_SetConfig+0x12c>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d01b      	beq.n	800c462 <TIM_Base_SetConfig+0xaa>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	4a2e      	ldr	r2, [pc, #184]	; (800c4e8 <TIM_Base_SetConfig+0x130>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d017      	beq.n	800c462 <TIM_Base_SetConfig+0xaa>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4a2d      	ldr	r2, [pc, #180]	; (800c4ec <TIM_Base_SetConfig+0x134>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d013      	beq.n	800c462 <TIM_Base_SetConfig+0xaa>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	4a2c      	ldr	r2, [pc, #176]	; (800c4f0 <TIM_Base_SetConfig+0x138>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d00f      	beq.n	800c462 <TIM_Base_SetConfig+0xaa>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4a2b      	ldr	r2, [pc, #172]	; (800c4f4 <TIM_Base_SetConfig+0x13c>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d00b      	beq.n	800c462 <TIM_Base_SetConfig+0xaa>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4a2a      	ldr	r2, [pc, #168]	; (800c4f8 <TIM_Base_SetConfig+0x140>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d007      	beq.n	800c462 <TIM_Base_SetConfig+0xaa>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	4a29      	ldr	r2, [pc, #164]	; (800c4fc <TIM_Base_SetConfig+0x144>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d003      	beq.n	800c462 <TIM_Base_SetConfig+0xaa>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4a28      	ldr	r2, [pc, #160]	; (800c500 <TIM_Base_SetConfig+0x148>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d108      	bne.n	800c474 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	68db      	ldr	r3, [r3, #12]
 800c46e:	68fa      	ldr	r2, [r7, #12]
 800c470:	4313      	orrs	r3, r2
 800c472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	695b      	ldr	r3, [r3, #20]
 800c47e:	4313      	orrs	r3, r2
 800c480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	68fa      	ldr	r2, [r7, #12]
 800c486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	689a      	ldr	r2, [r3, #8]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	4a10      	ldr	r2, [pc, #64]	; (800c4dc <TIM_Base_SetConfig+0x124>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d00f      	beq.n	800c4c0 <TIM_Base_SetConfig+0x108>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	4a12      	ldr	r2, [pc, #72]	; (800c4ec <TIM_Base_SetConfig+0x134>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d00b      	beq.n	800c4c0 <TIM_Base_SetConfig+0x108>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4a11      	ldr	r2, [pc, #68]	; (800c4f0 <TIM_Base_SetConfig+0x138>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d007      	beq.n	800c4c0 <TIM_Base_SetConfig+0x108>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	4a10      	ldr	r2, [pc, #64]	; (800c4f4 <TIM_Base_SetConfig+0x13c>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d003      	beq.n	800c4c0 <TIM_Base_SetConfig+0x108>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	4a0f      	ldr	r2, [pc, #60]	; (800c4f8 <TIM_Base_SetConfig+0x140>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d103      	bne.n	800c4c8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	691a      	ldr	r2, [r3, #16]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	615a      	str	r2, [r3, #20]
}
 800c4ce:	bf00      	nop
 800c4d0:	3714      	adds	r7, #20
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr
 800c4da:	bf00      	nop
 800c4dc:	40010000 	.word	0x40010000
 800c4e0:	40000400 	.word	0x40000400
 800c4e4:	40000800 	.word	0x40000800
 800c4e8:	40000c00 	.word	0x40000c00
 800c4ec:	40010400 	.word	0x40010400
 800c4f0:	40014000 	.word	0x40014000
 800c4f4:	40014400 	.word	0x40014400
 800c4f8:	40014800 	.word	0x40014800
 800c4fc:	4000e000 	.word	0x4000e000
 800c500:	4000e400 	.word	0x4000e400

0800c504 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c504:	b480      	push	{r7}
 800c506:	b087      	sub	sp, #28
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6a1b      	ldr	r3, [r3, #32]
 800c512:	f023 0201 	bic.w	r2, r3, #1
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a1b      	ldr	r3, [r3, #32]
 800c51e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	699b      	ldr	r3, [r3, #24]
 800c52a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c52c:	68fa      	ldr	r2, [r7, #12]
 800c52e:	4b37      	ldr	r3, [pc, #220]	; (800c60c <TIM_OC1_SetConfig+0x108>)
 800c530:	4013      	ands	r3, r2
 800c532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f023 0303 	bic.w	r3, r3, #3
 800c53a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	4313      	orrs	r3, r2
 800c544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	f023 0302 	bic.w	r3, r3, #2
 800c54c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	697a      	ldr	r2, [r7, #20]
 800c554:	4313      	orrs	r3, r2
 800c556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	4a2d      	ldr	r2, [pc, #180]	; (800c610 <TIM_OC1_SetConfig+0x10c>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d00f      	beq.n	800c580 <TIM_OC1_SetConfig+0x7c>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	4a2c      	ldr	r2, [pc, #176]	; (800c614 <TIM_OC1_SetConfig+0x110>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d00b      	beq.n	800c580 <TIM_OC1_SetConfig+0x7c>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	4a2b      	ldr	r2, [pc, #172]	; (800c618 <TIM_OC1_SetConfig+0x114>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d007      	beq.n	800c580 <TIM_OC1_SetConfig+0x7c>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	4a2a      	ldr	r2, [pc, #168]	; (800c61c <TIM_OC1_SetConfig+0x118>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d003      	beq.n	800c580 <TIM_OC1_SetConfig+0x7c>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4a29      	ldr	r2, [pc, #164]	; (800c620 <TIM_OC1_SetConfig+0x11c>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d10c      	bne.n	800c59a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	f023 0308 	bic.w	r3, r3, #8
 800c586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	697a      	ldr	r2, [r7, #20]
 800c58e:	4313      	orrs	r3, r2
 800c590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	f023 0304 	bic.w	r3, r3, #4
 800c598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4a1c      	ldr	r2, [pc, #112]	; (800c610 <TIM_OC1_SetConfig+0x10c>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d00f      	beq.n	800c5c2 <TIM_OC1_SetConfig+0xbe>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	4a1b      	ldr	r2, [pc, #108]	; (800c614 <TIM_OC1_SetConfig+0x110>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d00b      	beq.n	800c5c2 <TIM_OC1_SetConfig+0xbe>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	4a1a      	ldr	r2, [pc, #104]	; (800c618 <TIM_OC1_SetConfig+0x114>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d007      	beq.n	800c5c2 <TIM_OC1_SetConfig+0xbe>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	4a19      	ldr	r2, [pc, #100]	; (800c61c <TIM_OC1_SetConfig+0x118>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d003      	beq.n	800c5c2 <TIM_OC1_SetConfig+0xbe>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	4a18      	ldr	r2, [pc, #96]	; (800c620 <TIM_OC1_SetConfig+0x11c>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d111      	bne.n	800c5e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c5d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	695b      	ldr	r3, [r3, #20]
 800c5d6:	693a      	ldr	r2, [r7, #16]
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	699b      	ldr	r3, [r3, #24]
 800c5e0:	693a      	ldr	r2, [r7, #16]
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	693a      	ldr	r2, [r7, #16]
 800c5ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	68fa      	ldr	r2, [r7, #12]
 800c5f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	685a      	ldr	r2, [r3, #4]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	697a      	ldr	r2, [r7, #20]
 800c5fe:	621a      	str	r2, [r3, #32]
}
 800c600:	bf00      	nop
 800c602:	371c      	adds	r7, #28
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr
 800c60c:	fffeff8f 	.word	0xfffeff8f
 800c610:	40010000 	.word	0x40010000
 800c614:	40010400 	.word	0x40010400
 800c618:	40014000 	.word	0x40014000
 800c61c:	40014400 	.word	0x40014400
 800c620:	40014800 	.word	0x40014800

0800c624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c624:	b480      	push	{r7}
 800c626:	b087      	sub	sp, #28
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6a1b      	ldr	r3, [r3, #32]
 800c632:	f023 0210 	bic.w	r2, r3, #16
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6a1b      	ldr	r3, [r3, #32]
 800c63e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	699b      	ldr	r3, [r3, #24]
 800c64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	4b34      	ldr	r3, [pc, #208]	; (800c720 <TIM_OC2_SetConfig+0xfc>)
 800c650:	4013      	ands	r3, r2
 800c652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c65a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	021b      	lsls	r3, r3, #8
 800c662:	68fa      	ldr	r2, [r7, #12]
 800c664:	4313      	orrs	r3, r2
 800c666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	f023 0320 	bic.w	r3, r3, #32
 800c66e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	689b      	ldr	r3, [r3, #8]
 800c674:	011b      	lsls	r3, r3, #4
 800c676:	697a      	ldr	r2, [r7, #20]
 800c678:	4313      	orrs	r3, r2
 800c67a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	4a29      	ldr	r2, [pc, #164]	; (800c724 <TIM_OC2_SetConfig+0x100>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d003      	beq.n	800c68c <TIM_OC2_SetConfig+0x68>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4a28      	ldr	r2, [pc, #160]	; (800c728 <TIM_OC2_SetConfig+0x104>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d10d      	bne.n	800c6a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	011b      	lsls	r3, r3, #4
 800c69a:	697a      	ldr	r2, [r7, #20]
 800c69c:	4313      	orrs	r3, r2
 800c69e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4a1e      	ldr	r2, [pc, #120]	; (800c724 <TIM_OC2_SetConfig+0x100>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d00f      	beq.n	800c6d0 <TIM_OC2_SetConfig+0xac>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	4a1d      	ldr	r2, [pc, #116]	; (800c728 <TIM_OC2_SetConfig+0x104>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d00b      	beq.n	800c6d0 <TIM_OC2_SetConfig+0xac>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	4a1c      	ldr	r2, [pc, #112]	; (800c72c <TIM_OC2_SetConfig+0x108>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d007      	beq.n	800c6d0 <TIM_OC2_SetConfig+0xac>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	4a1b      	ldr	r2, [pc, #108]	; (800c730 <TIM_OC2_SetConfig+0x10c>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d003      	beq.n	800c6d0 <TIM_OC2_SetConfig+0xac>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	4a1a      	ldr	r2, [pc, #104]	; (800c734 <TIM_OC2_SetConfig+0x110>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d113      	bne.n	800c6f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c6d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c6de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	695b      	ldr	r3, [r3, #20]
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	693a      	ldr	r2, [r7, #16]
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	699b      	ldr	r3, [r3, #24]
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	693a      	ldr	r2, [r7, #16]
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	693a      	ldr	r2, [r7, #16]
 800c6fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	685a      	ldr	r2, [r3, #4]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	697a      	ldr	r2, [r7, #20]
 800c710:	621a      	str	r2, [r3, #32]
}
 800c712:	bf00      	nop
 800c714:	371c      	adds	r7, #28
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop
 800c720:	feff8fff 	.word	0xfeff8fff
 800c724:	40010000 	.word	0x40010000
 800c728:	40010400 	.word	0x40010400
 800c72c:	40014000 	.word	0x40014000
 800c730:	40014400 	.word	0x40014400
 800c734:	40014800 	.word	0x40014800

0800c738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c738:	b480      	push	{r7}
 800c73a:	b087      	sub	sp, #28
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6a1b      	ldr	r3, [r3, #32]
 800c746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6a1b      	ldr	r3, [r3, #32]
 800c752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	69db      	ldr	r3, [r3, #28]
 800c75e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	4b33      	ldr	r3, [pc, #204]	; (800c830 <TIM_OC3_SetConfig+0xf8>)
 800c764:	4013      	ands	r3, r2
 800c766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f023 0303 	bic.w	r3, r3, #3
 800c76e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	68fa      	ldr	r2, [r7, #12]
 800c776:	4313      	orrs	r3, r2
 800c778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	689b      	ldr	r3, [r3, #8]
 800c786:	021b      	lsls	r3, r3, #8
 800c788:	697a      	ldr	r2, [r7, #20]
 800c78a:	4313      	orrs	r3, r2
 800c78c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4a28      	ldr	r2, [pc, #160]	; (800c834 <TIM_OC3_SetConfig+0xfc>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d003      	beq.n	800c79e <TIM_OC3_SetConfig+0x66>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	4a27      	ldr	r2, [pc, #156]	; (800c838 <TIM_OC3_SetConfig+0x100>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d10d      	bne.n	800c7ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c7a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	021b      	lsls	r3, r3, #8
 800c7ac:	697a      	ldr	r2, [r7, #20]
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c7b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4a1d      	ldr	r2, [pc, #116]	; (800c834 <TIM_OC3_SetConfig+0xfc>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d00f      	beq.n	800c7e2 <TIM_OC3_SetConfig+0xaa>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4a1c      	ldr	r2, [pc, #112]	; (800c838 <TIM_OC3_SetConfig+0x100>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d00b      	beq.n	800c7e2 <TIM_OC3_SetConfig+0xaa>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	4a1b      	ldr	r2, [pc, #108]	; (800c83c <TIM_OC3_SetConfig+0x104>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d007      	beq.n	800c7e2 <TIM_OC3_SetConfig+0xaa>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	4a1a      	ldr	r2, [pc, #104]	; (800c840 <TIM_OC3_SetConfig+0x108>)
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d003      	beq.n	800c7e2 <TIM_OC3_SetConfig+0xaa>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	4a19      	ldr	r2, [pc, #100]	; (800c844 <TIM_OC3_SetConfig+0x10c>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d113      	bne.n	800c80a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c7f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	695b      	ldr	r3, [r3, #20]
 800c7f6:	011b      	lsls	r3, r3, #4
 800c7f8:	693a      	ldr	r2, [r7, #16]
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	699b      	ldr	r3, [r3, #24]
 800c802:	011b      	lsls	r3, r3, #4
 800c804:	693a      	ldr	r2, [r7, #16]
 800c806:	4313      	orrs	r3, r2
 800c808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	693a      	ldr	r2, [r7, #16]
 800c80e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	68fa      	ldr	r2, [r7, #12]
 800c814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	685a      	ldr	r2, [r3, #4]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	697a      	ldr	r2, [r7, #20]
 800c822:	621a      	str	r2, [r3, #32]
}
 800c824:	bf00      	nop
 800c826:	371c      	adds	r7, #28
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr
 800c830:	fffeff8f 	.word	0xfffeff8f
 800c834:	40010000 	.word	0x40010000
 800c838:	40010400 	.word	0x40010400
 800c83c:	40014000 	.word	0x40014000
 800c840:	40014400 	.word	0x40014400
 800c844:	40014800 	.word	0x40014800

0800c848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c848:	b480      	push	{r7}
 800c84a:	b087      	sub	sp, #28
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a1b      	ldr	r3, [r3, #32]
 800c856:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6a1b      	ldr	r3, [r3, #32]
 800c862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	69db      	ldr	r3, [r3, #28]
 800c86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c870:	68fa      	ldr	r2, [r7, #12]
 800c872:	4b24      	ldr	r3, [pc, #144]	; (800c904 <TIM_OC4_SetConfig+0xbc>)
 800c874:	4013      	ands	r3, r2
 800c876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c87e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	021b      	lsls	r3, r3, #8
 800c886:	68fa      	ldr	r2, [r7, #12]
 800c888:	4313      	orrs	r3, r2
 800c88a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	031b      	lsls	r3, r3, #12
 800c89a:	693a      	ldr	r2, [r7, #16]
 800c89c:	4313      	orrs	r3, r2
 800c89e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	4a19      	ldr	r2, [pc, #100]	; (800c908 <TIM_OC4_SetConfig+0xc0>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d00f      	beq.n	800c8c8 <TIM_OC4_SetConfig+0x80>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4a18      	ldr	r2, [pc, #96]	; (800c90c <TIM_OC4_SetConfig+0xc4>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d00b      	beq.n	800c8c8 <TIM_OC4_SetConfig+0x80>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	4a17      	ldr	r2, [pc, #92]	; (800c910 <TIM_OC4_SetConfig+0xc8>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d007      	beq.n	800c8c8 <TIM_OC4_SetConfig+0x80>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	4a16      	ldr	r2, [pc, #88]	; (800c914 <TIM_OC4_SetConfig+0xcc>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d003      	beq.n	800c8c8 <TIM_OC4_SetConfig+0x80>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4a15      	ldr	r2, [pc, #84]	; (800c918 <TIM_OC4_SetConfig+0xd0>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d109      	bne.n	800c8dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c8ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	695b      	ldr	r3, [r3, #20]
 800c8d4:	019b      	lsls	r3, r3, #6
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	697a      	ldr	r2, [r7, #20]
 800c8e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	68fa      	ldr	r2, [r7, #12]
 800c8e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	685a      	ldr	r2, [r3, #4]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	693a      	ldr	r2, [r7, #16]
 800c8f4:	621a      	str	r2, [r3, #32]
}
 800c8f6:	bf00      	nop
 800c8f8:	371c      	adds	r7, #28
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	feff8fff 	.word	0xfeff8fff
 800c908:	40010000 	.word	0x40010000
 800c90c:	40010400 	.word	0x40010400
 800c910:	40014000 	.word	0x40014000
 800c914:	40014400 	.word	0x40014400
 800c918:	40014800 	.word	0x40014800

0800c91c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b087      	sub	sp, #28
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6a1b      	ldr	r3, [r3, #32]
 800c92a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6a1b      	ldr	r3, [r3, #32]
 800c936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c944:	68fa      	ldr	r2, [r7, #12]
 800c946:	4b21      	ldr	r3, [pc, #132]	; (800c9cc <TIM_OC5_SetConfig+0xb0>)
 800c948:	4013      	ands	r3, r2
 800c94a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	4313      	orrs	r3, r2
 800c954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c95c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	041b      	lsls	r3, r3, #16
 800c964:	693a      	ldr	r2, [r7, #16]
 800c966:	4313      	orrs	r3, r2
 800c968:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4a18      	ldr	r2, [pc, #96]	; (800c9d0 <TIM_OC5_SetConfig+0xb4>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d00f      	beq.n	800c992 <TIM_OC5_SetConfig+0x76>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	4a17      	ldr	r2, [pc, #92]	; (800c9d4 <TIM_OC5_SetConfig+0xb8>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d00b      	beq.n	800c992 <TIM_OC5_SetConfig+0x76>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4a16      	ldr	r2, [pc, #88]	; (800c9d8 <TIM_OC5_SetConfig+0xbc>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d007      	beq.n	800c992 <TIM_OC5_SetConfig+0x76>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4a15      	ldr	r2, [pc, #84]	; (800c9dc <TIM_OC5_SetConfig+0xc0>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d003      	beq.n	800c992 <TIM_OC5_SetConfig+0x76>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4a14      	ldr	r2, [pc, #80]	; (800c9e0 <TIM_OC5_SetConfig+0xc4>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d109      	bne.n	800c9a6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c998:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	695b      	ldr	r3, [r3, #20]
 800c99e:	021b      	lsls	r3, r3, #8
 800c9a0:	697a      	ldr	r2, [r7, #20]
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	697a      	ldr	r2, [r7, #20]
 800c9aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	68fa      	ldr	r2, [r7, #12]
 800c9b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	685a      	ldr	r2, [r3, #4]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	693a      	ldr	r2, [r7, #16]
 800c9be:	621a      	str	r2, [r3, #32]
}
 800c9c0:	bf00      	nop
 800c9c2:	371c      	adds	r7, #28
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr
 800c9cc:	fffeff8f 	.word	0xfffeff8f
 800c9d0:	40010000 	.word	0x40010000
 800c9d4:	40010400 	.word	0x40010400
 800c9d8:	40014000 	.word	0x40014000
 800c9dc:	40014400 	.word	0x40014400
 800c9e0:	40014800 	.word	0x40014800

0800c9e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b087      	sub	sp, #28
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a1b      	ldr	r3, [r3, #32]
 800c9f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6a1b      	ldr	r3, [r3, #32]
 800c9fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ca0c:	68fa      	ldr	r2, [r7, #12]
 800ca0e:	4b22      	ldr	r3, [pc, #136]	; (800ca98 <TIM_OC6_SetConfig+0xb4>)
 800ca10:	4013      	ands	r3, r2
 800ca12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	021b      	lsls	r3, r3, #8
 800ca1a:	68fa      	ldr	r2, [r7, #12]
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ca26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	689b      	ldr	r3, [r3, #8]
 800ca2c:	051b      	lsls	r3, r3, #20
 800ca2e:	693a      	ldr	r2, [r7, #16]
 800ca30:	4313      	orrs	r3, r2
 800ca32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	4a19      	ldr	r2, [pc, #100]	; (800ca9c <TIM_OC6_SetConfig+0xb8>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d00f      	beq.n	800ca5c <TIM_OC6_SetConfig+0x78>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4a18      	ldr	r2, [pc, #96]	; (800caa0 <TIM_OC6_SetConfig+0xbc>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d00b      	beq.n	800ca5c <TIM_OC6_SetConfig+0x78>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4a17      	ldr	r2, [pc, #92]	; (800caa4 <TIM_OC6_SetConfig+0xc0>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d007      	beq.n	800ca5c <TIM_OC6_SetConfig+0x78>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	4a16      	ldr	r2, [pc, #88]	; (800caa8 <TIM_OC6_SetConfig+0xc4>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d003      	beq.n	800ca5c <TIM_OC6_SetConfig+0x78>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	4a15      	ldr	r2, [pc, #84]	; (800caac <TIM_OC6_SetConfig+0xc8>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d109      	bne.n	800ca70 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	695b      	ldr	r3, [r3, #20]
 800ca68:	029b      	lsls	r3, r3, #10
 800ca6a:	697a      	ldr	r2, [r7, #20]
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	697a      	ldr	r2, [r7, #20]
 800ca74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	68fa      	ldr	r2, [r7, #12]
 800ca7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	685a      	ldr	r2, [r3, #4]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	693a      	ldr	r2, [r7, #16]
 800ca88:	621a      	str	r2, [r3, #32]
}
 800ca8a:	bf00      	nop
 800ca8c:	371c      	adds	r7, #28
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr
 800ca96:	bf00      	nop
 800ca98:	feff8fff 	.word	0xfeff8fff
 800ca9c:	40010000 	.word	0x40010000
 800caa0:	40010400 	.word	0x40010400
 800caa4:	40014000 	.word	0x40014000
 800caa8:	40014400 	.word	0x40014400
 800caac:	40014800 	.word	0x40014800

0800cab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b087      	sub	sp, #28
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	60f8      	str	r0, [r7, #12]
 800cab8:	60b9      	str	r1, [r7, #8]
 800caba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	6a1b      	ldr	r3, [r3, #32]
 800cac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	6a1b      	ldr	r3, [r3, #32]
 800cac6:	f023 0201 	bic.w	r2, r3, #1
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	699b      	ldr	r3, [r3, #24]
 800cad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	011b      	lsls	r3, r3, #4
 800cae0:	693a      	ldr	r2, [r7, #16]
 800cae2:	4313      	orrs	r3, r2
 800cae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	f023 030a 	bic.w	r3, r3, #10
 800caec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800caee:	697a      	ldr	r2, [r7, #20]
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	4313      	orrs	r3, r2
 800caf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	693a      	ldr	r2, [r7, #16]
 800cafa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	697a      	ldr	r2, [r7, #20]
 800cb00:	621a      	str	r2, [r3, #32]
}
 800cb02:	bf00      	nop
 800cb04:	371c      	adds	r7, #28
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr

0800cb0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb0e:	b480      	push	{r7}
 800cb10:	b087      	sub	sp, #28
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	60f8      	str	r0, [r7, #12]
 800cb16:	60b9      	str	r1, [r7, #8]
 800cb18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	6a1b      	ldr	r3, [r3, #32]
 800cb1e:	f023 0210 	bic.w	r2, r3, #16
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	699b      	ldr	r3, [r3, #24]
 800cb2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	6a1b      	ldr	r3, [r3, #32]
 800cb30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cb38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	031b      	lsls	r3, r3, #12
 800cb3e:	697a      	ldr	r2, [r7, #20]
 800cb40:	4313      	orrs	r3, r2
 800cb42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cb4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	011b      	lsls	r3, r3, #4
 800cb50:	693a      	ldr	r2, [r7, #16]
 800cb52:	4313      	orrs	r3, r2
 800cb54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	697a      	ldr	r2, [r7, #20]
 800cb5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	693a      	ldr	r2, [r7, #16]
 800cb60:	621a      	str	r2, [r3, #32]
}
 800cb62:	bf00      	nop
 800cb64:	371c      	adds	r7, #28
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr
	...

0800cb70 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b085      	sub	sp, #20
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb80:	68fa      	ldr	r2, [r7, #12]
 800cb82:	4b09      	ldr	r3, [pc, #36]	; (800cba8 <TIM_ITRx_SetConfig+0x38>)
 800cb84:	4013      	ands	r3, r2
 800cb86:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cb88:	683a      	ldr	r2, [r7, #0]
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	f043 0307 	orr.w	r3, r3, #7
 800cb92:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	609a      	str	r2, [r3, #8]
}
 800cb9a:	bf00      	nop
 800cb9c:	3714      	adds	r7, #20
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr
 800cba6:	bf00      	nop
 800cba8:	ffcfff8f 	.word	0xffcfff8f

0800cbac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b087      	sub	sp, #28
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	607a      	str	r2, [r7, #4]
 800cbb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cbc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	021a      	lsls	r2, r3, #8
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	431a      	orrs	r2, r3
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	697a      	ldr	r2, [r7, #20]
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	697a      	ldr	r2, [r7, #20]
 800cbde:	609a      	str	r2, [r3, #8]
}
 800cbe0:	bf00      	nop
 800cbe2:	371c      	adds	r7, #28
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b087      	sub	sp, #28
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	f003 031f 	and.w	r3, r3, #31
 800cbfe:	2201      	movs	r2, #1
 800cc00:	fa02 f303 	lsl.w	r3, r2, r3
 800cc04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	6a1a      	ldr	r2, [r3, #32]
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	43db      	mvns	r3, r3
 800cc0e:	401a      	ands	r2, r3
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	6a1a      	ldr	r2, [r3, #32]
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	f003 031f 	and.w	r3, r3, #31
 800cc1e:	6879      	ldr	r1, [r7, #4]
 800cc20:	fa01 f303 	lsl.w	r3, r1, r3
 800cc24:	431a      	orrs	r2, r3
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	621a      	str	r2, [r3, #32]
}
 800cc2a:	bf00      	nop
 800cc2c:	371c      	adds	r7, #28
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr
	...

0800cc38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d101      	bne.n	800cc50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cc4c:	2302      	movs	r3, #2
 800cc4e:	e077      	b.n	800cd40 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2201      	movs	r2, #1
 800cc54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2202      	movs	r2, #2
 800cc5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4a35      	ldr	r2, [pc, #212]	; (800cd4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d004      	beq.n	800cc84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a34      	ldr	r2, [pc, #208]	; (800cd50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d108      	bne.n	800cc96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cc8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	4313      	orrs	r3, r2
 800cc94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	4313      	orrs	r3, r2
 800cca6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4a25      	ldr	r2, [pc, #148]	; (800cd4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d02c      	beq.n	800cd14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccc2:	d027      	beq.n	800cd14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4a22      	ldr	r2, [pc, #136]	; (800cd54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d022      	beq.n	800cd14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4a21      	ldr	r2, [pc, #132]	; (800cd58 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d01d      	beq.n	800cd14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4a1f      	ldr	r2, [pc, #124]	; (800cd5c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d018      	beq.n	800cd14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a1a      	ldr	r2, [pc, #104]	; (800cd50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d013      	beq.n	800cd14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4a1b      	ldr	r2, [pc, #108]	; (800cd60 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d00e      	beq.n	800cd14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4a1a      	ldr	r2, [pc, #104]	; (800cd64 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d009      	beq.n	800cd14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a18      	ldr	r2, [pc, #96]	; (800cd68 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d004      	beq.n	800cd14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4a17      	ldr	r2, [pc, #92]	; (800cd6c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d10c      	bne.n	800cd2e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	68ba      	ldr	r2, [r7, #8]
 800cd22:	4313      	orrs	r3, r2
 800cd24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	68ba      	ldr	r2, [r7, #8]
 800cd2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2201      	movs	r2, #1
 800cd32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd3e:	2300      	movs	r3, #0
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3714      	adds	r7, #20
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr
 800cd4c:	40010000 	.word	0x40010000
 800cd50:	40010400 	.word	0x40010400
 800cd54:	40000400 	.word	0x40000400
 800cd58:	40000800 	.word	0x40000800
 800cd5c:	40000c00 	.word	0x40000c00
 800cd60:	40001800 	.word	0x40001800
 800cd64:	40014000 	.word	0x40014000
 800cd68:	4000e000 	.word	0x4000e000
 800cd6c:	4000e400 	.word	0x4000e400

0800cd70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b085      	sub	sp, #20
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d101      	bne.n	800cd8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cd88:	2302      	movs	r3, #2
 800cd8a:	e087      	b.n	800ce9c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	68db      	ldr	r3, [r3, #12]
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	689b      	ldr	r3, [r3, #8]
 800cdac:	4313      	orrs	r3, r2
 800cdae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	4313      	orrs	r3, r2
 800cdbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	691b      	ldr	r3, [r3, #16]
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	695b      	ldr	r3, [r3, #20]
 800cde4:	4313      	orrs	r3, r2
 800cde6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	699b      	ldr	r3, [r3, #24]
 800ce00:	041b      	lsls	r3, r3, #16
 800ce02:	4313      	orrs	r3, r2
 800ce04:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a27      	ldr	r2, [pc, #156]	; (800cea8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d004      	beq.n	800ce1a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a25      	ldr	r2, [pc, #148]	; (800ceac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d106      	bne.n	800ce28 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	69db      	ldr	r3, [r3, #28]
 800ce24:	4313      	orrs	r3, r2
 800ce26:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a1e      	ldr	r2, [pc, #120]	; (800cea8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d004      	beq.n	800ce3c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a1d      	ldr	r2, [pc, #116]	; (800ceac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d126      	bne.n	800ce8a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce46:	051b      	lsls	r3, r3, #20
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	6a1b      	ldr	r3, [r3, #32]
 800ce56:	4313      	orrs	r3, r2
 800ce58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce64:	4313      	orrs	r3, r2
 800ce66:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4a0e      	ldr	r2, [pc, #56]	; (800cea8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d004      	beq.n	800ce7c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4a0d      	ldr	r2, [pc, #52]	; (800ceac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d106      	bne.n	800ce8a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce86:	4313      	orrs	r3, r2
 800ce88:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	68fa      	ldr	r2, [r7, #12]
 800ce90:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3714      	adds	r7, #20
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr
 800cea8:	40010000 	.word	0x40010000
 800ceac:	40010400 	.word	0x40010400

0800ceb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b083      	sub	sp, #12
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ceb8:	bf00      	nop
 800ceba:	370c      	adds	r7, #12
 800cebc:	46bd      	mov	sp, r7
 800cebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec2:	4770      	bx	lr

0800cec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cecc:	bf00      	nop
 800cece:	370c      	adds	r7, #12
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr

0800ced8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cee0:	bf00      	nop
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d101      	bne.n	800cefe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cefa:	2301      	movs	r3, #1
 800cefc:	e042      	b.n	800cf84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d106      	bne.n	800cf16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f7f8 f85d 	bl	8004fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2224      	movs	r2, #36	; 0x24
 800cf1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f022 0201 	bic.w	r2, r2, #1
 800cf2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 fd1c 	bl	800d96c <UART_SetConfig>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	d101      	bne.n	800cf3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	e022      	b.n	800cf84 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d002      	beq.n	800cf4c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f001 fb7c 	bl	800e644 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	685a      	ldr	r2, [r3, #4]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cf5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	689a      	ldr	r2, [r3, #8]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cf6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f042 0201 	orr.w	r2, r2, #1
 800cf7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f001 fc03 	bl	800e788 <UART_CheckIdleState>
 800cf82:	4603      	mov	r3, r0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d101      	bne.n	800cf9e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	e031      	b.n	800d002 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2224      	movs	r2, #36	; 0x24
 800cfa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f022 0201 	bic.w	r2, r2, #1
 800cfb4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f7f8 f8d6 	bl	8005180 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2200      	movs	r2, #0
 800cff0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2200      	movs	r2, #0
 800cff6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2200      	movs	r2, #0
 800cffc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d000:	2300      	movs	r3, #0
}
 800d002:	4618      	mov	r0, r3
 800d004:	3708      	adds	r7, #8
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
	...

0800d00c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b08a      	sub	sp, #40	; 0x28
 800d010:	af00      	add	r7, sp, #0
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	60b9      	str	r1, [r7, #8]
 800d016:	4613      	mov	r3, r2
 800d018:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d020:	2b20      	cmp	r3, #32
 800d022:	d167      	bne.n	800d0f4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d002      	beq.n	800d030 <HAL_UART_Transmit_DMA+0x24>
 800d02a:	88fb      	ldrh	r3, [r7, #6]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d101      	bne.n	800d034 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800d030:	2301      	movs	r3, #1
 800d032:	e060      	b.n	800d0f6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	68ba      	ldr	r2, [r7, #8]
 800d038:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	88fa      	ldrh	r2, [r7, #6]
 800d03e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	88fa      	ldrh	r2, [r7, #6]
 800d046:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2200      	movs	r2, #0
 800d04e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2221      	movs	r2, #33	; 0x21
 800d056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d028      	beq.n	800d0b4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d066:	4a26      	ldr	r2, [pc, #152]	; (800d100 <HAL_UART_Transmit_DMA+0xf4>)
 800d068:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d06e:	4a25      	ldr	r2, [pc, #148]	; (800d104 <HAL_UART_Transmit_DMA+0xf8>)
 800d070:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d076:	4a24      	ldr	r2, [pc, #144]	; (800d108 <HAL_UART_Transmit_DMA+0xfc>)
 800d078:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d07e:	2200      	movs	r2, #0
 800d080:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d08a:	4619      	mov	r1, r3
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	3328      	adds	r3, #40	; 0x28
 800d092:	461a      	mov	r2, r3
 800d094:	88fb      	ldrh	r3, [r7, #6]
 800d096:	f7f8 ffaf 	bl	8005ff8 <HAL_DMA_Start_IT>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d009      	beq.n	800d0b4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2210      	movs	r2, #16
 800d0a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2220      	movs	r2, #32
 800d0ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e020      	b.n	800d0f6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2240      	movs	r2, #64	; 0x40
 800d0ba:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	3308      	adds	r3, #8
 800d0c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	e853 3f00 	ldrex	r3, [r3]
 800d0ca:	613b      	str	r3, [r7, #16]
   return(result);
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0d2:	627b      	str	r3, [r7, #36]	; 0x24
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	3308      	adds	r3, #8
 800d0da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0dc:	623a      	str	r2, [r7, #32]
 800d0de:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0e0:	69f9      	ldr	r1, [r7, #28]
 800d0e2:	6a3a      	ldr	r2, [r7, #32]
 800d0e4:	e841 2300 	strex	r3, r2, [r1]
 800d0e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d1e5      	bne.n	800d0bc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	e000      	b.n	800d0f6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800d0f4:	2302      	movs	r3, #2
  }
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3728      	adds	r7, #40	; 0x28
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	0800ec49 	.word	0x0800ec49
 800d104:	0800ecdf 	.word	0x0800ecdf
 800d108:	0800ee61 	.word	0x0800ee61

0800d10c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b08a      	sub	sp, #40	; 0x28
 800d110:	af00      	add	r7, sp, #0
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	4613      	mov	r3, r2
 800d118:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d120:	2b20      	cmp	r3, #32
 800d122:	d137      	bne.n	800d194 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d002      	beq.n	800d130 <HAL_UART_Receive_DMA+0x24>
 800d12a:	88fb      	ldrh	r3, [r7, #6]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d101      	bne.n	800d134 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d130:	2301      	movs	r3, #1
 800d132:	e030      	b.n	800d196 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2200      	movs	r2, #0
 800d138:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	4a18      	ldr	r2, [pc, #96]	; (800d1a0 <HAL_UART_Receive_DMA+0x94>)
 800d140:	4293      	cmp	r3, r2
 800d142:	d01f      	beq.n	800d184 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d018      	beq.n	800d184 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	e853 3f00 	ldrex	r3, [r3]
 800d15e:	613b      	str	r3, [r7, #16]
   return(result);
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d166:	627b      	str	r3, [r7, #36]	; 0x24
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	461a      	mov	r2, r3
 800d16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d170:	623b      	str	r3, [r7, #32]
 800d172:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d174:	69f9      	ldr	r1, [r7, #28]
 800d176:	6a3a      	ldr	r2, [r7, #32]
 800d178:	e841 2300 	strex	r3, r2, [r1]
 800d17c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d1e6      	bne.n	800d152 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d184:	88fb      	ldrh	r3, [r7, #6]
 800d186:	461a      	mov	r2, r3
 800d188:	68b9      	ldr	r1, [r7, #8]
 800d18a:	68f8      	ldr	r0, [r7, #12]
 800d18c:	f001 fc0e 	bl	800e9ac <UART_Start_Receive_DMA>
 800d190:	4603      	mov	r3, r0
 800d192:	e000      	b.n	800d196 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d194:	2302      	movs	r3, #2
  }
}
 800d196:	4618      	mov	r0, r3
 800d198:	3728      	adds	r7, #40	; 0x28
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	58000c00 	.word	0x58000c00

0800d1a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b0ba      	sub	sp, #232	; 0xe8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	69db      	ldr	r3, [r3, #28]
 800d1b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	689b      	ldr	r3, [r3, #8]
 800d1c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d1ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d1ce:	f640 030f 	movw	r3, #2063	; 0x80f
 800d1d2:	4013      	ands	r3, r2
 800d1d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d1d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d11b      	bne.n	800d218 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d1e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1e4:	f003 0320 	and.w	r3, r3, #32
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d015      	beq.n	800d218 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d1ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1f0:	f003 0320 	and.w	r3, r3, #32
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d105      	bne.n	800d204 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d1f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d1fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d200:	2b00      	cmp	r3, #0
 800d202:	d009      	beq.n	800d218 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d208:	2b00      	cmp	r3, #0
 800d20a:	f000 8377 	beq.w	800d8fc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	4798      	blx	r3
      }
      return;
 800d216:	e371      	b.n	800d8fc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d218:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	f000 8123 	beq.w	800d468 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d222:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d226:	4b8d      	ldr	r3, [pc, #564]	; (800d45c <HAL_UART_IRQHandler+0x2b8>)
 800d228:	4013      	ands	r3, r2
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d106      	bne.n	800d23c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d22e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d232:	4b8b      	ldr	r3, [pc, #556]	; (800d460 <HAL_UART_IRQHandler+0x2bc>)
 800d234:	4013      	ands	r3, r2
 800d236:	2b00      	cmp	r3, #0
 800d238:	f000 8116 	beq.w	800d468 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d23c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d240:	f003 0301 	and.w	r3, r3, #1
 800d244:	2b00      	cmp	r3, #0
 800d246:	d011      	beq.n	800d26c <HAL_UART_IRQHandler+0xc8>
 800d248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d24c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d250:	2b00      	cmp	r3, #0
 800d252:	d00b      	beq.n	800d26c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	2201      	movs	r2, #1
 800d25a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d262:	f043 0201 	orr.w	r2, r3, #1
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d26c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d270:	f003 0302 	and.w	r3, r3, #2
 800d274:	2b00      	cmp	r3, #0
 800d276:	d011      	beq.n	800d29c <HAL_UART_IRQHandler+0xf8>
 800d278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d27c:	f003 0301 	and.w	r3, r3, #1
 800d280:	2b00      	cmp	r3, #0
 800d282:	d00b      	beq.n	800d29c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2202      	movs	r2, #2
 800d28a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d292:	f043 0204 	orr.w	r2, r3, #4
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d29c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2a0:	f003 0304 	and.w	r3, r3, #4
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d011      	beq.n	800d2cc <HAL_UART_IRQHandler+0x128>
 800d2a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2ac:	f003 0301 	and.w	r3, r3, #1
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d00b      	beq.n	800d2cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	2204      	movs	r2, #4
 800d2ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2c2:	f043 0202 	orr.w	r2, r3, #2
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d2cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2d0:	f003 0308 	and.w	r3, r3, #8
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d017      	beq.n	800d308 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d2d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2dc:	f003 0320 	and.w	r3, r3, #32
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d105      	bne.n	800d2f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d2e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d2e8:	4b5c      	ldr	r3, [pc, #368]	; (800d45c <HAL_UART_IRQHandler+0x2b8>)
 800d2ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d00b      	beq.n	800d308 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2208      	movs	r2, #8
 800d2f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2fe:	f043 0208 	orr.w	r2, r3, #8
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d30c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d310:	2b00      	cmp	r3, #0
 800d312:	d012      	beq.n	800d33a <HAL_UART_IRQHandler+0x196>
 800d314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d318:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d00c      	beq.n	800d33a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d328:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d330:	f043 0220 	orr.w	r2, r3, #32
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d340:	2b00      	cmp	r3, #0
 800d342:	f000 82dd 	beq.w	800d900 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d34a:	f003 0320 	and.w	r3, r3, #32
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d013      	beq.n	800d37a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d356:	f003 0320 	and.w	r3, r3, #32
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d105      	bne.n	800d36a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d35e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d366:	2b00      	cmp	r3, #0
 800d368:	d007      	beq.n	800d37a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d003      	beq.n	800d37a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d380:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	689b      	ldr	r3, [r3, #8]
 800d38a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d38e:	2b40      	cmp	r3, #64	; 0x40
 800d390:	d005      	beq.n	800d39e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d396:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d054      	beq.n	800d448 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f001 fbec 	bl	800eb7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	689b      	ldr	r3, [r3, #8]
 800d3aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ae:	2b40      	cmp	r3, #64	; 0x40
 800d3b0:	d146      	bne.n	800d440 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	3308      	adds	r3, #8
 800d3b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d3c0:	e853 3f00 	ldrex	r3, [r3]
 800d3c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d3c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d3cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	3308      	adds	r3, #8
 800d3da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d3de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d3e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d3ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d3ee:	e841 2300 	strex	r3, r2, [r1]
 800d3f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d3f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d1d9      	bne.n	800d3b2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d404:	2b00      	cmp	r3, #0
 800d406:	d017      	beq.n	800d438 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d40e:	4a15      	ldr	r2, [pc, #84]	; (800d464 <HAL_UART_IRQHandler+0x2c0>)
 800d410:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d418:	4618      	mov	r0, r3
 800d41a:	f7f9 fb75 	bl	8006b08 <HAL_DMA_Abort_IT>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d019      	beq.n	800d458 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d432:	4610      	mov	r0, r2
 800d434:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d436:	e00f      	b.n	800d458 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f7f4 f9df 	bl	80017fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d43e:	e00b      	b.n	800d458 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f7f4 f9db 	bl	80017fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d446:	e007      	b.n	800d458 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f7f4 f9d7 	bl	80017fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2200      	movs	r2, #0
 800d452:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d456:	e253      	b.n	800d900 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d458:	bf00      	nop
    return;
 800d45a:	e251      	b.n	800d900 <HAL_UART_IRQHandler+0x75c>
 800d45c:	10000001 	.word	0x10000001
 800d460:	04000120 	.word	0x04000120
 800d464:	0800eee1 	.word	0x0800eee1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	f040 81e7 	bne.w	800d840 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d476:	f003 0310 	and.w	r3, r3, #16
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f000 81e0 	beq.w	800d840 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d484:	f003 0310 	and.w	r3, r3, #16
 800d488:	2b00      	cmp	r3, #0
 800d48a:	f000 81d9 	beq.w	800d840 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	2210      	movs	r2, #16
 800d494:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	689b      	ldr	r3, [r3, #8]
 800d49c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4a0:	2b40      	cmp	r3, #64	; 0x40
 800d4a2:	f040 8151 	bne.w	800d748 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	4a96      	ldr	r2, [pc, #600]	; (800d708 <HAL_UART_IRQHandler+0x564>)
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d068      	beq.n	800d586 <HAL_UART_IRQHandler+0x3e2>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4a93      	ldr	r2, [pc, #588]	; (800d70c <HAL_UART_IRQHandler+0x568>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d061      	beq.n	800d586 <HAL_UART_IRQHandler+0x3e2>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a91      	ldr	r2, [pc, #580]	; (800d710 <HAL_UART_IRQHandler+0x56c>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d05a      	beq.n	800d586 <HAL_UART_IRQHandler+0x3e2>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4a8e      	ldr	r2, [pc, #568]	; (800d714 <HAL_UART_IRQHandler+0x570>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d053      	beq.n	800d586 <HAL_UART_IRQHandler+0x3e2>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	4a8c      	ldr	r2, [pc, #560]	; (800d718 <HAL_UART_IRQHandler+0x574>)
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d04c      	beq.n	800d586 <HAL_UART_IRQHandler+0x3e2>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a89      	ldr	r2, [pc, #548]	; (800d71c <HAL_UART_IRQHandler+0x578>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d045      	beq.n	800d586 <HAL_UART_IRQHandler+0x3e2>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	4a87      	ldr	r2, [pc, #540]	; (800d720 <HAL_UART_IRQHandler+0x57c>)
 800d504:	4293      	cmp	r3, r2
 800d506:	d03e      	beq.n	800d586 <HAL_UART_IRQHandler+0x3e2>
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a84      	ldr	r2, [pc, #528]	; (800d724 <HAL_UART_IRQHandler+0x580>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d037      	beq.n	800d586 <HAL_UART_IRQHandler+0x3e2>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	4a82      	ldr	r2, [pc, #520]	; (800d728 <HAL_UART_IRQHandler+0x584>)
 800d520:	4293      	cmp	r3, r2
 800d522:	d030      	beq.n	800d586 <HAL_UART_IRQHandler+0x3e2>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4a7f      	ldr	r2, [pc, #508]	; (800d72c <HAL_UART_IRQHandler+0x588>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d029      	beq.n	800d586 <HAL_UART_IRQHandler+0x3e2>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4a7d      	ldr	r2, [pc, #500]	; (800d730 <HAL_UART_IRQHandler+0x58c>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d022      	beq.n	800d586 <HAL_UART_IRQHandler+0x3e2>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4a7a      	ldr	r2, [pc, #488]	; (800d734 <HAL_UART_IRQHandler+0x590>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d01b      	beq.n	800d586 <HAL_UART_IRQHandler+0x3e2>
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4a78      	ldr	r2, [pc, #480]	; (800d738 <HAL_UART_IRQHandler+0x594>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d014      	beq.n	800d586 <HAL_UART_IRQHandler+0x3e2>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	4a75      	ldr	r2, [pc, #468]	; (800d73c <HAL_UART_IRQHandler+0x598>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d00d      	beq.n	800d586 <HAL_UART_IRQHandler+0x3e2>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4a73      	ldr	r2, [pc, #460]	; (800d740 <HAL_UART_IRQHandler+0x59c>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d006      	beq.n	800d586 <HAL_UART_IRQHandler+0x3e2>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4a70      	ldr	r2, [pc, #448]	; (800d744 <HAL_UART_IRQHandler+0x5a0>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d106      	bne.n	800d594 <HAL_UART_IRQHandler+0x3f0>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	b29b      	uxth	r3, r3
 800d592:	e005      	b.n	800d5a0 <HAL_UART_IRQHandler+0x3fc>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d5a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	f000 81ab 	beq.w	800d904 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d5b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	f080 81a3 	bcs.w	800d904 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d5c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5ce:	69db      	ldr	r3, [r3, #28]
 800d5d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5d4:	f000 8087 	beq.w	800d6e6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d5e4:	e853 3f00 	ldrex	r3, [r3]
 800d5e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d5ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d5f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d602:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d606:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d60a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d60e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d612:	e841 2300 	strex	r3, r2, [r1]
 800d616:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d61a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d1da      	bne.n	800d5d8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	3308      	adds	r3, #8
 800d628:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d62a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d62c:	e853 3f00 	ldrex	r3, [r3]
 800d630:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d632:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d634:	f023 0301 	bic.w	r3, r3, #1
 800d638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	3308      	adds	r3, #8
 800d642:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d646:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d64a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d64c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d64e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d652:	e841 2300 	strex	r3, r2, [r1]
 800d656:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d1e1      	bne.n	800d622 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	3308      	adds	r3, #8
 800d664:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d668:	e853 3f00 	ldrex	r3, [r3]
 800d66c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d66e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d674:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	3308      	adds	r3, #8
 800d67e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d682:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d684:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d686:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d688:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d68a:	e841 2300 	strex	r3, r2, [r1]
 800d68e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d692:	2b00      	cmp	r3, #0
 800d694:	d1e3      	bne.n	800d65e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2220      	movs	r2, #32
 800d69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6ac:	e853 3f00 	ldrex	r3, [r3]
 800d6b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d6b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6b4:	f023 0310 	bic.w	r3, r3, #16
 800d6b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d6c6:	65bb      	str	r3, [r7, #88]	; 0x58
 800d6c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d6cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6ce:	e841 2300 	strex	r3, r2, [r1]
 800d6d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d6d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d1e4      	bne.n	800d6a4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7f8 fef3 	bl	80064cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2202      	movs	r2, #2
 800d6ea:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	1ad3      	subs	r3, r2, r3
 800d6fc:	b29b      	uxth	r3, r3
 800d6fe:	4619      	mov	r1, r3
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f000 f927 	bl	800d954 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d706:	e0fd      	b.n	800d904 <HAL_UART_IRQHandler+0x760>
 800d708:	40020010 	.word	0x40020010
 800d70c:	40020028 	.word	0x40020028
 800d710:	40020040 	.word	0x40020040
 800d714:	40020058 	.word	0x40020058
 800d718:	40020070 	.word	0x40020070
 800d71c:	40020088 	.word	0x40020088
 800d720:	400200a0 	.word	0x400200a0
 800d724:	400200b8 	.word	0x400200b8
 800d728:	40020410 	.word	0x40020410
 800d72c:	40020428 	.word	0x40020428
 800d730:	40020440 	.word	0x40020440
 800d734:	40020458 	.word	0x40020458
 800d738:	40020470 	.word	0x40020470
 800d73c:	40020488 	.word	0x40020488
 800d740:	400204a0 	.word	0x400204a0
 800d744:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d754:	b29b      	uxth	r3, r3
 800d756:	1ad3      	subs	r3, r2, r3
 800d758:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d762:	b29b      	uxth	r3, r3
 800d764:	2b00      	cmp	r3, #0
 800d766:	f000 80cf 	beq.w	800d908 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d76a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f000 80ca 	beq.w	800d908 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d77c:	e853 3f00 	ldrex	r3, [r3]
 800d780:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d784:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d788:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	461a      	mov	r2, r3
 800d792:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d796:	647b      	str	r3, [r7, #68]	; 0x44
 800d798:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d79a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d79c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d79e:	e841 2300 	strex	r3, r2, [r1]
 800d7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d1e4      	bne.n	800d774 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	3308      	adds	r3, #8
 800d7b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b4:	e853 3f00 	ldrex	r3, [r3]
 800d7b8:	623b      	str	r3, [r7, #32]
   return(result);
 800d7ba:	6a3a      	ldr	r2, [r7, #32]
 800d7bc:	4b55      	ldr	r3, [pc, #340]	; (800d914 <HAL_UART_IRQHandler+0x770>)
 800d7be:	4013      	ands	r3, r2
 800d7c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	3308      	adds	r3, #8
 800d7ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d7ce:	633a      	str	r2, [r7, #48]	; 0x30
 800d7d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7d6:	e841 2300 	strex	r3, r2, [r1]
 800d7da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d1e3      	bne.n	800d7aa <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2220      	movs	r2, #32
 800d7e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	e853 3f00 	ldrex	r3, [r3]
 800d802:	60fb      	str	r3, [r7, #12]
   return(result);
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f023 0310 	bic.w	r3, r3, #16
 800d80a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	461a      	mov	r2, r3
 800d814:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d818:	61fb      	str	r3, [r7, #28]
 800d81a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d81c:	69b9      	ldr	r1, [r7, #24]
 800d81e:	69fa      	ldr	r2, [r7, #28]
 800d820:	e841 2300 	strex	r3, r2, [r1]
 800d824:	617b      	str	r3, [r7, #20]
   return(result);
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d1e4      	bne.n	800d7f6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2202      	movs	r2, #2
 800d830:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d832:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d836:	4619      	mov	r1, r3
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 f88b 	bl	800d954 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d83e:	e063      	b.n	800d908 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d00e      	beq.n	800d86a <HAL_UART_IRQHandler+0x6c6>
 800d84c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d854:	2b00      	cmp	r3, #0
 800d856:	d008      	beq.n	800d86a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d860:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f001 fb7d 	bl	800ef62 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d868:	e051      	b.n	800d90e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d86a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d86e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d872:	2b00      	cmp	r3, #0
 800d874:	d014      	beq.n	800d8a0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d87a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d105      	bne.n	800d88e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d886:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d008      	beq.n	800d8a0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d892:	2b00      	cmp	r3, #0
 800d894:	d03a      	beq.n	800d90c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	4798      	blx	r3
    }
    return;
 800d89e:	e035      	b.n	800d90c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d8a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d009      	beq.n	800d8c0 <HAL_UART_IRQHandler+0x71c>
 800d8ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d003      	beq.n	800d8c0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f001 fb27 	bl	800ef0c <UART_EndTransmit_IT>
    return;
 800d8be:	e026      	b.n	800d90e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d8c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d009      	beq.n	800d8e0 <HAL_UART_IRQHandler+0x73c>
 800d8cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d003      	beq.n	800d8e0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f001 fb56 	bl	800ef8a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d8de:	e016      	b.n	800d90e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d8e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d010      	beq.n	800d90e <HAL_UART_IRQHandler+0x76a>
 800d8ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	da0c      	bge.n	800d90e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f001 fb3e 	bl	800ef76 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d8fa:	e008      	b.n	800d90e <HAL_UART_IRQHandler+0x76a>
      return;
 800d8fc:	bf00      	nop
 800d8fe:	e006      	b.n	800d90e <HAL_UART_IRQHandler+0x76a>
    return;
 800d900:	bf00      	nop
 800d902:	e004      	b.n	800d90e <HAL_UART_IRQHandler+0x76a>
      return;
 800d904:	bf00      	nop
 800d906:	e002      	b.n	800d90e <HAL_UART_IRQHandler+0x76a>
      return;
 800d908:	bf00      	nop
 800d90a:	e000      	b.n	800d90e <HAL_UART_IRQHandler+0x76a>
    return;
 800d90c:	bf00      	nop
  }
}
 800d90e:	37e8      	adds	r7, #232	; 0xe8
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}
 800d914:	effffffe 	.word	0xeffffffe

0800d918 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d918:	b480      	push	{r7}
 800d91a:	b083      	sub	sp, #12
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d920:	bf00      	nop
 800d922:	370c      	adds	r7, #12
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr

0800d92c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b083      	sub	sp, #12
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d934:	bf00      	nop
 800d936:	370c      	adds	r7, #12
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr

0800d940 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d940:	b480      	push	{r7}
 800d942:	b083      	sub	sp, #12
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d948:	bf00      	nop
 800d94a:	370c      	adds	r7, #12
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr

0800d954 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d954:	b480      	push	{r7}
 800d956:	b083      	sub	sp, #12
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	460b      	mov	r3, r1
 800d95e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d960:	bf00      	nop
 800d962:	370c      	adds	r7, #12
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr

0800d96c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d96c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d970:	b092      	sub	sp, #72	; 0x48
 800d972:	af00      	add	r7, sp, #0
 800d974:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d976:	2300      	movs	r3, #0
 800d978:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	689a      	ldr	r2, [r3, #8]
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	691b      	ldr	r3, [r3, #16]
 800d984:	431a      	orrs	r2, r3
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	695b      	ldr	r3, [r3, #20]
 800d98a:	431a      	orrs	r2, r3
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	69db      	ldr	r3, [r3, #28]
 800d990:	4313      	orrs	r3, r2
 800d992:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	4bbe      	ldr	r3, [pc, #760]	; (800dc94 <UART_SetConfig+0x328>)
 800d99c:	4013      	ands	r3, r2
 800d99e:	697a      	ldr	r2, [r7, #20]
 800d9a0:	6812      	ldr	r2, [r2, #0]
 800d9a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9a4:	430b      	orrs	r3, r1
 800d9a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	685b      	ldr	r3, [r3, #4]
 800d9ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	68da      	ldr	r2, [r3, #12]
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	430a      	orrs	r2, r1
 800d9bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	699b      	ldr	r3, [r3, #24]
 800d9c2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4ab3      	ldr	r2, [pc, #716]	; (800dc98 <UART_SetConfig+0x32c>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d004      	beq.n	800d9d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	6a1b      	ldr	r3, [r3, #32]
 800d9d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d9d4:	4313      	orrs	r3, r2
 800d9d6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	689a      	ldr	r2, [r3, #8]
 800d9de:	4baf      	ldr	r3, [pc, #700]	; (800dc9c <UART_SetConfig+0x330>)
 800d9e0:	4013      	ands	r3, r2
 800d9e2:	697a      	ldr	r2, [r7, #20]
 800d9e4:	6812      	ldr	r2, [r2, #0]
 800d9e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9e8:	430b      	orrs	r3, r1
 800d9ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f2:	f023 010f 	bic.w	r1, r3, #15
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	430a      	orrs	r2, r1
 800da00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	4aa6      	ldr	r2, [pc, #664]	; (800dca0 <UART_SetConfig+0x334>)
 800da08:	4293      	cmp	r3, r2
 800da0a:	d177      	bne.n	800dafc <UART_SetConfig+0x190>
 800da0c:	4ba5      	ldr	r3, [pc, #660]	; (800dca4 <UART_SetConfig+0x338>)
 800da0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da14:	2b28      	cmp	r3, #40	; 0x28
 800da16:	d86d      	bhi.n	800daf4 <UART_SetConfig+0x188>
 800da18:	a201      	add	r2, pc, #4	; (adr r2, 800da20 <UART_SetConfig+0xb4>)
 800da1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da1e:	bf00      	nop
 800da20:	0800dac5 	.word	0x0800dac5
 800da24:	0800daf5 	.word	0x0800daf5
 800da28:	0800daf5 	.word	0x0800daf5
 800da2c:	0800daf5 	.word	0x0800daf5
 800da30:	0800daf5 	.word	0x0800daf5
 800da34:	0800daf5 	.word	0x0800daf5
 800da38:	0800daf5 	.word	0x0800daf5
 800da3c:	0800daf5 	.word	0x0800daf5
 800da40:	0800dacd 	.word	0x0800dacd
 800da44:	0800daf5 	.word	0x0800daf5
 800da48:	0800daf5 	.word	0x0800daf5
 800da4c:	0800daf5 	.word	0x0800daf5
 800da50:	0800daf5 	.word	0x0800daf5
 800da54:	0800daf5 	.word	0x0800daf5
 800da58:	0800daf5 	.word	0x0800daf5
 800da5c:	0800daf5 	.word	0x0800daf5
 800da60:	0800dad5 	.word	0x0800dad5
 800da64:	0800daf5 	.word	0x0800daf5
 800da68:	0800daf5 	.word	0x0800daf5
 800da6c:	0800daf5 	.word	0x0800daf5
 800da70:	0800daf5 	.word	0x0800daf5
 800da74:	0800daf5 	.word	0x0800daf5
 800da78:	0800daf5 	.word	0x0800daf5
 800da7c:	0800daf5 	.word	0x0800daf5
 800da80:	0800dadd 	.word	0x0800dadd
 800da84:	0800daf5 	.word	0x0800daf5
 800da88:	0800daf5 	.word	0x0800daf5
 800da8c:	0800daf5 	.word	0x0800daf5
 800da90:	0800daf5 	.word	0x0800daf5
 800da94:	0800daf5 	.word	0x0800daf5
 800da98:	0800daf5 	.word	0x0800daf5
 800da9c:	0800daf5 	.word	0x0800daf5
 800daa0:	0800dae5 	.word	0x0800dae5
 800daa4:	0800daf5 	.word	0x0800daf5
 800daa8:	0800daf5 	.word	0x0800daf5
 800daac:	0800daf5 	.word	0x0800daf5
 800dab0:	0800daf5 	.word	0x0800daf5
 800dab4:	0800daf5 	.word	0x0800daf5
 800dab8:	0800daf5 	.word	0x0800daf5
 800dabc:	0800daf5 	.word	0x0800daf5
 800dac0:	0800daed 	.word	0x0800daed
 800dac4:	2301      	movs	r3, #1
 800dac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daca:	e326      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dacc:	2304      	movs	r3, #4
 800dace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dad2:	e322      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dad4:	2308      	movs	r3, #8
 800dad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dada:	e31e      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dadc:	2310      	movs	r3, #16
 800dade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dae2:	e31a      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dae4:	2320      	movs	r3, #32
 800dae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daea:	e316      	b.n	800e11a <UART_SetConfig+0x7ae>
 800daec:	2340      	movs	r3, #64	; 0x40
 800daee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daf2:	e312      	b.n	800e11a <UART_SetConfig+0x7ae>
 800daf4:	2380      	movs	r3, #128	; 0x80
 800daf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dafa:	e30e      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4a69      	ldr	r2, [pc, #420]	; (800dca8 <UART_SetConfig+0x33c>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d130      	bne.n	800db68 <UART_SetConfig+0x1fc>
 800db06:	4b67      	ldr	r3, [pc, #412]	; (800dca4 <UART_SetConfig+0x338>)
 800db08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db0a:	f003 0307 	and.w	r3, r3, #7
 800db0e:	2b05      	cmp	r3, #5
 800db10:	d826      	bhi.n	800db60 <UART_SetConfig+0x1f4>
 800db12:	a201      	add	r2, pc, #4	; (adr r2, 800db18 <UART_SetConfig+0x1ac>)
 800db14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db18:	0800db31 	.word	0x0800db31
 800db1c:	0800db39 	.word	0x0800db39
 800db20:	0800db41 	.word	0x0800db41
 800db24:	0800db49 	.word	0x0800db49
 800db28:	0800db51 	.word	0x0800db51
 800db2c:	0800db59 	.word	0x0800db59
 800db30:	2300      	movs	r3, #0
 800db32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db36:	e2f0      	b.n	800e11a <UART_SetConfig+0x7ae>
 800db38:	2304      	movs	r3, #4
 800db3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db3e:	e2ec      	b.n	800e11a <UART_SetConfig+0x7ae>
 800db40:	2308      	movs	r3, #8
 800db42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db46:	e2e8      	b.n	800e11a <UART_SetConfig+0x7ae>
 800db48:	2310      	movs	r3, #16
 800db4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db4e:	e2e4      	b.n	800e11a <UART_SetConfig+0x7ae>
 800db50:	2320      	movs	r3, #32
 800db52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db56:	e2e0      	b.n	800e11a <UART_SetConfig+0x7ae>
 800db58:	2340      	movs	r3, #64	; 0x40
 800db5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db5e:	e2dc      	b.n	800e11a <UART_SetConfig+0x7ae>
 800db60:	2380      	movs	r3, #128	; 0x80
 800db62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db66:	e2d8      	b.n	800e11a <UART_SetConfig+0x7ae>
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	4a4f      	ldr	r2, [pc, #316]	; (800dcac <UART_SetConfig+0x340>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d130      	bne.n	800dbd4 <UART_SetConfig+0x268>
 800db72:	4b4c      	ldr	r3, [pc, #304]	; (800dca4 <UART_SetConfig+0x338>)
 800db74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db76:	f003 0307 	and.w	r3, r3, #7
 800db7a:	2b05      	cmp	r3, #5
 800db7c:	d826      	bhi.n	800dbcc <UART_SetConfig+0x260>
 800db7e:	a201      	add	r2, pc, #4	; (adr r2, 800db84 <UART_SetConfig+0x218>)
 800db80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db84:	0800db9d 	.word	0x0800db9d
 800db88:	0800dba5 	.word	0x0800dba5
 800db8c:	0800dbad 	.word	0x0800dbad
 800db90:	0800dbb5 	.word	0x0800dbb5
 800db94:	0800dbbd 	.word	0x0800dbbd
 800db98:	0800dbc5 	.word	0x0800dbc5
 800db9c:	2300      	movs	r3, #0
 800db9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dba2:	e2ba      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dba4:	2304      	movs	r3, #4
 800dba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbaa:	e2b6      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dbac:	2308      	movs	r3, #8
 800dbae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbb2:	e2b2      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dbb4:	2310      	movs	r3, #16
 800dbb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbba:	e2ae      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dbbc:	2320      	movs	r3, #32
 800dbbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbc2:	e2aa      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dbc4:	2340      	movs	r3, #64	; 0x40
 800dbc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbca:	e2a6      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dbcc:	2380      	movs	r3, #128	; 0x80
 800dbce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbd2:	e2a2      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4a35      	ldr	r2, [pc, #212]	; (800dcb0 <UART_SetConfig+0x344>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d130      	bne.n	800dc40 <UART_SetConfig+0x2d4>
 800dbde:	4b31      	ldr	r3, [pc, #196]	; (800dca4 <UART_SetConfig+0x338>)
 800dbe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbe2:	f003 0307 	and.w	r3, r3, #7
 800dbe6:	2b05      	cmp	r3, #5
 800dbe8:	d826      	bhi.n	800dc38 <UART_SetConfig+0x2cc>
 800dbea:	a201      	add	r2, pc, #4	; (adr r2, 800dbf0 <UART_SetConfig+0x284>)
 800dbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbf0:	0800dc09 	.word	0x0800dc09
 800dbf4:	0800dc11 	.word	0x0800dc11
 800dbf8:	0800dc19 	.word	0x0800dc19
 800dbfc:	0800dc21 	.word	0x0800dc21
 800dc00:	0800dc29 	.word	0x0800dc29
 800dc04:	0800dc31 	.word	0x0800dc31
 800dc08:	2300      	movs	r3, #0
 800dc0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc0e:	e284      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dc10:	2304      	movs	r3, #4
 800dc12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc16:	e280      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dc18:	2308      	movs	r3, #8
 800dc1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc1e:	e27c      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dc20:	2310      	movs	r3, #16
 800dc22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc26:	e278      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dc28:	2320      	movs	r3, #32
 800dc2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc2e:	e274      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dc30:	2340      	movs	r3, #64	; 0x40
 800dc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc36:	e270      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dc38:	2380      	movs	r3, #128	; 0x80
 800dc3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc3e:	e26c      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4a1b      	ldr	r2, [pc, #108]	; (800dcb4 <UART_SetConfig+0x348>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d142      	bne.n	800dcd0 <UART_SetConfig+0x364>
 800dc4a:	4b16      	ldr	r3, [pc, #88]	; (800dca4 <UART_SetConfig+0x338>)
 800dc4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc4e:	f003 0307 	and.w	r3, r3, #7
 800dc52:	2b05      	cmp	r3, #5
 800dc54:	d838      	bhi.n	800dcc8 <UART_SetConfig+0x35c>
 800dc56:	a201      	add	r2, pc, #4	; (adr r2, 800dc5c <UART_SetConfig+0x2f0>)
 800dc58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc5c:	0800dc75 	.word	0x0800dc75
 800dc60:	0800dc7d 	.word	0x0800dc7d
 800dc64:	0800dc85 	.word	0x0800dc85
 800dc68:	0800dc8d 	.word	0x0800dc8d
 800dc6c:	0800dcb9 	.word	0x0800dcb9
 800dc70:	0800dcc1 	.word	0x0800dcc1
 800dc74:	2300      	movs	r3, #0
 800dc76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc7a:	e24e      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dc7c:	2304      	movs	r3, #4
 800dc7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc82:	e24a      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dc84:	2308      	movs	r3, #8
 800dc86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc8a:	e246      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dc8c:	2310      	movs	r3, #16
 800dc8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc92:	e242      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dc94:	cfff69f3 	.word	0xcfff69f3
 800dc98:	58000c00 	.word	0x58000c00
 800dc9c:	11fff4ff 	.word	0x11fff4ff
 800dca0:	40011000 	.word	0x40011000
 800dca4:	58024400 	.word	0x58024400
 800dca8:	40004400 	.word	0x40004400
 800dcac:	40004800 	.word	0x40004800
 800dcb0:	40004c00 	.word	0x40004c00
 800dcb4:	40005000 	.word	0x40005000
 800dcb8:	2320      	movs	r3, #32
 800dcba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcbe:	e22c      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dcc0:	2340      	movs	r3, #64	; 0x40
 800dcc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcc6:	e228      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dcc8:	2380      	movs	r3, #128	; 0x80
 800dcca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcce:	e224      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4ab1      	ldr	r2, [pc, #708]	; (800df9c <UART_SetConfig+0x630>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d176      	bne.n	800ddc8 <UART_SetConfig+0x45c>
 800dcda:	4bb1      	ldr	r3, [pc, #708]	; (800dfa0 <UART_SetConfig+0x634>)
 800dcdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dce2:	2b28      	cmp	r3, #40	; 0x28
 800dce4:	d86c      	bhi.n	800ddc0 <UART_SetConfig+0x454>
 800dce6:	a201      	add	r2, pc, #4	; (adr r2, 800dcec <UART_SetConfig+0x380>)
 800dce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcec:	0800dd91 	.word	0x0800dd91
 800dcf0:	0800ddc1 	.word	0x0800ddc1
 800dcf4:	0800ddc1 	.word	0x0800ddc1
 800dcf8:	0800ddc1 	.word	0x0800ddc1
 800dcfc:	0800ddc1 	.word	0x0800ddc1
 800dd00:	0800ddc1 	.word	0x0800ddc1
 800dd04:	0800ddc1 	.word	0x0800ddc1
 800dd08:	0800ddc1 	.word	0x0800ddc1
 800dd0c:	0800dd99 	.word	0x0800dd99
 800dd10:	0800ddc1 	.word	0x0800ddc1
 800dd14:	0800ddc1 	.word	0x0800ddc1
 800dd18:	0800ddc1 	.word	0x0800ddc1
 800dd1c:	0800ddc1 	.word	0x0800ddc1
 800dd20:	0800ddc1 	.word	0x0800ddc1
 800dd24:	0800ddc1 	.word	0x0800ddc1
 800dd28:	0800ddc1 	.word	0x0800ddc1
 800dd2c:	0800dda1 	.word	0x0800dda1
 800dd30:	0800ddc1 	.word	0x0800ddc1
 800dd34:	0800ddc1 	.word	0x0800ddc1
 800dd38:	0800ddc1 	.word	0x0800ddc1
 800dd3c:	0800ddc1 	.word	0x0800ddc1
 800dd40:	0800ddc1 	.word	0x0800ddc1
 800dd44:	0800ddc1 	.word	0x0800ddc1
 800dd48:	0800ddc1 	.word	0x0800ddc1
 800dd4c:	0800dda9 	.word	0x0800dda9
 800dd50:	0800ddc1 	.word	0x0800ddc1
 800dd54:	0800ddc1 	.word	0x0800ddc1
 800dd58:	0800ddc1 	.word	0x0800ddc1
 800dd5c:	0800ddc1 	.word	0x0800ddc1
 800dd60:	0800ddc1 	.word	0x0800ddc1
 800dd64:	0800ddc1 	.word	0x0800ddc1
 800dd68:	0800ddc1 	.word	0x0800ddc1
 800dd6c:	0800ddb1 	.word	0x0800ddb1
 800dd70:	0800ddc1 	.word	0x0800ddc1
 800dd74:	0800ddc1 	.word	0x0800ddc1
 800dd78:	0800ddc1 	.word	0x0800ddc1
 800dd7c:	0800ddc1 	.word	0x0800ddc1
 800dd80:	0800ddc1 	.word	0x0800ddc1
 800dd84:	0800ddc1 	.word	0x0800ddc1
 800dd88:	0800ddc1 	.word	0x0800ddc1
 800dd8c:	0800ddb9 	.word	0x0800ddb9
 800dd90:	2301      	movs	r3, #1
 800dd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd96:	e1c0      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dd98:	2304      	movs	r3, #4
 800dd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd9e:	e1bc      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dda0:	2308      	movs	r3, #8
 800dda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dda6:	e1b8      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dda8:	2310      	movs	r3, #16
 800ddaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddae:	e1b4      	b.n	800e11a <UART_SetConfig+0x7ae>
 800ddb0:	2320      	movs	r3, #32
 800ddb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddb6:	e1b0      	b.n	800e11a <UART_SetConfig+0x7ae>
 800ddb8:	2340      	movs	r3, #64	; 0x40
 800ddba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddbe:	e1ac      	b.n	800e11a <UART_SetConfig+0x7ae>
 800ddc0:	2380      	movs	r3, #128	; 0x80
 800ddc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddc6:	e1a8      	b.n	800e11a <UART_SetConfig+0x7ae>
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a75      	ldr	r2, [pc, #468]	; (800dfa4 <UART_SetConfig+0x638>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d130      	bne.n	800de34 <UART_SetConfig+0x4c8>
 800ddd2:	4b73      	ldr	r3, [pc, #460]	; (800dfa0 <UART_SetConfig+0x634>)
 800ddd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddd6:	f003 0307 	and.w	r3, r3, #7
 800ddda:	2b05      	cmp	r3, #5
 800dddc:	d826      	bhi.n	800de2c <UART_SetConfig+0x4c0>
 800ddde:	a201      	add	r2, pc, #4	; (adr r2, 800dde4 <UART_SetConfig+0x478>)
 800dde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde4:	0800ddfd 	.word	0x0800ddfd
 800dde8:	0800de05 	.word	0x0800de05
 800ddec:	0800de0d 	.word	0x0800de0d
 800ddf0:	0800de15 	.word	0x0800de15
 800ddf4:	0800de1d 	.word	0x0800de1d
 800ddf8:	0800de25 	.word	0x0800de25
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de02:	e18a      	b.n	800e11a <UART_SetConfig+0x7ae>
 800de04:	2304      	movs	r3, #4
 800de06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de0a:	e186      	b.n	800e11a <UART_SetConfig+0x7ae>
 800de0c:	2308      	movs	r3, #8
 800de0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de12:	e182      	b.n	800e11a <UART_SetConfig+0x7ae>
 800de14:	2310      	movs	r3, #16
 800de16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de1a:	e17e      	b.n	800e11a <UART_SetConfig+0x7ae>
 800de1c:	2320      	movs	r3, #32
 800de1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de22:	e17a      	b.n	800e11a <UART_SetConfig+0x7ae>
 800de24:	2340      	movs	r3, #64	; 0x40
 800de26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de2a:	e176      	b.n	800e11a <UART_SetConfig+0x7ae>
 800de2c:	2380      	movs	r3, #128	; 0x80
 800de2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de32:	e172      	b.n	800e11a <UART_SetConfig+0x7ae>
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4a5b      	ldr	r2, [pc, #364]	; (800dfa8 <UART_SetConfig+0x63c>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d130      	bne.n	800dea0 <UART_SetConfig+0x534>
 800de3e:	4b58      	ldr	r3, [pc, #352]	; (800dfa0 <UART_SetConfig+0x634>)
 800de40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de42:	f003 0307 	and.w	r3, r3, #7
 800de46:	2b05      	cmp	r3, #5
 800de48:	d826      	bhi.n	800de98 <UART_SetConfig+0x52c>
 800de4a:	a201      	add	r2, pc, #4	; (adr r2, 800de50 <UART_SetConfig+0x4e4>)
 800de4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de50:	0800de69 	.word	0x0800de69
 800de54:	0800de71 	.word	0x0800de71
 800de58:	0800de79 	.word	0x0800de79
 800de5c:	0800de81 	.word	0x0800de81
 800de60:	0800de89 	.word	0x0800de89
 800de64:	0800de91 	.word	0x0800de91
 800de68:	2300      	movs	r3, #0
 800de6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de6e:	e154      	b.n	800e11a <UART_SetConfig+0x7ae>
 800de70:	2304      	movs	r3, #4
 800de72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de76:	e150      	b.n	800e11a <UART_SetConfig+0x7ae>
 800de78:	2308      	movs	r3, #8
 800de7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de7e:	e14c      	b.n	800e11a <UART_SetConfig+0x7ae>
 800de80:	2310      	movs	r3, #16
 800de82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de86:	e148      	b.n	800e11a <UART_SetConfig+0x7ae>
 800de88:	2320      	movs	r3, #32
 800de8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de8e:	e144      	b.n	800e11a <UART_SetConfig+0x7ae>
 800de90:	2340      	movs	r3, #64	; 0x40
 800de92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de96:	e140      	b.n	800e11a <UART_SetConfig+0x7ae>
 800de98:	2380      	movs	r3, #128	; 0x80
 800de9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de9e:	e13c      	b.n	800e11a <UART_SetConfig+0x7ae>
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	4a41      	ldr	r2, [pc, #260]	; (800dfac <UART_SetConfig+0x640>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	f040 8082 	bne.w	800dfb0 <UART_SetConfig+0x644>
 800deac:	4b3c      	ldr	r3, [pc, #240]	; (800dfa0 <UART_SetConfig+0x634>)
 800deae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800deb4:	2b28      	cmp	r3, #40	; 0x28
 800deb6:	d86d      	bhi.n	800df94 <UART_SetConfig+0x628>
 800deb8:	a201      	add	r2, pc, #4	; (adr r2, 800dec0 <UART_SetConfig+0x554>)
 800deba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800debe:	bf00      	nop
 800dec0:	0800df65 	.word	0x0800df65
 800dec4:	0800df95 	.word	0x0800df95
 800dec8:	0800df95 	.word	0x0800df95
 800decc:	0800df95 	.word	0x0800df95
 800ded0:	0800df95 	.word	0x0800df95
 800ded4:	0800df95 	.word	0x0800df95
 800ded8:	0800df95 	.word	0x0800df95
 800dedc:	0800df95 	.word	0x0800df95
 800dee0:	0800df6d 	.word	0x0800df6d
 800dee4:	0800df95 	.word	0x0800df95
 800dee8:	0800df95 	.word	0x0800df95
 800deec:	0800df95 	.word	0x0800df95
 800def0:	0800df95 	.word	0x0800df95
 800def4:	0800df95 	.word	0x0800df95
 800def8:	0800df95 	.word	0x0800df95
 800defc:	0800df95 	.word	0x0800df95
 800df00:	0800df75 	.word	0x0800df75
 800df04:	0800df95 	.word	0x0800df95
 800df08:	0800df95 	.word	0x0800df95
 800df0c:	0800df95 	.word	0x0800df95
 800df10:	0800df95 	.word	0x0800df95
 800df14:	0800df95 	.word	0x0800df95
 800df18:	0800df95 	.word	0x0800df95
 800df1c:	0800df95 	.word	0x0800df95
 800df20:	0800df7d 	.word	0x0800df7d
 800df24:	0800df95 	.word	0x0800df95
 800df28:	0800df95 	.word	0x0800df95
 800df2c:	0800df95 	.word	0x0800df95
 800df30:	0800df95 	.word	0x0800df95
 800df34:	0800df95 	.word	0x0800df95
 800df38:	0800df95 	.word	0x0800df95
 800df3c:	0800df95 	.word	0x0800df95
 800df40:	0800df85 	.word	0x0800df85
 800df44:	0800df95 	.word	0x0800df95
 800df48:	0800df95 	.word	0x0800df95
 800df4c:	0800df95 	.word	0x0800df95
 800df50:	0800df95 	.word	0x0800df95
 800df54:	0800df95 	.word	0x0800df95
 800df58:	0800df95 	.word	0x0800df95
 800df5c:	0800df95 	.word	0x0800df95
 800df60:	0800df8d 	.word	0x0800df8d
 800df64:	2301      	movs	r3, #1
 800df66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df6a:	e0d6      	b.n	800e11a <UART_SetConfig+0x7ae>
 800df6c:	2304      	movs	r3, #4
 800df6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df72:	e0d2      	b.n	800e11a <UART_SetConfig+0x7ae>
 800df74:	2308      	movs	r3, #8
 800df76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df7a:	e0ce      	b.n	800e11a <UART_SetConfig+0x7ae>
 800df7c:	2310      	movs	r3, #16
 800df7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df82:	e0ca      	b.n	800e11a <UART_SetConfig+0x7ae>
 800df84:	2320      	movs	r3, #32
 800df86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df8a:	e0c6      	b.n	800e11a <UART_SetConfig+0x7ae>
 800df8c:	2340      	movs	r3, #64	; 0x40
 800df8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df92:	e0c2      	b.n	800e11a <UART_SetConfig+0x7ae>
 800df94:	2380      	movs	r3, #128	; 0x80
 800df96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df9a:	e0be      	b.n	800e11a <UART_SetConfig+0x7ae>
 800df9c:	40011400 	.word	0x40011400
 800dfa0:	58024400 	.word	0x58024400
 800dfa4:	40007800 	.word	0x40007800
 800dfa8:	40007c00 	.word	0x40007c00
 800dfac:	40011800 	.word	0x40011800
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4aad      	ldr	r2, [pc, #692]	; (800e26c <UART_SetConfig+0x900>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d176      	bne.n	800e0a8 <UART_SetConfig+0x73c>
 800dfba:	4bad      	ldr	r3, [pc, #692]	; (800e270 <UART_SetConfig+0x904>)
 800dfbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dfc2:	2b28      	cmp	r3, #40	; 0x28
 800dfc4:	d86c      	bhi.n	800e0a0 <UART_SetConfig+0x734>
 800dfc6:	a201      	add	r2, pc, #4	; (adr r2, 800dfcc <UART_SetConfig+0x660>)
 800dfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfcc:	0800e071 	.word	0x0800e071
 800dfd0:	0800e0a1 	.word	0x0800e0a1
 800dfd4:	0800e0a1 	.word	0x0800e0a1
 800dfd8:	0800e0a1 	.word	0x0800e0a1
 800dfdc:	0800e0a1 	.word	0x0800e0a1
 800dfe0:	0800e0a1 	.word	0x0800e0a1
 800dfe4:	0800e0a1 	.word	0x0800e0a1
 800dfe8:	0800e0a1 	.word	0x0800e0a1
 800dfec:	0800e079 	.word	0x0800e079
 800dff0:	0800e0a1 	.word	0x0800e0a1
 800dff4:	0800e0a1 	.word	0x0800e0a1
 800dff8:	0800e0a1 	.word	0x0800e0a1
 800dffc:	0800e0a1 	.word	0x0800e0a1
 800e000:	0800e0a1 	.word	0x0800e0a1
 800e004:	0800e0a1 	.word	0x0800e0a1
 800e008:	0800e0a1 	.word	0x0800e0a1
 800e00c:	0800e081 	.word	0x0800e081
 800e010:	0800e0a1 	.word	0x0800e0a1
 800e014:	0800e0a1 	.word	0x0800e0a1
 800e018:	0800e0a1 	.word	0x0800e0a1
 800e01c:	0800e0a1 	.word	0x0800e0a1
 800e020:	0800e0a1 	.word	0x0800e0a1
 800e024:	0800e0a1 	.word	0x0800e0a1
 800e028:	0800e0a1 	.word	0x0800e0a1
 800e02c:	0800e089 	.word	0x0800e089
 800e030:	0800e0a1 	.word	0x0800e0a1
 800e034:	0800e0a1 	.word	0x0800e0a1
 800e038:	0800e0a1 	.word	0x0800e0a1
 800e03c:	0800e0a1 	.word	0x0800e0a1
 800e040:	0800e0a1 	.word	0x0800e0a1
 800e044:	0800e0a1 	.word	0x0800e0a1
 800e048:	0800e0a1 	.word	0x0800e0a1
 800e04c:	0800e091 	.word	0x0800e091
 800e050:	0800e0a1 	.word	0x0800e0a1
 800e054:	0800e0a1 	.word	0x0800e0a1
 800e058:	0800e0a1 	.word	0x0800e0a1
 800e05c:	0800e0a1 	.word	0x0800e0a1
 800e060:	0800e0a1 	.word	0x0800e0a1
 800e064:	0800e0a1 	.word	0x0800e0a1
 800e068:	0800e0a1 	.word	0x0800e0a1
 800e06c:	0800e099 	.word	0x0800e099
 800e070:	2301      	movs	r3, #1
 800e072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e076:	e050      	b.n	800e11a <UART_SetConfig+0x7ae>
 800e078:	2304      	movs	r3, #4
 800e07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e07e:	e04c      	b.n	800e11a <UART_SetConfig+0x7ae>
 800e080:	2308      	movs	r3, #8
 800e082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e086:	e048      	b.n	800e11a <UART_SetConfig+0x7ae>
 800e088:	2310      	movs	r3, #16
 800e08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e08e:	e044      	b.n	800e11a <UART_SetConfig+0x7ae>
 800e090:	2320      	movs	r3, #32
 800e092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e096:	e040      	b.n	800e11a <UART_SetConfig+0x7ae>
 800e098:	2340      	movs	r3, #64	; 0x40
 800e09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e09e:	e03c      	b.n	800e11a <UART_SetConfig+0x7ae>
 800e0a0:	2380      	movs	r3, #128	; 0x80
 800e0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0a6:	e038      	b.n	800e11a <UART_SetConfig+0x7ae>
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4a71      	ldr	r2, [pc, #452]	; (800e274 <UART_SetConfig+0x908>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d130      	bne.n	800e114 <UART_SetConfig+0x7a8>
 800e0b2:	4b6f      	ldr	r3, [pc, #444]	; (800e270 <UART_SetConfig+0x904>)
 800e0b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0b6:	f003 0307 	and.w	r3, r3, #7
 800e0ba:	2b05      	cmp	r3, #5
 800e0bc:	d826      	bhi.n	800e10c <UART_SetConfig+0x7a0>
 800e0be:	a201      	add	r2, pc, #4	; (adr r2, 800e0c4 <UART_SetConfig+0x758>)
 800e0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c4:	0800e0dd 	.word	0x0800e0dd
 800e0c8:	0800e0e5 	.word	0x0800e0e5
 800e0cc:	0800e0ed 	.word	0x0800e0ed
 800e0d0:	0800e0f5 	.word	0x0800e0f5
 800e0d4:	0800e0fd 	.word	0x0800e0fd
 800e0d8:	0800e105 	.word	0x0800e105
 800e0dc:	2302      	movs	r3, #2
 800e0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0e2:	e01a      	b.n	800e11a <UART_SetConfig+0x7ae>
 800e0e4:	2304      	movs	r3, #4
 800e0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ea:	e016      	b.n	800e11a <UART_SetConfig+0x7ae>
 800e0ec:	2308      	movs	r3, #8
 800e0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0f2:	e012      	b.n	800e11a <UART_SetConfig+0x7ae>
 800e0f4:	2310      	movs	r3, #16
 800e0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0fa:	e00e      	b.n	800e11a <UART_SetConfig+0x7ae>
 800e0fc:	2320      	movs	r3, #32
 800e0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e102:	e00a      	b.n	800e11a <UART_SetConfig+0x7ae>
 800e104:	2340      	movs	r3, #64	; 0x40
 800e106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e10a:	e006      	b.n	800e11a <UART_SetConfig+0x7ae>
 800e10c:	2380      	movs	r3, #128	; 0x80
 800e10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e112:	e002      	b.n	800e11a <UART_SetConfig+0x7ae>
 800e114:	2380      	movs	r3, #128	; 0x80
 800e116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4a55      	ldr	r2, [pc, #340]	; (800e274 <UART_SetConfig+0x908>)
 800e120:	4293      	cmp	r3, r2
 800e122:	f040 80f8 	bne.w	800e316 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e126:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e12a:	2b20      	cmp	r3, #32
 800e12c:	dc46      	bgt.n	800e1bc <UART_SetConfig+0x850>
 800e12e:	2b02      	cmp	r3, #2
 800e130:	db75      	blt.n	800e21e <UART_SetConfig+0x8b2>
 800e132:	3b02      	subs	r3, #2
 800e134:	2b1e      	cmp	r3, #30
 800e136:	d872      	bhi.n	800e21e <UART_SetConfig+0x8b2>
 800e138:	a201      	add	r2, pc, #4	; (adr r2, 800e140 <UART_SetConfig+0x7d4>)
 800e13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e13e:	bf00      	nop
 800e140:	0800e1c3 	.word	0x0800e1c3
 800e144:	0800e21f 	.word	0x0800e21f
 800e148:	0800e1cb 	.word	0x0800e1cb
 800e14c:	0800e21f 	.word	0x0800e21f
 800e150:	0800e21f 	.word	0x0800e21f
 800e154:	0800e21f 	.word	0x0800e21f
 800e158:	0800e1db 	.word	0x0800e1db
 800e15c:	0800e21f 	.word	0x0800e21f
 800e160:	0800e21f 	.word	0x0800e21f
 800e164:	0800e21f 	.word	0x0800e21f
 800e168:	0800e21f 	.word	0x0800e21f
 800e16c:	0800e21f 	.word	0x0800e21f
 800e170:	0800e21f 	.word	0x0800e21f
 800e174:	0800e21f 	.word	0x0800e21f
 800e178:	0800e1eb 	.word	0x0800e1eb
 800e17c:	0800e21f 	.word	0x0800e21f
 800e180:	0800e21f 	.word	0x0800e21f
 800e184:	0800e21f 	.word	0x0800e21f
 800e188:	0800e21f 	.word	0x0800e21f
 800e18c:	0800e21f 	.word	0x0800e21f
 800e190:	0800e21f 	.word	0x0800e21f
 800e194:	0800e21f 	.word	0x0800e21f
 800e198:	0800e21f 	.word	0x0800e21f
 800e19c:	0800e21f 	.word	0x0800e21f
 800e1a0:	0800e21f 	.word	0x0800e21f
 800e1a4:	0800e21f 	.word	0x0800e21f
 800e1a8:	0800e21f 	.word	0x0800e21f
 800e1ac:	0800e21f 	.word	0x0800e21f
 800e1b0:	0800e21f 	.word	0x0800e21f
 800e1b4:	0800e21f 	.word	0x0800e21f
 800e1b8:	0800e211 	.word	0x0800e211
 800e1bc:	2b40      	cmp	r3, #64	; 0x40
 800e1be:	d02a      	beq.n	800e216 <UART_SetConfig+0x8aa>
 800e1c0:	e02d      	b.n	800e21e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e1c2:	f7fc fdfd 	bl	800adc0 <HAL_RCCEx_GetD3PCLK1Freq>
 800e1c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1c8:	e02f      	b.n	800e22a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7fc fe0c 	bl	800adec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1d8:	e027      	b.n	800e22a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1da:	f107 0318 	add.w	r3, r7, #24
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fc ff58 	bl	800b094 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1e4:	69fb      	ldr	r3, [r7, #28]
 800e1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1e8:	e01f      	b.n	800e22a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1ea:	4b21      	ldr	r3, [pc, #132]	; (800e270 <UART_SetConfig+0x904>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f003 0320 	and.w	r3, r3, #32
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d009      	beq.n	800e20a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1f6:	4b1e      	ldr	r3, [pc, #120]	; (800e270 <UART_SetConfig+0x904>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	08db      	lsrs	r3, r3, #3
 800e1fc:	f003 0303 	and.w	r3, r3, #3
 800e200:	4a1d      	ldr	r2, [pc, #116]	; (800e278 <UART_SetConfig+0x90c>)
 800e202:	fa22 f303 	lsr.w	r3, r2, r3
 800e206:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e208:	e00f      	b.n	800e22a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e20a:	4b1b      	ldr	r3, [pc, #108]	; (800e278 <UART_SetConfig+0x90c>)
 800e20c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e20e:	e00c      	b.n	800e22a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e210:	4b1a      	ldr	r3, [pc, #104]	; (800e27c <UART_SetConfig+0x910>)
 800e212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e214:	e009      	b.n	800e22a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e21a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e21c:	e005      	b.n	800e22a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e21e:	2300      	movs	r3, #0
 800e220:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e222:	2301      	movs	r3, #1
 800e224:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e228:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f000 81ee 	beq.w	800e60e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e236:	4a12      	ldr	r2, [pc, #72]	; (800e280 <UART_SetConfig+0x914>)
 800e238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e23c:	461a      	mov	r2, r3
 800e23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e240:	fbb3 f3f2 	udiv	r3, r3, r2
 800e244:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	685a      	ldr	r2, [r3, #4]
 800e24a:	4613      	mov	r3, r2
 800e24c:	005b      	lsls	r3, r3, #1
 800e24e:	4413      	add	r3, r2
 800e250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e252:	429a      	cmp	r2, r3
 800e254:	d305      	bcc.n	800e262 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e25c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e25e:	429a      	cmp	r2, r3
 800e260:	d910      	bls.n	800e284 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e262:	2301      	movs	r3, #1
 800e264:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e268:	e1d1      	b.n	800e60e <UART_SetConfig+0xca2>
 800e26a:	bf00      	nop
 800e26c:	40011c00 	.word	0x40011c00
 800e270:	58024400 	.word	0x58024400
 800e274:	58000c00 	.word	0x58000c00
 800e278:	03d09000 	.word	0x03d09000
 800e27c:	003d0900 	.word	0x003d0900
 800e280:	0800f848 	.word	0x0800f848
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e286:	2200      	movs	r2, #0
 800e288:	60bb      	str	r3, [r7, #8]
 800e28a:	60fa      	str	r2, [r7, #12]
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e290:	4ac0      	ldr	r2, [pc, #768]	; (800e594 <UART_SetConfig+0xc28>)
 800e292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e296:	b29b      	uxth	r3, r3
 800e298:	2200      	movs	r2, #0
 800e29a:	603b      	str	r3, [r7, #0]
 800e29c:	607a      	str	r2, [r7, #4]
 800e29e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e2a6:	f7f2 f83b 	bl	8000320 <__aeabi_uldivmod>
 800e2aa:	4602      	mov	r2, r0
 800e2ac:	460b      	mov	r3, r1
 800e2ae:	4610      	mov	r0, r2
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	f04f 0200 	mov.w	r2, #0
 800e2b6:	f04f 0300 	mov.w	r3, #0
 800e2ba:	020b      	lsls	r3, r1, #8
 800e2bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e2c0:	0202      	lsls	r2, r0, #8
 800e2c2:	6979      	ldr	r1, [r7, #20]
 800e2c4:	6849      	ldr	r1, [r1, #4]
 800e2c6:	0849      	lsrs	r1, r1, #1
 800e2c8:	2000      	movs	r0, #0
 800e2ca:	460c      	mov	r4, r1
 800e2cc:	4605      	mov	r5, r0
 800e2ce:	eb12 0804 	adds.w	r8, r2, r4
 800e2d2:	eb43 0905 	adc.w	r9, r3, r5
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	469a      	mov	sl, r3
 800e2de:	4693      	mov	fp, r2
 800e2e0:	4652      	mov	r2, sl
 800e2e2:	465b      	mov	r3, fp
 800e2e4:	4640      	mov	r0, r8
 800e2e6:	4649      	mov	r1, r9
 800e2e8:	f7f2 f81a 	bl	8000320 <__aeabi_uldivmod>
 800e2ec:	4602      	mov	r2, r0
 800e2ee:	460b      	mov	r3, r1
 800e2f0:	4613      	mov	r3, r2
 800e2f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e2fa:	d308      	bcc.n	800e30e <UART_SetConfig+0x9a2>
 800e2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e302:	d204      	bcs.n	800e30e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e30a:	60da      	str	r2, [r3, #12]
 800e30c:	e17f      	b.n	800e60e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e30e:	2301      	movs	r3, #1
 800e310:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e314:	e17b      	b.n	800e60e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	69db      	ldr	r3, [r3, #28]
 800e31a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e31e:	f040 80bd 	bne.w	800e49c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e322:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e326:	2b20      	cmp	r3, #32
 800e328:	dc48      	bgt.n	800e3bc <UART_SetConfig+0xa50>
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	db7b      	blt.n	800e426 <UART_SetConfig+0xaba>
 800e32e:	2b20      	cmp	r3, #32
 800e330:	d879      	bhi.n	800e426 <UART_SetConfig+0xaba>
 800e332:	a201      	add	r2, pc, #4	; (adr r2, 800e338 <UART_SetConfig+0x9cc>)
 800e334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e338:	0800e3c3 	.word	0x0800e3c3
 800e33c:	0800e3cb 	.word	0x0800e3cb
 800e340:	0800e427 	.word	0x0800e427
 800e344:	0800e427 	.word	0x0800e427
 800e348:	0800e3d3 	.word	0x0800e3d3
 800e34c:	0800e427 	.word	0x0800e427
 800e350:	0800e427 	.word	0x0800e427
 800e354:	0800e427 	.word	0x0800e427
 800e358:	0800e3e3 	.word	0x0800e3e3
 800e35c:	0800e427 	.word	0x0800e427
 800e360:	0800e427 	.word	0x0800e427
 800e364:	0800e427 	.word	0x0800e427
 800e368:	0800e427 	.word	0x0800e427
 800e36c:	0800e427 	.word	0x0800e427
 800e370:	0800e427 	.word	0x0800e427
 800e374:	0800e427 	.word	0x0800e427
 800e378:	0800e3f3 	.word	0x0800e3f3
 800e37c:	0800e427 	.word	0x0800e427
 800e380:	0800e427 	.word	0x0800e427
 800e384:	0800e427 	.word	0x0800e427
 800e388:	0800e427 	.word	0x0800e427
 800e38c:	0800e427 	.word	0x0800e427
 800e390:	0800e427 	.word	0x0800e427
 800e394:	0800e427 	.word	0x0800e427
 800e398:	0800e427 	.word	0x0800e427
 800e39c:	0800e427 	.word	0x0800e427
 800e3a0:	0800e427 	.word	0x0800e427
 800e3a4:	0800e427 	.word	0x0800e427
 800e3a8:	0800e427 	.word	0x0800e427
 800e3ac:	0800e427 	.word	0x0800e427
 800e3b0:	0800e427 	.word	0x0800e427
 800e3b4:	0800e427 	.word	0x0800e427
 800e3b8:	0800e419 	.word	0x0800e419
 800e3bc:	2b40      	cmp	r3, #64	; 0x40
 800e3be:	d02e      	beq.n	800e41e <UART_SetConfig+0xab2>
 800e3c0:	e031      	b.n	800e426 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3c2:	f7fb fb31 	bl	8009a28 <HAL_RCC_GetPCLK1Freq>
 800e3c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3c8:	e033      	b.n	800e432 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e3ca:	f7fb fb43 	bl	8009a54 <HAL_RCC_GetPCLK2Freq>
 800e3ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3d0:	e02f      	b.n	800e432 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fc fd08 	bl	800adec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3e0:	e027      	b.n	800e432 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3e2:	f107 0318 	add.w	r3, r7, #24
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7fc fe54 	bl	800b094 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3f0:	e01f      	b.n	800e432 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3f2:	4b69      	ldr	r3, [pc, #420]	; (800e598 <UART_SetConfig+0xc2c>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f003 0320 	and.w	r3, r3, #32
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d009      	beq.n	800e412 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e3fe:	4b66      	ldr	r3, [pc, #408]	; (800e598 <UART_SetConfig+0xc2c>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	08db      	lsrs	r3, r3, #3
 800e404:	f003 0303 	and.w	r3, r3, #3
 800e408:	4a64      	ldr	r2, [pc, #400]	; (800e59c <UART_SetConfig+0xc30>)
 800e40a:	fa22 f303 	lsr.w	r3, r2, r3
 800e40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e410:	e00f      	b.n	800e432 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e412:	4b62      	ldr	r3, [pc, #392]	; (800e59c <UART_SetConfig+0xc30>)
 800e414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e416:	e00c      	b.n	800e432 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e418:	4b61      	ldr	r3, [pc, #388]	; (800e5a0 <UART_SetConfig+0xc34>)
 800e41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e41c:	e009      	b.n	800e432 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e41e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e424:	e005      	b.n	800e432 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e426:	2300      	movs	r3, #0
 800e428:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e42a:	2301      	movs	r3, #1
 800e42c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e430:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e434:	2b00      	cmp	r3, #0
 800e436:	f000 80ea 	beq.w	800e60e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e43e:	4a55      	ldr	r2, [pc, #340]	; (800e594 <UART_SetConfig+0xc28>)
 800e440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e444:	461a      	mov	r2, r3
 800e446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e448:	fbb3 f3f2 	udiv	r3, r3, r2
 800e44c:	005a      	lsls	r2, r3, #1
 800e44e:	697b      	ldr	r3, [r7, #20]
 800e450:	685b      	ldr	r3, [r3, #4]
 800e452:	085b      	lsrs	r3, r3, #1
 800e454:	441a      	add	r2, r3
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e45e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e462:	2b0f      	cmp	r3, #15
 800e464:	d916      	bls.n	800e494 <UART_SetConfig+0xb28>
 800e466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e46c:	d212      	bcs.n	800e494 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e470:	b29b      	uxth	r3, r3
 800e472:	f023 030f 	bic.w	r3, r3, #15
 800e476:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47a:	085b      	lsrs	r3, r3, #1
 800e47c:	b29b      	uxth	r3, r3
 800e47e:	f003 0307 	and.w	r3, r3, #7
 800e482:	b29a      	uxth	r2, r3
 800e484:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e486:	4313      	orrs	r3, r2
 800e488:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e490:	60da      	str	r2, [r3, #12]
 800e492:	e0bc      	b.n	800e60e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e494:	2301      	movs	r3, #1
 800e496:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e49a:	e0b8      	b.n	800e60e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e49c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e4a0:	2b20      	cmp	r3, #32
 800e4a2:	dc4b      	bgt.n	800e53c <UART_SetConfig+0xbd0>
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	f2c0 8087 	blt.w	800e5b8 <UART_SetConfig+0xc4c>
 800e4aa:	2b20      	cmp	r3, #32
 800e4ac:	f200 8084 	bhi.w	800e5b8 <UART_SetConfig+0xc4c>
 800e4b0:	a201      	add	r2, pc, #4	; (adr r2, 800e4b8 <UART_SetConfig+0xb4c>)
 800e4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4b6:	bf00      	nop
 800e4b8:	0800e543 	.word	0x0800e543
 800e4bc:	0800e54b 	.word	0x0800e54b
 800e4c0:	0800e5b9 	.word	0x0800e5b9
 800e4c4:	0800e5b9 	.word	0x0800e5b9
 800e4c8:	0800e553 	.word	0x0800e553
 800e4cc:	0800e5b9 	.word	0x0800e5b9
 800e4d0:	0800e5b9 	.word	0x0800e5b9
 800e4d4:	0800e5b9 	.word	0x0800e5b9
 800e4d8:	0800e563 	.word	0x0800e563
 800e4dc:	0800e5b9 	.word	0x0800e5b9
 800e4e0:	0800e5b9 	.word	0x0800e5b9
 800e4e4:	0800e5b9 	.word	0x0800e5b9
 800e4e8:	0800e5b9 	.word	0x0800e5b9
 800e4ec:	0800e5b9 	.word	0x0800e5b9
 800e4f0:	0800e5b9 	.word	0x0800e5b9
 800e4f4:	0800e5b9 	.word	0x0800e5b9
 800e4f8:	0800e573 	.word	0x0800e573
 800e4fc:	0800e5b9 	.word	0x0800e5b9
 800e500:	0800e5b9 	.word	0x0800e5b9
 800e504:	0800e5b9 	.word	0x0800e5b9
 800e508:	0800e5b9 	.word	0x0800e5b9
 800e50c:	0800e5b9 	.word	0x0800e5b9
 800e510:	0800e5b9 	.word	0x0800e5b9
 800e514:	0800e5b9 	.word	0x0800e5b9
 800e518:	0800e5b9 	.word	0x0800e5b9
 800e51c:	0800e5b9 	.word	0x0800e5b9
 800e520:	0800e5b9 	.word	0x0800e5b9
 800e524:	0800e5b9 	.word	0x0800e5b9
 800e528:	0800e5b9 	.word	0x0800e5b9
 800e52c:	0800e5b9 	.word	0x0800e5b9
 800e530:	0800e5b9 	.word	0x0800e5b9
 800e534:	0800e5b9 	.word	0x0800e5b9
 800e538:	0800e5ab 	.word	0x0800e5ab
 800e53c:	2b40      	cmp	r3, #64	; 0x40
 800e53e:	d037      	beq.n	800e5b0 <UART_SetConfig+0xc44>
 800e540:	e03a      	b.n	800e5b8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e542:	f7fb fa71 	bl	8009a28 <HAL_RCC_GetPCLK1Freq>
 800e546:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e548:	e03c      	b.n	800e5c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e54a:	f7fb fa83 	bl	8009a54 <HAL_RCC_GetPCLK2Freq>
 800e54e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e550:	e038      	b.n	800e5c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e556:	4618      	mov	r0, r3
 800e558:	f7fc fc48 	bl	800adec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e560:	e030      	b.n	800e5c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e562:	f107 0318 	add.w	r3, r7, #24
 800e566:	4618      	mov	r0, r3
 800e568:	f7fc fd94 	bl	800b094 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e56c:	69fb      	ldr	r3, [r7, #28]
 800e56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e570:	e028      	b.n	800e5c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e572:	4b09      	ldr	r3, [pc, #36]	; (800e598 <UART_SetConfig+0xc2c>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f003 0320 	and.w	r3, r3, #32
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d012      	beq.n	800e5a4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e57e:	4b06      	ldr	r3, [pc, #24]	; (800e598 <UART_SetConfig+0xc2c>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	08db      	lsrs	r3, r3, #3
 800e584:	f003 0303 	and.w	r3, r3, #3
 800e588:	4a04      	ldr	r2, [pc, #16]	; (800e59c <UART_SetConfig+0xc30>)
 800e58a:	fa22 f303 	lsr.w	r3, r2, r3
 800e58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e590:	e018      	b.n	800e5c4 <UART_SetConfig+0xc58>
 800e592:	bf00      	nop
 800e594:	0800f848 	.word	0x0800f848
 800e598:	58024400 	.word	0x58024400
 800e59c:	03d09000 	.word	0x03d09000
 800e5a0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e5a4:	4b24      	ldr	r3, [pc, #144]	; (800e638 <UART_SetConfig+0xccc>)
 800e5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5a8:	e00c      	b.n	800e5c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e5aa:	4b24      	ldr	r3, [pc, #144]	; (800e63c <UART_SetConfig+0xcd0>)
 800e5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5ae:	e009      	b.n	800e5c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5b6:	e005      	b.n	800e5c4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e5bc:	2301      	movs	r3, #1
 800e5be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e5c2:	bf00      	nop
    }

    if (pclk != 0U)
 800e5c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d021      	beq.n	800e60e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ce:	4a1c      	ldr	r2, [pc, #112]	; (800e640 <UART_SetConfig+0xcd4>)
 800e5d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5d8:	fbb3 f2f2 	udiv	r2, r3, r2
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	685b      	ldr	r3, [r3, #4]
 800e5e0:	085b      	lsrs	r3, r3, #1
 800e5e2:	441a      	add	r2, r3
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	685b      	ldr	r3, [r3, #4]
 800e5e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5ec:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f0:	2b0f      	cmp	r3, #15
 800e5f2:	d909      	bls.n	800e608 <UART_SetConfig+0xc9c>
 800e5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5fa:	d205      	bcs.n	800e608 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fe:	b29a      	uxth	r2, r3
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	60da      	str	r2, [r3, #12]
 800e606:	e002      	b.n	800e60e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e608:	2301      	movs	r3, #1
 800e60a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	2201      	movs	r2, #1
 800e612:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	2201      	movs	r2, #1
 800e61a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	2200      	movs	r2, #0
 800e622:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	2200      	movs	r2, #0
 800e628:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e62a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3748      	adds	r7, #72	; 0x48
 800e632:	46bd      	mov	sp, r7
 800e634:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e638:	03d09000 	.word	0x03d09000
 800e63c:	003d0900 	.word	0x003d0900
 800e640:	0800f848 	.word	0x0800f848

0800e644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e644:	b480      	push	{r7}
 800e646:	b083      	sub	sp, #12
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e650:	f003 0301 	and.w	r3, r3, #1
 800e654:	2b00      	cmp	r3, #0
 800e656:	d00a      	beq.n	800e66e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	685b      	ldr	r3, [r3, #4]
 800e65e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	430a      	orrs	r2, r1
 800e66c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e672:	f003 0302 	and.w	r3, r3, #2
 800e676:	2b00      	cmp	r3, #0
 800e678:	d00a      	beq.n	800e690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	685b      	ldr	r3, [r3, #4]
 800e680:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	430a      	orrs	r2, r1
 800e68e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e694:	f003 0304 	and.w	r3, r3, #4
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d00a      	beq.n	800e6b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	685b      	ldr	r3, [r3, #4]
 800e6a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	430a      	orrs	r2, r1
 800e6b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6b6:	f003 0308 	and.w	r3, r3, #8
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00a      	beq.n	800e6d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	430a      	orrs	r2, r1
 800e6d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6d8:	f003 0310 	and.w	r3, r3, #16
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d00a      	beq.n	800e6f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	689b      	ldr	r3, [r3, #8]
 800e6e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	430a      	orrs	r2, r1
 800e6f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6fa:	f003 0320 	and.w	r3, r3, #32
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d00a      	beq.n	800e718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	689b      	ldr	r3, [r3, #8]
 800e708:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	430a      	orrs	r2, r1
 800e716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e71c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e720:	2b00      	cmp	r3, #0
 800e722:	d01a      	beq.n	800e75a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	430a      	orrs	r2, r1
 800e738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e73e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e742:	d10a      	bne.n	800e75a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	430a      	orrs	r2, r1
 800e758:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e75e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e762:	2b00      	cmp	r3, #0
 800e764:	d00a      	beq.n	800e77c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	430a      	orrs	r2, r1
 800e77a:	605a      	str	r2, [r3, #4]
  }
}
 800e77c:	bf00      	nop
 800e77e:	370c      	adds	r7, #12
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr

0800e788 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b098      	sub	sp, #96	; 0x60
 800e78c:	af02      	add	r7, sp, #8
 800e78e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2200      	movs	r2, #0
 800e794:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e798:	f7f6 fdd0 	bl	800533c <HAL_GetTick>
 800e79c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f003 0308 	and.w	r3, r3, #8
 800e7a8:	2b08      	cmp	r3, #8
 800e7aa:	d12f      	bne.n	800e80c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e7ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e7b0:	9300      	str	r3, [sp, #0]
 800e7b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f000 f88e 	bl	800e8dc <UART_WaitOnFlagUntilTimeout>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d022      	beq.n	800e80c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ce:	e853 3f00 	ldrex	r3, [r3]
 800e7d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7da:	653b      	str	r3, [r7, #80]	; 0x50
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7e4:	647b      	str	r3, [r7, #68]	; 0x44
 800e7e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e7ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7ec:	e841 2300 	strex	r3, r2, [r1]
 800e7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e7f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d1e6      	bne.n	800e7c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2220      	movs	r2, #32
 800e7fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2200      	movs	r2, #0
 800e804:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e808:	2303      	movs	r3, #3
 800e80a:	e063      	b.n	800e8d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f003 0304 	and.w	r3, r3, #4
 800e816:	2b04      	cmp	r3, #4
 800e818:	d149      	bne.n	800e8ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e81a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e81e:	9300      	str	r3, [sp, #0]
 800e820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e822:	2200      	movs	r2, #0
 800e824:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f000 f857 	bl	800e8dc <UART_WaitOnFlagUntilTimeout>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d03c      	beq.n	800e8ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83c:	e853 3f00 	ldrex	r3, [r3]
 800e840:	623b      	str	r3, [r7, #32]
   return(result);
 800e842:	6a3b      	ldr	r3, [r7, #32]
 800e844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e848:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	461a      	mov	r2, r3
 800e850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e852:	633b      	str	r3, [r7, #48]	; 0x30
 800e854:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e85a:	e841 2300 	strex	r3, r2, [r1]
 800e85e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e862:	2b00      	cmp	r3, #0
 800e864:	d1e6      	bne.n	800e834 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	3308      	adds	r3, #8
 800e86c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	e853 3f00 	ldrex	r3, [r3]
 800e874:	60fb      	str	r3, [r7, #12]
   return(result);
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	f023 0301 	bic.w	r3, r3, #1
 800e87c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	3308      	adds	r3, #8
 800e884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e886:	61fa      	str	r2, [r7, #28]
 800e888:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e88a:	69b9      	ldr	r1, [r7, #24]
 800e88c:	69fa      	ldr	r2, [r7, #28]
 800e88e:	e841 2300 	strex	r3, r2, [r1]
 800e892:	617b      	str	r3, [r7, #20]
   return(result);
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d1e5      	bne.n	800e866 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2220      	movs	r2, #32
 800e89e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e8aa:	2303      	movs	r3, #3
 800e8ac:	e012      	b.n	800e8d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2220      	movs	r2, #32
 800e8b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2220      	movs	r2, #32
 800e8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e8d2:	2300      	movs	r3, #0
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3758      	adds	r7, #88	; 0x58
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	60b9      	str	r1, [r7, #8]
 800e8e6:	603b      	str	r3, [r7, #0]
 800e8e8:	4613      	mov	r3, r2
 800e8ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e8ec:	e049      	b.n	800e982 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e8ee:	69bb      	ldr	r3, [r7, #24]
 800e8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8f4:	d045      	beq.n	800e982 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e8f6:	f7f6 fd21 	bl	800533c <HAL_GetTick>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	1ad3      	subs	r3, r2, r3
 800e900:	69ba      	ldr	r2, [r7, #24]
 800e902:	429a      	cmp	r2, r3
 800e904:	d302      	bcc.n	800e90c <UART_WaitOnFlagUntilTimeout+0x30>
 800e906:	69bb      	ldr	r3, [r7, #24]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d101      	bne.n	800e910 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e90c:	2303      	movs	r3, #3
 800e90e:	e048      	b.n	800e9a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	f003 0304 	and.w	r3, r3, #4
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d031      	beq.n	800e982 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	69db      	ldr	r3, [r3, #28]
 800e924:	f003 0308 	and.w	r3, r3, #8
 800e928:	2b08      	cmp	r3, #8
 800e92a:	d110      	bne.n	800e94e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	2208      	movs	r2, #8
 800e932:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e934:	68f8      	ldr	r0, [r7, #12]
 800e936:	f000 f921 	bl	800eb7c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2208      	movs	r2, #8
 800e93e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	2200      	movs	r2, #0
 800e946:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800e94a:	2301      	movs	r3, #1
 800e94c:	e029      	b.n	800e9a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	69db      	ldr	r3, [r3, #28]
 800e954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e95c:	d111      	bne.n	800e982 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e966:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e968:	68f8      	ldr	r0, [r7, #12]
 800e96a:	f000 f907 	bl	800eb7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2220      	movs	r2, #32
 800e972:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	2200      	movs	r2, #0
 800e97a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e97e:	2303      	movs	r3, #3
 800e980:	e00f      	b.n	800e9a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	69da      	ldr	r2, [r3, #28]
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	4013      	ands	r3, r2
 800e98c:	68ba      	ldr	r2, [r7, #8]
 800e98e:	429a      	cmp	r2, r3
 800e990:	bf0c      	ite	eq
 800e992:	2301      	moveq	r3, #1
 800e994:	2300      	movne	r3, #0
 800e996:	b2db      	uxtb	r3, r3
 800e998:	461a      	mov	r2, r3
 800e99a:	79fb      	ldrb	r3, [r7, #7]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d0a6      	beq.n	800e8ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e9a0:	2300      	movs	r3, #0
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3710      	adds	r7, #16
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
	...

0800e9ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b096      	sub	sp, #88	; 0x58
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	60b9      	str	r1, [r7, #8]
 800e9b6:	4613      	mov	r3, r2
 800e9b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	68ba      	ldr	r2, [r7, #8]
 800e9be:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	88fa      	ldrh	r2, [r7, #6]
 800e9c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2222      	movs	r2, #34	; 0x22
 800e9d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d02d      	beq.n	800ea3e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9e8:	4a40      	ldr	r2, [pc, #256]	; (800eaec <UART_Start_Receive_DMA+0x140>)
 800e9ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9f2:	4a3f      	ldr	r2, [pc, #252]	; (800eaf0 <UART_Start_Receive_DMA+0x144>)
 800e9f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9fc:	4a3d      	ldr	r2, [pc, #244]	; (800eaf4 <UART_Start_Receive_DMA+0x148>)
 800e9fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea06:	2200      	movs	r2, #0
 800ea08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	3324      	adds	r3, #36	; 0x24
 800ea16:	4619      	mov	r1, r3
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea1c:	461a      	mov	r2, r3
 800ea1e:	88fb      	ldrh	r3, [r7, #6]
 800ea20:	f7f7 faea 	bl	8005ff8 <HAL_DMA_Start_IT>
 800ea24:	4603      	mov	r3, r0
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d009      	beq.n	800ea3e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2210      	movs	r2, #16
 800ea2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2220      	movs	r2, #32
 800ea36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	e051      	b.n	800eae2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	691b      	ldr	r3, [r3, #16]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d018      	beq.n	800ea78 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea4e:	e853 3f00 	ldrex	r3, [r3]
 800ea52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea5a:	657b      	str	r3, [r7, #84]	; 0x54
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	461a      	mov	r2, r3
 800ea62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea64:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea66:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea6c:	e841 2300 	strex	r3, r2, [r1]
 800ea70:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ea72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d1e6      	bne.n	800ea46 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	3308      	adds	r3, #8
 800ea7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea82:	e853 3f00 	ldrex	r3, [r3]
 800ea86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8a:	f043 0301 	orr.w	r3, r3, #1
 800ea8e:	653b      	str	r3, [r7, #80]	; 0x50
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	3308      	adds	r3, #8
 800ea96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea98:	637a      	str	r2, [r7, #52]	; 0x34
 800ea9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eaa0:	e841 2300 	strex	r3, r2, [r1]
 800eaa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d1e5      	bne.n	800ea78 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	3308      	adds	r3, #8
 800eab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	e853 3f00 	ldrex	r3, [r3]
 800eaba:	613b      	str	r3, [r7, #16]
   return(result);
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	3308      	adds	r3, #8
 800eaca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eacc:	623a      	str	r2, [r7, #32]
 800eace:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ead0:	69f9      	ldr	r1, [r7, #28]
 800ead2:	6a3a      	ldr	r2, [r7, #32]
 800ead4:	e841 2300 	strex	r3, r2, [r1]
 800ead8:	61bb      	str	r3, [r7, #24]
   return(result);
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d1e5      	bne.n	800eaac <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800eae0:	2300      	movs	r3, #0
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3758      	adds	r7, #88	; 0x58
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	0800ecfb 	.word	0x0800ecfb
 800eaf0:	0800ee23 	.word	0x0800ee23
 800eaf4:	0800ee61 	.word	0x0800ee61

0800eaf8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b08f      	sub	sp, #60	; 0x3c
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb06:	6a3b      	ldr	r3, [r7, #32]
 800eb08:	e853 3f00 	ldrex	r3, [r3]
 800eb0c:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb0e:	69fb      	ldr	r3, [r7, #28]
 800eb10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800eb14:	637b      	str	r3, [r7, #52]	; 0x34
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb20:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb26:	e841 2300 	strex	r3, r2, [r1]
 800eb2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d1e6      	bne.n	800eb00 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	3308      	adds	r3, #8
 800eb38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	e853 3f00 	ldrex	r3, [r3]
 800eb40:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800eb48:	633b      	str	r3, [r7, #48]	; 0x30
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	3308      	adds	r3, #8
 800eb50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb52:	61ba      	str	r2, [r7, #24]
 800eb54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb56:	6979      	ldr	r1, [r7, #20]
 800eb58:	69ba      	ldr	r2, [r7, #24]
 800eb5a:	e841 2300 	strex	r3, r2, [r1]
 800eb5e:	613b      	str	r3, [r7, #16]
   return(result);
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d1e5      	bne.n	800eb32 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2220      	movs	r2, #32
 800eb6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800eb6e:	bf00      	nop
 800eb70:	373c      	adds	r7, #60	; 0x3c
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr
	...

0800eb7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b095      	sub	sp, #84	; 0x54
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb8c:	e853 3f00 	ldrex	r3, [r3]
 800eb90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eb98:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	461a      	mov	r2, r3
 800eba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eba2:	643b      	str	r3, [r7, #64]	; 0x40
 800eba4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eba6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eba8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ebaa:	e841 2300 	strex	r3, r2, [r1]
 800ebae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ebb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d1e6      	bne.n	800eb84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	3308      	adds	r3, #8
 800ebbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebbe:	6a3b      	ldr	r3, [r7, #32]
 800ebc0:	e853 3f00 	ldrex	r3, [r3]
 800ebc4:	61fb      	str	r3, [r7, #28]
   return(result);
 800ebc6:	69fa      	ldr	r2, [r7, #28]
 800ebc8:	4b1e      	ldr	r3, [pc, #120]	; (800ec44 <UART_EndRxTransfer+0xc8>)
 800ebca:	4013      	ands	r3, r2
 800ebcc:	64bb      	str	r3, [r7, #72]	; 0x48
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	3308      	adds	r3, #8
 800ebd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ebd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ebdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebde:	e841 2300 	strex	r3, r2, [r1]
 800ebe2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ebe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d1e5      	bne.n	800ebb6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	d118      	bne.n	800ec24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	e853 3f00 	ldrex	r3, [r3]
 800ebfe:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	f023 0310 	bic.w	r3, r3, #16
 800ec06:	647b      	str	r3, [r7, #68]	; 0x44
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	461a      	mov	r2, r3
 800ec0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec10:	61bb      	str	r3, [r7, #24]
 800ec12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec14:	6979      	ldr	r1, [r7, #20]
 800ec16:	69ba      	ldr	r2, [r7, #24]
 800ec18:	e841 2300 	strex	r3, r2, [r1]
 800ec1c:	613b      	str	r3, [r7, #16]
   return(result);
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d1e6      	bne.n	800ebf2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2220      	movs	r2, #32
 800ec28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2200      	movs	r2, #0
 800ec36:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ec38:	bf00      	nop
 800ec3a:	3754      	adds	r7, #84	; 0x54
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr
 800ec44:	effffffe 	.word	0xeffffffe

0800ec48 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b090      	sub	sp, #64	; 0x40
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec54:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	69db      	ldr	r3, [r3, #28]
 800ec5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec5e:	d037      	beq.n	800ecd0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800ec60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec62:	2200      	movs	r2, #0
 800ec64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ec68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	3308      	adds	r3, #8
 800ec6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec72:	e853 3f00 	ldrex	r3, [r3]
 800ec76:	623b      	str	r3, [r7, #32]
   return(result);
 800ec78:	6a3b      	ldr	r3, [r7, #32]
 800ec7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	3308      	adds	r3, #8
 800ec86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec88:	633a      	str	r2, [r7, #48]	; 0x30
 800ec8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec90:	e841 2300 	strex	r3, r2, [r1]
 800ec94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d1e5      	bne.n	800ec68 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ec9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	e853 3f00 	ldrex	r3, [r3]
 800eca8:	60fb      	str	r3, [r7, #12]
   return(result);
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecb0:	637b      	str	r3, [r7, #52]	; 0x34
 800ecb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecba:	61fb      	str	r3, [r7, #28]
 800ecbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecbe:	69b9      	ldr	r1, [r7, #24]
 800ecc0:	69fa      	ldr	r2, [r7, #28]
 800ecc2:	e841 2300 	strex	r3, r2, [r1]
 800ecc6:	617b      	str	r3, [r7, #20]
   return(result);
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d1e6      	bne.n	800ec9c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ecce:	e002      	b.n	800ecd6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800ecd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ecd2:	f7f4 fbd9 	bl	8003488 <HAL_UART_TxCpltCallback>
}
 800ecd6:	bf00      	nop
 800ecd8:	3740      	adds	r7, #64	; 0x40
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}

0800ecde <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ecde:	b580      	push	{r7, lr}
 800ece0:	b084      	sub	sp, #16
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ecec:	68f8      	ldr	r0, [r7, #12]
 800ecee:	f7fe fe13 	bl	800d918 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ecf2:	bf00      	nop
 800ecf4:	3710      	adds	r7, #16
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}

0800ecfa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ecfa:	b580      	push	{r7, lr}
 800ecfc:	b09c      	sub	sp, #112	; 0x70
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed06:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	69db      	ldr	r3, [r3, #28]
 800ed0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed10:	d071      	beq.n	800edf6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ed12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed14:	2200      	movs	r2, #0
 800ed16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ed1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed22:	e853 3f00 	ldrex	r3, [r3]
 800ed26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ed28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ed2e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	461a      	mov	r2, r3
 800ed36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed38:	65bb      	str	r3, [r7, #88]	; 0x58
 800ed3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ed3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed40:	e841 2300 	strex	r3, r2, [r1]
 800ed44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ed46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d1e6      	bne.n	800ed1a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	3308      	adds	r3, #8
 800ed52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed56:	e853 3f00 	ldrex	r3, [r3]
 800ed5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ed5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed5e:	f023 0301 	bic.w	r3, r3, #1
 800ed62:	667b      	str	r3, [r7, #100]	; 0x64
 800ed64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	3308      	adds	r3, #8
 800ed6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ed6c:	647a      	str	r2, [r7, #68]	; 0x44
 800ed6e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed74:	e841 2300 	strex	r3, r2, [r1]
 800ed78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ed7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d1e5      	bne.n	800ed4c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	3308      	adds	r3, #8
 800ed86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8a:	e853 3f00 	ldrex	r3, [r3]
 800ed8e:	623b      	str	r3, [r7, #32]
   return(result);
 800ed90:	6a3b      	ldr	r3, [r7, #32]
 800ed92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed96:	663b      	str	r3, [r7, #96]	; 0x60
 800ed98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	3308      	adds	r3, #8
 800ed9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eda0:	633a      	str	r2, [r7, #48]	; 0x30
 800eda2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eda4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eda6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eda8:	e841 2300 	strex	r3, r2, [r1]
 800edac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800edae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d1e5      	bne.n	800ed80 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800edb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edb6:	2220      	movs	r2, #32
 800edb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d118      	bne.n	800edf6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800edc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	e853 3f00 	ldrex	r3, [r3]
 800edd0:	60fb      	str	r3, [r7, #12]
   return(result);
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f023 0310 	bic.w	r3, r3, #16
 800edd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800edda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	461a      	mov	r2, r3
 800ede0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ede2:	61fb      	str	r3, [r7, #28]
 800ede4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ede6:	69b9      	ldr	r1, [r7, #24]
 800ede8:	69fa      	ldr	r2, [r7, #28]
 800edea:	e841 2300 	strex	r3, r2, [r1]
 800edee:	617b      	str	r3, [r7, #20]
   return(result);
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d1e6      	bne.n	800edc4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800edf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edf8:	2200      	movs	r2, #0
 800edfa:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	d107      	bne.n	800ee14 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ee04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ee0e:	f7fe fda1 	bl	800d954 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ee12:	e002      	b.n	800ee1a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800ee14:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ee16:	f7fe fd89 	bl	800d92c <HAL_UART_RxCpltCallback>
}
 800ee1a:	bf00      	nop
 800ee1c:	3770      	adds	r7, #112	; 0x70
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}

0800ee22 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ee22:	b580      	push	{r7, lr}
 800ee24:	b084      	sub	sp, #16
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee2e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2201      	movs	r2, #1
 800ee34:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee3a:	2b01      	cmp	r3, #1
 800ee3c:	d109      	bne.n	800ee52 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee44:	085b      	lsrs	r3, r3, #1
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	4619      	mov	r1, r3
 800ee4a:	68f8      	ldr	r0, [r7, #12]
 800ee4c:	f7fe fd82 	bl	800d954 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ee50:	e002      	b.n	800ee58 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ee52:	68f8      	ldr	r0, [r7, #12]
 800ee54:	f7fe fd74 	bl	800d940 <HAL_UART_RxHalfCpltCallback>
}
 800ee58:	bf00      	nop
 800ee5a:	3710      	adds	r7, #16
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b086      	sub	sp, #24
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee6c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ee6e:	697b      	ldr	r3, [r7, #20]
 800ee70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee74:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee7c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	689b      	ldr	r3, [r3, #8]
 800ee84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee88:	2b80      	cmp	r3, #128	; 0x80
 800ee8a:	d109      	bne.n	800eea0 <UART_DMAError+0x40>
 800ee8c:	693b      	ldr	r3, [r7, #16]
 800ee8e:	2b21      	cmp	r3, #33	; 0x21
 800ee90:	d106      	bne.n	800eea0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	2200      	movs	r2, #0
 800ee96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ee9a:	6978      	ldr	r0, [r7, #20]
 800ee9c:	f7ff fe2c 	bl	800eaf8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	689b      	ldr	r3, [r3, #8]
 800eea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eeaa:	2b40      	cmp	r3, #64	; 0x40
 800eeac:	d109      	bne.n	800eec2 <UART_DMAError+0x62>
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	2b22      	cmp	r3, #34	; 0x22
 800eeb2:	d106      	bne.n	800eec2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800eebc:	6978      	ldr	r0, [r7, #20]
 800eebe:	f7ff fe5d 	bl	800eb7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eec8:	f043 0210 	orr.w	r2, r3, #16
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eed2:	6978      	ldr	r0, [r7, #20]
 800eed4:	f7f2 fc92 	bl	80017fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eed8:	bf00      	nop
 800eeda:	3718      	adds	r7, #24
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b084      	sub	sp, #16
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	2200      	movs	r2, #0
 800eef2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	2200      	movs	r2, #0
 800eefa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eefe:	68f8      	ldr	r0, [r7, #12]
 800ef00:	f7f2 fc7c 	bl	80017fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef04:	bf00      	nop
 800ef06:	3710      	adds	r7, #16
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b088      	sub	sp, #32
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	e853 3f00 	ldrex	r3, [r3]
 800ef20:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef28:	61fb      	str	r3, [r7, #28]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	461a      	mov	r2, r3
 800ef30:	69fb      	ldr	r3, [r7, #28]
 800ef32:	61bb      	str	r3, [r7, #24]
 800ef34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef36:	6979      	ldr	r1, [r7, #20]
 800ef38:	69ba      	ldr	r2, [r7, #24]
 800ef3a:	e841 2300 	strex	r3, r2, [r1]
 800ef3e:	613b      	str	r3, [r7, #16]
   return(result);
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d1e6      	bne.n	800ef14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2220      	movs	r2, #32
 800ef4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2200      	movs	r2, #0
 800ef52:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f7f4 fa97 	bl	8003488 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef5a:	bf00      	nop
 800ef5c:	3720      	adds	r7, #32
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}

0800ef62 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ef62:	b480      	push	{r7}
 800ef64:	b083      	sub	sp, #12
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ef6a:	bf00      	nop
 800ef6c:	370c      	adds	r7, #12
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef74:	4770      	bx	lr

0800ef76 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ef76:	b480      	push	{r7}
 800ef78:	b083      	sub	sp, #12
 800ef7a:	af00      	add	r7, sp, #0
 800ef7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ef7e:	bf00      	nop
 800ef80:	370c      	adds	r7, #12
 800ef82:	46bd      	mov	sp, r7
 800ef84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef88:	4770      	bx	lr

0800ef8a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ef8a:	b480      	push	{r7}
 800ef8c:	b083      	sub	sp, #12
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ef92:	bf00      	nop
 800ef94:	370c      	adds	r7, #12
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr

0800ef9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ef9e:	b480      	push	{r7}
 800efa0:	b085      	sub	sp, #20
 800efa2:	af00      	add	r7, sp, #0
 800efa4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800efac:	2b01      	cmp	r3, #1
 800efae:	d101      	bne.n	800efb4 <HAL_UARTEx_DisableFifoMode+0x16>
 800efb0:	2302      	movs	r3, #2
 800efb2:	e027      	b.n	800f004 <HAL_UARTEx_DisableFifoMode+0x66>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2201      	movs	r2, #1
 800efb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2224      	movs	r2, #36	; 0x24
 800efc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	681a      	ldr	r2, [r3, #0]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	f022 0201 	bic.w	r2, r2, #1
 800efda:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800efe2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2200      	movs	r2, #0
 800efe8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	68fa      	ldr	r2, [r7, #12]
 800eff0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2220      	movs	r2, #32
 800eff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2200      	movs	r2, #0
 800effe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f002:	2300      	movs	r3, #0
}
 800f004:	4618      	mov	r0, r3
 800f006:	3714      	adds	r7, #20
 800f008:	46bd      	mov	sp, r7
 800f00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00e:	4770      	bx	lr

0800f010 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b084      	sub	sp, #16
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f020:	2b01      	cmp	r3, #1
 800f022:	d101      	bne.n	800f028 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f024:	2302      	movs	r3, #2
 800f026:	e02d      	b.n	800f084 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2201      	movs	r2, #1
 800f02c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2224      	movs	r2, #36	; 0x24
 800f034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	681a      	ldr	r2, [r3, #0]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	f022 0201 	bic.w	r2, r2, #1
 800f04e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	689b      	ldr	r3, [r3, #8]
 800f056:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	683a      	ldr	r2, [r7, #0]
 800f060:	430a      	orrs	r2, r1
 800f062:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f000 f84f 	bl	800f108 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	68fa      	ldr	r2, [r7, #12]
 800f070:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2220      	movs	r2, #32
 800f076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2200      	movs	r2, #0
 800f07e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f082:	2300      	movs	r3, #0
}
 800f084:	4618      	mov	r0, r3
 800f086:	3710      	adds	r7, #16
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}

0800f08c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b084      	sub	sp, #16
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
 800f094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d101      	bne.n	800f0a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f0a0:	2302      	movs	r3, #2
 800f0a2:	e02d      	b.n	800f100 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2201      	movs	r2, #1
 800f0a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2224      	movs	r2, #36	; 0x24
 800f0b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	681a      	ldr	r2, [r3, #0]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f022 0201 	bic.w	r2, r2, #1
 800f0ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	689b      	ldr	r3, [r3, #8]
 800f0d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	683a      	ldr	r2, [r7, #0]
 800f0dc:	430a      	orrs	r2, r1
 800f0de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f000 f811 	bl	800f108 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	68fa      	ldr	r2, [r7, #12]
 800f0ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2220      	movs	r2, #32
 800f0f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f0fe:	2300      	movs	r3, #0
}
 800f100:	4618      	mov	r0, r3
 800f102:	3710      	adds	r7, #16
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}

0800f108 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f108:	b480      	push	{r7}
 800f10a:	b085      	sub	sp, #20
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f114:	2b00      	cmp	r3, #0
 800f116:	d108      	bne.n	800f12a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2201      	movs	r2, #1
 800f11c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2201      	movs	r2, #1
 800f124:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f128:	e031      	b.n	800f18e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f12a:	2310      	movs	r3, #16
 800f12c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f12e:	2310      	movs	r3, #16
 800f130:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	689b      	ldr	r3, [r3, #8]
 800f138:	0e5b      	lsrs	r3, r3, #25
 800f13a:	b2db      	uxtb	r3, r3
 800f13c:	f003 0307 	and.w	r3, r3, #7
 800f140:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	689b      	ldr	r3, [r3, #8]
 800f148:	0f5b      	lsrs	r3, r3, #29
 800f14a:	b2db      	uxtb	r3, r3
 800f14c:	f003 0307 	and.w	r3, r3, #7
 800f150:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f152:	7bbb      	ldrb	r3, [r7, #14]
 800f154:	7b3a      	ldrb	r2, [r7, #12]
 800f156:	4911      	ldr	r1, [pc, #68]	; (800f19c <UARTEx_SetNbDataToProcess+0x94>)
 800f158:	5c8a      	ldrb	r2, [r1, r2]
 800f15a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f15e:	7b3a      	ldrb	r2, [r7, #12]
 800f160:	490f      	ldr	r1, [pc, #60]	; (800f1a0 <UARTEx_SetNbDataToProcess+0x98>)
 800f162:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f164:	fb93 f3f2 	sdiv	r3, r3, r2
 800f168:	b29a      	uxth	r2, r3
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f170:	7bfb      	ldrb	r3, [r7, #15]
 800f172:	7b7a      	ldrb	r2, [r7, #13]
 800f174:	4909      	ldr	r1, [pc, #36]	; (800f19c <UARTEx_SetNbDataToProcess+0x94>)
 800f176:	5c8a      	ldrb	r2, [r1, r2]
 800f178:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f17c:	7b7a      	ldrb	r2, [r7, #13]
 800f17e:	4908      	ldr	r1, [pc, #32]	; (800f1a0 <UARTEx_SetNbDataToProcess+0x98>)
 800f180:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f182:	fb93 f3f2 	sdiv	r3, r3, r2
 800f186:	b29a      	uxth	r2, r3
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f18e:	bf00      	nop
 800f190:	3714      	adds	r7, #20
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr
 800f19a:	bf00      	nop
 800f19c:	0800f860 	.word	0x0800f860
 800f1a0:	0800f868 	.word	0x0800f868

0800f1a4 <__cxa_pure_virtual>:
 800f1a4:	b508      	push	{r3, lr}
 800f1a6:	f000 f80d 	bl	800f1c4 <_ZSt9terminatev>

0800f1aa <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f1aa:	b508      	push	{r3, lr}
 800f1ac:	4780      	blx	r0
 800f1ae:	f000 f80e 	bl	800f1ce <abort>
	...

0800f1b4 <_ZSt13get_terminatev>:
 800f1b4:	4b02      	ldr	r3, [pc, #8]	; (800f1c0 <_ZSt13get_terminatev+0xc>)
 800f1b6:	6818      	ldr	r0, [r3, #0]
 800f1b8:	f3bf 8f5b 	dmb	ish
 800f1bc:	4770      	bx	lr
 800f1be:	bf00      	nop
 800f1c0:	24000010 	.word	0x24000010

0800f1c4 <_ZSt9terminatev>:
 800f1c4:	b508      	push	{r3, lr}
 800f1c6:	f7ff fff5 	bl	800f1b4 <_ZSt13get_terminatev>
 800f1ca:	f7ff ffee 	bl	800f1aa <_ZN10__cxxabiv111__terminateEPFvvE>

0800f1ce <abort>:
 800f1ce:	b508      	push	{r3, lr}
 800f1d0:	2006      	movs	r0, #6
 800f1d2:	f000 f873 	bl	800f2bc <raise>
 800f1d6:	2001      	movs	r0, #1
 800f1d8:	f7f5 f966 	bl	80044a8 <_exit>

0800f1dc <__errno>:
 800f1dc:	4b01      	ldr	r3, [pc, #4]	; (800f1e4 <__errno+0x8>)
 800f1de:	6818      	ldr	r0, [r3, #0]
 800f1e0:	4770      	bx	lr
 800f1e2:	bf00      	nop
 800f1e4:	24000014 	.word	0x24000014

0800f1e8 <__libc_init_array>:
 800f1e8:	b570      	push	{r4, r5, r6, lr}
 800f1ea:	4d0d      	ldr	r5, [pc, #52]	; (800f220 <__libc_init_array+0x38>)
 800f1ec:	4c0d      	ldr	r4, [pc, #52]	; (800f224 <__libc_init_array+0x3c>)
 800f1ee:	1b64      	subs	r4, r4, r5
 800f1f0:	10a4      	asrs	r4, r4, #2
 800f1f2:	2600      	movs	r6, #0
 800f1f4:	42a6      	cmp	r6, r4
 800f1f6:	d109      	bne.n	800f20c <__libc_init_array+0x24>
 800f1f8:	4d0b      	ldr	r5, [pc, #44]	; (800f228 <__libc_init_array+0x40>)
 800f1fa:	4c0c      	ldr	r4, [pc, #48]	; (800f22c <__libc_init_array+0x44>)
 800f1fc:	f000 f9b0 	bl	800f560 <_init>
 800f200:	1b64      	subs	r4, r4, r5
 800f202:	10a4      	asrs	r4, r4, #2
 800f204:	2600      	movs	r6, #0
 800f206:	42a6      	cmp	r6, r4
 800f208:	d105      	bne.n	800f216 <__libc_init_array+0x2e>
 800f20a:	bd70      	pop	{r4, r5, r6, pc}
 800f20c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f210:	4798      	blx	r3
 800f212:	3601      	adds	r6, #1
 800f214:	e7ee      	b.n	800f1f4 <__libc_init_array+0xc>
 800f216:	f855 3b04 	ldr.w	r3, [r5], #4
 800f21a:	4798      	blx	r3
 800f21c:	3601      	adds	r6, #1
 800f21e:	e7f2      	b.n	800f206 <__libc_init_array+0x1e>
 800f220:	0800f878 	.word	0x0800f878
 800f224:	0800f878 	.word	0x0800f878
 800f228:	0800f878 	.word	0x0800f878
 800f22c:	0800f880 	.word	0x0800f880

0800f230 <memcpy>:
 800f230:	440a      	add	r2, r1
 800f232:	4291      	cmp	r1, r2
 800f234:	f100 33ff 	add.w	r3, r0, #4294967295
 800f238:	d100      	bne.n	800f23c <memcpy+0xc>
 800f23a:	4770      	bx	lr
 800f23c:	b510      	push	{r4, lr}
 800f23e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f242:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f246:	4291      	cmp	r1, r2
 800f248:	d1f9      	bne.n	800f23e <memcpy+0xe>
 800f24a:	bd10      	pop	{r4, pc}

0800f24c <memset>:
 800f24c:	4402      	add	r2, r0
 800f24e:	4603      	mov	r3, r0
 800f250:	4293      	cmp	r3, r2
 800f252:	d100      	bne.n	800f256 <memset+0xa>
 800f254:	4770      	bx	lr
 800f256:	f803 1b01 	strb.w	r1, [r3], #1
 800f25a:	e7f9      	b.n	800f250 <memset+0x4>

0800f25c <realloc>:
 800f25c:	4b02      	ldr	r3, [pc, #8]	; (800f268 <realloc+0xc>)
 800f25e:	460a      	mov	r2, r1
 800f260:	4601      	mov	r1, r0
 800f262:	6818      	ldr	r0, [r3, #0]
 800f264:	f000 b8da 	b.w	800f41c <_realloc_r>
 800f268:	24000014 	.word	0x24000014

0800f26c <_raise_r>:
 800f26c:	291f      	cmp	r1, #31
 800f26e:	b538      	push	{r3, r4, r5, lr}
 800f270:	4604      	mov	r4, r0
 800f272:	460d      	mov	r5, r1
 800f274:	d904      	bls.n	800f280 <_raise_r+0x14>
 800f276:	2316      	movs	r3, #22
 800f278:	6003      	str	r3, [r0, #0]
 800f27a:	f04f 30ff 	mov.w	r0, #4294967295
 800f27e:	bd38      	pop	{r3, r4, r5, pc}
 800f280:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f282:	b112      	cbz	r2, 800f28a <_raise_r+0x1e>
 800f284:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f288:	b94b      	cbnz	r3, 800f29e <_raise_r+0x32>
 800f28a:	4620      	mov	r0, r4
 800f28c:	f000 f830 	bl	800f2f0 <_getpid_r>
 800f290:	462a      	mov	r2, r5
 800f292:	4601      	mov	r1, r0
 800f294:	4620      	mov	r0, r4
 800f296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f29a:	f000 b817 	b.w	800f2cc <_kill_r>
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	d00a      	beq.n	800f2b8 <_raise_r+0x4c>
 800f2a2:	1c59      	adds	r1, r3, #1
 800f2a4:	d103      	bne.n	800f2ae <_raise_r+0x42>
 800f2a6:	2316      	movs	r3, #22
 800f2a8:	6003      	str	r3, [r0, #0]
 800f2aa:	2001      	movs	r0, #1
 800f2ac:	e7e7      	b.n	800f27e <_raise_r+0x12>
 800f2ae:	2400      	movs	r4, #0
 800f2b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f2b4:	4628      	mov	r0, r5
 800f2b6:	4798      	blx	r3
 800f2b8:	2000      	movs	r0, #0
 800f2ba:	e7e0      	b.n	800f27e <_raise_r+0x12>

0800f2bc <raise>:
 800f2bc:	4b02      	ldr	r3, [pc, #8]	; (800f2c8 <raise+0xc>)
 800f2be:	4601      	mov	r1, r0
 800f2c0:	6818      	ldr	r0, [r3, #0]
 800f2c2:	f7ff bfd3 	b.w	800f26c <_raise_r>
 800f2c6:	bf00      	nop
 800f2c8:	24000014 	.word	0x24000014

0800f2cc <_kill_r>:
 800f2cc:	b538      	push	{r3, r4, r5, lr}
 800f2ce:	4d07      	ldr	r5, [pc, #28]	; (800f2ec <_kill_r+0x20>)
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	4608      	mov	r0, r1
 800f2d6:	4611      	mov	r1, r2
 800f2d8:	602b      	str	r3, [r5, #0]
 800f2da:	f7f5 f8d5 	bl	8004488 <_kill>
 800f2de:	1c43      	adds	r3, r0, #1
 800f2e0:	d102      	bne.n	800f2e8 <_kill_r+0x1c>
 800f2e2:	682b      	ldr	r3, [r5, #0]
 800f2e4:	b103      	cbz	r3, 800f2e8 <_kill_r+0x1c>
 800f2e6:	6023      	str	r3, [r4, #0]
 800f2e8:	bd38      	pop	{r3, r4, r5, pc}
 800f2ea:	bf00      	nop
 800f2ec:	24001b00 	.word	0x24001b00

0800f2f0 <_getpid_r>:
 800f2f0:	f7f5 b8c2 	b.w	8004478 <_getpid>

0800f2f4 <sbrk_aligned>:
 800f2f4:	b570      	push	{r4, r5, r6, lr}
 800f2f6:	4e0e      	ldr	r6, [pc, #56]	; (800f330 <sbrk_aligned+0x3c>)
 800f2f8:	460c      	mov	r4, r1
 800f2fa:	6831      	ldr	r1, [r6, #0]
 800f2fc:	4605      	mov	r5, r0
 800f2fe:	b911      	cbnz	r1, 800f306 <sbrk_aligned+0x12>
 800f300:	f000 f8bc 	bl	800f47c <_sbrk_r>
 800f304:	6030      	str	r0, [r6, #0]
 800f306:	4621      	mov	r1, r4
 800f308:	4628      	mov	r0, r5
 800f30a:	f000 f8b7 	bl	800f47c <_sbrk_r>
 800f30e:	1c43      	adds	r3, r0, #1
 800f310:	d00a      	beq.n	800f328 <sbrk_aligned+0x34>
 800f312:	1cc4      	adds	r4, r0, #3
 800f314:	f024 0403 	bic.w	r4, r4, #3
 800f318:	42a0      	cmp	r0, r4
 800f31a:	d007      	beq.n	800f32c <sbrk_aligned+0x38>
 800f31c:	1a21      	subs	r1, r4, r0
 800f31e:	4628      	mov	r0, r5
 800f320:	f000 f8ac 	bl	800f47c <_sbrk_r>
 800f324:	3001      	adds	r0, #1
 800f326:	d101      	bne.n	800f32c <sbrk_aligned+0x38>
 800f328:	f04f 34ff 	mov.w	r4, #4294967295
 800f32c:	4620      	mov	r0, r4
 800f32e:	bd70      	pop	{r4, r5, r6, pc}
 800f330:	24001afc 	.word	0x24001afc

0800f334 <_malloc_r>:
 800f334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f338:	1ccd      	adds	r5, r1, #3
 800f33a:	f025 0503 	bic.w	r5, r5, #3
 800f33e:	3508      	adds	r5, #8
 800f340:	2d0c      	cmp	r5, #12
 800f342:	bf38      	it	cc
 800f344:	250c      	movcc	r5, #12
 800f346:	2d00      	cmp	r5, #0
 800f348:	4607      	mov	r7, r0
 800f34a:	db01      	blt.n	800f350 <_malloc_r+0x1c>
 800f34c:	42a9      	cmp	r1, r5
 800f34e:	d905      	bls.n	800f35c <_malloc_r+0x28>
 800f350:	230c      	movs	r3, #12
 800f352:	603b      	str	r3, [r7, #0]
 800f354:	2600      	movs	r6, #0
 800f356:	4630      	mov	r0, r6
 800f358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f35c:	4e2e      	ldr	r6, [pc, #184]	; (800f418 <_malloc_r+0xe4>)
 800f35e:	f000 f89d 	bl	800f49c <__malloc_lock>
 800f362:	6833      	ldr	r3, [r6, #0]
 800f364:	461c      	mov	r4, r3
 800f366:	bb34      	cbnz	r4, 800f3b6 <_malloc_r+0x82>
 800f368:	4629      	mov	r1, r5
 800f36a:	4638      	mov	r0, r7
 800f36c:	f7ff ffc2 	bl	800f2f4 <sbrk_aligned>
 800f370:	1c43      	adds	r3, r0, #1
 800f372:	4604      	mov	r4, r0
 800f374:	d14d      	bne.n	800f412 <_malloc_r+0xde>
 800f376:	6834      	ldr	r4, [r6, #0]
 800f378:	4626      	mov	r6, r4
 800f37a:	2e00      	cmp	r6, #0
 800f37c:	d140      	bne.n	800f400 <_malloc_r+0xcc>
 800f37e:	6823      	ldr	r3, [r4, #0]
 800f380:	4631      	mov	r1, r6
 800f382:	4638      	mov	r0, r7
 800f384:	eb04 0803 	add.w	r8, r4, r3
 800f388:	f000 f878 	bl	800f47c <_sbrk_r>
 800f38c:	4580      	cmp	r8, r0
 800f38e:	d13a      	bne.n	800f406 <_malloc_r+0xd2>
 800f390:	6821      	ldr	r1, [r4, #0]
 800f392:	3503      	adds	r5, #3
 800f394:	1a6d      	subs	r5, r5, r1
 800f396:	f025 0503 	bic.w	r5, r5, #3
 800f39a:	3508      	adds	r5, #8
 800f39c:	2d0c      	cmp	r5, #12
 800f39e:	bf38      	it	cc
 800f3a0:	250c      	movcc	r5, #12
 800f3a2:	4629      	mov	r1, r5
 800f3a4:	4638      	mov	r0, r7
 800f3a6:	f7ff ffa5 	bl	800f2f4 <sbrk_aligned>
 800f3aa:	3001      	adds	r0, #1
 800f3ac:	d02b      	beq.n	800f406 <_malloc_r+0xd2>
 800f3ae:	6823      	ldr	r3, [r4, #0]
 800f3b0:	442b      	add	r3, r5
 800f3b2:	6023      	str	r3, [r4, #0]
 800f3b4:	e00e      	b.n	800f3d4 <_malloc_r+0xa0>
 800f3b6:	6822      	ldr	r2, [r4, #0]
 800f3b8:	1b52      	subs	r2, r2, r5
 800f3ba:	d41e      	bmi.n	800f3fa <_malloc_r+0xc6>
 800f3bc:	2a0b      	cmp	r2, #11
 800f3be:	d916      	bls.n	800f3ee <_malloc_r+0xba>
 800f3c0:	1961      	adds	r1, r4, r5
 800f3c2:	42a3      	cmp	r3, r4
 800f3c4:	6025      	str	r5, [r4, #0]
 800f3c6:	bf18      	it	ne
 800f3c8:	6059      	strne	r1, [r3, #4]
 800f3ca:	6863      	ldr	r3, [r4, #4]
 800f3cc:	bf08      	it	eq
 800f3ce:	6031      	streq	r1, [r6, #0]
 800f3d0:	5162      	str	r2, [r4, r5]
 800f3d2:	604b      	str	r3, [r1, #4]
 800f3d4:	4638      	mov	r0, r7
 800f3d6:	f104 060b 	add.w	r6, r4, #11
 800f3da:	f000 f865 	bl	800f4a8 <__malloc_unlock>
 800f3de:	f026 0607 	bic.w	r6, r6, #7
 800f3e2:	1d23      	adds	r3, r4, #4
 800f3e4:	1af2      	subs	r2, r6, r3
 800f3e6:	d0b6      	beq.n	800f356 <_malloc_r+0x22>
 800f3e8:	1b9b      	subs	r3, r3, r6
 800f3ea:	50a3      	str	r3, [r4, r2]
 800f3ec:	e7b3      	b.n	800f356 <_malloc_r+0x22>
 800f3ee:	6862      	ldr	r2, [r4, #4]
 800f3f0:	42a3      	cmp	r3, r4
 800f3f2:	bf0c      	ite	eq
 800f3f4:	6032      	streq	r2, [r6, #0]
 800f3f6:	605a      	strne	r2, [r3, #4]
 800f3f8:	e7ec      	b.n	800f3d4 <_malloc_r+0xa0>
 800f3fa:	4623      	mov	r3, r4
 800f3fc:	6864      	ldr	r4, [r4, #4]
 800f3fe:	e7b2      	b.n	800f366 <_malloc_r+0x32>
 800f400:	4634      	mov	r4, r6
 800f402:	6876      	ldr	r6, [r6, #4]
 800f404:	e7b9      	b.n	800f37a <_malloc_r+0x46>
 800f406:	230c      	movs	r3, #12
 800f408:	603b      	str	r3, [r7, #0]
 800f40a:	4638      	mov	r0, r7
 800f40c:	f000 f84c 	bl	800f4a8 <__malloc_unlock>
 800f410:	e7a1      	b.n	800f356 <_malloc_r+0x22>
 800f412:	6025      	str	r5, [r4, #0]
 800f414:	e7de      	b.n	800f3d4 <_malloc_r+0xa0>
 800f416:	bf00      	nop
 800f418:	24001af8 	.word	0x24001af8

0800f41c <_realloc_r>:
 800f41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f420:	4680      	mov	r8, r0
 800f422:	4614      	mov	r4, r2
 800f424:	460e      	mov	r6, r1
 800f426:	b921      	cbnz	r1, 800f432 <_realloc_r+0x16>
 800f428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f42c:	4611      	mov	r1, r2
 800f42e:	f7ff bf81 	b.w	800f334 <_malloc_r>
 800f432:	b92a      	cbnz	r2, 800f440 <_realloc_r+0x24>
 800f434:	f000 f83e 	bl	800f4b4 <_free_r>
 800f438:	4625      	mov	r5, r4
 800f43a:	4628      	mov	r0, r5
 800f43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f440:	f000 f884 	bl	800f54c <_malloc_usable_size_r>
 800f444:	4284      	cmp	r4, r0
 800f446:	4607      	mov	r7, r0
 800f448:	d802      	bhi.n	800f450 <_realloc_r+0x34>
 800f44a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f44e:	d812      	bhi.n	800f476 <_realloc_r+0x5a>
 800f450:	4621      	mov	r1, r4
 800f452:	4640      	mov	r0, r8
 800f454:	f7ff ff6e 	bl	800f334 <_malloc_r>
 800f458:	4605      	mov	r5, r0
 800f45a:	2800      	cmp	r0, #0
 800f45c:	d0ed      	beq.n	800f43a <_realloc_r+0x1e>
 800f45e:	42bc      	cmp	r4, r7
 800f460:	4622      	mov	r2, r4
 800f462:	4631      	mov	r1, r6
 800f464:	bf28      	it	cs
 800f466:	463a      	movcs	r2, r7
 800f468:	f7ff fee2 	bl	800f230 <memcpy>
 800f46c:	4631      	mov	r1, r6
 800f46e:	4640      	mov	r0, r8
 800f470:	f000 f820 	bl	800f4b4 <_free_r>
 800f474:	e7e1      	b.n	800f43a <_realloc_r+0x1e>
 800f476:	4635      	mov	r5, r6
 800f478:	e7df      	b.n	800f43a <_realloc_r+0x1e>
	...

0800f47c <_sbrk_r>:
 800f47c:	b538      	push	{r3, r4, r5, lr}
 800f47e:	4d06      	ldr	r5, [pc, #24]	; (800f498 <_sbrk_r+0x1c>)
 800f480:	2300      	movs	r3, #0
 800f482:	4604      	mov	r4, r0
 800f484:	4608      	mov	r0, r1
 800f486:	602b      	str	r3, [r5, #0]
 800f488:	f7f5 f818 	bl	80044bc <_sbrk>
 800f48c:	1c43      	adds	r3, r0, #1
 800f48e:	d102      	bne.n	800f496 <_sbrk_r+0x1a>
 800f490:	682b      	ldr	r3, [r5, #0]
 800f492:	b103      	cbz	r3, 800f496 <_sbrk_r+0x1a>
 800f494:	6023      	str	r3, [r4, #0]
 800f496:	bd38      	pop	{r3, r4, r5, pc}
 800f498:	24001b00 	.word	0x24001b00

0800f49c <__malloc_lock>:
 800f49c:	4801      	ldr	r0, [pc, #4]	; (800f4a4 <__malloc_lock+0x8>)
 800f49e:	f000 b85d 	b.w	800f55c <__retarget_lock_acquire_recursive>
 800f4a2:	bf00      	nop
 800f4a4:	24001b04 	.word	0x24001b04

0800f4a8 <__malloc_unlock>:
 800f4a8:	4801      	ldr	r0, [pc, #4]	; (800f4b0 <__malloc_unlock+0x8>)
 800f4aa:	f000 b858 	b.w	800f55e <__retarget_lock_release_recursive>
 800f4ae:	bf00      	nop
 800f4b0:	24001b04 	.word	0x24001b04

0800f4b4 <_free_r>:
 800f4b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4b6:	2900      	cmp	r1, #0
 800f4b8:	d044      	beq.n	800f544 <_free_r+0x90>
 800f4ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4be:	9001      	str	r0, [sp, #4]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	f1a1 0404 	sub.w	r4, r1, #4
 800f4c6:	bfb8      	it	lt
 800f4c8:	18e4      	addlt	r4, r4, r3
 800f4ca:	f7ff ffe7 	bl	800f49c <__malloc_lock>
 800f4ce:	4a1e      	ldr	r2, [pc, #120]	; (800f548 <_free_r+0x94>)
 800f4d0:	9801      	ldr	r0, [sp, #4]
 800f4d2:	6813      	ldr	r3, [r2, #0]
 800f4d4:	b933      	cbnz	r3, 800f4e4 <_free_r+0x30>
 800f4d6:	6063      	str	r3, [r4, #4]
 800f4d8:	6014      	str	r4, [r2, #0]
 800f4da:	b003      	add	sp, #12
 800f4dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4e0:	f7ff bfe2 	b.w	800f4a8 <__malloc_unlock>
 800f4e4:	42a3      	cmp	r3, r4
 800f4e6:	d908      	bls.n	800f4fa <_free_r+0x46>
 800f4e8:	6825      	ldr	r5, [r4, #0]
 800f4ea:	1961      	adds	r1, r4, r5
 800f4ec:	428b      	cmp	r3, r1
 800f4ee:	bf01      	itttt	eq
 800f4f0:	6819      	ldreq	r1, [r3, #0]
 800f4f2:	685b      	ldreq	r3, [r3, #4]
 800f4f4:	1949      	addeq	r1, r1, r5
 800f4f6:	6021      	streq	r1, [r4, #0]
 800f4f8:	e7ed      	b.n	800f4d6 <_free_r+0x22>
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	b10b      	cbz	r3, 800f504 <_free_r+0x50>
 800f500:	42a3      	cmp	r3, r4
 800f502:	d9fa      	bls.n	800f4fa <_free_r+0x46>
 800f504:	6811      	ldr	r1, [r2, #0]
 800f506:	1855      	adds	r5, r2, r1
 800f508:	42a5      	cmp	r5, r4
 800f50a:	d10b      	bne.n	800f524 <_free_r+0x70>
 800f50c:	6824      	ldr	r4, [r4, #0]
 800f50e:	4421      	add	r1, r4
 800f510:	1854      	adds	r4, r2, r1
 800f512:	42a3      	cmp	r3, r4
 800f514:	6011      	str	r1, [r2, #0]
 800f516:	d1e0      	bne.n	800f4da <_free_r+0x26>
 800f518:	681c      	ldr	r4, [r3, #0]
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	6053      	str	r3, [r2, #4]
 800f51e:	4421      	add	r1, r4
 800f520:	6011      	str	r1, [r2, #0]
 800f522:	e7da      	b.n	800f4da <_free_r+0x26>
 800f524:	d902      	bls.n	800f52c <_free_r+0x78>
 800f526:	230c      	movs	r3, #12
 800f528:	6003      	str	r3, [r0, #0]
 800f52a:	e7d6      	b.n	800f4da <_free_r+0x26>
 800f52c:	6825      	ldr	r5, [r4, #0]
 800f52e:	1961      	adds	r1, r4, r5
 800f530:	428b      	cmp	r3, r1
 800f532:	bf04      	itt	eq
 800f534:	6819      	ldreq	r1, [r3, #0]
 800f536:	685b      	ldreq	r3, [r3, #4]
 800f538:	6063      	str	r3, [r4, #4]
 800f53a:	bf04      	itt	eq
 800f53c:	1949      	addeq	r1, r1, r5
 800f53e:	6021      	streq	r1, [r4, #0]
 800f540:	6054      	str	r4, [r2, #4]
 800f542:	e7ca      	b.n	800f4da <_free_r+0x26>
 800f544:	b003      	add	sp, #12
 800f546:	bd30      	pop	{r4, r5, pc}
 800f548:	24001af8 	.word	0x24001af8

0800f54c <_malloc_usable_size_r>:
 800f54c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f550:	1f18      	subs	r0, r3, #4
 800f552:	2b00      	cmp	r3, #0
 800f554:	bfbc      	itt	lt
 800f556:	580b      	ldrlt	r3, [r1, r0]
 800f558:	18c0      	addlt	r0, r0, r3
 800f55a:	4770      	bx	lr

0800f55c <__retarget_lock_acquire_recursive>:
 800f55c:	4770      	bx	lr

0800f55e <__retarget_lock_release_recursive>:
 800f55e:	4770      	bx	lr

0800f560 <_init>:
 800f560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f562:	bf00      	nop
 800f564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f566:	bc08      	pop	{r3}
 800f568:	469e      	mov	lr, r3
 800f56a:	4770      	bx	lr

0800f56c <_fini>:
 800f56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f56e:	bf00      	nop
 800f570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f572:	bc08      	pop	{r3}
 800f574:	469e      	mov	lr, r3
 800f576:	4770      	bx	lr
