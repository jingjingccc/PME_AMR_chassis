
PME_AMR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f290  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800f560  0800f560  0001f560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f858  0800f858  0001f858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f860  0800f860  0001f860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f868  0800f868  0001f868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800f86c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001a90  24000078  0800f8e4  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001b08  0800f8e4  00021b08  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021dfd  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003b4c  00000000  00000000  00041ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001538  00000000  00000000  000459f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013f8  00000000  00000000  00046f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035f2d  00000000  00000000  00048320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d54b  00000000  00000000  0007e24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153988  00000000  00000000  0009b798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ef120  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005dd4  00000000  00000000  001ef170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f548 	.word	0x0800f548

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800f548 	.word	0x0800f548

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <Control_Init>:
/**
 * @ brief Include all the initial function
 * @ retval None
 * */
void Control_Init()
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b0ab      	sub	sp, #172	; 0xac
 8000684:	af28      	add	r7, sp, #160	; 0xa0
	Hardware_Info_Init();
 8000686:	f000 faf3 	bl	8000c70 <Hardware_Info_Init>
	Control_Timer_Init();
 800068a:	f000 fabf 	bl	8000c0c <Control_Timer_Init>
	Motor_Driver_Init(&WheelA, M1_PHASE_Pin, M1_PHASE_GPIO_port, M1_Encoder_timer, M1_Encoder_timerchannel, M1_Encoder_dir, M1_PWM_timer, M1_PWM_timerchannel);
	Motor_Driver_Init(&WheelB, M2_PHASE_Pin, M2_PHASE_GPIO_port, M2_Encoder_timer, M2_Encoder_timerchannel, M2_Encoder_dir, M2_PWM_timer, M2_PWM_timerchannel);
	Motor_Driver_Init(&WheelC, M3_PHASE_Pin, M3_PHASE_GPIO_port, M3_Encoder_timer, M3_Encoder_timerchannel, M3_Encoder_dir, M3_PWM_timer, M3_PWM_timerchannel);
#endif
#ifdef G2_18V17
	Motor_Driver_Init(&WheelA, M1_DIR_Pin, M1_DIR_GPIO_port, M1_Encoder_timer, M1_Encoder_timerchannel, M1_Encoder_dir, M1_PWM_timer, M1_PWM_timerchannel);
 800068e:	4cb0      	ldr	r4, [pc, #704]	; (8000950 <Control_Init+0x2d0>)
 8000690:	2300      	movs	r3, #0
 8000692:	9327      	str	r3, [sp, #156]	; 0x9c
 8000694:	4aaf      	ldr	r2, [pc, #700]	; (8000954 <Control_Init+0x2d4>)
 8000696:	ab14      	add	r3, sp, #80	; 0x50
 8000698:	4611      	mov	r1, r2
 800069a:	224c      	movs	r2, #76	; 0x4c
 800069c:	4618      	mov	r0, r3
 800069e:	f00e fdbb 	bl	800f218 <memcpy>
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80006a8:	2304      	movs	r3, #4
 80006aa:	9312      	str	r3, [sp, #72]	; 0x48
 80006ac:	4668      	mov	r0, sp
 80006ae:	1d23      	adds	r3, r4, #4
 80006b0:	2248      	movs	r2, #72	; 0x48
 80006b2:	4619      	mov	r1, r3
 80006b4:	f00e fdb0 	bl	800f218 <memcpy>
 80006b8:	6823      	ldr	r3, [r4, #0]
 80006ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006be:	49a6      	ldr	r1, [pc, #664]	; (8000958 <Control_Init+0x2d8>)
 80006c0:	48a6      	ldr	r0, [pc, #664]	; (800095c <Control_Init+0x2dc>)
 80006c2:	f000 fa6e 	bl	8000ba2 <Motor_Driver_Init>
	Motor_Driver_Init(&WheelB, M2_DIR_Pin, M2_DIR_GPIO_port, M2_Encoder_timer, M2_Encoder_timerchannel, M2_Encoder_dir, M2_PWM_timer, M2_PWM_timerchannel);
 80006c6:	4ca6      	ldr	r4, [pc, #664]	; (8000960 <Control_Init+0x2e0>)
 80006c8:	2304      	movs	r3, #4
 80006ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80006cc:	4aa1      	ldr	r2, [pc, #644]	; (8000954 <Control_Init+0x2d4>)
 80006ce:	ab14      	add	r3, sp, #80	; 0x50
 80006d0:	4611      	mov	r1, r2
 80006d2:	224c      	movs	r2, #76	; 0x4c
 80006d4:	4618      	mov	r0, r3
 80006d6:	f00e fd9f 	bl	800f218 <memcpy>
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	9313      	str	r3, [sp, #76]	; 0x4c
 80006e0:	2304      	movs	r3, #4
 80006e2:	9312      	str	r3, [sp, #72]	; 0x48
 80006e4:	4668      	mov	r0, sp
 80006e6:	1d23      	adds	r3, r4, #4
 80006e8:	2248      	movs	r2, #72	; 0x48
 80006ea:	4619      	mov	r1, r3
 80006ec:	f00e fd94 	bl	800f218 <memcpy>
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006f6:	499b      	ldr	r1, [pc, #620]	; (8000964 <Control_Init+0x2e4>)
 80006f8:	489b      	ldr	r0, [pc, #620]	; (8000968 <Control_Init+0x2e8>)
 80006fa:	f000 fa52 	bl	8000ba2 <Motor_Driver_Init>
	Motor_Driver_Init(&WheelC, M3_DIR_Pin, M3_DIR_GPIO_port, M3_Encoder_timer, M3_Encoder_timerchannel, M3_Encoder_dir, M3_PWM_timer, M3_PWM_timerchannel);
 80006fe:	4c9b      	ldr	r4, [pc, #620]	; (800096c <Control_Init+0x2ec>)
 8000700:	2300      	movs	r3, #0
 8000702:	9327      	str	r3, [sp, #156]	; 0x9c
 8000704:	4a9a      	ldr	r2, [pc, #616]	; (8000970 <Control_Init+0x2f0>)
 8000706:	ab14      	add	r3, sp, #80	; 0x50
 8000708:	4611      	mov	r1, r2
 800070a:	224c      	movs	r2, #76	; 0x4c
 800070c:	4618      	mov	r0, r3
 800070e:	f00e fd83 	bl	800f218 <memcpy>
 8000712:	2301      	movs	r3, #1
 8000714:	9313      	str	r3, [sp, #76]	; 0x4c
 8000716:	2304      	movs	r3, #4
 8000718:	9312      	str	r3, [sp, #72]	; 0x48
 800071a:	4668      	mov	r0, sp
 800071c:	1d23      	adds	r3, r4, #4
 800071e:	2248      	movs	r2, #72	; 0x48
 8000720:	4619      	mov	r1, r3
 8000722:	f00e fd79 	bl	800f218 <memcpy>
 8000726:	6823      	ldr	r3, [r4, #0]
 8000728:	2208      	movs	r2, #8
 800072a:	4992      	ldr	r1, [pc, #584]	; (8000974 <Control_Init+0x2f4>)
 800072c:	4892      	ldr	r0, [pc, #584]	; (8000978 <Control_Init+0x2f8>)
 800072e:	f000 fa38 	bl	8000ba2 <Motor_Driver_Init>
	Motor_Driver_Init(&WheelD, M4_DIR_Pin, M4_DIR_GPIO_port, M4_Encoder_timer, M4_Encoder_timerchannel, M4_Encoder_dir, M4_PWM_timer, M4_PWM_timerchannel);
 8000732:	4c92      	ldr	r4, [pc, #584]	; (800097c <Control_Init+0x2fc>)
 8000734:	2304      	movs	r3, #4
 8000736:	9327      	str	r3, [sp, #156]	; 0x9c
 8000738:	4a8d      	ldr	r2, [pc, #564]	; (8000970 <Control_Init+0x2f0>)
 800073a:	ab14      	add	r3, sp, #80	; 0x50
 800073c:	4611      	mov	r1, r2
 800073e:	224c      	movs	r2, #76	; 0x4c
 8000740:	4618      	mov	r0, r3
 8000742:	f00e fd69 	bl	800f218 <memcpy>
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	9313      	str	r3, [sp, #76]	; 0x4c
 800074c:	2304      	movs	r3, #4
 800074e:	9312      	str	r3, [sp, #72]	; 0x48
 8000750:	4668      	mov	r0, sp
 8000752:	1d23      	adds	r3, r4, #4
 8000754:	2248      	movs	r2, #72	; 0x48
 8000756:	4619      	mov	r1, r3
 8000758:	f00e fd5e 	bl	800f218 <memcpy>
 800075c:	6823      	ldr	r3, [r4, #0]
 800075e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000762:	4987      	ldr	r1, [pc, #540]	; (8000980 <Control_Init+0x300>)
 8000764:	4887      	ldr	r0, [pc, #540]	; (8000984 <Control_Init+0x304>)
 8000766:	f000 fa1c 	bl	8000ba2 <Motor_Driver_Init>
#endif

	Pid_Param_Init(&WheelA, M1_KP, M1_KI, M1_KD);
 800076a:	ed9f 2b71 	vldr	d2, [pc, #452]	; 8000930 <Control_Init+0x2b0>
 800076e:	ed9f 1b72 	vldr	d1, [pc, #456]	; 8000938 <Control_Init+0x2b8>
 8000772:	eeb7 0b08 	vmov.f64	d0, #120	; 0x3fc00000  1.5
 8000776:	4879      	ldr	r0, [pc, #484]	; (800095c <Control_Init+0x2dc>)
 8000778:	f000 f9f4 	bl	8000b64 <Pid_Param_Init>
	Pid_Param_Init(&WheelB, M2_KP, M2_KI, M2_KD);
 800077c:	ed9f 2b6c 	vldr	d2, [pc, #432]	; 8000930 <Control_Init+0x2b0>
 8000780:	eeb3 1b0e 	vmov.f64	d1, #62	; 0x41f00000  30.0
 8000784:	eeb0 0b08 	vmov.f64	d0, #8	; 0x40400000  3.0
 8000788:	4877      	ldr	r0, [pc, #476]	; (8000968 <Control_Init+0x2e8>)
 800078a:	f000 f9eb 	bl	8000b64 <Pid_Param_Init>
	Pid_Param_Init(&WheelC, M3_KP, M3_KI, M3_KD);
 800078e:	ed9f 2b68 	vldr	d2, [pc, #416]	; 8000930 <Control_Init+0x2b0>
 8000792:	eeb3 1b0e 	vmov.f64	d1, #62	; 0x41f00000  30.0
 8000796:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 800079a:	4877      	ldr	r0, [pc, #476]	; (8000978 <Control_Init+0x2f8>)
 800079c:	f000 f9e2 	bl	8000b64 <Pid_Param_Init>
	Pid_Param_Init(&WheelD, M4_KP, M4_KI, M4_KD);
 80007a0:	ed9f 2b63 	vldr	d2, [pc, #396]	; 8000930 <Control_Init+0x2b0>
 80007a4:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8000940 <Control_Init+0x2c0>
 80007a8:	ed9f 0b67 	vldr	d0, [pc, #412]	; 8000948 <Control_Init+0x2c8>
 80007ac:	4875      	ldr	r0, [pc, #468]	; (8000984 <Control_Init+0x304>)
 80007ae:	f000 f9d9 	bl	8000b64 <Pid_Param_Init>

	i = 0;
 80007b2:	4b75      	ldr	r3, [pc, #468]	; (8000988 <Control_Init+0x308>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
	limit_integral = 1.0;
 80007b8:	4974      	ldr	r1, [pc, #464]	; (800098c <Control_Init+0x30c>)
 80007ba:	f04f 0200 	mov.w	r2, #0
 80007be:	4b74      	ldr	r3, [pc, #464]	; (8000990 <Control_Init+0x310>)
 80007c0:	e9c1 2300 	strd	r2, r3, [r1]
	pwm_arr = M1_PWM_timer.Init.Period;
 80007c4:	4b63      	ldr	r3, [pc, #396]	; (8000954 <Control_Init+0x2d4>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	ee07 3a90 	vmov	s15, r3
 80007cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007d0:	4b70      	ldr	r3, [pc, #448]	; (8000994 <Control_Init+0x314>)
 80007d2:	ed83 7b00 	vstr	d7, [r3]

	// PCLK1_freq, APB1 timer frequency
	int32_t PCLK1_freq = HAL_RCC_GetPCLK1Freq();
 80007d6:	f009 f91b 	bl	8009a10 <HAL_RCC_GetPCLK1Freq>
 80007da:	4603      	mov	r3, r0
 80007dc:	607b      	str	r3, [r7, #4]

	if((RCC->CFGR & RCC_D2CFGR_D2PPRE1) != 0)
 80007de:	4b6e      	ldr	r3, [pc, #440]	; (8000998 <Control_Init+0x318>)
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d002      	beq.n	80007f0 <Control_Init+0x170>
	{
		PCLK1_freq *=2;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
	}

	int32_t timer_interrupt_freq = (double)PCLK1_freq / (Encoder_Interrupt_timer.Init.Prescaler + 1) / (Encoder_Interrupt_timer.Init.Period + 1);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	ee07 3a90 	vmov	s15, r3
 80007f6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007fa:	4b68      	ldr	r3, [pc, #416]	; (800099c <Control_Init+0x31c>)
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	3301      	adds	r3, #1
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000808:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800080c:	4b63      	ldr	r3, [pc, #396]	; (800099c <Control_Init+0x31c>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	3301      	adds	r3, #1
 8000812:	ee07 3a90 	vmov	s15, r3
 8000816:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800081a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800081e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000822:	ee17 3a90 	vmov	r3, s15
 8000826:	603b      	str	r3, [r7, #0]
	control_period = (double)(1 / (double)timer_interrupt_freq);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	ee07 3a90 	vmov	s15, r3
 800082e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000832:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000836:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800083a:	4b59      	ldr	r3, [pc, #356]	; (80009a0 <Control_Init+0x320>)
 800083c:	ed83 7b00 	vstr	d7, [r3]

	WheelA.integral = 0.0;
 8000840:	4946      	ldr	r1, [pc, #280]	; (800095c <Control_Init+0x2dc>)
 8000842:	f04f 0200 	mov.w	r2, #0
 8000846:	f04f 0300 	mov.w	r3, #0
 800084a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	WheelB.integral = 0.0;
 800084e:	4946      	ldr	r1, [pc, #280]	; (8000968 <Control_Init+0x2e8>)
 8000850:	f04f 0200 	mov.w	r2, #0
 8000854:	f04f 0300 	mov.w	r3, #0
 8000858:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	WheelC.integral = 0.0;
 800085c:	4946      	ldr	r1, [pc, #280]	; (8000978 <Control_Init+0x2f8>)
 800085e:	f04f 0200 	mov.w	r2, #0
 8000862:	f04f 0300 	mov.w	r3, #0
 8000866:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	WheelD.integral = 0.0;
 800086a:	4946      	ldr	r1, [pc, #280]	; (8000984 <Control_Init+0x304>)
 800086c:	f04f 0200 	mov.w	r2, #0
 8000870:	f04f 0300 	mov.w	r3, #0
 8000874:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	WheelA.goal = 0.0;
 8000878:	4938      	ldr	r1, [pc, #224]	; (800095c <Control_Init+0x2dc>)
 800087a:	f04f 0200 	mov.w	r2, #0
 800087e:	f04f 0300 	mov.w	r3, #0
 8000882:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	WheelB.goal = 0.0;
 8000886:	4938      	ldr	r1, [pc, #224]	; (8000968 <Control_Init+0x2e8>)
 8000888:	f04f 0200 	mov.w	r2, #0
 800088c:	f04f 0300 	mov.w	r3, #0
 8000890:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	WheelC.goal = 0.0;
 8000894:	4938      	ldr	r1, [pc, #224]	; (8000978 <Control_Init+0x2f8>)
 8000896:	f04f 0200 	mov.w	r2, #0
 800089a:	f04f 0300 	mov.w	r3, #0
 800089e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	WheelD.goal = 0.0;
 80008a2:	4938      	ldr	r1, [pc, #224]	; (8000984 <Control_Init+0x304>)
 80008a4:	f04f 0200 	mov.w	r2, #0
 80008a8:	f04f 0300 	mov.w	r3, #0
 80008ac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	// stop chassis
	HAL_GPIO_WritePin(WheelA.DIR_pin_type, WheelA.DIR_pin_Num, GPIO_PIN_RESET);
 80008b0:	4b2a      	ldr	r3, [pc, #168]	; (800095c <Control_Init+0x2dc>)
 80008b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b4:	4a29      	ldr	r2, [pc, #164]	; (800095c <Control_Init+0x2dc>)
 80008b6:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 80008ba:	2200      	movs	r2, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f008 f919 	bl	8008af4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelA.pwm_timer), WheelA.pwm_timer_channel, 0);
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <Control_Init+0x2dc>)
 80008c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d105      	bne.n	80008d8 <Control_Init+0x258>
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <Control_Init+0x2dc>)
 80008ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80008d2:	2200      	movs	r2, #0
 80008d4:	635a      	str	r2, [r3, #52]	; 0x34
 80008d6:	e06a      	b.n	80009ae <Control_Init+0x32e>
 80008d8:	4b20      	ldr	r3, [pc, #128]	; (800095c <Control_Init+0x2dc>)
 80008da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008de:	2b04      	cmp	r3, #4
 80008e0:	d105      	bne.n	80008ee <Control_Init+0x26e>
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <Control_Init+0x2dc>)
 80008e4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80008e8:	2300      	movs	r3, #0
 80008ea:	6393      	str	r3, [r2, #56]	; 0x38
 80008ec:	e05f      	b.n	80009ae <Control_Init+0x32e>
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <Control_Init+0x2dc>)
 80008f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008f4:	2b08      	cmp	r3, #8
 80008f6:	d105      	bne.n	8000904 <Control_Init+0x284>
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <Control_Init+0x2dc>)
 80008fa:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80008fe:	2300      	movs	r3, #0
 8000900:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000902:	e054      	b.n	80009ae <Control_Init+0x32e>
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <Control_Init+0x2dc>)
 8000906:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800090a:	2b0c      	cmp	r3, #12
 800090c:	d105      	bne.n	800091a <Control_Init+0x29a>
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <Control_Init+0x2dc>)
 8000910:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000914:	2300      	movs	r3, #0
 8000916:	6413      	str	r3, [r2, #64]	; 0x40
 8000918:	e049      	b.n	80009ae <Control_Init+0x32e>
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <Control_Init+0x2dc>)
 800091c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000920:	2b10      	cmp	r3, #16
 8000922:	d13f      	bne.n	80009a4 <Control_Init+0x324>
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <Control_Init+0x2dc>)
 8000926:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800092a:	2300      	movs	r3, #0
 800092c:	6593      	str	r3, [r2, #88]	; 0x58
 800092e:	e03e      	b.n	80009ae <Control_Init+0x32e>
	...
 800093c:	40490000 	.word	0x40490000
 8000940:	00000000 	.word	0x00000000
 8000944:	404e0000 	.word	0x404e0000
 8000948:	33333333 	.word	0x33333333
 800094c:	40173333 	.word	0x40173333
 8000950:	2400175c 	.word	0x2400175c
 8000954:	2400188c 	.word	0x2400188c
 8000958:	58020c00 	.word	0x58020c00
 800095c:	240000f0 	.word	0x240000f0
 8000960:	24001840 	.word	0x24001840
 8000964:	58020400 	.word	0x58020400
 8000968:	24000200 	.word	0x24000200
 800096c:	240017a8 	.word	0x240017a8
 8000970:	240018d8 	.word	0x240018d8
 8000974:	58021000 	.word	0x58021000
 8000978:	24000310 	.word	0x24000310
 800097c:	240017f4 	.word	0x240017f4
 8000980:	58020800 	.word	0x58020800
 8000984:	24000420 	.word	0x24000420
 8000988:	24000530 	.word	0x24000530
 800098c:	240000d8 	.word	0x240000d8
 8000990:	3ff00000 	.word	0x3ff00000
 8000994:	240000e0 	.word	0x240000e0
 8000998:	58024400 	.word	0x58024400
 800099c:	24001924 	.word	0x24001924
 80009a0:	240000e8 	.word	0x240000e8
 80009a4:	4b6b      	ldr	r3, [pc, #428]	; (8000b54 <Control_Init+0x4d4>)
 80009a6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80009aa:	2300      	movs	r3, #0
 80009ac:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_GPIO_WritePin(WheelB.DIR_pin_type, WheelB.DIR_pin_Num, GPIO_PIN_RESET);
 80009ae:	4b6a      	ldr	r3, [pc, #424]	; (8000b58 <Control_Init+0x4d8>)
 80009b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b2:	4a69      	ldr	r2, [pc, #420]	; (8000b58 <Control_Init+0x4d8>)
 80009b4:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 80009b8:	2200      	movs	r2, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f008 f89a 	bl	8008af4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelB.pwm_timer), WheelB.pwm_timer_channel, 0);
 80009c0:	4b65      	ldr	r3, [pc, #404]	; (8000b58 <Control_Init+0x4d8>)
 80009c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d105      	bne.n	80009d6 <Control_Init+0x356>
 80009ca:	4b63      	ldr	r3, [pc, #396]	; (8000b58 <Control_Init+0x4d8>)
 80009cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80009d0:	2200      	movs	r2, #0
 80009d2:	635a      	str	r2, [r3, #52]	; 0x34
 80009d4:	e030      	b.n	8000a38 <Control_Init+0x3b8>
 80009d6:	4b60      	ldr	r3, [pc, #384]	; (8000b58 <Control_Init+0x4d8>)
 80009d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009dc:	2b04      	cmp	r3, #4
 80009de:	d105      	bne.n	80009ec <Control_Init+0x36c>
 80009e0:	4b5d      	ldr	r3, [pc, #372]	; (8000b58 <Control_Init+0x4d8>)
 80009e2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80009e6:	2300      	movs	r3, #0
 80009e8:	6393      	str	r3, [r2, #56]	; 0x38
 80009ea:	e025      	b.n	8000a38 <Control_Init+0x3b8>
 80009ec:	4b5a      	ldr	r3, [pc, #360]	; (8000b58 <Control_Init+0x4d8>)
 80009ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009f2:	2b08      	cmp	r3, #8
 80009f4:	d105      	bne.n	8000a02 <Control_Init+0x382>
 80009f6:	4b58      	ldr	r3, [pc, #352]	; (8000b58 <Control_Init+0x4d8>)
 80009f8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80009fc:	2300      	movs	r3, #0
 80009fe:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000a00:	e01a      	b.n	8000a38 <Control_Init+0x3b8>
 8000a02:	4b55      	ldr	r3, [pc, #340]	; (8000b58 <Control_Init+0x4d8>)
 8000a04:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a08:	2b0c      	cmp	r3, #12
 8000a0a:	d105      	bne.n	8000a18 <Control_Init+0x398>
 8000a0c:	4b52      	ldr	r3, [pc, #328]	; (8000b58 <Control_Init+0x4d8>)
 8000a0e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a12:	2300      	movs	r3, #0
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	e00f      	b.n	8000a38 <Control_Init+0x3b8>
 8000a18:	4b4f      	ldr	r3, [pc, #316]	; (8000b58 <Control_Init+0x4d8>)
 8000a1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a1e:	2b10      	cmp	r3, #16
 8000a20:	d105      	bne.n	8000a2e <Control_Init+0x3ae>
 8000a22:	4b4d      	ldr	r3, [pc, #308]	; (8000b58 <Control_Init+0x4d8>)
 8000a24:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a28:	2300      	movs	r3, #0
 8000a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2c:	e004      	b.n	8000a38 <Control_Init+0x3b8>
 8000a2e:	4b4a      	ldr	r3, [pc, #296]	; (8000b58 <Control_Init+0x4d8>)
 8000a30:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a34:	2300      	movs	r3, #0
 8000a36:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_GPIO_WritePin(WheelC.DIR_pin_type, WheelC.DIR_pin_Num, GPIO_PIN_RESET);
 8000a38:	4b48      	ldr	r3, [pc, #288]	; (8000b5c <Control_Init+0x4dc>)
 8000a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3c:	4a47      	ldr	r2, [pc, #284]	; (8000b5c <Control_Init+0x4dc>)
 8000a3e:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8000a42:	2200      	movs	r2, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f008 f855 	bl	8008af4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelC.pwm_timer), WheelC.pwm_timer_channel, 0);
 8000a4a:	4b44      	ldr	r3, [pc, #272]	; (8000b5c <Control_Init+0x4dc>)
 8000a4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d105      	bne.n	8000a60 <Control_Init+0x3e0>
 8000a54:	4b41      	ldr	r3, [pc, #260]	; (8000b5c <Control_Init+0x4dc>)
 8000a56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5e:	e030      	b.n	8000ac2 <Control_Init+0x442>
 8000a60:	4b3e      	ldr	r3, [pc, #248]	; (8000b5c <Control_Init+0x4dc>)
 8000a62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	d105      	bne.n	8000a76 <Control_Init+0x3f6>
 8000a6a:	4b3c      	ldr	r3, [pc, #240]	; (8000b5c <Control_Init+0x4dc>)
 8000a6c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a70:	2300      	movs	r3, #0
 8000a72:	6393      	str	r3, [r2, #56]	; 0x38
 8000a74:	e025      	b.n	8000ac2 <Control_Init+0x442>
 8000a76:	4b39      	ldr	r3, [pc, #228]	; (8000b5c <Control_Init+0x4dc>)
 8000a78:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a7c:	2b08      	cmp	r3, #8
 8000a7e:	d105      	bne.n	8000a8c <Control_Init+0x40c>
 8000a80:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <Control_Init+0x4dc>)
 8000a82:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a86:	2300      	movs	r3, #0
 8000a88:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000a8a:	e01a      	b.n	8000ac2 <Control_Init+0x442>
 8000a8c:	4b33      	ldr	r3, [pc, #204]	; (8000b5c <Control_Init+0x4dc>)
 8000a8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a92:	2b0c      	cmp	r3, #12
 8000a94:	d105      	bne.n	8000aa2 <Control_Init+0x422>
 8000a96:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <Control_Init+0x4dc>)
 8000a98:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa0:	e00f      	b.n	8000ac2 <Control_Init+0x442>
 8000aa2:	4b2e      	ldr	r3, [pc, #184]	; (8000b5c <Control_Init+0x4dc>)
 8000aa4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000aa8:	2b10      	cmp	r3, #16
 8000aaa:	d105      	bne.n	8000ab8 <Control_Init+0x438>
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <Control_Init+0x4dc>)
 8000aae:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab6:	e004      	b.n	8000ac2 <Control_Init+0x442>
 8000ab8:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <Control_Init+0x4dc>)
 8000aba:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000abe:	2300      	movs	r3, #0
 8000ac0:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_GPIO_WritePin(WheelD.DIR_pin_type, WheelD.DIR_pin_Num, GPIO_PIN_RESET);
 8000ac2:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <Control_Init+0x4e0>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac6:	4a26      	ldr	r2, [pc, #152]	; (8000b60 <Control_Init+0x4e0>)
 8000ac8:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8000acc:	2200      	movs	r2, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f008 f810 	bl	8008af4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <Control_Init+0x4e0>)
 8000ad6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d105      	bne.n	8000aea <Control_Init+0x46a>
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <Control_Init+0x4e0>)
 8000ae0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ae8:	e030      	b.n	8000b4c <Control_Init+0x4cc>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <Control_Init+0x4e0>)
 8000aec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000af0:	2b04      	cmp	r3, #4
 8000af2:	d105      	bne.n	8000b00 <Control_Init+0x480>
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <Control_Init+0x4e0>)
 8000af6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000afa:	2300      	movs	r3, #0
 8000afc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000afe:	e025      	b.n	8000b4c <Control_Init+0x4cc>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b00:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <Control_Init+0x4e0>)
 8000b02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000b06:	2b08      	cmp	r3, #8
 8000b08:	d105      	bne.n	8000b16 <Control_Init+0x496>
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <Control_Init+0x4e0>)
 8000b0c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b10:	2300      	movs	r3, #0
 8000b12:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000b14:	e01a      	b.n	8000b4c <Control_Init+0x4cc>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <Control_Init+0x4e0>)
 8000b18:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000b1c:	2b0c      	cmp	r3, #12
 8000b1e:	d105      	bne.n	8000b2c <Control_Init+0x4ac>
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <Control_Init+0x4e0>)
 8000b22:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b26:	2300      	movs	r3, #0
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b2a:	e00f      	b.n	8000b4c <Control_Init+0x4cc>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <Control_Init+0x4e0>)
 8000b2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000b32:	2b10      	cmp	r3, #16
 8000b34:	d105      	bne.n	8000b42 <Control_Init+0x4c2>
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <Control_Init+0x4e0>)
 8000b38:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000b40:	e004      	b.n	8000b4c <Control_Init+0x4cc>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <Control_Init+0x4e0>)
 8000b44:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b48:	2300      	movs	r3, #0
 8000b4a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	240000f0 	.word	0x240000f0
 8000b58:	24000200 	.word	0x24000200
 8000b5c:	24000310 	.word	0x24000310
 8000b60:	24000420 	.word	0x24000420

08000b64 <Pid_Param_Init>:
/**
 * @ brief assign the pid gain value into the PID_Controll object
 * @ retval None
 * */
void Pid_Param_Init(PID_Control *Wheel_, double kp, double ki, double kd)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	61f8      	str	r0, [r7, #28]
 8000b6c:	ed87 0b04 	vstr	d0, [r7, #16]
 8000b70:	ed87 1b02 	vstr	d1, [r7, #8]
 8000b74:	ed87 2b00 	vstr	d2, [r7]
	Wheel_->Kp = kp;
 8000b78:	69f9      	ldr	r1, [r7, #28]
 8000b7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b7e:	e9c1 2300 	strd	r2, r3, [r1]
	Wheel_->Ki = ki;
 8000b82:	69f9      	ldr	r1, [r7, #28]
 8000b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b88:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Wheel_->Kd = kd;
 8000b8c:	69f9      	ldr	r1, [r7, #28]
 8000b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b92:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8000b96:	bf00      	nop
 8000b98:	3724      	adds	r7, #36	; 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <Motor_Driver_Init>:
#ifdef G2_18V17
void Motor_Driver_Init(PID_Control *Wheel_,
		GPIO_TypeDef *DIR_pin_type, uint16_t DIR_pin_num_,
		TIM_HandleTypeDef encoder_timer_, uint32_t encoder_timer_channel_, int encoder_dir_,
		TIM_HandleTypeDef pwm_timer_, uint32_t pwm_timer_channel_)
{
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	61fb      	str	r3, [r7, #28]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	80fb      	strh	r3, [r7, #6]
	Wheel_->DIR_pin_type = DIR_pin_type;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	661a      	str	r2, [r3, #96]	; 0x60
	Wheel_->DIR_pin_Num = DIR_pin_num_;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	88fa      	ldrh	r2, [r7, #6]
 8000bbe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	Wheel_->encoder_timer = encoder_timer_;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3368      	adds	r3, #104	; 0x68
 8000bc6:	f107 011c 	add.w	r1, r7, #28
 8000bca:	224c      	movs	r2, #76	; 0x4c
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00e fb23 	bl	800f218 <memcpy>
	Wheel_->encoder_timer_channel = encoder_timer_channel_;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000bd6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	Wheel_->encoder_dir = encoder_dir_;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000bde:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	Wheel_->pwm_timer = pwm_timer_;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	33bc      	adds	r3, #188	; 0xbc
 8000be6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000bea:	224c      	movs	r2, #76	; 0x4c
 8000bec:	4618      	mov	r0, r3
 8000bee:	f00e fb13 	bl	800f218 <memcpy>
	Wheel_->pwm_timer_channel = pwm_timer_channel_;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000bf8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c06:	b002      	add	sp, #8
 8000c08:	4770      	bx	lr
	...

08000c0c <Control_Timer_Init>:
 * @ brief initialize the timers that encoder and pwm used
 * @ all the definition in the function are in "control.h"
 * @ retval None
 * */
void Control_Timer_Init()
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&M1_Encoder_timer, M1_Encoder_timerchannel);
 8000c10:	2104      	movs	r1, #4
 8000c12:	4810      	ldr	r0, [pc, #64]	; (8000c54 <Control_Timer_Init+0x48>)
 8000c14:	f00a ffe2 	bl	800bbdc <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M1_PWM_timer, M1_PWM_timerchannel);
 8000c18:	2100      	movs	r1, #0
 8000c1a:	480f      	ldr	r0, [pc, #60]	; (8000c58 <Control_Timer_Init+0x4c>)
 8000c1c:	f00a fe1c 	bl	800b858 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M2_Encoder_timer, M2_Encoder_timerchannel);
 8000c20:	2104      	movs	r1, #4
 8000c22:	480e      	ldr	r0, [pc, #56]	; (8000c5c <Control_Timer_Init+0x50>)
 8000c24:	f00a ffda 	bl	800bbdc <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M2_PWM_timer, M2_PWM_timerchannel);
 8000c28:	2104      	movs	r1, #4
 8000c2a:	480b      	ldr	r0, [pc, #44]	; (8000c58 <Control_Timer_Init+0x4c>)
 8000c2c:	f00a fe14 	bl	800b858 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M3_Encoder_timer, M3_Encoder_timerchannel);
 8000c30:	2104      	movs	r1, #4
 8000c32:	480b      	ldr	r0, [pc, #44]	; (8000c60 <Control_Timer_Init+0x54>)
 8000c34:	f00a ffd2 	bl	800bbdc <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M3_PWM_timer, M3_PWM_timerchannel);
 8000c38:	2100      	movs	r1, #0
 8000c3a:	480a      	ldr	r0, [pc, #40]	; (8000c64 <Control_Timer_Init+0x58>)
 8000c3c:	f00a fe0c 	bl	800b858 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M4_Encoder_timer, M4_Encoder_timerchannel);
 8000c40:	2104      	movs	r1, #4
 8000c42:	4809      	ldr	r0, [pc, #36]	; (8000c68 <Control_Timer_Init+0x5c>)
 8000c44:	f00a ffca 	bl	800bbdc <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M4_PWM_timer, M4_PWM_timerchannel);
 8000c48:	2104      	movs	r1, #4
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <Control_Timer_Init+0x58>)
 8000c4c:	f00a fe04 	bl	800b858 <HAL_TIM_PWM_Start>
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2400175c 	.word	0x2400175c
 8000c58:	2400188c 	.word	0x2400188c
 8000c5c:	24001840 	.word	0x24001840
 8000c60:	240017a8 	.word	0x240017a8
 8000c64:	240018d8 	.word	0x240018d8
 8000c68:	240017f4 	.word	0x240017f4
 8000c6c:	00000000 	.word	0x00000000

08000c70 <Hardware_Info_Init>:
/**
 * @ brief assign the hardware value for motor and chassis radius error
 * @ retval None
 * */
void Hardware_Info_Init()
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
	radius_error_a = 1.0;
 8000c74:	4914      	ldr	r1, [pc, #80]	; (8000cc8 <Hardware_Info_Init+0x58>)
 8000c76:	f04f 0200 	mov.w	r2, #0
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <Hardware_Info_Init+0x5c>)
 8000c7c:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_b = 1.0;
 8000c80:	4913      	ldr	r1, [pc, #76]	; (8000cd0 <Hardware_Info_Init+0x60>)
 8000c82:	f04f 0200 	mov.w	r2, #0
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <Hardware_Info_Init+0x5c>)
 8000c88:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_c = 1.0;
 8000c8c:	4911      	ldr	r1, [pc, #68]	; (8000cd4 <Hardware_Info_Init+0x64>)
 8000c8e:	f04f 0200 	mov.w	r2, #0
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <Hardware_Info_Init+0x5c>)
 8000c94:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_d = 1.0;
 8000c98:	490f      	ldr	r1, [pc, #60]	; (8000cd8 <Hardware_Info_Init+0x68>)
 8000c9a:	f04f 0200 	mov.w	r2, #0
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <Hardware_Info_Init+0x5c>)
 8000ca0:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_chassis = 0.8;
 8000ca4:	490d      	ldr	r1, [pc, #52]	; (8000cdc <Hardware_Info_Init+0x6c>)
 8000ca6:	a306      	add	r3, pc, #24	; (adr r3, 8000cc0 <Hardware_Info_Init+0x50>)
 8000ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cac:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	f3af 8000 	nop.w
 8000cc0:	9999999a 	.word	0x9999999a
 8000cc4:	3fe99999 	.word	0x3fe99999
 8000cc8:	24000098 	.word	0x24000098
 8000ccc:	3ff00000 	.word	0x3ff00000
 8000cd0:	240000a0 	.word	0x240000a0
 8000cd4:	240000a8 	.word	0x240000a8
 8000cd8:	240000b0 	.word	0x240000b0
 8000cdc:	240000b8 	.word	0x240000b8

08000ce0 <PID_Controller>:
 * @ brief PID control for the motor
 * @ param Wheel_ the object declare for each motor (WheelA, WheelB, WheelC)
 * @ retval None
 * */
void PID_Controller(PID_Control *Wheel_)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

	Wheel_->CountNum = __HAL_TIM_GetCounter(&Wheel_->encoder_timer)* Wheel_->encoder_dir;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	fb12 f303 	smulbb	r3, r2, r3
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	b21a      	sxth	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	831a      	strh	r2, [r3, #24]

	if(Wheel_ == &WheelA)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4abe      	ldr	r2, [pc, #760]	; (8001000 <PID_Controller+0x320>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d113      	bne.n	8000d34 <PID_Controller+0x54>
	{
		Wheel_->rps = (double)Wheel_->CountNum / ((double)4 * encoder_resolution * (double)(12 / 1.125) * control_period);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000d12:	ee07 3a90 	vmov	s15, r3
 8000d16:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000d1a:	4bba      	ldr	r3, [pc, #744]	; (8001004 <PID_Controller+0x324>)
 8000d1c:	ed93 7b00 	vldr	d7, [r3]
 8000d20:	ed9f 6bb3 	vldr	d6, [pc, #716]	; 8000ff0 <PID_Controller+0x310>
 8000d24:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d28:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	ed83 7b08 	vstr	d7, [r3, #32]
 8000d32:	e012      	b.n	8000d5a <PID_Controller+0x7a>
	}
	else
	{
		Wheel_->rps = (double)Wheel_->CountNum / ((double)4 * encoder_resolution * speed_reduction_ratio * control_period);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000d3a:	ee07 3a90 	vmov	s15, r3
 8000d3e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000d42:	4bb0      	ldr	r3, [pc, #704]	; (8001004 <PID_Controller+0x324>)
 8000d44:	ed93 7b00 	vldr	d7, [r3]
 8000d48:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8000ff8 <PID_Controller+0x318>
 8000d4c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d50:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	ed83 7b08 	vstr	d7, [r3, #32]
	}

	__HAL_TIM_SetCounter(&Wheel_->encoder_timer ,0);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
//	{
//		sssss[i] = Wheel_->rps;
//		i++;
//	}

	Wheel_->err = Wheel_->goal - Wheel_->rps;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	ed93 7b08 	vldr	d7, [r3, #32]
 8000d6e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	Wheel_->propotional = (double)Wheel_->err * Wheel_->Kp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	ed93 7b00 	vldr	d7, [r3]
 8000d84:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	Wheel_->integral += (double)Wheel_->err * Wheel_->Ki * control_period;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	ed93 7b02 	vldr	d7, [r3, #8]
 8000da0:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000da4:	4b97      	ldr	r3, [pc, #604]	; (8001004 <PID_Controller+0x324>)
 8000da6:	ed93 7b00 	vldr	d7, [r3]
 8000daa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000dae:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	Wheel_->integral = (Wheel_->integral > limit_integral)? limit_integral : Wheel_->integral;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000dbe:	4b92      	ldr	r3, [pc, #584]	; (8001008 <PID_Controller+0x328>)
 8000dc0:	ed93 7b00 	vldr	d7, [r3]
 8000dc4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dcc:	dd03      	ble.n	8000dd6 <PID_Controller+0xf6>
 8000dce:	4b8e      	ldr	r3, [pc, #568]	; (8001008 <PID_Controller+0x328>)
 8000dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd4:	e002      	b.n	8000ddc <PID_Controller+0xfc>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	Wheel_->integral = (Wheel_->integral < (double)(-1) * limit_integral)? (double)(-1) * limit_integral : Wheel_->integral;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000de8:	4b87      	ldr	r3, [pc, #540]	; (8001008 <PID_Controller+0x328>)
 8000dea:	ed93 7b00 	vldr	d7, [r3]
 8000dee:	eeb1 7b47 	vneg.f64	d7, d7
 8000df2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dfa:	d505      	bpl.n	8000e08 <PID_Controller+0x128>
 8000dfc:	4b82      	ldr	r3, [pc, #520]	; (8001008 <PID_Controller+0x328>)
 8000dfe:	ed93 7b00 	vldr	d7, [r3]
 8000e02:	eeb1 7b47 	vneg.f64	d7, d7
 8000e06:	e002      	b.n	8000e0e <PID_Controller+0x12e>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	Wheel_->differential = (double) Wheel_->Kd * (-1) * (Wheel_->rps - Wheel_->rps_before) / control_period;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	ed93 7b04 	vldr	d7, [r3, #16]
 8000e1a:	eeb1 6b47 	vneg.f64	d6, d7
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	ed93 5b08 	vldr	d5, [r3, #32]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8000e2a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000e2e:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000e32:	4b74      	ldr	r3, [pc, #464]	; (8001004 <PID_Controller+0x324>)
 8000e34:	ed93 6b00 	vldr	d6, [r3]
 8000e38:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50

	Wheel_->duty = Wheel_->propotional + Wheel_->integral + Wheel_->differential;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000e4e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8000e58:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	Wheel_->duty = (Wheel_->duty > 1)? 1 : Wheel_->duty;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000e68:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e6c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e74:	dd03      	ble.n	8000e7e <PID_Controller+0x19e>
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	4b64      	ldr	r3, [pc, #400]	; (800100c <PID_Controller+0x32c>)
 8000e7c:	e002      	b.n	8000e84 <PID_Controller+0x1a4>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000e84:	6879      	ldr	r1, [r7, #4]
 8000e86:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	Wheel_->duty = (Wheel_->duty < -1)? -1 : Wheel_->duty;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000e90:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000e94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9c:	d503      	bpl.n	8000ea6 <PID_Controller+0x1c6>
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	4b5b      	ldr	r3, [pc, #364]	; (8001010 <PID_Controller+0x330>)
 8000ea4:	e002      	b.n	8000eac <PID_Controller+0x1cc>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		HAL_GPIO_WritePin(Wheel_->PHASE_pin_type, Wheel_->PHASE_pin_Num, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
	}
#endif
#ifdef G2_18V17
	if(Wheel_->duty >= 0)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000eb8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec0:	f2c0 80aa 	blt.w	8001018 <PID_Controller+0x338>
	{
		HAL_GPIO_WritePin(Wheel_->DIR_pin_type, Wheel_->DIR_pin_Num, GPIO_PIN_RESET);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000ece:	2200      	movs	r2, #0
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f007 fe0f 	bl	8008af4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d112      	bne.n	8000f06 <PID_Controller+0x226>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000ee6:	4b4b      	ldr	r3, [pc, #300]	; (8001014 <PID_Controller+0x334>)
 8000ee8:	ed93 7b00 	vldr	d7, [r3]
 8000eec:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ef0:	eeb0 7bc7 	vabs.f64	d7, d7
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000efa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000efe:	ee17 2a90 	vmov	r2, s15
 8000f02:	635a      	str	r2, [r3, #52]	; 0x34
 8000f04:	e11b      	b.n	800113e <PID_Controller+0x45e>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d112      	bne.n	8000f36 <PID_Controller+0x256>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f16:	4b3f      	ldr	r3, [pc, #252]	; (8001014 <PID_Controller+0x334>)
 8000f18:	ed93 7b00 	vldr	d7, [r3]
 8000f1c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f20:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000f2a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f2e:	ee17 3a90 	vmov	r3, s15
 8000f32:	6393      	str	r3, [r2, #56]	; 0x38
 8000f34:	e103      	b.n	800113e <PID_Controller+0x45e>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f3c:	2b08      	cmp	r3, #8
 8000f3e:	d112      	bne.n	8000f66 <PID_Controller+0x286>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f46:	4b33      	ldr	r3, [pc, #204]	; (8001014 <PID_Controller+0x334>)
 8000f48:	ed93 7b00 	vldr	d7, [r3]
 8000f4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f50:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000f5a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f5e:	ee17 3a90 	vmov	r3, s15
 8000f62:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000f64:	e0eb      	b.n	800113e <PID_Controller+0x45e>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f6c:	2b0c      	cmp	r3, #12
 8000f6e:	d112      	bne.n	8000f96 <PID_Controller+0x2b6>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f76:	4b27      	ldr	r3, [pc, #156]	; (8001014 <PID_Controller+0x334>)
 8000f78:	ed93 7b00 	vldr	d7, [r3]
 8000f7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f80:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000f8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f8e:	ee17 3a90 	vmov	r3, s15
 8000f92:	6413      	str	r3, [r2, #64]	; 0x40
 8000f94:	e0d3      	b.n	800113e <PID_Controller+0x45e>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f9c:	2b10      	cmp	r3, #16
 8000f9e:	d112      	bne.n	8000fc6 <PID_Controller+0x2e6>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <PID_Controller+0x334>)
 8000fa8:	ed93 7b00 	vldr	d7, [r3]
 8000fac:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000fb0:	eeb0 7bc7 	vabs.f64	d7, d7
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000fba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fbe:	ee17 3a90 	vmov	r3, s15
 8000fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8000fc4:	e0bb      	b.n	800113e <PID_Controller+0x45e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <PID_Controller+0x334>)
 8000fce:	ed93 7b00 	vldr	d7, [r3]
 8000fd2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000fd6:	eeb0 7bc7 	vabs.f64	d7, d7
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000fe0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe4:	ee17 3a90 	vmov	r3, s15
 8000fe8:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000fea:	e0a8      	b.n	800113e <PID_Controller+0x45e>
 8000fec:	f3af 8000 	nop.w
 8000ff0:	55555555 	.word	0x55555555
 8000ff4:	40d55555 	.word	0x40d55555
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40f00000 	.word	0x40f00000
 8001000:	240000f0 	.word	0x240000f0
 8001004:	240000e8 	.word	0x240000e8
 8001008:	240000d8 	.word	0x240000d8
 800100c:	3ff00000 	.word	0x3ff00000
 8001010:	bff00000 	.word	0xbff00000
 8001014:	240000e0 	.word	0x240000e0
	}
	else
	{
		HAL_GPIO_WritePin(Wheel_->DIR_pin_type, Wheel_->DIR_pin_Num, GPIO_PIN_SET);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001022:	2201      	movs	r2, #1
 8001024:	4619      	mov	r1, r3
 8001026:	f007 fd65 	bl	8008af4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001030:	2b00      	cmp	r3, #0
 8001032:	d112      	bne.n	800105a <PID_Controller+0x37a>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800103a:	4b46      	ldr	r3, [pc, #280]	; (8001154 <PID_Controller+0x474>)
 800103c:	ed93 7b00 	vldr	d7, [r3]
 8001040:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001044:	eeb0 7bc7 	vabs.f64	d7, d7
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800104e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001052:	ee17 2a90 	vmov	r2, s15
 8001056:	635a      	str	r2, [r3, #52]	; 0x34
 8001058:	e071      	b.n	800113e <PID_Controller+0x45e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001060:	2b04      	cmp	r3, #4
 8001062:	d112      	bne.n	800108a <PID_Controller+0x3aa>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800106a:	4b3a      	ldr	r3, [pc, #232]	; (8001154 <PID_Controller+0x474>)
 800106c:	ed93 7b00 	vldr	d7, [r3]
 8001070:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001074:	eeb0 7bc7 	vabs.f64	d7, d7
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800107e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001082:	ee17 3a90 	vmov	r3, s15
 8001086:	6393      	str	r3, [r2, #56]	; 0x38
 8001088:	e059      	b.n	800113e <PID_Controller+0x45e>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001090:	2b08      	cmp	r3, #8
 8001092:	d112      	bne.n	80010ba <PID_Controller+0x3da>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800109a:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <PID_Controller+0x474>)
 800109c:	ed93 7b00 	vldr	d7, [r3]
 80010a0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010a4:	eeb0 7bc7 	vabs.f64	d7, d7
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80010ae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010b2:	ee17 3a90 	vmov	r3, s15
 80010b6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80010b8:	e041      	b.n	800113e <PID_Controller+0x45e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010c0:	2b0c      	cmp	r3, #12
 80010c2:	d112      	bne.n	80010ea <PID_Controller+0x40a>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80010ca:	4b22      	ldr	r3, [pc, #136]	; (8001154 <PID_Controller+0x474>)
 80010cc:	ed93 7b00 	vldr	d7, [r3]
 80010d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010d4:	eeb0 7bc7 	vabs.f64	d7, d7
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80010de:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010e2:	ee17 3a90 	vmov	r3, s15
 80010e6:	6413      	str	r3, [r2, #64]	; 0x40
 80010e8:	e029      	b.n	800113e <PID_Controller+0x45e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010f0:	2b10      	cmp	r3, #16
 80010f2:	d112      	bne.n	800111a <PID_Controller+0x43a>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <PID_Controller+0x474>)
 80010fc:	ed93 7b00 	vldr	d7, [r3]
 8001100:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001104:	eeb0 7bc7 	vabs.f64	d7, d7
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800110e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001112:	ee17 3a90 	vmov	r3, s15
 8001116:	6593      	str	r3, [r2, #88]	; 0x58
 8001118:	e011      	b.n	800113e <PID_Controller+0x45e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <PID_Controller+0x474>)
 8001122:	ed93 7b00 	vldr	d7, [r3]
 8001126:	ee26 7b07 	vmul.f64	d7, d6, d7
 800112a:	eeb0 7bc7 	vabs.f64	d7, d7
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001134:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001138:	ee17 3a90 	vmov	r3, s15
 800113c:	65d3      	str	r3, [r2, #92]	; 0x5c
	}
#endif

	Wheel_->rps_before = Wheel_->rps;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	240000e0 	.word	0x240000e0

08001158 <Forward_Kinematics>:
 *       /     \        y(+) ←---
 *      B-------C
 * @ retval None
 * */
void Forward_Kinematics(double x, double y, double w)
{
 8001158:	b480      	push	{r7}
 800115a:	b08f      	sub	sp, #60	; 0x3c
 800115c:	af00      	add	r7, sp, #0
 800115e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001162:	ed87 1b02 	vstr	d1, [r7, #8]
 8001166:	ed87 2b00 	vstr	d2, [r7]
	double omega_a = (y + w * chassis_radius * radius_error_chassis)/(wheel_radius * radius_error_a);
 800116a:	ed97 7b00 	vldr	d7, [r7]
 800116e:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8001290 <Forward_Kinematics+0x138>
 8001172:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001176:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <Forward_Kinematics+0x150>)
 8001178:	ed93 7b00 	vldr	d7, [r3]
 800117c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001180:	ed97 7b02 	vldr	d7, [r7, #8]
 8001184:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001188:	4b48      	ldr	r3, [pc, #288]	; (80012ac <Forward_Kinematics+0x154>)
 800118a:	ed93 7b00 	vldr	d7, [r3]
 800118e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8001298 <Forward_Kinematics+0x140>
 8001192:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001196:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800119a:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	double omega_b = (-x + w * chassis_radius * radius_error_chassis)/(wheel_radius * radius_error_b);
 800119e:	ed97 7b00 	vldr	d7, [r7]
 80011a2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8001290 <Forward_Kinematics+0x138>
 80011a6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011aa:	4b3f      	ldr	r3, [pc, #252]	; (80012a8 <Forward_Kinematics+0x150>)
 80011ac:	ed93 7b00 	vldr	d7, [r3]
 80011b0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011b4:	ed97 7b04 	vldr	d7, [r7, #16]
 80011b8:	ee36 5b47 	vsub.f64	d5, d6, d7
 80011bc:	4b3c      	ldr	r3, [pc, #240]	; (80012b0 <Forward_Kinematics+0x158>)
 80011be:	ed93 7b00 	vldr	d7, [r3]
 80011c2:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8001298 <Forward_Kinematics+0x140>
 80011c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011ca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011ce:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	double omega_c = (-y + w * chassis_radius * radius_error_chassis)/(wheel_radius * radius_error_c);
 80011d2:	ed97 7b00 	vldr	d7, [r7]
 80011d6:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8001290 <Forward_Kinematics+0x138>
 80011da:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011de:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <Forward_Kinematics+0x150>)
 80011e0:	ed93 7b00 	vldr	d7, [r3]
 80011e4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011e8:	ed97 7b02 	vldr	d7, [r7, #8]
 80011ec:	ee36 5b47 	vsub.f64	d5, d6, d7
 80011f0:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <Forward_Kinematics+0x15c>)
 80011f2:	ed93 7b00 	vldr	d7, [r3]
 80011f6:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8001298 <Forward_Kinematics+0x140>
 80011fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011fe:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001202:	ed87 7b08 	vstr	d7, [r7, #32]
	double omega_d = (x + w * chassis_radius * radius_error_chassis)/(wheel_radius * radius_error_d);
 8001206:	ed97 7b00 	vldr	d7, [r7]
 800120a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001290 <Forward_Kinematics+0x138>
 800120e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001212:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <Forward_Kinematics+0x150>)
 8001214:	ed93 7b00 	vldr	d7, [r3]
 8001218:	ee26 6b07 	vmul.f64	d6, d6, d7
 800121c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001220:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <Forward_Kinematics+0x160>)
 8001226:	ed93 7b00 	vldr	d7, [r3]
 800122a:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8001298 <Forward_Kinematics+0x140>
 800122e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001232:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001236:	ed87 7b06 	vstr	d7, [r7, #24]

	WheelA.goal = omega_a / (2 * M_PI);
 800123a:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 800123e:	ed9f 5b18 	vldr	d5, [pc, #96]	; 80012a0 <Forward_Kinematics+0x148>
 8001242:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <Forward_Kinematics+0x164>)
 8001248:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	WheelB.goal = omega_b / (2 * M_PI);
 800124c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001250:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80012a0 <Forward_Kinematics+0x148>
 8001254:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <Forward_Kinematics+0x168>)
 800125a:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	WheelC.goal = omega_c / (2 * M_PI);
 800125e:	ed97 6b08 	vldr	d6, [r7, #32]
 8001262:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 80012a0 <Forward_Kinematics+0x148>
 8001266:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <Forward_Kinematics+0x16c>)
 800126c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	WheelD.goal = omega_d / (2 * M_PI);
 8001270:	ed97 6b06 	vldr	d6, [r7, #24]
 8001274:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80012a0 <Forward_Kinematics+0x148>
 8001278:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <Forward_Kinematics+0x170>)
 800127e:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
}
 8001282:	bf00      	nop
 8001284:	373c      	adds	r7, #60	; 0x3c
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	33333333 	.word	0x33333333
 8001294:	3fd33333 	.word	0x3fd33333
 8001298:	6c8b4396 	.word	0x6c8b4396
 800129c:	3fa9fbe7 	.word	0x3fa9fbe7
 80012a0:	54442d18 	.word	0x54442d18
 80012a4:	401921fb 	.word	0x401921fb
 80012a8:	240000b8 	.word	0x240000b8
 80012ac:	24000098 	.word	0x24000098
 80012b0:	240000a0 	.word	0x240000a0
 80012b4:	240000a8 	.word	0x240000a8
 80012b8:	240000b0 	.word	0x240000b0
 80012bc:	240000f0 	.word	0x240000f0
 80012c0:	24000200 	.word	0x24000200
 80012c4:	24000310 	.word	0x24000310
 80012c8:	24000420 	.word	0x24000420
 80012cc:	00000000 	.word	0x00000000

080012d0 <Inverse_Kinematics>:


void Inverse_Kinematics(PID_Control *WheelA_, PID_Control *WheelB_, PID_Control *WheelC_, PID_Control *WheelD_)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b092      	sub	sp, #72	; 0x48
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
 80012dc:	603b      	str	r3, [r7, #0]
	double omega_a = WheelA_->rps * (2 * M_PI) * (wheel_radius * radius_error_a);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	ed93 7b08 	vldr	d7, [r3, #32]
 80012e4:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001400 <Inverse_Kinematics+0x130>
 80012e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80012ec:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <Inverse_Kinematics+0x148>)
 80012ee:	ed93 7b00 	vldr	d7, [r3]
 80012f2:	ed9f 5b45 	vldr	d5, [pc, #276]	; 8001408 <Inverse_Kinematics+0x138>
 80012f6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80012fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012fe:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	double omega_b = WheelB_->rps * (2 * M_PI) * (wheel_radius * radius_error_b);
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	ed93 7b08 	vldr	d7, [r3, #32]
 8001308:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8001400 <Inverse_Kinematics+0x130>
 800130c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001310:	4b42      	ldr	r3, [pc, #264]	; (800141c <Inverse_Kinematics+0x14c>)
 8001312:	ed93 7b00 	vldr	d7, [r3]
 8001316:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8001408 <Inverse_Kinematics+0x138>
 800131a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800131e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001322:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	double omega_c = WheelC_->rps * (2 * M_PI) * (wheel_radius * radius_error_c);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	ed93 7b08 	vldr	d7, [r3, #32]
 800132c:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8001400 <Inverse_Kinematics+0x130>
 8001330:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001334:	4b3a      	ldr	r3, [pc, #232]	; (8001420 <Inverse_Kinematics+0x150>)
 8001336:	ed93 7b00 	vldr	d7, [r3]
 800133a:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8001408 <Inverse_Kinematics+0x138>
 800133e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001342:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001346:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	double omega_d = WheelD_->rps * (2 * M_PI) * (wheel_radius * radius_error_d);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	ed93 7b08 	vldr	d7, [r3, #32]
 8001350:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001400 <Inverse_Kinematics+0x130>
 8001354:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001358:	4b32      	ldr	r3, [pc, #200]	; (8001424 <Inverse_Kinematics+0x154>)
 800135a:	ed93 7b00 	vldr	d7, [r3]
 800135e:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8001408 <Inverse_Kinematics+0x138>
 8001362:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001366:	ee26 7b07 	vmul.f64	d7, d6, d7
 800136a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28

	double Vx = (omega_d - omega_b) / 2;
 800136e:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001372:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001376:	ee36 6b47 	vsub.f64	d6, d6, d7
 800137a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800137e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001382:	ed87 7b08 	vstr	d7, [r7, #32]
	double Vy = (omega_a - omega_c) / 2;
 8001386:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 800138a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800138e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001392:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001396:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800139a:	ed87 7b06 	vstr	d7, [r7, #24]
	double Vw = (omega_a + omega_b + omega_c + omega_d) / (4 * chassis_radius * radius_error_chassis);
 800139e:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 80013a2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80013a6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013aa:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80013ae:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013b2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80013b6:	ee36 5b07 	vadd.f64	d5, d6, d7
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <Inverse_Kinematics+0x158>)
 80013bc:	ed93 7b00 	vldr	d7, [r3]
 80013c0:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8001410 <Inverse_Kinematics+0x140>
 80013c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013c8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013cc:	ed87 7b04 	vstr	d7, [r7, #16]

	odom_vel[0] = Vx;
 80013d0:	4916      	ldr	r1, [pc, #88]	; (800142c <Inverse_Kinematics+0x15c>)
 80013d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013d6:	e9c1 2300 	strd	r2, r3, [r1]
	odom_vel[1] = Vy;
 80013da:	4914      	ldr	r1, [pc, #80]	; (800142c <Inverse_Kinematics+0x15c>)
 80013dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013e0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	odom_vel[2] = Vw;
 80013e4:	4911      	ldr	r1, [pc, #68]	; (800142c <Inverse_Kinematics+0x15c>)
 80013e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013ea:	e9c1 2304 	strd	r2, r3, [r1, #16]
	odom_store();
 80013ee:	f002 f87f 	bl	80034f0 <odom_store>
}
 80013f2:	bf00      	nop
 80013f4:	3748      	adds	r7, #72	; 0x48
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	f3af 8000 	nop.w
 8001400:	54442d18 	.word	0x54442d18
 8001404:	401921fb 	.word	0x401921fb
 8001408:	6c8b4396 	.word	0x6c8b4396
 800140c:	3fa9fbe7 	.word	0x3fa9fbe7
 8001410:	33333333 	.word	0x33333333
 8001414:	3ff33333 	.word	0x3ff33333
 8001418:	24000098 	.word	0x24000098
 800141c:	240000a0 	.word	0x240000a0
 8001420:	240000a8 	.word	0x240000a8
 8001424:	240000b0 	.word	0x240000b0
 8001428:	240000b8 	.word	0x240000b8
 800142c:	24001740 	.word	0x24001740

08001430 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_DMA_Init+0x4c>)
 8001438:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800143c:	4a0f      	ldr	r2, [pc, #60]	; (800147c <MX_DMA_Init+0x4c>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <MX_DMA_Init+0x4c>)
 8001448:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	200b      	movs	r0, #11
 800145a:	f004 f86e 	bl	800553a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800145e:	200b      	movs	r0, #11
 8001460:	f004 f885 	bl	800556e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001464:	2200      	movs	r2, #0
 8001466:	2100      	movs	r1, #0
 8001468:	200c      	movs	r0, #12
 800146a:	f004 f866 	bl	800553a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800146e:	200c      	movs	r0, #12
 8001470:	f004 f87d 	bl	800556e <HAL_NVIC_EnableIRQ>

}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	58024400 	.word	0x58024400

08001480 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	; 0x30
 8001484:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	4b58      	ldr	r3, [pc, #352]	; (80015f8 <MX_GPIO_Init+0x178>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149c:	4a56      	ldr	r2, [pc, #344]	; (80015f8 <MX_GPIO_Init+0x178>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a6:	4b54      	ldr	r3, [pc, #336]	; (80015f8 <MX_GPIO_Init+0x178>)
 80014a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ac:	f003 0310 	and.w	r3, r3, #16
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b4:	4b50      	ldr	r3, [pc, #320]	; (80015f8 <MX_GPIO_Init+0x178>)
 80014b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ba:	4a4f      	ldr	r2, [pc, #316]	; (80015f8 <MX_GPIO_Init+0x178>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c4:	4b4c      	ldr	r3, [pc, #304]	; (80015f8 <MX_GPIO_Init+0x178>)
 80014c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d2:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <MX_GPIO_Init+0x178>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d8:	4a47      	ldr	r2, [pc, #284]	; (80015f8 <MX_GPIO_Init+0x178>)
 80014da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e2:	4b45      	ldr	r3, [pc, #276]	; (80015f8 <MX_GPIO_Init+0x178>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <MX_GPIO_Init+0x178>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f6:	4a40      	ldr	r2, [pc, #256]	; (80015f8 <MX_GPIO_Init+0x178>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001500:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <MX_GPIO_Init+0x178>)
 8001502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <MX_GPIO_Init+0x178>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001514:	4a38      	ldr	r2, [pc, #224]	; (80015f8 <MX_GPIO_Init+0x178>)
 8001516:	f043 0302 	orr.w	r3, r3, #2
 800151a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151e:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <MX_GPIO_Init+0x178>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152c:	4b32      	ldr	r3, [pc, #200]	; (80015f8 <MX_GPIO_Init+0x178>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001532:	4a31      	ldr	r2, [pc, #196]	; (80015f8 <MX_GPIO_Init+0x178>)
 8001534:	f043 0308 	orr.w	r3, r3, #8
 8001538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153c:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <MX_GPIO_Init+0x178>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2108      	movs	r1, #8
 800154e:	482b      	ldr	r0, [pc, #172]	; (80015fc <MX_GPIO_Init+0x17c>)
 8001550:	f007 fad0 	bl	8008af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800155a:	4829      	ldr	r0, [pc, #164]	; (8001600 <MX_GPIO_Init+0x180>)
 800155c:	f007 faca 	bl	8008af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001566:	4827      	ldr	r0, [pc, #156]	; (8001604 <MX_GPIO_Init+0x184>)
 8001568:	f007 fac4 	bl	8008af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001572:	4825      	ldr	r0, [pc, #148]	; (8001608 <MX_GPIO_Init+0x188>)
 8001574:	f007 fabe 	bl	8008af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001578:	2308      	movs	r3, #8
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	481b      	ldr	r0, [pc, #108]	; (80015fc <MX_GPIO_Init+0x17c>)
 8001590:	f007 f806 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	4814      	ldr	r0, [pc, #80]	; (8001600 <MX_GPIO_Init+0x180>)
 80015ae:	f006 fff7 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	480e      	ldr	r0, [pc, #56]	; (8001604 <MX_GPIO_Init+0x184>)
 80015cc:	f006 ffe8 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	4807      	ldr	r0, [pc, #28]	; (8001608 <MX_GPIO_Init+0x188>)
 80015ea:	f006 ffd9 	bl	80085a0 <HAL_GPIO_Init>

}
 80015ee:	bf00      	nop
 80015f0:	3730      	adds	r7, #48	; 0x30
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	58024400 	.word	0x58024400
 80015fc:	58021000 	.word	0x58021000
 8001600:	58020800 	.word	0x58020800
 8001604:	58020400 	.word	0x58020400
 8001608:	58020c00 	.word	0x58020c00

0800160c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001610:	f003 fe02 	bl	8005218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001614:	f000 f824 	bl	8001660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001618:	f7ff ff32 	bl	8001480 <MX_GPIO_Init>
  MX_DMA_Init();
 800161c:	f7ff ff08 	bl	8001430 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001620:	f003 fc7e 	bl	8004f20 <MX_USART1_UART_Init>
  MX_TIM12_Init();
 8001624:	f003 f942 	bl	80048ac <MX_TIM12_Init>
  MX_TIM15_Init();
 8001628:	f003 f9a6 	bl	8004978 <MX_TIM15_Init>
  MX_TIM2_Init();
 800162c:	f002 ffe8 	bl	8004600 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001630:	f003 f83a 	bl	80046a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001634:	f003 f88e 	bl	8004754 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001638:	f003 f8e2 	bl	8004800 <MX_TIM5_Init>
  MX_TIM23_Init();
 800163c:	f003 fa2e 	bl	8004a9c <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */

//	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
  HAL_TIM_Base_Start_IT(&Encoder_Interrupt_timer);
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <main+0x4c>)
 8001642:	f00a f82b 	bl	800b69c <HAL_TIM_Base_Start_IT>
  Control_Init();
 8001646:	f7ff f81b 	bl	8000680 <Control_Init>
  Rosserial_Init();
 800164a:	f001 ff23 	bl	8003494 <Rosserial_Init>
  odom_count = 0;
 800164e:	4b03      	ldr	r3, [pc, #12]	; (800165c <main+0x50>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001654:	e7fe      	b.n	8001654 <main+0x48>
 8001656:	bf00      	nop
 8001658:	24001924 	.word	0x24001924
 800165c:	24000534 	.word	0x24000534

08001660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b09c      	sub	sp, #112	; 0x70
 8001664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166a:	224c      	movs	r2, #76	; 0x4c
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f00d fde0 	bl	800f234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2220      	movs	r2, #32
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f00d fdda 	bl	800f234 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001680:	2002      	movs	r0, #2
 8001682:	f007 fa51 	bl	8008b28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001686:	2300      	movs	r3, #0
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <SystemClock_Config+0xd8>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	4a2a      	ldr	r2, [pc, #168]	; (8001738 <SystemClock_Config+0xd8>)
 8001690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001694:	6193      	str	r3, [r2, #24]
 8001696:	4b28      	ldr	r3, [pc, #160]	; (8001738 <SystemClock_Config+0xd8>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016a2:	bf00      	nop
 80016a4:	4b24      	ldr	r3, [pc, #144]	; (8001738 <SystemClock_Config+0xd8>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016b0:	d1f8      	bne.n	80016a4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016b2:	2301      	movs	r3, #1
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016bc:	2302      	movs	r3, #2
 80016be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c0:	2302      	movs	r3, #2
 80016c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016c4:	2304      	movs	r3, #4
 80016c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016c8:	23a8      	movs	r3, #168	; 0xa8
 80016ca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80016cc:	2301      	movs	r3, #1
 80016ce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016d0:	2304      	movs	r3, #4
 80016d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016d4:	2302      	movs	r3, #2
 80016d6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80016d8:	2304      	movs	r3, #4
 80016da:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016dc:	2300      	movs	r3, #0
 80016de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e8:	4618      	mov	r0, r3
 80016ea:	f007 fa57 	bl	8008b9c <HAL_RCC_OscConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016f4:	f000 f8a6 	bl	8001844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f8:	233f      	movs	r3, #63	; 0x3f
 80016fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fc:	2303      	movs	r3, #3
 80016fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001704:	2308      	movs	r3, #8
 8001706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001708:	2340      	movs	r3, #64	; 0x40
 800170a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800170c:	2340      	movs	r3, #64	; 0x40
 800170e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001714:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001716:	2340      	movs	r3, #64	; 0x40
 8001718:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2102      	movs	r1, #2
 800171e:	4618      	mov	r0, r3
 8001720:	f007 fe16 	bl	8009350 <HAL_RCC_ClockConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800172a:	f000 f88b 	bl	8001844 <Error_Handler>
  }
}
 800172e:	bf00      	nop
 8001730:	3770      	adds	r7, #112	; 0x70
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	58024800 	.word	0x58024800

0800173c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	if(htim->Instance == Encoder_Interrupt_timer.Instance)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d132      	bne.n	80017b6 <HAL_TIM_PeriodElapsedCallback+0x7a>
	{
		odom_count++;
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	3301      	adds	r3, #1
 8001756:	4a1b      	ldr	r2, [pc, #108]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001758:	6013      	str	r3, [r2, #0]
		if(odom_count == 10)
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b0a      	cmp	r3, #10
 8001760:	d104      	bne.n	800176c <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			odom_count = 0;
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
			odom_publish();
 8001768:	f001 fee0 	bl	800352c <odom_publish>
//		WheelA.goal = 0.0;
//		WheelB.goal = 0.0;
//		WheelC.goal = 0.0;
//		WheelD.goal = 0.0;

		Rosserial_Spin();
 800176c:	f001 fea8 	bl	80034c0 <Rosserial_Spin>
//		{
//			linearvelocity_x = 0.0;
//			linearvelocity_y = 0.0;
//			angularvelocity = 0.0;
//		}
		Forward_Kinematics(linearvelocity_x, linearvelocity_y, angularvelocity);
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001772:	ed93 7b00 	vldr	d7, [r3]
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001778:	ed93 6b00 	vldr	d6, [r3]
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800177e:	ed93 5b00 	vldr	d5, [r3]
 8001782:	eeb0 2b45 	vmov.f64	d2, d5
 8001786:	eeb0 1b46 	vmov.f64	d1, d6
 800178a:	eeb0 0b47 	vmov.f64	d0, d7
 800178e:	f7ff fce3 	bl	8001158 <Forward_Kinematics>
		PID_Controller(&WheelA);
 8001792:	4810      	ldr	r0, [pc, #64]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001794:	f7ff faa4 	bl	8000ce0 <PID_Controller>
		PID_Controller(&WheelB);
 8001798:	480f      	ldr	r0, [pc, #60]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800179a:	f7ff faa1 	bl	8000ce0 <PID_Controller>
		PID_Controller(&WheelC);
 800179e:	480f      	ldr	r0, [pc, #60]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80017a0:	f7ff fa9e 	bl	8000ce0 <PID_Controller>
		PID_Controller(&WheelD);
 80017a4:	480e      	ldr	r0, [pc, #56]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80017a6:	f7ff fa9b 	bl	8000ce0 <PID_Controller>
		Inverse_Kinematics(&WheelA, &WheelB, &WheelC, &WheelD);
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80017ae:	490a      	ldr	r1, [pc, #40]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80017b0:	4808      	ldr	r0, [pc, #32]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80017b2:	f7ff fd8d 	bl	80012d0 <Inverse_Kinematics>
	}
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	24001924 	.word	0x24001924
 80017c4:	24000534 	.word	0x24000534
 80017c8:	240000c0 	.word	0x240000c0
 80017cc:	240000c8 	.word	0x240000c8
 80017d0:	240000d0 	.word	0x240000d0
 80017d4:	240000f0 	.word	0x240000f0
 80017d8:	24000200 	.word	0x24000200
 80017dc:	24000310 	.word	0x24000310
 80017e0:	24000420 	.word	0x24000420

080017e4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a11      	ldr	r2, [pc, #68]	; (8001834 <HAL_UART_ErrorCallback+0x50>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d11b      	bne.n	800182c <HAL_UART_ErrorCallback+0x48>
	{
		linearvelocity_x = 0;
 80017f4:	4910      	ldr	r1, [pc, #64]	; (8001838 <HAL_UART_ErrorCallback+0x54>)
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9c1 2300 	strd	r2, r3, [r1]
		linearvelocity_y = 0;
 8001802:	490e      	ldr	r1, [pc, #56]	; (800183c <HAL_UART_ErrorCallback+0x58>)
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9c1 2300 	strd	r2, r3, [r1]
		angularvelocity = 0;
 8001810:	490b      	ldr	r1, [pc, #44]	; (8001840 <HAL_UART_ErrorCallback+0x5c>)
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_UART_DeInit(&huart1);
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <HAL_UART_ErrorCallback+0x50>)
 8001820:	f00b fba8 	bl	800cf74 <HAL_UART_DeInit>
		MX_USART1_UART_Init();
 8001824:	f003 fb7c 	bl	8004f20 <MX_USART1_UART_Init>
		Rosserial_GetHardware();
 8001828:	f001 fe54 	bl	80034d4 <Rosserial_GetHardware>
	}
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	24001970 	.word	0x24001970
 8001838:	240000c0 	.word	0x240000c0
 800183c:	240000c8 	.word	0x240000c8
 8001840:	240000d0 	.word	0x240000d0

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800184c:	e7fe      	b.n	800184c <Error_Handler+0x8>

0800184e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	4a04      	ldr	r2, [pc, #16]	; (800188c <_ZN3ros3MsgC1Ev+0x1c>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	0800f808 	.word	0x0800f808

08001890 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
      data()
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ffe8 	bl	8001870 <_ZN3ros3MsgC1Ev>
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3304      	adds	r3, #4
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ffcf 	bl	800184e <_ZN3ros4TimeC1Ev>
    {
    }
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	0800f7f0 	.word	0x0800f7f0

080018c0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6859      	ldr	r1, [r3, #4]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	b2ca      	uxtb	r2, r1
 80018da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	0a19      	lsrs	r1, r3, #8
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3301      	adds	r3, #1
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	4413      	add	r3, r2
 80018ea:	b2ca      	uxtb	r2, r1
 80018ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	0c19      	lsrs	r1, r3, #16
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3302      	adds	r3, #2
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	b2ca      	uxtb	r2, r1
 80018fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	0e19      	lsrs	r1, r3, #24
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3303      	adds	r3, #3
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	4413      	add	r3, r2
 800190e:	b2ca      	uxtb	r2, r1
 8001910:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3304      	adds	r3, #4
 8001916:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6899      	ldr	r1, [r3, #8]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	4413      	add	r3, r2
 8001922:	b2ca      	uxtb	r2, r1
 8001924:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	0a19      	lsrs	r1, r3, #8
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3301      	adds	r3, #1
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	4413      	add	r3, r2
 8001934:	b2ca      	uxtb	r2, r1
 8001936:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	0c19      	lsrs	r1, r3, #16
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3302      	adds	r3, #2
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	4413      	add	r3, r2
 8001946:	b2ca      	uxtb	r2, r1
 8001948:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	0e19      	lsrs	r1, r3, #24
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	3303      	adds	r3, #3
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	4413      	add	r3, r2
 8001958:	b2ca      	uxtb	r2, r1
 800195a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3304      	adds	r3, #4
 8001960:	60fb      	str	r3, [r7, #12]
      return offset;
 8001962:	68fb      	ldr	r3, [r7, #12]
    }
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	4413      	add	r3, r2
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3301      	adds	r3, #1
 8001994:	6839      	ldr	r1, [r7, #0]
 8001996:	440b      	add	r3, r1
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3302      	adds	r3, #2
 80019aa:	6839      	ldr	r1, [r7, #0]
 80019ac:	440b      	add	r3, r1
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	041b      	lsls	r3, r3, #16
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3303      	adds	r3, #3
 80019c0:	6839      	ldr	r1, [r7, #0]
 80019c2:	440b      	add	r3, r1
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	061b      	lsls	r3, r3, #24
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3304      	adds	r3, #4
 80019d2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	4413      	add	r3, r2
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3301      	adds	r3, #1
 80019ea:	6839      	ldr	r1, [r7, #0]
 80019ec:	440b      	add	r3, r1
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3302      	adds	r3, #2
 8001a00:	6839      	ldr	r1, [r7, #0]
 8001a02:	440b      	add	r3, r1
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	041b      	lsls	r3, r3, #16
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3303      	adds	r3, #3
 8001a16:	6839      	ldr	r1, [r7, #0]
 8001a18:	440b      	add	r3, r1
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	061b      	lsls	r3, r3, #24
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3304      	adds	r3, #4
 8001a28:	60fb      	str	r3, [r7, #12]
     return offset;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
    }
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	0800f560 	.word	0x0800f560

08001a54 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	0800f570 	.word	0x0800f570

08001a70 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fef8 	bl	8001870 <_ZN3ros3MsgC1Ev>
 8001a80:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	809a      	strh	r2, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a09      	ldr	r2, [pc, #36]	; (8001ab4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a06      	ldr	r2, [pc, #24]	; (8001ab4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001a9c:	611a      	str	r2, [r3, #16]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	615a      	str	r2, [r3, #20]
    {
    }
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	0800f7d8 	.word	0x0800f7d8
 8001ab4:	0800f594 	.word	0x0800f594

08001ab8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	8899      	ldrh	r1, [r3, #4]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	b2ca      	uxtb	r2, r1
 8001ad2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	889b      	ldrh	r3, [r3, #4]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	b299      	uxth	r1, r3
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b2ca      	uxtb	r2, r1
 8001ae6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	3302      	adds	r3, #2
 8001aec:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fc0c 	bl	8000310 <strlen>
 8001af8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	69b9      	ldr	r1, [r7, #24]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f001 fd24 	bl	8003550 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	18d0      	adds	r0, r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f00d fb7c 	bl	800f218 <memcpy>
      offset += length_topic_name;
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	4413      	add	r3, r2
 8001b26:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fbef 	bl	8000310 <strlen>
 8001b32:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	4413      	add	r3, r2
 8001b3a:	6979      	ldr	r1, [r7, #20]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f001 fd07 	bl	8003550 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3304      	adds	r3, #4
 8001b46:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	18d0      	adds	r0, r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4619      	mov	r1, r3
 8001b56:	f00d fb5f 	bl	800f218 <memcpy>
      offset += length_message_type;
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	4413      	add	r3, r2
 8001b60:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fbd2 	bl	8000310 <strlen>
 8001b6c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	6939      	ldr	r1, [r7, #16]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f001 fcea 	bl	8003550 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	3304      	adds	r3, #4
 8001b80:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	18d0      	adds	r0, r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f00d fb42 	bl	800f218 <memcpy>
      offset += length_md5sum;
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4413      	add	r3, r2
 8001b9a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001ba2:	68f9      	ldr	r1, [r7, #12]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	4413      	add	r3, r2
 8001baa:	b2ca      	uxtb	r2, r1
 8001bac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	0a19      	lsrs	r1, r3, #8
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	4413      	add	r3, r2
 8001bba:	b2ca      	uxtb	r2, r1
 8001bbc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	0c19      	lsrs	r1, r3, #16
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	4413      	add	r3, r2
 8001bca:	b2ca      	uxtb	r2, r1
 8001bcc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	0e19      	lsrs	r1, r3, #24
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3303      	adds	r3, #3
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	b2ca      	uxtb	r2, r1
 8001bdc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	61fb      	str	r3, [r7, #28]
      return offset;
 8001be4:	69fb      	ldr	r3, [r7, #28]
    }
 8001be6:	4618      	mov	r0, r3
 8001be8:	3720      	adds	r7, #32
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b08a      	sub	sp, #40	; 0x28
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	889b      	ldrh	r3, [r3, #4]
 8001c0e:	b21a      	sxth	r2, r3
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	3301      	adds	r3, #1
 8001c14:	6839      	ldr	r1, [r7, #0]
 8001c16:	440b      	add	r3, r1
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	b21b      	sxth	r3, r3
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	441a      	add	r2, r3
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4611      	mov	r1, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f001 fca6 	bl	800358c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	3304      	adds	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	4413      	add	r3, r2
 8001c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d20c      	bcs.n	8001c70 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	441a      	add	r2, r3
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	6839      	ldr	r1, [r7, #0]
 8001c62:	440b      	add	r3, r1
 8001c64:	7812      	ldrb	r2, [r2, #0]
 8001c66:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6e:	e7ec      	b.n	8001c4a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	4413      	add	r3, r2
 8001c76:	3b01      	subs	r3, #1
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	441a      	add	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	4413      	add	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	441a      	add	r2, r3
 8001c9a:	f107 0310 	add.w	r3, r7, #16
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f001 fc73 	bl	800358c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	623b      	str	r3, [r7, #32]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	6a3a      	ldr	r2, [r7, #32]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d20c      	bcs.n	8001cd6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	441a      	add	r2, r3
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	6839      	ldr	r1, [r7, #0]
 8001cc8:	440b      	add	r3, r1
 8001cca:	7812      	ldrb	r2, [r2, #0]
 8001ccc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	623b      	str	r3, [r7, #32]
 8001cd4:	e7ec      	b.n	8001cb0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4413      	add	r3, r2
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	441a      	add	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	441a      	add	r2, r3
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f001 fc40 	bl	800358c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	3304      	adds	r3, #4
 8001d10:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d20c      	bcs.n	8001d3c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	441a      	add	r2, r3
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	6839      	ldr	r1, [r7, #0]
 8001d2e:	440b      	add	r3, r1
 8001d30:	7812      	ldrb	r2, [r2, #0]
 8001d32:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	3301      	adds	r3, #1
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	e7ec      	b.n	8001d16 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4413      	add	r3, r2
 8001d42:	3b01      	subs	r3, #1
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	441a      	add	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	6839      	ldr	r1, [r7, #0]
 8001d6a:	440a      	add	r2, r1
 8001d6c:	7812      	ldrb	r2, [r2, #0]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	3301      	adds	r3, #1
 8001d78:	6839      	ldr	r1, [r7, #0]
 8001d7a:	440b      	add	r3, r1
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	3302      	adds	r3, #2
 8001d8a:	6839      	ldr	r1, [r7, #0]
 8001d8c:	440b      	add	r3, r1
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	041b      	lsls	r3, r3, #16
 8001d92:	4313      	orrs	r3, r2
 8001d94:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	3303      	adds	r3, #3
 8001d9c:	6839      	ldr	r1, [r7, #0]
 8001d9e:	440b      	add	r3, r1
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	061b      	lsls	r3, r3, #24
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	3304      	adds	r3, #4
 8001db2:	61bb      	str	r3, [r7, #24]
     return offset;
 8001db4:	69bb      	ldr	r3, [r7, #24]
    }
 8001db6:	4618      	mov	r0, r3
 8001db8:	3728      	adds	r7, #40	; 0x28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	0800f598 	.word	0x0800f598

08001ddc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	0800f5b4 	.word	0x0800f5b4

08001df8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fd34 	bl	8001870 <_ZN3ros3MsgC1Ev>
 8001e08:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	711a      	strb	r2, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001e18:	609a      	str	r2, [r3, #8]
    {
    }
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	0800f7c0 	.word	0x0800f7c0
 8001e28:	0800f594 	.word	0x0800f594

08001e2c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	7912      	ldrb	r2, [r2, #4]
 8001e44:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fa5d 	bl	8000310 <strlen>
 8001e56:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	68b9      	ldr	r1, [r7, #8]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f001 fb75 	bl	8003550 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	18d0      	adds	r0, r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f00d f9cd 	bl	800f218 <memcpy>
      offset += length_msg;
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
      return offset;
 8001e86:	68fb      	ldr	r3, [r7, #12]
    }
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	3301      	adds	r3, #1
 8001eae:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	441a      	add	r2, r3
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f001 fb65 	bl	800358c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d20c      	bcs.n	8001ef2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	441a      	add	r2, r3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	6839      	ldr	r1, [r7, #0]
 8001ee4:	440b      	add	r3, r1
 8001ee6:	7812      	ldrb	r2, [r2, #0]
 8001ee8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	3301      	adds	r3, #1
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	e7ec      	b.n	8001ecc <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	441a      	add	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
     return offset;
 8001f16:	693b      	ldr	r3, [r7, #16]
    }
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	0800f5d8 	.word	0x0800f5d8

08001f3c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	0800f5ec 	.word	0x0800f5ec

08001f58 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fc84 	bl	8001870 <_ZN3ros3MsgC1Ev>
 8001f68:	4a0c      	ldr	r2, [pc, #48]	; (8001f9c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	61da      	str	r2, [r3, #28]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	0800f7a8 	.word	0x0800f7a8

08001fa0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6859      	ldr	r1, [r3, #4]
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	b2ca      	uxtb	r2, r1
 8001fba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	0a19      	lsrs	r1, r3, #8
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	4413      	add	r3, r2
 8001fca:	b2ca      	uxtb	r2, r1
 8001fcc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	0c19      	lsrs	r1, r3, #16
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	b2ca      	uxtb	r2, r1
 8001fde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	0e19      	lsrs	r1, r3, #24
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	3303      	adds	r3, #3
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	b2ca      	uxtb	r2, r1
 8001ff0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	623b      	str	r3, [r7, #32]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	6a3a      	ldr	r2, [r7, #32]
 8002002:	429a      	cmp	r2, r3
 8002004:	d22b      	bcs.n	800205e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002014:	6939      	ldr	r1, [r7, #16]
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	4413      	add	r3, r2
 800201c:	b2ca      	uxtb	r2, r1
 800201e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	0a19      	lsrs	r1, r3, #8
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	3301      	adds	r3, #1
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	4413      	add	r3, r2
 800202c:	b2ca      	uxtb	r2, r1
 800202e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	0c19      	lsrs	r1, r3, #16
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	3302      	adds	r3, #2
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	4413      	add	r3, r2
 800203c:	b2ca      	uxtb	r2, r1
 800203e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	0e19      	lsrs	r1, r3, #24
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	3303      	adds	r3, #3
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	4413      	add	r3, r2
 800204c:	b2ca      	uxtb	r2, r1
 800204e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	3304      	adds	r3, #4
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	3301      	adds	r3, #1
 800205a:	623b      	str	r3, [r7, #32]
 800205c:	e7ce      	b.n	8001ffc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6919      	ldr	r1, [r3, #16]
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	4413      	add	r3, r2
 8002068:	b2ca      	uxtb	r2, r1
 800206a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	0a19      	lsrs	r1, r3, #8
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	3301      	adds	r3, #1
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	4413      	add	r3, r2
 800207a:	b2ca      	uxtb	r2, r1
 800207c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	0c19      	lsrs	r1, r3, #16
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	3302      	adds	r3, #2
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	4413      	add	r3, r2
 800208c:	b2ca      	uxtb	r2, r1
 800208e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	0e19      	lsrs	r1, r3, #24
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	3303      	adds	r3, #3
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	4413      	add	r3, r2
 800209e:	b2ca      	uxtb	r2, r1
 80020a0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	3304      	adds	r3, #4
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d22b      	bcs.n	800210e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80020c4:	68f9      	ldr	r1, [r7, #12]
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	b2ca      	uxtb	r2, r1
 80020ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	0a19      	lsrs	r1, r3, #8
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	3301      	adds	r3, #1
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	b2ca      	uxtb	r2, r1
 80020de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	0c19      	lsrs	r1, r3, #16
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	3302      	adds	r3, #2
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	4413      	add	r3, r2
 80020ec:	b2ca      	uxtb	r2, r1
 80020ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	0e19      	lsrs	r1, r3, #24
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	3303      	adds	r3, #3
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	b2ca      	uxtb	r2, r1
 80020fe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	3304      	adds	r3, #4
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3301      	adds	r3, #1
 800210a:	61fb      	str	r3, [r7, #28]
 800210c:	e7ce      	b.n	80020ac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69d9      	ldr	r1, [r3, #28]
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	4413      	add	r3, r2
 8002118:	b2ca      	uxtb	r2, r1
 800211a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	0a19      	lsrs	r1, r3, #8
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	3301      	adds	r3, #1
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	4413      	add	r3, r2
 800212a:	b2ca      	uxtb	r2, r1
 800212c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	0c19      	lsrs	r1, r3, #16
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	3302      	adds	r3, #2
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	4413      	add	r3, r2
 800213c:	b2ca      	uxtb	r2, r1
 800213e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	0e19      	lsrs	r1, r3, #24
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	3303      	adds	r3, #3
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	4413      	add	r3, r2
 800214e:	b2ca      	uxtb	r2, r1
 8002150:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	3304      	adds	r3, #4
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002158:	2300      	movs	r3, #0
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	429a      	cmp	r2, r3
 8002164:	d228      	bcs.n	80021b8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe f8cc 	bl	8000310 <strlen>
 8002178:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	4413      	add	r3, r2
 8002180:	6979      	ldr	r1, [r7, #20]
 8002182:	4618      	mov	r0, r3
 8002184:	f001 f9e4 	bl	8003550 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	3304      	adds	r3, #4
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	18d0      	adds	r0, r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	4619      	mov	r1, r3
 80021a4:	f00d f838 	bl	800f218 <memcpy>
      offset += length_stringsi;
 80021a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	4413      	add	r3, r2
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	3301      	adds	r3, #1
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	e7d1      	b.n	800215c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80021ba:	4618      	mov	r0, r3
 80021bc:	3728      	adds	r7, #40	; 0x28
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b08e      	sub	sp, #56	; 0x38
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80021d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	4413      	add	r3, r2
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80021da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021dc:	3301      	adds	r3, #1
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	4413      	add	r3, r2
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	6a3a      	ldr	r2, [r7, #32]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80021ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ee:	3302      	adds	r3, #2
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	041b      	lsls	r3, r3, #16
 80021f8:	6a3a      	ldr	r2, [r7, #32]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80021fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002200:	3303      	adds	r3, #3
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	4413      	add	r3, r2
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	061b      	lsls	r3, r3, #24
 800220a:	6a3a      	ldr	r2, [r7, #32]
 800220c:	4313      	orrs	r3, r2
 800220e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002212:	3304      	adds	r3, #4
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	6a3a      	ldr	r2, [r7, #32]
 800221c:	429a      	cmp	r2, r3
 800221e:	d90a      	bls.n	8002236 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4619      	mov	r1, r3
 800222a:	4610      	mov	r0, r2
 800222c:	f00d f80a 	bl	800f244 <realloc>
 8002230:	4602      	mov	r2, r0
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a3a      	ldr	r2, [r7, #32]
 800223a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800223c:	2300      	movs	r3, #0
 800223e:	633b      	str	r3, [r7, #48]	; 0x30
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002246:	429a      	cmp	r2, r3
 8002248:	d236      	bcs.n	80022b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002252:	6839      	ldr	r1, [r7, #0]
 8002254:	440a      	add	r2, r1
 8002256:	7812      	ldrb	r2, [r2, #0]
 8002258:	4313      	orrs	r3, r2
 800225a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002260:	3301      	adds	r3, #1
 8002262:	6839      	ldr	r1, [r7, #0]
 8002264:	440b      	add	r3, r1
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	4313      	orrs	r3, r2
 800226c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002272:	3302      	adds	r3, #2
 8002274:	6839      	ldr	r1, [r7, #0]
 8002276:	440b      	add	r3, r1
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	041b      	lsls	r3, r3, #16
 800227c:	4313      	orrs	r3, r2
 800227e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002284:	3303      	adds	r3, #3
 8002286:	6839      	ldr	r1, [r7, #0]
 8002288:	440b      	add	r3, r1
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	061b      	lsls	r3, r3, #24
 800228e:	4313      	orrs	r3, r2
 8002290:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229a:	3304      	adds	r3, #4
 800229c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	3208      	adds	r2, #8
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80022b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b2:	3301      	adds	r3, #1
 80022b4:	633b      	str	r3, [r7, #48]	; 0x30
 80022b6:	e7c3      	b.n	8002240 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80022b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	4413      	add	r3, r2
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80022c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c4:	3301      	adds	r3, #1
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	4413      	add	r3, r2
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	021b      	lsls	r3, r3, #8
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80022d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d6:	3302      	adds	r3, #2
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	041b      	lsls	r3, r3, #16
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80022e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e8:	3303      	adds	r3, #3
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	4413      	add	r3, r2
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	061b      	lsls	r3, r3, #24
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80022f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fa:	3304      	adds	r3, #4
 80022fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	429a      	cmp	r2, r3
 8002306:	d90a      	bls.n	800231e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699a      	ldr	r2, [r3, #24]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4619      	mov	r1, r3
 8002312:	4610      	mov	r0, r2
 8002314:	f00c ff96 	bl	800f244 <realloc>
 8002318:	4602      	mov	r2, r0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002324:	2300      	movs	r3, #0
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800232e:	429a      	cmp	r2, r3
 8002330:	d236      	bcs.n	80023a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800233a:	6839      	ldr	r1, [r7, #0]
 800233c:	440a      	add	r2, r1
 800233e:	7812      	ldrb	r2, [r2, #0]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002348:	3301      	adds	r3, #1
 800234a:	6839      	ldr	r1, [r7, #0]
 800234c:	440b      	add	r3, r1
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	021b      	lsls	r3, r3, #8
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235a:	3302      	adds	r3, #2
 800235c:	6839      	ldr	r1, [r7, #0]
 800235e:	440b      	add	r3, r1
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	041b      	lsls	r3, r3, #16
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236c:	3303      	adds	r3, #3
 800236e:	6839      	ldr	r1, [r7, #0]
 8002370:	440b      	add	r3, r1
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	061b      	lsls	r3, r3, #24
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002382:	3304      	adds	r3, #4
 8002384:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	3214      	adds	r2, #20
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239a:	3301      	adds	r3, #1
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800239e:	e7c3      	b.n	8002328 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80023a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	4413      	add	r3, r2
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80023aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ac:	3301      	adds	r3, #1
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	4413      	add	r3, r2
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	021b      	lsls	r3, r3, #8
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80023bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023be:	3302      	adds	r3, #2
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	041b      	lsls	r3, r3, #16
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80023ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d0:	3303      	adds	r3, #3
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	4413      	add	r3, r2
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	061b      	lsls	r3, r3, #24
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80023e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e2:	3304      	adds	r3, #4
 80023e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d90a      	bls.n	8002406 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4619      	mov	r1, r3
 80023fa:	4610      	mov	r0, r2
 80023fc:	f00c ff22 	bl	800f244 <realloc>
 8002400:	4602      	mov	r2, r0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800240c:	2300      	movs	r3, #0
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002416:	429a      	cmp	r2, r3
 8002418:	d23f      	bcs.n	800249a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800241a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	441a      	add	r2, r3
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f001 f8b0 	bl	800358c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800242c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800242e:	3304      	adds	r3, #4
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
 8002436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4413      	add	r3, r2
 800243c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243e:	429a      	cmp	r2, r3
 8002440:	d20c      	bcs.n	800245c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	441a      	add	r2, r3
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	3b01      	subs	r3, #1
 800244c:	6839      	ldr	r1, [r7, #0]
 800244e:	440b      	add	r3, r1
 8002450:	7812      	ldrb	r2, [r2, #0]
 8002452:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	3301      	adds	r3, #1
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
 800245a:	e7ec      	b.n	8002436 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800245c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4413      	add	r3, r2
 8002462:	3b01      	subs	r3, #1
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	4413      	add	r3, r2
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800246c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800246e:	3b01      	subs	r3, #1
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	441a      	add	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4413      	add	r3, r2
 800247e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	3220      	adds	r2, #32
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002494:	3301      	adds	r3, #1
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
 8002498:	e7ba      	b.n	8002410 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800249a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800249c:	4618      	mov	r0, r3
 800249e:	3738      	adds	r7, #56	; 0x38
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	0800f6fc 	.word	0x0800f6fc

080024c0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	0800f610 	.word	0x0800f610

080024dc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	611a      	str	r2, [r3, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68d8      	ldr	r0, [r3, #12]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6891      	ldr	r1, [r2, #8]
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	4798      	blx	r3
 8002528:	4603      	mov	r3, r0
  };
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
  }
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a4b      	ldr	r2, [pc, #300]	; (800268c <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d077      	beq.n	8002654 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a48      	ldr	r2, [pc, #288]	; (8002690 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d06f      	beq.n	8002654 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a45      	ldr	r2, [pc, #276]	; (8002694 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d067      	beq.n	8002654 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a42      	ldr	r2, [pc, #264]	; (8002698 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d05f      	beq.n	8002654 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a3f      	ldr	r2, [pc, #252]	; (800269c <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d057      	beq.n	8002654 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a3c      	ldr	r2, [pc, #240]	; (80026a0 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d04f      	beq.n	8002654 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a39      	ldr	r2, [pc, #228]	; (80026a4 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d047      	beq.n	8002654 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a36      	ldr	r2, [pc, #216]	; (80026a8 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d03f      	beq.n	8002654 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a33      	ldr	r2, [pc, #204]	; (80026ac <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d037      	beq.n	8002654 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a30      	ldr	r2, [pc, #192]	; (80026b0 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d02f      	beq.n	8002654 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a2d      	ldr	r2, [pc, #180]	; (80026b4 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d027      	beq.n	8002654 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a2a      	ldr	r2, [pc, #168]	; (80026b8 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d01f      	beq.n	8002654 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a27      	ldr	r2, [pc, #156]	; (80026bc <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d017      	beq.n	8002654 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a24      	ldr	r2, [pc, #144]	; (80026c0 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00f      	beq.n	8002654 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a21      	ldr	r2, [pc, #132]	; (80026c4 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d007      	beq.n	8002654 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d10a      	bne.n	800266a <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002668:	e009      	b.n	800267e <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800267a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40020010 	.word	0x40020010
 8002690:	40020028 	.word	0x40020028
 8002694:	40020040 	.word	0x40020040
 8002698:	40020058 	.word	0x40020058
 800269c:	40020070 	.word	0x40020070
 80026a0:	40020088 	.word	0x40020088
 80026a4:	400200a0 	.word	0x400200a0
 80026a8:	400200b8 	.word	0x400200b8
 80026ac:	40020410 	.word	0x40020410
 80026b0:	40020428 	.word	0x40020428
 80026b4:	40020440 	.word	0x40020440
 80026b8:	40020458 	.word	0x40020458
 80026bc:	40020470 	.word	0x40020470
 80026c0:	40020488 	.word	0x40020488
 80026c4:	400204a0 	.word	0x400204a0
 80026c8:	400204b8 	.word	0x400204b8

080026cc <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <_ZN13STM32HardwareC1Ev+0x34>)
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    }
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	24001970 	.word	0x24001970

08002704 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f804 	bl	800271a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
    	HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6858      	ldr	r0, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3308      	adds	r3, #8
 800272a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800272e:	4619      	mov	r1, r3
 8002730:	f00a fce0 	bl	800d0f4 <HAL_UART_Receive_DMA>
    }
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <_ZN13STM32Hardware4readEv>:

    int read(){
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002744:	f04f 33ff 	mov.w	r3, #4294967295
 8002748:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f8d3 4408 	ldr.w	r4, [r3, #1032]	; 0x408
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff fefb 	bl	800254c <_ZN13STM32Hardware10getRdmaIndEv>
 8002756:	4603      	mov	r3, r0
 8002758:	429c      	cmp	r4, r3
 800275a:	bf14      	ite	ne
 800275c:	2301      	movne	r3, #1
 800275e:	2300      	moveq	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d012      	beq.n	800278c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800276c:	1c59      	adds	r1, r3, #1
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	4413      	add	r3, r2
 8002778:	7a1b      	ldrb	r3, [r3, #8]
 800277a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002782:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
      }
      return c;
 800278c:	68fb      	ldr	r3, [r7, #12]
    }
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	bd90      	pop	{r4, r7, pc}
	...

08002798 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d108      	bne.n	80027be <_ZN13STM32Hardware5flushEv+0x26>
 80027ac:	4b28      	ldr	r3, [pc, #160]	; (8002850 <_ZN13STM32Hardware5flushEv+0xb8>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	f083 0301 	eor.w	r3, r3, #1
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <_ZN13STM32Hardware5flushEv+0x26>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <_ZN13STM32Hardware5flushEv+0x28>
 80027be:	2300      	movs	r3, #0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d040      	beq.n	8002846 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80027c4:	4b22      	ldr	r3, [pc, #136]	; (8002850 <_ZN13STM32Hardware5flushEv+0xb8>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d032      	beq.n	8002840 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d20a      	bcs.n	8002800 <_ZN13STM32Hardware5flushEv+0x68>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	e006      	b.n	800280e <_ZN13STM32Hardware5flushEv+0x76>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8002806:	b29b      	uxth	r3, r3
 8002808:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800280c:	b29b      	uxth	r3, r3
 800280e:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6858      	ldr	r0, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800281a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	3304      	adds	r3, #4
 8002824:	89fa      	ldrh	r2, [r7, #14]
 8002826:	4619      	mov	r1, r3
 8002828:	f00a fbe4 	bl	800cff4 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 8002832:	89fb      	ldrh	r3, [r7, #14]
 8002834:	4413      	add	r3, r2
 8002836:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
        }
        mutex = false;
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
      }
    }
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	24000538 	.word	0x24000538

08002854 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
      int n = length;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286a:	bfa8      	it	ge
 800286c:	f44f 6380 	movge.w	r3, #1024	; 0x400
 8002870:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002878:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	4293      	cmp	r3, r2
 8002880:	bf28      	it	cs
 8002882:	4613      	movcs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800288c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	3304      	adds	r3, #4
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	4618      	mov	r0, r3
 800289c:	f00c fcbc 	bl	800f218 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	4413      	add	r3, r2
 80028aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c

      if(n != n_tail){
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d00b      	beq.n	80028d4 <_ZN13STM32Hardware5writeEPhi+0x80>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	18d1      	adds	r1, r2, r3
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	f00c fca2 	bl	800f218 <memcpy>
      }

      flush();
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f7ff ff5f 	bl	8002798 <_ZN13STM32Hardware5flushEv>
    }
 80028da:	bf00      	nop
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	f002 fd1b 	bl	8005324 <HAL_GetTick>
 80028ee:	4603      	mov	r3, r0
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe ffb4 	bl	8001870 <_ZN3ros3MsgC1Ev>
 8002908:	4a0e      	ldr	r2, [pc, #56]	; (8002944 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	0800f764 	.word	0x0800f764

08002948 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002948:	b480      	push	{r7}
 800294a:	b08b      	sub	sp, #44	; 0x2c
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800295c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002966:	6838      	ldr	r0, [r7, #0]
 8002968:	4401      	add	r1, r0
 800296a:	b2d3      	uxtb	r3, r2
 800296c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800296e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	f04f 0300 	mov.w	r3, #0
 800297a:	0a02      	lsrs	r2, r0, #8
 800297c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002980:	0a0b      	lsrs	r3, r1, #8
 8002982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002984:	3101      	adds	r1, #1
 8002986:	6838      	ldr	r0, [r7, #0]
 8002988:	4401      	add	r1, r0
 800298a:	b2d3      	uxtb	r3, r2
 800298c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800298e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	0c02      	lsrs	r2, r0, #16
 800299c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80029a0:	0c0b      	lsrs	r3, r1, #16
 80029a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029a4:	3102      	adds	r1, #2
 80029a6:	6838      	ldr	r0, [r7, #0]
 80029a8:	4401      	add	r1, r0
 80029aa:	b2d3      	uxtb	r3, r2
 80029ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80029ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	0e02      	lsrs	r2, r0, #24
 80029bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80029c0:	0e0b      	lsrs	r3, r1, #24
 80029c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029c4:	3103      	adds	r1, #3
 80029c6:	6838      	ldr	r0, [r7, #0]
 80029c8:	4401      	add	r1, r0
 80029ca:	b2d3      	uxtb	r3, r2
 80029cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80029ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	000a      	movs	r2, r1
 80029dc:	2300      	movs	r3, #0
 80029de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029e0:	3104      	adds	r1, #4
 80029e2:	6838      	ldr	r0, [r7, #0]
 80029e4:	4401      	add	r1, r0
 80029e6:	b2d3      	uxtb	r3, r2
 80029e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80029ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	0a0a      	lsrs	r2, r1, #8
 80029f8:	2300      	movs	r3, #0
 80029fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029fc:	3105      	adds	r1, #5
 80029fe:	6838      	ldr	r0, [r7, #0]
 8002a00:	4401      	add	r1, r0
 8002a02:	b2d3      	uxtb	r3, r2
 8002a04:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002a06:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	0c0a      	lsrs	r2, r1, #16
 8002a14:	2300      	movs	r3, #0
 8002a16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a18:	3106      	adds	r1, #6
 8002a1a:	6838      	ldr	r0, [r7, #0]
 8002a1c:	4401      	add	r1, r0
 8002a1e:	b2d3      	uxtb	r3, r2
 8002a20:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002a22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	0e0a      	lsrs	r2, r1, #24
 8002a30:	2300      	movs	r3, #0
 8002a32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a34:	3107      	adds	r1, #7
 8002a36:	6838      	ldr	r0, [r7, #0]
 8002a38:	4401      	add	r1, r0
 8002a3a:	b2d3      	uxtb	r3, r2
 8002a3c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	3308      	adds	r3, #8
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002a4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a54:	6838      	ldr	r0, [r7, #0]
 8002a56:	4401      	add	r1, r0
 8002a58:	b2d3      	uxtb	r3, r2
 8002a5a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002a5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	0a02      	lsrs	r2, r0, #8
 8002a6a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002a6e:	0a0b      	lsrs	r3, r1, #8
 8002a70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a72:	3101      	adds	r1, #1
 8002a74:	6838      	ldr	r0, [r7, #0]
 8002a76:	4401      	add	r1, r0
 8002a78:	b2d3      	uxtb	r3, r2
 8002a7a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002a7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	0c02      	lsrs	r2, r0, #16
 8002a8a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002a8e:	0c0b      	lsrs	r3, r1, #16
 8002a90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a92:	3102      	adds	r1, #2
 8002a94:	6838      	ldr	r0, [r7, #0]
 8002a96:	4401      	add	r1, r0
 8002a98:	b2d3      	uxtb	r3, r2
 8002a9a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002a9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	0e02      	lsrs	r2, r0, #24
 8002aaa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002aae:	0e0b      	lsrs	r3, r1, #24
 8002ab0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ab2:	3103      	adds	r1, #3
 8002ab4:	6838      	ldr	r0, [r7, #0]
 8002ab6:	4401      	add	r1, r0
 8002ab8:	b2d3      	uxtb	r3, r2
 8002aba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002abc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	000a      	movs	r2, r1
 8002aca:	2300      	movs	r3, #0
 8002acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ace:	3104      	adds	r1, #4
 8002ad0:	6838      	ldr	r0, [r7, #0]
 8002ad2:	4401      	add	r1, r0
 8002ad4:	b2d3      	uxtb	r3, r2
 8002ad6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002ad8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	0a0a      	lsrs	r2, r1, #8
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aea:	3105      	adds	r1, #5
 8002aec:	6838      	ldr	r0, [r7, #0]
 8002aee:	4401      	add	r1, r0
 8002af0:	b2d3      	uxtb	r3, r2
 8002af2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002af4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	0c0a      	lsrs	r2, r1, #16
 8002b02:	2300      	movs	r3, #0
 8002b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b06:	3106      	adds	r1, #6
 8002b08:	6838      	ldr	r0, [r7, #0]
 8002b0a:	4401      	add	r1, r0
 8002b0c:	b2d3      	uxtb	r3, r2
 8002b0e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002b10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	0e0a      	lsrs	r2, r1, #24
 8002b1e:	2300      	movs	r3, #0
 8002b20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b22:	3107      	adds	r1, #7
 8002b24:	6838      	ldr	r0, [r7, #0]
 8002b26:	4401      	add	r1, r0
 8002b28:	b2d3      	uxtb	r3, r2
 8002b2a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	3308      	adds	r3, #8
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002b38:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002b3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b42:	6838      	ldr	r0, [r7, #0]
 8002b44:	4401      	add	r1, r0
 8002b46:	b2d3      	uxtb	r3, r2
 8002b48:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002b4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	0a02      	lsrs	r2, r0, #8
 8002b58:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002b5c:	0a0b      	lsrs	r3, r1, #8
 8002b5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b60:	3101      	adds	r1, #1
 8002b62:	6838      	ldr	r0, [r7, #0]
 8002b64:	4401      	add	r1, r0
 8002b66:	b2d3      	uxtb	r3, r2
 8002b68:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002b6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	0c02      	lsrs	r2, r0, #16
 8002b78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002b7c:	0c0b      	lsrs	r3, r1, #16
 8002b7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b80:	3102      	adds	r1, #2
 8002b82:	6838      	ldr	r0, [r7, #0]
 8002b84:	4401      	add	r1, r0
 8002b86:	b2d3      	uxtb	r3, r2
 8002b88:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002b8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	0e02      	lsrs	r2, r0, #24
 8002b98:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b9c:	0e0b      	lsrs	r3, r1, #24
 8002b9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ba0:	3103      	adds	r1, #3
 8002ba2:	6838      	ldr	r0, [r7, #0]
 8002ba4:	4401      	add	r1, r0
 8002ba6:	b2d3      	uxtb	r3, r2
 8002ba8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002baa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	000a      	movs	r2, r1
 8002bb8:	2300      	movs	r3, #0
 8002bba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bbc:	3104      	adds	r1, #4
 8002bbe:	6838      	ldr	r0, [r7, #0]
 8002bc0:	4401      	add	r1, r0
 8002bc2:	b2d3      	uxtb	r3, r2
 8002bc4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002bc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	0a0a      	lsrs	r2, r1, #8
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd8:	3105      	adds	r1, #5
 8002bda:	6838      	ldr	r0, [r7, #0]
 8002bdc:	4401      	add	r1, r0
 8002bde:	b2d3      	uxtb	r3, r2
 8002be0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002be2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	0c0a      	lsrs	r2, r1, #16
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bf4:	3106      	adds	r1, #6
 8002bf6:	6838      	ldr	r0, [r7, #0]
 8002bf8:	4401      	add	r1, r0
 8002bfa:	b2d3      	uxtb	r3, r2
 8002bfc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002bfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	0e0a      	lsrs	r2, r1, #24
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c10:	3107      	adds	r1, #7
 8002c12:	6838      	ldr	r0, [r7, #0]
 8002c14:	4401      	add	r1, r0
 8002c16:	b2d3      	uxtb	r3, r2
 8002c18:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002c22:	4618      	mov	r0, r3
 8002c24:	372c      	adds	r7, #44	; 0x2c
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002c2e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002c32:	b0eb      	sub	sp, #428	; 0x1ac
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002c3a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c50:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c54:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002c58:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c5c:	4413      	add	r3, r2
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2200      	movs	r2, #0
 8002c64:	461c      	mov	r4, r3
 8002c66:	4615      	mov	r5, r2
 8002c68:	ea40 0804 	orr.w	r8, r0, r4
 8002c6c:	ea41 0905 	orr.w	r9, r1, r5
 8002c70:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c74:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c82:	4413      	add	r3, r2
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2200      	movs	r2, #0
 8002c8a:	469a      	mov	sl, r3
 8002c8c:	4693      	mov	fp, r2
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002c9a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002c9e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002ca2:	ea40 0402 	orr.w	r4, r0, r2
 8002ca6:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002caa:	430b      	orrs	r3, r1
 8002cac:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002cb0:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002cb4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002cb8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002cbc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cc0:	1c9a      	adds	r2, r3, #2
 8002cc2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cc6:	4413      	add	r3, r2
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002cd2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002ce2:	464c      	mov	r4, r9
 8002ce4:	0423      	lsls	r3, r4, #16
 8002ce6:	4644      	mov	r4, r8
 8002ce8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002cec:	4644      	mov	r4, r8
 8002cee:	0422      	lsls	r2, r4, #16
 8002cf0:	ea40 0402 	orr.w	r4, r0, r2
 8002cf4:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002cfe:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002d02:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d06:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002d0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d0e:	1cda      	adds	r2, r3, #3
 8002d10:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d14:	4413      	add	r3, r2
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002d20:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002d24:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002d28:	4623      	mov	r3, r4
 8002d2a:	0a1b      	lsrs	r3, r3, #8
 8002d2c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002d30:	4623      	mov	r3, r4
 8002d32:	061b      	lsls	r3, r3, #24
 8002d34:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002d38:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002d3c:	4623      	mov	r3, r4
 8002d3e:	4303      	orrs	r3, r0
 8002d40:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d44:	462b      	mov	r3, r5
 8002d46:	430b      	orrs	r3, r1
 8002d48:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d4c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002d50:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002d54:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002d58:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d5c:	1d1a      	adds	r2, r3, #4
 8002d5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d62:	4413      	add	r3, r2
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002d6e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002d7e:	0023      	movs	r3, r4
 8002d80:	2200      	movs	r2, #0
 8002d82:	ea40 0402 	orr.w	r4, r0, r2
 8002d86:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002d8a:	430b      	orrs	r3, r1
 8002d8c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002d90:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002d94:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002d98:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002d9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002da0:	1d5a      	adds	r2, r3, #5
 8002da2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002da6:	4413      	add	r3, r2
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2200      	movs	r2, #0
 8002dae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002db2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002dc2:	0223      	lsls	r3, r4, #8
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	ea40 0402 	orr.w	r4, r0, r2
 8002dca:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002dce:	430b      	orrs	r3, r1
 8002dd0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002dd4:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002dd8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002ddc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002de0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002de4:	1d9a      	adds	r2, r3, #6
 8002de6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dea:	4413      	add	r3, r2
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2200      	movs	r2, #0
 8002df2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002df6:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002e06:	0423      	lsls	r3, r4, #16
 8002e08:	2200      	movs	r2, #0
 8002e0a:	ea40 0402 	orr.w	r4, r0, r2
 8002e0e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002e12:	430b      	orrs	r3, r1
 8002e14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e18:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002e1c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002e20:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002e24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e28:	1dda      	adds	r2, r3, #7
 8002e2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e2e:	4413      	add	r3, r2
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2200      	movs	r2, #0
 8002e36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002e3a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002e4a:	0623      	lsls	r3, r4, #24
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	ea40 0402 	orr.w	r4, r0, r2
 8002e52:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002e56:	430b      	orrs	r3, r1
 8002e58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002e5c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002e60:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002e64:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002e68:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002e6c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002e70:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e74:	3308      	adds	r3, #8
 8002e76:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e86:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e8a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002e8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e92:	4413      	add	r3, r2
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002e9e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002ea2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002ea6:	4623      	mov	r3, r4
 8002ea8:	4303      	orrs	r3, r0
 8002eaa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002eae:	462b      	mov	r3, r5
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002eb6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002eba:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ebe:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ec2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ecc:	4413      	add	r3, r2
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002ed8:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002ee8:	464c      	mov	r4, r9
 8002eea:	0223      	lsls	r3, r4, #8
 8002eec:	4644      	mov	r4, r8
 8002eee:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002ef2:	4644      	mov	r4, r8
 8002ef4:	0222      	lsls	r2, r4, #8
 8002ef6:	ea40 0402 	orr.w	r4, r0, r2
 8002efa:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002efe:	430b      	orrs	r3, r1
 8002f00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002f04:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002f08:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f0c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002f10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f14:	1c9a      	adds	r2, r3, #2
 8002f16:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f1a:	4413      	add	r3, r2
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2200      	movs	r2, #0
 8002f22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002f36:	464c      	mov	r4, r9
 8002f38:	0423      	lsls	r3, r4, #16
 8002f3a:	4644      	mov	r4, r8
 8002f3c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002f40:	4644      	mov	r4, r8
 8002f42:	0422      	lsls	r2, r4, #16
 8002f44:	ea40 0402 	orr.w	r4, r0, r2
 8002f48:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f52:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002f56:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f5a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002f5e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f62:	1cda      	adds	r2, r3, #3
 8002f64:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f68:	4413      	add	r3, r2
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f74:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f78:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002f7c:	4623      	mov	r3, r4
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002f84:	4623      	mov	r3, r4
 8002f86:	061b      	lsls	r3, r3, #24
 8002f88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f8c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002f90:	4623      	mov	r3, r4
 8002f92:	4303      	orrs	r3, r0
 8002f94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f98:	462b      	mov	r3, r5
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fa0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002fa4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002fa8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002fac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fb0:	1d1a      	adds	r2, r3, #4
 8002fb2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fb6:	4413      	add	r3, r2
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fc2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002fd2:	0023      	movs	r3, r4
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	ea40 0402 	orr.w	r4, r0, r2
 8002fda:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002fe4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002fe8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002fec:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ff0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ff4:	1d5a      	adds	r2, r3, #5
 8002ff6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ffa:	4413      	add	r3, r2
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2200      	movs	r2, #0
 8003002:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003006:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003016:	0223      	lsls	r3, r4, #8
 8003018:	2200      	movs	r2, #0
 800301a:	ea40 0402 	orr.w	r4, r0, r2
 800301e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003022:	430b      	orrs	r3, r1
 8003024:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003028:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800302c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003030:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003034:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003038:	1d9a      	adds	r2, r3, #6
 800303a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800303e:	4413      	add	r3, r2
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2200      	movs	r2, #0
 8003046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800304a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800305a:	0423      	lsls	r3, r4, #16
 800305c:	2200      	movs	r2, #0
 800305e:	ea40 0402 	orr.w	r4, r0, r2
 8003062:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003066:	430b      	orrs	r3, r1
 8003068:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800306c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003070:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003074:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003078:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800307c:	1dda      	adds	r2, r3, #7
 800307e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003082:	4413      	add	r3, r2
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2200      	movs	r2, #0
 800308a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800308e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800309e:	0623      	lsls	r3, r4, #24
 80030a0:	2200      	movs	r2, #0
 80030a2:	ea40 0402 	orr.w	r4, r0, r2
 80030a6:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80030aa:	430b      	orrs	r3, r1
 80030ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80030b0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80030b4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 80030b8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80030bc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80030c0:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80030c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030c8:	3308      	adds	r3, #8
 80030ca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80030da:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80030de:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80030e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030e6:	4413      	add	r3, r2
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2200      	movs	r2, #0
 80030ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030f2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80030f6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80030fa:	4623      	mov	r3, r4
 80030fc:	4303      	orrs	r3, r0
 80030fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8003100:	462b      	mov	r3, r5
 8003102:	430b      	orrs	r3, r1
 8003104:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003106:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800310a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800310e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003112:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800311c:	4413      	add	r3, r2
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2200      	movs	r2, #0
 8003124:	673b      	str	r3, [r7, #112]	; 0x70
 8003126:	677a      	str	r2, [r7, #116]	; 0x74
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003134:	464c      	mov	r4, r9
 8003136:	0223      	lsls	r3, r4, #8
 8003138:	4644      	mov	r4, r8
 800313a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800313e:	4644      	mov	r4, r8
 8003140:	0222      	lsls	r2, r4, #8
 8003142:	ea40 0402 	orr.w	r4, r0, r2
 8003146:	66bc      	str	r4, [r7, #104]	; 0x68
 8003148:	430b      	orrs	r3, r1
 800314a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800314c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003150:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003154:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003158:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800315c:	1c9a      	adds	r2, r3, #2
 800315e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003162:	4413      	add	r3, r2
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2200      	movs	r2, #0
 800316a:	663b      	str	r3, [r7, #96]	; 0x60
 800316c:	667a      	str	r2, [r7, #100]	; 0x64
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800317a:	464c      	mov	r4, r9
 800317c:	0423      	lsls	r3, r4, #16
 800317e:	4644      	mov	r4, r8
 8003180:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003184:	4644      	mov	r4, r8
 8003186:	0422      	lsls	r2, r4, #16
 8003188:	ea40 0402 	orr.w	r4, r0, r2
 800318c:	65bc      	str	r4, [r7, #88]	; 0x58
 800318e:	430b      	orrs	r3, r1
 8003190:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003192:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003196:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800319a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800319e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031a2:	1cda      	adds	r2, r3, #3
 80031a4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031a8:	4413      	add	r3, r2
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2200      	movs	r2, #0
 80031b0:	653b      	str	r3, [r7, #80]	; 0x50
 80031b2:	657a      	str	r2, [r7, #84]	; 0x54
 80031b4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80031b8:	4623      	mov	r3, r4
 80031ba:	0a1b      	lsrs	r3, r3, #8
 80031bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031be:	4623      	mov	r3, r4
 80031c0:	061b      	lsls	r3, r3, #24
 80031c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80031c4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80031c8:	4623      	mov	r3, r4
 80031ca:	4303      	orrs	r3, r0
 80031cc:	643b      	str	r3, [r7, #64]	; 0x40
 80031ce:	462b      	mov	r3, r5
 80031d0:	430b      	orrs	r3, r1
 80031d2:	647b      	str	r3, [r7, #68]	; 0x44
 80031d4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80031d8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80031dc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80031e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031e4:	1d1a      	adds	r2, r3, #4
 80031e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031ea:	4413      	add	r3, r2
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2200      	movs	r2, #0
 80031f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80031f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003200:	0023      	movs	r3, r4
 8003202:	2200      	movs	r2, #0
 8003204:	ea40 0402 	orr.w	r4, r0, r2
 8003208:	633c      	str	r4, [r7, #48]	; 0x30
 800320a:	430b      	orrs	r3, r1
 800320c:	637b      	str	r3, [r7, #52]	; 0x34
 800320e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003212:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003216:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800321a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800321e:	1d5a      	adds	r2, r3, #5
 8003220:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003224:	4413      	add	r3, r2
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2200      	movs	r2, #0
 800322c:	62bb      	str	r3, [r7, #40]	; 0x28
 800322e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800323a:	0223      	lsls	r3, r4, #8
 800323c:	2200      	movs	r2, #0
 800323e:	ea40 0402 	orr.w	r4, r0, r2
 8003242:	623c      	str	r4, [r7, #32]
 8003244:	430b      	orrs	r3, r1
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
 8003248:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800324c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003250:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003254:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003258:	3306      	adds	r3, #6
 800325a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800325e:	4413      	add	r3, r2
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2200      	movs	r2, #0
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	61fa      	str	r2, [r7, #28]
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	69bc      	ldr	r4, [r7, #24]
 8003274:	0423      	lsls	r3, r4, #16
 8003276:	2200      	movs	r2, #0
 8003278:	ea40 0402 	orr.w	r4, r0, r2
 800327c:	613c      	str	r4, [r7, #16]
 800327e:	430b      	orrs	r3, r1
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003286:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800328a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800328e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003292:	3307      	adds	r3, #7
 8003294:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003298:	4413      	add	r3, r2
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2200      	movs	r2, #0
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	60fa      	str	r2, [r7, #12]
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	68bc      	ldr	r4, [r7, #8]
 80032ae:	0623      	lsls	r3, r4, #24
 80032b0:	2200      	movs	r2, #0
 80032b2:	ea40 0402 	orr.w	r4, r0, r2
 80032b6:	603c      	str	r4, [r7, #0]
 80032b8:	430b      	orrs	r3, r1
 80032ba:	607b      	str	r3, [r7, #4]
 80032bc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80032c0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 80032c4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80032c8:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 80032cc:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80032d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032d4:	3308      	adds	r3, #8
 80032d6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80032da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 80032de:	4618      	mov	r0, r3
 80032e0:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80032e4:	46bd      	mov	sp, r7
 80032e6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80032ea:	4770      	bx	lr

080032ec <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	4b03      	ldr	r3, [pc, #12]	; (8003304 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	0800f634 	.word	0x0800f634

08003308 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	4b03      	ldr	r3, [pc, #12]	; (8003320 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	0800f64c 	.word	0x0800f64c

08003324 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fe fa9e 	bl	8001870 <_ZN3ros3MsgC1Ev>
 8003334:	4a08      	ldr	r2, [pc, #32]	; (8003358 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3308      	adds	r3, #8
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fada 	bl	80028f8 <_ZN13geometry_msgs7Vector3C1Ev>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3328      	adds	r3, #40	; 0x28
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fad5 	bl	80028f8 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	0800f74c 	.word	0x0800f74c

0800335c <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f103 0008 	add.w	r0, r3, #8
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	4413      	add	r3, r2
 8003376:	4619      	mov	r1, r3
 8003378:	f7ff fae6 	bl	8002948 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4413      	add	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	4413      	add	r3, r2
 8003390:	4619      	mov	r1, r3
 8003392:	f7ff fad9 	bl	8002948 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003396:	4602      	mov	r2, r0
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4413      	add	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
      return offset;
 800339e:	68fb      	ldr	r3, [r7, #12]
    }
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f103 0008 	add.w	r0, r3, #8
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	4413      	add	r3, r2
 80033c2:	4619      	mov	r1, r3
 80033c4:	f7ff fc33 	bl	8002c2e <_ZN13geometry_msgs7Vector311deserializeEPh>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4413      	add	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	4413      	add	r3, r2
 80033dc:	4619      	mov	r1, r3
 80033de:	f7ff fc26 	bl	8002c2e <_ZN13geometry_msgs7Vector311deserializeEPh>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4413      	add	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]
     return offset;
 80033ea:	68fb      	ldr	r3, [r7, #12]
    }
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	4b03      	ldr	r3, [pc, #12]	; (800340c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	0800f670 	.word	0x0800f670

08003410 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	4b03      	ldr	r3, [pc, #12]	; (8003428 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	0800f684 	.word	0x0800f684

0800342c <_Z12vel_callbackRKN13geometry_msgs5TwistE>:
#include <ros.h>
#include <rosserial.h>
#include "geometry_msgs/TwistWithCovariance.h"

void vel_callback(const geometry_msgs::Twist &msg)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	linearvelocity_x = msg.linear.x;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800343a:	490a      	ldr	r1, [pc, #40]	; (8003464 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 800343c:	e9c1 2300 	strd	r2, r3, [r1]
	linearvelocity_y = msg.linear.y;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003446:	4908      	ldr	r1, [pc, #32]	; (8003468 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x3c>)
 8003448:	e9c1 2300 	strd	r2, r3, [r1]
	angularvelocity = msg.angular.z;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003452:	4906      	ldr	r1, [pc, #24]	; (800346c <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x40>)
 8003454:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	240000c0 	.word	0x240000c0
 8003468:	240000c8 	.word	0x240000c8
 800346c:	240000d0 	.word	0x240000d0

08003470 <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Twist> vel_sub("/cmd_vel", vel_callback);
ros::Publisher odom_pub("Toposition", &real_speed);
double odom_vel[3];

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003478:	4805      	ldr	r0, [pc, #20]	; (8003490 <HAL_UART_TxCpltCallback+0x20>)
 800347a:	f000 f987 	bl	800378c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 800347e:	4603      	mov	r3, r0
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff f989 	bl	8002798 <_ZN13STM32Hardware5flushEv>
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	2400053c 	.word	0x2400053c

08003494 <Rosserial_Init>:

void Rosserial_Init(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
    nh.initNode();
 8003498:	4806      	ldr	r0, [pc, #24]	; (80034b4 <Rosserial_Init+0x20>)
 800349a:	f000 f983 	bl	80037a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
    nh.advertise(odom_pub);
 800349e:	4906      	ldr	r1, [pc, #24]	; (80034b8 <Rosserial_Init+0x24>)
 80034a0:	4804      	ldr	r0, [pc, #16]	; (80034b4 <Rosserial_Init+0x20>)
 80034a2:	f000 f9a8 	bl	80037f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
    nh.subscribe(vel_sub);
 80034a6:	4905      	ldr	r1, [pc, #20]	; (80034bc <Rosserial_Init+0x28>)
 80034a8:	4802      	ldr	r0, [pc, #8]	; (80034b4 <Rosserial_Init+0x20>)
 80034aa:	f000 f9d2 	bl	8003852 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	2400053c 	.word	0x2400053c
 80034b8:	24001728 	.word	0x24001728
 80034bc:	240016c8 	.word	0x240016c8

080034c0 <Rosserial_Spin>:

void Rosserial_Spin(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
		nh.spinOnce();
 80034c4:	4802      	ldr	r0, [pc, #8]	; (80034d0 <Rosserial_Spin+0x10>)
 80034c6:	f000 f9f1 	bl	80038ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	2400053c 	.word	0x2400053c

080034d4 <Rosserial_GetHardware>:
{
		return nh.config_state();
}

void Rosserial_GetHardware(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
		nh.getHardware()->init();
 80034d8:	4804      	ldr	r0, [pc, #16]	; (80034ec <Rosserial_GetHardware+0x18>)
 80034da:	f000 f957 	bl	800378c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 80034de:	4603      	mov	r3, r0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff f90f 	bl	8002704 <_ZN13STM32Hardware4initEv>
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	2400053c 	.word	0x2400053c

080034f0 <odom_store>:

void odom_store(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
		real_speed.linear.x =  odom_vel[0];
 80034f4:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <odom_store+0x34>)
 80034f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fa:	490b      	ldr	r1, [pc, #44]	; (8003528 <odom_store+0x38>)
 80034fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
		real_speed.linear.y = odom_vel[1];
 8003500:	4b08      	ldr	r3, [pc, #32]	; (8003524 <odom_store+0x34>)
 8003502:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003506:	4908      	ldr	r1, [pc, #32]	; (8003528 <odom_store+0x38>)
 8003508:	e9c1 2306 	strd	r2, r3, [r1, #24]
		real_speed.angular.z = odom_vel[2];
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <odom_store+0x34>)
 800350e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003512:	4905      	ldr	r1, [pc, #20]	; (8003528 <odom_store+0x38>)
 8003514:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	24001740 	.word	0x24001740
 8003528:	24001680 	.word	0x24001680

0800352c <odom_publish>:

void odom_publish(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
		odom_pub.publish(&real_speed);
 8003530:	4904      	ldr	r1, [pc, #16]	; (8003544 <odom_publish+0x18>)
 8003532:	4805      	ldr	r0, [pc, #20]	; (8003548 <odom_publish+0x1c>)
 8003534:	f7fe ffe9 	bl	800250a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 8003538:	4804      	ldr	r0, [pc, #16]	; (800354c <odom_publish+0x20>)
 800353a:	f000 f9b7 	bl	80038ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	24001680 	.word	0x24001680
 8003548:	24001728 	.word	0x24001728
 800354c:	2400053c 	.word	0x2400053c

08003550 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b03      	cmp	r3, #3
 8003562:	d80d      	bhi.n	8003580 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	fa22 f103 	lsr.w	r1, r2, r3
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4413      	add	r3, r2
 8003574:	b2ca      	uxtb	r2, r1
 8003576:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	3301      	adds	r3, #1
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	e7ee      	b.n	800355e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003580:	bf00      	nop
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d811      	bhi.n	80035ca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6839      	ldr	r1, [r7, #0]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	440a      	add	r2, r1
 80035b0:	7812      	ldrb	r2, [r2, #0]
 80035b2:	4611      	mov	r1, r2
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	00d2      	lsls	r2, r2, #3
 80035b8:	fa01 f202 	lsl.w	r2, r1, r2
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	3301      	adds	r3, #1
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	e7ea      	b.n	80035a0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80035ca:	bf00      	nop
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
	...

080035d8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	0800f794 	.word	0x0800f794

080035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff ffe8 	bl	80035d8 <_ZN3ros15NodeHandleBase_C1Ev>
 8003608:	4a45      	ldr	r2, [pc, #276]	; (8003720 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x128>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3304      	adds	r3, #4
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff f85a 	bl	80026cc <_ZN13STM32HardwareC1Ev>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	f241 1318 	movw	r3, #4376	; 0x1118
 800362a:	4413      	add	r3, r2
 800362c:	4618      	mov	r0, r3
 800362e:	f7fe fc93 	bl	8001f58 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b18      	cmp	r3, #24
 800363a:	d80a      	bhi.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5a>
      publishers[i] = 0;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003644:	2100      	movs	r1, #0
 8003646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	3301      	adds	r3, #1
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	e7f1      	b.n	8003636 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003652:	2300      	movs	r3, #0
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	2b18      	cmp	r3, #24
 800365a:	d80b      	bhi.n	8003674 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7c>
      subscribers[i] = 0;
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	2200      	movs	r2, #0
 800366a:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	3301      	adds	r3, #1
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	e7f0      	b.n	8003656 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5e>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367e:	d20a      	bcs.n	8003696 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9e>
      message_in[i] = 0;
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4413      	add	r3, r2
 8003686:	f603 0328 	addw	r3, r3, #2088	; 0x828
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	3301      	adds	r3, #1
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	e7f0      	b.n	8003678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a0:	d20a      	bcs.n	80036b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xc0>
      message_out[i] = 0;
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4413      	add	r3, r2
 80036a8:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	3301      	adds	r3, #1
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	e7f0      	b.n	800369a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa2>

    req_param_resp.ints_length = 0;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036be:	461a      	mov	r2, r3
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    req_param_resp.ints = NULL;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036cc:	461a      	mov	r2, r3
 80036ce:	2300      	movs	r3, #0
 80036d0:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    req_param_resp.floats_length = 0;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036da:	461a      	mov	r2, r3
 80036dc:	2300      	movs	r3, #0
 80036de:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    req_param_resp.floats = NULL;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e8:	461a      	mov	r2, r3
 80036ea:	2300      	movs	r3, #0
 80036ec:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
    req_param_resp.ints_length = 0;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f6:	461a      	mov	r2, r3
 80036f8:	2300      	movs	r3, #0
 80036fa:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    req_param_resp.ints = NULL;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003704:	461a      	mov	r2, r3
 8003706:	2300      	movs	r3, #0
 8003708:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

    spin_timeout_ = 0;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  }
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4618      	mov	r0, r3
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	0800f738 	.word	0x0800f738

08003724 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	4a04      	ldr	r2, [pc, #16]	; (8003740 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	0800f77c 	.word	0x0800f77c

08003744 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff ffe5 	bl	8003724 <_ZN3ros11Subscriber_C1Ev>
 800375a:	4a0b      	ldr	r2, [pc, #44]	; (8003788 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	3310      	adds	r3, #16
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fddd 	bl	8003324 <_ZN13geometry_msgs5TwistC1Ev>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	659a      	str	r2, [r3, #88]	; 0x58
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	609a      	str	r2, [r3, #8]
  };
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	0800f720 	.word	0x0800f720

0800378c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:

  Hardware* getHardware()
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3304      	adds	r3, #4
  }
 8003798:	4618      	mov	r0, r3
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe ffa7 	bl	8002704 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037bc:	461a      	mov	r2, r3
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    bytes_ = 0;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ca:	461a      	mov	r2, r3
 80037cc:	2300      	movs	r3, #0
 80037ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    index_ = 0;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d8:	461a      	mov	r2, r3
 80037da:	2300      	movs	r3, #0
 80037dc:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    topic_ = 0;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037e6:	461a      	mov	r2, r3
 80037e8:	2300      	movs	r3, #0
 80037ea:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
  };
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80037f6:	b480      	push	{r7}
 80037f8:	b085      	sub	sp, #20
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b18      	cmp	r3, #24
 8003808:	dc1c      	bgt.n	8003844 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4e>
    {
      if (publishers[i] == 0) // empty slot
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d110      	bne.n	800383c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003822:	6839      	ldr	r1, [r7, #0]
 8003824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	60da      	str	r2, [r3, #12]
        return true;
 8003838:	2301      	movs	r3, #1
 800383a:	e004      	b.n	8003846 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3301      	adds	r3, #1
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	e7df      	b.n	8003804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8003844:	2300      	movs	r3, #0
  }
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b18      	cmp	r3, #24
 8003864:	dc1b      	bgt.n	800389e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f203 4322 	addw	r3, r3, #1058	; 0x422
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10e      	bne.n	8003896 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	605a      	str	r2, [r3, #4]
        return true;
 8003892:	2301      	movs	r3, #1
 8003894:	e004      	b.n	80038a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3301      	adds	r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e7e0      	b.n	8003860 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 800389e:	2300      	movs	r3, #0
  }
 80038a0:	4618      	mov	r0, r3
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3304      	adds	r3, #4
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff f812 	bl	80028e2 <_ZN13STM32Hardware4timeEv>
 80038be:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d905      	bls.n	80038e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    if (mode_ != MODE_FIRST_FF)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00e      	beq.n	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d906      	bls.n	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003906:	461a      	mov	r2, r3
 8003908:	2300      	movs	r3, #0
 800390a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      if (spin_timeout_ > 0)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8003914:	2b00      	cmp	r3, #0
 8003916:	d014      	beq.n	8003942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3304      	adds	r3, #4
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe ffe0 	bl	80028e2 <_ZN13STM32Hardware4timeEv>
 8003922:	4602      	mov	r2, r0
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1ad2      	subs	r2, r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800392e:	429a      	cmp	r2, r3
 8003930:	bf8c      	ite	hi
 8003932:	2301      	movhi	r3, #1
 8003934:	2300      	movls	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 800393c:	f06f 0301 	mvn.w	r3, #1
 8003940:	e221      	b.n	8003d86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      int data = hardware_.read();
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3304      	adds	r3, #4
 8003946:	4618      	mov	r0, r3
 8003948:	f7fe fef8 	bl	800273c <_ZN13STM32Hardware4readEv>
 800394c:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	f2c0 81fa 	blt.w	8003d4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x49e>
      checksum_ += data;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800395c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4413      	add	r3, r2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800396a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003978:	2b07      	cmp	r3, #7
 800397a:	d12b      	bne.n	80039d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x128>
        message_in[index_++] = data;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003982:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800398e:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	b2d1      	uxtb	r1, r2
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	4413      	add	r3, r2
 800399a:	460a      	mov	r2, r1
 800399c:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
        bytes_--;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039aa:	3b01      	subs	r3, #1
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1a4      	bne.n	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ca:	461a      	mov	r2, r3
 80039cc:	2308      	movs	r3, #8
 80039ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80039d2:	e79c      	b.n	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d130      	bne.n	8003a44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x198>
        if (data == 0xff)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2bff      	cmp	r3, #255	; 0xff
 80039e6:	d112      	bne.n	8003a0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039f2:	3301      	adds	r3, #1
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3314      	adds	r3, #20
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a08:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
 8003a0c:	e77f      	b.n	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3304      	adds	r3, #4
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe ff65 	bl	80028e2 <_ZN13STM32Hardware4timeEv>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	bf8c      	ite	hi
 8003a26:	2301      	movhi	r3, #1
 8003a28:	2300      	movls	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f43f af6e 	beq.w	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
          return SPIN_TIMEOUT;
 8003a3e:	f06f 0301 	mvn.w	r3, #1
 8003a42:	e1a0      	b.n	8003d86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d121      	bne.n	8003a96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ea>
        if (data == PROTOCOL_VER)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2bfe      	cmp	r3, #254	; 0xfe
 8003a56:	d10b      	bne.n	8003a70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1c4>
          mode_++;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a62:	3301      	adds	r3, #1
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a6e:	e74e      	b.n	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a76:	461a      	mov	r2, r3
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
          if (configured_ == false)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a84:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f47f af40 	bne.w	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f97d 	bl	8003d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 8003a94:	e73b      	b.n	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d120      	bne.n	8003ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23a>
        bytes_ = data;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        index_ = 0;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2300      	movs	r3, #0
 8003abc:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
        mode_++;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aca:	3301      	adds	r3, #1
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ad2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        checksum_ = data;               /* first byte for calculating size checksum */
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003adc:	461a      	mov	r2, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8003ae4:	e713      	b.n	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d118      	bne.n	8003b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27a>
        bytes_ += data << 8;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003afa:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	021b      	lsls	r3, r3, #8
 8003b02:	4413      	add	r3, r2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b18:	3301      	adds	r3, #1
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b24:	e6f3      	b.n	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d11f      	bne.n	8003b74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c8>
        if ((checksum_ % 256) == 255)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b3a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b3e:	425a      	negs	r2, r3
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	bf58      	it	pl
 8003b46:	4253      	negpl	r3, r2
 8003b48:	2bff      	cmp	r3, #255	; 0xff
 8003b4a:	d10b      	bne.n	8003b64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b8>
          mode_++;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b56:	3301      	adds	r3, #1
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b62:	e6d4      	b.n	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b72:	e6cc      	b.n	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b7e:	2b05      	cmp	r3, #5
 8003b80:	d119      	bne.n	8003bb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30a>
        topic_ = data;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b88:	461a      	mov	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ba2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        checksum_ = data;               /* first byte included in checksum */
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bac:	461a      	mov	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8003bb4:	e6ab      	b.n	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bc0:	2b06      	cmp	r3, #6
 8003bc2:	d123      	bne.n	8003c0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x360>
        topic_ += data << 8;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bca:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	4413      	add	r3, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bda:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_ = MODE_MESSAGE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003be4:	461a      	mov	r2, r3
 8003be6:	2307      	movs	r3, #7
 8003be8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f47f ae89 	bne.w	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c02:	461a      	mov	r2, r3
 8003c04:	2308      	movs	r3, #8
 8003c06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c0a:	e680      	b.n	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	f47f ae79 	bne.w	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c22:	461a      	mov	r2, r3
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if ((checksum_ % 256) == 255)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c30:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003c34:	425a      	negs	r2, r3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	bf58      	it	pl
 8003c3c:	4253      	negpl	r3, r2
 8003c3e:	2bff      	cmp	r3, #255	; 0xff
 8003c40:	f47f ae65 	bne.w	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c4a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d116      	bne.n	8003c80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d4>
            requestSyncTime();
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f89b 	bl	8003d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f8b6 	bl	8003dca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c64:	461a      	mov	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            last_sync_receive_time = c_time;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c72:	461a      	mov	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            return SPIN_ERR;
 8003c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7e:	e082      	b.n	8003d86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
          else if (topic_ == TopicInfo::ID_TIME)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c86:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003c8a:	2b0a      	cmp	r3, #10
 8003c8c:	d107      	bne.n	8003c9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f2>
            syncTime(message_in);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f603 0328 	addw	r3, r3, #2088	; 0x828
 8003c94:	4619      	mov	r1, r3
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f97a 	bl	8003f90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 8003c9c:	e637      	b.n	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003ca8:	2b06      	cmp	r3, #6
 8003caa:	d111      	bne.n	8003cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
            req_param_resp.deserialize(message_in);
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	f241 1318 	movw	r3, #4376	; 0x1118
 8003cb2:	4413      	add	r3, r2
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	f602 0228 	addw	r2, r2, #2088	; 0x828
 8003cba:	4611      	mov	r1, r2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe fa80 	bl	80021c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8003cce:	e61e      	b.n	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003cda:	2b0b      	cmp	r3, #11
 8003cdc:	d106      	bne.n	8003cec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x440>
            configured_ = false;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8003cea:	e610      	b.n	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cf2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003cf6:	3b64      	subs	r3, #100	; 0x64
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f43f ae02 	beq.w	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d10:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003d14:	3b64      	subs	r3, #100	; 0x64
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	6858      	ldr	r0, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d28:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003d2c:	3b64      	subs	r3, #100	; 0x64
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	f602 0228 	addw	r2, r2, #2088	; 0x828
 8003d44:	4611      	mov	r1, r2
 8003d46:	4798      	blx	r3
    while (true)
 8003d48:	e5e1      	b.n	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 8003d4a:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d52:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d014      	beq.n	8003d84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d909      	bls.n	8003d84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
      requestSyncTime();
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f80c 	bl	8003d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    return SPIN_OK;
 8003d84:	2300      	movs	r3, #0
  }
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b086      	sub	sp, #24
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003d96:	f107 030c 	add.w	r3, r7, #12
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fd fd78 	bl	8001890 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f107 020c 	add.w	r2, r7, #12
 8003daa:	210a      	movs	r1, #10
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	4798      	blx	r3
    rt_time = hardware_.time();
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3304      	adds	r3, #4
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe fd94 	bl	80028e2 <_ZN13STM32Hardware4timeEv>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
  }
 8003dc2:	bf00      	nop
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003dca:	b590      	push	{r4, r7, lr}
 8003dcc:	b08b      	sub	sp, #44	; 0x2c
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003dd2:	f107 030c 	add.w	r3, r7, #12
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fd fe4a 	bl	8001a70 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003ddc:	2300      	movs	r3, #0
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	2b18      	cmp	r3, #24
 8003de4:	dc5b      	bgt.n	8003e9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dea:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d04f      	beq.n	8003e96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfa:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0c:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1c:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e24:	6859      	ldr	r1, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2a:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3308      	adds	r3, #8
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4608      	mov	r0, r1
 8003e3c:	4798      	blx	r3
 8003e3e:	4603      	mov	r3, r0
 8003e40:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e46:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e54:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4608      	mov	r0, r1
 8003e66:	4798      	blx	r3
 8003e68:	4603      	mov	r3, r0
 8003e6a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e70:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681c      	ldr	r4, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7c:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fe fb54 	bl	8002532 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003e8a:	4601      	mov	r1, r0
 8003e8c:	f107 030c 	add.w	r3, r7, #12
 8003e90:	461a      	mov	r2, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	3301      	adds	r3, #1
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9c:	e7a0      	b.n	8003de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	2b18      	cmp	r3, #24
 8003ea6:	dc68      	bgt.n	8003f7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d05b      	beq.n	8003f72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	6859      	ldr	r1, [r3, #4]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3308      	adds	r3, #8
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4608      	mov	r0, r1
 8003f04:	4798      	blx	r3
 8003f06:	4603      	mov	r3, r0
 8003f08:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	4798      	blx	r3
 8003f30:	4603      	mov	r3, r0
 8003f32:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f38:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681c      	ldr	r4, [r3, #0]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	6859      	ldr	r1, [r3, #4]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4608      	mov	r0, r1
 8003f64:	4798      	blx	r3
 8003f66:	4601      	mov	r1, r0
 8003f68:	f107 030c 	add.w	r3, r7, #12
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	3301      	adds	r3, #1
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
 8003f78:	e793      	b.n	8003ea2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
  }
 8003f86:	bf00      	nop
 8003f88:	372c      	adds	r7, #44	; 0x2c
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd90      	pop	{r4, r7, pc}
	...

08003f90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003f9a:	f107 0308 	add.w	r3, r7, #8
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fd fc76 	bl	8001890 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fe fc9a 	bl	80028e2 <_ZN13STM32Hardware4timeEv>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003fba:	f107 0308 	add.w	r3, r7, #8
 8003fbe:	6839      	ldr	r1, [r7, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fd fcd5 	bl	8001970 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	4916      	ldr	r1, [pc, #88]	; (8004024 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003fcc:	fba1 1303 	umull	r1, r3, r1, r3
 8003fd0:	099b      	lsrs	r3, r3, #6
 8003fd2:	4413      	add	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003fd6:	6939      	ldr	r1, [r7, #16]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003fdc:	fba3 0302 	umull	r0, r3, r3, r2
 8003fe0:	099b      	lsrs	r3, r3, #6
 8003fe2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fe6:	fb00 f303 	mul.w	r3, r0, r3
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	4a0e      	ldr	r2, [pc, #56]	; (8004028 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 8003fee:	fb02 f303 	mul.w	r3, r2, r3
 8003ff2:	440b      	add	r3, r1
 8003ff4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003ff6:	f107 0308 	add.w	r3, r7, #8
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f8aa 	bl	8004158 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3304      	adds	r3, #4
 8004008:	4618      	mov	r0, r3
 800400a:	f7fe fc6a 	bl	80028e2 <_ZN13STM32Hardware4timeEv>
 800400e:	4602      	mov	r2, r0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004016:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
 800401a:	bf00      	nop
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	10624dd3 	.word	0x10624dd3
 8004028:	000f4240 	.word	0x000f4240

0800402c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b63      	cmp	r3, #99	; 0x63
 800403c:	dd0b      	ble.n	8004056 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004044:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8004048:	f083 0301 	eor.w	r3, r3, #1
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004052:	2300      	movs	r3, #0
 8004054:	e079      	b.n	800414a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	f602 4228 	addw	r2, r2, #3112	; 0xc28
 8004062:	3207      	adds	r2, #7
 8004064:	4611      	mov	r1, r2
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	4798      	blx	r3
 800406a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	22ff      	movs	r2, #255	; 0xff
 8004070:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[1] = PROTOCOL_VER;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	22fe      	movs	r2, #254	; 0xfe
 8004078:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	b2da      	uxtb	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	b29b      	uxth	r3, r3
 800408a:	0a1b      	lsrs	r3, r3, #8
 800408c:	b29b      	uxth	r3, r3
 800408e:	b2da      	uxtb	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f883 2c2b 	strb.w	r2, [r3, #3115]	; 0xc2b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f893 2c2a 	ldrb.w	r2, [r3, #3114]	; 0xc2a
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 3c2b 	ldrb.w	r3, [r3, #3115]	; 0xc2b
 80040a2:	4413      	add	r3, r2
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	43db      	mvns	r3, r3
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f883 2c2c 	strb.w	r2, [r3, #3116]	; 0xc2c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f883 2c2d 	strb.w	r2, [r3, #3117]	; 0xc2d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	b21b      	sxth	r3, r3
 80040be:	121b      	asrs	r3, r3, #8
 80040c0:	b21b      	sxth	r3, r3
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f883 2c2e 	strb.w	r2, [r3, #3118]	; 0xc2e

    /* calculate checksum */
    int chk = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80040ce:	2305      	movs	r3, #5
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	3306      	adds	r3, #6
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	429a      	cmp	r2, r3
 80040da:	dc0d      	bgt.n	80040f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	4413      	add	r3, r2
 80040e2:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	4413      	add	r3, r2
 80040ee:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	3301      	adds	r3, #1
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	e7ec      	b.n	80040d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	3307      	adds	r3, #7
 80040fc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	425a      	negs	r2, r3
 8004102:	b2db      	uxtb	r3, r3
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	bf58      	it	pl
 8004108:	4253      	negpl	r3, r2
 800410a:	b2da      	uxtb	r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	1c59      	adds	r1, r3, #1
 8004110:	6179      	str	r1, [r7, #20]
 8004112:	43d2      	mvns	r2, r2
 8004114:	b2d1      	uxtb	r1, r2
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4413      	add	r3, r2
 800411a:	460a      	mov	r2, r1
 800411c:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28

    if (l <= OUTPUT_SIZE)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004126:	dc0a      	bgt.n	800413e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x112>
    {
      hardware_.write(message_out, l);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1d18      	adds	r0, r3, #4
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4619      	mov	r1, r3
 8004136:	f7fe fb8d 	bl	8002854 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	e005      	b.n	800414a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800413e:	4905      	ldr	r1, [pc, #20]	; (8004154 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x128>)
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 f849 	bl	80041d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8004146:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800414a:	4618      	mov	r0, r3
 800414c:	3720      	adds	r7, #32
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	0800f6a8 	.word	0x0800f6a8

08004158 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3304      	adds	r3, #4
 8004166:	4618      	mov	r0, r3
 8004168:	f7fe fbbb 	bl	80028e2 <_ZN13STM32Hardware4timeEv>
 800416c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4915      	ldr	r1, [pc, #84]	; (80041cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8004176:	fba1 1303 	umull	r1, r3, r1, r3
 800417a:	099b      	lsrs	r3, r3, #6
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	1e5a      	subs	r2, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6859      	ldr	r1, [r3, #4]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4b0f      	ldr	r3, [pc, #60]	; (80041cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 800418e:	fba3 0302 	umull	r0, r3, r3, r2
 8004192:	099b      	lsrs	r3, r3, #6
 8004194:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004198:	fb00 f303 	mul.w	r3, r0, r3
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	4a0c      	ldr	r2, [pc, #48]	; (80041d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 80041a0:	fb02 f303 	mul.w	r3, r2, r3
 80041a4:	1aca      	subs	r2, r1, r3
 80041a6:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 80041a8:	4413      	add	r3, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	f8c2 3820 	str.w	r3, [r2, #2080]	; 0x820
    normalizeSecNSec(sec_offset, nsec_offset);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f603 021c 	addw	r2, r3, #2076	; 0x81c
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80041bc:	4619      	mov	r1, r3
 80041be:	4610      	mov	r0, r2
 80041c0:	f7fc fa30 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	10624dd3 	.word	0x10624dd3
 80041d0:	000f4240 	.word	0x000f4240
 80041d4:	3b9aca00 	.word	0x3b9aca00

080041d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	2103      	movs	r1, #3
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f804 	bl	80041f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	460b      	mov	r3, r1
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004202:	f107 0314 	add.w	r3, r7, #20
 8004206:	4618      	mov	r0, r3
 8004208:	f7fd fdf6 	bl	8001df8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800420c:	7afb      	ldrb	r3, [r7, #11]
 800420e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f107 0214 	add.w	r2, r7, #20
 800421e:	2107      	movs	r1, #7
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	4798      	blx	r3
  }
 8004224:	bf00      	nop
 8004226:	3720      	adds	r7, #32
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <_Z41__static_initialization_and_destruction_0ii>:
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d116      	bne.n	800426a <_Z41__static_initialization_and_destruction_0ii+0x3e>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004242:	4293      	cmp	r3, r2
 8004244:	d111      	bne.n	800426a <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8004246:	480b      	ldr	r0, [pc, #44]	; (8004274 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004248:	f7ff f9d6 	bl	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
geometry_msgs::Twist real_speed;
 800424c:	480a      	ldr	r0, [pc, #40]	; (8004278 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800424e:	f7ff f869 	bl	8003324 <_ZN13geometry_msgs5TwistC1Ev>
ros::Subscriber<geometry_msgs::Twist> vel_sub("/cmd_vel", vel_callback);
 8004252:	2301      	movs	r3, #1
 8004254:	4a09      	ldr	r2, [pc, #36]	; (800427c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004256:	490a      	ldr	r1, [pc, #40]	; (8004280 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004258:	480a      	ldr	r0, [pc, #40]	; (8004284 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800425a:	f7ff fa73 	bl	8003744 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher odom_pub("Toposition", &real_speed);
 800425e:	2300      	movs	r3, #0
 8004260:	4a05      	ldr	r2, [pc, #20]	; (8004278 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004262:	4909      	ldr	r1, [pc, #36]	; (8004288 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004264:	4809      	ldr	r0, [pc, #36]	; (800428c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004266:	f7fe f939 	bl	80024dc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	2400053c 	.word	0x2400053c
 8004278:	24001680 	.word	0x24001680
 800427c:	0800342d 	.word	0x0800342d
 8004280:	0800f6e4 	.word	0x0800f6e4
 8004284:	240016c8 	.word	0x240016c8
 8004288:	0800f6f0 	.word	0x0800f6f0
 800428c:	24001728 	.word	0x24001728

08004290 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3310      	adds	r3, #16
 800429e:	6839      	ldr	r1, [r7, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff f881 	bl	80033a8 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	3210      	adds	r2, #16
 80042ae:	4610      	mov	r0, r2
 80042b0:	4798      	blx	r3
  }
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3310      	adds	r3, #16
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff f888 	bl	80033f4 <_ZN13geometry_msgs5Twist7getTypeEv>
 80042e4:	4603      	mov	r3, r0
  }
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b082      	sub	sp, #8
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3310      	adds	r3, #16
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff f888 	bl	8003410 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004300:	4603      	mov	r3, r0
  }
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
    return configured_;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004318:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
  };
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <_GLOBAL__sub_I__Z12vel_callbackRKN13geometry_msgs5TwistE>:
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
 800432c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004330:	2001      	movs	r0, #1
 8004332:	f7ff ff7b 	bl	800422c <_Z41__static_initialization_and_destruction_0ii>
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800433e:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <HAL_MspInit+0x30>)
 8004340:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004344:	4a08      	ldr	r2, [pc, #32]	; (8004368 <HAL_MspInit+0x30>)
 8004346:	f043 0302 	orr.w	r3, r3, #2
 800434a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <HAL_MspInit+0x30>)
 8004350:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	607b      	str	r3, [r7, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	58024400 	.word	0x58024400

0800436c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004370:	e7fe      	b.n	8004370 <NMI_Handler+0x4>

08004372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004372:	b480      	push	{r7}
 8004374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004376:	e7fe      	b.n	8004376 <HardFault_Handler+0x4>

08004378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800437c:	e7fe      	b.n	800437c <MemManage_Handler+0x4>

0800437e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800437e:	b480      	push	{r7}
 8004380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004382:	e7fe      	b.n	8004382 <BusFault_Handler+0x4>

08004384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004388:	e7fe      	b.n	8004388 <UsageFault_Handler+0x4>

0800438a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800438a:	b480      	push	{r7}
 800438c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800438e:	bf00      	nop
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800439c:	bf00      	nop
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043a6:	b480      	push	{r7}
 80043a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043aa:	bf00      	nop
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043b8:	f000 ffa0 	bl	80052fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043bc:	bf00      	nop
 80043be:	bd80      	pop	{r7, pc}

080043c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80043c4:	4802      	ldr	r0, [pc, #8]	; (80043d0 <DMA1_Stream0_IRQHandler+0x10>)
 80043c6:	f002 fdd9 	bl	8006f7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80043ca:	bf00      	nop
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	24001a04 	.word	0x24001a04

080043d4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80043d8:	4802      	ldr	r0, [pc, #8]	; (80043e4 <DMA1_Stream1_IRQHandler+0x10>)
 80043da:	f002 fdcf 	bl	8006f7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80043de:	bf00      	nop
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	24001a7c 	.word	0x24001a7c

080043e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80043ec:	4802      	ldr	r0, [pc, #8]	; (80043f8 <TIM2_IRQHandler+0x10>)
 80043ee:	f007 fc83 	bl	800bcf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80043f2:	bf00      	nop
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	2400175c 	.word	0x2400175c

080043fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004400:	4802      	ldr	r0, [pc, #8]	; (800440c <TIM3_IRQHandler+0x10>)
 8004402:	f007 fc79 	bl	800bcf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004406:	bf00      	nop
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	240017a8 	.word	0x240017a8

08004410 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004414:	4802      	ldr	r0, [pc, #8]	; (8004420 <TIM4_IRQHandler+0x10>)
 8004416:	f007 fc6f 	bl	800bcf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800441a:	bf00      	nop
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	240017f4 	.word	0x240017f4

08004424 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004428:	4802      	ldr	r0, [pc, #8]	; (8004434 <USART1_IRQHandler+0x10>)
 800442a:	f008 feaf 	bl	800d18c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800442e:	bf00      	nop
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	24001970 	.word	0x24001970

08004438 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800443c:	4802      	ldr	r0, [pc, #8]	; (8004448 <TIM5_IRQHandler+0x10>)
 800443e:	f007 fc5b 	bl	800bcf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004442:	bf00      	nop
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	24001840 	.word	0x24001840

0800444c <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8004450:	4802      	ldr	r0, [pc, #8]	; (800445c <TIM23_IRQHandler+0x10>)
 8004452:	f007 fc51 	bl	800bcf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8004456:	bf00      	nop
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	24001924 	.word	0x24001924

08004460 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  return 1;
 8004464:	2301      	movs	r3, #1
}
 8004466:	4618      	mov	r0, r3
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <_kill>:

int _kill(int pid, int sig)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800447a:	f00a fea3 	bl	800f1c4 <__errno>
 800447e:	4603      	mov	r3, r0
 8004480:	2216      	movs	r2, #22
 8004482:	601a      	str	r2, [r3, #0]
  return -1;
 8004484:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <_exit>:

void _exit (int status)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004498:	f04f 31ff 	mov.w	r1, #4294967295
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff ffe7 	bl	8004470 <_kill>
  while (1) {}    /* Make sure we hang here */
 80044a2:	e7fe      	b.n	80044a2 <_exit+0x12>

080044a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044ac:	4a14      	ldr	r2, [pc, #80]	; (8004500 <_sbrk+0x5c>)
 80044ae:	4b15      	ldr	r3, [pc, #84]	; (8004504 <_sbrk+0x60>)
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044b8:	4b13      	ldr	r3, [pc, #76]	; (8004508 <_sbrk+0x64>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d102      	bne.n	80044c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044c0:	4b11      	ldr	r3, [pc, #68]	; (8004508 <_sbrk+0x64>)
 80044c2:	4a12      	ldr	r2, [pc, #72]	; (800450c <_sbrk+0x68>)
 80044c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044c6:	4b10      	ldr	r3, [pc, #64]	; (8004508 <_sbrk+0x64>)
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4413      	add	r3, r2
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d207      	bcs.n	80044e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044d4:	f00a fe76 	bl	800f1c4 <__errno>
 80044d8:	4603      	mov	r3, r0
 80044da:	220c      	movs	r2, #12
 80044dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044de:	f04f 33ff 	mov.w	r3, #4294967295
 80044e2:	e009      	b.n	80044f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044e4:	4b08      	ldr	r3, [pc, #32]	; (8004508 <_sbrk+0x64>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044ea:	4b07      	ldr	r3, [pc, #28]	; (8004508 <_sbrk+0x64>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4413      	add	r3, r2
 80044f2:	4a05      	ldr	r2, [pc, #20]	; (8004508 <_sbrk+0x64>)
 80044f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044f6:	68fb      	ldr	r3, [r7, #12]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	24050000 	.word	0x24050000
 8004504:	00000400 	.word	0x00000400
 8004508:	24001758 	.word	0x24001758
 800450c:	24001b08 	.word	0x24001b08

08004510 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004514:	4b32      	ldr	r3, [pc, #200]	; (80045e0 <SystemInit+0xd0>)
 8004516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451a:	4a31      	ldr	r2, [pc, #196]	; (80045e0 <SystemInit+0xd0>)
 800451c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004524:	4b2f      	ldr	r3, [pc, #188]	; (80045e4 <SystemInit+0xd4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 030f 	and.w	r3, r3, #15
 800452c:	2b06      	cmp	r3, #6
 800452e:	d807      	bhi.n	8004540 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004530:	4b2c      	ldr	r3, [pc, #176]	; (80045e4 <SystemInit+0xd4>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f023 030f 	bic.w	r3, r3, #15
 8004538:	4a2a      	ldr	r2, [pc, #168]	; (80045e4 <SystemInit+0xd4>)
 800453a:	f043 0307 	orr.w	r3, r3, #7
 800453e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004540:	4b29      	ldr	r3, [pc, #164]	; (80045e8 <SystemInit+0xd8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a28      	ldr	r2, [pc, #160]	; (80045e8 <SystemInit+0xd8>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800454c:	4b26      	ldr	r3, [pc, #152]	; (80045e8 <SystemInit+0xd8>)
 800454e:	2200      	movs	r2, #0
 8004550:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004552:	4b25      	ldr	r3, [pc, #148]	; (80045e8 <SystemInit+0xd8>)
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	4924      	ldr	r1, [pc, #144]	; (80045e8 <SystemInit+0xd8>)
 8004558:	4b24      	ldr	r3, [pc, #144]	; (80045ec <SystemInit+0xdc>)
 800455a:	4013      	ands	r3, r2
 800455c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800455e:	4b21      	ldr	r3, [pc, #132]	; (80045e4 <SystemInit+0xd4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d007      	beq.n	800457a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800456a:	4b1e      	ldr	r3, [pc, #120]	; (80045e4 <SystemInit+0xd4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f023 030f 	bic.w	r3, r3, #15
 8004572:	4a1c      	ldr	r2, [pc, #112]	; (80045e4 <SystemInit+0xd4>)
 8004574:	f043 0307 	orr.w	r3, r3, #7
 8004578:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800457a:	4b1b      	ldr	r3, [pc, #108]	; (80045e8 <SystemInit+0xd8>)
 800457c:	2200      	movs	r2, #0
 800457e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004580:	4b19      	ldr	r3, [pc, #100]	; (80045e8 <SystemInit+0xd8>)
 8004582:	2200      	movs	r2, #0
 8004584:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004586:	4b18      	ldr	r3, [pc, #96]	; (80045e8 <SystemInit+0xd8>)
 8004588:	2200      	movs	r2, #0
 800458a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800458c:	4b16      	ldr	r3, [pc, #88]	; (80045e8 <SystemInit+0xd8>)
 800458e:	4a18      	ldr	r2, [pc, #96]	; (80045f0 <SystemInit+0xe0>)
 8004590:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004592:	4b15      	ldr	r3, [pc, #84]	; (80045e8 <SystemInit+0xd8>)
 8004594:	4a17      	ldr	r2, [pc, #92]	; (80045f4 <SystemInit+0xe4>)
 8004596:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004598:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <SystemInit+0xd8>)
 800459a:	4a17      	ldr	r2, [pc, #92]	; (80045f8 <SystemInit+0xe8>)
 800459c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800459e:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <SystemInit+0xd8>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80045a4:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <SystemInit+0xd8>)
 80045a6:	4a14      	ldr	r2, [pc, #80]	; (80045f8 <SystemInit+0xe8>)
 80045a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80045aa:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <SystemInit+0xd8>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80045b0:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <SystemInit+0xd8>)
 80045b2:	4a11      	ldr	r2, [pc, #68]	; (80045f8 <SystemInit+0xe8>)
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80045b6:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <SystemInit+0xd8>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <SystemInit+0xd8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a09      	ldr	r2, [pc, #36]	; (80045e8 <SystemInit+0xd8>)
 80045c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80045c8:	4b07      	ldr	r3, [pc, #28]	; (80045e8 <SystemInit+0xd8>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80045ce:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <SystemInit+0xec>)
 80045d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80045d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80045d6:	bf00      	nop
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	e000ed00 	.word	0xe000ed00
 80045e4:	52002000 	.word	0x52002000
 80045e8:	58024400 	.word	0x58024400
 80045ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80045f0:	02020200 	.word	0x02020200
 80045f4:	01ff0000 	.word	0x01ff0000
 80045f8:	01010280 	.word	0x01010280
 80045fc:	52004000 	.word	0x52004000

08004600 <MX_TIM2_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim23;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08c      	sub	sp, #48	; 0x30
 8004604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004606:	f107 030c 	add.w	r3, r7, #12
 800460a:	2224      	movs	r2, #36	; 0x24
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f00a fe10 	bl	800f234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004614:	463b      	mov	r3, r7
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	605a      	str	r2, [r3, #4]
 800461c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800461e:	4b21      	ldr	r3, [pc, #132]	; (80046a4 <MX_TIM2_Init+0xa4>)
 8004620:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004624:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004626:	4b1f      	ldr	r3, [pc, #124]	; (80046a4 <MX_TIM2_Init+0xa4>)
 8004628:	2200      	movs	r2, #0
 800462a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800462c:	4b1d      	ldr	r3, [pc, #116]	; (80046a4 <MX_TIM2_Init+0xa4>)
 800462e:	2200      	movs	r2, #0
 8004630:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004632:	4b1c      	ldr	r3, [pc, #112]	; (80046a4 <MX_TIM2_Init+0xa4>)
 8004634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004638:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800463a:	4b1a      	ldr	r3, [pc, #104]	; (80046a4 <MX_TIM2_Init+0xa4>)
 800463c:	2200      	movs	r2, #0
 800463e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004640:	4b18      	ldr	r3, [pc, #96]	; (80046a4 <MX_TIM2_Init+0xa4>)
 8004642:	2200      	movs	r2, #0
 8004644:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004646:	2303      	movs	r3, #3
 8004648:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800464a:	2300      	movs	r3, #0
 800464c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800464e:	2301      	movs	r3, #1
 8004650:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004652:	2300      	movs	r3, #0
 8004654:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004656:	2300      	movs	r3, #0
 8004658:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800465a:	2300      	movs	r3, #0
 800465c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800465e:	2301      	movs	r3, #1
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004662:	2300      	movs	r3, #0
 8004664:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800466a:	f107 030c 	add.w	r3, r7, #12
 800466e:	4619      	mov	r1, r3
 8004670:	480c      	ldr	r0, [pc, #48]	; (80046a4 <MX_TIM2_Init+0xa4>)
 8004672:	f007 fa0d 	bl	800ba90 <HAL_TIM_Encoder_Init>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800467c:	f7fd f8e2 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004680:	2300      	movs	r3, #0
 8004682:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004684:	2300      	movs	r3, #0
 8004686:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004688:	463b      	mov	r3, r7
 800468a:	4619      	mov	r1, r3
 800468c:	4805      	ldr	r0, [pc, #20]	; (80046a4 <MX_TIM2_Init+0xa4>)
 800468e:	f008 fac7 	bl	800cc20 <HAL_TIMEx_MasterConfigSynchronization>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004698:	f7fd f8d4 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800469c:	bf00      	nop
 800469e:	3730      	adds	r7, #48	; 0x30
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	2400175c 	.word	0x2400175c

080046a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08c      	sub	sp, #48	; 0x30
 80046ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80046ae:	f107 030c 	add.w	r3, r7, #12
 80046b2:	2224      	movs	r2, #36	; 0x24
 80046b4:	2100      	movs	r1, #0
 80046b6:	4618      	mov	r0, r3
 80046b8:	f00a fdbc 	bl	800f234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046bc:	463b      	mov	r3, r7
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	605a      	str	r2, [r3, #4]
 80046c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80046c6:	4b21      	ldr	r3, [pc, #132]	; (800474c <MX_TIM3_Init+0xa4>)
 80046c8:	4a21      	ldr	r2, [pc, #132]	; (8004750 <MX_TIM3_Init+0xa8>)
 80046ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80046cc:	4b1f      	ldr	r3, [pc, #124]	; (800474c <MX_TIM3_Init+0xa4>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046d2:	4b1e      	ldr	r3, [pc, #120]	; (800474c <MX_TIM3_Init+0xa4>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80046d8:	4b1c      	ldr	r3, [pc, #112]	; (800474c <MX_TIM3_Init+0xa4>)
 80046da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046e0:	4b1a      	ldr	r3, [pc, #104]	; (800474c <MX_TIM3_Init+0xa4>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046e6:	4b19      	ldr	r3, [pc, #100]	; (800474c <MX_TIM3_Init+0xa4>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80046ec:	2303      	movs	r3, #3
 80046ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80046f0:	2300      	movs	r3, #0
 80046f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80046f4:	2301      	movs	r3, #1
 80046f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004700:	2300      	movs	r3, #0
 8004702:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004704:	2301      	movs	r3, #1
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004708:	2300      	movs	r3, #0
 800470a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004710:	f107 030c 	add.w	r3, r7, #12
 8004714:	4619      	mov	r1, r3
 8004716:	480d      	ldr	r0, [pc, #52]	; (800474c <MX_TIM3_Init+0xa4>)
 8004718:	f007 f9ba 	bl	800ba90 <HAL_TIM_Encoder_Init>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8004722:	f7fd f88f 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004726:	2300      	movs	r3, #0
 8004728:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800472a:	2300      	movs	r3, #0
 800472c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800472e:	463b      	mov	r3, r7
 8004730:	4619      	mov	r1, r3
 8004732:	4806      	ldr	r0, [pc, #24]	; (800474c <MX_TIM3_Init+0xa4>)
 8004734:	f008 fa74 	bl	800cc20 <HAL_TIMEx_MasterConfigSynchronization>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800473e:	f7fd f881 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004742:	bf00      	nop
 8004744:	3730      	adds	r7, #48	; 0x30
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	240017a8 	.word	0x240017a8
 8004750:	40000400 	.word	0x40000400

08004754 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b08c      	sub	sp, #48	; 0x30
 8004758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800475a:	f107 030c 	add.w	r3, r7, #12
 800475e:	2224      	movs	r2, #36	; 0x24
 8004760:	2100      	movs	r1, #0
 8004762:	4618      	mov	r0, r3
 8004764:	f00a fd66 	bl	800f234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004768:	463b      	mov	r3, r7
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	605a      	str	r2, [r3, #4]
 8004770:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004772:	4b21      	ldr	r3, [pc, #132]	; (80047f8 <MX_TIM4_Init+0xa4>)
 8004774:	4a21      	ldr	r2, [pc, #132]	; (80047fc <MX_TIM4_Init+0xa8>)
 8004776:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004778:	4b1f      	ldr	r3, [pc, #124]	; (80047f8 <MX_TIM4_Init+0xa4>)
 800477a:	2200      	movs	r2, #0
 800477c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800477e:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <MX_TIM4_Init+0xa4>)
 8004780:	2200      	movs	r2, #0
 8004782:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004784:	4b1c      	ldr	r3, [pc, #112]	; (80047f8 <MX_TIM4_Init+0xa4>)
 8004786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800478a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800478c:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <MX_TIM4_Init+0xa4>)
 800478e:	2200      	movs	r2, #0
 8004790:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004792:	4b19      	ldr	r3, [pc, #100]	; (80047f8 <MX_TIM4_Init+0xa4>)
 8004794:	2200      	movs	r2, #0
 8004796:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004798:	2303      	movs	r3, #3
 800479a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800479c:	2300      	movs	r3, #0
 800479e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80047a0:	2301      	movs	r3, #1
 80047a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80047ac:	2300      	movs	r3, #0
 80047ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80047b0:	2301      	movs	r3, #1
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80047b4:	2300      	movs	r3, #0
 80047b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80047bc:	f107 030c 	add.w	r3, r7, #12
 80047c0:	4619      	mov	r1, r3
 80047c2:	480d      	ldr	r0, [pc, #52]	; (80047f8 <MX_TIM4_Init+0xa4>)
 80047c4:	f007 f964 	bl	800ba90 <HAL_TIM_Encoder_Init>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80047ce:	f7fd f839 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047d2:	2300      	movs	r3, #0
 80047d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80047da:	463b      	mov	r3, r7
 80047dc:	4619      	mov	r1, r3
 80047de:	4806      	ldr	r0, [pc, #24]	; (80047f8 <MX_TIM4_Init+0xa4>)
 80047e0:	f008 fa1e 	bl	800cc20 <HAL_TIMEx_MasterConfigSynchronization>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80047ea:	f7fd f82b 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80047ee:	bf00      	nop
 80047f0:	3730      	adds	r7, #48	; 0x30
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	240017f4 	.word	0x240017f4
 80047fc:	40000800 	.word	0x40000800

08004800 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08c      	sub	sp, #48	; 0x30
 8004804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004806:	f107 030c 	add.w	r3, r7, #12
 800480a:	2224      	movs	r2, #36	; 0x24
 800480c:	2100      	movs	r1, #0
 800480e:	4618      	mov	r0, r3
 8004810:	f00a fd10 	bl	800f234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004814:	463b      	mov	r3, r7
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	605a      	str	r2, [r3, #4]
 800481c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800481e:	4b21      	ldr	r3, [pc, #132]	; (80048a4 <MX_TIM5_Init+0xa4>)
 8004820:	4a21      	ldr	r2, [pc, #132]	; (80048a8 <MX_TIM5_Init+0xa8>)
 8004822:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004824:	4b1f      	ldr	r3, [pc, #124]	; (80048a4 <MX_TIM5_Init+0xa4>)
 8004826:	2200      	movs	r2, #0
 8004828:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800482a:	4b1e      	ldr	r3, [pc, #120]	; (80048a4 <MX_TIM5_Init+0xa4>)
 800482c:	2200      	movs	r2, #0
 800482e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8004830:	4b1c      	ldr	r3, [pc, #112]	; (80048a4 <MX_TIM5_Init+0xa4>)
 8004832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004836:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004838:	4b1a      	ldr	r3, [pc, #104]	; (80048a4 <MX_TIM5_Init+0xa4>)
 800483a:	2200      	movs	r2, #0
 800483c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800483e:	4b19      	ldr	r3, [pc, #100]	; (80048a4 <MX_TIM5_Init+0xa4>)
 8004840:	2200      	movs	r2, #0
 8004842:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004844:	2303      	movs	r3, #3
 8004846:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004848:	2300      	movs	r3, #0
 800484a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800484c:	2301      	movs	r3, #1
 800484e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004850:	2300      	movs	r3, #0
 8004852:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004858:	2300      	movs	r3, #0
 800485a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800485c:	2301      	movs	r3, #1
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004860:	2300      	movs	r3, #0
 8004862:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8004868:	f107 030c 	add.w	r3, r7, #12
 800486c:	4619      	mov	r1, r3
 800486e:	480d      	ldr	r0, [pc, #52]	; (80048a4 <MX_TIM5_Init+0xa4>)
 8004870:	f007 f90e 	bl	800ba90 <HAL_TIM_Encoder_Init>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800487a:	f7fc ffe3 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800487e:	2300      	movs	r3, #0
 8004880:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004882:	2300      	movs	r3, #0
 8004884:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004886:	463b      	mov	r3, r7
 8004888:	4619      	mov	r1, r3
 800488a:	4806      	ldr	r0, [pc, #24]	; (80048a4 <MX_TIM5_Init+0xa4>)
 800488c:	f008 f9c8 	bl	800cc20 <HAL_TIMEx_MasterConfigSynchronization>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8004896:	f7fc ffd5 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800489a:	bf00      	nop
 800489c:	3730      	adds	r7, #48	; 0x30
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	24001840 	.word	0x24001840
 80048a8:	40000c00 	.word	0x40000c00

080048ac <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08a      	sub	sp, #40	; 0x28
 80048b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048b2:	f107 031c 	add.w	r3, r7, #28
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	605a      	str	r2, [r3, #4]
 80048bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048be:	463b      	mov	r3, r7
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	605a      	str	r2, [r3, #4]
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	60da      	str	r2, [r3, #12]
 80048ca:	611a      	str	r2, [r3, #16]
 80048cc:	615a      	str	r2, [r3, #20]
 80048ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80048d0:	4b27      	ldr	r3, [pc, #156]	; (8004970 <MX_TIM12_Init+0xc4>)
 80048d2:	4a28      	ldr	r2, [pc, #160]	; (8004974 <MX_TIM12_Init+0xc8>)
 80048d4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80048d6:	4b26      	ldr	r3, [pc, #152]	; (8004970 <MX_TIM12_Init+0xc4>)
 80048d8:	2200      	movs	r2, #0
 80048da:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048dc:	4b24      	ldr	r3, [pc, #144]	; (8004970 <MX_TIM12_Init+0xc4>)
 80048de:	2200      	movs	r2, #0
 80048e0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 3000;
 80048e2:	4b23      	ldr	r3, [pc, #140]	; (8004970 <MX_TIM12_Init+0xc4>)
 80048e4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80048e8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048ea:	4b21      	ldr	r3, [pc, #132]	; (8004970 <MX_TIM12_Init+0xc4>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048f0:	4b1f      	ldr	r3, [pc, #124]	; (8004970 <MX_TIM12_Init+0xc4>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80048f6:	481e      	ldr	r0, [pc, #120]	; (8004970 <MX_TIM12_Init+0xc4>)
 80048f8:	f006 ff56 	bl	800b7a8 <HAL_TIM_PWM_Init>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8004902:	f7fc ff9f 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800490a:	2300      	movs	r3, #0
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 800490e:	f107 031c 	add.w	r3, r7, #28
 8004912:	4619      	mov	r1, r3
 8004914:	4816      	ldr	r0, [pc, #88]	; (8004970 <MX_TIM12_Init+0xc4>)
 8004916:	f008 f983 	bl	800cc20 <HAL_TIMEx_MasterConfigSynchronization>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8004920:	f7fc ff90 	bl	8001844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004924:	2360      	movs	r3, #96	; 0x60
 8004926:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800492c:	2300      	movs	r3, #0
 800492e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004930:	2300      	movs	r3, #0
 8004932:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004934:	463b      	mov	r3, r7
 8004936:	2200      	movs	r2, #0
 8004938:	4619      	mov	r1, r3
 800493a:	480d      	ldr	r0, [pc, #52]	; (8004970 <MX_TIM12_Init+0xc4>)
 800493c:	f007 fafc 	bl	800bf38 <HAL_TIM_PWM_ConfigChannel>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 8004946:	f7fc ff7d 	bl	8001844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800494a:	463b      	mov	r3, r7
 800494c:	2204      	movs	r2, #4
 800494e:	4619      	mov	r1, r3
 8004950:	4807      	ldr	r0, [pc, #28]	; (8004970 <MX_TIM12_Init+0xc4>)
 8004952:	f007 faf1 	bl	800bf38 <HAL_TIM_PWM_ConfigChannel>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <MX_TIM12_Init+0xb4>
  {
    Error_Handler();
 800495c:	f7fc ff72 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8004960:	4803      	ldr	r0, [pc, #12]	; (8004970 <MX_TIM12_Init+0xc4>)
 8004962:	f000 fa79 	bl	8004e58 <HAL_TIM_MspPostInit>

}
 8004966:	bf00      	nop
 8004968:	3728      	adds	r7, #40	; 0x28
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	2400188c 	.word	0x2400188c
 8004974:	40001800 	.word	0x40001800

08004978 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b098      	sub	sp, #96	; 0x60
 800497c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800497e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	605a      	str	r2, [r3, #4]
 8004988:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800498a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	605a      	str	r2, [r3, #4]
 8004994:	609a      	str	r2, [r3, #8]
 8004996:	60da      	str	r2, [r3, #12]
 8004998:	611a      	str	r2, [r3, #16]
 800499a:	615a      	str	r2, [r3, #20]
 800499c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800499e:	1d3b      	adds	r3, r7, #4
 80049a0:	2234      	movs	r2, #52	; 0x34
 80049a2:	2100      	movs	r1, #0
 80049a4:	4618      	mov	r0, r3
 80049a6:	f00a fc45 	bl	800f234 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80049aa:	4b3a      	ldr	r3, [pc, #232]	; (8004a94 <MX_TIM15_Init+0x11c>)
 80049ac:	4a3a      	ldr	r2, [pc, #232]	; (8004a98 <MX_TIM15_Init+0x120>)
 80049ae:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80049b0:	4b38      	ldr	r3, [pc, #224]	; (8004a94 <MX_TIM15_Init+0x11c>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049b6:	4b37      	ldr	r3, [pc, #220]	; (8004a94 <MX_TIM15_Init+0x11c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3000;
 80049bc:	4b35      	ldr	r3, [pc, #212]	; (8004a94 <MX_TIM15_Init+0x11c>)
 80049be:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80049c2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049c4:	4b33      	ldr	r3, [pc, #204]	; (8004a94 <MX_TIM15_Init+0x11c>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80049ca:	4b32      	ldr	r3, [pc, #200]	; (8004a94 <MX_TIM15_Init+0x11c>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049d0:	4b30      	ldr	r3, [pc, #192]	; (8004a94 <MX_TIM15_Init+0x11c>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80049d6:	482f      	ldr	r0, [pc, #188]	; (8004a94 <MX_TIM15_Init+0x11c>)
 80049d8:	f006 fee6 	bl	800b7a8 <HAL_TIM_PWM_Init>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80049e2:	f7fc ff2f 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049e6:	2300      	movs	r3, #0
 80049e8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049ea:	2300      	movs	r3, #0
 80049ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80049ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049f2:	4619      	mov	r1, r3
 80049f4:	4827      	ldr	r0, [pc, #156]	; (8004a94 <MX_TIM15_Init+0x11c>)
 80049f6:	f008 f913 	bl	800cc20 <HAL_TIMEx_MasterConfigSynchronization>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8004a00:	f7fc ff20 	bl	8001844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a04:	2360      	movs	r3, #96	; 0x60
 8004a06:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a10:	2300      	movs	r3, #0
 8004a12:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a14:	2300      	movs	r3, #0
 8004a16:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a24:	2200      	movs	r2, #0
 8004a26:	4619      	mov	r1, r3
 8004a28:	481a      	ldr	r0, [pc, #104]	; (8004a94 <MX_TIM15_Init+0x11c>)
 8004a2a:	f007 fa85 	bl	800bf38 <HAL_TIM_PWM_ConfigChannel>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8004a34:	f7fc ff06 	bl	8001844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a3c:	2204      	movs	r2, #4
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4814      	ldr	r0, [pc, #80]	; (8004a94 <MX_TIM15_Init+0x11c>)
 8004a42:	f007 fa79 	bl	800bf38 <HAL_TIM_PWM_ConfigChannel>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8004a4c:	f7fc fefa 	bl	8001844 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a50:	2300      	movs	r3, #0
 8004a52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004a72:	1d3b      	adds	r3, r7, #4
 8004a74:	4619      	mov	r1, r3
 8004a76:	4807      	ldr	r0, [pc, #28]	; (8004a94 <MX_TIM15_Init+0x11c>)
 8004a78:	f008 f96e 	bl	800cd58 <HAL_TIMEx_ConfigBreakDeadTime>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8004a82:	f7fc fedf 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8004a86:	4803      	ldr	r0, [pc, #12]	; (8004a94 <MX_TIM15_Init+0x11c>)
 8004a88:	f000 f9e6 	bl	8004e58 <HAL_TIM_MspPostInit>

}
 8004a8c:	bf00      	nop
 8004a8e:	3760      	adds	r7, #96	; 0x60
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	240018d8 	.word	0x240018d8
 8004a98:	40014000 	.word	0x40014000

08004a9c <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004aa2:	f107 0310 	add.w	r3, r7, #16
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	605a      	str	r2, [r3, #4]
 8004aac:	609a      	str	r2, [r3, #8]
 8004aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ab0:	1d3b      	adds	r3, r7, #4
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	605a      	str	r2, [r3, #4]
 8004ab8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8004aba:	4b1d      	ldr	r3, [pc, #116]	; (8004b30 <MX_TIM23_Init+0x94>)
 8004abc:	4a1d      	ldr	r2, [pc, #116]	; (8004b34 <MX_TIM23_Init+0x98>)
 8004abe:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 13;
 8004ac0:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <MX_TIM23_Init+0x94>)
 8004ac2:	220d      	movs	r2, #13
 8004ac4:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ac6:	4b1a      	ldr	r3, [pc, #104]	; (8004b30 <MX_TIM23_Init+0x94>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 11999;
 8004acc:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <MX_TIM23_Init+0x94>)
 8004ace:	f642 62df 	movw	r2, #11999	; 0x2edf
 8004ad2:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ad4:	4b16      	ldr	r3, [pc, #88]	; (8004b30 <MX_TIM23_Init+0x94>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ada:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <MX_TIM23_Init+0x94>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8004ae0:	4813      	ldr	r0, [pc, #76]	; (8004b30 <MX_TIM23_Init+0x94>)
 8004ae2:	f006 fd83 	bl	800b5ec <HAL_TIM_Base_Init>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <MX_TIM23_Init+0x54>
  {
    Error_Handler();
 8004aec:	f7fc feaa 	bl	8001844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004af4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8004af6:	f107 0310 	add.w	r3, r7, #16
 8004afa:	4619      	mov	r1, r3
 8004afc:	480c      	ldr	r0, [pc, #48]	; (8004b30 <MX_TIM23_Init+0x94>)
 8004afe:	f007 fb2f 	bl	800c160 <HAL_TIM_ConfigClockSource>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <MX_TIM23_Init+0x70>
  {
    Error_Handler();
 8004b08:	f7fc fe9c 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8004b14:	1d3b      	adds	r3, r7, #4
 8004b16:	4619      	mov	r1, r3
 8004b18:	4805      	ldr	r0, [pc, #20]	; (8004b30 <MX_TIM23_Init+0x94>)
 8004b1a:	f008 f881 	bl	800cc20 <HAL_TIMEx_MasterConfigSynchronization>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <MX_TIM23_Init+0x8c>
  {
    Error_Handler();
 8004b24:	f7fc fe8e 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8004b28:	bf00      	nop
 8004b2a:	3720      	adds	r7, #32
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	24001924 	.word	0x24001924
 8004b34:	4000e000 	.word	0x4000e000

08004b38 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b090      	sub	sp, #64	; 0x40
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	605a      	str	r2, [r3, #4]
 8004b4a:	609a      	str	r2, [r3, #8]
 8004b4c:	60da      	str	r2, [r3, #12]
 8004b4e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b58:	d156      	bne.n	8004c08 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b5a:	4b87      	ldr	r3, [pc, #540]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b60:	4a85      	ldr	r2, [pc, #532]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004b6a:	4b83      	ldr	r3, [pc, #524]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004b6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b78:	4b7f      	ldr	r3, [pc, #508]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b7e:	4a7e      	ldr	r2, [pc, #504]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b88:	4b7b      	ldr	r3, [pc, #492]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b96:	4b78      	ldr	r3, [pc, #480]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b9c:	4a76      	ldr	r2, [pc, #472]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004b9e:	f043 0302 	orr.w	r3, r3, #2
 8004ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ba6:	4b74      	ldr	r3, [pc, #464]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	623b      	str	r3, [r7, #32]
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004bb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bba:	2302      	movs	r3, #2
 8004bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bce:	4619      	mov	r1, r3
 8004bd0:	486a      	ldr	r0, [pc, #424]	; (8004d7c <HAL_TIM_Encoder_MspInit+0x244>)
 8004bd2:	f003 fce5 	bl	80085a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004bd6:	2308      	movs	r3, #8
 8004bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bda:	2302      	movs	r3, #2
 8004bdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004be2:	2300      	movs	r3, #0
 8004be4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004be6:	2301      	movs	r3, #1
 8004be8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4863      	ldr	r0, [pc, #396]	; (8004d80 <HAL_TIM_Encoder_MspInit+0x248>)
 8004bf2:	f003 fcd5 	bl	80085a0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	201c      	movs	r0, #28
 8004bfc:	f000 fc9d 	bl	800553a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004c00:	201c      	movs	r0, #28
 8004c02:	f000 fcb4 	bl	800556e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004c06:	e0b3      	b.n	8004d70 <HAL_TIM_Encoder_MspInit+0x238>
  else if(tim_encoderHandle->Instance==TIM3)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a5d      	ldr	r2, [pc, #372]	; (8004d84 <HAL_TIM_Encoder_MspInit+0x24c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d136      	bne.n	8004c80 <HAL_TIM_Encoder_MspInit+0x148>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c12:	4b59      	ldr	r3, [pc, #356]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c18:	4a57      	ldr	r2, [pc, #348]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c1a:	f043 0302 	orr.w	r3, r3, #2
 8004c1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004c22:	4b55      	ldr	r3, [pc, #340]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	61fb      	str	r3, [r7, #28]
 8004c2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c30:	4b51      	ldr	r3, [pc, #324]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c36:	4a50      	ldr	r2, [pc, #320]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c38:	f043 0302 	orr.w	r3, r3, #2
 8004c3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c40:	4b4d      	ldr	r3, [pc, #308]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	61bb      	str	r3, [r7, #24]
 8004c4c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004c4e:	2330      	movs	r3, #48	; 0x30
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c52:	2302      	movs	r3, #2
 8004c54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c5e:	2302      	movs	r3, #2
 8004c60:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c66:	4619      	mov	r1, r3
 8004c68:	4845      	ldr	r0, [pc, #276]	; (8004d80 <HAL_TIM_Encoder_MspInit+0x248>)
 8004c6a:	f003 fc99 	bl	80085a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2100      	movs	r1, #0
 8004c72:	201d      	movs	r0, #29
 8004c74:	f000 fc61 	bl	800553a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004c78:	201d      	movs	r0, #29
 8004c7a:	f000 fc78 	bl	800556e <HAL_NVIC_EnableIRQ>
}
 8004c7e:	e077      	b.n	8004d70 <HAL_TIM_Encoder_MspInit+0x238>
  else if(tim_encoderHandle->Instance==TIM4)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a40      	ldr	r2, [pc, #256]	; (8004d88 <HAL_TIM_Encoder_MspInit+0x250>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d137      	bne.n	8004cfa <HAL_TIM_Encoder_MspInit+0x1c2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c8a:	4b3b      	ldr	r3, [pc, #236]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c90:	4a39      	ldr	r2, [pc, #228]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c92:	f043 0304 	orr.w	r3, r3, #4
 8004c96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004c9a:	4b37      	ldr	r3, [pc, #220]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ca8:	4b33      	ldr	r3, [pc, #204]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cae:	4a32      	ldr	r2, [pc, #200]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004cb0:	f043 0308 	orr.w	r3, r3, #8
 8004cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004cb8:	4b2f      	ldr	r3, [pc, #188]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004cc6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004cd8:	2302      	movs	r3, #2
 8004cda:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	482a      	ldr	r0, [pc, #168]	; (8004d8c <HAL_TIM_Encoder_MspInit+0x254>)
 8004ce4:	f003 fc5c 	bl	80085a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2100      	movs	r1, #0
 8004cec:	201e      	movs	r0, #30
 8004cee:	f000 fc24 	bl	800553a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004cf2:	201e      	movs	r0, #30
 8004cf4:	f000 fc3b 	bl	800556e <HAL_NVIC_EnableIRQ>
}
 8004cf8:	e03a      	b.n	8004d70 <HAL_TIM_Encoder_MspInit+0x238>
  else if(tim_encoderHandle->Instance==TIM5)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a24      	ldr	r2, [pc, #144]	; (8004d90 <HAL_TIM_Encoder_MspInit+0x258>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d135      	bne.n	8004d70 <HAL_TIM_Encoder_MspInit+0x238>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d04:	4b1c      	ldr	r3, [pc, #112]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004d06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d0a:	4a1b      	ldr	r2, [pc, #108]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004d0c:	f043 0308 	orr.w	r3, r3, #8
 8004d10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d14:	4b18      	ldr	r3, [pc, #96]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004d16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d22:	4b15      	ldr	r3, [pc, #84]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d28:	4a13      	ldr	r2, [pc, #76]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d32:	4b11      	ldr	r3, [pc, #68]	; (8004d78 <HAL_TIM_Encoder_MspInit+0x240>)
 8004d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d40:	2303      	movs	r3, #3
 8004d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d44:	2302      	movs	r3, #2
 8004d46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004d50:	2302      	movs	r3, #2
 8004d52:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4808      	ldr	r0, [pc, #32]	; (8004d7c <HAL_TIM_Encoder_MspInit+0x244>)
 8004d5c:	f003 fc20 	bl	80085a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004d60:	2200      	movs	r2, #0
 8004d62:	2100      	movs	r1, #0
 8004d64:	2032      	movs	r0, #50	; 0x32
 8004d66:	f000 fbe8 	bl	800553a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004d6a:	2032      	movs	r0, #50	; 0x32
 8004d6c:	f000 fbff 	bl	800556e <HAL_NVIC_EnableIRQ>
}
 8004d70:	bf00      	nop
 8004d72:	3740      	adds	r7, #64	; 0x40
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	58024400 	.word	0x58024400
 8004d7c:	58020000 	.word	0x58020000
 8004d80:	58020400 	.word	0x58020400
 8004d84:	40000400 	.word	0x40000400
 8004d88:	40000800 	.word	0x40000800
 8004d8c:	58020c00 	.word	0x58020c00
 8004d90:	40000c00 	.word	0x40000c00

08004d94 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a16      	ldr	r2, [pc, #88]	; (8004dfc <HAL_TIM_PWM_MspInit+0x68>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d10f      	bne.n	8004dc6 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004da6:	4b16      	ldr	r3, [pc, #88]	; (8004e00 <HAL_TIM_PWM_MspInit+0x6c>)
 8004da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dac:	4a14      	ldr	r2, [pc, #80]	; (8004e00 <HAL_TIM_PWM_MspInit+0x6c>)
 8004dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004db6:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <HAL_TIM_PWM_MspInit+0x6c>)
 8004db8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004dc4:	e013      	b.n	8004dee <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM15)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a0e      	ldr	r2, [pc, #56]	; (8004e04 <HAL_TIM_PWM_MspInit+0x70>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d10e      	bne.n	8004dee <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <HAL_TIM_PWM_MspInit+0x6c>)
 8004dd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dd6:	4a0a      	ldr	r2, [pc, #40]	; (8004e00 <HAL_TIM_PWM_MspInit+0x6c>)
 8004dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ddc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004de0:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <HAL_TIM_PWM_MspInit+0x6c>)
 8004de2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dea:	60bb      	str	r3, [r7, #8]
 8004dec:	68bb      	ldr	r3, [r7, #8]
}
 8004dee:	bf00      	nop
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40001800 	.word	0x40001800
 8004e00:	58024400 	.word	0x58024400
 8004e04:	40014000 	.word	0x40014000

08004e08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM23)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a0e      	ldr	r2, [pc, #56]	; (8004e50 <HAL_TIM_Base_MspInit+0x48>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d116      	bne.n	8004e48 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* TIM23 clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 8004e1a:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <HAL_TIM_Base_MspInit+0x4c>)
 8004e1c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004e20:	4a0c      	ldr	r2, [pc, #48]	; (8004e54 <HAL_TIM_Base_MspInit+0x4c>)
 8004e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e26:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004e2a:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <HAL_TIM_Base_MspInit+0x4c>)
 8004e2c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004e30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	68fb      	ldr	r3, [r7, #12]

    /* TIM23 interrupt Init */
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	20a1      	movs	r0, #161	; 0xa1
 8004e3e:	f000 fb7c 	bl	800553a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8004e42:	20a1      	movs	r0, #161	; 0xa1
 8004e44:	f000 fb93 	bl	800556e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }
}
 8004e48:	bf00      	nop
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	4000e000 	.word	0x4000e000
 8004e54:	58024400 	.word	0x58024400

08004e58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	; 0x28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e60:	f107 0314 	add.w	r3, r7, #20
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	609a      	str	r2, [r3, #8]
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a25      	ldr	r2, [pc, #148]	; (8004f0c <HAL_TIM_MspPostInit+0xb4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d120      	bne.n	8004ebc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e7a:	4b25      	ldr	r3, [pc, #148]	; (8004f10 <HAL_TIM_MspPostInit+0xb8>)
 8004e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e80:	4a23      	ldr	r2, [pc, #140]	; (8004f10 <HAL_TIM_MspPostInit+0xb8>)
 8004e82:	f043 0302 	orr.w	r3, r3, #2
 8004e86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e8a:	4b21      	ldr	r3, [pc, #132]	; (8004f10 <HAL_TIM_MspPostInit+0xb8>)
 8004e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004e98:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8004eaa:	2302      	movs	r3, #2
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eae:	f107 0314 	add.w	r3, r7, #20
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4817      	ldr	r0, [pc, #92]	; (8004f14 <HAL_TIM_MspPostInit+0xbc>)
 8004eb6:	f003 fb73 	bl	80085a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004eba:	e023      	b.n	8004f04 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM15)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a15      	ldr	r2, [pc, #84]	; (8004f18 <HAL_TIM_MspPostInit+0xc0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d11e      	bne.n	8004f04 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ec6:	4b12      	ldr	r3, [pc, #72]	; (8004f10 <HAL_TIM_MspPostInit+0xb8>)
 8004ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ecc:	4a10      	ldr	r2, [pc, #64]	; (8004f10 <HAL_TIM_MspPostInit+0xb8>)
 8004ece:	f043 0310 	orr.w	r3, r3, #16
 8004ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ed6:	4b0e      	ldr	r3, [pc, #56]	; (8004f10 <HAL_TIM_MspPostInit+0xb8>)
 8004ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004ee4:	2360      	movs	r3, #96	; 0x60
 8004ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee8:	2302      	movs	r3, #2
 8004eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ef8:	f107 0314 	add.w	r3, r7, #20
 8004efc:	4619      	mov	r1, r3
 8004efe:	4807      	ldr	r0, [pc, #28]	; (8004f1c <HAL_TIM_MspPostInit+0xc4>)
 8004f00:	f003 fb4e 	bl	80085a0 <HAL_GPIO_Init>
}
 8004f04:	bf00      	nop
 8004f06:	3728      	adds	r7, #40	; 0x28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40001800 	.word	0x40001800
 8004f10:	58024400 	.word	0x58024400
 8004f14:	58020400 	.word	0x58020400
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	58021000 	.word	0x58021000

08004f20 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004f24:	4b22      	ldr	r3, [pc, #136]	; (8004fb0 <MX_USART1_UART_Init+0x90>)
 8004f26:	4a23      	ldr	r2, [pc, #140]	; (8004fb4 <MX_USART1_UART_Init+0x94>)
 8004f28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004f2a:	4b21      	ldr	r3, [pc, #132]	; (8004fb0 <MX_USART1_UART_Init+0x90>)
 8004f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f32:	4b1f      	ldr	r3, [pc, #124]	; (8004fb0 <MX_USART1_UART_Init+0x90>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f38:	4b1d      	ldr	r3, [pc, #116]	; (8004fb0 <MX_USART1_UART_Init+0x90>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004f3e:	4b1c      	ldr	r3, [pc, #112]	; (8004fb0 <MX_USART1_UART_Init+0x90>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f44:	4b1a      	ldr	r3, [pc, #104]	; (8004fb0 <MX_USART1_UART_Init+0x90>)
 8004f46:	220c      	movs	r2, #12
 8004f48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f4a:	4b19      	ldr	r3, [pc, #100]	; (8004fb0 <MX_USART1_UART_Init+0x90>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f50:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <MX_USART1_UART_Init+0x90>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f56:	4b16      	ldr	r3, [pc, #88]	; (8004fb0 <MX_USART1_UART_Init+0x90>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004f5c:	4b14      	ldr	r3, [pc, #80]	; (8004fb0 <MX_USART1_UART_Init+0x90>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f62:	4b13      	ldr	r3, [pc, #76]	; (8004fb0 <MX_USART1_UART_Init+0x90>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f68:	4811      	ldr	r0, [pc, #68]	; (8004fb0 <MX_USART1_UART_Init+0x90>)
 8004f6a:	f007 ffb3 	bl	800ced4 <HAL_UART_Init>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004f74:	f7fc fc66 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f78:	2100      	movs	r1, #0
 8004f7a:	480d      	ldr	r0, [pc, #52]	; (8004fb0 <MX_USART1_UART_Init+0x90>)
 8004f7c:	f00a f83c 	bl	800eff8 <HAL_UARTEx_SetTxFifoThreshold>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004f86:	f7fc fc5d 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	4808      	ldr	r0, [pc, #32]	; (8004fb0 <MX_USART1_UART_Init+0x90>)
 8004f8e:	f00a f871 	bl	800f074 <HAL_UARTEx_SetRxFifoThreshold>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004f98:	f7fc fc54 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004f9c:	4804      	ldr	r0, [pc, #16]	; (8004fb0 <MX_USART1_UART_Init+0x90>)
 8004f9e:	f009 fff2 	bl	800ef86 <HAL_UARTEx_DisableFifoMode>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004fa8:	f7fc fc4c 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004fac:	bf00      	nop
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	24001970 	.word	0x24001970
 8004fb4:	40011000 	.word	0x40011000

08004fb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b0b8      	sub	sp, #224	; 0xe0
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	605a      	str	r2, [r3, #4]
 8004fca:	609a      	str	r2, [r3, #8]
 8004fcc:	60da      	str	r2, [r3, #12]
 8004fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004fd0:	f107 0310 	add.w	r3, r7, #16
 8004fd4:	22b8      	movs	r2, #184	; 0xb8
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f00a f92b 	bl	800f234 <memset>
  if(uartHandle->Instance==USART1)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a5a      	ldr	r2, [pc, #360]	; (800514c <HAL_UART_MspInit+0x194>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	f040 80ad 	bne.w	8005144 <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004fea:	f04f 0201 	mov.w	r2, #1
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ffc:	f107 0310 	add.w	r3, r7, #16
 8005000:	4618      	mov	r0, r3
 8005002:	f004 fd31 	bl	8009a68 <HAL_RCCEx_PeriphCLKConfig>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 800500c:	f7fc fc1a 	bl	8001844 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005010:	4b4f      	ldr	r3, [pc, #316]	; (8005150 <HAL_UART_MspInit+0x198>)
 8005012:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005016:	4a4e      	ldr	r2, [pc, #312]	; (8005150 <HAL_UART_MspInit+0x198>)
 8005018:	f043 0310 	orr.w	r3, r3, #16
 800501c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005020:	4b4b      	ldr	r3, [pc, #300]	; (8005150 <HAL_UART_MspInit+0x198>)
 8005022:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005026:	f003 0310 	and.w	r3, r3, #16
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800502e:	4b48      	ldr	r3, [pc, #288]	; (8005150 <HAL_UART_MspInit+0x198>)
 8005030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005034:	4a46      	ldr	r2, [pc, #280]	; (8005150 <HAL_UART_MspInit+0x198>)
 8005036:	f043 0301 	orr.w	r3, r3, #1
 800503a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800503e:	4b44      	ldr	r3, [pc, #272]	; (8005150 <HAL_UART_MspInit+0x198>)
 8005040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	60bb      	str	r3, [r7, #8]
 800504a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800504c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005050:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005054:	2302      	movs	r3, #2
 8005056:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800505a:	2300      	movs	r3, #0
 800505c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005060:	2300      	movs	r3, #0
 8005062:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005066:	2307      	movs	r3, #7
 8005068:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800506c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005070:	4619      	mov	r1, r3
 8005072:	4838      	ldr	r0, [pc, #224]	; (8005154 <HAL_UART_MspInit+0x19c>)
 8005074:	f003 fa94 	bl	80085a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8005078:	4b37      	ldr	r3, [pc, #220]	; (8005158 <HAL_UART_MspInit+0x1a0>)
 800507a:	4a38      	ldr	r2, [pc, #224]	; (800515c <HAL_UART_MspInit+0x1a4>)
 800507c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800507e:	4b36      	ldr	r3, [pc, #216]	; (8005158 <HAL_UART_MspInit+0x1a0>)
 8005080:	2229      	movs	r2, #41	; 0x29
 8005082:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005084:	4b34      	ldr	r3, [pc, #208]	; (8005158 <HAL_UART_MspInit+0x1a0>)
 8005086:	2200      	movs	r2, #0
 8005088:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800508a:	4b33      	ldr	r3, [pc, #204]	; (8005158 <HAL_UART_MspInit+0x1a0>)
 800508c:	2200      	movs	r2, #0
 800508e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005090:	4b31      	ldr	r3, [pc, #196]	; (8005158 <HAL_UART_MspInit+0x1a0>)
 8005092:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005096:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005098:	4b2f      	ldr	r3, [pc, #188]	; (8005158 <HAL_UART_MspInit+0x1a0>)
 800509a:	2200      	movs	r2, #0
 800509c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800509e:	4b2e      	ldr	r3, [pc, #184]	; (8005158 <HAL_UART_MspInit+0x1a0>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80050a4:	4b2c      	ldr	r3, [pc, #176]	; (8005158 <HAL_UART_MspInit+0x1a0>)
 80050a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050aa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80050ac:	4b2a      	ldr	r3, [pc, #168]	; (8005158 <HAL_UART_MspInit+0x1a0>)
 80050ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050b2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050b4:	4b28      	ldr	r3, [pc, #160]	; (8005158 <HAL_UART_MspInit+0x1a0>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80050ba:	4827      	ldr	r0, [pc, #156]	; (8005158 <HAL_UART_MspInit+0x1a0>)
 80050bc:	f000 fa80 	bl	80055c0 <HAL_DMA_Init>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80050c6:	f7fc fbbd 	bl	8001844 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a22      	ldr	r2, [pc, #136]	; (8005158 <HAL_UART_MspInit+0x1a0>)
 80050ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80050d2:	4a21      	ldr	r2, [pc, #132]	; (8005158 <HAL_UART_MspInit+0x1a0>)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80050d8:	4b21      	ldr	r3, [pc, #132]	; (8005160 <HAL_UART_MspInit+0x1a8>)
 80050da:	4a22      	ldr	r2, [pc, #136]	; (8005164 <HAL_UART_MspInit+0x1ac>)
 80050dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80050de:	4b20      	ldr	r3, [pc, #128]	; (8005160 <HAL_UART_MspInit+0x1a8>)
 80050e0:	222a      	movs	r2, #42	; 0x2a
 80050e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050e4:	4b1e      	ldr	r3, [pc, #120]	; (8005160 <HAL_UART_MspInit+0x1a8>)
 80050e6:	2240      	movs	r2, #64	; 0x40
 80050e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050ea:	4b1d      	ldr	r3, [pc, #116]	; (8005160 <HAL_UART_MspInit+0x1a8>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050f0:	4b1b      	ldr	r3, [pc, #108]	; (8005160 <HAL_UART_MspInit+0x1a8>)
 80050f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050f8:	4b19      	ldr	r3, [pc, #100]	; (8005160 <HAL_UART_MspInit+0x1a8>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050fe:	4b18      	ldr	r3, [pc, #96]	; (8005160 <HAL_UART_MspInit+0x1a8>)
 8005100:	2200      	movs	r2, #0
 8005102:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005104:	4b16      	ldr	r3, [pc, #88]	; (8005160 <HAL_UART_MspInit+0x1a8>)
 8005106:	2200      	movs	r2, #0
 8005108:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800510a:	4b15      	ldr	r3, [pc, #84]	; (8005160 <HAL_UART_MspInit+0x1a8>)
 800510c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005110:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005112:	4b13      	ldr	r3, [pc, #76]	; (8005160 <HAL_UART_MspInit+0x1a8>)
 8005114:	2200      	movs	r2, #0
 8005116:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005118:	4811      	ldr	r0, [pc, #68]	; (8005160 <HAL_UART_MspInit+0x1a8>)
 800511a:	f000 fa51 	bl	80055c0 <HAL_DMA_Init>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8005124:	f7fc fb8e 	bl	8001844 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a0d      	ldr	r2, [pc, #52]	; (8005160 <HAL_UART_MspInit+0x1a8>)
 800512c:	67da      	str	r2, [r3, #124]	; 0x7c
 800512e:	4a0c      	ldr	r2, [pc, #48]	; (8005160 <HAL_UART_MspInit+0x1a8>)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005134:	2200      	movs	r2, #0
 8005136:	2100      	movs	r1, #0
 8005138:	2025      	movs	r0, #37	; 0x25
 800513a:	f000 f9fe 	bl	800553a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800513e:	2025      	movs	r0, #37	; 0x25
 8005140:	f000 fa15 	bl	800556e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005144:	bf00      	nop
 8005146:	37e0      	adds	r7, #224	; 0xe0
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40011000 	.word	0x40011000
 8005150:	58024400 	.word	0x58024400
 8005154:	58020000 	.word	0x58020000
 8005158:	24001a04 	.word	0x24001a04
 800515c:	40020010 	.word	0x40020010
 8005160:	24001a7c 	.word	0x24001a7c
 8005164:	40020028 	.word	0x40020028

08005168 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a10      	ldr	r2, [pc, #64]	; (80051b8 <HAL_UART_MspDeInit+0x50>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d11a      	bne.n	80051b0 <HAL_UART_MspDeInit+0x48>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800517a:	4b10      	ldr	r3, [pc, #64]	; (80051bc <HAL_UART_MspDeInit+0x54>)
 800517c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005180:	4a0e      	ldr	r2, [pc, #56]	; (80051bc <HAL_UART_MspDeInit+0x54>)
 8005182:	f023 0310 	bic.w	r3, r3, #16
 8005186:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800518a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800518e:	480c      	ldr	r0, [pc, #48]	; (80051c0 <HAL_UART_MspDeInit+0x58>)
 8005190:	f003 fbae 	bl	80088f0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fd6a 	bl	8005c74 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fd65 	bl	8005c74 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80051aa:	2025      	movs	r0, #37	; 0x25
 80051ac:	f000 f9ed 	bl	800558a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40011000 	.word	0x40011000
 80051bc:	58024400 	.word	0x58024400
 80051c0:	58020000 	.word	0x58020000

080051c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80051c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80051c8:	f7ff f9a2 	bl	8004510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051cc:	480c      	ldr	r0, [pc, #48]	; (8005200 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80051ce:	490d      	ldr	r1, [pc, #52]	; (8005204 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80051d0:	4a0d      	ldr	r2, [pc, #52]	; (8005208 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80051d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051d4:	e002      	b.n	80051dc <LoopCopyDataInit>

080051d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051da:	3304      	adds	r3, #4

080051dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051e0:	d3f9      	bcc.n	80051d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051e2:	4a0a      	ldr	r2, [pc, #40]	; (800520c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80051e4:	4c0a      	ldr	r4, [pc, #40]	; (8005210 <LoopFillZerobss+0x22>)
  movs r3, #0
 80051e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051e8:	e001      	b.n	80051ee <LoopFillZerobss>

080051ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051ec:	3204      	adds	r2, #4

080051ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051f0:	d3fb      	bcc.n	80051ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80051f2:	f009 ffed 	bl	800f1d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80051f6:	f7fc fa09 	bl	800160c <main>
  bx  lr
 80051fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80051fc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8005200:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005204:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8005208:	0800f86c 	.word	0x0800f86c
  ldr r2, =_sbss
 800520c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8005210:	24001b08 	.word	0x24001b08

08005214 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005214:	e7fe      	b.n	8005214 <ADC3_IRQHandler>
	...

08005218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800521e:	2003      	movs	r0, #3
 8005220:	f000 f980 	bl	8005524 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005224:	f004 fa4a 	bl	80096bc <HAL_RCC_GetSysClockFreq>
 8005228:	4602      	mov	r2, r0
 800522a:	4b15      	ldr	r3, [pc, #84]	; (8005280 <HAL_Init+0x68>)
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	0a1b      	lsrs	r3, r3, #8
 8005230:	f003 030f 	and.w	r3, r3, #15
 8005234:	4913      	ldr	r1, [pc, #76]	; (8005284 <HAL_Init+0x6c>)
 8005236:	5ccb      	ldrb	r3, [r1, r3]
 8005238:	f003 031f 	and.w	r3, r3, #31
 800523c:	fa22 f303 	lsr.w	r3, r2, r3
 8005240:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005242:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <HAL_Init+0x68>)
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	4a0e      	ldr	r2, [pc, #56]	; (8005284 <HAL_Init+0x6c>)
 800524c:	5cd3      	ldrb	r3, [r2, r3]
 800524e:	f003 031f 	and.w	r3, r3, #31
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	fa22 f303 	lsr.w	r3, r2, r3
 8005258:	4a0b      	ldr	r2, [pc, #44]	; (8005288 <HAL_Init+0x70>)
 800525a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800525c:	4a0b      	ldr	r2, [pc, #44]	; (800528c <HAL_Init+0x74>)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005262:	2000      	movs	r0, #0
 8005264:	f000 f814 	bl	8005290 <HAL_InitTick>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e002      	b.n	8005278 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005272:	f7ff f861 	bl	8004338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	58024400 	.word	0x58024400
 8005284:	0800f818 	.word	0x0800f818
 8005288:	24000004 	.word	0x24000004
 800528c:	24000000 	.word	0x24000000

08005290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005298:	4b15      	ldr	r3, [pc, #84]	; (80052f0 <HAL_InitTick+0x60>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e021      	b.n	80052e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80052a4:	4b13      	ldr	r3, [pc, #76]	; (80052f4 <HAL_InitTick+0x64>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <HAL_InitTick+0x60>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	4619      	mov	r1, r3
 80052ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80052b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 f973 	bl	80055a6 <HAL_SYSTICK_Config>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e00e      	b.n	80052e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b0f      	cmp	r3, #15
 80052ce:	d80a      	bhi.n	80052e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052d0:	2200      	movs	r2, #0
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	f04f 30ff 	mov.w	r0, #4294967295
 80052d8:	f000 f92f 	bl	800553a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80052dc:	4a06      	ldr	r2, [pc, #24]	; (80052f8 <HAL_InitTick+0x68>)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e000      	b.n	80052e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	2400000c 	.word	0x2400000c
 80052f4:	24000000 	.word	0x24000000
 80052f8:	24000008 	.word	0x24000008

080052fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005300:	4b06      	ldr	r3, [pc, #24]	; (800531c <HAL_IncTick+0x20>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	461a      	mov	r2, r3
 8005306:	4b06      	ldr	r3, [pc, #24]	; (8005320 <HAL_IncTick+0x24>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4413      	add	r3, r2
 800530c:	4a04      	ldr	r2, [pc, #16]	; (8005320 <HAL_IncTick+0x24>)
 800530e:	6013      	str	r3, [r2, #0]
}
 8005310:	bf00      	nop
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	2400000c 	.word	0x2400000c
 8005320:	24001af4 	.word	0x24001af4

08005324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  return uwTick;
 8005328:	4b03      	ldr	r3, [pc, #12]	; (8005338 <HAL_GetTick+0x14>)
 800532a:	681b      	ldr	r3, [r3, #0]
}
 800532c:	4618      	mov	r0, r3
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	24001af4 	.word	0x24001af4

0800533c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800534c:	4b0b      	ldr	r3, [pc, #44]	; (800537c <__NVIC_SetPriorityGrouping+0x40>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005358:	4013      	ands	r3, r2
 800535a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005364:	4b06      	ldr	r3, [pc, #24]	; (8005380 <__NVIC_SetPriorityGrouping+0x44>)
 8005366:	4313      	orrs	r3, r2
 8005368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800536a:	4a04      	ldr	r2, [pc, #16]	; (800537c <__NVIC_SetPriorityGrouping+0x40>)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	60d3      	str	r3, [r2, #12]
}
 8005370:	bf00      	nop
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	e000ed00 	.word	0xe000ed00
 8005380:	05fa0000 	.word	0x05fa0000

08005384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005388:	4b04      	ldr	r3, [pc, #16]	; (800539c <__NVIC_GetPriorityGrouping+0x18>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	0a1b      	lsrs	r3, r3, #8
 800538e:	f003 0307 	and.w	r3, r3, #7
}
 8005392:	4618      	mov	r0, r3
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	e000ed00 	.word	0xe000ed00

080053a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	db0b      	blt.n	80053ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	f003 021f 	and.w	r2, r3, #31
 80053b8:	4907      	ldr	r1, [pc, #28]	; (80053d8 <__NVIC_EnableIRQ+0x38>)
 80053ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053be:	095b      	lsrs	r3, r3, #5
 80053c0:	2001      	movs	r0, #1
 80053c2:	fa00 f202 	lsl.w	r2, r0, r2
 80053c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	e000e100 	.word	0xe000e100

080053dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	db12      	blt.n	8005414 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	f003 021f 	and.w	r2, r3, #31
 80053f4:	490a      	ldr	r1, [pc, #40]	; (8005420 <__NVIC_DisableIRQ+0x44>)
 80053f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	2001      	movs	r0, #1
 80053fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005402:	3320      	adds	r3, #32
 8005404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005408:	f3bf 8f4f 	dsb	sy
}
 800540c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800540e:	f3bf 8f6f 	isb	sy
}
 8005412:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	e000e100 	.word	0xe000e100

08005424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	6039      	str	r1, [r7, #0]
 800542e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005430:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005434:	2b00      	cmp	r3, #0
 8005436:	db0a      	blt.n	800544e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	b2da      	uxtb	r2, r3
 800543c:	490c      	ldr	r1, [pc, #48]	; (8005470 <__NVIC_SetPriority+0x4c>)
 800543e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005442:	0112      	lsls	r2, r2, #4
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	440b      	add	r3, r1
 8005448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800544c:	e00a      	b.n	8005464 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	b2da      	uxtb	r2, r3
 8005452:	4908      	ldr	r1, [pc, #32]	; (8005474 <__NVIC_SetPriority+0x50>)
 8005454:	88fb      	ldrh	r3, [r7, #6]
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	3b04      	subs	r3, #4
 800545c:	0112      	lsls	r2, r2, #4
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	440b      	add	r3, r1
 8005462:	761a      	strb	r2, [r3, #24]
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	e000e100 	.word	0xe000e100
 8005474:	e000ed00 	.word	0xe000ed00

08005478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005478:	b480      	push	{r7}
 800547a:	b089      	sub	sp, #36	; 0x24
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f1c3 0307 	rsb	r3, r3, #7
 8005492:	2b04      	cmp	r3, #4
 8005494:	bf28      	it	cs
 8005496:	2304      	movcs	r3, #4
 8005498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	3304      	adds	r3, #4
 800549e:	2b06      	cmp	r3, #6
 80054a0:	d902      	bls.n	80054a8 <NVIC_EncodePriority+0x30>
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	3b03      	subs	r3, #3
 80054a6:	e000      	b.n	80054aa <NVIC_EncodePriority+0x32>
 80054a8:	2300      	movs	r3, #0
 80054aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054ac:	f04f 32ff 	mov.w	r2, #4294967295
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	43da      	mvns	r2, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	401a      	ands	r2, r3
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054c0:	f04f 31ff 	mov.w	r1, #4294967295
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ca:	43d9      	mvns	r1, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054d0:	4313      	orrs	r3, r2
         );
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3724      	adds	r7, #36	; 0x24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
	...

080054e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054f0:	d301      	bcc.n	80054f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054f2:	2301      	movs	r3, #1
 80054f4:	e00f      	b.n	8005516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054f6:	4a0a      	ldr	r2, [pc, #40]	; (8005520 <SysTick_Config+0x40>)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054fe:	210f      	movs	r1, #15
 8005500:	f04f 30ff 	mov.w	r0, #4294967295
 8005504:	f7ff ff8e 	bl	8005424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005508:	4b05      	ldr	r3, [pc, #20]	; (8005520 <SysTick_Config+0x40>)
 800550a:	2200      	movs	r2, #0
 800550c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800550e:	4b04      	ldr	r3, [pc, #16]	; (8005520 <SysTick_Config+0x40>)
 8005510:	2207      	movs	r2, #7
 8005512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	e000e010 	.word	0xe000e010

08005524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff ff05 	bl	800533c <__NVIC_SetPriorityGrouping>
}
 8005532:	bf00      	nop
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b086      	sub	sp, #24
 800553e:	af00      	add	r7, sp, #0
 8005540:	4603      	mov	r3, r0
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005548:	f7ff ff1c 	bl	8005384 <__NVIC_GetPriorityGrouping>
 800554c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	6978      	ldr	r0, [r7, #20]
 8005554:	f7ff ff90 	bl	8005478 <NVIC_EncodePriority>
 8005558:	4602      	mov	r2, r0
 800555a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800555e:	4611      	mov	r1, r2
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff ff5f 	bl	8005424 <__NVIC_SetPriority>
}
 8005566:	bf00      	nop
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
 8005574:	4603      	mov	r3, r0
 8005576:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005578:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff ff0f 	bl	80053a0 <__NVIC_EnableIRQ>
}
 8005582:	bf00      	nop
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	4603      	mov	r3, r0
 8005592:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff ff1f 	bl	80053dc <__NVIC_DisableIRQ>
}
 800559e:	bf00      	nop
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff ff96 	bl	80054e0 <SysTick_Config>
 80055b4:	4603      	mov	r3, r0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80055c8:	f7ff feac 	bl	8005324 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e314      	b.n	8005c02 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a66      	ldr	r2, [pc, #408]	; (8005778 <HAL_DMA_Init+0x1b8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d04a      	beq.n	8005678 <HAL_DMA_Init+0xb8>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a65      	ldr	r2, [pc, #404]	; (800577c <HAL_DMA_Init+0x1bc>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d045      	beq.n	8005678 <HAL_DMA_Init+0xb8>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a63      	ldr	r2, [pc, #396]	; (8005780 <HAL_DMA_Init+0x1c0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d040      	beq.n	8005678 <HAL_DMA_Init+0xb8>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a62      	ldr	r2, [pc, #392]	; (8005784 <HAL_DMA_Init+0x1c4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d03b      	beq.n	8005678 <HAL_DMA_Init+0xb8>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a60      	ldr	r2, [pc, #384]	; (8005788 <HAL_DMA_Init+0x1c8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d036      	beq.n	8005678 <HAL_DMA_Init+0xb8>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a5f      	ldr	r2, [pc, #380]	; (800578c <HAL_DMA_Init+0x1cc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d031      	beq.n	8005678 <HAL_DMA_Init+0xb8>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a5d      	ldr	r2, [pc, #372]	; (8005790 <HAL_DMA_Init+0x1d0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d02c      	beq.n	8005678 <HAL_DMA_Init+0xb8>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a5c      	ldr	r2, [pc, #368]	; (8005794 <HAL_DMA_Init+0x1d4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d027      	beq.n	8005678 <HAL_DMA_Init+0xb8>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a5a      	ldr	r2, [pc, #360]	; (8005798 <HAL_DMA_Init+0x1d8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d022      	beq.n	8005678 <HAL_DMA_Init+0xb8>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a59      	ldr	r2, [pc, #356]	; (800579c <HAL_DMA_Init+0x1dc>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d01d      	beq.n	8005678 <HAL_DMA_Init+0xb8>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a57      	ldr	r2, [pc, #348]	; (80057a0 <HAL_DMA_Init+0x1e0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d018      	beq.n	8005678 <HAL_DMA_Init+0xb8>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a56      	ldr	r2, [pc, #344]	; (80057a4 <HAL_DMA_Init+0x1e4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d013      	beq.n	8005678 <HAL_DMA_Init+0xb8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a54      	ldr	r2, [pc, #336]	; (80057a8 <HAL_DMA_Init+0x1e8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00e      	beq.n	8005678 <HAL_DMA_Init+0xb8>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a53      	ldr	r2, [pc, #332]	; (80057ac <HAL_DMA_Init+0x1ec>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d009      	beq.n	8005678 <HAL_DMA_Init+0xb8>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a51      	ldr	r2, [pc, #324]	; (80057b0 <HAL_DMA_Init+0x1f0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d004      	beq.n	8005678 <HAL_DMA_Init+0xb8>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a50      	ldr	r2, [pc, #320]	; (80057b4 <HAL_DMA_Init+0x1f4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d101      	bne.n	800567c <HAL_DMA_Init+0xbc>
 8005678:	2301      	movs	r3, #1
 800567a:	e000      	b.n	800567e <HAL_DMA_Init+0xbe>
 800567c:	2300      	movs	r3, #0
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 813c 	beq.w	80058fc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a37      	ldr	r2, [pc, #220]	; (8005778 <HAL_DMA_Init+0x1b8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d04a      	beq.n	8005734 <HAL_DMA_Init+0x174>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a36      	ldr	r2, [pc, #216]	; (800577c <HAL_DMA_Init+0x1bc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d045      	beq.n	8005734 <HAL_DMA_Init+0x174>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a34      	ldr	r2, [pc, #208]	; (8005780 <HAL_DMA_Init+0x1c0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d040      	beq.n	8005734 <HAL_DMA_Init+0x174>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a33      	ldr	r2, [pc, #204]	; (8005784 <HAL_DMA_Init+0x1c4>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d03b      	beq.n	8005734 <HAL_DMA_Init+0x174>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a31      	ldr	r2, [pc, #196]	; (8005788 <HAL_DMA_Init+0x1c8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d036      	beq.n	8005734 <HAL_DMA_Init+0x174>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a30      	ldr	r2, [pc, #192]	; (800578c <HAL_DMA_Init+0x1cc>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d031      	beq.n	8005734 <HAL_DMA_Init+0x174>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a2e      	ldr	r2, [pc, #184]	; (8005790 <HAL_DMA_Init+0x1d0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d02c      	beq.n	8005734 <HAL_DMA_Init+0x174>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a2d      	ldr	r2, [pc, #180]	; (8005794 <HAL_DMA_Init+0x1d4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d027      	beq.n	8005734 <HAL_DMA_Init+0x174>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a2b      	ldr	r2, [pc, #172]	; (8005798 <HAL_DMA_Init+0x1d8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d022      	beq.n	8005734 <HAL_DMA_Init+0x174>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a2a      	ldr	r2, [pc, #168]	; (800579c <HAL_DMA_Init+0x1dc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d01d      	beq.n	8005734 <HAL_DMA_Init+0x174>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a28      	ldr	r2, [pc, #160]	; (80057a0 <HAL_DMA_Init+0x1e0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d018      	beq.n	8005734 <HAL_DMA_Init+0x174>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a27      	ldr	r2, [pc, #156]	; (80057a4 <HAL_DMA_Init+0x1e4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d013      	beq.n	8005734 <HAL_DMA_Init+0x174>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a25      	ldr	r2, [pc, #148]	; (80057a8 <HAL_DMA_Init+0x1e8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00e      	beq.n	8005734 <HAL_DMA_Init+0x174>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a24      	ldr	r2, [pc, #144]	; (80057ac <HAL_DMA_Init+0x1ec>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d009      	beq.n	8005734 <HAL_DMA_Init+0x174>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a22      	ldr	r2, [pc, #136]	; (80057b0 <HAL_DMA_Init+0x1f0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d004      	beq.n	8005734 <HAL_DMA_Init+0x174>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a21      	ldr	r2, [pc, #132]	; (80057b4 <HAL_DMA_Init+0x1f4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d108      	bne.n	8005746 <HAL_DMA_Init+0x186>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0201 	bic.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	e007      	b.n	8005756 <HAL_DMA_Init+0x196>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0201 	bic.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005756:	e02f      	b.n	80057b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005758:	f7ff fde4 	bl	8005324 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b05      	cmp	r3, #5
 8005764:	d928      	bls.n	80057b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2220      	movs	r2, #32
 800576a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2203      	movs	r2, #3
 8005770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e244      	b.n	8005c02 <HAL_DMA_Init+0x642>
 8005778:	40020010 	.word	0x40020010
 800577c:	40020028 	.word	0x40020028
 8005780:	40020040 	.word	0x40020040
 8005784:	40020058 	.word	0x40020058
 8005788:	40020070 	.word	0x40020070
 800578c:	40020088 	.word	0x40020088
 8005790:	400200a0 	.word	0x400200a0
 8005794:	400200b8 	.word	0x400200b8
 8005798:	40020410 	.word	0x40020410
 800579c:	40020428 	.word	0x40020428
 80057a0:	40020440 	.word	0x40020440
 80057a4:	40020458 	.word	0x40020458
 80057a8:	40020470 	.word	0x40020470
 80057ac:	40020488 	.word	0x40020488
 80057b0:	400204a0 	.word	0x400204a0
 80057b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1c8      	bne.n	8005758 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4b84      	ldr	r3, [pc, #528]	; (80059e4 <HAL_DMA_Init+0x424>)
 80057d2:	4013      	ands	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80057de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	2b04      	cmp	r3, #4
 800580a:	d107      	bne.n	800581c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005814:	4313      	orrs	r3, r2
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b28      	cmp	r3, #40	; 0x28
 8005822:	d903      	bls.n	800582c <HAL_DMA_Init+0x26c>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	2b2e      	cmp	r3, #46	; 0x2e
 800582a:	d91f      	bls.n	800586c <HAL_DMA_Init+0x2ac>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2b3e      	cmp	r3, #62	; 0x3e
 8005832:	d903      	bls.n	800583c <HAL_DMA_Init+0x27c>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b42      	cmp	r3, #66	; 0x42
 800583a:	d917      	bls.n	800586c <HAL_DMA_Init+0x2ac>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b46      	cmp	r3, #70	; 0x46
 8005842:	d903      	bls.n	800584c <HAL_DMA_Init+0x28c>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b48      	cmp	r3, #72	; 0x48
 800584a:	d90f      	bls.n	800586c <HAL_DMA_Init+0x2ac>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b4e      	cmp	r3, #78	; 0x4e
 8005852:	d903      	bls.n	800585c <HAL_DMA_Init+0x29c>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b52      	cmp	r3, #82	; 0x52
 800585a:	d907      	bls.n	800586c <HAL_DMA_Init+0x2ac>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b73      	cmp	r3, #115	; 0x73
 8005862:	d905      	bls.n	8005870 <HAL_DMA_Init+0x2b0>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2b77      	cmp	r3, #119	; 0x77
 800586a:	d801      	bhi.n	8005870 <HAL_DMA_Init+0x2b0>
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <HAL_DMA_Init+0x2b2>
 8005870:	2300      	movs	r3, #0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800587c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f023 0307 	bic.w	r3, r3, #7
 8005894:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d117      	bne.n	80058d8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00e      	beq.n	80058d8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f002 fce6 	bl	800828c <DMA_CheckFifoParam>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d008      	beq.n	80058d8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2240      	movs	r2, #64	; 0x40
 80058ca:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e194      	b.n	8005c02 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f002 fc21 	bl	8008128 <DMA_CalcBaseAndBitshift>
 80058e6:	4603      	mov	r3, r0
 80058e8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ee:	f003 031f 	and.w	r3, r3, #31
 80058f2:	223f      	movs	r2, #63	; 0x3f
 80058f4:	409a      	lsls	r2, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	609a      	str	r2, [r3, #8]
 80058fa:	e0ca      	b.n	8005a92 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a39      	ldr	r2, [pc, #228]	; (80059e8 <HAL_DMA_Init+0x428>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d022      	beq.n	800594c <HAL_DMA_Init+0x38c>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a38      	ldr	r2, [pc, #224]	; (80059ec <HAL_DMA_Init+0x42c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d01d      	beq.n	800594c <HAL_DMA_Init+0x38c>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a36      	ldr	r2, [pc, #216]	; (80059f0 <HAL_DMA_Init+0x430>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d018      	beq.n	800594c <HAL_DMA_Init+0x38c>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a35      	ldr	r2, [pc, #212]	; (80059f4 <HAL_DMA_Init+0x434>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d013      	beq.n	800594c <HAL_DMA_Init+0x38c>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a33      	ldr	r2, [pc, #204]	; (80059f8 <HAL_DMA_Init+0x438>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00e      	beq.n	800594c <HAL_DMA_Init+0x38c>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a32      	ldr	r2, [pc, #200]	; (80059fc <HAL_DMA_Init+0x43c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d009      	beq.n	800594c <HAL_DMA_Init+0x38c>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a30      	ldr	r2, [pc, #192]	; (8005a00 <HAL_DMA_Init+0x440>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d004      	beq.n	800594c <HAL_DMA_Init+0x38c>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a2f      	ldr	r2, [pc, #188]	; (8005a04 <HAL_DMA_Init+0x444>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d101      	bne.n	8005950 <HAL_DMA_Init+0x390>
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <HAL_DMA_Init+0x392>
 8005950:	2300      	movs	r3, #0
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 8094 	beq.w	8005a80 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a22      	ldr	r2, [pc, #136]	; (80059e8 <HAL_DMA_Init+0x428>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d021      	beq.n	80059a6 <HAL_DMA_Init+0x3e6>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a21      	ldr	r2, [pc, #132]	; (80059ec <HAL_DMA_Init+0x42c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d01c      	beq.n	80059a6 <HAL_DMA_Init+0x3e6>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a1f      	ldr	r2, [pc, #124]	; (80059f0 <HAL_DMA_Init+0x430>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d017      	beq.n	80059a6 <HAL_DMA_Init+0x3e6>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a1e      	ldr	r2, [pc, #120]	; (80059f4 <HAL_DMA_Init+0x434>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d012      	beq.n	80059a6 <HAL_DMA_Init+0x3e6>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a1c      	ldr	r2, [pc, #112]	; (80059f8 <HAL_DMA_Init+0x438>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00d      	beq.n	80059a6 <HAL_DMA_Init+0x3e6>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a1b      	ldr	r2, [pc, #108]	; (80059fc <HAL_DMA_Init+0x43c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d008      	beq.n	80059a6 <HAL_DMA_Init+0x3e6>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a19      	ldr	r2, [pc, #100]	; (8005a00 <HAL_DMA_Init+0x440>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d003      	beq.n	80059a6 <HAL_DMA_Init+0x3e6>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a18      	ldr	r2, [pc, #96]	; (8005a04 <HAL_DMA_Init+0x444>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	4b11      	ldr	r3, [pc, #68]	; (8005a08 <HAL_DMA_Init+0x448>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2b40      	cmp	r3, #64	; 0x40
 80059ce:	d01d      	beq.n	8005a0c <HAL_DMA_Init+0x44c>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	2b80      	cmp	r3, #128	; 0x80
 80059d6:	d102      	bne.n	80059de <HAL_DMA_Init+0x41e>
 80059d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059dc:	e017      	b.n	8005a0e <HAL_DMA_Init+0x44e>
 80059de:	2300      	movs	r3, #0
 80059e0:	e015      	b.n	8005a0e <HAL_DMA_Init+0x44e>
 80059e2:	bf00      	nop
 80059e4:	fe10803f 	.word	0xfe10803f
 80059e8:	58025408 	.word	0x58025408
 80059ec:	5802541c 	.word	0x5802541c
 80059f0:	58025430 	.word	0x58025430
 80059f4:	58025444 	.word	0x58025444
 80059f8:	58025458 	.word	0x58025458
 80059fc:	5802546c 	.word	0x5802546c
 8005a00:	58025480 	.word	0x58025480
 8005a04:	58025494 	.word	0x58025494
 8005a08:	fffe000f 	.word	0xfffe000f
 8005a0c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	68d2      	ldr	r2, [r2, #12]
 8005a12:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005a1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a3c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	461a      	mov	r2, r3
 8005a52:	4b6e      	ldr	r3, [pc, #440]	; (8005c0c <HAL_DMA_Init+0x64c>)
 8005a54:	4413      	add	r3, r2
 8005a56:	4a6e      	ldr	r2, [pc, #440]	; (8005c10 <HAL_DMA_Init+0x650>)
 8005a58:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5c:	091b      	lsrs	r3, r3, #4
 8005a5e:	009a      	lsls	r2, r3, #2
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f002 fb5f 	bl	8008128 <DMA_CalcBaseAndBitshift>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a72:	f003 031f 	and.w	r3, r3, #31
 8005a76:	2201      	movs	r2, #1
 8005a78:	409a      	lsls	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	605a      	str	r2, [r3, #4]
 8005a7e:	e008      	b.n	8005a92 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2240      	movs	r2, #64	; 0x40
 8005a84:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2203      	movs	r2, #3
 8005a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e0b7      	b.n	8005c02 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a5f      	ldr	r2, [pc, #380]	; (8005c14 <HAL_DMA_Init+0x654>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d072      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a5d      	ldr	r2, [pc, #372]	; (8005c18 <HAL_DMA_Init+0x658>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d06d      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a5c      	ldr	r2, [pc, #368]	; (8005c1c <HAL_DMA_Init+0x65c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d068      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a5a      	ldr	r2, [pc, #360]	; (8005c20 <HAL_DMA_Init+0x660>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d063      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a59      	ldr	r2, [pc, #356]	; (8005c24 <HAL_DMA_Init+0x664>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d05e      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a57      	ldr	r2, [pc, #348]	; (8005c28 <HAL_DMA_Init+0x668>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d059      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a56      	ldr	r2, [pc, #344]	; (8005c2c <HAL_DMA_Init+0x66c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d054      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a54      	ldr	r2, [pc, #336]	; (8005c30 <HAL_DMA_Init+0x670>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d04f      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a53      	ldr	r2, [pc, #332]	; (8005c34 <HAL_DMA_Init+0x674>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d04a      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a51      	ldr	r2, [pc, #324]	; (8005c38 <HAL_DMA_Init+0x678>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d045      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a50      	ldr	r2, [pc, #320]	; (8005c3c <HAL_DMA_Init+0x67c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d040      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a4e      	ldr	r2, [pc, #312]	; (8005c40 <HAL_DMA_Init+0x680>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d03b      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a4d      	ldr	r2, [pc, #308]	; (8005c44 <HAL_DMA_Init+0x684>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d036      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a4b      	ldr	r2, [pc, #300]	; (8005c48 <HAL_DMA_Init+0x688>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d031      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a4a      	ldr	r2, [pc, #296]	; (8005c4c <HAL_DMA_Init+0x68c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d02c      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a48      	ldr	r2, [pc, #288]	; (8005c50 <HAL_DMA_Init+0x690>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d027      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a47      	ldr	r2, [pc, #284]	; (8005c54 <HAL_DMA_Init+0x694>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d022      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a45      	ldr	r2, [pc, #276]	; (8005c58 <HAL_DMA_Init+0x698>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d01d      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a44      	ldr	r2, [pc, #272]	; (8005c5c <HAL_DMA_Init+0x69c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d018      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a42      	ldr	r2, [pc, #264]	; (8005c60 <HAL_DMA_Init+0x6a0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a41      	ldr	r2, [pc, #260]	; (8005c64 <HAL_DMA_Init+0x6a4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00e      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a3f      	ldr	r2, [pc, #252]	; (8005c68 <HAL_DMA_Init+0x6a8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d009      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a3e      	ldr	r2, [pc, #248]	; (8005c6c <HAL_DMA_Init+0x6ac>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d004      	beq.n	8005b82 <HAL_DMA_Init+0x5c2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a3c      	ldr	r2, [pc, #240]	; (8005c70 <HAL_DMA_Init+0x6b0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d101      	bne.n	8005b86 <HAL_DMA_Init+0x5c6>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e000      	b.n	8005b88 <HAL_DMA_Init+0x5c8>
 8005b86:	2300      	movs	r3, #0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d032      	beq.n	8005bf2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f002 fbf9 	bl	8008384 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	2b80      	cmp	r3, #128	; 0x80
 8005b98:	d102      	bne.n	8005ba0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005bb4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d010      	beq.n	8005be0 <HAL_DMA_Init+0x620>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2b08      	cmp	r3, #8
 8005bc4:	d80c      	bhi.n	8005be0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f002 fc76 	bl	80084b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005bdc:	605a      	str	r2, [r3, #4]
 8005bde:	e008      	b.n	8005bf2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	a7fdabf8 	.word	0xa7fdabf8
 8005c10:	cccccccd 	.word	0xcccccccd
 8005c14:	40020010 	.word	0x40020010
 8005c18:	40020028 	.word	0x40020028
 8005c1c:	40020040 	.word	0x40020040
 8005c20:	40020058 	.word	0x40020058
 8005c24:	40020070 	.word	0x40020070
 8005c28:	40020088 	.word	0x40020088
 8005c2c:	400200a0 	.word	0x400200a0
 8005c30:	400200b8 	.word	0x400200b8
 8005c34:	40020410 	.word	0x40020410
 8005c38:	40020428 	.word	0x40020428
 8005c3c:	40020440 	.word	0x40020440
 8005c40:	40020458 	.word	0x40020458
 8005c44:	40020470 	.word	0x40020470
 8005c48:	40020488 	.word	0x40020488
 8005c4c:	400204a0 	.word	0x400204a0
 8005c50:	400204b8 	.word	0x400204b8
 8005c54:	58025408 	.word	0x58025408
 8005c58:	5802541c 	.word	0x5802541c
 8005c5c:	58025430 	.word	0x58025430
 8005c60:	58025444 	.word	0x58025444
 8005c64:	58025458 	.word	0x58025458
 8005c68:	5802546c 	.word	0x5802546c
 8005c6c:	58025480 	.word	0x58025480
 8005c70:	58025494 	.word	0x58025494

08005c74 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e1a8      	b.n	8005fd8 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a82      	ldr	r2, [pc, #520]	; (8005e94 <HAL_DMA_DeInit+0x220>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d04a      	beq.n	8005d26 <HAL_DMA_DeInit+0xb2>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a80      	ldr	r2, [pc, #512]	; (8005e98 <HAL_DMA_DeInit+0x224>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d045      	beq.n	8005d26 <HAL_DMA_DeInit+0xb2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a7f      	ldr	r2, [pc, #508]	; (8005e9c <HAL_DMA_DeInit+0x228>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d040      	beq.n	8005d26 <HAL_DMA_DeInit+0xb2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a7d      	ldr	r2, [pc, #500]	; (8005ea0 <HAL_DMA_DeInit+0x22c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d03b      	beq.n	8005d26 <HAL_DMA_DeInit+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a7c      	ldr	r2, [pc, #496]	; (8005ea4 <HAL_DMA_DeInit+0x230>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d036      	beq.n	8005d26 <HAL_DMA_DeInit+0xb2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a7a      	ldr	r2, [pc, #488]	; (8005ea8 <HAL_DMA_DeInit+0x234>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d031      	beq.n	8005d26 <HAL_DMA_DeInit+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a79      	ldr	r2, [pc, #484]	; (8005eac <HAL_DMA_DeInit+0x238>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d02c      	beq.n	8005d26 <HAL_DMA_DeInit+0xb2>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a77      	ldr	r2, [pc, #476]	; (8005eb0 <HAL_DMA_DeInit+0x23c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d027      	beq.n	8005d26 <HAL_DMA_DeInit+0xb2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a76      	ldr	r2, [pc, #472]	; (8005eb4 <HAL_DMA_DeInit+0x240>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d022      	beq.n	8005d26 <HAL_DMA_DeInit+0xb2>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a74      	ldr	r2, [pc, #464]	; (8005eb8 <HAL_DMA_DeInit+0x244>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d01d      	beq.n	8005d26 <HAL_DMA_DeInit+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a73      	ldr	r2, [pc, #460]	; (8005ebc <HAL_DMA_DeInit+0x248>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d018      	beq.n	8005d26 <HAL_DMA_DeInit+0xb2>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a71      	ldr	r2, [pc, #452]	; (8005ec0 <HAL_DMA_DeInit+0x24c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d013      	beq.n	8005d26 <HAL_DMA_DeInit+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a70      	ldr	r2, [pc, #448]	; (8005ec4 <HAL_DMA_DeInit+0x250>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00e      	beq.n	8005d26 <HAL_DMA_DeInit+0xb2>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a6e      	ldr	r2, [pc, #440]	; (8005ec8 <HAL_DMA_DeInit+0x254>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d009      	beq.n	8005d26 <HAL_DMA_DeInit+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a6d      	ldr	r2, [pc, #436]	; (8005ecc <HAL_DMA_DeInit+0x258>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d004      	beq.n	8005d26 <HAL_DMA_DeInit+0xb2>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a6b      	ldr	r2, [pc, #428]	; (8005ed0 <HAL_DMA_DeInit+0x25c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d108      	bne.n	8005d38 <HAL_DMA_DeInit+0xc4>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0201 	bic.w	r2, r2, #1
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	e007      	b.n	8005d48 <HAL_DMA_DeInit+0xd4>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0201 	bic.w	r2, r2, #1
 8005d46:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a51      	ldr	r2, [pc, #324]	; (8005e94 <HAL_DMA_DeInit+0x220>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d04a      	beq.n	8005de8 <HAL_DMA_DeInit+0x174>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a50      	ldr	r2, [pc, #320]	; (8005e98 <HAL_DMA_DeInit+0x224>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d045      	beq.n	8005de8 <HAL_DMA_DeInit+0x174>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a4e      	ldr	r2, [pc, #312]	; (8005e9c <HAL_DMA_DeInit+0x228>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d040      	beq.n	8005de8 <HAL_DMA_DeInit+0x174>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a4d      	ldr	r2, [pc, #308]	; (8005ea0 <HAL_DMA_DeInit+0x22c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d03b      	beq.n	8005de8 <HAL_DMA_DeInit+0x174>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a4b      	ldr	r2, [pc, #300]	; (8005ea4 <HAL_DMA_DeInit+0x230>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d036      	beq.n	8005de8 <HAL_DMA_DeInit+0x174>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a4a      	ldr	r2, [pc, #296]	; (8005ea8 <HAL_DMA_DeInit+0x234>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d031      	beq.n	8005de8 <HAL_DMA_DeInit+0x174>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a48      	ldr	r2, [pc, #288]	; (8005eac <HAL_DMA_DeInit+0x238>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d02c      	beq.n	8005de8 <HAL_DMA_DeInit+0x174>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a47      	ldr	r2, [pc, #284]	; (8005eb0 <HAL_DMA_DeInit+0x23c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d027      	beq.n	8005de8 <HAL_DMA_DeInit+0x174>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a45      	ldr	r2, [pc, #276]	; (8005eb4 <HAL_DMA_DeInit+0x240>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d022      	beq.n	8005de8 <HAL_DMA_DeInit+0x174>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a44      	ldr	r2, [pc, #272]	; (8005eb8 <HAL_DMA_DeInit+0x244>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d01d      	beq.n	8005de8 <HAL_DMA_DeInit+0x174>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a42      	ldr	r2, [pc, #264]	; (8005ebc <HAL_DMA_DeInit+0x248>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d018      	beq.n	8005de8 <HAL_DMA_DeInit+0x174>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a41      	ldr	r2, [pc, #260]	; (8005ec0 <HAL_DMA_DeInit+0x24c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d013      	beq.n	8005de8 <HAL_DMA_DeInit+0x174>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a3f      	ldr	r2, [pc, #252]	; (8005ec4 <HAL_DMA_DeInit+0x250>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00e      	beq.n	8005de8 <HAL_DMA_DeInit+0x174>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a3e      	ldr	r2, [pc, #248]	; (8005ec8 <HAL_DMA_DeInit+0x254>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d009      	beq.n	8005de8 <HAL_DMA_DeInit+0x174>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a3c      	ldr	r2, [pc, #240]	; (8005ecc <HAL_DMA_DeInit+0x258>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d004      	beq.n	8005de8 <HAL_DMA_DeInit+0x174>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a3b      	ldr	r2, [pc, #236]	; (8005ed0 <HAL_DMA_DeInit+0x25c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d101      	bne.n	8005dec <HAL_DMA_DeInit+0x178>
 8005de8:	2301      	movs	r3, #1
 8005dea:	e000      	b.n	8005dee <HAL_DMA_DeInit+0x17a>
 8005dec:	2300      	movs	r3, #0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d025      	beq.n	8005e3e <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2200      	movs	r2, #0
 8005e08:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2200      	movs	r2, #0
 8005e18:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2221      	movs	r2, #33	; 0x21
 8005e20:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f002 f980 	bl	8008128 <DMA_CalcBaseAndBitshift>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e30:	f003 031f 	and.w	r3, r3, #31
 8005e34:	223f      	movs	r2, #63	; 0x3f
 8005e36:	409a      	lsls	r2, r3
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	609a      	str	r2, [r3, #8]
 8005e3c:	e081      	b.n	8005f42 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a24      	ldr	r2, [pc, #144]	; (8005ed4 <HAL_DMA_DeInit+0x260>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d022      	beq.n	8005e8e <HAL_DMA_DeInit+0x21a>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a22      	ldr	r2, [pc, #136]	; (8005ed8 <HAL_DMA_DeInit+0x264>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d01d      	beq.n	8005e8e <HAL_DMA_DeInit+0x21a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a21      	ldr	r2, [pc, #132]	; (8005edc <HAL_DMA_DeInit+0x268>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d018      	beq.n	8005e8e <HAL_DMA_DeInit+0x21a>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1f      	ldr	r2, [pc, #124]	; (8005ee0 <HAL_DMA_DeInit+0x26c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d013      	beq.n	8005e8e <HAL_DMA_DeInit+0x21a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ee4 <HAL_DMA_DeInit+0x270>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00e      	beq.n	8005e8e <HAL_DMA_DeInit+0x21a>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1c      	ldr	r2, [pc, #112]	; (8005ee8 <HAL_DMA_DeInit+0x274>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d009      	beq.n	8005e8e <HAL_DMA_DeInit+0x21a>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1b      	ldr	r2, [pc, #108]	; (8005eec <HAL_DMA_DeInit+0x278>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d004      	beq.n	8005e8e <HAL_DMA_DeInit+0x21a>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a19      	ldr	r2, [pc, #100]	; (8005ef0 <HAL_DMA_DeInit+0x27c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d132      	bne.n	8005ef4 <HAL_DMA_DeInit+0x280>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e031      	b.n	8005ef6 <HAL_DMA_DeInit+0x282>
 8005e92:	bf00      	nop
 8005e94:	40020010 	.word	0x40020010
 8005e98:	40020028 	.word	0x40020028
 8005e9c:	40020040 	.word	0x40020040
 8005ea0:	40020058 	.word	0x40020058
 8005ea4:	40020070 	.word	0x40020070
 8005ea8:	40020088 	.word	0x40020088
 8005eac:	400200a0 	.word	0x400200a0
 8005eb0:	400200b8 	.word	0x400200b8
 8005eb4:	40020410 	.word	0x40020410
 8005eb8:	40020428 	.word	0x40020428
 8005ebc:	40020440 	.word	0x40020440
 8005ec0:	40020458 	.word	0x40020458
 8005ec4:	40020470 	.word	0x40020470
 8005ec8:	40020488 	.word	0x40020488
 8005ecc:	400204a0 	.word	0x400204a0
 8005ed0:	400204b8 	.word	0x400204b8
 8005ed4:	58025408 	.word	0x58025408
 8005ed8:	5802541c 	.word	0x5802541c
 8005edc:	58025430 	.word	0x58025430
 8005ee0:	58025444 	.word	0x58025444
 8005ee4:	58025458 	.word	0x58025458
 8005ee8:	5802546c 	.word	0x5802546c
 8005eec:	58025480 	.word	0x58025480
 8005ef0:	58025494 	.word	0x58025494
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d021      	beq.n	8005f3e <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2200      	movs	r2, #0
 8005f08:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2200      	movs	r2, #0
 8005f18:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f002 f900 	bl	8008128 <DMA_CalcBaseAndBitshift>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f30:	f003 031f 	and.w	r3, r3, #31
 8005f34:	2201      	movs	r2, #1
 8005f36:	409a      	lsls	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	605a      	str	r2, [r3, #4]
 8005f3c:	e001      	b.n	8005f42 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e04a      	b.n	8005fd8 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f002 fa1e 	bl	8008384 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d008      	beq.n	8005f62 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f60:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00f      	beq.n	8005f8a <HAL_DMA_DeInit+0x316>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b08      	cmp	r3, #8
 8005f70:	d80b      	bhi.n	8005f8a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f002 faa0 	bl	80084b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f88:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e226      	b.n	800644a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006002:	2b01      	cmp	r3, #1
 8006004:	d101      	bne.n	800600a <HAL_DMA_Start_IT+0x2a>
 8006006:	2302      	movs	r3, #2
 8006008:	e21f      	b.n	800644a <HAL_DMA_Start_IT+0x46a>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b01      	cmp	r3, #1
 800601c:	f040 820a 	bne.w	8006434 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a68      	ldr	r2, [pc, #416]	; (80061d4 <HAL_DMA_Start_IT+0x1f4>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d04a      	beq.n	80060ce <HAL_DMA_Start_IT+0xee>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a66      	ldr	r2, [pc, #408]	; (80061d8 <HAL_DMA_Start_IT+0x1f8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d045      	beq.n	80060ce <HAL_DMA_Start_IT+0xee>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a65      	ldr	r2, [pc, #404]	; (80061dc <HAL_DMA_Start_IT+0x1fc>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d040      	beq.n	80060ce <HAL_DMA_Start_IT+0xee>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a63      	ldr	r2, [pc, #396]	; (80061e0 <HAL_DMA_Start_IT+0x200>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d03b      	beq.n	80060ce <HAL_DMA_Start_IT+0xee>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a62      	ldr	r2, [pc, #392]	; (80061e4 <HAL_DMA_Start_IT+0x204>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d036      	beq.n	80060ce <HAL_DMA_Start_IT+0xee>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a60      	ldr	r2, [pc, #384]	; (80061e8 <HAL_DMA_Start_IT+0x208>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d031      	beq.n	80060ce <HAL_DMA_Start_IT+0xee>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a5f      	ldr	r2, [pc, #380]	; (80061ec <HAL_DMA_Start_IT+0x20c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d02c      	beq.n	80060ce <HAL_DMA_Start_IT+0xee>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a5d      	ldr	r2, [pc, #372]	; (80061f0 <HAL_DMA_Start_IT+0x210>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d027      	beq.n	80060ce <HAL_DMA_Start_IT+0xee>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a5c      	ldr	r2, [pc, #368]	; (80061f4 <HAL_DMA_Start_IT+0x214>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d022      	beq.n	80060ce <HAL_DMA_Start_IT+0xee>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a5a      	ldr	r2, [pc, #360]	; (80061f8 <HAL_DMA_Start_IT+0x218>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d01d      	beq.n	80060ce <HAL_DMA_Start_IT+0xee>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a59      	ldr	r2, [pc, #356]	; (80061fc <HAL_DMA_Start_IT+0x21c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d018      	beq.n	80060ce <HAL_DMA_Start_IT+0xee>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a57      	ldr	r2, [pc, #348]	; (8006200 <HAL_DMA_Start_IT+0x220>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d013      	beq.n	80060ce <HAL_DMA_Start_IT+0xee>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a56      	ldr	r2, [pc, #344]	; (8006204 <HAL_DMA_Start_IT+0x224>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00e      	beq.n	80060ce <HAL_DMA_Start_IT+0xee>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a54      	ldr	r2, [pc, #336]	; (8006208 <HAL_DMA_Start_IT+0x228>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d009      	beq.n	80060ce <HAL_DMA_Start_IT+0xee>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a53      	ldr	r2, [pc, #332]	; (800620c <HAL_DMA_Start_IT+0x22c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d004      	beq.n	80060ce <HAL_DMA_Start_IT+0xee>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a51      	ldr	r2, [pc, #324]	; (8006210 <HAL_DMA_Start_IT+0x230>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d108      	bne.n	80060e0 <HAL_DMA_Start_IT+0x100>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0201 	bic.w	r2, r2, #1
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	e007      	b.n	80060f0 <HAL_DMA_Start_IT+0x110>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0201 	bic.w	r2, r2, #1
 80060ee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f001 fe6a 	bl	8007dd0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a34      	ldr	r2, [pc, #208]	; (80061d4 <HAL_DMA_Start_IT+0x1f4>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d04a      	beq.n	800619c <HAL_DMA_Start_IT+0x1bc>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a33      	ldr	r2, [pc, #204]	; (80061d8 <HAL_DMA_Start_IT+0x1f8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d045      	beq.n	800619c <HAL_DMA_Start_IT+0x1bc>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a31      	ldr	r2, [pc, #196]	; (80061dc <HAL_DMA_Start_IT+0x1fc>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d040      	beq.n	800619c <HAL_DMA_Start_IT+0x1bc>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a30      	ldr	r2, [pc, #192]	; (80061e0 <HAL_DMA_Start_IT+0x200>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d03b      	beq.n	800619c <HAL_DMA_Start_IT+0x1bc>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a2e      	ldr	r2, [pc, #184]	; (80061e4 <HAL_DMA_Start_IT+0x204>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d036      	beq.n	800619c <HAL_DMA_Start_IT+0x1bc>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a2d      	ldr	r2, [pc, #180]	; (80061e8 <HAL_DMA_Start_IT+0x208>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d031      	beq.n	800619c <HAL_DMA_Start_IT+0x1bc>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a2b      	ldr	r2, [pc, #172]	; (80061ec <HAL_DMA_Start_IT+0x20c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d02c      	beq.n	800619c <HAL_DMA_Start_IT+0x1bc>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a2a      	ldr	r2, [pc, #168]	; (80061f0 <HAL_DMA_Start_IT+0x210>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d027      	beq.n	800619c <HAL_DMA_Start_IT+0x1bc>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a28      	ldr	r2, [pc, #160]	; (80061f4 <HAL_DMA_Start_IT+0x214>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d022      	beq.n	800619c <HAL_DMA_Start_IT+0x1bc>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a27      	ldr	r2, [pc, #156]	; (80061f8 <HAL_DMA_Start_IT+0x218>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d01d      	beq.n	800619c <HAL_DMA_Start_IT+0x1bc>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a25      	ldr	r2, [pc, #148]	; (80061fc <HAL_DMA_Start_IT+0x21c>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d018      	beq.n	800619c <HAL_DMA_Start_IT+0x1bc>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a24      	ldr	r2, [pc, #144]	; (8006200 <HAL_DMA_Start_IT+0x220>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d013      	beq.n	800619c <HAL_DMA_Start_IT+0x1bc>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a22      	ldr	r2, [pc, #136]	; (8006204 <HAL_DMA_Start_IT+0x224>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00e      	beq.n	800619c <HAL_DMA_Start_IT+0x1bc>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a21      	ldr	r2, [pc, #132]	; (8006208 <HAL_DMA_Start_IT+0x228>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d009      	beq.n	800619c <HAL_DMA_Start_IT+0x1bc>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a1f      	ldr	r2, [pc, #124]	; (800620c <HAL_DMA_Start_IT+0x22c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d004      	beq.n	800619c <HAL_DMA_Start_IT+0x1bc>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a1e      	ldr	r2, [pc, #120]	; (8006210 <HAL_DMA_Start_IT+0x230>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d101      	bne.n	80061a0 <HAL_DMA_Start_IT+0x1c0>
 800619c:	2301      	movs	r3, #1
 800619e:	e000      	b.n	80061a2 <HAL_DMA_Start_IT+0x1c2>
 80061a0:	2300      	movs	r3, #0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d036      	beq.n	8006214 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f023 021e 	bic.w	r2, r3, #30
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f042 0216 	orr.w	r2, r2, #22
 80061b8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d03e      	beq.n	8006240 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0208 	orr.w	r2, r2, #8
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	e035      	b.n	8006240 <HAL_DMA_Start_IT+0x260>
 80061d4:	40020010 	.word	0x40020010
 80061d8:	40020028 	.word	0x40020028
 80061dc:	40020040 	.word	0x40020040
 80061e0:	40020058 	.word	0x40020058
 80061e4:	40020070 	.word	0x40020070
 80061e8:	40020088 	.word	0x40020088
 80061ec:	400200a0 	.word	0x400200a0
 80061f0:	400200b8 	.word	0x400200b8
 80061f4:	40020410 	.word	0x40020410
 80061f8:	40020428 	.word	0x40020428
 80061fc:	40020440 	.word	0x40020440
 8006200:	40020458 	.word	0x40020458
 8006204:	40020470 	.word	0x40020470
 8006208:	40020488 	.word	0x40020488
 800620c:	400204a0 	.word	0x400204a0
 8006210:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f023 020e 	bic.w	r2, r3, #14
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 020a 	orr.w	r2, r2, #10
 8006226:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	d007      	beq.n	8006240 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0204 	orr.w	r2, r2, #4
 800623e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a83      	ldr	r2, [pc, #524]	; (8006454 <HAL_DMA_Start_IT+0x474>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d072      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a82      	ldr	r2, [pc, #520]	; (8006458 <HAL_DMA_Start_IT+0x478>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d06d      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a80      	ldr	r2, [pc, #512]	; (800645c <HAL_DMA_Start_IT+0x47c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d068      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a7f      	ldr	r2, [pc, #508]	; (8006460 <HAL_DMA_Start_IT+0x480>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d063      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a7d      	ldr	r2, [pc, #500]	; (8006464 <HAL_DMA_Start_IT+0x484>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d05e      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a7c      	ldr	r2, [pc, #496]	; (8006468 <HAL_DMA_Start_IT+0x488>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d059      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a7a      	ldr	r2, [pc, #488]	; (800646c <HAL_DMA_Start_IT+0x48c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d054      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a79      	ldr	r2, [pc, #484]	; (8006470 <HAL_DMA_Start_IT+0x490>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d04f      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a77      	ldr	r2, [pc, #476]	; (8006474 <HAL_DMA_Start_IT+0x494>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d04a      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a76      	ldr	r2, [pc, #472]	; (8006478 <HAL_DMA_Start_IT+0x498>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d045      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a74      	ldr	r2, [pc, #464]	; (800647c <HAL_DMA_Start_IT+0x49c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d040      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a73      	ldr	r2, [pc, #460]	; (8006480 <HAL_DMA_Start_IT+0x4a0>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d03b      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a71      	ldr	r2, [pc, #452]	; (8006484 <HAL_DMA_Start_IT+0x4a4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d036      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a70      	ldr	r2, [pc, #448]	; (8006488 <HAL_DMA_Start_IT+0x4a8>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d031      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a6e      	ldr	r2, [pc, #440]	; (800648c <HAL_DMA_Start_IT+0x4ac>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d02c      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a6d      	ldr	r2, [pc, #436]	; (8006490 <HAL_DMA_Start_IT+0x4b0>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d027      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a6b      	ldr	r2, [pc, #428]	; (8006494 <HAL_DMA_Start_IT+0x4b4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d022      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a6a      	ldr	r2, [pc, #424]	; (8006498 <HAL_DMA_Start_IT+0x4b8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d01d      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a68      	ldr	r2, [pc, #416]	; (800649c <HAL_DMA_Start_IT+0x4bc>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d018      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a67      	ldr	r2, [pc, #412]	; (80064a0 <HAL_DMA_Start_IT+0x4c0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d013      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a65      	ldr	r2, [pc, #404]	; (80064a4 <HAL_DMA_Start_IT+0x4c4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00e      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a64      	ldr	r2, [pc, #400]	; (80064a8 <HAL_DMA_Start_IT+0x4c8>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d009      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a62      	ldr	r2, [pc, #392]	; (80064ac <HAL_DMA_Start_IT+0x4cc>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d004      	beq.n	8006330 <HAL_DMA_Start_IT+0x350>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a61      	ldr	r2, [pc, #388]	; (80064b0 <HAL_DMA_Start_IT+0x4d0>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d101      	bne.n	8006334 <HAL_DMA_Start_IT+0x354>
 8006330:	2301      	movs	r3, #1
 8006332:	e000      	b.n	8006336 <HAL_DMA_Start_IT+0x356>
 8006334:	2300      	movs	r3, #0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d01a      	beq.n	8006370 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d007      	beq.n	8006358 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006352:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006356:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800635c:	2b00      	cmp	r3, #0
 800635e:	d007      	beq.n	8006370 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800636a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800636e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a37      	ldr	r2, [pc, #220]	; (8006454 <HAL_DMA_Start_IT+0x474>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d04a      	beq.n	8006410 <HAL_DMA_Start_IT+0x430>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a36      	ldr	r2, [pc, #216]	; (8006458 <HAL_DMA_Start_IT+0x478>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d045      	beq.n	8006410 <HAL_DMA_Start_IT+0x430>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a34      	ldr	r2, [pc, #208]	; (800645c <HAL_DMA_Start_IT+0x47c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d040      	beq.n	8006410 <HAL_DMA_Start_IT+0x430>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a33      	ldr	r2, [pc, #204]	; (8006460 <HAL_DMA_Start_IT+0x480>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d03b      	beq.n	8006410 <HAL_DMA_Start_IT+0x430>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a31      	ldr	r2, [pc, #196]	; (8006464 <HAL_DMA_Start_IT+0x484>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d036      	beq.n	8006410 <HAL_DMA_Start_IT+0x430>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a30      	ldr	r2, [pc, #192]	; (8006468 <HAL_DMA_Start_IT+0x488>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d031      	beq.n	8006410 <HAL_DMA_Start_IT+0x430>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a2e      	ldr	r2, [pc, #184]	; (800646c <HAL_DMA_Start_IT+0x48c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d02c      	beq.n	8006410 <HAL_DMA_Start_IT+0x430>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a2d      	ldr	r2, [pc, #180]	; (8006470 <HAL_DMA_Start_IT+0x490>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d027      	beq.n	8006410 <HAL_DMA_Start_IT+0x430>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a2b      	ldr	r2, [pc, #172]	; (8006474 <HAL_DMA_Start_IT+0x494>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d022      	beq.n	8006410 <HAL_DMA_Start_IT+0x430>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a2a      	ldr	r2, [pc, #168]	; (8006478 <HAL_DMA_Start_IT+0x498>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d01d      	beq.n	8006410 <HAL_DMA_Start_IT+0x430>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a28      	ldr	r2, [pc, #160]	; (800647c <HAL_DMA_Start_IT+0x49c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d018      	beq.n	8006410 <HAL_DMA_Start_IT+0x430>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a27      	ldr	r2, [pc, #156]	; (8006480 <HAL_DMA_Start_IT+0x4a0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d013      	beq.n	8006410 <HAL_DMA_Start_IT+0x430>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a25      	ldr	r2, [pc, #148]	; (8006484 <HAL_DMA_Start_IT+0x4a4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d00e      	beq.n	8006410 <HAL_DMA_Start_IT+0x430>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a24      	ldr	r2, [pc, #144]	; (8006488 <HAL_DMA_Start_IT+0x4a8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d009      	beq.n	8006410 <HAL_DMA_Start_IT+0x430>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a22      	ldr	r2, [pc, #136]	; (800648c <HAL_DMA_Start_IT+0x4ac>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d004      	beq.n	8006410 <HAL_DMA_Start_IT+0x430>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a21      	ldr	r2, [pc, #132]	; (8006490 <HAL_DMA_Start_IT+0x4b0>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d108      	bne.n	8006422 <HAL_DMA_Start_IT+0x442>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f042 0201 	orr.w	r2, r2, #1
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	e012      	b.n	8006448 <HAL_DMA_Start_IT+0x468>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f042 0201 	orr.w	r2, r2, #1
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	e009      	b.n	8006448 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800643a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006448:	7dfb      	ldrb	r3, [r7, #23]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	40020010 	.word	0x40020010
 8006458:	40020028 	.word	0x40020028
 800645c:	40020040 	.word	0x40020040
 8006460:	40020058 	.word	0x40020058
 8006464:	40020070 	.word	0x40020070
 8006468:	40020088 	.word	0x40020088
 800646c:	400200a0 	.word	0x400200a0
 8006470:	400200b8 	.word	0x400200b8
 8006474:	40020410 	.word	0x40020410
 8006478:	40020428 	.word	0x40020428
 800647c:	40020440 	.word	0x40020440
 8006480:	40020458 	.word	0x40020458
 8006484:	40020470 	.word	0x40020470
 8006488:	40020488 	.word	0x40020488
 800648c:	400204a0 	.word	0x400204a0
 8006490:	400204b8 	.word	0x400204b8
 8006494:	58025408 	.word	0x58025408
 8006498:	5802541c 	.word	0x5802541c
 800649c:	58025430 	.word	0x58025430
 80064a0:	58025444 	.word	0x58025444
 80064a4:	58025458 	.word	0x58025458
 80064a8:	5802546c 	.word	0x5802546c
 80064ac:	58025480 	.word	0x58025480
 80064b0:	58025494 	.word	0x58025494

080064b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80064bc:	f7fe ff32 	bl	8005324 <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e2dc      	b.n	8006a86 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d008      	beq.n	80064ea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2280      	movs	r2, #128	; 0x80
 80064dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e2cd      	b.n	8006a86 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a76      	ldr	r2, [pc, #472]	; (80066c8 <HAL_DMA_Abort+0x214>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d04a      	beq.n	800658a <HAL_DMA_Abort+0xd6>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a74      	ldr	r2, [pc, #464]	; (80066cc <HAL_DMA_Abort+0x218>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d045      	beq.n	800658a <HAL_DMA_Abort+0xd6>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a73      	ldr	r2, [pc, #460]	; (80066d0 <HAL_DMA_Abort+0x21c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d040      	beq.n	800658a <HAL_DMA_Abort+0xd6>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a71      	ldr	r2, [pc, #452]	; (80066d4 <HAL_DMA_Abort+0x220>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d03b      	beq.n	800658a <HAL_DMA_Abort+0xd6>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a70      	ldr	r2, [pc, #448]	; (80066d8 <HAL_DMA_Abort+0x224>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d036      	beq.n	800658a <HAL_DMA_Abort+0xd6>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a6e      	ldr	r2, [pc, #440]	; (80066dc <HAL_DMA_Abort+0x228>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d031      	beq.n	800658a <HAL_DMA_Abort+0xd6>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a6d      	ldr	r2, [pc, #436]	; (80066e0 <HAL_DMA_Abort+0x22c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d02c      	beq.n	800658a <HAL_DMA_Abort+0xd6>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a6b      	ldr	r2, [pc, #428]	; (80066e4 <HAL_DMA_Abort+0x230>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d027      	beq.n	800658a <HAL_DMA_Abort+0xd6>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a6a      	ldr	r2, [pc, #424]	; (80066e8 <HAL_DMA_Abort+0x234>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d022      	beq.n	800658a <HAL_DMA_Abort+0xd6>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a68      	ldr	r2, [pc, #416]	; (80066ec <HAL_DMA_Abort+0x238>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d01d      	beq.n	800658a <HAL_DMA_Abort+0xd6>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a67      	ldr	r2, [pc, #412]	; (80066f0 <HAL_DMA_Abort+0x23c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d018      	beq.n	800658a <HAL_DMA_Abort+0xd6>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a65      	ldr	r2, [pc, #404]	; (80066f4 <HAL_DMA_Abort+0x240>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d013      	beq.n	800658a <HAL_DMA_Abort+0xd6>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a64      	ldr	r2, [pc, #400]	; (80066f8 <HAL_DMA_Abort+0x244>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00e      	beq.n	800658a <HAL_DMA_Abort+0xd6>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a62      	ldr	r2, [pc, #392]	; (80066fc <HAL_DMA_Abort+0x248>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d009      	beq.n	800658a <HAL_DMA_Abort+0xd6>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a61      	ldr	r2, [pc, #388]	; (8006700 <HAL_DMA_Abort+0x24c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d004      	beq.n	800658a <HAL_DMA_Abort+0xd6>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a5f      	ldr	r2, [pc, #380]	; (8006704 <HAL_DMA_Abort+0x250>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d101      	bne.n	800658e <HAL_DMA_Abort+0xda>
 800658a:	2301      	movs	r3, #1
 800658c:	e000      	b.n	8006590 <HAL_DMA_Abort+0xdc>
 800658e:	2300      	movs	r3, #0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d013      	beq.n	80065bc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 021e 	bic.w	r2, r2, #30
 80065a2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	695a      	ldr	r2, [r3, #20]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065b2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	617b      	str	r3, [r7, #20]
 80065ba:	e00a      	b.n	80065d2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 020e 	bic.w	r2, r2, #14
 80065ca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a3c      	ldr	r2, [pc, #240]	; (80066c8 <HAL_DMA_Abort+0x214>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d072      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a3a      	ldr	r2, [pc, #232]	; (80066cc <HAL_DMA_Abort+0x218>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d06d      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a39      	ldr	r2, [pc, #228]	; (80066d0 <HAL_DMA_Abort+0x21c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d068      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a37      	ldr	r2, [pc, #220]	; (80066d4 <HAL_DMA_Abort+0x220>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d063      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a36      	ldr	r2, [pc, #216]	; (80066d8 <HAL_DMA_Abort+0x224>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d05e      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a34      	ldr	r2, [pc, #208]	; (80066dc <HAL_DMA_Abort+0x228>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d059      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a33      	ldr	r2, [pc, #204]	; (80066e0 <HAL_DMA_Abort+0x22c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d054      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a31      	ldr	r2, [pc, #196]	; (80066e4 <HAL_DMA_Abort+0x230>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d04f      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a30      	ldr	r2, [pc, #192]	; (80066e8 <HAL_DMA_Abort+0x234>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d04a      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a2e      	ldr	r2, [pc, #184]	; (80066ec <HAL_DMA_Abort+0x238>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d045      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a2d      	ldr	r2, [pc, #180]	; (80066f0 <HAL_DMA_Abort+0x23c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d040      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a2b      	ldr	r2, [pc, #172]	; (80066f4 <HAL_DMA_Abort+0x240>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d03b      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a2a      	ldr	r2, [pc, #168]	; (80066f8 <HAL_DMA_Abort+0x244>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d036      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a28      	ldr	r2, [pc, #160]	; (80066fc <HAL_DMA_Abort+0x248>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d031      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a27      	ldr	r2, [pc, #156]	; (8006700 <HAL_DMA_Abort+0x24c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d02c      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a25      	ldr	r2, [pc, #148]	; (8006704 <HAL_DMA_Abort+0x250>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d027      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a24      	ldr	r2, [pc, #144]	; (8006708 <HAL_DMA_Abort+0x254>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d022      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a22      	ldr	r2, [pc, #136]	; (800670c <HAL_DMA_Abort+0x258>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d01d      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a21      	ldr	r2, [pc, #132]	; (8006710 <HAL_DMA_Abort+0x25c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d018      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a1f      	ldr	r2, [pc, #124]	; (8006714 <HAL_DMA_Abort+0x260>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d013      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a1e      	ldr	r2, [pc, #120]	; (8006718 <HAL_DMA_Abort+0x264>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00e      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1c      	ldr	r2, [pc, #112]	; (800671c <HAL_DMA_Abort+0x268>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d009      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <HAL_DMA_Abort+0x26c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d004      	beq.n	80066c2 <HAL_DMA_Abort+0x20e>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a19      	ldr	r2, [pc, #100]	; (8006724 <HAL_DMA_Abort+0x270>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d132      	bne.n	8006728 <HAL_DMA_Abort+0x274>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e031      	b.n	800672a <HAL_DMA_Abort+0x276>
 80066c6:	bf00      	nop
 80066c8:	40020010 	.word	0x40020010
 80066cc:	40020028 	.word	0x40020028
 80066d0:	40020040 	.word	0x40020040
 80066d4:	40020058 	.word	0x40020058
 80066d8:	40020070 	.word	0x40020070
 80066dc:	40020088 	.word	0x40020088
 80066e0:	400200a0 	.word	0x400200a0
 80066e4:	400200b8 	.word	0x400200b8
 80066e8:	40020410 	.word	0x40020410
 80066ec:	40020428 	.word	0x40020428
 80066f0:	40020440 	.word	0x40020440
 80066f4:	40020458 	.word	0x40020458
 80066f8:	40020470 	.word	0x40020470
 80066fc:	40020488 	.word	0x40020488
 8006700:	400204a0 	.word	0x400204a0
 8006704:	400204b8 	.word	0x400204b8
 8006708:	58025408 	.word	0x58025408
 800670c:	5802541c 	.word	0x5802541c
 8006710:	58025430 	.word	0x58025430
 8006714:	58025444 	.word	0x58025444
 8006718:	58025458 	.word	0x58025458
 800671c:	5802546c 	.word	0x5802546c
 8006720:	58025480 	.word	0x58025480
 8006724:	58025494 	.word	0x58025494
 8006728:	2300      	movs	r3, #0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d007      	beq.n	800673e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006738:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800673c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a6d      	ldr	r2, [pc, #436]	; (80068f8 <HAL_DMA_Abort+0x444>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d04a      	beq.n	80067de <HAL_DMA_Abort+0x32a>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a6b      	ldr	r2, [pc, #428]	; (80068fc <HAL_DMA_Abort+0x448>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d045      	beq.n	80067de <HAL_DMA_Abort+0x32a>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a6a      	ldr	r2, [pc, #424]	; (8006900 <HAL_DMA_Abort+0x44c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d040      	beq.n	80067de <HAL_DMA_Abort+0x32a>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a68      	ldr	r2, [pc, #416]	; (8006904 <HAL_DMA_Abort+0x450>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d03b      	beq.n	80067de <HAL_DMA_Abort+0x32a>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a67      	ldr	r2, [pc, #412]	; (8006908 <HAL_DMA_Abort+0x454>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d036      	beq.n	80067de <HAL_DMA_Abort+0x32a>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a65      	ldr	r2, [pc, #404]	; (800690c <HAL_DMA_Abort+0x458>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d031      	beq.n	80067de <HAL_DMA_Abort+0x32a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a64      	ldr	r2, [pc, #400]	; (8006910 <HAL_DMA_Abort+0x45c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d02c      	beq.n	80067de <HAL_DMA_Abort+0x32a>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a62      	ldr	r2, [pc, #392]	; (8006914 <HAL_DMA_Abort+0x460>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d027      	beq.n	80067de <HAL_DMA_Abort+0x32a>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a61      	ldr	r2, [pc, #388]	; (8006918 <HAL_DMA_Abort+0x464>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d022      	beq.n	80067de <HAL_DMA_Abort+0x32a>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a5f      	ldr	r2, [pc, #380]	; (800691c <HAL_DMA_Abort+0x468>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d01d      	beq.n	80067de <HAL_DMA_Abort+0x32a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a5e      	ldr	r2, [pc, #376]	; (8006920 <HAL_DMA_Abort+0x46c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d018      	beq.n	80067de <HAL_DMA_Abort+0x32a>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a5c      	ldr	r2, [pc, #368]	; (8006924 <HAL_DMA_Abort+0x470>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d013      	beq.n	80067de <HAL_DMA_Abort+0x32a>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a5b      	ldr	r2, [pc, #364]	; (8006928 <HAL_DMA_Abort+0x474>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d00e      	beq.n	80067de <HAL_DMA_Abort+0x32a>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a59      	ldr	r2, [pc, #356]	; (800692c <HAL_DMA_Abort+0x478>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d009      	beq.n	80067de <HAL_DMA_Abort+0x32a>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a58      	ldr	r2, [pc, #352]	; (8006930 <HAL_DMA_Abort+0x47c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d004      	beq.n	80067de <HAL_DMA_Abort+0x32a>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a56      	ldr	r2, [pc, #344]	; (8006934 <HAL_DMA_Abort+0x480>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d108      	bne.n	80067f0 <HAL_DMA_Abort+0x33c>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 0201 	bic.w	r2, r2, #1
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	e007      	b.n	8006800 <HAL_DMA_Abort+0x34c>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0201 	bic.w	r2, r2, #1
 80067fe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006800:	e013      	b.n	800682a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006802:	f7fe fd8f 	bl	8005324 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b05      	cmp	r3, #5
 800680e:	d90c      	bls.n	800682a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2220      	movs	r2, #32
 8006814:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2203      	movs	r2, #3
 800681a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e12d      	b.n	8006a86 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1e5      	bne.n	8006802 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a2f      	ldr	r2, [pc, #188]	; (80068f8 <HAL_DMA_Abort+0x444>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d04a      	beq.n	80068d6 <HAL_DMA_Abort+0x422>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a2d      	ldr	r2, [pc, #180]	; (80068fc <HAL_DMA_Abort+0x448>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d045      	beq.n	80068d6 <HAL_DMA_Abort+0x422>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a2c      	ldr	r2, [pc, #176]	; (8006900 <HAL_DMA_Abort+0x44c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d040      	beq.n	80068d6 <HAL_DMA_Abort+0x422>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a2a      	ldr	r2, [pc, #168]	; (8006904 <HAL_DMA_Abort+0x450>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d03b      	beq.n	80068d6 <HAL_DMA_Abort+0x422>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a29      	ldr	r2, [pc, #164]	; (8006908 <HAL_DMA_Abort+0x454>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d036      	beq.n	80068d6 <HAL_DMA_Abort+0x422>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a27      	ldr	r2, [pc, #156]	; (800690c <HAL_DMA_Abort+0x458>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d031      	beq.n	80068d6 <HAL_DMA_Abort+0x422>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a26      	ldr	r2, [pc, #152]	; (8006910 <HAL_DMA_Abort+0x45c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d02c      	beq.n	80068d6 <HAL_DMA_Abort+0x422>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a24      	ldr	r2, [pc, #144]	; (8006914 <HAL_DMA_Abort+0x460>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d027      	beq.n	80068d6 <HAL_DMA_Abort+0x422>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a23      	ldr	r2, [pc, #140]	; (8006918 <HAL_DMA_Abort+0x464>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d022      	beq.n	80068d6 <HAL_DMA_Abort+0x422>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a21      	ldr	r2, [pc, #132]	; (800691c <HAL_DMA_Abort+0x468>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d01d      	beq.n	80068d6 <HAL_DMA_Abort+0x422>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a20      	ldr	r2, [pc, #128]	; (8006920 <HAL_DMA_Abort+0x46c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d018      	beq.n	80068d6 <HAL_DMA_Abort+0x422>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a1e      	ldr	r2, [pc, #120]	; (8006924 <HAL_DMA_Abort+0x470>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d013      	beq.n	80068d6 <HAL_DMA_Abort+0x422>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a1d      	ldr	r2, [pc, #116]	; (8006928 <HAL_DMA_Abort+0x474>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00e      	beq.n	80068d6 <HAL_DMA_Abort+0x422>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a1b      	ldr	r2, [pc, #108]	; (800692c <HAL_DMA_Abort+0x478>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d009      	beq.n	80068d6 <HAL_DMA_Abort+0x422>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a1a      	ldr	r2, [pc, #104]	; (8006930 <HAL_DMA_Abort+0x47c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d004      	beq.n	80068d6 <HAL_DMA_Abort+0x422>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a18      	ldr	r2, [pc, #96]	; (8006934 <HAL_DMA_Abort+0x480>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d101      	bne.n	80068da <HAL_DMA_Abort+0x426>
 80068d6:	2301      	movs	r3, #1
 80068d8:	e000      	b.n	80068dc <HAL_DMA_Abort+0x428>
 80068da:	2300      	movs	r3, #0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d02b      	beq.n	8006938 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ea:	f003 031f 	and.w	r3, r3, #31
 80068ee:	223f      	movs	r2, #63	; 0x3f
 80068f0:	409a      	lsls	r2, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	609a      	str	r2, [r3, #8]
 80068f6:	e02a      	b.n	800694e <HAL_DMA_Abort+0x49a>
 80068f8:	40020010 	.word	0x40020010
 80068fc:	40020028 	.word	0x40020028
 8006900:	40020040 	.word	0x40020040
 8006904:	40020058 	.word	0x40020058
 8006908:	40020070 	.word	0x40020070
 800690c:	40020088 	.word	0x40020088
 8006910:	400200a0 	.word	0x400200a0
 8006914:	400200b8 	.word	0x400200b8
 8006918:	40020410 	.word	0x40020410
 800691c:	40020428 	.word	0x40020428
 8006920:	40020440 	.word	0x40020440
 8006924:	40020458 	.word	0x40020458
 8006928:	40020470 	.word	0x40020470
 800692c:	40020488 	.word	0x40020488
 8006930:	400204a0 	.word	0x400204a0
 8006934:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006942:	f003 031f 	and.w	r3, r3, #31
 8006946:	2201      	movs	r2, #1
 8006948:	409a      	lsls	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a4f      	ldr	r2, [pc, #316]	; (8006a90 <HAL_DMA_Abort+0x5dc>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d072      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a4d      	ldr	r2, [pc, #308]	; (8006a94 <HAL_DMA_Abort+0x5e0>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d06d      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a4c      	ldr	r2, [pc, #304]	; (8006a98 <HAL_DMA_Abort+0x5e4>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d068      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a4a      	ldr	r2, [pc, #296]	; (8006a9c <HAL_DMA_Abort+0x5e8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d063      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a49      	ldr	r2, [pc, #292]	; (8006aa0 <HAL_DMA_Abort+0x5ec>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d05e      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a47      	ldr	r2, [pc, #284]	; (8006aa4 <HAL_DMA_Abort+0x5f0>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d059      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a46      	ldr	r2, [pc, #280]	; (8006aa8 <HAL_DMA_Abort+0x5f4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d054      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a44      	ldr	r2, [pc, #272]	; (8006aac <HAL_DMA_Abort+0x5f8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d04f      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a43      	ldr	r2, [pc, #268]	; (8006ab0 <HAL_DMA_Abort+0x5fc>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d04a      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a41      	ldr	r2, [pc, #260]	; (8006ab4 <HAL_DMA_Abort+0x600>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d045      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a40      	ldr	r2, [pc, #256]	; (8006ab8 <HAL_DMA_Abort+0x604>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d040      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a3e      	ldr	r2, [pc, #248]	; (8006abc <HAL_DMA_Abort+0x608>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d03b      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a3d      	ldr	r2, [pc, #244]	; (8006ac0 <HAL_DMA_Abort+0x60c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d036      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a3b      	ldr	r2, [pc, #236]	; (8006ac4 <HAL_DMA_Abort+0x610>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d031      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a3a      	ldr	r2, [pc, #232]	; (8006ac8 <HAL_DMA_Abort+0x614>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d02c      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a38      	ldr	r2, [pc, #224]	; (8006acc <HAL_DMA_Abort+0x618>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d027      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a37      	ldr	r2, [pc, #220]	; (8006ad0 <HAL_DMA_Abort+0x61c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d022      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a35      	ldr	r2, [pc, #212]	; (8006ad4 <HAL_DMA_Abort+0x620>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d01d      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a34      	ldr	r2, [pc, #208]	; (8006ad8 <HAL_DMA_Abort+0x624>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d018      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a32      	ldr	r2, [pc, #200]	; (8006adc <HAL_DMA_Abort+0x628>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d013      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a31      	ldr	r2, [pc, #196]	; (8006ae0 <HAL_DMA_Abort+0x62c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d00e      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a2f      	ldr	r2, [pc, #188]	; (8006ae4 <HAL_DMA_Abort+0x630>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d009      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a2e      	ldr	r2, [pc, #184]	; (8006ae8 <HAL_DMA_Abort+0x634>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d004      	beq.n	8006a3e <HAL_DMA_Abort+0x58a>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a2c      	ldr	r2, [pc, #176]	; (8006aec <HAL_DMA_Abort+0x638>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d101      	bne.n	8006a42 <HAL_DMA_Abort+0x58e>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e000      	b.n	8006a44 <HAL_DMA_Abort+0x590>
 8006a42:	2300      	movs	r3, #0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d015      	beq.n	8006a74 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a50:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00c      	beq.n	8006a74 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a68:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a72:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	40020010 	.word	0x40020010
 8006a94:	40020028 	.word	0x40020028
 8006a98:	40020040 	.word	0x40020040
 8006a9c:	40020058 	.word	0x40020058
 8006aa0:	40020070 	.word	0x40020070
 8006aa4:	40020088 	.word	0x40020088
 8006aa8:	400200a0 	.word	0x400200a0
 8006aac:	400200b8 	.word	0x400200b8
 8006ab0:	40020410 	.word	0x40020410
 8006ab4:	40020428 	.word	0x40020428
 8006ab8:	40020440 	.word	0x40020440
 8006abc:	40020458 	.word	0x40020458
 8006ac0:	40020470 	.word	0x40020470
 8006ac4:	40020488 	.word	0x40020488
 8006ac8:	400204a0 	.word	0x400204a0
 8006acc:	400204b8 	.word	0x400204b8
 8006ad0:	58025408 	.word	0x58025408
 8006ad4:	5802541c 	.word	0x5802541c
 8006ad8:	58025430 	.word	0x58025430
 8006adc:	58025444 	.word	0x58025444
 8006ae0:	58025458 	.word	0x58025458
 8006ae4:	5802546c 	.word	0x5802546c
 8006ae8:	58025480 	.word	0x58025480
 8006aec:	58025494 	.word	0x58025494

08006af0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e237      	b.n	8006f72 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d004      	beq.n	8006b18 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2280      	movs	r2, #128	; 0x80
 8006b12:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e22c      	b.n	8006f72 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a5c      	ldr	r2, [pc, #368]	; (8006c90 <HAL_DMA_Abort_IT+0x1a0>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d04a      	beq.n	8006bb8 <HAL_DMA_Abort_IT+0xc8>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a5b      	ldr	r2, [pc, #364]	; (8006c94 <HAL_DMA_Abort_IT+0x1a4>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d045      	beq.n	8006bb8 <HAL_DMA_Abort_IT+0xc8>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a59      	ldr	r2, [pc, #356]	; (8006c98 <HAL_DMA_Abort_IT+0x1a8>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d040      	beq.n	8006bb8 <HAL_DMA_Abort_IT+0xc8>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a58      	ldr	r2, [pc, #352]	; (8006c9c <HAL_DMA_Abort_IT+0x1ac>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d03b      	beq.n	8006bb8 <HAL_DMA_Abort_IT+0xc8>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a56      	ldr	r2, [pc, #344]	; (8006ca0 <HAL_DMA_Abort_IT+0x1b0>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d036      	beq.n	8006bb8 <HAL_DMA_Abort_IT+0xc8>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a55      	ldr	r2, [pc, #340]	; (8006ca4 <HAL_DMA_Abort_IT+0x1b4>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d031      	beq.n	8006bb8 <HAL_DMA_Abort_IT+0xc8>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a53      	ldr	r2, [pc, #332]	; (8006ca8 <HAL_DMA_Abort_IT+0x1b8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d02c      	beq.n	8006bb8 <HAL_DMA_Abort_IT+0xc8>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a52      	ldr	r2, [pc, #328]	; (8006cac <HAL_DMA_Abort_IT+0x1bc>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d027      	beq.n	8006bb8 <HAL_DMA_Abort_IT+0xc8>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a50      	ldr	r2, [pc, #320]	; (8006cb0 <HAL_DMA_Abort_IT+0x1c0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d022      	beq.n	8006bb8 <HAL_DMA_Abort_IT+0xc8>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a4f      	ldr	r2, [pc, #316]	; (8006cb4 <HAL_DMA_Abort_IT+0x1c4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d01d      	beq.n	8006bb8 <HAL_DMA_Abort_IT+0xc8>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a4d      	ldr	r2, [pc, #308]	; (8006cb8 <HAL_DMA_Abort_IT+0x1c8>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d018      	beq.n	8006bb8 <HAL_DMA_Abort_IT+0xc8>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a4c      	ldr	r2, [pc, #304]	; (8006cbc <HAL_DMA_Abort_IT+0x1cc>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d013      	beq.n	8006bb8 <HAL_DMA_Abort_IT+0xc8>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a4a      	ldr	r2, [pc, #296]	; (8006cc0 <HAL_DMA_Abort_IT+0x1d0>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d00e      	beq.n	8006bb8 <HAL_DMA_Abort_IT+0xc8>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a49      	ldr	r2, [pc, #292]	; (8006cc4 <HAL_DMA_Abort_IT+0x1d4>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d009      	beq.n	8006bb8 <HAL_DMA_Abort_IT+0xc8>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a47      	ldr	r2, [pc, #284]	; (8006cc8 <HAL_DMA_Abort_IT+0x1d8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d004      	beq.n	8006bb8 <HAL_DMA_Abort_IT+0xc8>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a46      	ldr	r2, [pc, #280]	; (8006ccc <HAL_DMA_Abort_IT+0x1dc>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d101      	bne.n	8006bbc <HAL_DMA_Abort_IT+0xcc>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e000      	b.n	8006bbe <HAL_DMA_Abort_IT+0xce>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 8086 	beq.w	8006cd0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2204      	movs	r2, #4
 8006bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a2f      	ldr	r2, [pc, #188]	; (8006c90 <HAL_DMA_Abort_IT+0x1a0>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d04a      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x17c>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a2e      	ldr	r2, [pc, #184]	; (8006c94 <HAL_DMA_Abort_IT+0x1a4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d045      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x17c>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a2c      	ldr	r2, [pc, #176]	; (8006c98 <HAL_DMA_Abort_IT+0x1a8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d040      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x17c>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a2b      	ldr	r2, [pc, #172]	; (8006c9c <HAL_DMA_Abort_IT+0x1ac>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d03b      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x17c>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a29      	ldr	r2, [pc, #164]	; (8006ca0 <HAL_DMA_Abort_IT+0x1b0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d036      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x17c>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a28      	ldr	r2, [pc, #160]	; (8006ca4 <HAL_DMA_Abort_IT+0x1b4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d031      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x17c>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a26      	ldr	r2, [pc, #152]	; (8006ca8 <HAL_DMA_Abort_IT+0x1b8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d02c      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x17c>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a25      	ldr	r2, [pc, #148]	; (8006cac <HAL_DMA_Abort_IT+0x1bc>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d027      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x17c>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a23      	ldr	r2, [pc, #140]	; (8006cb0 <HAL_DMA_Abort_IT+0x1c0>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d022      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x17c>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a22      	ldr	r2, [pc, #136]	; (8006cb4 <HAL_DMA_Abort_IT+0x1c4>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d01d      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x17c>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a20      	ldr	r2, [pc, #128]	; (8006cb8 <HAL_DMA_Abort_IT+0x1c8>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d018      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x17c>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a1f      	ldr	r2, [pc, #124]	; (8006cbc <HAL_DMA_Abort_IT+0x1cc>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d013      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x17c>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a1d      	ldr	r2, [pc, #116]	; (8006cc0 <HAL_DMA_Abort_IT+0x1d0>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00e      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x17c>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a1c      	ldr	r2, [pc, #112]	; (8006cc4 <HAL_DMA_Abort_IT+0x1d4>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d009      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x17c>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a1a      	ldr	r2, [pc, #104]	; (8006cc8 <HAL_DMA_Abort_IT+0x1d8>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d004      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x17c>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a19      	ldr	r2, [pc, #100]	; (8006ccc <HAL_DMA_Abort_IT+0x1dc>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d108      	bne.n	8006c7e <HAL_DMA_Abort_IT+0x18e>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 0201 	bic.w	r2, r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	e178      	b.n	8006f70 <HAL_DMA_Abort_IT+0x480>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 0201 	bic.w	r2, r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	e16f      	b.n	8006f70 <HAL_DMA_Abort_IT+0x480>
 8006c90:	40020010 	.word	0x40020010
 8006c94:	40020028 	.word	0x40020028
 8006c98:	40020040 	.word	0x40020040
 8006c9c:	40020058 	.word	0x40020058
 8006ca0:	40020070 	.word	0x40020070
 8006ca4:	40020088 	.word	0x40020088
 8006ca8:	400200a0 	.word	0x400200a0
 8006cac:	400200b8 	.word	0x400200b8
 8006cb0:	40020410 	.word	0x40020410
 8006cb4:	40020428 	.word	0x40020428
 8006cb8:	40020440 	.word	0x40020440
 8006cbc:	40020458 	.word	0x40020458
 8006cc0:	40020470 	.word	0x40020470
 8006cc4:	40020488 	.word	0x40020488
 8006cc8:	400204a0 	.word	0x400204a0
 8006ccc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 020e 	bic.w	r2, r2, #14
 8006cde:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a6c      	ldr	r2, [pc, #432]	; (8006e98 <HAL_DMA_Abort_IT+0x3a8>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d04a      	beq.n	8006d80 <HAL_DMA_Abort_IT+0x290>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a6b      	ldr	r2, [pc, #428]	; (8006e9c <HAL_DMA_Abort_IT+0x3ac>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d045      	beq.n	8006d80 <HAL_DMA_Abort_IT+0x290>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a69      	ldr	r2, [pc, #420]	; (8006ea0 <HAL_DMA_Abort_IT+0x3b0>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d040      	beq.n	8006d80 <HAL_DMA_Abort_IT+0x290>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a68      	ldr	r2, [pc, #416]	; (8006ea4 <HAL_DMA_Abort_IT+0x3b4>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d03b      	beq.n	8006d80 <HAL_DMA_Abort_IT+0x290>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a66      	ldr	r2, [pc, #408]	; (8006ea8 <HAL_DMA_Abort_IT+0x3b8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d036      	beq.n	8006d80 <HAL_DMA_Abort_IT+0x290>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a65      	ldr	r2, [pc, #404]	; (8006eac <HAL_DMA_Abort_IT+0x3bc>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d031      	beq.n	8006d80 <HAL_DMA_Abort_IT+0x290>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a63      	ldr	r2, [pc, #396]	; (8006eb0 <HAL_DMA_Abort_IT+0x3c0>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d02c      	beq.n	8006d80 <HAL_DMA_Abort_IT+0x290>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a62      	ldr	r2, [pc, #392]	; (8006eb4 <HAL_DMA_Abort_IT+0x3c4>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d027      	beq.n	8006d80 <HAL_DMA_Abort_IT+0x290>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a60      	ldr	r2, [pc, #384]	; (8006eb8 <HAL_DMA_Abort_IT+0x3c8>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d022      	beq.n	8006d80 <HAL_DMA_Abort_IT+0x290>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a5f      	ldr	r2, [pc, #380]	; (8006ebc <HAL_DMA_Abort_IT+0x3cc>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d01d      	beq.n	8006d80 <HAL_DMA_Abort_IT+0x290>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a5d      	ldr	r2, [pc, #372]	; (8006ec0 <HAL_DMA_Abort_IT+0x3d0>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d018      	beq.n	8006d80 <HAL_DMA_Abort_IT+0x290>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a5c      	ldr	r2, [pc, #368]	; (8006ec4 <HAL_DMA_Abort_IT+0x3d4>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d013      	beq.n	8006d80 <HAL_DMA_Abort_IT+0x290>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a5a      	ldr	r2, [pc, #360]	; (8006ec8 <HAL_DMA_Abort_IT+0x3d8>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00e      	beq.n	8006d80 <HAL_DMA_Abort_IT+0x290>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a59      	ldr	r2, [pc, #356]	; (8006ecc <HAL_DMA_Abort_IT+0x3dc>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d009      	beq.n	8006d80 <HAL_DMA_Abort_IT+0x290>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a57      	ldr	r2, [pc, #348]	; (8006ed0 <HAL_DMA_Abort_IT+0x3e0>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d004      	beq.n	8006d80 <HAL_DMA_Abort_IT+0x290>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a56      	ldr	r2, [pc, #344]	; (8006ed4 <HAL_DMA_Abort_IT+0x3e4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d108      	bne.n	8006d92 <HAL_DMA_Abort_IT+0x2a2>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 0201 	bic.w	r2, r2, #1
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	e007      	b.n	8006da2 <HAL_DMA_Abort_IT+0x2b2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 0201 	bic.w	r2, r2, #1
 8006da0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a3c      	ldr	r2, [pc, #240]	; (8006e98 <HAL_DMA_Abort_IT+0x3a8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d072      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a3a      	ldr	r2, [pc, #232]	; (8006e9c <HAL_DMA_Abort_IT+0x3ac>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d06d      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a39      	ldr	r2, [pc, #228]	; (8006ea0 <HAL_DMA_Abort_IT+0x3b0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d068      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a37      	ldr	r2, [pc, #220]	; (8006ea4 <HAL_DMA_Abort_IT+0x3b4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d063      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a36      	ldr	r2, [pc, #216]	; (8006ea8 <HAL_DMA_Abort_IT+0x3b8>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d05e      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a34      	ldr	r2, [pc, #208]	; (8006eac <HAL_DMA_Abort_IT+0x3bc>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d059      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a33      	ldr	r2, [pc, #204]	; (8006eb0 <HAL_DMA_Abort_IT+0x3c0>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d054      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a31      	ldr	r2, [pc, #196]	; (8006eb4 <HAL_DMA_Abort_IT+0x3c4>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d04f      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a30      	ldr	r2, [pc, #192]	; (8006eb8 <HAL_DMA_Abort_IT+0x3c8>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d04a      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a2e      	ldr	r2, [pc, #184]	; (8006ebc <HAL_DMA_Abort_IT+0x3cc>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d045      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a2d      	ldr	r2, [pc, #180]	; (8006ec0 <HAL_DMA_Abort_IT+0x3d0>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d040      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a2b      	ldr	r2, [pc, #172]	; (8006ec4 <HAL_DMA_Abort_IT+0x3d4>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d03b      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a2a      	ldr	r2, [pc, #168]	; (8006ec8 <HAL_DMA_Abort_IT+0x3d8>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d036      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a28      	ldr	r2, [pc, #160]	; (8006ecc <HAL_DMA_Abort_IT+0x3dc>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d031      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a27      	ldr	r2, [pc, #156]	; (8006ed0 <HAL_DMA_Abort_IT+0x3e0>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d02c      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a25      	ldr	r2, [pc, #148]	; (8006ed4 <HAL_DMA_Abort_IT+0x3e4>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d027      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a24      	ldr	r2, [pc, #144]	; (8006ed8 <HAL_DMA_Abort_IT+0x3e8>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d022      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a22      	ldr	r2, [pc, #136]	; (8006edc <HAL_DMA_Abort_IT+0x3ec>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d01d      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a21      	ldr	r2, [pc, #132]	; (8006ee0 <HAL_DMA_Abort_IT+0x3f0>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d018      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a1f      	ldr	r2, [pc, #124]	; (8006ee4 <HAL_DMA_Abort_IT+0x3f4>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d013      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a1e      	ldr	r2, [pc, #120]	; (8006ee8 <HAL_DMA_Abort_IT+0x3f8>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d00e      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a1c      	ldr	r2, [pc, #112]	; (8006eec <HAL_DMA_Abort_IT+0x3fc>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d009      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a1b      	ldr	r2, [pc, #108]	; (8006ef0 <HAL_DMA_Abort_IT+0x400>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d004      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x3a2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a19      	ldr	r2, [pc, #100]	; (8006ef4 <HAL_DMA_Abort_IT+0x404>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d132      	bne.n	8006ef8 <HAL_DMA_Abort_IT+0x408>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e031      	b.n	8006efa <HAL_DMA_Abort_IT+0x40a>
 8006e96:	bf00      	nop
 8006e98:	40020010 	.word	0x40020010
 8006e9c:	40020028 	.word	0x40020028
 8006ea0:	40020040 	.word	0x40020040
 8006ea4:	40020058 	.word	0x40020058
 8006ea8:	40020070 	.word	0x40020070
 8006eac:	40020088 	.word	0x40020088
 8006eb0:	400200a0 	.word	0x400200a0
 8006eb4:	400200b8 	.word	0x400200b8
 8006eb8:	40020410 	.word	0x40020410
 8006ebc:	40020428 	.word	0x40020428
 8006ec0:	40020440 	.word	0x40020440
 8006ec4:	40020458 	.word	0x40020458
 8006ec8:	40020470 	.word	0x40020470
 8006ecc:	40020488 	.word	0x40020488
 8006ed0:	400204a0 	.word	0x400204a0
 8006ed4:	400204b8 	.word	0x400204b8
 8006ed8:	58025408 	.word	0x58025408
 8006edc:	5802541c 	.word	0x5802541c
 8006ee0:	58025430 	.word	0x58025430
 8006ee4:	58025444 	.word	0x58025444
 8006ee8:	58025458 	.word	0x58025458
 8006eec:	5802546c 	.word	0x5802546c
 8006ef0:	58025480 	.word	0x58025480
 8006ef4:	58025494 	.word	0x58025494
 8006ef8:	2300      	movs	r3, #0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d028      	beq.n	8006f50 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f0c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f12:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f18:	f003 031f 	and.w	r3, r3, #31
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	409a      	lsls	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f2c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00c      	beq.n	8006f50 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f44:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f4e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d003      	beq.n	8006f70 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop

08006f7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08a      	sub	sp, #40	; 0x28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006f88:	4b67      	ldr	r3, [pc, #412]	; (8007128 <HAL_DMA_IRQHandler+0x1ac>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a67      	ldr	r2, [pc, #412]	; (800712c <HAL_DMA_IRQHandler+0x1b0>)
 8006f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f92:	0a9b      	lsrs	r3, r3, #10
 8006f94:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f9a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a5f      	ldr	r2, [pc, #380]	; (8007130 <HAL_DMA_IRQHandler+0x1b4>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d04a      	beq.n	800704e <HAL_DMA_IRQHandler+0xd2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a5d      	ldr	r2, [pc, #372]	; (8007134 <HAL_DMA_IRQHandler+0x1b8>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d045      	beq.n	800704e <HAL_DMA_IRQHandler+0xd2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a5c      	ldr	r2, [pc, #368]	; (8007138 <HAL_DMA_IRQHandler+0x1bc>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d040      	beq.n	800704e <HAL_DMA_IRQHandler+0xd2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a5a      	ldr	r2, [pc, #360]	; (800713c <HAL_DMA_IRQHandler+0x1c0>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d03b      	beq.n	800704e <HAL_DMA_IRQHandler+0xd2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a59      	ldr	r2, [pc, #356]	; (8007140 <HAL_DMA_IRQHandler+0x1c4>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d036      	beq.n	800704e <HAL_DMA_IRQHandler+0xd2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a57      	ldr	r2, [pc, #348]	; (8007144 <HAL_DMA_IRQHandler+0x1c8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d031      	beq.n	800704e <HAL_DMA_IRQHandler+0xd2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a56      	ldr	r2, [pc, #344]	; (8007148 <HAL_DMA_IRQHandler+0x1cc>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d02c      	beq.n	800704e <HAL_DMA_IRQHandler+0xd2>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a54      	ldr	r2, [pc, #336]	; (800714c <HAL_DMA_IRQHandler+0x1d0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d027      	beq.n	800704e <HAL_DMA_IRQHandler+0xd2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a53      	ldr	r2, [pc, #332]	; (8007150 <HAL_DMA_IRQHandler+0x1d4>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d022      	beq.n	800704e <HAL_DMA_IRQHandler+0xd2>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a51      	ldr	r2, [pc, #324]	; (8007154 <HAL_DMA_IRQHandler+0x1d8>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d01d      	beq.n	800704e <HAL_DMA_IRQHandler+0xd2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a50      	ldr	r2, [pc, #320]	; (8007158 <HAL_DMA_IRQHandler+0x1dc>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d018      	beq.n	800704e <HAL_DMA_IRQHandler+0xd2>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a4e      	ldr	r2, [pc, #312]	; (800715c <HAL_DMA_IRQHandler+0x1e0>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d013      	beq.n	800704e <HAL_DMA_IRQHandler+0xd2>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a4d      	ldr	r2, [pc, #308]	; (8007160 <HAL_DMA_IRQHandler+0x1e4>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d00e      	beq.n	800704e <HAL_DMA_IRQHandler+0xd2>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a4b      	ldr	r2, [pc, #300]	; (8007164 <HAL_DMA_IRQHandler+0x1e8>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d009      	beq.n	800704e <HAL_DMA_IRQHandler+0xd2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a4a      	ldr	r2, [pc, #296]	; (8007168 <HAL_DMA_IRQHandler+0x1ec>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d004      	beq.n	800704e <HAL_DMA_IRQHandler+0xd2>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a48      	ldr	r2, [pc, #288]	; (800716c <HAL_DMA_IRQHandler+0x1f0>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d101      	bne.n	8007052 <HAL_DMA_IRQHandler+0xd6>
 800704e:	2301      	movs	r3, #1
 8007050:	e000      	b.n	8007054 <HAL_DMA_IRQHandler+0xd8>
 8007052:	2300      	movs	r3, #0
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 842b 	beq.w	80078b0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800705e:	f003 031f 	and.w	r3, r3, #31
 8007062:	2208      	movs	r2, #8
 8007064:	409a      	lsls	r2, r3
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	4013      	ands	r3, r2
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 80a2 	beq.w	80071b4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a2e      	ldr	r2, [pc, #184]	; (8007130 <HAL_DMA_IRQHandler+0x1b4>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d04a      	beq.n	8007110 <HAL_DMA_IRQHandler+0x194>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a2d      	ldr	r2, [pc, #180]	; (8007134 <HAL_DMA_IRQHandler+0x1b8>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d045      	beq.n	8007110 <HAL_DMA_IRQHandler+0x194>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a2b      	ldr	r2, [pc, #172]	; (8007138 <HAL_DMA_IRQHandler+0x1bc>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d040      	beq.n	8007110 <HAL_DMA_IRQHandler+0x194>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a2a      	ldr	r2, [pc, #168]	; (800713c <HAL_DMA_IRQHandler+0x1c0>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d03b      	beq.n	8007110 <HAL_DMA_IRQHandler+0x194>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a28      	ldr	r2, [pc, #160]	; (8007140 <HAL_DMA_IRQHandler+0x1c4>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d036      	beq.n	8007110 <HAL_DMA_IRQHandler+0x194>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a27      	ldr	r2, [pc, #156]	; (8007144 <HAL_DMA_IRQHandler+0x1c8>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d031      	beq.n	8007110 <HAL_DMA_IRQHandler+0x194>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a25      	ldr	r2, [pc, #148]	; (8007148 <HAL_DMA_IRQHandler+0x1cc>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d02c      	beq.n	8007110 <HAL_DMA_IRQHandler+0x194>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a24      	ldr	r2, [pc, #144]	; (800714c <HAL_DMA_IRQHandler+0x1d0>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d027      	beq.n	8007110 <HAL_DMA_IRQHandler+0x194>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a22      	ldr	r2, [pc, #136]	; (8007150 <HAL_DMA_IRQHandler+0x1d4>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d022      	beq.n	8007110 <HAL_DMA_IRQHandler+0x194>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a21      	ldr	r2, [pc, #132]	; (8007154 <HAL_DMA_IRQHandler+0x1d8>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d01d      	beq.n	8007110 <HAL_DMA_IRQHandler+0x194>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1f      	ldr	r2, [pc, #124]	; (8007158 <HAL_DMA_IRQHandler+0x1dc>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d018      	beq.n	8007110 <HAL_DMA_IRQHandler+0x194>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a1e      	ldr	r2, [pc, #120]	; (800715c <HAL_DMA_IRQHandler+0x1e0>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d013      	beq.n	8007110 <HAL_DMA_IRQHandler+0x194>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a1c      	ldr	r2, [pc, #112]	; (8007160 <HAL_DMA_IRQHandler+0x1e4>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d00e      	beq.n	8007110 <HAL_DMA_IRQHandler+0x194>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a1b      	ldr	r2, [pc, #108]	; (8007164 <HAL_DMA_IRQHandler+0x1e8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d009      	beq.n	8007110 <HAL_DMA_IRQHandler+0x194>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a19      	ldr	r2, [pc, #100]	; (8007168 <HAL_DMA_IRQHandler+0x1ec>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d004      	beq.n	8007110 <HAL_DMA_IRQHandler+0x194>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a18      	ldr	r2, [pc, #96]	; (800716c <HAL_DMA_IRQHandler+0x1f0>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d12f      	bne.n	8007170 <HAL_DMA_IRQHandler+0x1f4>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0304 	and.w	r3, r3, #4
 800711a:	2b00      	cmp	r3, #0
 800711c:	bf14      	ite	ne
 800711e:	2301      	movne	r3, #1
 8007120:	2300      	moveq	r3, #0
 8007122:	b2db      	uxtb	r3, r3
 8007124:	e02e      	b.n	8007184 <HAL_DMA_IRQHandler+0x208>
 8007126:	bf00      	nop
 8007128:	24000000 	.word	0x24000000
 800712c:	1b4e81b5 	.word	0x1b4e81b5
 8007130:	40020010 	.word	0x40020010
 8007134:	40020028 	.word	0x40020028
 8007138:	40020040 	.word	0x40020040
 800713c:	40020058 	.word	0x40020058
 8007140:	40020070 	.word	0x40020070
 8007144:	40020088 	.word	0x40020088
 8007148:	400200a0 	.word	0x400200a0
 800714c:	400200b8 	.word	0x400200b8
 8007150:	40020410 	.word	0x40020410
 8007154:	40020428 	.word	0x40020428
 8007158:	40020440 	.word	0x40020440
 800715c:	40020458 	.word	0x40020458
 8007160:	40020470 	.word	0x40020470
 8007164:	40020488 	.word	0x40020488
 8007168:	400204a0 	.word	0x400204a0
 800716c:	400204b8 	.word	0x400204b8
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0308 	and.w	r3, r3, #8
 800717a:	2b00      	cmp	r3, #0
 800717c:	bf14      	ite	ne
 800717e:	2301      	movne	r3, #1
 8007180:	2300      	moveq	r3, #0
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d015      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0204 	bic.w	r2, r2, #4
 8007196:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719c:	f003 031f 	and.w	r3, r3, #31
 80071a0:	2208      	movs	r2, #8
 80071a2:	409a      	lsls	r2, r3
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ac:	f043 0201 	orr.w	r2, r3, #1
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b8:	f003 031f 	and.w	r3, r3, #31
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	fa22 f303 	lsr.w	r3, r2, r3
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d06e      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a69      	ldr	r2, [pc, #420]	; (8007374 <HAL_DMA_IRQHandler+0x3f8>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d04a      	beq.n	800726a <HAL_DMA_IRQHandler+0x2ee>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a67      	ldr	r2, [pc, #412]	; (8007378 <HAL_DMA_IRQHandler+0x3fc>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d045      	beq.n	800726a <HAL_DMA_IRQHandler+0x2ee>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a66      	ldr	r2, [pc, #408]	; (800737c <HAL_DMA_IRQHandler+0x400>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d040      	beq.n	800726a <HAL_DMA_IRQHandler+0x2ee>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a64      	ldr	r2, [pc, #400]	; (8007380 <HAL_DMA_IRQHandler+0x404>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d03b      	beq.n	800726a <HAL_DMA_IRQHandler+0x2ee>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a63      	ldr	r2, [pc, #396]	; (8007384 <HAL_DMA_IRQHandler+0x408>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d036      	beq.n	800726a <HAL_DMA_IRQHandler+0x2ee>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a61      	ldr	r2, [pc, #388]	; (8007388 <HAL_DMA_IRQHandler+0x40c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d031      	beq.n	800726a <HAL_DMA_IRQHandler+0x2ee>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a60      	ldr	r2, [pc, #384]	; (800738c <HAL_DMA_IRQHandler+0x410>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d02c      	beq.n	800726a <HAL_DMA_IRQHandler+0x2ee>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a5e      	ldr	r2, [pc, #376]	; (8007390 <HAL_DMA_IRQHandler+0x414>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d027      	beq.n	800726a <HAL_DMA_IRQHandler+0x2ee>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a5d      	ldr	r2, [pc, #372]	; (8007394 <HAL_DMA_IRQHandler+0x418>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d022      	beq.n	800726a <HAL_DMA_IRQHandler+0x2ee>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a5b      	ldr	r2, [pc, #364]	; (8007398 <HAL_DMA_IRQHandler+0x41c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d01d      	beq.n	800726a <HAL_DMA_IRQHandler+0x2ee>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a5a      	ldr	r2, [pc, #360]	; (800739c <HAL_DMA_IRQHandler+0x420>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d018      	beq.n	800726a <HAL_DMA_IRQHandler+0x2ee>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a58      	ldr	r2, [pc, #352]	; (80073a0 <HAL_DMA_IRQHandler+0x424>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d013      	beq.n	800726a <HAL_DMA_IRQHandler+0x2ee>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a57      	ldr	r2, [pc, #348]	; (80073a4 <HAL_DMA_IRQHandler+0x428>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d00e      	beq.n	800726a <HAL_DMA_IRQHandler+0x2ee>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a55      	ldr	r2, [pc, #340]	; (80073a8 <HAL_DMA_IRQHandler+0x42c>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d009      	beq.n	800726a <HAL_DMA_IRQHandler+0x2ee>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a54      	ldr	r2, [pc, #336]	; (80073ac <HAL_DMA_IRQHandler+0x430>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d004      	beq.n	800726a <HAL_DMA_IRQHandler+0x2ee>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a52      	ldr	r2, [pc, #328]	; (80073b0 <HAL_DMA_IRQHandler+0x434>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d10a      	bne.n	8007280 <HAL_DMA_IRQHandler+0x304>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007274:	2b00      	cmp	r3, #0
 8007276:	bf14      	ite	ne
 8007278:	2301      	movne	r3, #1
 800727a:	2300      	moveq	r3, #0
 800727c:	b2db      	uxtb	r3, r3
 800727e:	e003      	b.n	8007288 <HAL_DMA_IRQHandler+0x30c>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2300      	movs	r3, #0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00d      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007290:	f003 031f 	and.w	r3, r3, #31
 8007294:	2201      	movs	r2, #1
 8007296:	409a      	lsls	r2, r3
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a0:	f043 0202 	orr.w	r2, r3, #2
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	2204      	movs	r2, #4
 80072b2:	409a      	lsls	r2, r3
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	4013      	ands	r3, r2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 808f 	beq.w	80073dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a2c      	ldr	r2, [pc, #176]	; (8007374 <HAL_DMA_IRQHandler+0x3f8>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d04a      	beq.n	800735e <HAL_DMA_IRQHandler+0x3e2>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a2a      	ldr	r2, [pc, #168]	; (8007378 <HAL_DMA_IRQHandler+0x3fc>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d045      	beq.n	800735e <HAL_DMA_IRQHandler+0x3e2>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a29      	ldr	r2, [pc, #164]	; (800737c <HAL_DMA_IRQHandler+0x400>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d040      	beq.n	800735e <HAL_DMA_IRQHandler+0x3e2>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a27      	ldr	r2, [pc, #156]	; (8007380 <HAL_DMA_IRQHandler+0x404>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d03b      	beq.n	800735e <HAL_DMA_IRQHandler+0x3e2>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a26      	ldr	r2, [pc, #152]	; (8007384 <HAL_DMA_IRQHandler+0x408>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d036      	beq.n	800735e <HAL_DMA_IRQHandler+0x3e2>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a24      	ldr	r2, [pc, #144]	; (8007388 <HAL_DMA_IRQHandler+0x40c>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d031      	beq.n	800735e <HAL_DMA_IRQHandler+0x3e2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a23      	ldr	r2, [pc, #140]	; (800738c <HAL_DMA_IRQHandler+0x410>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d02c      	beq.n	800735e <HAL_DMA_IRQHandler+0x3e2>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a21      	ldr	r2, [pc, #132]	; (8007390 <HAL_DMA_IRQHandler+0x414>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d027      	beq.n	800735e <HAL_DMA_IRQHandler+0x3e2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a20      	ldr	r2, [pc, #128]	; (8007394 <HAL_DMA_IRQHandler+0x418>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d022      	beq.n	800735e <HAL_DMA_IRQHandler+0x3e2>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a1e      	ldr	r2, [pc, #120]	; (8007398 <HAL_DMA_IRQHandler+0x41c>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d01d      	beq.n	800735e <HAL_DMA_IRQHandler+0x3e2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a1d      	ldr	r2, [pc, #116]	; (800739c <HAL_DMA_IRQHandler+0x420>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d018      	beq.n	800735e <HAL_DMA_IRQHandler+0x3e2>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a1b      	ldr	r2, [pc, #108]	; (80073a0 <HAL_DMA_IRQHandler+0x424>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d013      	beq.n	800735e <HAL_DMA_IRQHandler+0x3e2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a1a      	ldr	r2, [pc, #104]	; (80073a4 <HAL_DMA_IRQHandler+0x428>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d00e      	beq.n	800735e <HAL_DMA_IRQHandler+0x3e2>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a18      	ldr	r2, [pc, #96]	; (80073a8 <HAL_DMA_IRQHandler+0x42c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d009      	beq.n	800735e <HAL_DMA_IRQHandler+0x3e2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a17      	ldr	r2, [pc, #92]	; (80073ac <HAL_DMA_IRQHandler+0x430>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d004      	beq.n	800735e <HAL_DMA_IRQHandler+0x3e2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a15      	ldr	r2, [pc, #84]	; (80073b0 <HAL_DMA_IRQHandler+0x434>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d12a      	bne.n	80073b4 <HAL_DMA_IRQHandler+0x438>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b00      	cmp	r3, #0
 800736a:	bf14      	ite	ne
 800736c:	2301      	movne	r3, #1
 800736e:	2300      	moveq	r3, #0
 8007370:	b2db      	uxtb	r3, r3
 8007372:	e023      	b.n	80073bc <HAL_DMA_IRQHandler+0x440>
 8007374:	40020010 	.word	0x40020010
 8007378:	40020028 	.word	0x40020028
 800737c:	40020040 	.word	0x40020040
 8007380:	40020058 	.word	0x40020058
 8007384:	40020070 	.word	0x40020070
 8007388:	40020088 	.word	0x40020088
 800738c:	400200a0 	.word	0x400200a0
 8007390:	400200b8 	.word	0x400200b8
 8007394:	40020410 	.word	0x40020410
 8007398:	40020428 	.word	0x40020428
 800739c:	40020440 	.word	0x40020440
 80073a0:	40020458 	.word	0x40020458
 80073a4:	40020470 	.word	0x40020470
 80073a8:	40020488 	.word	0x40020488
 80073ac:	400204a0 	.word	0x400204a0
 80073b0:	400204b8 	.word	0x400204b8
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2300      	movs	r3, #0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00d      	beq.n	80073dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073c4:	f003 031f 	and.w	r3, r3, #31
 80073c8:	2204      	movs	r2, #4
 80073ca:	409a      	lsls	r2, r3
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d4:	f043 0204 	orr.w	r2, r3, #4
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073e0:	f003 031f 	and.w	r3, r3, #31
 80073e4:	2210      	movs	r2, #16
 80073e6:	409a      	lsls	r2, r3
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	4013      	ands	r3, r2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f000 80a6 	beq.w	800753e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a85      	ldr	r2, [pc, #532]	; (800760c <HAL_DMA_IRQHandler+0x690>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d04a      	beq.n	8007492 <HAL_DMA_IRQHandler+0x516>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a83      	ldr	r2, [pc, #524]	; (8007610 <HAL_DMA_IRQHandler+0x694>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d045      	beq.n	8007492 <HAL_DMA_IRQHandler+0x516>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a82      	ldr	r2, [pc, #520]	; (8007614 <HAL_DMA_IRQHandler+0x698>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d040      	beq.n	8007492 <HAL_DMA_IRQHandler+0x516>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a80      	ldr	r2, [pc, #512]	; (8007618 <HAL_DMA_IRQHandler+0x69c>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d03b      	beq.n	8007492 <HAL_DMA_IRQHandler+0x516>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a7f      	ldr	r2, [pc, #508]	; (800761c <HAL_DMA_IRQHandler+0x6a0>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d036      	beq.n	8007492 <HAL_DMA_IRQHandler+0x516>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a7d      	ldr	r2, [pc, #500]	; (8007620 <HAL_DMA_IRQHandler+0x6a4>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d031      	beq.n	8007492 <HAL_DMA_IRQHandler+0x516>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a7c      	ldr	r2, [pc, #496]	; (8007624 <HAL_DMA_IRQHandler+0x6a8>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d02c      	beq.n	8007492 <HAL_DMA_IRQHandler+0x516>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a7a      	ldr	r2, [pc, #488]	; (8007628 <HAL_DMA_IRQHandler+0x6ac>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d027      	beq.n	8007492 <HAL_DMA_IRQHandler+0x516>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a79      	ldr	r2, [pc, #484]	; (800762c <HAL_DMA_IRQHandler+0x6b0>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d022      	beq.n	8007492 <HAL_DMA_IRQHandler+0x516>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a77      	ldr	r2, [pc, #476]	; (8007630 <HAL_DMA_IRQHandler+0x6b4>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d01d      	beq.n	8007492 <HAL_DMA_IRQHandler+0x516>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a76      	ldr	r2, [pc, #472]	; (8007634 <HAL_DMA_IRQHandler+0x6b8>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d018      	beq.n	8007492 <HAL_DMA_IRQHandler+0x516>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a74      	ldr	r2, [pc, #464]	; (8007638 <HAL_DMA_IRQHandler+0x6bc>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d013      	beq.n	8007492 <HAL_DMA_IRQHandler+0x516>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a73      	ldr	r2, [pc, #460]	; (800763c <HAL_DMA_IRQHandler+0x6c0>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d00e      	beq.n	8007492 <HAL_DMA_IRQHandler+0x516>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a71      	ldr	r2, [pc, #452]	; (8007640 <HAL_DMA_IRQHandler+0x6c4>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d009      	beq.n	8007492 <HAL_DMA_IRQHandler+0x516>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a70      	ldr	r2, [pc, #448]	; (8007644 <HAL_DMA_IRQHandler+0x6c8>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d004      	beq.n	8007492 <HAL_DMA_IRQHandler+0x516>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a6e      	ldr	r2, [pc, #440]	; (8007648 <HAL_DMA_IRQHandler+0x6cc>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d10a      	bne.n	80074a8 <HAL_DMA_IRQHandler+0x52c>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0308 	and.w	r3, r3, #8
 800749c:	2b00      	cmp	r3, #0
 800749e:	bf14      	ite	ne
 80074a0:	2301      	movne	r3, #1
 80074a2:	2300      	moveq	r3, #0
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	e009      	b.n	80074bc <HAL_DMA_IRQHandler+0x540>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0304 	and.w	r3, r3, #4
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	bf14      	ite	ne
 80074b6:	2301      	movne	r3, #1
 80074b8:	2300      	moveq	r3, #0
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d03e      	beq.n	800753e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c4:	f003 031f 	and.w	r3, r3, #31
 80074c8:	2210      	movs	r2, #16
 80074ca:	409a      	lsls	r2, r3
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d018      	beq.n	8007510 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d108      	bne.n	80074fe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d024      	beq.n	800753e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	4798      	blx	r3
 80074fc:	e01f      	b.n	800753e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007502:	2b00      	cmp	r3, #0
 8007504:	d01b      	beq.n	800753e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	4798      	blx	r3
 800750e:	e016      	b.n	800753e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800751a:	2b00      	cmp	r3, #0
 800751c:	d107      	bne.n	800752e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0208 	bic.w	r2, r2, #8
 800752c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007542:	f003 031f 	and.w	r3, r3, #31
 8007546:	2220      	movs	r2, #32
 8007548:	409a      	lsls	r2, r3
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	4013      	ands	r3, r2
 800754e:	2b00      	cmp	r3, #0
 8007550:	f000 8110 	beq.w	8007774 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a2c      	ldr	r2, [pc, #176]	; (800760c <HAL_DMA_IRQHandler+0x690>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d04a      	beq.n	80075f4 <HAL_DMA_IRQHandler+0x678>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a2b      	ldr	r2, [pc, #172]	; (8007610 <HAL_DMA_IRQHandler+0x694>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d045      	beq.n	80075f4 <HAL_DMA_IRQHandler+0x678>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a29      	ldr	r2, [pc, #164]	; (8007614 <HAL_DMA_IRQHandler+0x698>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d040      	beq.n	80075f4 <HAL_DMA_IRQHandler+0x678>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a28      	ldr	r2, [pc, #160]	; (8007618 <HAL_DMA_IRQHandler+0x69c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d03b      	beq.n	80075f4 <HAL_DMA_IRQHandler+0x678>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a26      	ldr	r2, [pc, #152]	; (800761c <HAL_DMA_IRQHandler+0x6a0>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d036      	beq.n	80075f4 <HAL_DMA_IRQHandler+0x678>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a25      	ldr	r2, [pc, #148]	; (8007620 <HAL_DMA_IRQHandler+0x6a4>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d031      	beq.n	80075f4 <HAL_DMA_IRQHandler+0x678>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a23      	ldr	r2, [pc, #140]	; (8007624 <HAL_DMA_IRQHandler+0x6a8>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d02c      	beq.n	80075f4 <HAL_DMA_IRQHandler+0x678>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a22      	ldr	r2, [pc, #136]	; (8007628 <HAL_DMA_IRQHandler+0x6ac>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d027      	beq.n	80075f4 <HAL_DMA_IRQHandler+0x678>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a20      	ldr	r2, [pc, #128]	; (800762c <HAL_DMA_IRQHandler+0x6b0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d022      	beq.n	80075f4 <HAL_DMA_IRQHandler+0x678>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a1f      	ldr	r2, [pc, #124]	; (8007630 <HAL_DMA_IRQHandler+0x6b4>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d01d      	beq.n	80075f4 <HAL_DMA_IRQHandler+0x678>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a1d      	ldr	r2, [pc, #116]	; (8007634 <HAL_DMA_IRQHandler+0x6b8>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d018      	beq.n	80075f4 <HAL_DMA_IRQHandler+0x678>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a1c      	ldr	r2, [pc, #112]	; (8007638 <HAL_DMA_IRQHandler+0x6bc>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d013      	beq.n	80075f4 <HAL_DMA_IRQHandler+0x678>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a1a      	ldr	r2, [pc, #104]	; (800763c <HAL_DMA_IRQHandler+0x6c0>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00e      	beq.n	80075f4 <HAL_DMA_IRQHandler+0x678>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a19      	ldr	r2, [pc, #100]	; (8007640 <HAL_DMA_IRQHandler+0x6c4>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d009      	beq.n	80075f4 <HAL_DMA_IRQHandler+0x678>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a17      	ldr	r2, [pc, #92]	; (8007644 <HAL_DMA_IRQHandler+0x6c8>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d004      	beq.n	80075f4 <HAL_DMA_IRQHandler+0x678>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a16      	ldr	r2, [pc, #88]	; (8007648 <HAL_DMA_IRQHandler+0x6cc>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d12b      	bne.n	800764c <HAL_DMA_IRQHandler+0x6d0>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0310 	and.w	r3, r3, #16
 80075fe:	2b00      	cmp	r3, #0
 8007600:	bf14      	ite	ne
 8007602:	2301      	movne	r3, #1
 8007604:	2300      	moveq	r3, #0
 8007606:	b2db      	uxtb	r3, r3
 8007608:	e02a      	b.n	8007660 <HAL_DMA_IRQHandler+0x6e4>
 800760a:	bf00      	nop
 800760c:	40020010 	.word	0x40020010
 8007610:	40020028 	.word	0x40020028
 8007614:	40020040 	.word	0x40020040
 8007618:	40020058 	.word	0x40020058
 800761c:	40020070 	.word	0x40020070
 8007620:	40020088 	.word	0x40020088
 8007624:	400200a0 	.word	0x400200a0
 8007628:	400200b8 	.word	0x400200b8
 800762c:	40020410 	.word	0x40020410
 8007630:	40020428 	.word	0x40020428
 8007634:	40020440 	.word	0x40020440
 8007638:	40020458 	.word	0x40020458
 800763c:	40020470 	.word	0x40020470
 8007640:	40020488 	.word	0x40020488
 8007644:	400204a0 	.word	0x400204a0
 8007648:	400204b8 	.word	0x400204b8
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b00      	cmp	r3, #0
 8007658:	bf14      	ite	ne
 800765a:	2301      	movne	r3, #1
 800765c:	2300      	moveq	r3, #0
 800765e:	b2db      	uxtb	r3, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 8087 	beq.w	8007774 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800766a:	f003 031f 	and.w	r3, r3, #31
 800766e:	2220      	movs	r2, #32
 8007670:	409a      	lsls	r2, r3
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b04      	cmp	r3, #4
 8007680:	d139      	bne.n	80076f6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 0216 	bic.w	r2, r2, #22
 8007690:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	695a      	ldr	r2, [r3, #20]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076a0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d103      	bne.n	80076b2 <HAL_DMA_IRQHandler+0x736>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d007      	beq.n	80076c2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 0208 	bic.w	r2, r2, #8
 80076c0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076c6:	f003 031f 	and.w	r3, r3, #31
 80076ca:	223f      	movs	r2, #63	; 0x3f
 80076cc:	409a      	lsls	r2, r3
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 834a 	beq.w	8007d80 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	4798      	blx	r3
          }
          return;
 80076f4:	e344      	b.n	8007d80 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d018      	beq.n	8007736 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d108      	bne.n	8007724 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007716:	2b00      	cmp	r3, #0
 8007718:	d02c      	beq.n	8007774 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	4798      	blx	r3
 8007722:	e027      	b.n	8007774 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007728:	2b00      	cmp	r3, #0
 800772a:	d023      	beq.n	8007774 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	4798      	blx	r3
 8007734:	e01e      	b.n	8007774 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10f      	bne.n	8007764 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0210 	bic.w	r2, r2, #16
 8007752:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 8306 	beq.w	8007d8a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 8088 	beq.w	800789c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2204      	movs	r2, #4
 8007790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a7a      	ldr	r2, [pc, #488]	; (8007984 <HAL_DMA_IRQHandler+0xa08>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d04a      	beq.n	8007834 <HAL_DMA_IRQHandler+0x8b8>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a79      	ldr	r2, [pc, #484]	; (8007988 <HAL_DMA_IRQHandler+0xa0c>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d045      	beq.n	8007834 <HAL_DMA_IRQHandler+0x8b8>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a77      	ldr	r2, [pc, #476]	; (800798c <HAL_DMA_IRQHandler+0xa10>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d040      	beq.n	8007834 <HAL_DMA_IRQHandler+0x8b8>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a76      	ldr	r2, [pc, #472]	; (8007990 <HAL_DMA_IRQHandler+0xa14>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d03b      	beq.n	8007834 <HAL_DMA_IRQHandler+0x8b8>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a74      	ldr	r2, [pc, #464]	; (8007994 <HAL_DMA_IRQHandler+0xa18>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d036      	beq.n	8007834 <HAL_DMA_IRQHandler+0x8b8>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a73      	ldr	r2, [pc, #460]	; (8007998 <HAL_DMA_IRQHandler+0xa1c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d031      	beq.n	8007834 <HAL_DMA_IRQHandler+0x8b8>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a71      	ldr	r2, [pc, #452]	; (800799c <HAL_DMA_IRQHandler+0xa20>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d02c      	beq.n	8007834 <HAL_DMA_IRQHandler+0x8b8>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a70      	ldr	r2, [pc, #448]	; (80079a0 <HAL_DMA_IRQHandler+0xa24>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d027      	beq.n	8007834 <HAL_DMA_IRQHandler+0x8b8>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a6e      	ldr	r2, [pc, #440]	; (80079a4 <HAL_DMA_IRQHandler+0xa28>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d022      	beq.n	8007834 <HAL_DMA_IRQHandler+0x8b8>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a6d      	ldr	r2, [pc, #436]	; (80079a8 <HAL_DMA_IRQHandler+0xa2c>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d01d      	beq.n	8007834 <HAL_DMA_IRQHandler+0x8b8>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a6b      	ldr	r2, [pc, #428]	; (80079ac <HAL_DMA_IRQHandler+0xa30>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d018      	beq.n	8007834 <HAL_DMA_IRQHandler+0x8b8>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a6a      	ldr	r2, [pc, #424]	; (80079b0 <HAL_DMA_IRQHandler+0xa34>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d013      	beq.n	8007834 <HAL_DMA_IRQHandler+0x8b8>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a68      	ldr	r2, [pc, #416]	; (80079b4 <HAL_DMA_IRQHandler+0xa38>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d00e      	beq.n	8007834 <HAL_DMA_IRQHandler+0x8b8>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a67      	ldr	r2, [pc, #412]	; (80079b8 <HAL_DMA_IRQHandler+0xa3c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d009      	beq.n	8007834 <HAL_DMA_IRQHandler+0x8b8>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a65      	ldr	r2, [pc, #404]	; (80079bc <HAL_DMA_IRQHandler+0xa40>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d004      	beq.n	8007834 <HAL_DMA_IRQHandler+0x8b8>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a64      	ldr	r2, [pc, #400]	; (80079c0 <HAL_DMA_IRQHandler+0xa44>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d108      	bne.n	8007846 <HAL_DMA_IRQHandler+0x8ca>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f022 0201 	bic.w	r2, r2, #1
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	e007      	b.n	8007856 <HAL_DMA_IRQHandler+0x8da>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f022 0201 	bic.w	r2, r2, #1
 8007854:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	3301      	adds	r3, #1
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785e:	429a      	cmp	r2, r3
 8007860:	d307      	bcc.n	8007872 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1f2      	bne.n	8007856 <HAL_DMA_IRQHandler+0x8da>
 8007870:	e000      	b.n	8007874 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007872:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	2b00      	cmp	r3, #0
 8007880:	d004      	beq.n	800788c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2203      	movs	r2, #3
 8007886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800788a:	e003      	b.n	8007894 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 8272 	beq.w	8007d8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	4798      	blx	r3
 80078ae:	e26c      	b.n	8007d8a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a43      	ldr	r2, [pc, #268]	; (80079c4 <HAL_DMA_IRQHandler+0xa48>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d022      	beq.n	8007900 <HAL_DMA_IRQHandler+0x984>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a42      	ldr	r2, [pc, #264]	; (80079c8 <HAL_DMA_IRQHandler+0xa4c>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d01d      	beq.n	8007900 <HAL_DMA_IRQHandler+0x984>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a40      	ldr	r2, [pc, #256]	; (80079cc <HAL_DMA_IRQHandler+0xa50>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d018      	beq.n	8007900 <HAL_DMA_IRQHandler+0x984>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a3f      	ldr	r2, [pc, #252]	; (80079d0 <HAL_DMA_IRQHandler+0xa54>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d013      	beq.n	8007900 <HAL_DMA_IRQHandler+0x984>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a3d      	ldr	r2, [pc, #244]	; (80079d4 <HAL_DMA_IRQHandler+0xa58>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00e      	beq.n	8007900 <HAL_DMA_IRQHandler+0x984>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a3c      	ldr	r2, [pc, #240]	; (80079d8 <HAL_DMA_IRQHandler+0xa5c>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d009      	beq.n	8007900 <HAL_DMA_IRQHandler+0x984>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a3a      	ldr	r2, [pc, #232]	; (80079dc <HAL_DMA_IRQHandler+0xa60>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d004      	beq.n	8007900 <HAL_DMA_IRQHandler+0x984>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a39      	ldr	r2, [pc, #228]	; (80079e0 <HAL_DMA_IRQHandler+0xa64>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d101      	bne.n	8007904 <HAL_DMA_IRQHandler+0x988>
 8007900:	2301      	movs	r3, #1
 8007902:	e000      	b.n	8007906 <HAL_DMA_IRQHandler+0x98a>
 8007904:	2300      	movs	r3, #0
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 823f 	beq.w	8007d8a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007918:	f003 031f 	and.w	r3, r3, #31
 800791c:	2204      	movs	r2, #4
 800791e:	409a      	lsls	r2, r3
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	4013      	ands	r3, r2
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 80cd 	beq.w	8007ac4 <HAL_DMA_IRQHandler+0xb48>
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 80c7 	beq.w	8007ac4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800793a:	f003 031f 	and.w	r3, r3, #31
 800793e:	2204      	movs	r2, #4
 8007940:	409a      	lsls	r2, r3
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d049      	beq.n	80079e4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d109      	bne.n	800796e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 8210 	beq.w	8007d84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800796c:	e20a      	b.n	8007d84 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007972:	2b00      	cmp	r3, #0
 8007974:	f000 8206 	beq.w	8007d84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007980:	e200      	b.n	8007d84 <HAL_DMA_IRQHandler+0xe08>
 8007982:	bf00      	nop
 8007984:	40020010 	.word	0x40020010
 8007988:	40020028 	.word	0x40020028
 800798c:	40020040 	.word	0x40020040
 8007990:	40020058 	.word	0x40020058
 8007994:	40020070 	.word	0x40020070
 8007998:	40020088 	.word	0x40020088
 800799c:	400200a0 	.word	0x400200a0
 80079a0:	400200b8 	.word	0x400200b8
 80079a4:	40020410 	.word	0x40020410
 80079a8:	40020428 	.word	0x40020428
 80079ac:	40020440 	.word	0x40020440
 80079b0:	40020458 	.word	0x40020458
 80079b4:	40020470 	.word	0x40020470
 80079b8:	40020488 	.word	0x40020488
 80079bc:	400204a0 	.word	0x400204a0
 80079c0:	400204b8 	.word	0x400204b8
 80079c4:	58025408 	.word	0x58025408
 80079c8:	5802541c 	.word	0x5802541c
 80079cc:	58025430 	.word	0x58025430
 80079d0:	58025444 	.word	0x58025444
 80079d4:	58025458 	.word	0x58025458
 80079d8:	5802546c 	.word	0x5802546c
 80079dc:	58025480 	.word	0x58025480
 80079e0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f003 0320 	and.w	r3, r3, #32
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d160      	bne.n	8007ab0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a7f      	ldr	r2, [pc, #508]	; (8007bf0 <HAL_DMA_IRQHandler+0xc74>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d04a      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xb12>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a7d      	ldr	r2, [pc, #500]	; (8007bf4 <HAL_DMA_IRQHandler+0xc78>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d045      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xb12>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a7c      	ldr	r2, [pc, #496]	; (8007bf8 <HAL_DMA_IRQHandler+0xc7c>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d040      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xb12>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a7a      	ldr	r2, [pc, #488]	; (8007bfc <HAL_DMA_IRQHandler+0xc80>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d03b      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xb12>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a79      	ldr	r2, [pc, #484]	; (8007c00 <HAL_DMA_IRQHandler+0xc84>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d036      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xb12>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a77      	ldr	r2, [pc, #476]	; (8007c04 <HAL_DMA_IRQHandler+0xc88>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d031      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xb12>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a76      	ldr	r2, [pc, #472]	; (8007c08 <HAL_DMA_IRQHandler+0xc8c>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d02c      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xb12>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a74      	ldr	r2, [pc, #464]	; (8007c0c <HAL_DMA_IRQHandler+0xc90>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d027      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xb12>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a73      	ldr	r2, [pc, #460]	; (8007c10 <HAL_DMA_IRQHandler+0xc94>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d022      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xb12>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a71      	ldr	r2, [pc, #452]	; (8007c14 <HAL_DMA_IRQHandler+0xc98>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d01d      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xb12>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a70      	ldr	r2, [pc, #448]	; (8007c18 <HAL_DMA_IRQHandler+0xc9c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d018      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xb12>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a6e      	ldr	r2, [pc, #440]	; (8007c1c <HAL_DMA_IRQHandler+0xca0>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d013      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xb12>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a6d      	ldr	r2, [pc, #436]	; (8007c20 <HAL_DMA_IRQHandler+0xca4>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d00e      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xb12>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a6b      	ldr	r2, [pc, #428]	; (8007c24 <HAL_DMA_IRQHandler+0xca8>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d009      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xb12>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a6a      	ldr	r2, [pc, #424]	; (8007c28 <HAL_DMA_IRQHandler+0xcac>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d004      	beq.n	8007a8e <HAL_DMA_IRQHandler+0xb12>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a68      	ldr	r2, [pc, #416]	; (8007c2c <HAL_DMA_IRQHandler+0xcb0>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d108      	bne.n	8007aa0 <HAL_DMA_IRQHandler+0xb24>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 0208 	bic.w	r2, r2, #8
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	e007      	b.n	8007ab0 <HAL_DMA_IRQHandler+0xb34>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 0204 	bic.w	r2, r2, #4
 8007aae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 8165 	beq.w	8007d84 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ac2:	e15f      	b.n	8007d84 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ac8:	f003 031f 	and.w	r3, r3, #31
 8007acc:	2202      	movs	r2, #2
 8007ace:	409a      	lsls	r2, r3
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 80c5 	beq.w	8007c64 <HAL_DMA_IRQHandler+0xce8>
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	f003 0302 	and.w	r3, r3, #2
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 80bf 	beq.w	8007c64 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aea:	f003 031f 	and.w	r3, r3, #31
 8007aee:	2202      	movs	r2, #2
 8007af0:	409a      	lsls	r2, r3
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d018      	beq.n	8007b32 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d109      	bne.n	8007b1e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 813a 	beq.w	8007d88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b1c:	e134      	b.n	8007d88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 8130 	beq.w	8007d88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b30:	e12a      	b.n	8007d88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f003 0320 	and.w	r3, r3, #32
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f040 8089 	bne.w	8007c50 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a2b      	ldr	r2, [pc, #172]	; (8007bf0 <HAL_DMA_IRQHandler+0xc74>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d04a      	beq.n	8007bde <HAL_DMA_IRQHandler+0xc62>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a29      	ldr	r2, [pc, #164]	; (8007bf4 <HAL_DMA_IRQHandler+0xc78>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d045      	beq.n	8007bde <HAL_DMA_IRQHandler+0xc62>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a28      	ldr	r2, [pc, #160]	; (8007bf8 <HAL_DMA_IRQHandler+0xc7c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d040      	beq.n	8007bde <HAL_DMA_IRQHandler+0xc62>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a26      	ldr	r2, [pc, #152]	; (8007bfc <HAL_DMA_IRQHandler+0xc80>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d03b      	beq.n	8007bde <HAL_DMA_IRQHandler+0xc62>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a25      	ldr	r2, [pc, #148]	; (8007c00 <HAL_DMA_IRQHandler+0xc84>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d036      	beq.n	8007bde <HAL_DMA_IRQHandler+0xc62>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a23      	ldr	r2, [pc, #140]	; (8007c04 <HAL_DMA_IRQHandler+0xc88>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d031      	beq.n	8007bde <HAL_DMA_IRQHandler+0xc62>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a22      	ldr	r2, [pc, #136]	; (8007c08 <HAL_DMA_IRQHandler+0xc8c>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d02c      	beq.n	8007bde <HAL_DMA_IRQHandler+0xc62>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a20      	ldr	r2, [pc, #128]	; (8007c0c <HAL_DMA_IRQHandler+0xc90>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d027      	beq.n	8007bde <HAL_DMA_IRQHandler+0xc62>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a1f      	ldr	r2, [pc, #124]	; (8007c10 <HAL_DMA_IRQHandler+0xc94>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d022      	beq.n	8007bde <HAL_DMA_IRQHandler+0xc62>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a1d      	ldr	r2, [pc, #116]	; (8007c14 <HAL_DMA_IRQHandler+0xc98>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d01d      	beq.n	8007bde <HAL_DMA_IRQHandler+0xc62>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a1c      	ldr	r2, [pc, #112]	; (8007c18 <HAL_DMA_IRQHandler+0xc9c>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d018      	beq.n	8007bde <HAL_DMA_IRQHandler+0xc62>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a1a      	ldr	r2, [pc, #104]	; (8007c1c <HAL_DMA_IRQHandler+0xca0>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d013      	beq.n	8007bde <HAL_DMA_IRQHandler+0xc62>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a19      	ldr	r2, [pc, #100]	; (8007c20 <HAL_DMA_IRQHandler+0xca4>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d00e      	beq.n	8007bde <HAL_DMA_IRQHandler+0xc62>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a17      	ldr	r2, [pc, #92]	; (8007c24 <HAL_DMA_IRQHandler+0xca8>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d009      	beq.n	8007bde <HAL_DMA_IRQHandler+0xc62>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a16      	ldr	r2, [pc, #88]	; (8007c28 <HAL_DMA_IRQHandler+0xcac>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d004      	beq.n	8007bde <HAL_DMA_IRQHandler+0xc62>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a14      	ldr	r2, [pc, #80]	; (8007c2c <HAL_DMA_IRQHandler+0xcb0>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d128      	bne.n	8007c30 <HAL_DMA_IRQHandler+0xcb4>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 0214 	bic.w	r2, r2, #20
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	e027      	b.n	8007c40 <HAL_DMA_IRQHandler+0xcc4>
 8007bf0:	40020010 	.word	0x40020010
 8007bf4:	40020028 	.word	0x40020028
 8007bf8:	40020040 	.word	0x40020040
 8007bfc:	40020058 	.word	0x40020058
 8007c00:	40020070 	.word	0x40020070
 8007c04:	40020088 	.word	0x40020088
 8007c08:	400200a0 	.word	0x400200a0
 8007c0c:	400200b8 	.word	0x400200b8
 8007c10:	40020410 	.word	0x40020410
 8007c14:	40020428 	.word	0x40020428
 8007c18:	40020440 	.word	0x40020440
 8007c1c:	40020458 	.word	0x40020458
 8007c20:	40020470 	.word	0x40020470
 8007c24:	40020488 	.word	0x40020488
 8007c28:	400204a0 	.word	0x400204a0
 8007c2c:	400204b8 	.word	0x400204b8
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f022 020a 	bic.w	r2, r2, #10
 8007c3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 8097 	beq.w	8007d88 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c62:	e091      	b.n	8007d88 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c68:	f003 031f 	and.w	r3, r3, #31
 8007c6c:	2208      	movs	r2, #8
 8007c6e:	409a      	lsls	r2, r3
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	4013      	ands	r3, r2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 8088 	beq.w	8007d8a <HAL_DMA_IRQHandler+0xe0e>
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	f003 0308 	and.w	r3, r3, #8
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 8082 	beq.w	8007d8a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a41      	ldr	r2, [pc, #260]	; (8007d90 <HAL_DMA_IRQHandler+0xe14>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d04a      	beq.n	8007d26 <HAL_DMA_IRQHandler+0xdaa>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a3f      	ldr	r2, [pc, #252]	; (8007d94 <HAL_DMA_IRQHandler+0xe18>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d045      	beq.n	8007d26 <HAL_DMA_IRQHandler+0xdaa>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a3e      	ldr	r2, [pc, #248]	; (8007d98 <HAL_DMA_IRQHandler+0xe1c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d040      	beq.n	8007d26 <HAL_DMA_IRQHandler+0xdaa>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a3c      	ldr	r2, [pc, #240]	; (8007d9c <HAL_DMA_IRQHandler+0xe20>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d03b      	beq.n	8007d26 <HAL_DMA_IRQHandler+0xdaa>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a3b      	ldr	r2, [pc, #236]	; (8007da0 <HAL_DMA_IRQHandler+0xe24>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d036      	beq.n	8007d26 <HAL_DMA_IRQHandler+0xdaa>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a39      	ldr	r2, [pc, #228]	; (8007da4 <HAL_DMA_IRQHandler+0xe28>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d031      	beq.n	8007d26 <HAL_DMA_IRQHandler+0xdaa>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a38      	ldr	r2, [pc, #224]	; (8007da8 <HAL_DMA_IRQHandler+0xe2c>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d02c      	beq.n	8007d26 <HAL_DMA_IRQHandler+0xdaa>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a36      	ldr	r2, [pc, #216]	; (8007dac <HAL_DMA_IRQHandler+0xe30>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d027      	beq.n	8007d26 <HAL_DMA_IRQHandler+0xdaa>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a35      	ldr	r2, [pc, #212]	; (8007db0 <HAL_DMA_IRQHandler+0xe34>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d022      	beq.n	8007d26 <HAL_DMA_IRQHandler+0xdaa>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a33      	ldr	r2, [pc, #204]	; (8007db4 <HAL_DMA_IRQHandler+0xe38>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d01d      	beq.n	8007d26 <HAL_DMA_IRQHandler+0xdaa>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a32      	ldr	r2, [pc, #200]	; (8007db8 <HAL_DMA_IRQHandler+0xe3c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d018      	beq.n	8007d26 <HAL_DMA_IRQHandler+0xdaa>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a30      	ldr	r2, [pc, #192]	; (8007dbc <HAL_DMA_IRQHandler+0xe40>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d013      	beq.n	8007d26 <HAL_DMA_IRQHandler+0xdaa>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a2f      	ldr	r2, [pc, #188]	; (8007dc0 <HAL_DMA_IRQHandler+0xe44>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d00e      	beq.n	8007d26 <HAL_DMA_IRQHandler+0xdaa>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a2d      	ldr	r2, [pc, #180]	; (8007dc4 <HAL_DMA_IRQHandler+0xe48>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d009      	beq.n	8007d26 <HAL_DMA_IRQHandler+0xdaa>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a2c      	ldr	r2, [pc, #176]	; (8007dc8 <HAL_DMA_IRQHandler+0xe4c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d004      	beq.n	8007d26 <HAL_DMA_IRQHandler+0xdaa>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a2a      	ldr	r2, [pc, #168]	; (8007dcc <HAL_DMA_IRQHandler+0xe50>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d108      	bne.n	8007d38 <HAL_DMA_IRQHandler+0xdbc>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f022 021c 	bic.w	r2, r2, #28
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	e007      	b.n	8007d48 <HAL_DMA_IRQHandler+0xdcc>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 020e 	bic.w	r2, r2, #14
 8007d46:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d4c:	f003 031f 	and.w	r3, r3, #31
 8007d50:	2201      	movs	r2, #1
 8007d52:	409a      	lsls	r2, r3
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d009      	beq.n	8007d8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	4798      	blx	r3
 8007d7e:	e004      	b.n	8007d8a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007d80:	bf00      	nop
 8007d82:	e002      	b.n	8007d8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d84:	bf00      	nop
 8007d86:	e000      	b.n	8007d8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d88:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007d8a:	3728      	adds	r7, #40	; 0x28
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	40020010 	.word	0x40020010
 8007d94:	40020028 	.word	0x40020028
 8007d98:	40020040 	.word	0x40020040
 8007d9c:	40020058 	.word	0x40020058
 8007da0:	40020070 	.word	0x40020070
 8007da4:	40020088 	.word	0x40020088
 8007da8:	400200a0 	.word	0x400200a0
 8007dac:	400200b8 	.word	0x400200b8
 8007db0:	40020410 	.word	0x40020410
 8007db4:	40020428 	.word	0x40020428
 8007db8:	40020440 	.word	0x40020440
 8007dbc:	40020458 	.word	0x40020458
 8007dc0:	40020470 	.word	0x40020470
 8007dc4:	40020488 	.word	0x40020488
 8007dc8:	400204a0 	.word	0x400204a0
 8007dcc:	400204b8 	.word	0x400204b8

08007dd0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a7f      	ldr	r2, [pc, #508]	; (8007fec <DMA_SetConfig+0x21c>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d072      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a7d      	ldr	r2, [pc, #500]	; (8007ff0 <DMA_SetConfig+0x220>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d06d      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a7c      	ldr	r2, [pc, #496]	; (8007ff4 <DMA_SetConfig+0x224>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d068      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a7a      	ldr	r2, [pc, #488]	; (8007ff8 <DMA_SetConfig+0x228>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d063      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a79      	ldr	r2, [pc, #484]	; (8007ffc <DMA_SetConfig+0x22c>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d05e      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a77      	ldr	r2, [pc, #476]	; (8008000 <DMA_SetConfig+0x230>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d059      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a76      	ldr	r2, [pc, #472]	; (8008004 <DMA_SetConfig+0x234>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d054      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a74      	ldr	r2, [pc, #464]	; (8008008 <DMA_SetConfig+0x238>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d04f      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a73      	ldr	r2, [pc, #460]	; (800800c <DMA_SetConfig+0x23c>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d04a      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a71      	ldr	r2, [pc, #452]	; (8008010 <DMA_SetConfig+0x240>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d045      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a70      	ldr	r2, [pc, #448]	; (8008014 <DMA_SetConfig+0x244>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d040      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a6e      	ldr	r2, [pc, #440]	; (8008018 <DMA_SetConfig+0x248>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d03b      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a6d      	ldr	r2, [pc, #436]	; (800801c <DMA_SetConfig+0x24c>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d036      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a6b      	ldr	r2, [pc, #428]	; (8008020 <DMA_SetConfig+0x250>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d031      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a6a      	ldr	r2, [pc, #424]	; (8008024 <DMA_SetConfig+0x254>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d02c      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a68      	ldr	r2, [pc, #416]	; (8008028 <DMA_SetConfig+0x258>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d027      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a67      	ldr	r2, [pc, #412]	; (800802c <DMA_SetConfig+0x25c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d022      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a65      	ldr	r2, [pc, #404]	; (8008030 <DMA_SetConfig+0x260>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d01d      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a64      	ldr	r2, [pc, #400]	; (8008034 <DMA_SetConfig+0x264>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d018      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a62      	ldr	r2, [pc, #392]	; (8008038 <DMA_SetConfig+0x268>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d013      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a61      	ldr	r2, [pc, #388]	; (800803c <DMA_SetConfig+0x26c>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d00e      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a5f      	ldr	r2, [pc, #380]	; (8008040 <DMA_SetConfig+0x270>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d009      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a5e      	ldr	r2, [pc, #376]	; (8008044 <DMA_SetConfig+0x274>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d004      	beq.n	8007eda <DMA_SetConfig+0x10a>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a5c      	ldr	r2, [pc, #368]	; (8008048 <DMA_SetConfig+0x278>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d101      	bne.n	8007ede <DMA_SetConfig+0x10e>
 8007eda:	2301      	movs	r3, #1
 8007edc:	e000      	b.n	8007ee0 <DMA_SetConfig+0x110>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00d      	beq.n	8007f00 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007eec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d004      	beq.n	8007f00 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007efe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a39      	ldr	r2, [pc, #228]	; (8007fec <DMA_SetConfig+0x21c>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d04a      	beq.n	8007fa0 <DMA_SetConfig+0x1d0>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a38      	ldr	r2, [pc, #224]	; (8007ff0 <DMA_SetConfig+0x220>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d045      	beq.n	8007fa0 <DMA_SetConfig+0x1d0>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a36      	ldr	r2, [pc, #216]	; (8007ff4 <DMA_SetConfig+0x224>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d040      	beq.n	8007fa0 <DMA_SetConfig+0x1d0>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a35      	ldr	r2, [pc, #212]	; (8007ff8 <DMA_SetConfig+0x228>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d03b      	beq.n	8007fa0 <DMA_SetConfig+0x1d0>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a33      	ldr	r2, [pc, #204]	; (8007ffc <DMA_SetConfig+0x22c>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d036      	beq.n	8007fa0 <DMA_SetConfig+0x1d0>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a32      	ldr	r2, [pc, #200]	; (8008000 <DMA_SetConfig+0x230>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d031      	beq.n	8007fa0 <DMA_SetConfig+0x1d0>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a30      	ldr	r2, [pc, #192]	; (8008004 <DMA_SetConfig+0x234>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d02c      	beq.n	8007fa0 <DMA_SetConfig+0x1d0>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a2f      	ldr	r2, [pc, #188]	; (8008008 <DMA_SetConfig+0x238>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d027      	beq.n	8007fa0 <DMA_SetConfig+0x1d0>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a2d      	ldr	r2, [pc, #180]	; (800800c <DMA_SetConfig+0x23c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d022      	beq.n	8007fa0 <DMA_SetConfig+0x1d0>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a2c      	ldr	r2, [pc, #176]	; (8008010 <DMA_SetConfig+0x240>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d01d      	beq.n	8007fa0 <DMA_SetConfig+0x1d0>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a2a      	ldr	r2, [pc, #168]	; (8008014 <DMA_SetConfig+0x244>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d018      	beq.n	8007fa0 <DMA_SetConfig+0x1d0>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a29      	ldr	r2, [pc, #164]	; (8008018 <DMA_SetConfig+0x248>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d013      	beq.n	8007fa0 <DMA_SetConfig+0x1d0>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a27      	ldr	r2, [pc, #156]	; (800801c <DMA_SetConfig+0x24c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d00e      	beq.n	8007fa0 <DMA_SetConfig+0x1d0>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a26      	ldr	r2, [pc, #152]	; (8008020 <DMA_SetConfig+0x250>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d009      	beq.n	8007fa0 <DMA_SetConfig+0x1d0>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a24      	ldr	r2, [pc, #144]	; (8008024 <DMA_SetConfig+0x254>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d004      	beq.n	8007fa0 <DMA_SetConfig+0x1d0>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a23      	ldr	r2, [pc, #140]	; (8008028 <DMA_SetConfig+0x258>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d101      	bne.n	8007fa4 <DMA_SetConfig+0x1d4>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e000      	b.n	8007fa6 <DMA_SetConfig+0x1d6>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d059      	beq.n	800805e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fae:	f003 031f 	and.w	r3, r3, #31
 8007fb2:	223f      	movs	r2, #63	; 0x3f
 8007fb4:	409a      	lsls	r2, r3
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007fc8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	2b40      	cmp	r3, #64	; 0x40
 8007fd8:	d138      	bne.n	800804c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007fea:	e086      	b.n	80080fa <DMA_SetConfig+0x32a>
 8007fec:	40020010 	.word	0x40020010
 8007ff0:	40020028 	.word	0x40020028
 8007ff4:	40020040 	.word	0x40020040
 8007ff8:	40020058 	.word	0x40020058
 8007ffc:	40020070 	.word	0x40020070
 8008000:	40020088 	.word	0x40020088
 8008004:	400200a0 	.word	0x400200a0
 8008008:	400200b8 	.word	0x400200b8
 800800c:	40020410 	.word	0x40020410
 8008010:	40020428 	.word	0x40020428
 8008014:	40020440 	.word	0x40020440
 8008018:	40020458 	.word	0x40020458
 800801c:	40020470 	.word	0x40020470
 8008020:	40020488 	.word	0x40020488
 8008024:	400204a0 	.word	0x400204a0
 8008028:	400204b8 	.word	0x400204b8
 800802c:	58025408 	.word	0x58025408
 8008030:	5802541c 	.word	0x5802541c
 8008034:	58025430 	.word	0x58025430
 8008038:	58025444 	.word	0x58025444
 800803c:	58025458 	.word	0x58025458
 8008040:	5802546c 	.word	0x5802546c
 8008044:	58025480 	.word	0x58025480
 8008048:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	60da      	str	r2, [r3, #12]
}
 800805c:	e04d      	b.n	80080fa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a29      	ldr	r2, [pc, #164]	; (8008108 <DMA_SetConfig+0x338>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d022      	beq.n	80080ae <DMA_SetConfig+0x2de>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a27      	ldr	r2, [pc, #156]	; (800810c <DMA_SetConfig+0x33c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d01d      	beq.n	80080ae <DMA_SetConfig+0x2de>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a26      	ldr	r2, [pc, #152]	; (8008110 <DMA_SetConfig+0x340>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d018      	beq.n	80080ae <DMA_SetConfig+0x2de>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a24      	ldr	r2, [pc, #144]	; (8008114 <DMA_SetConfig+0x344>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d013      	beq.n	80080ae <DMA_SetConfig+0x2de>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a23      	ldr	r2, [pc, #140]	; (8008118 <DMA_SetConfig+0x348>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d00e      	beq.n	80080ae <DMA_SetConfig+0x2de>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a21      	ldr	r2, [pc, #132]	; (800811c <DMA_SetConfig+0x34c>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d009      	beq.n	80080ae <DMA_SetConfig+0x2de>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a20      	ldr	r2, [pc, #128]	; (8008120 <DMA_SetConfig+0x350>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d004      	beq.n	80080ae <DMA_SetConfig+0x2de>
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a1e      	ldr	r2, [pc, #120]	; (8008124 <DMA_SetConfig+0x354>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d101      	bne.n	80080b2 <DMA_SetConfig+0x2e2>
 80080ae:	2301      	movs	r3, #1
 80080b0:	e000      	b.n	80080b4 <DMA_SetConfig+0x2e4>
 80080b2:	2300      	movs	r3, #0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d020      	beq.n	80080fa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080bc:	f003 031f 	and.w	r3, r3, #31
 80080c0:	2201      	movs	r2, #1
 80080c2:	409a      	lsls	r2, r3
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	683a      	ldr	r2, [r7, #0]
 80080ce:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	2b40      	cmp	r3, #64	; 0x40
 80080d6:	d108      	bne.n	80080ea <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	60da      	str	r2, [r3, #12]
}
 80080e8:	e007      	b.n	80080fa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	60da      	str	r2, [r3, #12]
}
 80080fa:	bf00      	nop
 80080fc:	371c      	adds	r7, #28
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	58025408 	.word	0x58025408
 800810c:	5802541c 	.word	0x5802541c
 8008110:	58025430 	.word	0x58025430
 8008114:	58025444 	.word	0x58025444
 8008118:	58025458 	.word	0x58025458
 800811c:	5802546c 	.word	0x5802546c
 8008120:	58025480 	.word	0x58025480
 8008124:	58025494 	.word	0x58025494

08008128 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a42      	ldr	r2, [pc, #264]	; (8008240 <DMA_CalcBaseAndBitshift+0x118>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d04a      	beq.n	80081d0 <DMA_CalcBaseAndBitshift+0xa8>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a41      	ldr	r2, [pc, #260]	; (8008244 <DMA_CalcBaseAndBitshift+0x11c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d045      	beq.n	80081d0 <DMA_CalcBaseAndBitshift+0xa8>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a3f      	ldr	r2, [pc, #252]	; (8008248 <DMA_CalcBaseAndBitshift+0x120>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d040      	beq.n	80081d0 <DMA_CalcBaseAndBitshift+0xa8>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a3e      	ldr	r2, [pc, #248]	; (800824c <DMA_CalcBaseAndBitshift+0x124>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d03b      	beq.n	80081d0 <DMA_CalcBaseAndBitshift+0xa8>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a3c      	ldr	r2, [pc, #240]	; (8008250 <DMA_CalcBaseAndBitshift+0x128>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d036      	beq.n	80081d0 <DMA_CalcBaseAndBitshift+0xa8>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a3b      	ldr	r2, [pc, #236]	; (8008254 <DMA_CalcBaseAndBitshift+0x12c>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d031      	beq.n	80081d0 <DMA_CalcBaseAndBitshift+0xa8>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a39      	ldr	r2, [pc, #228]	; (8008258 <DMA_CalcBaseAndBitshift+0x130>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d02c      	beq.n	80081d0 <DMA_CalcBaseAndBitshift+0xa8>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a38      	ldr	r2, [pc, #224]	; (800825c <DMA_CalcBaseAndBitshift+0x134>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d027      	beq.n	80081d0 <DMA_CalcBaseAndBitshift+0xa8>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a36      	ldr	r2, [pc, #216]	; (8008260 <DMA_CalcBaseAndBitshift+0x138>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d022      	beq.n	80081d0 <DMA_CalcBaseAndBitshift+0xa8>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a35      	ldr	r2, [pc, #212]	; (8008264 <DMA_CalcBaseAndBitshift+0x13c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d01d      	beq.n	80081d0 <DMA_CalcBaseAndBitshift+0xa8>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a33      	ldr	r2, [pc, #204]	; (8008268 <DMA_CalcBaseAndBitshift+0x140>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d018      	beq.n	80081d0 <DMA_CalcBaseAndBitshift+0xa8>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a32      	ldr	r2, [pc, #200]	; (800826c <DMA_CalcBaseAndBitshift+0x144>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d013      	beq.n	80081d0 <DMA_CalcBaseAndBitshift+0xa8>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a30      	ldr	r2, [pc, #192]	; (8008270 <DMA_CalcBaseAndBitshift+0x148>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d00e      	beq.n	80081d0 <DMA_CalcBaseAndBitshift+0xa8>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a2f      	ldr	r2, [pc, #188]	; (8008274 <DMA_CalcBaseAndBitshift+0x14c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d009      	beq.n	80081d0 <DMA_CalcBaseAndBitshift+0xa8>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a2d      	ldr	r2, [pc, #180]	; (8008278 <DMA_CalcBaseAndBitshift+0x150>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d004      	beq.n	80081d0 <DMA_CalcBaseAndBitshift+0xa8>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a2c      	ldr	r2, [pc, #176]	; (800827c <DMA_CalcBaseAndBitshift+0x154>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d101      	bne.n	80081d4 <DMA_CalcBaseAndBitshift+0xac>
 80081d0:	2301      	movs	r3, #1
 80081d2:	e000      	b.n	80081d6 <DMA_CalcBaseAndBitshift+0xae>
 80081d4:	2300      	movs	r3, #0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d024      	beq.n	8008224 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	3b10      	subs	r3, #16
 80081e2:	4a27      	ldr	r2, [pc, #156]	; (8008280 <DMA_CalcBaseAndBitshift+0x158>)
 80081e4:	fba2 2303 	umull	r2, r3, r2, r3
 80081e8:	091b      	lsrs	r3, r3, #4
 80081ea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f003 0307 	and.w	r3, r3, #7
 80081f2:	4a24      	ldr	r2, [pc, #144]	; (8008284 <DMA_CalcBaseAndBitshift+0x15c>)
 80081f4:	5cd3      	ldrb	r3, [r2, r3]
 80081f6:	461a      	mov	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d908      	bls.n	8008214 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	4b1f      	ldr	r3, [pc, #124]	; (8008288 <DMA_CalcBaseAndBitshift+0x160>)
 800820a:	4013      	ands	r3, r2
 800820c:	1d1a      	adds	r2, r3, #4
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	659a      	str	r2, [r3, #88]	; 0x58
 8008212:	e00d      	b.n	8008230 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	461a      	mov	r2, r3
 800821a:	4b1b      	ldr	r3, [pc, #108]	; (8008288 <DMA_CalcBaseAndBitshift+0x160>)
 800821c:	4013      	ands	r3, r2
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	6593      	str	r3, [r2, #88]	; 0x58
 8008222:	e005      	b.n	8008230 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008234:	4618      	mov	r0, r3
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr
 8008240:	40020010 	.word	0x40020010
 8008244:	40020028 	.word	0x40020028
 8008248:	40020040 	.word	0x40020040
 800824c:	40020058 	.word	0x40020058
 8008250:	40020070 	.word	0x40020070
 8008254:	40020088 	.word	0x40020088
 8008258:	400200a0 	.word	0x400200a0
 800825c:	400200b8 	.word	0x400200b8
 8008260:	40020410 	.word	0x40020410
 8008264:	40020428 	.word	0x40020428
 8008268:	40020440 	.word	0x40020440
 800826c:	40020458 	.word	0x40020458
 8008270:	40020470 	.word	0x40020470
 8008274:	40020488 	.word	0x40020488
 8008278:	400204a0 	.word	0x400204a0
 800827c:	400204b8 	.word	0x400204b8
 8008280:	aaaaaaab 	.word	0xaaaaaaab
 8008284:	0800f828 	.word	0x0800f828
 8008288:	fffffc00 	.word	0xfffffc00

0800828c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d120      	bne.n	80082e2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	d858      	bhi.n	800835a <DMA_CheckFifoParam+0xce>
 80082a8:	a201      	add	r2, pc, #4	; (adr r2, 80082b0 <DMA_CheckFifoParam+0x24>)
 80082aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ae:	bf00      	nop
 80082b0:	080082c1 	.word	0x080082c1
 80082b4:	080082d3 	.word	0x080082d3
 80082b8:	080082c1 	.word	0x080082c1
 80082bc:	0800835b 	.word	0x0800835b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d048      	beq.n	800835e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082d0:	e045      	b.n	800835e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80082da:	d142      	bne.n	8008362 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082e0:	e03f      	b.n	8008362 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ea:	d123      	bne.n	8008334 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f0:	2b03      	cmp	r3, #3
 80082f2:	d838      	bhi.n	8008366 <DMA_CheckFifoParam+0xda>
 80082f4:	a201      	add	r2, pc, #4	; (adr r2, 80082fc <DMA_CheckFifoParam+0x70>)
 80082f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fa:	bf00      	nop
 80082fc:	0800830d 	.word	0x0800830d
 8008300:	08008313 	.word	0x08008313
 8008304:	0800830d 	.word	0x0800830d
 8008308:	08008325 	.word	0x08008325
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
        break;
 8008310:	e030      	b.n	8008374 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d025      	beq.n	800836a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008322:	e022      	b.n	800836a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008328:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800832c:	d11f      	bne.n	800836e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008332:	e01c      	b.n	800836e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008338:	2b02      	cmp	r3, #2
 800833a:	d902      	bls.n	8008342 <DMA_CheckFifoParam+0xb6>
 800833c:	2b03      	cmp	r3, #3
 800833e:	d003      	beq.n	8008348 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008340:	e018      	b.n	8008374 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	73fb      	strb	r3, [r7, #15]
        break;
 8008346:	e015      	b.n	8008374 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00e      	beq.n	8008372 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	73fb      	strb	r3, [r7, #15]
    break;
 8008358:	e00b      	b.n	8008372 <DMA_CheckFifoParam+0xe6>
        break;
 800835a:	bf00      	nop
 800835c:	e00a      	b.n	8008374 <DMA_CheckFifoParam+0xe8>
        break;
 800835e:	bf00      	nop
 8008360:	e008      	b.n	8008374 <DMA_CheckFifoParam+0xe8>
        break;
 8008362:	bf00      	nop
 8008364:	e006      	b.n	8008374 <DMA_CheckFifoParam+0xe8>
        break;
 8008366:	bf00      	nop
 8008368:	e004      	b.n	8008374 <DMA_CheckFifoParam+0xe8>
        break;
 800836a:	bf00      	nop
 800836c:	e002      	b.n	8008374 <DMA_CheckFifoParam+0xe8>
        break;
 800836e:	bf00      	nop
 8008370:	e000      	b.n	8008374 <DMA_CheckFifoParam+0xe8>
    break;
 8008372:	bf00      	nop
    }
  }

  return status;
 8008374:	7bfb      	ldrb	r3, [r7, #15]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop

08008384 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a38      	ldr	r2, [pc, #224]	; (8008478 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d022      	beq.n	80083e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a36      	ldr	r2, [pc, #216]	; (800847c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d01d      	beq.n	80083e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a35      	ldr	r2, [pc, #212]	; (8008480 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d018      	beq.n	80083e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a33      	ldr	r2, [pc, #204]	; (8008484 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d013      	beq.n	80083e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a32      	ldr	r2, [pc, #200]	; (8008488 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d00e      	beq.n	80083e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a30      	ldr	r2, [pc, #192]	; (800848c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d009      	beq.n	80083e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a2f      	ldr	r2, [pc, #188]	; (8008490 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d004      	beq.n	80083e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a2d      	ldr	r2, [pc, #180]	; (8008494 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d101      	bne.n	80083e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80083e2:	2301      	movs	r3, #1
 80083e4:	e000      	b.n	80083e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80083e6:	2300      	movs	r3, #0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d01a      	beq.n	8008422 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	3b08      	subs	r3, #8
 80083f4:	4a28      	ldr	r2, [pc, #160]	; (8008498 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80083f6:	fba2 2303 	umull	r2, r3, r2, r3
 80083fa:	091b      	lsrs	r3, r3, #4
 80083fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	4b26      	ldr	r3, [pc, #152]	; (800849c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	461a      	mov	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a24      	ldr	r2, [pc, #144]	; (80084a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008410:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f003 031f 	and.w	r3, r3, #31
 8008418:	2201      	movs	r2, #1
 800841a:	409a      	lsls	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008420:	e024      	b.n	800846c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	b2db      	uxtb	r3, r3
 8008428:	3b10      	subs	r3, #16
 800842a:	4a1e      	ldr	r2, [pc, #120]	; (80084a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800842c:	fba2 2303 	umull	r2, r3, r2, r3
 8008430:	091b      	lsrs	r3, r3, #4
 8008432:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	4a1c      	ldr	r2, [pc, #112]	; (80084a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d806      	bhi.n	800844a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	4a1b      	ldr	r2, [pc, #108]	; (80084ac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d902      	bls.n	800844a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	3308      	adds	r3, #8
 8008448:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	4b18      	ldr	r3, [pc, #96]	; (80084b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800844e:	4413      	add	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	461a      	mov	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a16      	ldr	r2, [pc, #88]	; (80084b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800845c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f003 031f 	and.w	r3, r3, #31
 8008464:	2201      	movs	r2, #1
 8008466:	409a      	lsls	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800846c:	bf00      	nop
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	58025408 	.word	0x58025408
 800847c:	5802541c 	.word	0x5802541c
 8008480:	58025430 	.word	0x58025430
 8008484:	58025444 	.word	0x58025444
 8008488:	58025458 	.word	0x58025458
 800848c:	5802546c 	.word	0x5802546c
 8008490:	58025480 	.word	0x58025480
 8008494:	58025494 	.word	0x58025494
 8008498:	cccccccd 	.word	0xcccccccd
 800849c:	16009600 	.word	0x16009600
 80084a0:	58025880 	.word	0x58025880
 80084a4:	aaaaaaab 	.word	0xaaaaaaab
 80084a8:	400204b8 	.word	0x400204b8
 80084ac:	4002040f 	.word	0x4002040f
 80084b0:	10008200 	.word	0x10008200
 80084b4:	40020880 	.word	0x40020880

080084b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d04a      	beq.n	8008564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2b08      	cmp	r3, #8
 80084d2:	d847      	bhi.n	8008564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a25      	ldr	r2, [pc, #148]	; (8008570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d022      	beq.n	8008524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a24      	ldr	r2, [pc, #144]	; (8008574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d01d      	beq.n	8008524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a22      	ldr	r2, [pc, #136]	; (8008578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d018      	beq.n	8008524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a21      	ldr	r2, [pc, #132]	; (800857c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d013      	beq.n	8008524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a1f      	ldr	r2, [pc, #124]	; (8008580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d00e      	beq.n	8008524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a1e      	ldr	r2, [pc, #120]	; (8008584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d009      	beq.n	8008524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a1c      	ldr	r2, [pc, #112]	; (8008588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d004      	beq.n	8008524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a1b      	ldr	r2, [pc, #108]	; (800858c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d101      	bne.n	8008528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008524:	2301      	movs	r3, #1
 8008526:	e000      	b.n	800852a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008528:	2300      	movs	r3, #0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00a      	beq.n	8008544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	4b17      	ldr	r3, [pc, #92]	; (8008590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008532:	4413      	add	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	461a      	mov	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a15      	ldr	r2, [pc, #84]	; (8008594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008540:	671a      	str	r2, [r3, #112]	; 0x70
 8008542:	e009      	b.n	8008558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	4b14      	ldr	r3, [pc, #80]	; (8008598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008548:	4413      	add	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	461a      	mov	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a11      	ldr	r2, [pc, #68]	; (800859c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008556:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	3b01      	subs	r3, #1
 800855c:	2201      	movs	r2, #1
 800855e:	409a      	lsls	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008564:	bf00      	nop
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr
 8008570:	58025408 	.word	0x58025408
 8008574:	5802541c 	.word	0x5802541c
 8008578:	58025430 	.word	0x58025430
 800857c:	58025444 	.word	0x58025444
 8008580:	58025458 	.word	0x58025458
 8008584:	5802546c 	.word	0x5802546c
 8008588:	58025480 	.word	0x58025480
 800858c:	58025494 	.word	0x58025494
 8008590:	1600963f 	.word	0x1600963f
 8008594:	58025940 	.word	0x58025940
 8008598:	1000823f 	.word	0x1000823f
 800859c:	40020940 	.word	0x40020940

080085a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b089      	sub	sp, #36	; 0x24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80085ae:	4b86      	ldr	r3, [pc, #536]	; (80087c8 <HAL_GPIO_Init+0x228>)
 80085b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80085b2:	e18c      	b.n	80088ce <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	2101      	movs	r1, #1
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	fa01 f303 	lsl.w	r3, r1, r3
 80085c0:	4013      	ands	r3, r2
 80085c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 817e 	beq.w	80088c8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	f003 0303 	and.w	r3, r3, #3
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d005      	beq.n	80085e4 <HAL_GPIO_Init+0x44>
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f003 0303 	and.w	r3, r3, #3
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d130      	bne.n	8008646 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	005b      	lsls	r3, r3, #1
 80085ee:	2203      	movs	r2, #3
 80085f0:	fa02 f303 	lsl.w	r3, r2, r3
 80085f4:	43db      	mvns	r3, r3
 80085f6:	69ba      	ldr	r2, [r7, #24]
 80085f8:	4013      	ands	r3, r2
 80085fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	68da      	ldr	r2, [r3, #12]
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	005b      	lsls	r3, r3, #1
 8008604:	fa02 f303 	lsl.w	r3, r2, r3
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	4313      	orrs	r3, r2
 800860c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800861a:	2201      	movs	r2, #1
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	fa02 f303 	lsl.w	r3, r2, r3
 8008622:	43db      	mvns	r3, r3
 8008624:	69ba      	ldr	r2, [r7, #24]
 8008626:	4013      	ands	r3, r2
 8008628:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	091b      	lsrs	r3, r3, #4
 8008630:	f003 0201 	and.w	r2, r3, #1
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	fa02 f303 	lsl.w	r3, r2, r3
 800863a:	69ba      	ldr	r2, [r7, #24]
 800863c:	4313      	orrs	r3, r2
 800863e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f003 0303 	and.w	r3, r3, #3
 800864e:	2b03      	cmp	r3, #3
 8008650:	d017      	beq.n	8008682 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	005b      	lsls	r3, r3, #1
 800865c:	2203      	movs	r2, #3
 800865e:	fa02 f303 	lsl.w	r3, r2, r3
 8008662:	43db      	mvns	r3, r3
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	4013      	ands	r3, r2
 8008668:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	689a      	ldr	r2, [r3, #8]
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	005b      	lsls	r3, r3, #1
 8008672:	fa02 f303 	lsl.w	r3, r2, r3
 8008676:	69ba      	ldr	r2, [r7, #24]
 8008678:	4313      	orrs	r3, r2
 800867a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	69ba      	ldr	r2, [r7, #24]
 8008680:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f003 0303 	and.w	r3, r3, #3
 800868a:	2b02      	cmp	r3, #2
 800868c:	d123      	bne.n	80086d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	08da      	lsrs	r2, r3, #3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	3208      	adds	r2, #8
 8008696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800869a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	f003 0307 	and.w	r3, r3, #7
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	220f      	movs	r2, #15
 80086a6:	fa02 f303 	lsl.w	r3, r2, r3
 80086aa:	43db      	mvns	r3, r3
 80086ac:	69ba      	ldr	r2, [r7, #24]
 80086ae:	4013      	ands	r3, r2
 80086b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	691a      	ldr	r2, [r3, #16]
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	f003 0307 	and.w	r3, r3, #7
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	fa02 f303 	lsl.w	r3, r2, r3
 80086c2:	69ba      	ldr	r2, [r7, #24]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	08da      	lsrs	r2, r3, #3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	3208      	adds	r2, #8
 80086d0:	69b9      	ldr	r1, [r7, #24]
 80086d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	005b      	lsls	r3, r3, #1
 80086e0:	2203      	movs	r2, #3
 80086e2:	fa02 f303 	lsl.w	r3, r2, r3
 80086e6:	43db      	mvns	r3, r3
 80086e8:	69ba      	ldr	r2, [r7, #24]
 80086ea:	4013      	ands	r3, r2
 80086ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f003 0203 	and.w	r2, r3, #3
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	005b      	lsls	r3, r3, #1
 80086fa:	fa02 f303 	lsl.w	r3, r2, r3
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	4313      	orrs	r3, r2
 8008702:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	69ba      	ldr	r2, [r7, #24]
 8008708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008712:	2b00      	cmp	r3, #0
 8008714:	f000 80d8 	beq.w	80088c8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008718:	4b2c      	ldr	r3, [pc, #176]	; (80087cc <HAL_GPIO_Init+0x22c>)
 800871a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800871e:	4a2b      	ldr	r2, [pc, #172]	; (80087cc <HAL_GPIO_Init+0x22c>)
 8008720:	f043 0302 	orr.w	r3, r3, #2
 8008724:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008728:	4b28      	ldr	r3, [pc, #160]	; (80087cc <HAL_GPIO_Init+0x22c>)
 800872a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008736:	4a26      	ldr	r2, [pc, #152]	; (80087d0 <HAL_GPIO_Init+0x230>)
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	089b      	lsrs	r3, r3, #2
 800873c:	3302      	adds	r3, #2
 800873e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	f003 0303 	and.w	r3, r3, #3
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	220f      	movs	r2, #15
 800874e:	fa02 f303 	lsl.w	r3, r2, r3
 8008752:	43db      	mvns	r3, r3
 8008754:	69ba      	ldr	r2, [r7, #24]
 8008756:	4013      	ands	r3, r2
 8008758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a1d      	ldr	r2, [pc, #116]	; (80087d4 <HAL_GPIO_Init+0x234>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d04a      	beq.n	80087f8 <HAL_GPIO_Init+0x258>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a1c      	ldr	r2, [pc, #112]	; (80087d8 <HAL_GPIO_Init+0x238>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d02b      	beq.n	80087c2 <HAL_GPIO_Init+0x222>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a1b      	ldr	r2, [pc, #108]	; (80087dc <HAL_GPIO_Init+0x23c>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d025      	beq.n	80087be <HAL_GPIO_Init+0x21e>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a1a      	ldr	r2, [pc, #104]	; (80087e0 <HAL_GPIO_Init+0x240>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d01f      	beq.n	80087ba <HAL_GPIO_Init+0x21a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a19      	ldr	r2, [pc, #100]	; (80087e4 <HAL_GPIO_Init+0x244>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d019      	beq.n	80087b6 <HAL_GPIO_Init+0x216>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a18      	ldr	r2, [pc, #96]	; (80087e8 <HAL_GPIO_Init+0x248>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d013      	beq.n	80087b2 <HAL_GPIO_Init+0x212>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a17      	ldr	r2, [pc, #92]	; (80087ec <HAL_GPIO_Init+0x24c>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d00d      	beq.n	80087ae <HAL_GPIO_Init+0x20e>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a16      	ldr	r2, [pc, #88]	; (80087f0 <HAL_GPIO_Init+0x250>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d007      	beq.n	80087aa <HAL_GPIO_Init+0x20a>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a15      	ldr	r2, [pc, #84]	; (80087f4 <HAL_GPIO_Init+0x254>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d101      	bne.n	80087a6 <HAL_GPIO_Init+0x206>
 80087a2:	2309      	movs	r3, #9
 80087a4:	e029      	b.n	80087fa <HAL_GPIO_Init+0x25a>
 80087a6:	230a      	movs	r3, #10
 80087a8:	e027      	b.n	80087fa <HAL_GPIO_Init+0x25a>
 80087aa:	2307      	movs	r3, #7
 80087ac:	e025      	b.n	80087fa <HAL_GPIO_Init+0x25a>
 80087ae:	2306      	movs	r3, #6
 80087b0:	e023      	b.n	80087fa <HAL_GPIO_Init+0x25a>
 80087b2:	2305      	movs	r3, #5
 80087b4:	e021      	b.n	80087fa <HAL_GPIO_Init+0x25a>
 80087b6:	2304      	movs	r3, #4
 80087b8:	e01f      	b.n	80087fa <HAL_GPIO_Init+0x25a>
 80087ba:	2303      	movs	r3, #3
 80087bc:	e01d      	b.n	80087fa <HAL_GPIO_Init+0x25a>
 80087be:	2302      	movs	r3, #2
 80087c0:	e01b      	b.n	80087fa <HAL_GPIO_Init+0x25a>
 80087c2:	2301      	movs	r3, #1
 80087c4:	e019      	b.n	80087fa <HAL_GPIO_Init+0x25a>
 80087c6:	bf00      	nop
 80087c8:	58000080 	.word	0x58000080
 80087cc:	58024400 	.word	0x58024400
 80087d0:	58000400 	.word	0x58000400
 80087d4:	58020000 	.word	0x58020000
 80087d8:	58020400 	.word	0x58020400
 80087dc:	58020800 	.word	0x58020800
 80087e0:	58020c00 	.word	0x58020c00
 80087e4:	58021000 	.word	0x58021000
 80087e8:	58021400 	.word	0x58021400
 80087ec:	58021800 	.word	0x58021800
 80087f0:	58021c00 	.word	0x58021c00
 80087f4:	58022400 	.word	0x58022400
 80087f8:	2300      	movs	r3, #0
 80087fa:	69fa      	ldr	r2, [r7, #28]
 80087fc:	f002 0203 	and.w	r2, r2, #3
 8008800:	0092      	lsls	r2, r2, #2
 8008802:	4093      	lsls	r3, r2
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	4313      	orrs	r3, r2
 8008808:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800880a:	4938      	ldr	r1, [pc, #224]	; (80088ec <HAL_GPIO_Init+0x34c>)
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	089b      	lsrs	r3, r3, #2
 8008810:	3302      	adds	r3, #2
 8008812:	69ba      	ldr	r2, [r7, #24]
 8008814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	43db      	mvns	r3, r3
 8008824:	69ba      	ldr	r2, [r7, #24]
 8008826:	4013      	ands	r3, r2
 8008828:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d003      	beq.n	800883e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008836:	69ba      	ldr	r2, [r7, #24]
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	4313      	orrs	r3, r2
 800883c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800883e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	43db      	mvns	r3, r3
 8008852:	69ba      	ldr	r2, [r7, #24]
 8008854:	4013      	ands	r3, r2
 8008856:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d003      	beq.n	800886c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	4313      	orrs	r3, r2
 800886a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800886c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	43db      	mvns	r3, r3
 800887e:	69ba      	ldr	r2, [r7, #24]
 8008880:	4013      	ands	r3, r2
 8008882:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d003      	beq.n	8008898 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008890:	69ba      	ldr	r2, [r7, #24]
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	4313      	orrs	r3, r2
 8008896:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	69ba      	ldr	r2, [r7, #24]
 800889c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	43db      	mvns	r3, r3
 80088a8:	69ba      	ldr	r2, [r7, #24]
 80088aa:	4013      	ands	r3, r2
 80088ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d003      	beq.n	80088c2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80088ba:	69ba      	ldr	r2, [r7, #24]
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	4313      	orrs	r3, r2
 80088c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	3301      	adds	r3, #1
 80088cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	fa22 f303 	lsr.w	r3, r2, r3
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f47f ae6b 	bne.w	80085b4 <HAL_GPIO_Init+0x14>
  }
}
 80088de:	bf00      	nop
 80088e0:	bf00      	nop
 80088e2:	3724      	adds	r7, #36	; 0x24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	58000400 	.word	0x58000400

080088f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b087      	sub	sp, #28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80088fa:	2300      	movs	r3, #0
 80088fc:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80088fe:	4b72      	ldr	r3, [pc, #456]	; (8008ac8 <HAL_GPIO_DeInit+0x1d8>)
 8008900:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008902:	e0d3      	b.n	8008aac <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008904:	2201      	movs	r2, #1
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	fa02 f303 	lsl.w	r3, r2, r3
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	4013      	ands	r3, r2
 8008910:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 80c6 	beq.w	8008aa6 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800891a:	4a6c      	ldr	r2, [pc, #432]	; (8008acc <HAL_GPIO_DeInit+0x1dc>)
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	089b      	lsrs	r3, r3, #2
 8008920:	3302      	adds	r3, #2
 8008922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008926:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f003 0303 	and.w	r3, r3, #3
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	220f      	movs	r2, #15
 8008932:	fa02 f303 	lsl.w	r3, r2, r3
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	4013      	ands	r3, r2
 800893a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a64      	ldr	r2, [pc, #400]	; (8008ad0 <HAL_GPIO_DeInit+0x1e0>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d031      	beq.n	80089a8 <HAL_GPIO_DeInit+0xb8>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a63      	ldr	r2, [pc, #396]	; (8008ad4 <HAL_GPIO_DeInit+0x1e4>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d02b      	beq.n	80089a4 <HAL_GPIO_DeInit+0xb4>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a62      	ldr	r2, [pc, #392]	; (8008ad8 <HAL_GPIO_DeInit+0x1e8>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d025      	beq.n	80089a0 <HAL_GPIO_DeInit+0xb0>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a61      	ldr	r2, [pc, #388]	; (8008adc <HAL_GPIO_DeInit+0x1ec>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d01f      	beq.n	800899c <HAL_GPIO_DeInit+0xac>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a60      	ldr	r2, [pc, #384]	; (8008ae0 <HAL_GPIO_DeInit+0x1f0>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d019      	beq.n	8008998 <HAL_GPIO_DeInit+0xa8>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a5f      	ldr	r2, [pc, #380]	; (8008ae4 <HAL_GPIO_DeInit+0x1f4>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d013      	beq.n	8008994 <HAL_GPIO_DeInit+0xa4>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a5e      	ldr	r2, [pc, #376]	; (8008ae8 <HAL_GPIO_DeInit+0x1f8>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d00d      	beq.n	8008990 <HAL_GPIO_DeInit+0xa0>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a5d      	ldr	r2, [pc, #372]	; (8008aec <HAL_GPIO_DeInit+0x1fc>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d007      	beq.n	800898c <HAL_GPIO_DeInit+0x9c>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a5c      	ldr	r2, [pc, #368]	; (8008af0 <HAL_GPIO_DeInit+0x200>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d101      	bne.n	8008988 <HAL_GPIO_DeInit+0x98>
 8008984:	2309      	movs	r3, #9
 8008986:	e010      	b.n	80089aa <HAL_GPIO_DeInit+0xba>
 8008988:	230a      	movs	r3, #10
 800898a:	e00e      	b.n	80089aa <HAL_GPIO_DeInit+0xba>
 800898c:	2307      	movs	r3, #7
 800898e:	e00c      	b.n	80089aa <HAL_GPIO_DeInit+0xba>
 8008990:	2306      	movs	r3, #6
 8008992:	e00a      	b.n	80089aa <HAL_GPIO_DeInit+0xba>
 8008994:	2305      	movs	r3, #5
 8008996:	e008      	b.n	80089aa <HAL_GPIO_DeInit+0xba>
 8008998:	2304      	movs	r3, #4
 800899a:	e006      	b.n	80089aa <HAL_GPIO_DeInit+0xba>
 800899c:	2303      	movs	r3, #3
 800899e:	e004      	b.n	80089aa <HAL_GPIO_DeInit+0xba>
 80089a0:	2302      	movs	r3, #2
 80089a2:	e002      	b.n	80089aa <HAL_GPIO_DeInit+0xba>
 80089a4:	2301      	movs	r3, #1
 80089a6:	e000      	b.n	80089aa <HAL_GPIO_DeInit+0xba>
 80089a8:	2300      	movs	r3, #0
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	f002 0203 	and.w	r2, r2, #3
 80089b0:	0092      	lsls	r2, r2, #2
 80089b2:	4093      	lsls	r3, r2
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d136      	bne.n	8008a28 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	43db      	mvns	r3, r3
 80089c2:	401a      	ands	r2, r3
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	43db      	mvns	r3, r3
 80089d0:	401a      	ands	r2, r3
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80089d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	43db      	mvns	r3, r3
 80089e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089e4:	4013      	ands	r3, r2
 80089e6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80089e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	43db      	mvns	r3, r3
 80089f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089f6:	4013      	ands	r3, r2
 80089f8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f003 0303 	and.w	r3, r3, #3
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	220f      	movs	r2, #15
 8008a04:	fa02 f303 	lsl.w	r3, r2, r3
 8008a08:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008a0a:	4a30      	ldr	r2, [pc, #192]	; (8008acc <HAL_GPIO_DeInit+0x1dc>)
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	089b      	lsrs	r3, r3, #2
 8008a10:	3302      	adds	r3, #2
 8008a12:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	43da      	mvns	r2, r3
 8008a1a:	482c      	ldr	r0, [pc, #176]	; (8008acc <HAL_GPIO_DeInit+0x1dc>)
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	089b      	lsrs	r3, r3, #2
 8008a20:	400a      	ands	r2, r1
 8008a22:	3302      	adds	r3, #2
 8008a24:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	005b      	lsls	r3, r3, #1
 8008a30:	2103      	movs	r1, #3
 8008a32:	fa01 f303 	lsl.w	r3, r1, r3
 8008a36:	431a      	orrs	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	08da      	lsrs	r2, r3, #3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	3208      	adds	r2, #8
 8008a44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f003 0307 	and.w	r3, r3, #7
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	220f      	movs	r2, #15
 8008a52:	fa02 f303 	lsl.w	r3, r2, r3
 8008a56:	43db      	mvns	r3, r3
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	08d2      	lsrs	r2, r2, #3
 8008a5c:	4019      	ands	r1, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	3208      	adds	r2, #8
 8008a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68da      	ldr	r2, [r3, #12]
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	005b      	lsls	r3, r3, #1
 8008a6e:	2103      	movs	r1, #3
 8008a70:	fa01 f303 	lsl.w	r3, r1, r3
 8008a74:	43db      	mvns	r3, r3
 8008a76:	401a      	ands	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685a      	ldr	r2, [r3, #4]
 8008a80:	2101      	movs	r1, #1
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	fa01 f303 	lsl.w	r3, r1, r3
 8008a88:	43db      	mvns	r3, r3
 8008a8a:	401a      	ands	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	689a      	ldr	r2, [r3, #8]
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	005b      	lsls	r3, r3, #1
 8008a98:	2103      	movs	r1, #3
 8008a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a9e:	43db      	mvns	r3, r3
 8008aa0:	401a      	ands	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f47f af25 	bne.w	8008904 <HAL_GPIO_DeInit+0x14>
  }
}
 8008aba:	bf00      	nop
 8008abc:	bf00      	nop
 8008abe:	371c      	adds	r7, #28
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	58000080 	.word	0x58000080
 8008acc:	58000400 	.word	0x58000400
 8008ad0:	58020000 	.word	0x58020000
 8008ad4:	58020400 	.word	0x58020400
 8008ad8:	58020800 	.word	0x58020800
 8008adc:	58020c00 	.word	0x58020c00
 8008ae0:	58021000 	.word	0x58021000
 8008ae4:	58021400 	.word	0x58021400
 8008ae8:	58021800 	.word	0x58021800
 8008aec:	58021c00 	.word	0x58021c00
 8008af0:	58022400 	.word	0x58022400

08008af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	807b      	strh	r3, [r7, #2]
 8008b00:	4613      	mov	r3, r2
 8008b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008b04:	787b      	ldrb	r3, [r7, #1]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d003      	beq.n	8008b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b0a:	887a      	ldrh	r2, [r7, #2]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008b10:	e003      	b.n	8008b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008b12:	887b      	ldrh	r3, [r7, #2]
 8008b14:	041a      	lsls	r2, r3, #16
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	619a      	str	r2, [r3, #24]
}
 8008b1a:	bf00      	nop
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
	...

08008b28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008b30:	4b19      	ldr	r3, [pc, #100]	; (8008b98 <HAL_PWREx_ConfigSupply+0x70>)
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	f003 0304 	and.w	r3, r3, #4
 8008b38:	2b04      	cmp	r3, #4
 8008b3a:	d00a      	beq.n	8008b52 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008b3c:	4b16      	ldr	r3, [pc, #88]	; (8008b98 <HAL_PWREx_ConfigSupply+0x70>)
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	f003 0307 	and.w	r3, r3, #7
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d001      	beq.n	8008b4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e01f      	b.n	8008b8e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	e01d      	b.n	8008b8e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008b52:	4b11      	ldr	r3, [pc, #68]	; (8008b98 <HAL_PWREx_ConfigSupply+0x70>)
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	f023 0207 	bic.w	r2, r3, #7
 8008b5a:	490f      	ldr	r1, [pc, #60]	; (8008b98 <HAL_PWREx_ConfigSupply+0x70>)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008b62:	f7fc fbdf 	bl	8005324 <HAL_GetTick>
 8008b66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008b68:	e009      	b.n	8008b7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008b6a:	f7fc fbdb 	bl	8005324 <HAL_GetTick>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	1ad3      	subs	r3, r2, r3
 8008b74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b78:	d901      	bls.n	8008b7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e007      	b.n	8008b8e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008b7e:	4b06      	ldr	r3, [pc, #24]	; (8008b98 <HAL_PWREx_ConfigSupply+0x70>)
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b8a:	d1ee      	bne.n	8008b6a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	58024800 	.word	0x58024800

08008b9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b08c      	sub	sp, #48	; 0x30
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d101      	bne.n	8008bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e3c8      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f000 8087 	beq.w	8008cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bbc:	4b88      	ldr	r3, [pc, #544]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008bc6:	4b86      	ldr	r3, [pc, #536]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bce:	2b10      	cmp	r3, #16
 8008bd0:	d007      	beq.n	8008be2 <HAL_RCC_OscConfig+0x46>
 8008bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd4:	2b18      	cmp	r3, #24
 8008bd6:	d110      	bne.n	8008bfa <HAL_RCC_OscConfig+0x5e>
 8008bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bda:	f003 0303 	and.w	r3, r3, #3
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d10b      	bne.n	8008bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008be2:	4b7f      	ldr	r3, [pc, #508]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d06c      	beq.n	8008cc8 <HAL_RCC_OscConfig+0x12c>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d168      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e3a2      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c02:	d106      	bne.n	8008c12 <HAL_RCC_OscConfig+0x76>
 8008c04:	4b76      	ldr	r3, [pc, #472]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a75      	ldr	r2, [pc, #468]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c0e:	6013      	str	r3, [r2, #0]
 8008c10:	e02e      	b.n	8008c70 <HAL_RCC_OscConfig+0xd4>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10c      	bne.n	8008c34 <HAL_RCC_OscConfig+0x98>
 8008c1a:	4b71      	ldr	r3, [pc, #452]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a70      	ldr	r2, [pc, #448]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c24:	6013      	str	r3, [r2, #0]
 8008c26:	4b6e      	ldr	r3, [pc, #440]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a6d      	ldr	r2, [pc, #436]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	e01d      	b.n	8008c70 <HAL_RCC_OscConfig+0xd4>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c3c:	d10c      	bne.n	8008c58 <HAL_RCC_OscConfig+0xbc>
 8008c3e:	4b68      	ldr	r3, [pc, #416]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a67      	ldr	r2, [pc, #412]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	4b65      	ldr	r3, [pc, #404]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a64      	ldr	r2, [pc, #400]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	e00b      	b.n	8008c70 <HAL_RCC_OscConfig+0xd4>
 8008c58:	4b61      	ldr	r3, [pc, #388]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a60      	ldr	r2, [pc, #384]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c62:	6013      	str	r3, [r2, #0]
 8008c64:	4b5e      	ldr	r3, [pc, #376]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a5d      	ldr	r2, [pc, #372]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d013      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c78:	f7fc fb54 	bl	8005324 <HAL_GetTick>
 8008c7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c7e:	e008      	b.n	8008c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c80:	f7fc fb50 	bl	8005324 <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	2b64      	cmp	r3, #100	; 0x64
 8008c8c:	d901      	bls.n	8008c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e356      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c92:	4b53      	ldr	r3, [pc, #332]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d0f0      	beq.n	8008c80 <HAL_RCC_OscConfig+0xe4>
 8008c9e:	e014      	b.n	8008cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ca0:	f7fc fb40 	bl	8005324 <HAL_GetTick>
 8008ca4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ca6:	e008      	b.n	8008cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ca8:	f7fc fb3c 	bl	8005324 <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	2b64      	cmp	r3, #100	; 0x64
 8008cb4:	d901      	bls.n	8008cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e342      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008cba:	4b49      	ldr	r3, [pc, #292]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1f0      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x10c>
 8008cc6:	e000      	b.n	8008cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 808c 	beq.w	8008df0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cd8:	4b41      	ldr	r3, [pc, #260]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ce0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ce2:	4b3f      	ldr	r3, [pc, #252]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d007      	beq.n	8008cfe <HAL_RCC_OscConfig+0x162>
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	2b18      	cmp	r3, #24
 8008cf2:	d137      	bne.n	8008d64 <HAL_RCC_OscConfig+0x1c8>
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	f003 0303 	and.w	r3, r3, #3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d132      	bne.n	8008d64 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cfe:	4b38      	ldr	r3, [pc, #224]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0304 	and.w	r3, r3, #4
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d005      	beq.n	8008d16 <HAL_RCC_OscConfig+0x17a>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d101      	bne.n	8008d16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e314      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008d16:	4b32      	ldr	r3, [pc, #200]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f023 0219 	bic.w	r2, r3, #25
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	492f      	ldr	r1, [pc, #188]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008d24:	4313      	orrs	r3, r2
 8008d26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d28:	f7fc fafc 	bl	8005324 <HAL_GetTick>
 8008d2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d2e:	e008      	b.n	8008d42 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d30:	f7fc faf8 	bl	8005324 <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d901      	bls.n	8008d42 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e2fe      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d42:	4b27      	ldr	r3, [pc, #156]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0304 	and.w	r3, r3, #4
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d0f0      	beq.n	8008d30 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d4e:	4b24      	ldr	r3, [pc, #144]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	061b      	lsls	r3, r3, #24
 8008d5c:	4920      	ldr	r1, [pc, #128]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d62:	e045      	b.n	8008df0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d026      	beq.n	8008dba <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008d6c:	4b1c      	ldr	r3, [pc, #112]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f023 0219 	bic.w	r2, r3, #25
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	4919      	ldr	r1, [pc, #100]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d7e:	f7fc fad1 	bl	8005324 <HAL_GetTick>
 8008d82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d84:	e008      	b.n	8008d98 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d86:	f7fc facd 	bl	8005324 <HAL_GetTick>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d901      	bls.n	8008d98 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e2d3      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d98:	4b11      	ldr	r3, [pc, #68]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 0304 	and.w	r3, r3, #4
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d0f0      	beq.n	8008d86 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008da4:	4b0e      	ldr	r3, [pc, #56]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	061b      	lsls	r3, r3, #24
 8008db2:	490b      	ldr	r1, [pc, #44]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	604b      	str	r3, [r1, #4]
 8008db8:	e01a      	b.n	8008df0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008dba:	4b09      	ldr	r3, [pc, #36]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a08      	ldr	r2, [pc, #32]	; (8008de0 <HAL_RCC_OscConfig+0x244>)
 8008dc0:	f023 0301 	bic.w	r3, r3, #1
 8008dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc6:	f7fc faad 	bl	8005324 <HAL_GetTick>
 8008dca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008dcc:	e00a      	b.n	8008de4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008dce:	f7fc faa9 	bl	8005324 <HAL_GetTick>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d903      	bls.n	8008de4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	e2af      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
 8008de0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008de4:	4b96      	ldr	r3, [pc, #600]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0304 	and.w	r3, r3, #4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1ee      	bne.n	8008dce <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 0310 	and.w	r3, r3, #16
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d06a      	beq.n	8008ed2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dfc:	4b90      	ldr	r3, [pc, #576]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e04:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e06:	4b8e      	ldr	r3, [pc, #568]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	2b08      	cmp	r3, #8
 8008e10:	d007      	beq.n	8008e22 <HAL_RCC_OscConfig+0x286>
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	2b18      	cmp	r3, #24
 8008e16:	d11b      	bne.n	8008e50 <HAL_RCC_OscConfig+0x2b4>
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	f003 0303 	and.w	r3, r3, #3
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d116      	bne.n	8008e50 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e22:	4b87      	ldr	r3, [pc, #540]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d005      	beq.n	8008e3a <HAL_RCC_OscConfig+0x29e>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	69db      	ldr	r3, [r3, #28]
 8008e32:	2b80      	cmp	r3, #128	; 0x80
 8008e34:	d001      	beq.n	8008e3a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e282      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e3a:	4b81      	ldr	r3, [pc, #516]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	061b      	lsls	r3, r3, #24
 8008e48:	497d      	ldr	r1, [pc, #500]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e4e:	e040      	b.n	8008ed2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d023      	beq.n	8008ea0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008e58:	4b79      	ldr	r3, [pc, #484]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a78      	ldr	r2, [pc, #480]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e64:	f7fc fa5e 	bl	8005324 <HAL_GetTick>
 8008e68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e6a:	e008      	b.n	8008e7e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008e6c:	f7fc fa5a 	bl	8005324 <HAL_GetTick>
 8008e70:	4602      	mov	r2, r0
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d901      	bls.n	8008e7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	e260      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e7e:	4b70      	ldr	r3, [pc, #448]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d0f0      	beq.n	8008e6c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e8a:	4b6d      	ldr	r3, [pc, #436]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	061b      	lsls	r3, r3, #24
 8008e98:	4969      	ldr	r1, [pc, #420]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	60cb      	str	r3, [r1, #12]
 8008e9e:	e018      	b.n	8008ed2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008ea0:	4b67      	ldr	r3, [pc, #412]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a66      	ldr	r2, [pc, #408]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eac:	f7fc fa3a 	bl	8005324 <HAL_GetTick>
 8008eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008eb2:	e008      	b.n	8008ec6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008eb4:	f7fc fa36 	bl	8005324 <HAL_GetTick>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d901      	bls.n	8008ec6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e23c      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ec6:	4b5e      	ldr	r3, [pc, #376]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1f0      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f003 0308 	and.w	r3, r3, #8
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d036      	beq.n	8008f4c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d019      	beq.n	8008f1a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ee6:	4b56      	ldr	r3, [pc, #344]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eea:	4a55      	ldr	r2, [pc, #340]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008eec:	f043 0301 	orr.w	r3, r3, #1
 8008ef0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ef2:	f7fc fa17 	bl	8005324 <HAL_GetTick>
 8008ef6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ef8:	e008      	b.n	8008f0c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008efa:	f7fc fa13 	bl	8005324 <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d901      	bls.n	8008f0c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e219      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f0c:	4b4c      	ldr	r3, [pc, #304]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f10:	f003 0302 	and.w	r3, r3, #2
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d0f0      	beq.n	8008efa <HAL_RCC_OscConfig+0x35e>
 8008f18:	e018      	b.n	8008f4c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f1a:	4b49      	ldr	r3, [pc, #292]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f1e:	4a48      	ldr	r2, [pc, #288]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008f20:	f023 0301 	bic.w	r3, r3, #1
 8008f24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f26:	f7fc f9fd 	bl	8005324 <HAL_GetTick>
 8008f2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f2c:	e008      	b.n	8008f40 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f2e:	f7fc f9f9 	bl	8005324 <HAL_GetTick>
 8008f32:	4602      	mov	r2, r0
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	1ad3      	subs	r3, r2, r3
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d901      	bls.n	8008f40 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e1ff      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f40:	4b3f      	ldr	r3, [pc, #252]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f44:	f003 0302 	and.w	r3, r3, #2
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1f0      	bne.n	8008f2e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0320 	and.w	r3, r3, #32
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d036      	beq.n	8008fc6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d019      	beq.n	8008f94 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008f60:	4b37      	ldr	r3, [pc, #220]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a36      	ldr	r2, [pc, #216]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008f66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008f6a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008f6c:	f7fc f9da 	bl	8005324 <HAL_GetTick>
 8008f70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008f72:	e008      	b.n	8008f86 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008f74:	f7fc f9d6 	bl	8005324 <HAL_GetTick>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d901      	bls.n	8008f86 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e1dc      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008f86:	4b2e      	ldr	r3, [pc, #184]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d0f0      	beq.n	8008f74 <HAL_RCC_OscConfig+0x3d8>
 8008f92:	e018      	b.n	8008fc6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008f94:	4b2a      	ldr	r3, [pc, #168]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a29      	ldr	r2, [pc, #164]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008f9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008fa0:	f7fc f9c0 	bl	8005324 <HAL_GetTick>
 8008fa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008fa6:	e008      	b.n	8008fba <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fa8:	f7fc f9bc 	bl	8005324 <HAL_GetTick>
 8008fac:	4602      	mov	r2, r0
 8008fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d901      	bls.n	8008fba <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e1c2      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008fba:	4b21      	ldr	r3, [pc, #132]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1f0      	bne.n	8008fa8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 0304 	and.w	r3, r3, #4
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f000 8086 	beq.w	80090e0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008fd4:	4b1b      	ldr	r3, [pc, #108]	; (8009044 <HAL_RCC_OscConfig+0x4a8>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a1a      	ldr	r2, [pc, #104]	; (8009044 <HAL_RCC_OscConfig+0x4a8>)
 8008fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008fe0:	f7fc f9a0 	bl	8005324 <HAL_GetTick>
 8008fe4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008fe6:	e008      	b.n	8008ffa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fe8:	f7fc f99c 	bl	8005324 <HAL_GetTick>
 8008fec:	4602      	mov	r2, r0
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	2b64      	cmp	r3, #100	; 0x64
 8008ff4:	d901      	bls.n	8008ffa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e1a2      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ffa:	4b12      	ldr	r3, [pc, #72]	; (8009044 <HAL_RCC_OscConfig+0x4a8>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009002:	2b00      	cmp	r3, #0
 8009004:	d0f0      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d106      	bne.n	800901c <HAL_RCC_OscConfig+0x480>
 800900e:	4b0c      	ldr	r3, [pc, #48]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8009010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009012:	4a0b      	ldr	r2, [pc, #44]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8009014:	f043 0301 	orr.w	r3, r3, #1
 8009018:	6713      	str	r3, [r2, #112]	; 0x70
 800901a:	e032      	b.n	8009082 <HAL_RCC_OscConfig+0x4e6>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d111      	bne.n	8009048 <HAL_RCC_OscConfig+0x4ac>
 8009024:	4b06      	ldr	r3, [pc, #24]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8009026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009028:	4a05      	ldr	r2, [pc, #20]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 800902a:	f023 0301 	bic.w	r3, r3, #1
 800902e:	6713      	str	r3, [r2, #112]	; 0x70
 8009030:	4b03      	ldr	r3, [pc, #12]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8009032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009034:	4a02      	ldr	r2, [pc, #8]	; (8009040 <HAL_RCC_OscConfig+0x4a4>)
 8009036:	f023 0304 	bic.w	r3, r3, #4
 800903a:	6713      	str	r3, [r2, #112]	; 0x70
 800903c:	e021      	b.n	8009082 <HAL_RCC_OscConfig+0x4e6>
 800903e:	bf00      	nop
 8009040:	58024400 	.word	0x58024400
 8009044:	58024800 	.word	0x58024800
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	2b05      	cmp	r3, #5
 800904e:	d10c      	bne.n	800906a <HAL_RCC_OscConfig+0x4ce>
 8009050:	4b83      	ldr	r3, [pc, #524]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 8009052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009054:	4a82      	ldr	r2, [pc, #520]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 8009056:	f043 0304 	orr.w	r3, r3, #4
 800905a:	6713      	str	r3, [r2, #112]	; 0x70
 800905c:	4b80      	ldr	r3, [pc, #512]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 800905e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009060:	4a7f      	ldr	r2, [pc, #508]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 8009062:	f043 0301 	orr.w	r3, r3, #1
 8009066:	6713      	str	r3, [r2, #112]	; 0x70
 8009068:	e00b      	b.n	8009082 <HAL_RCC_OscConfig+0x4e6>
 800906a:	4b7d      	ldr	r3, [pc, #500]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 800906c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800906e:	4a7c      	ldr	r2, [pc, #496]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 8009070:	f023 0301 	bic.w	r3, r3, #1
 8009074:	6713      	str	r3, [r2, #112]	; 0x70
 8009076:	4b7a      	ldr	r3, [pc, #488]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 8009078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907a:	4a79      	ldr	r2, [pc, #484]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 800907c:	f023 0304 	bic.w	r3, r3, #4
 8009080:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d015      	beq.n	80090b6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800908a:	f7fc f94b 	bl	8005324 <HAL_GetTick>
 800908e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009090:	e00a      	b.n	80090a8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009092:	f7fc f947 	bl	8005324 <HAL_GetTick>
 8009096:	4602      	mov	r2, r0
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	f241 3288 	movw	r2, #5000	; 0x1388
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d901      	bls.n	80090a8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e14b      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090a8:	4b6d      	ldr	r3, [pc, #436]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 80090aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ac:	f003 0302 	and.w	r3, r3, #2
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d0ee      	beq.n	8009092 <HAL_RCC_OscConfig+0x4f6>
 80090b4:	e014      	b.n	80090e0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090b6:	f7fc f935 	bl	8005324 <HAL_GetTick>
 80090ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80090bc:	e00a      	b.n	80090d4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090be:	f7fc f931 	bl	8005324 <HAL_GetTick>
 80090c2:	4602      	mov	r2, r0
 80090c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d901      	bls.n	80090d4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80090d0:	2303      	movs	r3, #3
 80090d2:	e135      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80090d4:	4b62      	ldr	r3, [pc, #392]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 80090d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090d8:	f003 0302 	and.w	r3, r3, #2
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1ee      	bne.n	80090be <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f000 812a 	beq.w	800933e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80090ea:	4b5d      	ldr	r3, [pc, #372]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090f2:	2b18      	cmp	r3, #24
 80090f4:	f000 80ba 	beq.w	800926c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	f040 8095 	bne.w	800922c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009102:	4b57      	ldr	r3, [pc, #348]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a56      	ldr	r2, [pc, #344]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 8009108:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800910c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800910e:	f7fc f909 	bl	8005324 <HAL_GetTick>
 8009112:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009114:	e008      	b.n	8009128 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009116:	f7fc f905 	bl	8005324 <HAL_GetTick>
 800911a:	4602      	mov	r2, r0
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	2b02      	cmp	r3, #2
 8009122:	d901      	bls.n	8009128 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009124:	2303      	movs	r3, #3
 8009126:	e10b      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009128:	4b4d      	ldr	r3, [pc, #308]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1f0      	bne.n	8009116 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009134:	4b4a      	ldr	r3, [pc, #296]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 8009136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009138:	4b4a      	ldr	r3, [pc, #296]	; (8009264 <HAL_RCC_OscConfig+0x6c8>)
 800913a:	4013      	ands	r3, r2
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009144:	0112      	lsls	r2, r2, #4
 8009146:	430a      	orrs	r2, r1
 8009148:	4945      	ldr	r1, [pc, #276]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 800914a:	4313      	orrs	r3, r2
 800914c:	628b      	str	r3, [r1, #40]	; 0x28
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009152:	3b01      	subs	r3, #1
 8009154:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800915c:	3b01      	subs	r3, #1
 800915e:	025b      	lsls	r3, r3, #9
 8009160:	b29b      	uxth	r3, r3
 8009162:	431a      	orrs	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009168:	3b01      	subs	r3, #1
 800916a:	041b      	lsls	r3, r3, #16
 800916c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009170:	431a      	orrs	r2, r3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009176:	3b01      	subs	r3, #1
 8009178:	061b      	lsls	r3, r3, #24
 800917a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800917e:	4938      	ldr	r1, [pc, #224]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 8009180:	4313      	orrs	r3, r2
 8009182:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009184:	4b36      	ldr	r3, [pc, #216]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 8009186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009188:	4a35      	ldr	r2, [pc, #212]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 800918a:	f023 0301 	bic.w	r3, r3, #1
 800918e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009190:	4b33      	ldr	r3, [pc, #204]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 8009192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009194:	4b34      	ldr	r3, [pc, #208]	; (8009268 <HAL_RCC_OscConfig+0x6cc>)
 8009196:	4013      	ands	r3, r2
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800919c:	00d2      	lsls	r2, r2, #3
 800919e:	4930      	ldr	r1, [pc, #192]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 80091a0:	4313      	orrs	r3, r2
 80091a2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80091a4:	4b2e      	ldr	r3, [pc, #184]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 80091a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a8:	f023 020c 	bic.w	r2, r3, #12
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b0:	492b      	ldr	r1, [pc, #172]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 80091b2:	4313      	orrs	r3, r2
 80091b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80091b6:	4b2a      	ldr	r3, [pc, #168]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 80091b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ba:	f023 0202 	bic.w	r2, r3, #2
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c2:	4927      	ldr	r1, [pc, #156]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 80091c4:	4313      	orrs	r3, r2
 80091c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80091c8:	4b25      	ldr	r3, [pc, #148]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 80091ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091cc:	4a24      	ldr	r2, [pc, #144]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 80091ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091d4:	4b22      	ldr	r3, [pc, #136]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 80091d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d8:	4a21      	ldr	r2, [pc, #132]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 80091da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80091e0:	4b1f      	ldr	r3, [pc, #124]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 80091e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e4:	4a1e      	ldr	r2, [pc, #120]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 80091e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80091ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80091ec:	4b1c      	ldr	r3, [pc, #112]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 80091ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f0:	4a1b      	ldr	r2, [pc, #108]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 80091f2:	f043 0301 	orr.w	r3, r3, #1
 80091f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80091f8:	4b19      	ldr	r3, [pc, #100]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a18      	ldr	r2, [pc, #96]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 80091fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009204:	f7fc f88e 	bl	8005324 <HAL_GetTick>
 8009208:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800920a:	e008      	b.n	800921e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800920c:	f7fc f88a 	bl	8005324 <HAL_GetTick>
 8009210:	4602      	mov	r2, r0
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	2b02      	cmp	r3, #2
 8009218:	d901      	bls.n	800921e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e090      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800921e:	4b10      	ldr	r3, [pc, #64]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009226:	2b00      	cmp	r3, #0
 8009228:	d0f0      	beq.n	800920c <HAL_RCC_OscConfig+0x670>
 800922a:	e088      	b.n	800933e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800922c:	4b0c      	ldr	r3, [pc, #48]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a0b      	ldr	r2, [pc, #44]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 8009232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009238:	f7fc f874 	bl	8005324 <HAL_GetTick>
 800923c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800923e:	e008      	b.n	8009252 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009240:	f7fc f870 	bl	8005324 <HAL_GetTick>
 8009244:	4602      	mov	r2, r0
 8009246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009248:	1ad3      	subs	r3, r2, r3
 800924a:	2b02      	cmp	r3, #2
 800924c:	d901      	bls.n	8009252 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800924e:	2303      	movs	r3, #3
 8009250:	e076      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009252:	4b03      	ldr	r3, [pc, #12]	; (8009260 <HAL_RCC_OscConfig+0x6c4>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1f0      	bne.n	8009240 <HAL_RCC_OscConfig+0x6a4>
 800925e:	e06e      	b.n	800933e <HAL_RCC_OscConfig+0x7a2>
 8009260:	58024400 	.word	0x58024400
 8009264:	fffffc0c 	.word	0xfffffc0c
 8009268:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800926c:	4b36      	ldr	r3, [pc, #216]	; (8009348 <HAL_RCC_OscConfig+0x7ac>)
 800926e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009270:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009272:	4b35      	ldr	r3, [pc, #212]	; (8009348 <HAL_RCC_OscConfig+0x7ac>)
 8009274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009276:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927c:	2b01      	cmp	r3, #1
 800927e:	d031      	beq.n	80092e4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	f003 0203 	and.w	r2, r3, #3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800928a:	429a      	cmp	r2, r3
 800928c:	d12a      	bne.n	80092e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	091b      	lsrs	r3, r3, #4
 8009292:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800929a:	429a      	cmp	r2, r3
 800929c:	d122      	bne.n	80092e4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d11a      	bne.n	80092e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	0a5b      	lsrs	r3, r3, #9
 80092b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80092bc:	429a      	cmp	r2, r3
 80092be:	d111      	bne.n	80092e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	0c1b      	lsrs	r3, r3, #16
 80092c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d108      	bne.n	80092e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	0e1b      	lsrs	r3, r3, #24
 80092d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d001      	beq.n	80092e8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e02b      	b.n	8009340 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80092e8:	4b17      	ldr	r3, [pc, #92]	; (8009348 <HAL_RCC_OscConfig+0x7ac>)
 80092ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ec:	08db      	lsrs	r3, r3, #3
 80092ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092f8:	693a      	ldr	r2, [r7, #16]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d01f      	beq.n	800933e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80092fe:	4b12      	ldr	r3, [pc, #72]	; (8009348 <HAL_RCC_OscConfig+0x7ac>)
 8009300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009302:	4a11      	ldr	r2, [pc, #68]	; (8009348 <HAL_RCC_OscConfig+0x7ac>)
 8009304:	f023 0301 	bic.w	r3, r3, #1
 8009308:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800930a:	f7fc f80b 	bl	8005324 <HAL_GetTick>
 800930e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009310:	bf00      	nop
 8009312:	f7fc f807 	bl	8005324 <HAL_GetTick>
 8009316:	4602      	mov	r2, r0
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	4293      	cmp	r3, r2
 800931c:	d0f9      	beq.n	8009312 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800931e:	4b0a      	ldr	r3, [pc, #40]	; (8009348 <HAL_RCC_OscConfig+0x7ac>)
 8009320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009322:	4b0a      	ldr	r3, [pc, #40]	; (800934c <HAL_RCC_OscConfig+0x7b0>)
 8009324:	4013      	ands	r3, r2
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800932a:	00d2      	lsls	r2, r2, #3
 800932c:	4906      	ldr	r1, [pc, #24]	; (8009348 <HAL_RCC_OscConfig+0x7ac>)
 800932e:	4313      	orrs	r3, r2
 8009330:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009332:	4b05      	ldr	r3, [pc, #20]	; (8009348 <HAL_RCC_OscConfig+0x7ac>)
 8009334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009336:	4a04      	ldr	r2, [pc, #16]	; (8009348 <HAL_RCC_OscConfig+0x7ac>)
 8009338:	f043 0301 	orr.w	r3, r3, #1
 800933c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3730      	adds	r7, #48	; 0x30
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	58024400 	.word	0x58024400
 800934c:	ffff0007 	.word	0xffff0007

08009350 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e19c      	b.n	800969e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009364:	4b8a      	ldr	r3, [pc, #552]	; (8009590 <HAL_RCC_ClockConfig+0x240>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 030f 	and.w	r3, r3, #15
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	429a      	cmp	r2, r3
 8009370:	d910      	bls.n	8009394 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009372:	4b87      	ldr	r3, [pc, #540]	; (8009590 <HAL_RCC_ClockConfig+0x240>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f023 020f 	bic.w	r2, r3, #15
 800937a:	4985      	ldr	r1, [pc, #532]	; (8009590 <HAL_RCC_ClockConfig+0x240>)
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	4313      	orrs	r3, r2
 8009380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009382:	4b83      	ldr	r3, [pc, #524]	; (8009590 <HAL_RCC_ClockConfig+0x240>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 030f 	and.w	r3, r3, #15
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	429a      	cmp	r2, r3
 800938e:	d001      	beq.n	8009394 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e184      	b.n	800969e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 0304 	and.w	r3, r3, #4
 800939c:	2b00      	cmp	r3, #0
 800939e:	d010      	beq.n	80093c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	691a      	ldr	r2, [r3, #16]
 80093a4:	4b7b      	ldr	r3, [pc, #492]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d908      	bls.n	80093c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80093b0:	4b78      	ldr	r3, [pc, #480]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	4975      	ldr	r1, [pc, #468]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 80093be:	4313      	orrs	r3, r2
 80093c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 0308 	and.w	r3, r3, #8
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d010      	beq.n	80093f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	695a      	ldr	r2, [r3, #20]
 80093d2:	4b70      	ldr	r3, [pc, #448]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 80093d4:	69db      	ldr	r3, [r3, #28]
 80093d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093da:	429a      	cmp	r2, r3
 80093dc:	d908      	bls.n	80093f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80093de:	4b6d      	ldr	r3, [pc, #436]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 80093e0:	69db      	ldr	r3, [r3, #28]
 80093e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	695b      	ldr	r3, [r3, #20]
 80093ea:	496a      	ldr	r1, [pc, #424]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 80093ec:	4313      	orrs	r3, r2
 80093ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 0310 	and.w	r3, r3, #16
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d010      	beq.n	800941e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	699a      	ldr	r2, [r3, #24]
 8009400:	4b64      	ldr	r3, [pc, #400]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 8009402:	69db      	ldr	r3, [r3, #28]
 8009404:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009408:	429a      	cmp	r2, r3
 800940a:	d908      	bls.n	800941e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800940c:	4b61      	ldr	r3, [pc, #388]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 800940e:	69db      	ldr	r3, [r3, #28]
 8009410:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	495e      	ldr	r1, [pc, #376]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 800941a:	4313      	orrs	r3, r2
 800941c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 0320 	and.w	r3, r3, #32
 8009426:	2b00      	cmp	r3, #0
 8009428:	d010      	beq.n	800944c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	69da      	ldr	r2, [r3, #28]
 800942e:	4b59      	ldr	r3, [pc, #356]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009436:	429a      	cmp	r2, r3
 8009438:	d908      	bls.n	800944c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800943a:	4b56      	ldr	r3, [pc, #344]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 800943c:	6a1b      	ldr	r3, [r3, #32]
 800943e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	69db      	ldr	r3, [r3, #28]
 8009446:	4953      	ldr	r1, [pc, #332]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 8009448:	4313      	orrs	r3, r2
 800944a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 0302 	and.w	r3, r3, #2
 8009454:	2b00      	cmp	r3, #0
 8009456:	d010      	beq.n	800947a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	68da      	ldr	r2, [r3, #12]
 800945c:	4b4d      	ldr	r3, [pc, #308]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	f003 030f 	and.w	r3, r3, #15
 8009464:	429a      	cmp	r2, r3
 8009466:	d908      	bls.n	800947a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009468:	4b4a      	ldr	r3, [pc, #296]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	f023 020f 	bic.w	r2, r3, #15
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	4947      	ldr	r1, [pc, #284]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 8009476:	4313      	orrs	r3, r2
 8009478:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 0301 	and.w	r3, r3, #1
 8009482:	2b00      	cmp	r3, #0
 8009484:	d055      	beq.n	8009532 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009486:	4b43      	ldr	r3, [pc, #268]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	4940      	ldr	r1, [pc, #256]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 8009494:	4313      	orrs	r3, r2
 8009496:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	2b02      	cmp	r3, #2
 800949e:	d107      	bne.n	80094b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094a0:	4b3c      	ldr	r3, [pc, #240]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d121      	bne.n	80094f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	e0f6      	b.n	800969e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	2b03      	cmp	r3, #3
 80094b6:	d107      	bne.n	80094c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80094b8:	4b36      	ldr	r3, [pc, #216]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d115      	bne.n	80094f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e0ea      	b.n	800969e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d107      	bne.n	80094e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80094d0:	4b30      	ldr	r3, [pc, #192]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d109      	bne.n	80094f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e0de      	b.n	800969e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094e0:	4b2c      	ldr	r3, [pc, #176]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 0304 	and.w	r3, r3, #4
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e0d6      	b.n	800969e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80094f0:	4b28      	ldr	r3, [pc, #160]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	f023 0207 	bic.w	r2, r3, #7
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	4925      	ldr	r1, [pc, #148]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 80094fe:	4313      	orrs	r3, r2
 8009500:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009502:	f7fb ff0f 	bl	8005324 <HAL_GetTick>
 8009506:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009508:	e00a      	b.n	8009520 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800950a:	f7fb ff0b 	bl	8005324 <HAL_GetTick>
 800950e:	4602      	mov	r2, r0
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	1ad3      	subs	r3, r2, r3
 8009514:	f241 3288 	movw	r2, #5000	; 0x1388
 8009518:	4293      	cmp	r3, r2
 800951a:	d901      	bls.n	8009520 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800951c:	2303      	movs	r3, #3
 800951e:	e0be      	b.n	800969e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009520:	4b1c      	ldr	r3, [pc, #112]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	00db      	lsls	r3, r3, #3
 800952e:	429a      	cmp	r2, r3
 8009530:	d1eb      	bne.n	800950a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f003 0302 	and.w	r3, r3, #2
 800953a:	2b00      	cmp	r3, #0
 800953c:	d010      	beq.n	8009560 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68da      	ldr	r2, [r3, #12]
 8009542:	4b14      	ldr	r3, [pc, #80]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	f003 030f 	and.w	r3, r3, #15
 800954a:	429a      	cmp	r2, r3
 800954c:	d208      	bcs.n	8009560 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800954e:	4b11      	ldr	r3, [pc, #68]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	f023 020f 	bic.w	r2, r3, #15
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	490e      	ldr	r1, [pc, #56]	; (8009594 <HAL_RCC_ClockConfig+0x244>)
 800955c:	4313      	orrs	r3, r2
 800955e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009560:	4b0b      	ldr	r3, [pc, #44]	; (8009590 <HAL_RCC_ClockConfig+0x240>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 030f 	and.w	r3, r3, #15
 8009568:	683a      	ldr	r2, [r7, #0]
 800956a:	429a      	cmp	r2, r3
 800956c:	d214      	bcs.n	8009598 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800956e:	4b08      	ldr	r3, [pc, #32]	; (8009590 <HAL_RCC_ClockConfig+0x240>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f023 020f 	bic.w	r2, r3, #15
 8009576:	4906      	ldr	r1, [pc, #24]	; (8009590 <HAL_RCC_ClockConfig+0x240>)
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	4313      	orrs	r3, r2
 800957c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800957e:	4b04      	ldr	r3, [pc, #16]	; (8009590 <HAL_RCC_ClockConfig+0x240>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 030f 	and.w	r3, r3, #15
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	429a      	cmp	r2, r3
 800958a:	d005      	beq.n	8009598 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e086      	b.n	800969e <HAL_RCC_ClockConfig+0x34e>
 8009590:	52002000 	.word	0x52002000
 8009594:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f003 0304 	and.w	r3, r3, #4
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d010      	beq.n	80095c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	691a      	ldr	r2, [r3, #16]
 80095a8:	4b3f      	ldr	r3, [pc, #252]	; (80096a8 <HAL_RCC_ClockConfig+0x358>)
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d208      	bcs.n	80095c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80095b4:	4b3c      	ldr	r3, [pc, #240]	; (80096a8 <HAL_RCC_ClockConfig+0x358>)
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	4939      	ldr	r1, [pc, #228]	; (80096a8 <HAL_RCC_ClockConfig+0x358>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 0308 	and.w	r3, r3, #8
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d010      	beq.n	80095f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	695a      	ldr	r2, [r3, #20]
 80095d6:	4b34      	ldr	r3, [pc, #208]	; (80096a8 <HAL_RCC_ClockConfig+0x358>)
 80095d8:	69db      	ldr	r3, [r3, #28]
 80095da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095de:	429a      	cmp	r2, r3
 80095e0:	d208      	bcs.n	80095f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80095e2:	4b31      	ldr	r3, [pc, #196]	; (80096a8 <HAL_RCC_ClockConfig+0x358>)
 80095e4:	69db      	ldr	r3, [r3, #28]
 80095e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	492e      	ldr	r1, [pc, #184]	; (80096a8 <HAL_RCC_ClockConfig+0x358>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 0310 	and.w	r3, r3, #16
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d010      	beq.n	8009622 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	699a      	ldr	r2, [r3, #24]
 8009604:	4b28      	ldr	r3, [pc, #160]	; (80096a8 <HAL_RCC_ClockConfig+0x358>)
 8009606:	69db      	ldr	r3, [r3, #28]
 8009608:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800960c:	429a      	cmp	r2, r3
 800960e:	d208      	bcs.n	8009622 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009610:	4b25      	ldr	r3, [pc, #148]	; (80096a8 <HAL_RCC_ClockConfig+0x358>)
 8009612:	69db      	ldr	r3, [r3, #28]
 8009614:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	4922      	ldr	r1, [pc, #136]	; (80096a8 <HAL_RCC_ClockConfig+0x358>)
 800961e:	4313      	orrs	r3, r2
 8009620:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 0320 	and.w	r3, r3, #32
 800962a:	2b00      	cmp	r3, #0
 800962c:	d010      	beq.n	8009650 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	69da      	ldr	r2, [r3, #28]
 8009632:	4b1d      	ldr	r3, [pc, #116]	; (80096a8 <HAL_RCC_ClockConfig+0x358>)
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800963a:	429a      	cmp	r2, r3
 800963c:	d208      	bcs.n	8009650 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800963e:	4b1a      	ldr	r3, [pc, #104]	; (80096a8 <HAL_RCC_ClockConfig+0x358>)
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	69db      	ldr	r3, [r3, #28]
 800964a:	4917      	ldr	r1, [pc, #92]	; (80096a8 <HAL_RCC_ClockConfig+0x358>)
 800964c:	4313      	orrs	r3, r2
 800964e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009650:	f000 f834 	bl	80096bc <HAL_RCC_GetSysClockFreq>
 8009654:	4602      	mov	r2, r0
 8009656:	4b14      	ldr	r3, [pc, #80]	; (80096a8 <HAL_RCC_ClockConfig+0x358>)
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	0a1b      	lsrs	r3, r3, #8
 800965c:	f003 030f 	and.w	r3, r3, #15
 8009660:	4912      	ldr	r1, [pc, #72]	; (80096ac <HAL_RCC_ClockConfig+0x35c>)
 8009662:	5ccb      	ldrb	r3, [r1, r3]
 8009664:	f003 031f 	and.w	r3, r3, #31
 8009668:	fa22 f303 	lsr.w	r3, r2, r3
 800966c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800966e:	4b0e      	ldr	r3, [pc, #56]	; (80096a8 <HAL_RCC_ClockConfig+0x358>)
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	f003 030f 	and.w	r3, r3, #15
 8009676:	4a0d      	ldr	r2, [pc, #52]	; (80096ac <HAL_RCC_ClockConfig+0x35c>)
 8009678:	5cd3      	ldrb	r3, [r2, r3]
 800967a:	f003 031f 	and.w	r3, r3, #31
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	fa22 f303 	lsr.w	r3, r2, r3
 8009684:	4a0a      	ldr	r2, [pc, #40]	; (80096b0 <HAL_RCC_ClockConfig+0x360>)
 8009686:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009688:	4a0a      	ldr	r2, [pc, #40]	; (80096b4 <HAL_RCC_ClockConfig+0x364>)
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800968e:	4b0a      	ldr	r3, [pc, #40]	; (80096b8 <HAL_RCC_ClockConfig+0x368>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4618      	mov	r0, r3
 8009694:	f7fb fdfc 	bl	8005290 <HAL_InitTick>
 8009698:	4603      	mov	r3, r0
 800969a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800969c:	7bfb      	ldrb	r3, [r7, #15]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3718      	adds	r7, #24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	58024400 	.word	0x58024400
 80096ac:	0800f818 	.word	0x0800f818
 80096b0:	24000004 	.word	0x24000004
 80096b4:	24000000 	.word	0x24000000
 80096b8:	24000008 	.word	0x24000008

080096bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096bc:	b480      	push	{r7}
 80096be:	b089      	sub	sp, #36	; 0x24
 80096c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80096c2:	4bb3      	ldr	r3, [pc, #716]	; (8009990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096ca:	2b18      	cmp	r3, #24
 80096cc:	f200 8155 	bhi.w	800997a <HAL_RCC_GetSysClockFreq+0x2be>
 80096d0:	a201      	add	r2, pc, #4	; (adr r2, 80096d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80096d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d6:	bf00      	nop
 80096d8:	0800973d 	.word	0x0800973d
 80096dc:	0800997b 	.word	0x0800997b
 80096e0:	0800997b 	.word	0x0800997b
 80096e4:	0800997b 	.word	0x0800997b
 80096e8:	0800997b 	.word	0x0800997b
 80096ec:	0800997b 	.word	0x0800997b
 80096f0:	0800997b 	.word	0x0800997b
 80096f4:	0800997b 	.word	0x0800997b
 80096f8:	08009763 	.word	0x08009763
 80096fc:	0800997b 	.word	0x0800997b
 8009700:	0800997b 	.word	0x0800997b
 8009704:	0800997b 	.word	0x0800997b
 8009708:	0800997b 	.word	0x0800997b
 800970c:	0800997b 	.word	0x0800997b
 8009710:	0800997b 	.word	0x0800997b
 8009714:	0800997b 	.word	0x0800997b
 8009718:	08009769 	.word	0x08009769
 800971c:	0800997b 	.word	0x0800997b
 8009720:	0800997b 	.word	0x0800997b
 8009724:	0800997b 	.word	0x0800997b
 8009728:	0800997b 	.word	0x0800997b
 800972c:	0800997b 	.word	0x0800997b
 8009730:	0800997b 	.word	0x0800997b
 8009734:	0800997b 	.word	0x0800997b
 8009738:	0800976f 	.word	0x0800976f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800973c:	4b94      	ldr	r3, [pc, #592]	; (8009990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 0320 	and.w	r3, r3, #32
 8009744:	2b00      	cmp	r3, #0
 8009746:	d009      	beq.n	800975c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009748:	4b91      	ldr	r3, [pc, #580]	; (8009990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	08db      	lsrs	r3, r3, #3
 800974e:	f003 0303 	and.w	r3, r3, #3
 8009752:	4a90      	ldr	r2, [pc, #576]	; (8009994 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009754:	fa22 f303 	lsr.w	r3, r2, r3
 8009758:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800975a:	e111      	b.n	8009980 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800975c:	4b8d      	ldr	r3, [pc, #564]	; (8009994 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800975e:	61bb      	str	r3, [r7, #24]
      break;
 8009760:	e10e      	b.n	8009980 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009762:	4b8d      	ldr	r3, [pc, #564]	; (8009998 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009764:	61bb      	str	r3, [r7, #24]
      break;
 8009766:	e10b      	b.n	8009980 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009768:	4b8c      	ldr	r3, [pc, #560]	; (800999c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800976a:	61bb      	str	r3, [r7, #24]
      break;
 800976c:	e108      	b.n	8009980 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800976e:	4b88      	ldr	r3, [pc, #544]	; (8009990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009772:	f003 0303 	and.w	r3, r3, #3
 8009776:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009778:	4b85      	ldr	r3, [pc, #532]	; (8009990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800977a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800977c:	091b      	lsrs	r3, r3, #4
 800977e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009782:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009784:	4b82      	ldr	r3, [pc, #520]	; (8009990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009788:	f003 0301 	and.w	r3, r3, #1
 800978c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800978e:	4b80      	ldr	r3, [pc, #512]	; (8009990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009792:	08db      	lsrs	r3, r3, #3
 8009794:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	fb02 f303 	mul.w	r3, r2, r3
 800979e:	ee07 3a90 	vmov	s15, r3
 80097a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f000 80e1 	beq.w	8009974 <HAL_RCC_GetSysClockFreq+0x2b8>
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	f000 8083 	beq.w	80098c0 <HAL_RCC_GetSysClockFreq+0x204>
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2b02      	cmp	r3, #2
 80097be:	f200 80a1 	bhi.w	8009904 <HAL_RCC_GetSysClockFreq+0x248>
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d003      	beq.n	80097d0 <HAL_RCC_GetSysClockFreq+0x114>
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d056      	beq.n	800987c <HAL_RCC_GetSysClockFreq+0x1c0>
 80097ce:	e099      	b.n	8009904 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097d0:	4b6f      	ldr	r3, [pc, #444]	; (8009990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f003 0320 	and.w	r3, r3, #32
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d02d      	beq.n	8009838 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097dc:	4b6c      	ldr	r3, [pc, #432]	; (8009990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	08db      	lsrs	r3, r3, #3
 80097e2:	f003 0303 	and.w	r3, r3, #3
 80097e6:	4a6b      	ldr	r2, [pc, #428]	; (8009994 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80097e8:	fa22 f303 	lsr.w	r3, r2, r3
 80097ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	ee07 3a90 	vmov	s15, r3
 80097f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	ee07 3a90 	vmov	s15, r3
 80097fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009806:	4b62      	ldr	r3, [pc, #392]	; (8009990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800980e:	ee07 3a90 	vmov	s15, r3
 8009812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009816:	ed97 6a02 	vldr	s12, [r7, #8]
 800981a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80099a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800981e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800982a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800982e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009832:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009836:	e087      	b.n	8009948 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	ee07 3a90 	vmov	s15, r3
 800983e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009842:	eddf 6a58 	vldr	s13, [pc, #352]	; 80099a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800984a:	4b51      	ldr	r3, [pc, #324]	; (8009990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800984c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009852:	ee07 3a90 	vmov	s15, r3
 8009856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800985a:	ed97 6a02 	vldr	s12, [r7, #8]
 800985e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80099a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800986a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800986e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009876:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800987a:	e065      	b.n	8009948 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	ee07 3a90 	vmov	s15, r3
 8009882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009886:	eddf 6a48 	vldr	s13, [pc, #288]	; 80099a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800988a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800988e:	4b40      	ldr	r3, [pc, #256]	; (8009990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009896:	ee07 3a90 	vmov	s15, r3
 800989a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800989e:	ed97 6a02 	vldr	s12, [r7, #8]
 80098a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80099a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80098a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80098be:	e043      	b.n	8009948 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	ee07 3a90 	vmov	s15, r3
 80098c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80099ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80098ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098d2:	4b2f      	ldr	r3, [pc, #188]	; (8009990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098da:	ee07 3a90 	vmov	s15, r3
 80098de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80098e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80099a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80098ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009902:	e021      	b.n	8009948 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	ee07 3a90 	vmov	s15, r3
 800990a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800990e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80099a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009916:	4b1e      	ldr	r3, [pc, #120]	; (8009990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800991a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800991e:	ee07 3a90 	vmov	s15, r3
 8009922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009926:	ed97 6a02 	vldr	s12, [r7, #8]
 800992a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80099a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800992e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800993a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800993e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009942:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009946:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009948:	4b11      	ldr	r3, [pc, #68]	; (8009990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800994a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994c:	0a5b      	lsrs	r3, r3, #9
 800994e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009952:	3301      	adds	r3, #1
 8009954:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	ee07 3a90 	vmov	s15, r3
 800995c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009960:	edd7 6a07 	vldr	s13, [r7, #28]
 8009964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800996c:	ee17 3a90 	vmov	r3, s15
 8009970:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009972:	e005      	b.n	8009980 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009974:	2300      	movs	r3, #0
 8009976:	61bb      	str	r3, [r7, #24]
      break;
 8009978:	e002      	b.n	8009980 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800997a:	4b07      	ldr	r3, [pc, #28]	; (8009998 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800997c:	61bb      	str	r3, [r7, #24]
      break;
 800997e:	bf00      	nop
  }

  return sysclockfreq;
 8009980:	69bb      	ldr	r3, [r7, #24]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3724      	adds	r7, #36	; 0x24
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	58024400 	.word	0x58024400
 8009994:	03d09000 	.word	0x03d09000
 8009998:	003d0900 	.word	0x003d0900
 800999c:	007a1200 	.word	0x007a1200
 80099a0:	46000000 	.word	0x46000000
 80099a4:	4c742400 	.word	0x4c742400
 80099a8:	4a742400 	.word	0x4a742400
 80099ac:	4af42400 	.word	0x4af42400

080099b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80099b6:	f7ff fe81 	bl	80096bc <HAL_RCC_GetSysClockFreq>
 80099ba:	4602      	mov	r2, r0
 80099bc:	4b10      	ldr	r3, [pc, #64]	; (8009a00 <HAL_RCC_GetHCLKFreq+0x50>)
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	0a1b      	lsrs	r3, r3, #8
 80099c2:	f003 030f 	and.w	r3, r3, #15
 80099c6:	490f      	ldr	r1, [pc, #60]	; (8009a04 <HAL_RCC_GetHCLKFreq+0x54>)
 80099c8:	5ccb      	ldrb	r3, [r1, r3]
 80099ca:	f003 031f 	and.w	r3, r3, #31
 80099ce:	fa22 f303 	lsr.w	r3, r2, r3
 80099d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80099d4:	4b0a      	ldr	r3, [pc, #40]	; (8009a00 <HAL_RCC_GetHCLKFreq+0x50>)
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	f003 030f 	and.w	r3, r3, #15
 80099dc:	4a09      	ldr	r2, [pc, #36]	; (8009a04 <HAL_RCC_GetHCLKFreq+0x54>)
 80099de:	5cd3      	ldrb	r3, [r2, r3]
 80099e0:	f003 031f 	and.w	r3, r3, #31
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	fa22 f303 	lsr.w	r3, r2, r3
 80099ea:	4a07      	ldr	r2, [pc, #28]	; (8009a08 <HAL_RCC_GetHCLKFreq+0x58>)
 80099ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80099ee:	4a07      	ldr	r2, [pc, #28]	; (8009a0c <HAL_RCC_GetHCLKFreq+0x5c>)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80099f4:	4b04      	ldr	r3, [pc, #16]	; (8009a08 <HAL_RCC_GetHCLKFreq+0x58>)
 80099f6:	681b      	ldr	r3, [r3, #0]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	58024400 	.word	0x58024400
 8009a04:	0800f818 	.word	0x0800f818
 8009a08:	24000004 	.word	0x24000004
 8009a0c:	24000000 	.word	0x24000000

08009a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009a14:	f7ff ffcc 	bl	80099b0 <HAL_RCC_GetHCLKFreq>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	4b06      	ldr	r3, [pc, #24]	; (8009a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a1c:	69db      	ldr	r3, [r3, #28]
 8009a1e:	091b      	lsrs	r3, r3, #4
 8009a20:	f003 0307 	and.w	r3, r3, #7
 8009a24:	4904      	ldr	r1, [pc, #16]	; (8009a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a26:	5ccb      	ldrb	r3, [r1, r3]
 8009a28:	f003 031f 	and.w	r3, r3, #31
 8009a2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	58024400 	.word	0x58024400
 8009a38:	0800f818 	.word	0x0800f818

08009a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009a40:	f7ff ffb6 	bl	80099b0 <HAL_RCC_GetHCLKFreq>
 8009a44:	4602      	mov	r2, r0
 8009a46:	4b06      	ldr	r3, [pc, #24]	; (8009a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a48:	69db      	ldr	r3, [r3, #28]
 8009a4a:	0a1b      	lsrs	r3, r3, #8
 8009a4c:	f003 0307 	and.w	r3, r3, #7
 8009a50:	4904      	ldr	r1, [pc, #16]	; (8009a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a52:	5ccb      	ldrb	r3, [r1, r3]
 8009a54:	f003 031f 	and.w	r3, r3, #31
 8009a58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	58024400 	.word	0x58024400
 8009a64:	0800f818 	.word	0x0800f818

08009a68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a6c:	b0c6      	sub	sp, #280	; 0x118
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009a74:	2300      	movs	r3, #0
 8009a76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a88:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009a8c:	2500      	movs	r5, #0
 8009a8e:	ea54 0305 	orrs.w	r3, r4, r5
 8009a92:	d049      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a9e:	d02f      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009aa0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009aa4:	d828      	bhi.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009aa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009aaa:	d01a      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009aac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ab0:	d822      	bhi.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d003      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009aba:	d007      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009abc:	e01c      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009abe:	4bab      	ldr	r3, [pc, #684]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac2:	4aaa      	ldr	r2, [pc, #680]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009aca:	e01a      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	2102      	movs	r1, #2
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f001 fc25 	bl	800b324 <RCCEx_PLL2_Config>
 8009ada:	4603      	mov	r3, r0
 8009adc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009ae0:	e00f      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ae6:	3328      	adds	r3, #40	; 0x28
 8009ae8:	2102      	movs	r1, #2
 8009aea:	4618      	mov	r0, r3
 8009aec:	f001 fccc 	bl	800b488 <RCCEx_PLL3_Config>
 8009af0:	4603      	mov	r3, r0
 8009af2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009af6:	e004      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009afe:	e000      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10a      	bne.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009b0a:	4b98      	ldr	r3, [pc, #608]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b0e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b18:	4a94      	ldr	r2, [pc, #592]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b1a:	430b      	orrs	r3, r1
 8009b1c:	6513      	str	r3, [r2, #80]	; 0x50
 8009b1e:	e003      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009b34:	f04f 0900 	mov.w	r9, #0
 8009b38:	ea58 0309 	orrs.w	r3, r8, r9
 8009b3c:	d047      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b44:	2b04      	cmp	r3, #4
 8009b46:	d82a      	bhi.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009b48:	a201      	add	r2, pc, #4	; (adr r2, 8009b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4e:	bf00      	nop
 8009b50:	08009b65 	.word	0x08009b65
 8009b54:	08009b73 	.word	0x08009b73
 8009b58:	08009b89 	.word	0x08009b89
 8009b5c:	08009ba7 	.word	0x08009ba7
 8009b60:	08009ba7 	.word	0x08009ba7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b64:	4b81      	ldr	r3, [pc, #516]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b68:	4a80      	ldr	r2, [pc, #512]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b70:	e01a      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b76:	3308      	adds	r3, #8
 8009b78:	2100      	movs	r1, #0
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f001 fbd2 	bl	800b324 <RCCEx_PLL2_Config>
 8009b80:	4603      	mov	r3, r0
 8009b82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b86:	e00f      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b8c:	3328      	adds	r3, #40	; 0x28
 8009b8e:	2100      	movs	r1, #0
 8009b90:	4618      	mov	r0, r3
 8009b92:	f001 fc79 	bl	800b488 <RCCEx_PLL3_Config>
 8009b96:	4603      	mov	r3, r0
 8009b98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b9c:	e004      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009ba4:	e000      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ba8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d10a      	bne.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009bb0:	4b6e      	ldr	r3, [pc, #440]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bb4:	f023 0107 	bic.w	r1, r3, #7
 8009bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bbe:	4a6b      	ldr	r2, [pc, #428]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009bc0:	430b      	orrs	r3, r1
 8009bc2:	6513      	str	r3, [r2, #80]	; 0x50
 8009bc4:	e003      	b.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bc6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009bca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd6:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8009bda:	f04f 0b00 	mov.w	fp, #0
 8009bde:	ea5a 030b 	orrs.w	r3, sl, fp
 8009be2:	d05b      	beq.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009be8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009bec:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009bf0:	d03b      	beq.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009bf2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009bf6:	d834      	bhi.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009bf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009bfc:	d037      	beq.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009bfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c02:	d82e      	bhi.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009c04:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c08:	d033      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009c0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c0e:	d828      	bhi.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c14:	d01a      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c1a:	d822      	bhi.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d003      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009c20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c24:	d007      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009c26:	e01c      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c28:	4b50      	ldr	r3, [pc, #320]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2c:	4a4f      	ldr	r2, [pc, #316]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c34:	e01e      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c3a:	3308      	adds	r3, #8
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f001 fb70 	bl	800b324 <RCCEx_PLL2_Config>
 8009c44:	4603      	mov	r3, r0
 8009c46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009c4a:	e013      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c50:	3328      	adds	r3, #40	; 0x28
 8009c52:	2100      	movs	r1, #0
 8009c54:	4618      	mov	r0, r3
 8009c56:	f001 fc17 	bl	800b488 <RCCEx_PLL3_Config>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c60:	e008      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009c68:	e004      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009c6a:	bf00      	nop
 8009c6c:	e002      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009c6e:	bf00      	nop
 8009c70:	e000      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009c72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10b      	bne.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009c7c:	4b3b      	ldr	r3, [pc, #236]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c80:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009c8c:	4a37      	ldr	r2, [pc, #220]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c8e:	430b      	orrs	r3, r1
 8009c90:	6593      	str	r3, [r2, #88]	; 0x58
 8009c92:	e003      	b.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009ca8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009cac:	2300      	movs	r3, #0
 8009cae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009cb2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	d05d      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009cc4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009cc8:	d03b      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009cca:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009cce:	d834      	bhi.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009cd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cd4:	d037      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009cd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cda:	d82e      	bhi.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009cdc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009ce0:	d033      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009ce2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009ce6:	d828      	bhi.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009ce8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cec:	d01a      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009cee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cf2:	d822      	bhi.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d003      	beq.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009cfc:	d007      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009cfe:	e01c      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d00:	4b1a      	ldr	r3, [pc, #104]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d04:	4a19      	ldr	r2, [pc, #100]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d0c:	e01e      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d12:	3308      	adds	r3, #8
 8009d14:	2100      	movs	r1, #0
 8009d16:	4618      	mov	r0, r3
 8009d18:	f001 fb04 	bl	800b324 <RCCEx_PLL2_Config>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009d22:	e013      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d28:	3328      	adds	r3, #40	; 0x28
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f001 fbab 	bl	800b488 <RCCEx_PLL3_Config>
 8009d32:	4603      	mov	r3, r0
 8009d34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d38:	e008      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009d40:	e004      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009d42:	bf00      	nop
 8009d44:	e002      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009d46:	bf00      	nop
 8009d48:	e000      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10d      	bne.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009d54:	4b05      	ldr	r3, [pc, #20]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d58:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009d64:	4a01      	ldr	r2, [pc, #4]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d66:	430b      	orrs	r3, r1
 8009d68:	6593      	str	r3, [r2, #88]	; 0x58
 8009d6a:	e005      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009d6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009d84:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009d8e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009d92:	460b      	mov	r3, r1
 8009d94:	4313      	orrs	r3, r2
 8009d96:	d03a      	beq.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d9e:	2b30      	cmp	r3, #48	; 0x30
 8009da0:	d01f      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009da2:	2b30      	cmp	r3, #48	; 0x30
 8009da4:	d819      	bhi.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009da6:	2b20      	cmp	r3, #32
 8009da8:	d00c      	beq.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009daa:	2b20      	cmp	r3, #32
 8009dac:	d815      	bhi.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d019      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009db2:	2b10      	cmp	r3, #16
 8009db4:	d111      	bne.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009db6:	4baa      	ldr	r3, [pc, #680]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dba:	4aa9      	ldr	r2, [pc, #676]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009dc2:	e011      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dc8:	3308      	adds	r3, #8
 8009dca:	2102      	movs	r1, #2
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f001 faa9 	bl	800b324 <RCCEx_PLL2_Config>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009dd8:	e006      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009de0:	e002      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009de2:	bf00      	nop
 8009de4:	e000      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009de8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10a      	bne.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009df0:	4b9b      	ldr	r3, [pc, #620]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009df4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dfe:	4a98      	ldr	r2, [pc, #608]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009e00:	430b      	orrs	r3, r1
 8009e02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e04:	e003      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e0a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e16:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009e1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009e24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009e28:	460b      	mov	r3, r1
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	d051      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e38:	d035      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e3e:	d82e      	bhi.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009e40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e44:	d031      	beq.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009e46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e4a:	d828      	bhi.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e50:	d01a      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e56:	d822      	bhi.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d003      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e60:	d007      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009e62:	e01c      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e64:	4b7e      	ldr	r3, [pc, #504]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e68:	4a7d      	ldr	r2, [pc, #500]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009e70:	e01c      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e76:	3308      	adds	r3, #8
 8009e78:	2100      	movs	r1, #0
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f001 fa52 	bl	800b324 <RCCEx_PLL2_Config>
 8009e80:	4603      	mov	r3, r0
 8009e82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009e86:	e011      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e8c:	3328      	adds	r3, #40	; 0x28
 8009e8e:	2100      	movs	r1, #0
 8009e90:	4618      	mov	r0, r3
 8009e92:	f001 faf9 	bl	800b488 <RCCEx_PLL3_Config>
 8009e96:	4603      	mov	r3, r0
 8009e98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009e9c:	e006      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009ea4:	e002      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009ea6:	bf00      	nop
 8009ea8:	e000      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10a      	bne.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009eb4:	4b6a      	ldr	r3, [pc, #424]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eb8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ec2:	4a67      	ldr	r2, [pc, #412]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009ec4:	430b      	orrs	r3, r1
 8009ec6:	6513      	str	r3, [r2, #80]	; 0x50
 8009ec8:	e003      	b.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ece:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eda:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009ede:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009ee8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009eec:	460b      	mov	r3, r1
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	d053      	beq.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009efc:	d033      	beq.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009efe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f02:	d82c      	bhi.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009f04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f08:	d02f      	beq.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009f0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f0e:	d826      	bhi.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009f10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009f14:	d02b      	beq.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009f16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009f1a:	d820      	bhi.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009f1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f20:	d012      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009f22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f26:	d81a      	bhi.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d022      	beq.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f30:	d115      	bne.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f36:	3308      	adds	r3, #8
 8009f38:	2101      	movs	r1, #1
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f001 f9f2 	bl	800b324 <RCCEx_PLL2_Config>
 8009f40:	4603      	mov	r3, r0
 8009f42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009f46:	e015      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f4c:	3328      	adds	r3, #40	; 0x28
 8009f4e:	2101      	movs	r1, #1
 8009f50:	4618      	mov	r0, r3
 8009f52:	f001 fa99 	bl	800b488 <RCCEx_PLL3_Config>
 8009f56:	4603      	mov	r3, r0
 8009f58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009f5c:	e00a      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009f64:	e006      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009f66:	bf00      	nop
 8009f68:	e004      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009f6a:	bf00      	nop
 8009f6c:	e002      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009f6e:	bf00      	nop
 8009f70:	e000      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10a      	bne.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009f7c:	4b38      	ldr	r3, [pc, #224]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f80:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f8a:	4a35      	ldr	r2, [pc, #212]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f8c:	430b      	orrs	r3, r1
 8009f8e:	6513      	str	r3, [r2, #80]	; 0x50
 8009f90:	e003      	b.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f96:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009faa:	2300      	movs	r3, #0
 8009fac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009fb0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	d058      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fc6:	d033      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fcc:	d82c      	bhi.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fd2:	d02f      	beq.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fd8:	d826      	bhi.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009fda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fde:	d02b      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009fe0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fe4:	d820      	bhi.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009fe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fea:	d012      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009fec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ff0:	d81a      	bhi.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d022      	beq.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009ff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ffa:	d115      	bne.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a000:	3308      	adds	r3, #8
 800a002:	2101      	movs	r1, #1
 800a004:	4618      	mov	r0, r3
 800a006:	f001 f98d 	bl	800b324 <RCCEx_PLL2_Config>
 800a00a:	4603      	mov	r3, r0
 800a00c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a010:	e015      	b.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a016:	3328      	adds	r3, #40	; 0x28
 800a018:	2101      	movs	r1, #1
 800a01a:	4618      	mov	r0, r3
 800a01c:	f001 fa34 	bl	800b488 <RCCEx_PLL3_Config>
 800a020:	4603      	mov	r3, r0
 800a022:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a026:	e00a      	b.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a02e:	e006      	b.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a030:	bf00      	nop
 800a032:	e004      	b.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a034:	bf00      	nop
 800a036:	e002      	b.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a038:	bf00      	nop
 800a03a:	e000      	b.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a03c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a03e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10e      	bne.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a046:	4b06      	ldr	r3, [pc, #24]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a04a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a052:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a056:	4a02      	ldr	r2, [pc, #8]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a058:	430b      	orrs	r3, r1
 800a05a:	6593      	str	r3, [r2, #88]	; 0x58
 800a05c:	e006      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a05e:	bf00      	nop
 800a060:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a064:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a068:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a078:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a07c:	2300      	movs	r3, #0
 800a07e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a082:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a086:	460b      	mov	r3, r1
 800a088:	4313      	orrs	r3, r2
 800a08a:	d037      	beq.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a096:	d00e      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a09c:	d816      	bhi.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d018      	beq.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a0a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0a6:	d111      	bne.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0a8:	4bc4      	ldr	r3, [pc, #784]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ac:	4ac3      	ldr	r2, [pc, #780]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a0ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a0b4:	e00f      	b.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0ba:	3308      	adds	r3, #8
 800a0bc:	2101      	movs	r1, #1
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f001 f930 	bl	800b324 <RCCEx_PLL2_Config>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a0ca:	e004      	b.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a0d2:	e000      	b.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a0d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d10a      	bne.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a0de:	4bb7      	ldr	r3, [pc, #732]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a0e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0e2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a0e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0ec:	4ab3      	ldr	r2, [pc, #716]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a0ee:	430b      	orrs	r3, r1
 800a0f0:	6513      	str	r3, [r2, #80]	; 0x50
 800a0f2:	e003      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a0f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a0fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a108:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a10c:	2300      	movs	r3, #0
 800a10e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a112:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a116:	460b      	mov	r3, r1
 800a118:	4313      	orrs	r3, r2
 800a11a:	d039      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a122:	2b03      	cmp	r3, #3
 800a124:	d81c      	bhi.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a126:	a201      	add	r2, pc, #4	; (adr r2, 800a12c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12c:	0800a169 	.word	0x0800a169
 800a130:	0800a13d 	.word	0x0800a13d
 800a134:	0800a14b 	.word	0x0800a14b
 800a138:	0800a169 	.word	0x0800a169
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a13c:	4b9f      	ldr	r3, [pc, #636]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a140:	4a9e      	ldr	r2, [pc, #632]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a146:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a148:	e00f      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a14a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a14e:	3308      	adds	r3, #8
 800a150:	2102      	movs	r1, #2
 800a152:	4618      	mov	r0, r3
 800a154:	f001 f8e6 	bl	800b324 <RCCEx_PLL2_Config>
 800a158:	4603      	mov	r3, r0
 800a15a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a15e:	e004      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a166:	e000      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a16a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10a      	bne.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a172:	4b92      	ldr	r3, [pc, #584]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a176:	f023 0103 	bic.w	r1, r3, #3
 800a17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a17e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a180:	4a8e      	ldr	r2, [pc, #568]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a182:	430b      	orrs	r3, r1
 800a184:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a186:	e003      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a188:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a18c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a19c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	f000 8099 	beq.w	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a1b2:	4b83      	ldr	r3, [pc, #524]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a82      	ldr	r2, [pc, #520]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a1b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a1be:	f7fb f8b1 	bl	8005324 <HAL_GetTick>
 800a1c2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1c6:	e00b      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1c8:	f7fb f8ac 	bl	8005324 <HAL_GetTick>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a1d2:	1ad3      	subs	r3, r2, r3
 800a1d4:	2b64      	cmp	r3, #100	; 0x64
 800a1d6:	d903      	bls.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a1de:	e005      	b.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1e0:	4b77      	ldr	r3, [pc, #476]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d0ed      	beq.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a1ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d173      	bne.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a1f4:	4b71      	ldr	r3, [pc, #452]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a1f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a200:	4053      	eors	r3, r2
 800a202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a206:	2b00      	cmp	r3, #0
 800a208:	d015      	beq.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a20a:	4b6c      	ldr	r3, [pc, #432]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a20e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a212:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a216:	4b69      	ldr	r3, [pc, #420]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a21a:	4a68      	ldr	r2, [pc, #416]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a21c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a220:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a222:	4b66      	ldr	r3, [pc, #408]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a226:	4a65      	ldr	r2, [pc, #404]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a22c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a22e:	4a63      	ldr	r2, [pc, #396]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a234:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a23a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a23e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a242:	d118      	bne.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a244:	f7fb f86e 	bl	8005324 <HAL_GetTick>
 800a248:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a24c:	e00d      	b.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a24e:	f7fb f869 	bl	8005324 <HAL_GetTick>
 800a252:	4602      	mov	r2, r0
 800a254:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a258:	1ad2      	subs	r2, r2, r3
 800a25a:	f241 3388 	movw	r3, #5000	; 0x1388
 800a25e:	429a      	cmp	r2, r3
 800a260:	d903      	bls.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800a268:	e005      	b.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a26a:	4b54      	ldr	r3, [pc, #336]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a26c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a26e:	f003 0302 	and.w	r3, r3, #2
 800a272:	2b00      	cmp	r3, #0
 800a274:	d0eb      	beq.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a276:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d129      	bne.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a27e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a282:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a28a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a28e:	d10e      	bne.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a290:	4b4a      	ldr	r3, [pc, #296]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a29c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a2a0:	091a      	lsrs	r2, r3, #4
 800a2a2:	4b48      	ldr	r3, [pc, #288]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	4a45      	ldr	r2, [pc, #276]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2a8:	430b      	orrs	r3, r1
 800a2aa:	6113      	str	r3, [r2, #16]
 800a2ac:	e005      	b.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a2ae:	4b43      	ldr	r3, [pc, #268]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2b0:	691b      	ldr	r3, [r3, #16]
 800a2b2:	4a42      	ldr	r2, [pc, #264]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a2b8:	6113      	str	r3, [r2, #16]
 800a2ba:	4b40      	ldr	r3, [pc, #256]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2bc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a2be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a2c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2ca:	4a3c      	ldr	r2, [pc, #240]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2cc:	430b      	orrs	r3, r1
 800a2ce:	6713      	str	r3, [r2, #112]	; 0x70
 800a2d0:	e008      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a2d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800a2da:	e003      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ec:	f002 0301 	and.w	r3, r2, #1
 800a2f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a2fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a2fe:	460b      	mov	r3, r1
 800a300:	4313      	orrs	r3, r2
 800a302:	f000 808f 	beq.w	800a424 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a30a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a30c:	2b28      	cmp	r3, #40	; 0x28
 800a30e:	d871      	bhi.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a310:	a201      	add	r2, pc, #4	; (adr r2, 800a318 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a316:	bf00      	nop
 800a318:	0800a3fd 	.word	0x0800a3fd
 800a31c:	0800a3f5 	.word	0x0800a3f5
 800a320:	0800a3f5 	.word	0x0800a3f5
 800a324:	0800a3f5 	.word	0x0800a3f5
 800a328:	0800a3f5 	.word	0x0800a3f5
 800a32c:	0800a3f5 	.word	0x0800a3f5
 800a330:	0800a3f5 	.word	0x0800a3f5
 800a334:	0800a3f5 	.word	0x0800a3f5
 800a338:	0800a3c9 	.word	0x0800a3c9
 800a33c:	0800a3f5 	.word	0x0800a3f5
 800a340:	0800a3f5 	.word	0x0800a3f5
 800a344:	0800a3f5 	.word	0x0800a3f5
 800a348:	0800a3f5 	.word	0x0800a3f5
 800a34c:	0800a3f5 	.word	0x0800a3f5
 800a350:	0800a3f5 	.word	0x0800a3f5
 800a354:	0800a3f5 	.word	0x0800a3f5
 800a358:	0800a3df 	.word	0x0800a3df
 800a35c:	0800a3f5 	.word	0x0800a3f5
 800a360:	0800a3f5 	.word	0x0800a3f5
 800a364:	0800a3f5 	.word	0x0800a3f5
 800a368:	0800a3f5 	.word	0x0800a3f5
 800a36c:	0800a3f5 	.word	0x0800a3f5
 800a370:	0800a3f5 	.word	0x0800a3f5
 800a374:	0800a3f5 	.word	0x0800a3f5
 800a378:	0800a3fd 	.word	0x0800a3fd
 800a37c:	0800a3f5 	.word	0x0800a3f5
 800a380:	0800a3f5 	.word	0x0800a3f5
 800a384:	0800a3f5 	.word	0x0800a3f5
 800a388:	0800a3f5 	.word	0x0800a3f5
 800a38c:	0800a3f5 	.word	0x0800a3f5
 800a390:	0800a3f5 	.word	0x0800a3f5
 800a394:	0800a3f5 	.word	0x0800a3f5
 800a398:	0800a3fd 	.word	0x0800a3fd
 800a39c:	0800a3f5 	.word	0x0800a3f5
 800a3a0:	0800a3f5 	.word	0x0800a3f5
 800a3a4:	0800a3f5 	.word	0x0800a3f5
 800a3a8:	0800a3f5 	.word	0x0800a3f5
 800a3ac:	0800a3f5 	.word	0x0800a3f5
 800a3b0:	0800a3f5 	.word	0x0800a3f5
 800a3b4:	0800a3f5 	.word	0x0800a3f5
 800a3b8:	0800a3fd 	.word	0x0800a3fd
 800a3bc:	58024400 	.word	0x58024400
 800a3c0:	58024800 	.word	0x58024800
 800a3c4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3cc:	3308      	adds	r3, #8
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f000 ffa7 	bl	800b324 <RCCEx_PLL2_Config>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a3dc:	e00f      	b.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3e2:	3328      	adds	r3, #40	; 0x28
 800a3e4:	2101      	movs	r1, #1
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f001 f84e 	bl	800b488 <RCCEx_PLL3_Config>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a3f2:	e004      	b.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a3fa:	e000      	b.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a3fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a402:	2b00      	cmp	r3, #0
 800a404:	d10a      	bne.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a406:	4bbf      	ldr	r3, [pc, #764]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a40a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a40e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a412:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a414:	4abb      	ldr	r2, [pc, #748]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a416:	430b      	orrs	r3, r1
 800a418:	6553      	str	r3, [r2, #84]	; 0x54
 800a41a:	e003      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a41c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a420:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42c:	f002 0302 	and.w	r3, r2, #2
 800a430:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a434:	2300      	movs	r3, #0
 800a436:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a43a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a43e:	460b      	mov	r3, r1
 800a440:	4313      	orrs	r3, r2
 800a442:	d041      	beq.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a44a:	2b05      	cmp	r3, #5
 800a44c:	d824      	bhi.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a44e:	a201      	add	r2, pc, #4	; (adr r2, 800a454 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a454:	0800a4a1 	.word	0x0800a4a1
 800a458:	0800a46d 	.word	0x0800a46d
 800a45c:	0800a483 	.word	0x0800a483
 800a460:	0800a4a1 	.word	0x0800a4a1
 800a464:	0800a4a1 	.word	0x0800a4a1
 800a468:	0800a4a1 	.word	0x0800a4a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a46c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a470:	3308      	adds	r3, #8
 800a472:	2101      	movs	r1, #1
 800a474:	4618      	mov	r0, r3
 800a476:	f000 ff55 	bl	800b324 <RCCEx_PLL2_Config>
 800a47a:	4603      	mov	r3, r0
 800a47c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a480:	e00f      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a486:	3328      	adds	r3, #40	; 0x28
 800a488:	2101      	movs	r1, #1
 800a48a:	4618      	mov	r0, r3
 800a48c:	f000 fffc 	bl	800b488 <RCCEx_PLL3_Config>
 800a490:	4603      	mov	r3, r0
 800a492:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a496:	e004      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a49e:	e000      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a4a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10a      	bne.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a4aa:	4b96      	ldr	r3, [pc, #600]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a4ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ae:	f023 0107 	bic.w	r1, r3, #7
 800a4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4b8:	4a92      	ldr	r2, [pc, #584]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a4ba:	430b      	orrs	r3, r1
 800a4bc:	6553      	str	r3, [r2, #84]	; 0x54
 800a4be:	e003      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a4c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	f002 0304 	and.w	r3, r2, #4
 800a4d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a4de:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	d044      	beq.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a4e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4f0:	2b05      	cmp	r3, #5
 800a4f2:	d825      	bhi.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a4f4:	a201      	add	r2, pc, #4	; (adr r2, 800a4fc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fa:	bf00      	nop
 800a4fc:	0800a549 	.word	0x0800a549
 800a500:	0800a515 	.word	0x0800a515
 800a504:	0800a52b 	.word	0x0800a52b
 800a508:	0800a549 	.word	0x0800a549
 800a50c:	0800a549 	.word	0x0800a549
 800a510:	0800a549 	.word	0x0800a549
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a518:	3308      	adds	r3, #8
 800a51a:	2101      	movs	r1, #1
 800a51c:	4618      	mov	r0, r3
 800a51e:	f000 ff01 	bl	800b324 <RCCEx_PLL2_Config>
 800a522:	4603      	mov	r3, r0
 800a524:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a528:	e00f      	b.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a52e:	3328      	adds	r3, #40	; 0x28
 800a530:	2101      	movs	r1, #1
 800a532:	4618      	mov	r0, r3
 800a534:	f000 ffa8 	bl	800b488 <RCCEx_PLL3_Config>
 800a538:	4603      	mov	r3, r0
 800a53a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a53e:	e004      	b.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a546:	e000      	b.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a54a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10b      	bne.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a552:	4b6c      	ldr	r3, [pc, #432]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a556:	f023 0107 	bic.w	r1, r3, #7
 800a55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a55e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a562:	4a68      	ldr	r2, [pc, #416]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a564:	430b      	orrs	r3, r1
 800a566:	6593      	str	r3, [r2, #88]	; 0x58
 800a568:	e003      	b.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a56a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a56e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57a:	f002 0320 	and.w	r3, r2, #32
 800a57e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a582:	2300      	movs	r3, #0
 800a584:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a588:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a58c:	460b      	mov	r3, r1
 800a58e:	4313      	orrs	r3, r2
 800a590:	d055      	beq.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a59a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a59e:	d033      	beq.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a5a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5a4:	d82c      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a5a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5aa:	d02f      	beq.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a5ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5b0:	d826      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a5b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a5b6:	d02b      	beq.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a5b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a5bc:	d820      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a5be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5c2:	d012      	beq.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a5c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5c8:	d81a      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d022      	beq.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a5ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5d2:	d115      	bne.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5d8:	3308      	adds	r3, #8
 800a5da:	2100      	movs	r1, #0
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f000 fea1 	bl	800b324 <RCCEx_PLL2_Config>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a5e8:	e015      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ee:	3328      	adds	r3, #40	; 0x28
 800a5f0:	2102      	movs	r1, #2
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f000 ff48 	bl	800b488 <RCCEx_PLL3_Config>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a5fe:	e00a      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a606:	e006      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a608:	bf00      	nop
 800a60a:	e004      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a60c:	bf00      	nop
 800a60e:	e002      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a610:	bf00      	nop
 800a612:	e000      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a614:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a616:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d10b      	bne.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a61e:	4b39      	ldr	r3, [pc, #228]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a622:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a62a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a62e:	4a35      	ldr	r2, [pc, #212]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a630:	430b      	orrs	r3, r1
 800a632:	6553      	str	r3, [r2, #84]	; 0x54
 800a634:	e003      	b.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a636:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a63a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a63e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a646:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a64a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a64e:	2300      	movs	r3, #0
 800a650:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a654:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a658:	460b      	mov	r3, r1
 800a65a:	4313      	orrs	r3, r2
 800a65c:	d058      	beq.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a662:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a666:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a66a:	d033      	beq.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a66c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a670:	d82c      	bhi.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a676:	d02f      	beq.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a67c:	d826      	bhi.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a67e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a682:	d02b      	beq.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a684:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a688:	d820      	bhi.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a68a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a68e:	d012      	beq.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a694:	d81a      	bhi.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a696:	2b00      	cmp	r3, #0
 800a698:	d022      	beq.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a69a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a69e:	d115      	bne.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6a4:	3308      	adds	r3, #8
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f000 fe3b 	bl	800b324 <RCCEx_PLL2_Config>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a6b4:	e015      	b.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ba:	3328      	adds	r3, #40	; 0x28
 800a6bc:	2102      	movs	r1, #2
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f000 fee2 	bl	800b488 <RCCEx_PLL3_Config>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a6ca:	e00a      	b.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a6d2:	e006      	b.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a6d4:	bf00      	nop
 800a6d6:	e004      	b.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a6d8:	bf00      	nop
 800a6da:	e002      	b.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a6dc:	bf00      	nop
 800a6de:	e000      	b.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a6e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10e      	bne.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a6ea:	4b06      	ldr	r3, [pc, #24]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a6ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ee:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6fa:	4a02      	ldr	r2, [pc, #8]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a6fc:	430b      	orrs	r3, r1
 800a6fe:	6593      	str	r3, [r2, #88]	; 0x58
 800a700:	e006      	b.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a702:	bf00      	nop
 800a704:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a708:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a70c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a718:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a71c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a720:	2300      	movs	r3, #0
 800a722:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a726:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a72a:	460b      	mov	r3, r1
 800a72c:	4313      	orrs	r3, r2
 800a72e:	d055      	beq.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a734:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a738:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a73c:	d033      	beq.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a73e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a742:	d82c      	bhi.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a748:	d02f      	beq.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a74a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a74e:	d826      	bhi.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a750:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a754:	d02b      	beq.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a756:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a75a:	d820      	bhi.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a75c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a760:	d012      	beq.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a766:	d81a      	bhi.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d022      	beq.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a76c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a770:	d115      	bne.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a776:	3308      	adds	r3, #8
 800a778:	2100      	movs	r1, #0
 800a77a:	4618      	mov	r0, r3
 800a77c:	f000 fdd2 	bl	800b324 <RCCEx_PLL2_Config>
 800a780:	4603      	mov	r3, r0
 800a782:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a786:	e015      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a78c:	3328      	adds	r3, #40	; 0x28
 800a78e:	2102      	movs	r1, #2
 800a790:	4618      	mov	r0, r3
 800a792:	f000 fe79 	bl	800b488 <RCCEx_PLL3_Config>
 800a796:	4603      	mov	r3, r0
 800a798:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a79c:	e00a      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a7a4:	e006      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a7a6:	bf00      	nop
 800a7a8:	e004      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a7aa:	bf00      	nop
 800a7ac:	e002      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a7ae:	bf00      	nop
 800a7b0:	e000      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a7b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d10b      	bne.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a7bc:	4ba0      	ldr	r3, [pc, #640]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a7be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7c0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a7c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a7cc:	4a9c      	ldr	r2, [pc, #624]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a7ce:	430b      	orrs	r3, r1
 800a7d0:	6593      	str	r3, [r2, #88]	; 0x58
 800a7d2:	e003      	b.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e4:	f002 0308 	and.w	r3, r2, #8
 800a7e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a7f2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	d01e      	beq.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a7fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a808:	d10c      	bne.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a80e:	3328      	adds	r3, #40	; 0x28
 800a810:	2102      	movs	r1, #2
 800a812:	4618      	mov	r0, r3
 800a814:	f000 fe38 	bl	800b488 <RCCEx_PLL3_Config>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d002      	beq.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a824:	4b86      	ldr	r3, [pc, #536]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a828:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a834:	4a82      	ldr	r2, [pc, #520]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a836:	430b      	orrs	r3, r1
 800a838:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	f002 0310 	and.w	r3, r2, #16
 800a846:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a84a:	2300      	movs	r3, #0
 800a84c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a850:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a854:	460b      	mov	r3, r1
 800a856:	4313      	orrs	r3, r2
 800a858:	d01e      	beq.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a85e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a866:	d10c      	bne.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a86c:	3328      	adds	r3, #40	; 0x28
 800a86e:	2102      	movs	r1, #2
 800a870:	4618      	mov	r0, r3
 800a872:	f000 fe09 	bl	800b488 <RCCEx_PLL3_Config>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d002      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a882:	4b6f      	ldr	r3, [pc, #444]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a886:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a88a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a88e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a892:	4a6b      	ldr	r2, [pc, #428]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a894:	430b      	orrs	r3, r1
 800a896:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a8a4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a8aa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	d03e      	beq.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a8bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8c0:	d022      	beq.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a8c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8c6:	d81b      	bhi.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d003      	beq.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a8cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8d0:	d00b      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a8d2:	e015      	b.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d8:	3308      	adds	r3, #8
 800a8da:	2100      	movs	r1, #0
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f000 fd21 	bl	800b324 <RCCEx_PLL2_Config>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a8e8:	e00f      	b.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ee:	3328      	adds	r3, #40	; 0x28
 800a8f0:	2102      	movs	r1, #2
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 fdc8 	bl	800b488 <RCCEx_PLL3_Config>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a8fe:	e004      	b.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a906:	e000      	b.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a90a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d10b      	bne.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a912:	4b4b      	ldr	r3, [pc, #300]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a916:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a91e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a922:	4a47      	ldr	r2, [pc, #284]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a924:	430b      	orrs	r3, r1
 800a926:	6593      	str	r3, [r2, #88]	; 0x58
 800a928:	e003      	b.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a92a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a92e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a93e:	673b      	str	r3, [r7, #112]	; 0x70
 800a940:	2300      	movs	r3, #0
 800a942:	677b      	str	r3, [r7, #116]	; 0x74
 800a944:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a948:	460b      	mov	r3, r1
 800a94a:	4313      	orrs	r3, r2
 800a94c:	d03b      	beq.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a94e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a956:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a95a:	d01f      	beq.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a95c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a960:	d818      	bhi.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a966:	d003      	beq.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a968:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a96c:	d007      	beq.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a96e:	e011      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a970:	4b33      	ldr	r3, [pc, #204]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a974:	4a32      	ldr	r2, [pc, #200]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a97a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a97c:	e00f      	b.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a97e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a982:	3328      	adds	r3, #40	; 0x28
 800a984:	2101      	movs	r1, #1
 800a986:	4618      	mov	r0, r3
 800a988:	f000 fd7e 	bl	800b488 <RCCEx_PLL3_Config>
 800a98c:	4603      	mov	r3, r0
 800a98e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a992:	e004      	b.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a99a:	e000      	b.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a99c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a99e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10b      	bne.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a9a6:	4b26      	ldr	r3, [pc, #152]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9b6:	4a22      	ldr	r2, [pc, #136]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9b8:	430b      	orrs	r3, r1
 800a9ba:	6553      	str	r3, [r2, #84]	; 0x54
 800a9bc:	e003      	b.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a9c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ce:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a9d2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a9d8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a9dc:	460b      	mov	r3, r1
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	d034      	beq.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a9e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d003      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a9ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9f0:	d007      	beq.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a9f2:	e011      	b.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9f4:	4b12      	ldr	r3, [pc, #72]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f8:	4a11      	ldr	r2, [pc, #68]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800aa00:	e00e      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa06:	3308      	adds	r3, #8
 800aa08:	2102      	movs	r1, #2
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 fc8a 	bl	800b324 <RCCEx_PLL2_Config>
 800aa10:	4603      	mov	r3, r0
 800aa12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800aa16:	e003      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10d      	bne.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aa28:	4b05      	ldr	r3, [pc, #20]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aa30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa36:	4a02      	ldr	r2, [pc, #8]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa38:	430b      	orrs	r3, r1
 800aa3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa3c:	e006      	b.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800aa3e:	bf00      	nop
 800aa40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aa4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800aa58:	663b      	str	r3, [r7, #96]	; 0x60
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	667b      	str	r3, [r7, #100]	; 0x64
 800aa5e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800aa62:	460b      	mov	r3, r1
 800aa64:	4313      	orrs	r3, r2
 800aa66:	d00c      	beq.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa6c:	3328      	adds	r3, #40	; 0x28
 800aa6e:	2102      	movs	r1, #2
 800aa70:	4618      	mov	r0, r3
 800aa72:	f000 fd09 	bl	800b488 <RCCEx_PLL3_Config>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d002      	beq.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aa82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800aa8e:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa90:	2300      	movs	r3, #0
 800aa92:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa94:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800aa98:	460b      	mov	r3, r1
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	d036      	beq.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800aa9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aaa8:	d018      	beq.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800aaaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aaae:	d811      	bhi.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800aab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aab4:	d014      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800aab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aaba:	d80b      	bhi.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d011      	beq.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800aac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aac4:	d106      	bne.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aac6:	4bb7      	ldr	r3, [pc, #732]	; (800ada4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaca:	4ab6      	ldr	r2, [pc, #728]	; (800ada4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aacc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aad0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800aad2:	e008      	b.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aad4:	2301      	movs	r3, #1
 800aad6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aada:	e004      	b.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800aadc:	bf00      	nop
 800aade:	e002      	b.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800aae0:	bf00      	nop
 800aae2:	e000      	b.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800aae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aae6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d10a      	bne.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aaee:	4bad      	ldr	r3, [pc, #692]	; (800ada4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aaf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaf2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800aaf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aafa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aafc:	4aa9      	ldr	r2, [pc, #676]	; (800ada4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aafe:	430b      	orrs	r3, r1
 800ab00:	6553      	str	r3, [r2, #84]	; 0x54
 800ab02:	e003      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ab0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab14:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ab18:	653b      	str	r3, [r7, #80]	; 0x50
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	657b      	str	r3, [r7, #84]	; 0x54
 800ab1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ab22:	460b      	mov	r3, r1
 800ab24:	4313      	orrs	r3, r2
 800ab26:	d009      	beq.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ab28:	4b9e      	ldr	r3, [pc, #632]	; (800ada4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab2c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ab30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab36:	4a9b      	ldr	r2, [pc, #620]	; (800ada4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab38:	430b      	orrs	r3, r1
 800ab3a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ab3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab44:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ab48:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab4e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ab52:	460b      	mov	r3, r1
 800ab54:	4313      	orrs	r3, r2
 800ab56:	d009      	beq.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ab58:	4b92      	ldr	r3, [pc, #584]	; (800ada4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab5c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ab60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab66:	4a8f      	ldr	r2, [pc, #572]	; (800ada4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab68:	430b      	orrs	r3, r1
 800ab6a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ab6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab74:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ab78:	643b      	str	r3, [r7, #64]	; 0x40
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	647b      	str	r3, [r7, #68]	; 0x44
 800ab7e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ab82:	460b      	mov	r3, r1
 800ab84:	4313      	orrs	r3, r2
 800ab86:	d00e      	beq.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ab88:	4b86      	ldr	r3, [pc, #536]	; (800ada4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	4a85      	ldr	r2, [pc, #532]	; (800ada4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ab92:	6113      	str	r3, [r2, #16]
 800ab94:	4b83      	ldr	r3, [pc, #524]	; (800ada4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab96:	6919      	ldr	r1, [r3, #16]
 800ab98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800aba0:	4a80      	ldr	r2, [pc, #512]	; (800ada4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aba2:	430b      	orrs	r3, r1
 800aba4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800aba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800abb2:	63bb      	str	r3, [r7, #56]	; 0x38
 800abb4:	2300      	movs	r3, #0
 800abb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abb8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800abbc:	460b      	mov	r3, r1
 800abbe:	4313      	orrs	r3, r2
 800abc0:	d009      	beq.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800abc2:	4b78      	ldr	r3, [pc, #480]	; (800ada4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800abc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abc6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800abca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abd0:	4a74      	ldr	r2, [pc, #464]	; (800ada4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800abd2:	430b      	orrs	r3, r1
 800abd4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800abd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abde:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800abe2:	633b      	str	r3, [r7, #48]	; 0x30
 800abe4:	2300      	movs	r3, #0
 800abe6:	637b      	str	r3, [r7, #52]	; 0x34
 800abe8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800abec:	460b      	mov	r3, r1
 800abee:	4313      	orrs	r3, r2
 800abf0:	d00a      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800abf2:	4b6c      	ldr	r3, [pc, #432]	; (800ada4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800abf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abf6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800abfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac02:	4a68      	ldr	r2, [pc, #416]	; (800ada4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac04:	430b      	orrs	r3, r1
 800ac06:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ac08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac10:	2100      	movs	r1, #0
 800ac12:	62b9      	str	r1, [r7, #40]	; 0x28
 800ac14:	f003 0301 	and.w	r3, r3, #1
 800ac18:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac1a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ac1e:	460b      	mov	r3, r1
 800ac20:	4313      	orrs	r3, r2
 800ac22:	d011      	beq.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac28:	3308      	adds	r3, #8
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 fb79 	bl	800b324 <RCCEx_PLL2_Config>
 800ac32:	4603      	mov	r3, r0
 800ac34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ac38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d003      	beq.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ac48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac50:	2100      	movs	r1, #0
 800ac52:	6239      	str	r1, [r7, #32]
 800ac54:	f003 0302 	and.w	r3, r3, #2
 800ac58:	627b      	str	r3, [r7, #36]	; 0x24
 800ac5a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ac5e:	460b      	mov	r3, r1
 800ac60:	4313      	orrs	r3, r2
 800ac62:	d011      	beq.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac68:	3308      	adds	r3, #8
 800ac6a:	2101      	movs	r1, #1
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f000 fb59 	bl	800b324 <RCCEx_PLL2_Config>
 800ac72:	4603      	mov	r3, r0
 800ac74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ac78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d003      	beq.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ac88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac90:	2100      	movs	r1, #0
 800ac92:	61b9      	str	r1, [r7, #24]
 800ac94:	f003 0304 	and.w	r3, r3, #4
 800ac98:	61fb      	str	r3, [r7, #28]
 800ac9a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ac9e:	460b      	mov	r3, r1
 800aca0:	4313      	orrs	r3, r2
 800aca2:	d011      	beq.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca8:	3308      	adds	r3, #8
 800acaa:	2102      	movs	r1, #2
 800acac:	4618      	mov	r0, r3
 800acae:	f000 fb39 	bl	800b324 <RCCEx_PLL2_Config>
 800acb2:	4603      	mov	r3, r0
 800acb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800acb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d003      	beq.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acc4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800acc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800accc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd0:	2100      	movs	r1, #0
 800acd2:	6139      	str	r1, [r7, #16]
 800acd4:	f003 0308 	and.w	r3, r3, #8
 800acd8:	617b      	str	r3, [r7, #20]
 800acda:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800acde:	460b      	mov	r3, r1
 800ace0:	4313      	orrs	r3, r2
 800ace2:	d011      	beq.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ace4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace8:	3328      	adds	r3, #40	; 0x28
 800acea:	2100      	movs	r1, #0
 800acec:	4618      	mov	r0, r3
 800acee:	f000 fbcb 	bl	800b488 <RCCEx_PLL3_Config>
 800acf2:	4603      	mov	r3, r0
 800acf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800acf8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d003      	beq.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ad08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad10:	2100      	movs	r1, #0
 800ad12:	60b9      	str	r1, [r7, #8]
 800ad14:	f003 0310 	and.w	r3, r3, #16
 800ad18:	60fb      	str	r3, [r7, #12]
 800ad1a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ad1e:	460b      	mov	r3, r1
 800ad20:	4313      	orrs	r3, r2
 800ad22:	d011      	beq.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad28:	3328      	adds	r3, #40	; 0x28
 800ad2a:	2101      	movs	r1, #1
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f000 fbab 	bl	800b488 <RCCEx_PLL3_Config>
 800ad32:	4603      	mov	r3, r0
 800ad34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ad38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d003      	beq.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ad48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad50:	2100      	movs	r1, #0
 800ad52:	6039      	str	r1, [r7, #0]
 800ad54:	f003 0320 	and.w	r3, r3, #32
 800ad58:	607b      	str	r3, [r7, #4]
 800ad5a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ad5e:	460b      	mov	r3, r1
 800ad60:	4313      	orrs	r3, r2
 800ad62:	d011      	beq.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad68:	3328      	adds	r3, #40	; 0x28
 800ad6a:	2102      	movs	r1, #2
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f000 fb8b 	bl	800b488 <RCCEx_PLL3_Config>
 800ad72:	4603      	mov	r3, r0
 800ad74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ad78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d003      	beq.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800ad88:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d101      	bne.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800ad90:	2300      	movs	r3, #0
 800ad92:	e000      	b.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ada2:	bf00      	nop
 800ada4:	58024400 	.word	0x58024400

0800ada8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800adac:	f7fe fe00 	bl	80099b0 <HAL_RCC_GetHCLKFreq>
 800adb0:	4602      	mov	r2, r0
 800adb2:	4b06      	ldr	r3, [pc, #24]	; (800adcc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800adb4:	6a1b      	ldr	r3, [r3, #32]
 800adb6:	091b      	lsrs	r3, r3, #4
 800adb8:	f003 0307 	and.w	r3, r3, #7
 800adbc:	4904      	ldr	r1, [pc, #16]	; (800add0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800adbe:	5ccb      	ldrb	r3, [r1, r3]
 800adc0:	f003 031f 	and.w	r3, r3, #31
 800adc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800adc8:	4618      	mov	r0, r3
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	58024400 	.word	0x58024400
 800add0:	0800f818 	.word	0x0800f818

0800add4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800add4:	b480      	push	{r7}
 800add6:	b089      	sub	sp, #36	; 0x24
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800addc:	4ba1      	ldr	r3, [pc, #644]	; (800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade0:	f003 0303 	and.w	r3, r3, #3
 800ade4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ade6:	4b9f      	ldr	r3, [pc, #636]	; (800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ade8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adea:	0b1b      	lsrs	r3, r3, #12
 800adec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800adf0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800adf2:	4b9c      	ldr	r3, [pc, #624]	; (800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf6:	091b      	lsrs	r3, r3, #4
 800adf8:	f003 0301 	and.w	r3, r3, #1
 800adfc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800adfe:	4b99      	ldr	r3, [pc, #612]	; (800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae02:	08db      	lsrs	r3, r3, #3
 800ae04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae08:	693a      	ldr	r2, [r7, #16]
 800ae0a:	fb02 f303 	mul.w	r3, r2, r3
 800ae0e:	ee07 3a90 	vmov	s15, r3
 800ae12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f000 8111 	beq.w	800b044 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	f000 8083 	beq.w	800af30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	f200 80a1 	bhi.w	800af74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d003      	beq.n	800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d056      	beq.n	800aeec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ae3e:	e099      	b.n	800af74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae40:	4b88      	ldr	r3, [pc, #544]	; (800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f003 0320 	and.w	r3, r3, #32
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d02d      	beq.n	800aea8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae4c:	4b85      	ldr	r3, [pc, #532]	; (800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	08db      	lsrs	r3, r3, #3
 800ae52:	f003 0303 	and.w	r3, r3, #3
 800ae56:	4a84      	ldr	r2, [pc, #528]	; (800b068 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ae58:	fa22 f303 	lsr.w	r3, r2, r3
 800ae5c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	ee07 3a90 	vmov	s15, r3
 800ae64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	ee07 3a90 	vmov	s15, r3
 800ae6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae76:	4b7b      	ldr	r3, [pc, #492]	; (800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae7e:	ee07 3a90 	vmov	s15, r3
 800ae82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b06c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aea2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aea6:	e087      	b.n	800afb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	ee07 3a90 	vmov	s15, r3
 800aeae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b070 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aeb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeba:	4b6a      	ldr	r3, [pc, #424]	; (800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aec2:	ee07 3a90 	vmov	s15, r3
 800aec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeca:	ed97 6a03 	vldr	s12, [r7, #12]
 800aece:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b06c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aeea:	e065      	b.n	800afb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	ee07 3a90 	vmov	s15, r3
 800aef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aef6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aefa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aefe:	4b59      	ldr	r3, [pc, #356]	; (800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af06:	ee07 3a90 	vmov	s15, r3
 800af0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af12:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b06c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af2e:	e043      	b.n	800afb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	ee07 3a90 	vmov	s15, r3
 800af36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800af3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af42:	4b48      	ldr	r3, [pc, #288]	; (800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af4a:	ee07 3a90 	vmov	s15, r3
 800af4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af52:	ed97 6a03 	vldr	s12, [r7, #12]
 800af56:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b06c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af72:	e021      	b.n	800afb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	ee07 3a90 	vmov	s15, r3
 800af7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af86:	4b37      	ldr	r3, [pc, #220]	; (800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af8e:	ee07 3a90 	vmov	s15, r3
 800af92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af96:	ed97 6a03 	vldr	s12, [r7, #12]
 800af9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b06c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afb6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800afb8:	4b2a      	ldr	r3, [pc, #168]	; (800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afbc:	0a5b      	lsrs	r3, r3, #9
 800afbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afc2:	ee07 3a90 	vmov	s15, r3
 800afc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afd2:	edd7 6a07 	vldr	s13, [r7, #28]
 800afd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afde:	ee17 2a90 	vmov	r2, s15
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800afe6:	4b1f      	ldr	r3, [pc, #124]	; (800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afea:	0c1b      	lsrs	r3, r3, #16
 800afec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aff0:	ee07 3a90 	vmov	s15, r3
 800aff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aff8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800affc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b000:	edd7 6a07 	vldr	s13, [r7, #28]
 800b004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b00c:	ee17 2a90 	vmov	r2, s15
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b014:	4b13      	ldr	r3, [pc, #76]	; (800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b018:	0e1b      	lsrs	r3, r3, #24
 800b01a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b01e:	ee07 3a90 	vmov	s15, r3
 800b022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b026:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b02a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b02e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b03a:	ee17 2a90 	vmov	r2, s15
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b042:	e008      	b.n	800b056 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2200      	movs	r2, #0
 800b04e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	609a      	str	r2, [r3, #8]
}
 800b056:	bf00      	nop
 800b058:	3724      	adds	r7, #36	; 0x24
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	58024400 	.word	0x58024400
 800b068:	03d09000 	.word	0x03d09000
 800b06c:	46000000 	.word	0x46000000
 800b070:	4c742400 	.word	0x4c742400
 800b074:	4a742400 	.word	0x4a742400
 800b078:	4af42400 	.word	0x4af42400

0800b07c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b089      	sub	sp, #36	; 0x24
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b084:	4ba1      	ldr	r3, [pc, #644]	; (800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b088:	f003 0303 	and.w	r3, r3, #3
 800b08c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b08e:	4b9f      	ldr	r3, [pc, #636]	; (800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b092:	0d1b      	lsrs	r3, r3, #20
 800b094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b098:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b09a:	4b9c      	ldr	r3, [pc, #624]	; (800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09e:	0a1b      	lsrs	r3, r3, #8
 800b0a0:	f003 0301 	and.w	r3, r3, #1
 800b0a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b0a6:	4b99      	ldr	r3, [pc, #612]	; (800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0aa:	08db      	lsrs	r3, r3, #3
 800b0ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0b0:	693a      	ldr	r2, [r7, #16]
 800b0b2:	fb02 f303 	mul.w	r3, r2, r3
 800b0b6:	ee07 3a90 	vmov	s15, r3
 800b0ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	f000 8111 	beq.w	800b2ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	f000 8083 	beq.w	800b1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	f200 80a1 	bhi.w	800b21c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d003      	beq.n	800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d056      	beq.n	800b194 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b0e6:	e099      	b.n	800b21c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0e8:	4b88      	ldr	r3, [pc, #544]	; (800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f003 0320 	and.w	r3, r3, #32
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d02d      	beq.n	800b150 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0f4:	4b85      	ldr	r3, [pc, #532]	; (800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	08db      	lsrs	r3, r3, #3
 800b0fa:	f003 0303 	and.w	r3, r3, #3
 800b0fe:	4a84      	ldr	r2, [pc, #528]	; (800b310 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b100:	fa22 f303 	lsr.w	r3, r2, r3
 800b104:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	ee07 3a90 	vmov	s15, r3
 800b10c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	ee07 3a90 	vmov	s15, r3
 800b116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b11a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b11e:	4b7b      	ldr	r3, [pc, #492]	; (800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b126:	ee07 3a90 	vmov	s15, r3
 800b12a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b12e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b132:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b314 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b13a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b13e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b14a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b14e:	e087      	b.n	800b260 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	ee07 3a90 	vmov	s15, r3
 800b156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b15a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b318 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b15e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b162:	4b6a      	ldr	r3, [pc, #424]	; (800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b16a:	ee07 3a90 	vmov	s15, r3
 800b16e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b172:	ed97 6a03 	vldr	s12, [r7, #12]
 800b176:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b314 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b17a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b17e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b18a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b18e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b192:	e065      	b.n	800b260 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	ee07 3a90 	vmov	s15, r3
 800b19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b19e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b31c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b1a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1a6:	4b59      	ldr	r3, [pc, #356]	; (800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ae:	ee07 3a90 	vmov	s15, r3
 800b1b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b314 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1d6:	e043      	b.n	800b260 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	ee07 3a90 	vmov	s15, r3
 800b1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b320 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b1e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1ea:	4b48      	ldr	r3, [pc, #288]	; (800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1f2:	ee07 3a90 	vmov	s15, r3
 800b1f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b314 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b20a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b20e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b212:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b21a:	e021      	b.n	800b260 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	ee07 3a90 	vmov	s15, r3
 800b222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b226:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b31c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b22a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b22e:	4b37      	ldr	r3, [pc, #220]	; (800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b236:	ee07 3a90 	vmov	s15, r3
 800b23a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b23e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b242:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b314 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b24a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b24e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b25a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b25e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b260:	4b2a      	ldr	r3, [pc, #168]	; (800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b264:	0a5b      	lsrs	r3, r3, #9
 800b266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b26a:	ee07 3a90 	vmov	s15, r3
 800b26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b27a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b27e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b286:	ee17 2a90 	vmov	r2, s15
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b28e:	4b1f      	ldr	r3, [pc, #124]	; (800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b292:	0c1b      	lsrs	r3, r3, #16
 800b294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b298:	ee07 3a90 	vmov	s15, r3
 800b29c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2b4:	ee17 2a90 	vmov	r2, s15
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b2bc:	4b13      	ldr	r3, [pc, #76]	; (800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c0:	0e1b      	lsrs	r3, r3, #24
 800b2c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2c6:	ee07 3a90 	vmov	s15, r3
 800b2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2e2:	ee17 2a90 	vmov	r2, s15
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b2ea:	e008      	b.n	800b2fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	609a      	str	r2, [r3, #8]
}
 800b2fe:	bf00      	nop
 800b300:	3724      	adds	r7, #36	; 0x24
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	58024400 	.word	0x58024400
 800b310:	03d09000 	.word	0x03d09000
 800b314:	46000000 	.word	0x46000000
 800b318:	4c742400 	.word	0x4c742400
 800b31c:	4a742400 	.word	0x4a742400
 800b320:	4af42400 	.word	0x4af42400

0800b324 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b32e:	2300      	movs	r3, #0
 800b330:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b332:	4b53      	ldr	r3, [pc, #332]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b336:	f003 0303 	and.w	r3, r3, #3
 800b33a:	2b03      	cmp	r3, #3
 800b33c:	d101      	bne.n	800b342 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b33e:	2301      	movs	r3, #1
 800b340:	e099      	b.n	800b476 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b342:	4b4f      	ldr	r3, [pc, #316]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a4e      	ldr	r2, [pc, #312]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b348:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b34c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b34e:	f7f9 ffe9 	bl	8005324 <HAL_GetTick>
 800b352:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b354:	e008      	b.n	800b368 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b356:	f7f9 ffe5 	bl	8005324 <HAL_GetTick>
 800b35a:	4602      	mov	r2, r0
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	2b02      	cmp	r3, #2
 800b362:	d901      	bls.n	800b368 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b364:	2303      	movs	r3, #3
 800b366:	e086      	b.n	800b476 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b368:	4b45      	ldr	r3, [pc, #276]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1f0      	bne.n	800b356 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b374:	4b42      	ldr	r3, [pc, #264]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b378:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	031b      	lsls	r3, r3, #12
 800b382:	493f      	ldr	r1, [pc, #252]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b384:	4313      	orrs	r3, r2
 800b386:	628b      	str	r3, [r1, #40]	; 0x28
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	3b01      	subs	r3, #1
 800b38e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	3b01      	subs	r3, #1
 800b398:	025b      	lsls	r3, r3, #9
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	431a      	orrs	r2, r3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	041b      	lsls	r3, r3, #16
 800b3a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b3aa:	431a      	orrs	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	061b      	lsls	r3, r3, #24
 800b3b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3b8:	4931      	ldr	r1, [pc, #196]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b3be:	4b30      	ldr	r3, [pc, #192]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	695b      	ldr	r3, [r3, #20]
 800b3ca:	492d      	ldr	r1, [pc, #180]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b3d0:	4b2b      	ldr	r3, [pc, #172]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d4:	f023 0220 	bic.w	r2, r3, #32
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	699b      	ldr	r3, [r3, #24]
 800b3dc:	4928      	ldr	r1, [pc, #160]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b3e2:	4b27      	ldr	r3, [pc, #156]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e6:	4a26      	ldr	r2, [pc, #152]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b3e8:	f023 0310 	bic.w	r3, r3, #16
 800b3ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b3ee:	4b24      	ldr	r3, [pc, #144]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b3f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3f2:	4b24      	ldr	r3, [pc, #144]	; (800b484 <RCCEx_PLL2_Config+0x160>)
 800b3f4:	4013      	ands	r3, r2
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	69d2      	ldr	r2, [r2, #28]
 800b3fa:	00d2      	lsls	r2, r2, #3
 800b3fc:	4920      	ldr	r1, [pc, #128]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b3fe:	4313      	orrs	r3, r2
 800b400:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b402:	4b1f      	ldr	r3, [pc, #124]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b406:	4a1e      	ldr	r2, [pc, #120]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b408:	f043 0310 	orr.w	r3, r3, #16
 800b40c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d106      	bne.n	800b422 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b414:	4b1a      	ldr	r3, [pc, #104]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b418:	4a19      	ldr	r2, [pc, #100]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b41a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b41e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b420:	e00f      	b.n	800b442 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d106      	bne.n	800b436 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b428:	4b15      	ldr	r3, [pc, #84]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b42c:	4a14      	ldr	r2, [pc, #80]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b42e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b432:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b434:	e005      	b.n	800b442 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b436:	4b12      	ldr	r3, [pc, #72]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43a:	4a11      	ldr	r2, [pc, #68]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b43c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b440:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b442:	4b0f      	ldr	r3, [pc, #60]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4a0e      	ldr	r2, [pc, #56]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b448:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b44c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b44e:	f7f9 ff69 	bl	8005324 <HAL_GetTick>
 800b452:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b454:	e008      	b.n	800b468 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b456:	f7f9 ff65 	bl	8005324 <HAL_GetTick>
 800b45a:	4602      	mov	r2, r0
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	1ad3      	subs	r3, r2, r3
 800b460:	2b02      	cmp	r3, #2
 800b462:	d901      	bls.n	800b468 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b464:	2303      	movs	r3, #3
 800b466:	e006      	b.n	800b476 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b468:	4b05      	ldr	r3, [pc, #20]	; (800b480 <RCCEx_PLL2_Config+0x15c>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b470:	2b00      	cmp	r3, #0
 800b472:	d0f0      	beq.n	800b456 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b474:	7bfb      	ldrb	r3, [r7, #15]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	58024400 	.word	0x58024400
 800b484:	ffff0007 	.word	0xffff0007

0800b488 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b492:	2300      	movs	r3, #0
 800b494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b496:	4b53      	ldr	r3, [pc, #332]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b49a:	f003 0303 	and.w	r3, r3, #3
 800b49e:	2b03      	cmp	r3, #3
 800b4a0:	d101      	bne.n	800b4a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e099      	b.n	800b5da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b4a6:	4b4f      	ldr	r3, [pc, #316]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a4e      	ldr	r2, [pc, #312]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b4ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4b2:	f7f9 ff37 	bl	8005324 <HAL_GetTick>
 800b4b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4b8:	e008      	b.n	800b4cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b4ba:	f7f9 ff33 	bl	8005324 <HAL_GetTick>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	1ad3      	subs	r3, r2, r3
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d901      	bls.n	800b4cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	e086      	b.n	800b5da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4cc:	4b45      	ldr	r3, [pc, #276]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1f0      	bne.n	800b4ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b4d8:	4b42      	ldr	r3, [pc, #264]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	051b      	lsls	r3, r3, #20
 800b4e6:	493f      	ldr	r1, [pc, #252]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	628b      	str	r3, [r1, #40]	; 0x28
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	3b01      	subs	r3, #1
 800b4f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	3b01      	subs	r3, #1
 800b4fc:	025b      	lsls	r3, r3, #9
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	431a      	orrs	r2, r3
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	3b01      	subs	r3, #1
 800b508:	041b      	lsls	r3, r3, #16
 800b50a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b50e:	431a      	orrs	r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	691b      	ldr	r3, [r3, #16]
 800b514:	3b01      	subs	r3, #1
 800b516:	061b      	lsls	r3, r3, #24
 800b518:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b51c:	4931      	ldr	r1, [pc, #196]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b51e:	4313      	orrs	r3, r2
 800b520:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b522:	4b30      	ldr	r3, [pc, #192]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b526:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	695b      	ldr	r3, [r3, #20]
 800b52e:	492d      	ldr	r1, [pc, #180]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b530:	4313      	orrs	r3, r2
 800b532:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b534:	4b2b      	ldr	r3, [pc, #172]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b538:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	699b      	ldr	r3, [r3, #24]
 800b540:	4928      	ldr	r1, [pc, #160]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b542:	4313      	orrs	r3, r2
 800b544:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b546:	4b27      	ldr	r3, [pc, #156]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54a:	4a26      	ldr	r2, [pc, #152]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b54c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b550:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b552:	4b24      	ldr	r3, [pc, #144]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b556:	4b24      	ldr	r3, [pc, #144]	; (800b5e8 <RCCEx_PLL3_Config+0x160>)
 800b558:	4013      	ands	r3, r2
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	69d2      	ldr	r2, [r2, #28]
 800b55e:	00d2      	lsls	r2, r2, #3
 800b560:	4920      	ldr	r1, [pc, #128]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b562:	4313      	orrs	r3, r2
 800b564:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b566:	4b1f      	ldr	r3, [pc, #124]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56a:	4a1e      	ldr	r2, [pc, #120]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b56c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b570:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d106      	bne.n	800b586 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b578:	4b1a      	ldr	r3, [pc, #104]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57c:	4a19      	ldr	r2, [pc, #100]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b57e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b582:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b584:	e00f      	b.n	800b5a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d106      	bne.n	800b59a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b58c:	4b15      	ldr	r3, [pc, #84]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b590:	4a14      	ldr	r2, [pc, #80]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b592:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b596:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b598:	e005      	b.n	800b5a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b59a:	4b12      	ldr	r3, [pc, #72]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59e:	4a11      	ldr	r2, [pc, #68]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b5a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b5a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b5a6:	4b0f      	ldr	r3, [pc, #60]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a0e      	ldr	r2, [pc, #56]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b5ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5b2:	f7f9 feb7 	bl	8005324 <HAL_GetTick>
 800b5b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5b8:	e008      	b.n	800b5cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b5ba:	f7f9 feb3 	bl	8005324 <HAL_GetTick>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	d901      	bls.n	800b5cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b5c8:	2303      	movs	r3, #3
 800b5ca:	e006      	b.n	800b5da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5cc:	4b05      	ldr	r3, [pc, #20]	; (800b5e4 <RCCEx_PLL3_Config+0x15c>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d0f0      	beq.n	800b5ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3710      	adds	r7, #16
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	58024400 	.word	0x58024400
 800b5e8:	ffff0007 	.word	0xffff0007

0800b5ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d101      	bne.n	800b5fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e049      	b.n	800b692 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b604:	b2db      	uxtb	r3, r3
 800b606:	2b00      	cmp	r3, #0
 800b608:	d106      	bne.n	800b618 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f7f9 fbf8 	bl	8004e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2202      	movs	r2, #2
 800b61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	3304      	adds	r3, #4
 800b628:	4619      	mov	r1, r3
 800b62a:	4610      	mov	r0, r2
 800b62c:	f000 feb8 	bl	800c3a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2201      	movs	r2, #1
 800b634:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2201      	movs	r2, #1
 800b63c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2201      	movs	r2, #1
 800b644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2201      	movs	r2, #1
 800b65c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2201      	movs	r2, #1
 800b664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2201      	movs	r2, #1
 800b674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2201      	movs	r2, #1
 800b67c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2201      	movs	r2, #1
 800b684:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3708      	adds	r7, #8
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
	...

0800b69c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b085      	sub	sp, #20
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d001      	beq.n	800b6b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	e05e      	b.n	800b772 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2202      	movs	r2, #2
 800b6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68da      	ldr	r2, [r3, #12]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f042 0201 	orr.w	r2, r2, #1
 800b6ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a2b      	ldr	r2, [pc, #172]	; (800b780 <HAL_TIM_Base_Start_IT+0xe4>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d02c      	beq.n	800b730 <HAL_TIM_Base_Start_IT+0x94>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6de:	d027      	beq.n	800b730 <HAL_TIM_Base_Start_IT+0x94>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a27      	ldr	r2, [pc, #156]	; (800b784 <HAL_TIM_Base_Start_IT+0xe8>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d022      	beq.n	800b730 <HAL_TIM_Base_Start_IT+0x94>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a26      	ldr	r2, [pc, #152]	; (800b788 <HAL_TIM_Base_Start_IT+0xec>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d01d      	beq.n	800b730 <HAL_TIM_Base_Start_IT+0x94>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a24      	ldr	r2, [pc, #144]	; (800b78c <HAL_TIM_Base_Start_IT+0xf0>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d018      	beq.n	800b730 <HAL_TIM_Base_Start_IT+0x94>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a23      	ldr	r2, [pc, #140]	; (800b790 <HAL_TIM_Base_Start_IT+0xf4>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d013      	beq.n	800b730 <HAL_TIM_Base_Start_IT+0x94>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a21      	ldr	r2, [pc, #132]	; (800b794 <HAL_TIM_Base_Start_IT+0xf8>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d00e      	beq.n	800b730 <HAL_TIM_Base_Start_IT+0x94>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a20      	ldr	r2, [pc, #128]	; (800b798 <HAL_TIM_Base_Start_IT+0xfc>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d009      	beq.n	800b730 <HAL_TIM_Base_Start_IT+0x94>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a1e      	ldr	r2, [pc, #120]	; (800b79c <HAL_TIM_Base_Start_IT+0x100>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d004      	beq.n	800b730 <HAL_TIM_Base_Start_IT+0x94>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a1d      	ldr	r2, [pc, #116]	; (800b7a0 <HAL_TIM_Base_Start_IT+0x104>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d115      	bne.n	800b75c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	689a      	ldr	r2, [r3, #8]
 800b736:	4b1b      	ldr	r3, [pc, #108]	; (800b7a4 <HAL_TIM_Base_Start_IT+0x108>)
 800b738:	4013      	ands	r3, r2
 800b73a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2b06      	cmp	r3, #6
 800b740:	d015      	beq.n	800b76e <HAL_TIM_Base_Start_IT+0xd2>
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b748:	d011      	beq.n	800b76e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f042 0201 	orr.w	r2, r2, #1
 800b758:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b75a:	e008      	b.n	800b76e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f042 0201 	orr.w	r2, r2, #1
 800b76a:	601a      	str	r2, [r3, #0]
 800b76c:	e000      	b.n	800b770 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b76e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b770:	2300      	movs	r3, #0
}
 800b772:	4618      	mov	r0, r3
 800b774:	3714      	adds	r7, #20
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	40010000 	.word	0x40010000
 800b784:	40000400 	.word	0x40000400
 800b788:	40000800 	.word	0x40000800
 800b78c:	40000c00 	.word	0x40000c00
 800b790:	40010400 	.word	0x40010400
 800b794:	40001800 	.word	0x40001800
 800b798:	40014000 	.word	0x40014000
 800b79c:	4000e000 	.word	0x4000e000
 800b7a0:	4000e400 	.word	0x4000e400
 800b7a4:	00010007 	.word	0x00010007

0800b7a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d101      	bne.n	800b7ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e049      	b.n	800b84e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d106      	bne.n	800b7d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7f9 fae0 	bl	8004d94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2202      	movs	r2, #2
 800b7d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	3304      	adds	r3, #4
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	4610      	mov	r0, r2
 800b7e8:	f000 fdda 	bl	800c3a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2201      	movs	r2, #1
 800b810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2201      	movs	r2, #1
 800b820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2201      	movs	r2, #1
 800b838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2201      	movs	r2, #1
 800b840:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
	...

0800b858 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d109      	bne.n	800b87c <HAL_TIM_PWM_Start+0x24>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	2b01      	cmp	r3, #1
 800b872:	bf14      	ite	ne
 800b874:	2301      	movne	r3, #1
 800b876:	2300      	moveq	r3, #0
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	e03c      	b.n	800b8f6 <HAL_TIM_PWM_Start+0x9e>
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	2b04      	cmp	r3, #4
 800b880:	d109      	bne.n	800b896 <HAL_TIM_PWM_Start+0x3e>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	bf14      	ite	ne
 800b88e:	2301      	movne	r3, #1
 800b890:	2300      	moveq	r3, #0
 800b892:	b2db      	uxtb	r3, r3
 800b894:	e02f      	b.n	800b8f6 <HAL_TIM_PWM_Start+0x9e>
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	2b08      	cmp	r3, #8
 800b89a:	d109      	bne.n	800b8b0 <HAL_TIM_PWM_Start+0x58>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	bf14      	ite	ne
 800b8a8:	2301      	movne	r3, #1
 800b8aa:	2300      	moveq	r3, #0
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	e022      	b.n	800b8f6 <HAL_TIM_PWM_Start+0x9e>
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	2b0c      	cmp	r3, #12
 800b8b4:	d109      	bne.n	800b8ca <HAL_TIM_PWM_Start+0x72>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	bf14      	ite	ne
 800b8c2:	2301      	movne	r3, #1
 800b8c4:	2300      	moveq	r3, #0
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	e015      	b.n	800b8f6 <HAL_TIM_PWM_Start+0x9e>
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	2b10      	cmp	r3, #16
 800b8ce:	d109      	bne.n	800b8e4 <HAL_TIM_PWM_Start+0x8c>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	bf14      	ite	ne
 800b8dc:	2301      	movne	r3, #1
 800b8de:	2300      	moveq	r3, #0
 800b8e0:	b2db      	uxtb	r3, r3
 800b8e2:	e008      	b.n	800b8f6 <HAL_TIM_PWM_Start+0x9e>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	bf14      	ite	ne
 800b8f0:	2301      	movne	r3, #1
 800b8f2:	2300      	moveq	r3, #0
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d001      	beq.n	800b8fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e0ab      	b.n	800ba56 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d104      	bne.n	800b90e <HAL_TIM_PWM_Start+0xb6>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2202      	movs	r2, #2
 800b908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b90c:	e023      	b.n	800b956 <HAL_TIM_PWM_Start+0xfe>
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	2b04      	cmp	r3, #4
 800b912:	d104      	bne.n	800b91e <HAL_TIM_PWM_Start+0xc6>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2202      	movs	r2, #2
 800b918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b91c:	e01b      	b.n	800b956 <HAL_TIM_PWM_Start+0xfe>
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	2b08      	cmp	r3, #8
 800b922:	d104      	bne.n	800b92e <HAL_TIM_PWM_Start+0xd6>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2202      	movs	r2, #2
 800b928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b92c:	e013      	b.n	800b956 <HAL_TIM_PWM_Start+0xfe>
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	2b0c      	cmp	r3, #12
 800b932:	d104      	bne.n	800b93e <HAL_TIM_PWM_Start+0xe6>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2202      	movs	r2, #2
 800b938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b93c:	e00b      	b.n	800b956 <HAL_TIM_PWM_Start+0xfe>
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	2b10      	cmp	r3, #16
 800b942:	d104      	bne.n	800b94e <HAL_TIM_PWM_Start+0xf6>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2202      	movs	r2, #2
 800b948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b94c:	e003      	b.n	800b956 <HAL_TIM_PWM_Start+0xfe>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2202      	movs	r2, #2
 800b952:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2201      	movs	r2, #1
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	4618      	mov	r0, r3
 800b960:	f001 f938 	bl	800cbd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a3d      	ldr	r2, [pc, #244]	; (800ba60 <HAL_TIM_PWM_Start+0x208>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d013      	beq.n	800b996 <HAL_TIM_PWM_Start+0x13e>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a3c      	ldr	r2, [pc, #240]	; (800ba64 <HAL_TIM_PWM_Start+0x20c>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d00e      	beq.n	800b996 <HAL_TIM_PWM_Start+0x13e>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a3a      	ldr	r2, [pc, #232]	; (800ba68 <HAL_TIM_PWM_Start+0x210>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d009      	beq.n	800b996 <HAL_TIM_PWM_Start+0x13e>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a39      	ldr	r2, [pc, #228]	; (800ba6c <HAL_TIM_PWM_Start+0x214>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d004      	beq.n	800b996 <HAL_TIM_PWM_Start+0x13e>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a37      	ldr	r2, [pc, #220]	; (800ba70 <HAL_TIM_PWM_Start+0x218>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d101      	bne.n	800b99a <HAL_TIM_PWM_Start+0x142>
 800b996:	2301      	movs	r3, #1
 800b998:	e000      	b.n	800b99c <HAL_TIM_PWM_Start+0x144>
 800b99a:	2300      	movs	r3, #0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d007      	beq.n	800b9b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b9ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a2a      	ldr	r2, [pc, #168]	; (800ba60 <HAL_TIM_PWM_Start+0x208>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d02c      	beq.n	800ba14 <HAL_TIM_PWM_Start+0x1bc>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9c2:	d027      	beq.n	800ba14 <HAL_TIM_PWM_Start+0x1bc>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a2a      	ldr	r2, [pc, #168]	; (800ba74 <HAL_TIM_PWM_Start+0x21c>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d022      	beq.n	800ba14 <HAL_TIM_PWM_Start+0x1bc>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a29      	ldr	r2, [pc, #164]	; (800ba78 <HAL_TIM_PWM_Start+0x220>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d01d      	beq.n	800ba14 <HAL_TIM_PWM_Start+0x1bc>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a27      	ldr	r2, [pc, #156]	; (800ba7c <HAL_TIM_PWM_Start+0x224>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d018      	beq.n	800ba14 <HAL_TIM_PWM_Start+0x1bc>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a1f      	ldr	r2, [pc, #124]	; (800ba64 <HAL_TIM_PWM_Start+0x20c>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d013      	beq.n	800ba14 <HAL_TIM_PWM_Start+0x1bc>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a23      	ldr	r2, [pc, #140]	; (800ba80 <HAL_TIM_PWM_Start+0x228>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d00e      	beq.n	800ba14 <HAL_TIM_PWM_Start+0x1bc>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a1b      	ldr	r2, [pc, #108]	; (800ba68 <HAL_TIM_PWM_Start+0x210>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d009      	beq.n	800ba14 <HAL_TIM_PWM_Start+0x1bc>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a1f      	ldr	r2, [pc, #124]	; (800ba84 <HAL_TIM_PWM_Start+0x22c>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d004      	beq.n	800ba14 <HAL_TIM_PWM_Start+0x1bc>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a1e      	ldr	r2, [pc, #120]	; (800ba88 <HAL_TIM_PWM_Start+0x230>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d115      	bne.n	800ba40 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	689a      	ldr	r2, [r3, #8]
 800ba1a:	4b1c      	ldr	r3, [pc, #112]	; (800ba8c <HAL_TIM_PWM_Start+0x234>)
 800ba1c:	4013      	ands	r3, r2
 800ba1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2b06      	cmp	r3, #6
 800ba24:	d015      	beq.n	800ba52 <HAL_TIM_PWM_Start+0x1fa>
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba2c:	d011      	beq.n	800ba52 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f042 0201 	orr.w	r2, r2, #1
 800ba3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba3e:	e008      	b.n	800ba52 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f042 0201 	orr.w	r2, r2, #1
 800ba4e:	601a      	str	r2, [r3, #0]
 800ba50:	e000      	b.n	800ba54 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	40010000 	.word	0x40010000
 800ba64:	40010400 	.word	0x40010400
 800ba68:	40014000 	.word	0x40014000
 800ba6c:	40014400 	.word	0x40014400
 800ba70:	40014800 	.word	0x40014800
 800ba74:	40000400 	.word	0x40000400
 800ba78:	40000800 	.word	0x40000800
 800ba7c:	40000c00 	.word	0x40000c00
 800ba80:	40001800 	.word	0x40001800
 800ba84:	4000e000 	.word	0x4000e000
 800ba88:	4000e400 	.word	0x4000e400
 800ba8c:	00010007 	.word	0x00010007

0800ba90 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d101      	bne.n	800baa4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	e08f      	b.n	800bbc4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b00      	cmp	r3, #0
 800baae:	d106      	bne.n	800babe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f7f9 f83d 	bl	8004b38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2202      	movs	r2, #2
 800bac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	6899      	ldr	r1, [r3, #8]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	4b3e      	ldr	r3, [pc, #248]	; (800bbcc <HAL_TIM_Encoder_Init+0x13c>)
 800bad2:	400b      	ands	r3, r1
 800bad4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	3304      	adds	r3, #4
 800bade:	4619      	mov	r1, r3
 800bae0:	4610      	mov	r0, r2
 800bae2:	f000 fc5d 	bl	800c3a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	699b      	ldr	r3, [r3, #24]
 800baf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	6a1b      	ldr	r3, [r3, #32]
 800bafc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	697a      	ldr	r2, [r7, #20]
 800bb04:	4313      	orrs	r3, r2
 800bb06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bb08:	693a      	ldr	r2, [r7, #16]
 800bb0a:	4b31      	ldr	r3, [pc, #196]	; (800bbd0 <HAL_TIM_Encoder_Init+0x140>)
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	689a      	ldr	r2, [r3, #8]
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	699b      	ldr	r3, [r3, #24]
 800bb18:	021b      	lsls	r3, r3, #8
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	693a      	ldr	r2, [r7, #16]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bb22:	693a      	ldr	r2, [r7, #16]
 800bb24:	4b2b      	ldr	r3, [pc, #172]	; (800bbd4 <HAL_TIM_Encoder_Init+0x144>)
 800bb26:	4013      	ands	r3, r2
 800bb28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bb2a:	693a      	ldr	r2, [r7, #16]
 800bb2c:	4b2a      	ldr	r3, [pc, #168]	; (800bbd8 <HAL_TIM_Encoder_Init+0x148>)
 800bb2e:	4013      	ands	r3, r2
 800bb30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	68da      	ldr	r2, [r3, #12]
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	69db      	ldr	r3, [r3, #28]
 800bb3a:	021b      	lsls	r3, r3, #8
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	693a      	ldr	r2, [r7, #16]
 800bb40:	4313      	orrs	r3, r2
 800bb42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	691b      	ldr	r3, [r3, #16]
 800bb48:	011a      	lsls	r2, r3, #4
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	6a1b      	ldr	r3, [r3, #32]
 800bb4e:	031b      	lsls	r3, r3, #12
 800bb50:	4313      	orrs	r3, r2
 800bb52:	693a      	ldr	r2, [r7, #16]
 800bb54:	4313      	orrs	r3, r2
 800bb56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bb5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bb66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	685a      	ldr	r2, [r3, #4]
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	695b      	ldr	r3, [r3, #20]
 800bb70:	011b      	lsls	r3, r3, #4
 800bb72:	4313      	orrs	r3, r2
 800bb74:	68fa      	ldr	r2, [r7, #12]
 800bb76:	4313      	orrs	r3, r2
 800bb78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	697a      	ldr	r2, [r7, #20]
 800bb80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	693a      	ldr	r2, [r7, #16]
 800bb88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2201      	movs	r2, #1
 800bb96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2201      	movs	r2, #1
 800bba6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2201      	movs	r2, #1
 800bbae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3718      	adds	r7, #24
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	fffebff8 	.word	0xfffebff8
 800bbd0:	fffffcfc 	.word	0xfffffcfc
 800bbd4:	fffff3f3 	.word	0xfffff3f3
 800bbd8:	ffff0f0f 	.word	0xffff0f0f

0800bbdc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bbec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bbf4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbfc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc04:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d110      	bne.n	800bc2e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc0c:	7bfb      	ldrb	r3, [r7, #15]
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d102      	bne.n	800bc18 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bc12:	7b7b      	ldrb	r3, [r7, #13]
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d001      	beq.n	800bc1c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e069      	b.n	800bcf0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2202      	movs	r2, #2
 800bc20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2202      	movs	r2, #2
 800bc28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc2c:	e031      	b.n	800bc92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	2b04      	cmp	r3, #4
 800bc32:	d110      	bne.n	800bc56 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc34:	7bbb      	ldrb	r3, [r7, #14]
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d102      	bne.n	800bc40 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bc3a:	7b3b      	ldrb	r3, [r7, #12]
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d001      	beq.n	800bc44 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800bc40:	2301      	movs	r3, #1
 800bc42:	e055      	b.n	800bcf0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2202      	movs	r2, #2
 800bc48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2202      	movs	r2, #2
 800bc50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc54:	e01d      	b.n	800bc92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc56:	7bfb      	ldrb	r3, [r7, #15]
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d108      	bne.n	800bc6e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc5c:	7bbb      	ldrb	r3, [r7, #14]
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d105      	bne.n	800bc6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc62:	7b7b      	ldrb	r3, [r7, #13]
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d102      	bne.n	800bc6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bc68:	7b3b      	ldrb	r3, [r7, #12]
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d001      	beq.n	800bc72 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	e03e      	b.n	800bcf0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2202      	movs	r2, #2
 800bc76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2202      	movs	r2, #2
 800bc7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2202      	movs	r2, #2
 800bc86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2202      	movs	r2, #2
 800bc8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d003      	beq.n	800bca0 <HAL_TIM_Encoder_Start+0xc4>
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	2b04      	cmp	r3, #4
 800bc9c:	d008      	beq.n	800bcb0 <HAL_TIM_Encoder_Start+0xd4>
 800bc9e:	e00f      	b.n	800bcc0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	2201      	movs	r2, #1
 800bca6:	2100      	movs	r1, #0
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f000 ff93 	bl	800cbd4 <TIM_CCxChannelCmd>
      break;
 800bcae:	e016      	b.n	800bcde <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	2104      	movs	r1, #4
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f000 ff8b 	bl	800cbd4 <TIM_CCxChannelCmd>
      break;
 800bcbe:	e00e      	b.n	800bcde <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f000 ff83 	bl	800cbd4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	2104      	movs	r1, #4
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f000 ff7c 	bl	800cbd4 <TIM_CCxChannelCmd>
      break;
 800bcdc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f042 0201 	orr.w	r2, r2, #1
 800bcec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3710      	adds	r7, #16
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	691b      	ldr	r3, [r3, #16]
 800bd06:	f003 0302 	and.w	r3, r3, #2
 800bd0a:	2b02      	cmp	r3, #2
 800bd0c:	d122      	bne.n	800bd54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	f003 0302 	and.w	r3, r3, #2
 800bd18:	2b02      	cmp	r3, #2
 800bd1a:	d11b      	bne.n	800bd54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f06f 0202 	mvn.w	r2, #2
 800bd24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2201      	movs	r2, #1
 800bd2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	699b      	ldr	r3, [r3, #24]
 800bd32:	f003 0303 	and.w	r3, r3, #3
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d003      	beq.n	800bd42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 fb12 	bl	800c364 <HAL_TIM_IC_CaptureCallback>
 800bd40:	e005      	b.n	800bd4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 fb04 	bl	800c350 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 fb15 	bl	800c378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	f003 0304 	and.w	r3, r3, #4
 800bd5e:	2b04      	cmp	r3, #4
 800bd60:	d122      	bne.n	800bda8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	f003 0304 	and.w	r3, r3, #4
 800bd6c:	2b04      	cmp	r3, #4
 800bd6e:	d11b      	bne.n	800bda8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f06f 0204 	mvn.w	r2, #4
 800bd78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2202      	movs	r2, #2
 800bd7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	699b      	ldr	r3, [r3, #24]
 800bd86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d003      	beq.n	800bd96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 fae8 	bl	800c364 <HAL_TIM_IC_CaptureCallback>
 800bd94:	e005      	b.n	800bda2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 fada 	bl	800c350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 faeb 	bl	800c378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	691b      	ldr	r3, [r3, #16]
 800bdae:	f003 0308 	and.w	r3, r3, #8
 800bdb2:	2b08      	cmp	r3, #8
 800bdb4:	d122      	bne.n	800bdfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	f003 0308 	and.w	r3, r3, #8
 800bdc0:	2b08      	cmp	r3, #8
 800bdc2:	d11b      	bne.n	800bdfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f06f 0208 	mvn.w	r2, #8
 800bdcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2204      	movs	r2, #4
 800bdd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	69db      	ldr	r3, [r3, #28]
 800bdda:	f003 0303 	and.w	r3, r3, #3
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d003      	beq.n	800bdea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 fabe 	bl	800c364 <HAL_TIM_IC_CaptureCallback>
 800bde8:	e005      	b.n	800bdf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 fab0 	bl	800c350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 fac1 	bl	800c378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	691b      	ldr	r3, [r3, #16]
 800be02:	f003 0310 	and.w	r3, r3, #16
 800be06:	2b10      	cmp	r3, #16
 800be08:	d122      	bne.n	800be50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	f003 0310 	and.w	r3, r3, #16
 800be14:	2b10      	cmp	r3, #16
 800be16:	d11b      	bne.n	800be50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f06f 0210 	mvn.w	r2, #16
 800be20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2208      	movs	r2, #8
 800be26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	69db      	ldr	r3, [r3, #28]
 800be2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be32:	2b00      	cmp	r3, #0
 800be34:	d003      	beq.n	800be3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fa94 	bl	800c364 <HAL_TIM_IC_CaptureCallback>
 800be3c:	e005      	b.n	800be4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fa86 	bl	800c350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fa97 	bl	800c378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	691b      	ldr	r3, [r3, #16]
 800be56:	f003 0301 	and.w	r3, r3, #1
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d10e      	bne.n	800be7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	f003 0301 	and.w	r3, r3, #1
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d107      	bne.n	800be7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f06f 0201 	mvn.w	r2, #1
 800be74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f7f5 fc60 	bl	800173c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	691b      	ldr	r3, [r3, #16]
 800be82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be86:	2b80      	cmp	r3, #128	; 0x80
 800be88:	d10e      	bne.n	800bea8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be94:	2b80      	cmp	r3, #128	; 0x80
 800be96:	d107      	bne.n	800bea8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f001 f802 	bl	800ceac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	691b      	ldr	r3, [r3, #16]
 800beae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beb6:	d10e      	bne.n	800bed6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bec2:	2b80      	cmp	r3, #128	; 0x80
 800bec4:	d107      	bne.n	800bed6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 fff5 	bl	800cec0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	691b      	ldr	r3, [r3, #16]
 800bedc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee0:	2b40      	cmp	r3, #64	; 0x40
 800bee2:	d10e      	bne.n	800bf02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beee:	2b40      	cmp	r3, #64	; 0x40
 800bef0:	d107      	bne.n	800bf02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800befa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 fa45 	bl	800c38c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	691b      	ldr	r3, [r3, #16]
 800bf08:	f003 0320 	and.w	r3, r3, #32
 800bf0c:	2b20      	cmp	r3, #32
 800bf0e:	d10e      	bne.n	800bf2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	f003 0320 	and.w	r3, r3, #32
 800bf1a:	2b20      	cmp	r3, #32
 800bf1c:	d107      	bne.n	800bf2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f06f 0220 	mvn.w	r2, #32
 800bf26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 ffb5 	bl	800ce98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf2e:	bf00      	nop
 800bf30:	3708      	adds	r7, #8
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
	...

0800bf38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b086      	sub	sp, #24
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf44:	2300      	movs	r3, #0
 800bf46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d101      	bne.n	800bf56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bf52:	2302      	movs	r3, #2
 800bf54:	e0ff      	b.n	800c156 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2201      	movs	r2, #1
 800bf5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2b14      	cmp	r3, #20
 800bf62:	f200 80f0 	bhi.w	800c146 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bf66:	a201      	add	r2, pc, #4	; (adr r2, 800bf6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bf68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf6c:	0800bfc1 	.word	0x0800bfc1
 800bf70:	0800c147 	.word	0x0800c147
 800bf74:	0800c147 	.word	0x0800c147
 800bf78:	0800c147 	.word	0x0800c147
 800bf7c:	0800c001 	.word	0x0800c001
 800bf80:	0800c147 	.word	0x0800c147
 800bf84:	0800c147 	.word	0x0800c147
 800bf88:	0800c147 	.word	0x0800c147
 800bf8c:	0800c043 	.word	0x0800c043
 800bf90:	0800c147 	.word	0x0800c147
 800bf94:	0800c147 	.word	0x0800c147
 800bf98:	0800c147 	.word	0x0800c147
 800bf9c:	0800c083 	.word	0x0800c083
 800bfa0:	0800c147 	.word	0x0800c147
 800bfa4:	0800c147 	.word	0x0800c147
 800bfa8:	0800c147 	.word	0x0800c147
 800bfac:	0800c0c5 	.word	0x0800c0c5
 800bfb0:	0800c147 	.word	0x0800c147
 800bfb4:	0800c147 	.word	0x0800c147
 800bfb8:	0800c147 	.word	0x0800c147
 800bfbc:	0800c105 	.word	0x0800c105
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	68b9      	ldr	r1, [r7, #8]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f000 fa90 	bl	800c4ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	699a      	ldr	r2, [r3, #24]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f042 0208 	orr.w	r2, r2, #8
 800bfda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	699a      	ldr	r2, [r3, #24]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f022 0204 	bic.w	r2, r2, #4
 800bfea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	6999      	ldr	r1, [r3, #24]
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	691a      	ldr	r2, [r3, #16]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	430a      	orrs	r2, r1
 800bffc:	619a      	str	r2, [r3, #24]
      break;
 800bffe:	e0a5      	b.n	800c14c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	68b9      	ldr	r1, [r7, #8]
 800c006:	4618      	mov	r0, r3
 800c008:	f000 fb00 	bl	800c60c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	699a      	ldr	r2, [r3, #24]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c01a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	699a      	ldr	r2, [r3, #24]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c02a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	6999      	ldr	r1, [r3, #24]
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	021a      	lsls	r2, r3, #8
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	430a      	orrs	r2, r1
 800c03e:	619a      	str	r2, [r3, #24]
      break;
 800c040:	e084      	b.n	800c14c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	68b9      	ldr	r1, [r7, #8]
 800c048:	4618      	mov	r0, r3
 800c04a:	f000 fb69 	bl	800c720 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	69da      	ldr	r2, [r3, #28]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f042 0208 	orr.w	r2, r2, #8
 800c05c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	69da      	ldr	r2, [r3, #28]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f022 0204 	bic.w	r2, r2, #4
 800c06c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	69d9      	ldr	r1, [r3, #28]
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	691a      	ldr	r2, [r3, #16]
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	430a      	orrs	r2, r1
 800c07e:	61da      	str	r2, [r3, #28]
      break;
 800c080:	e064      	b.n	800c14c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	68b9      	ldr	r1, [r7, #8]
 800c088:	4618      	mov	r0, r3
 800c08a:	f000 fbd1 	bl	800c830 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	69da      	ldr	r2, [r3, #28]
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c09c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	69da      	ldr	r2, [r3, #28]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	69d9      	ldr	r1, [r3, #28]
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	691b      	ldr	r3, [r3, #16]
 800c0b8:	021a      	lsls	r2, r3, #8
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	430a      	orrs	r2, r1
 800c0c0:	61da      	str	r2, [r3, #28]
      break;
 800c0c2:	e043      	b.n	800c14c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	68b9      	ldr	r1, [r7, #8]
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f000 fc1a 	bl	800c904 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f042 0208 	orr.w	r2, r2, #8
 800c0de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f022 0204 	bic.w	r2, r2, #4
 800c0ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	691a      	ldr	r2, [r3, #16]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	430a      	orrs	r2, r1
 800c100:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c102:	e023      	b.n	800c14c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	68b9      	ldr	r1, [r7, #8]
 800c10a:	4618      	mov	r0, r3
 800c10c:	f000 fc5e 	bl	800c9cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c11e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c12e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	021a      	lsls	r2, r3, #8
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	430a      	orrs	r2, r1
 800c142:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c144:	e002      	b.n	800c14c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c146:	2301      	movs	r3, #1
 800c148:	75fb      	strb	r3, [r7, #23]
      break;
 800c14a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2200      	movs	r2, #0
 800c150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c154:	7dfb      	ldrb	r3, [r7, #23]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3718      	adds	r7, #24
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop

0800c160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c16a:	2300      	movs	r3, #0
 800c16c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c174:	2b01      	cmp	r3, #1
 800c176:	d101      	bne.n	800c17c <HAL_TIM_ConfigClockSource+0x1c>
 800c178:	2302      	movs	r3, #2
 800c17a:	e0dc      	b.n	800c336 <HAL_TIM_ConfigClockSource+0x1d6>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2202      	movs	r2, #2
 800c188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	4b6a      	ldr	r3, [pc, #424]	; (800c340 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c198:	4013      	ands	r3, r2
 800c19a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c1a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	68ba      	ldr	r2, [r7, #8]
 800c1aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a64      	ldr	r2, [pc, #400]	; (800c344 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	f000 80a9 	beq.w	800c30a <HAL_TIM_ConfigClockSource+0x1aa>
 800c1b8:	4a62      	ldr	r2, [pc, #392]	; (800c344 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	f200 80ae 	bhi.w	800c31c <HAL_TIM_ConfigClockSource+0x1bc>
 800c1c0:	4a61      	ldr	r2, [pc, #388]	; (800c348 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	f000 80a1 	beq.w	800c30a <HAL_TIM_ConfigClockSource+0x1aa>
 800c1c8:	4a5f      	ldr	r2, [pc, #380]	; (800c348 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	f200 80a6 	bhi.w	800c31c <HAL_TIM_ConfigClockSource+0x1bc>
 800c1d0:	4a5e      	ldr	r2, [pc, #376]	; (800c34c <HAL_TIM_ConfigClockSource+0x1ec>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	f000 8099 	beq.w	800c30a <HAL_TIM_ConfigClockSource+0x1aa>
 800c1d8:	4a5c      	ldr	r2, [pc, #368]	; (800c34c <HAL_TIM_ConfigClockSource+0x1ec>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	f200 809e 	bhi.w	800c31c <HAL_TIM_ConfigClockSource+0x1bc>
 800c1e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c1e4:	f000 8091 	beq.w	800c30a <HAL_TIM_ConfigClockSource+0x1aa>
 800c1e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c1ec:	f200 8096 	bhi.w	800c31c <HAL_TIM_ConfigClockSource+0x1bc>
 800c1f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1f4:	f000 8089 	beq.w	800c30a <HAL_TIM_ConfigClockSource+0x1aa>
 800c1f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1fc:	f200 808e 	bhi.w	800c31c <HAL_TIM_ConfigClockSource+0x1bc>
 800c200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c204:	d03e      	beq.n	800c284 <HAL_TIM_ConfigClockSource+0x124>
 800c206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c20a:	f200 8087 	bhi.w	800c31c <HAL_TIM_ConfigClockSource+0x1bc>
 800c20e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c212:	f000 8086 	beq.w	800c322 <HAL_TIM_ConfigClockSource+0x1c2>
 800c216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c21a:	d87f      	bhi.n	800c31c <HAL_TIM_ConfigClockSource+0x1bc>
 800c21c:	2b70      	cmp	r3, #112	; 0x70
 800c21e:	d01a      	beq.n	800c256 <HAL_TIM_ConfigClockSource+0xf6>
 800c220:	2b70      	cmp	r3, #112	; 0x70
 800c222:	d87b      	bhi.n	800c31c <HAL_TIM_ConfigClockSource+0x1bc>
 800c224:	2b60      	cmp	r3, #96	; 0x60
 800c226:	d050      	beq.n	800c2ca <HAL_TIM_ConfigClockSource+0x16a>
 800c228:	2b60      	cmp	r3, #96	; 0x60
 800c22a:	d877      	bhi.n	800c31c <HAL_TIM_ConfigClockSource+0x1bc>
 800c22c:	2b50      	cmp	r3, #80	; 0x50
 800c22e:	d03c      	beq.n	800c2aa <HAL_TIM_ConfigClockSource+0x14a>
 800c230:	2b50      	cmp	r3, #80	; 0x50
 800c232:	d873      	bhi.n	800c31c <HAL_TIM_ConfigClockSource+0x1bc>
 800c234:	2b40      	cmp	r3, #64	; 0x40
 800c236:	d058      	beq.n	800c2ea <HAL_TIM_ConfigClockSource+0x18a>
 800c238:	2b40      	cmp	r3, #64	; 0x40
 800c23a:	d86f      	bhi.n	800c31c <HAL_TIM_ConfigClockSource+0x1bc>
 800c23c:	2b30      	cmp	r3, #48	; 0x30
 800c23e:	d064      	beq.n	800c30a <HAL_TIM_ConfigClockSource+0x1aa>
 800c240:	2b30      	cmp	r3, #48	; 0x30
 800c242:	d86b      	bhi.n	800c31c <HAL_TIM_ConfigClockSource+0x1bc>
 800c244:	2b20      	cmp	r3, #32
 800c246:	d060      	beq.n	800c30a <HAL_TIM_ConfigClockSource+0x1aa>
 800c248:	2b20      	cmp	r3, #32
 800c24a:	d867      	bhi.n	800c31c <HAL_TIM_ConfigClockSource+0x1bc>
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d05c      	beq.n	800c30a <HAL_TIM_ConfigClockSource+0x1aa>
 800c250:	2b10      	cmp	r3, #16
 800c252:	d05a      	beq.n	800c30a <HAL_TIM_ConfigClockSource+0x1aa>
 800c254:	e062      	b.n	800c31c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6818      	ldr	r0, [r3, #0]
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	6899      	ldr	r1, [r3, #8]
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	685a      	ldr	r2, [r3, #4]
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	f000 fc95 	bl	800cb94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c278:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	609a      	str	r2, [r3, #8]
      break;
 800c282:	e04f      	b.n	800c324 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6818      	ldr	r0, [r3, #0]
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	6899      	ldr	r1, [r3, #8]
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	685a      	ldr	r2, [r3, #4]
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	f000 fc7e 	bl	800cb94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	689a      	ldr	r2, [r3, #8]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2a6:	609a      	str	r2, [r3, #8]
      break;
 800c2a8:	e03c      	b.n	800c324 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6818      	ldr	r0, [r3, #0]
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	6859      	ldr	r1, [r3, #4]
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	f000 fbee 	bl	800ca98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2150      	movs	r1, #80	; 0x50
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f000 fc48 	bl	800cb58 <TIM_ITRx_SetConfig>
      break;
 800c2c8:	e02c      	b.n	800c324 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6818      	ldr	r0, [r3, #0]
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	6859      	ldr	r1, [r3, #4]
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	68db      	ldr	r3, [r3, #12]
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	f000 fc0d 	bl	800caf6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2160      	movs	r1, #96	; 0x60
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f000 fc38 	bl	800cb58 <TIM_ITRx_SetConfig>
      break;
 800c2e8:	e01c      	b.n	800c324 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6818      	ldr	r0, [r3, #0]
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	6859      	ldr	r1, [r3, #4]
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	68db      	ldr	r3, [r3, #12]
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	f000 fbce 	bl	800ca98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2140      	movs	r1, #64	; 0x40
 800c302:	4618      	mov	r0, r3
 800c304:	f000 fc28 	bl	800cb58 <TIM_ITRx_SetConfig>
      break;
 800c308:	e00c      	b.n	800c324 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4619      	mov	r1, r3
 800c314:	4610      	mov	r0, r2
 800c316:	f000 fc1f 	bl	800cb58 <TIM_ITRx_SetConfig>
      break;
 800c31a:	e003      	b.n	800c324 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c31c:	2301      	movs	r3, #1
 800c31e:	73fb      	strb	r3, [r7, #15]
      break;
 800c320:	e000      	b.n	800c324 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2201      	movs	r2, #1
 800c328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c334:	7bfb      	ldrb	r3, [r7, #15]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	ffceff88 	.word	0xffceff88
 800c344:	00100040 	.word	0x00100040
 800c348:	00100030 	.word	0x00100030
 800c34c:	00100020 	.word	0x00100020

0800c350 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c358:	bf00      	nop
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c36c:	bf00      	nop
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c380:	bf00      	nop
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c394:	bf00      	nop
 800c396:	370c      	adds	r7, #12
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	4a44      	ldr	r2, [pc, #272]	; (800c4c4 <TIM_Base_SetConfig+0x124>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d013      	beq.n	800c3e0 <TIM_Base_SetConfig+0x40>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3be:	d00f      	beq.n	800c3e0 <TIM_Base_SetConfig+0x40>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4a41      	ldr	r2, [pc, #260]	; (800c4c8 <TIM_Base_SetConfig+0x128>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d00b      	beq.n	800c3e0 <TIM_Base_SetConfig+0x40>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4a40      	ldr	r2, [pc, #256]	; (800c4cc <TIM_Base_SetConfig+0x12c>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d007      	beq.n	800c3e0 <TIM_Base_SetConfig+0x40>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	4a3f      	ldr	r2, [pc, #252]	; (800c4d0 <TIM_Base_SetConfig+0x130>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d003      	beq.n	800c3e0 <TIM_Base_SetConfig+0x40>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	4a3e      	ldr	r2, [pc, #248]	; (800c4d4 <TIM_Base_SetConfig+0x134>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d108      	bne.n	800c3f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	4a33      	ldr	r2, [pc, #204]	; (800c4c4 <TIM_Base_SetConfig+0x124>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d027      	beq.n	800c44a <TIM_Base_SetConfig+0xaa>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c400:	d023      	beq.n	800c44a <TIM_Base_SetConfig+0xaa>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	4a30      	ldr	r2, [pc, #192]	; (800c4c8 <TIM_Base_SetConfig+0x128>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d01f      	beq.n	800c44a <TIM_Base_SetConfig+0xaa>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	4a2f      	ldr	r2, [pc, #188]	; (800c4cc <TIM_Base_SetConfig+0x12c>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d01b      	beq.n	800c44a <TIM_Base_SetConfig+0xaa>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4a2e      	ldr	r2, [pc, #184]	; (800c4d0 <TIM_Base_SetConfig+0x130>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d017      	beq.n	800c44a <TIM_Base_SetConfig+0xaa>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	4a2d      	ldr	r2, [pc, #180]	; (800c4d4 <TIM_Base_SetConfig+0x134>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d013      	beq.n	800c44a <TIM_Base_SetConfig+0xaa>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	4a2c      	ldr	r2, [pc, #176]	; (800c4d8 <TIM_Base_SetConfig+0x138>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d00f      	beq.n	800c44a <TIM_Base_SetConfig+0xaa>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	4a2b      	ldr	r2, [pc, #172]	; (800c4dc <TIM_Base_SetConfig+0x13c>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d00b      	beq.n	800c44a <TIM_Base_SetConfig+0xaa>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4a2a      	ldr	r2, [pc, #168]	; (800c4e0 <TIM_Base_SetConfig+0x140>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d007      	beq.n	800c44a <TIM_Base_SetConfig+0xaa>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	4a29      	ldr	r2, [pc, #164]	; (800c4e4 <TIM_Base_SetConfig+0x144>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d003      	beq.n	800c44a <TIM_Base_SetConfig+0xaa>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4a28      	ldr	r2, [pc, #160]	; (800c4e8 <TIM_Base_SetConfig+0x148>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d108      	bne.n	800c45c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	68db      	ldr	r3, [r3, #12]
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	4313      	orrs	r3, r2
 800c45a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	695b      	ldr	r3, [r3, #20]
 800c466:	4313      	orrs	r3, r2
 800c468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	68fa      	ldr	r2, [r7, #12]
 800c46e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	689a      	ldr	r2, [r3, #8]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	4a10      	ldr	r2, [pc, #64]	; (800c4c4 <TIM_Base_SetConfig+0x124>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d00f      	beq.n	800c4a8 <TIM_Base_SetConfig+0x108>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	4a12      	ldr	r2, [pc, #72]	; (800c4d4 <TIM_Base_SetConfig+0x134>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d00b      	beq.n	800c4a8 <TIM_Base_SetConfig+0x108>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	4a11      	ldr	r2, [pc, #68]	; (800c4d8 <TIM_Base_SetConfig+0x138>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d007      	beq.n	800c4a8 <TIM_Base_SetConfig+0x108>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	4a10      	ldr	r2, [pc, #64]	; (800c4dc <TIM_Base_SetConfig+0x13c>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d003      	beq.n	800c4a8 <TIM_Base_SetConfig+0x108>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	4a0f      	ldr	r2, [pc, #60]	; (800c4e0 <TIM_Base_SetConfig+0x140>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d103      	bne.n	800c4b0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	691a      	ldr	r2, [r3, #16]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	615a      	str	r2, [r3, #20]
}
 800c4b6:	bf00      	nop
 800c4b8:	3714      	adds	r7, #20
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop
 800c4c4:	40010000 	.word	0x40010000
 800c4c8:	40000400 	.word	0x40000400
 800c4cc:	40000800 	.word	0x40000800
 800c4d0:	40000c00 	.word	0x40000c00
 800c4d4:	40010400 	.word	0x40010400
 800c4d8:	40014000 	.word	0x40014000
 800c4dc:	40014400 	.word	0x40014400
 800c4e0:	40014800 	.word	0x40014800
 800c4e4:	4000e000 	.word	0x4000e000
 800c4e8:	4000e400 	.word	0x4000e400

0800c4ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b087      	sub	sp, #28
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6a1b      	ldr	r3, [r3, #32]
 800c4fa:	f023 0201 	bic.w	r2, r3, #1
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6a1b      	ldr	r3, [r3, #32]
 800c506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	699b      	ldr	r3, [r3, #24]
 800c512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	4b37      	ldr	r3, [pc, #220]	; (800c5f4 <TIM_OC1_SetConfig+0x108>)
 800c518:	4013      	ands	r3, r2
 800c51a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f023 0303 	bic.w	r3, r3, #3
 800c522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	4313      	orrs	r3, r2
 800c52c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	f023 0302 	bic.w	r3, r3, #2
 800c534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	697a      	ldr	r2, [r7, #20]
 800c53c:	4313      	orrs	r3, r2
 800c53e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	4a2d      	ldr	r2, [pc, #180]	; (800c5f8 <TIM_OC1_SetConfig+0x10c>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d00f      	beq.n	800c568 <TIM_OC1_SetConfig+0x7c>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	4a2c      	ldr	r2, [pc, #176]	; (800c5fc <TIM_OC1_SetConfig+0x110>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d00b      	beq.n	800c568 <TIM_OC1_SetConfig+0x7c>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	4a2b      	ldr	r2, [pc, #172]	; (800c600 <TIM_OC1_SetConfig+0x114>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d007      	beq.n	800c568 <TIM_OC1_SetConfig+0x7c>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	4a2a      	ldr	r2, [pc, #168]	; (800c604 <TIM_OC1_SetConfig+0x118>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d003      	beq.n	800c568 <TIM_OC1_SetConfig+0x7c>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	4a29      	ldr	r2, [pc, #164]	; (800c608 <TIM_OC1_SetConfig+0x11c>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d10c      	bne.n	800c582 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	f023 0308 	bic.w	r3, r3, #8
 800c56e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	697a      	ldr	r2, [r7, #20]
 800c576:	4313      	orrs	r3, r2
 800c578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	f023 0304 	bic.w	r3, r3, #4
 800c580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	4a1c      	ldr	r2, [pc, #112]	; (800c5f8 <TIM_OC1_SetConfig+0x10c>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d00f      	beq.n	800c5aa <TIM_OC1_SetConfig+0xbe>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	4a1b      	ldr	r2, [pc, #108]	; (800c5fc <TIM_OC1_SetConfig+0x110>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d00b      	beq.n	800c5aa <TIM_OC1_SetConfig+0xbe>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	4a1a      	ldr	r2, [pc, #104]	; (800c600 <TIM_OC1_SetConfig+0x114>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d007      	beq.n	800c5aa <TIM_OC1_SetConfig+0xbe>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4a19      	ldr	r2, [pc, #100]	; (800c604 <TIM_OC1_SetConfig+0x118>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d003      	beq.n	800c5aa <TIM_OC1_SetConfig+0xbe>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	4a18      	ldr	r2, [pc, #96]	; (800c608 <TIM_OC1_SetConfig+0x11c>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d111      	bne.n	800c5ce <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c5b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	695b      	ldr	r3, [r3, #20]
 800c5be:	693a      	ldr	r2, [r7, #16]
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	699b      	ldr	r3, [r3, #24]
 800c5c8:	693a      	ldr	r2, [r7, #16]
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	693a      	ldr	r2, [r7, #16]
 800c5d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	68fa      	ldr	r2, [r7, #12]
 800c5d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	685a      	ldr	r2, [r3, #4]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	697a      	ldr	r2, [r7, #20]
 800c5e6:	621a      	str	r2, [r3, #32]
}
 800c5e8:	bf00      	nop
 800c5ea:	371c      	adds	r7, #28
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr
 800c5f4:	fffeff8f 	.word	0xfffeff8f
 800c5f8:	40010000 	.word	0x40010000
 800c5fc:	40010400 	.word	0x40010400
 800c600:	40014000 	.word	0x40014000
 800c604:	40014400 	.word	0x40014400
 800c608:	40014800 	.word	0x40014800

0800c60c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b087      	sub	sp, #28
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6a1b      	ldr	r3, [r3, #32]
 800c61a:	f023 0210 	bic.w	r2, r3, #16
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6a1b      	ldr	r3, [r3, #32]
 800c626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	699b      	ldr	r3, [r3, #24]
 800c632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	4b34      	ldr	r3, [pc, #208]	; (800c708 <TIM_OC2_SetConfig+0xfc>)
 800c638:	4013      	ands	r3, r2
 800c63a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	021b      	lsls	r3, r3, #8
 800c64a:	68fa      	ldr	r2, [r7, #12]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	f023 0320 	bic.w	r3, r3, #32
 800c656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	689b      	ldr	r3, [r3, #8]
 800c65c:	011b      	lsls	r3, r3, #4
 800c65e:	697a      	ldr	r2, [r7, #20]
 800c660:	4313      	orrs	r3, r2
 800c662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	4a29      	ldr	r2, [pc, #164]	; (800c70c <TIM_OC2_SetConfig+0x100>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d003      	beq.n	800c674 <TIM_OC2_SetConfig+0x68>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	4a28      	ldr	r2, [pc, #160]	; (800c710 <TIM_OC2_SetConfig+0x104>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d10d      	bne.n	800c690 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c67a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	011b      	lsls	r3, r3, #4
 800c682:	697a      	ldr	r2, [r7, #20]
 800c684:	4313      	orrs	r3, r2
 800c686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c68e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4a1e      	ldr	r2, [pc, #120]	; (800c70c <TIM_OC2_SetConfig+0x100>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d00f      	beq.n	800c6b8 <TIM_OC2_SetConfig+0xac>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	4a1d      	ldr	r2, [pc, #116]	; (800c710 <TIM_OC2_SetConfig+0x104>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d00b      	beq.n	800c6b8 <TIM_OC2_SetConfig+0xac>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	4a1c      	ldr	r2, [pc, #112]	; (800c714 <TIM_OC2_SetConfig+0x108>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d007      	beq.n	800c6b8 <TIM_OC2_SetConfig+0xac>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4a1b      	ldr	r2, [pc, #108]	; (800c718 <TIM_OC2_SetConfig+0x10c>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d003      	beq.n	800c6b8 <TIM_OC2_SetConfig+0xac>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	4a1a      	ldr	r2, [pc, #104]	; (800c71c <TIM_OC2_SetConfig+0x110>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d113      	bne.n	800c6e0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c6be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c6c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	695b      	ldr	r3, [r3, #20]
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	693a      	ldr	r2, [r7, #16]
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	699b      	ldr	r3, [r3, #24]
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	693a      	ldr	r2, [r7, #16]
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	693a      	ldr	r2, [r7, #16]
 800c6e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	68fa      	ldr	r2, [r7, #12]
 800c6ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	685a      	ldr	r2, [r3, #4]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	697a      	ldr	r2, [r7, #20]
 800c6f8:	621a      	str	r2, [r3, #32]
}
 800c6fa:	bf00      	nop
 800c6fc:	371c      	adds	r7, #28
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr
 800c706:	bf00      	nop
 800c708:	feff8fff 	.word	0xfeff8fff
 800c70c:	40010000 	.word	0x40010000
 800c710:	40010400 	.word	0x40010400
 800c714:	40014000 	.word	0x40014000
 800c718:	40014400 	.word	0x40014400
 800c71c:	40014800 	.word	0x40014800

0800c720 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c720:	b480      	push	{r7}
 800c722:	b087      	sub	sp, #28
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6a1b      	ldr	r3, [r3, #32]
 800c72e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6a1b      	ldr	r3, [r3, #32]
 800c73a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	69db      	ldr	r3, [r3, #28]
 800c746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	4b33      	ldr	r3, [pc, #204]	; (800c818 <TIM_OC3_SetConfig+0xf8>)
 800c74c:	4013      	ands	r3, r2
 800c74e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f023 0303 	bic.w	r3, r3, #3
 800c756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	4313      	orrs	r3, r2
 800c760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	021b      	lsls	r3, r3, #8
 800c770:	697a      	ldr	r2, [r7, #20]
 800c772:	4313      	orrs	r3, r2
 800c774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	4a28      	ldr	r2, [pc, #160]	; (800c81c <TIM_OC3_SetConfig+0xfc>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d003      	beq.n	800c786 <TIM_OC3_SetConfig+0x66>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	4a27      	ldr	r2, [pc, #156]	; (800c820 <TIM_OC3_SetConfig+0x100>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d10d      	bne.n	800c7a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c78c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	68db      	ldr	r3, [r3, #12]
 800c792:	021b      	lsls	r3, r3, #8
 800c794:	697a      	ldr	r2, [r7, #20]
 800c796:	4313      	orrs	r3, r2
 800c798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c7a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	4a1d      	ldr	r2, [pc, #116]	; (800c81c <TIM_OC3_SetConfig+0xfc>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d00f      	beq.n	800c7ca <TIM_OC3_SetConfig+0xaa>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	4a1c      	ldr	r2, [pc, #112]	; (800c820 <TIM_OC3_SetConfig+0x100>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d00b      	beq.n	800c7ca <TIM_OC3_SetConfig+0xaa>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	4a1b      	ldr	r2, [pc, #108]	; (800c824 <TIM_OC3_SetConfig+0x104>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d007      	beq.n	800c7ca <TIM_OC3_SetConfig+0xaa>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4a1a      	ldr	r2, [pc, #104]	; (800c828 <TIM_OC3_SetConfig+0x108>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d003      	beq.n	800c7ca <TIM_OC3_SetConfig+0xaa>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4a19      	ldr	r2, [pc, #100]	; (800c82c <TIM_OC3_SetConfig+0x10c>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d113      	bne.n	800c7f2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c7d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	695b      	ldr	r3, [r3, #20]
 800c7de:	011b      	lsls	r3, r3, #4
 800c7e0:	693a      	ldr	r2, [r7, #16]
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	699b      	ldr	r3, [r3, #24]
 800c7ea:	011b      	lsls	r3, r3, #4
 800c7ec:	693a      	ldr	r2, [r7, #16]
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	693a      	ldr	r2, [r7, #16]
 800c7f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	68fa      	ldr	r2, [r7, #12]
 800c7fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	685a      	ldr	r2, [r3, #4]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	697a      	ldr	r2, [r7, #20]
 800c80a:	621a      	str	r2, [r3, #32]
}
 800c80c:	bf00      	nop
 800c80e:	371c      	adds	r7, #28
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr
 800c818:	fffeff8f 	.word	0xfffeff8f
 800c81c:	40010000 	.word	0x40010000
 800c820:	40010400 	.word	0x40010400
 800c824:	40014000 	.word	0x40014000
 800c828:	40014400 	.word	0x40014400
 800c82c:	40014800 	.word	0x40014800

0800c830 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c830:	b480      	push	{r7}
 800c832:	b087      	sub	sp, #28
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a1b      	ldr	r3, [r3, #32]
 800c83e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6a1b      	ldr	r3, [r3, #32]
 800c84a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	69db      	ldr	r3, [r3, #28]
 800c856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c858:	68fa      	ldr	r2, [r7, #12]
 800c85a:	4b24      	ldr	r3, [pc, #144]	; (800c8ec <TIM_OC4_SetConfig+0xbc>)
 800c85c:	4013      	ands	r3, r2
 800c85e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	021b      	lsls	r3, r3, #8
 800c86e:	68fa      	ldr	r2, [r7, #12]
 800c870:	4313      	orrs	r3, r2
 800c872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c87a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	031b      	lsls	r3, r3, #12
 800c882:	693a      	ldr	r2, [r7, #16]
 800c884:	4313      	orrs	r3, r2
 800c886:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	4a19      	ldr	r2, [pc, #100]	; (800c8f0 <TIM_OC4_SetConfig+0xc0>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d00f      	beq.n	800c8b0 <TIM_OC4_SetConfig+0x80>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4a18      	ldr	r2, [pc, #96]	; (800c8f4 <TIM_OC4_SetConfig+0xc4>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d00b      	beq.n	800c8b0 <TIM_OC4_SetConfig+0x80>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4a17      	ldr	r2, [pc, #92]	; (800c8f8 <TIM_OC4_SetConfig+0xc8>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d007      	beq.n	800c8b0 <TIM_OC4_SetConfig+0x80>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	4a16      	ldr	r2, [pc, #88]	; (800c8fc <TIM_OC4_SetConfig+0xcc>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d003      	beq.n	800c8b0 <TIM_OC4_SetConfig+0x80>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4a15      	ldr	r2, [pc, #84]	; (800c900 <TIM_OC4_SetConfig+0xd0>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d109      	bne.n	800c8c4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c8b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	695b      	ldr	r3, [r3, #20]
 800c8bc:	019b      	lsls	r3, r3, #6
 800c8be:	697a      	ldr	r2, [r7, #20]
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	697a      	ldr	r2, [r7, #20]
 800c8c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	68fa      	ldr	r2, [r7, #12]
 800c8ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	685a      	ldr	r2, [r3, #4]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	693a      	ldr	r2, [r7, #16]
 800c8dc:	621a      	str	r2, [r3, #32]
}
 800c8de:	bf00      	nop
 800c8e0:	371c      	adds	r7, #28
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr
 800c8ea:	bf00      	nop
 800c8ec:	feff8fff 	.word	0xfeff8fff
 800c8f0:	40010000 	.word	0x40010000
 800c8f4:	40010400 	.word	0x40010400
 800c8f8:	40014000 	.word	0x40014000
 800c8fc:	40014400 	.word	0x40014400
 800c900:	40014800 	.word	0x40014800

0800c904 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c904:	b480      	push	{r7}
 800c906:	b087      	sub	sp, #28
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6a1b      	ldr	r3, [r3, #32]
 800c912:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a1b      	ldr	r3, [r3, #32]
 800c91e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c92c:	68fa      	ldr	r2, [r7, #12]
 800c92e:	4b21      	ldr	r3, [pc, #132]	; (800c9b4 <TIM_OC5_SetConfig+0xb0>)
 800c930:	4013      	ands	r3, r2
 800c932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	4313      	orrs	r3, r2
 800c93c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c944:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	041b      	lsls	r3, r3, #16
 800c94c:	693a      	ldr	r2, [r7, #16]
 800c94e:	4313      	orrs	r3, r2
 800c950:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4a18      	ldr	r2, [pc, #96]	; (800c9b8 <TIM_OC5_SetConfig+0xb4>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d00f      	beq.n	800c97a <TIM_OC5_SetConfig+0x76>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	4a17      	ldr	r2, [pc, #92]	; (800c9bc <TIM_OC5_SetConfig+0xb8>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d00b      	beq.n	800c97a <TIM_OC5_SetConfig+0x76>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	4a16      	ldr	r2, [pc, #88]	; (800c9c0 <TIM_OC5_SetConfig+0xbc>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d007      	beq.n	800c97a <TIM_OC5_SetConfig+0x76>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4a15      	ldr	r2, [pc, #84]	; (800c9c4 <TIM_OC5_SetConfig+0xc0>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d003      	beq.n	800c97a <TIM_OC5_SetConfig+0x76>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	4a14      	ldr	r2, [pc, #80]	; (800c9c8 <TIM_OC5_SetConfig+0xc4>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d109      	bne.n	800c98e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c980:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	695b      	ldr	r3, [r3, #20]
 800c986:	021b      	lsls	r3, r3, #8
 800c988:	697a      	ldr	r2, [r7, #20]
 800c98a:	4313      	orrs	r3, r2
 800c98c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	697a      	ldr	r2, [r7, #20]
 800c992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	68fa      	ldr	r2, [r7, #12]
 800c998:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	685a      	ldr	r2, [r3, #4]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	693a      	ldr	r2, [r7, #16]
 800c9a6:	621a      	str	r2, [r3, #32]
}
 800c9a8:	bf00      	nop
 800c9aa:	371c      	adds	r7, #28
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr
 800c9b4:	fffeff8f 	.word	0xfffeff8f
 800c9b8:	40010000 	.word	0x40010000
 800c9bc:	40010400 	.word	0x40010400
 800c9c0:	40014000 	.word	0x40014000
 800c9c4:	40014400 	.word	0x40014400
 800c9c8:	40014800 	.word	0x40014800

0800c9cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b087      	sub	sp, #28
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6a1b      	ldr	r3, [r3, #32]
 800c9da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6a1b      	ldr	r3, [r3, #32]
 800c9e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c9f4:	68fa      	ldr	r2, [r7, #12]
 800c9f6:	4b22      	ldr	r3, [pc, #136]	; (800ca80 <TIM_OC6_SetConfig+0xb4>)
 800c9f8:	4013      	ands	r3, r2
 800c9fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	021b      	lsls	r3, r3, #8
 800ca02:	68fa      	ldr	r2, [r7, #12]
 800ca04:	4313      	orrs	r3, r2
 800ca06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ca0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	051b      	lsls	r3, r3, #20
 800ca16:	693a      	ldr	r2, [r7, #16]
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	4a19      	ldr	r2, [pc, #100]	; (800ca84 <TIM_OC6_SetConfig+0xb8>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d00f      	beq.n	800ca44 <TIM_OC6_SetConfig+0x78>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4a18      	ldr	r2, [pc, #96]	; (800ca88 <TIM_OC6_SetConfig+0xbc>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d00b      	beq.n	800ca44 <TIM_OC6_SetConfig+0x78>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	4a17      	ldr	r2, [pc, #92]	; (800ca8c <TIM_OC6_SetConfig+0xc0>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d007      	beq.n	800ca44 <TIM_OC6_SetConfig+0x78>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	4a16      	ldr	r2, [pc, #88]	; (800ca90 <TIM_OC6_SetConfig+0xc4>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d003      	beq.n	800ca44 <TIM_OC6_SetConfig+0x78>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4a15      	ldr	r2, [pc, #84]	; (800ca94 <TIM_OC6_SetConfig+0xc8>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d109      	bne.n	800ca58 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	695b      	ldr	r3, [r3, #20]
 800ca50:	029b      	lsls	r3, r3, #10
 800ca52:	697a      	ldr	r2, [r7, #20]
 800ca54:	4313      	orrs	r3, r2
 800ca56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	697a      	ldr	r2, [r7, #20]
 800ca5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	68fa      	ldr	r2, [r7, #12]
 800ca62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	685a      	ldr	r2, [r3, #4]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	693a      	ldr	r2, [r7, #16]
 800ca70:	621a      	str	r2, [r3, #32]
}
 800ca72:	bf00      	nop
 800ca74:	371c      	adds	r7, #28
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	feff8fff 	.word	0xfeff8fff
 800ca84:	40010000 	.word	0x40010000
 800ca88:	40010400 	.word	0x40010400
 800ca8c:	40014000 	.word	0x40014000
 800ca90:	40014400 	.word	0x40014400
 800ca94:	40014800 	.word	0x40014800

0800ca98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b087      	sub	sp, #28
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6a1b      	ldr	r3, [r3, #32]
 800caa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	6a1b      	ldr	r3, [r3, #32]
 800caae:	f023 0201 	bic.w	r2, r3, #1
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	699b      	ldr	r3, [r3, #24]
 800caba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	011b      	lsls	r3, r3, #4
 800cac8:	693a      	ldr	r2, [r7, #16]
 800caca:	4313      	orrs	r3, r2
 800cacc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	f023 030a 	bic.w	r3, r3, #10
 800cad4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cad6:	697a      	ldr	r2, [r7, #20]
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	4313      	orrs	r3, r2
 800cadc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	693a      	ldr	r2, [r7, #16]
 800cae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	697a      	ldr	r2, [r7, #20]
 800cae8:	621a      	str	r2, [r3, #32]
}
 800caea:	bf00      	nop
 800caec:	371c      	adds	r7, #28
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr

0800caf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800caf6:	b480      	push	{r7}
 800caf8:	b087      	sub	sp, #28
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	60f8      	str	r0, [r7, #12]
 800cafe:	60b9      	str	r1, [r7, #8]
 800cb00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	6a1b      	ldr	r3, [r3, #32]
 800cb06:	f023 0210 	bic.w	r2, r3, #16
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	699b      	ldr	r3, [r3, #24]
 800cb12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	6a1b      	ldr	r3, [r3, #32]
 800cb18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cb20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	031b      	lsls	r3, r3, #12
 800cb26:	697a      	ldr	r2, [r7, #20]
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cb32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	011b      	lsls	r3, r3, #4
 800cb38:	693a      	ldr	r2, [r7, #16]
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	697a      	ldr	r2, [r7, #20]
 800cb42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	693a      	ldr	r2, [r7, #16]
 800cb48:	621a      	str	r2, [r3, #32]
}
 800cb4a:	bf00      	nop
 800cb4c:	371c      	adds	r7, #28
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr
	...

0800cb58 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	689b      	ldr	r3, [r3, #8]
 800cb66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb68:	68fa      	ldr	r2, [r7, #12]
 800cb6a:	4b09      	ldr	r3, [pc, #36]	; (800cb90 <TIM_ITRx_SetConfig+0x38>)
 800cb6c:	4013      	ands	r3, r2
 800cb6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cb70:	683a      	ldr	r2, [r7, #0]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	4313      	orrs	r3, r2
 800cb76:	f043 0307 	orr.w	r3, r3, #7
 800cb7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	609a      	str	r2, [r3, #8]
}
 800cb82:	bf00      	nop
 800cb84:	3714      	adds	r7, #20
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	ffcfff8f 	.word	0xffcfff8f

0800cb94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b087      	sub	sp, #28
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	607a      	str	r2, [r7, #4]
 800cba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	689b      	ldr	r3, [r3, #8]
 800cba6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cbae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	021a      	lsls	r2, r3, #8
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	431a      	orrs	r2, r3
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	697a      	ldr	r2, [r7, #20]
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	697a      	ldr	r2, [r7, #20]
 800cbc6:	609a      	str	r2, [r3, #8]
}
 800cbc8:	bf00      	nop
 800cbca:	371c      	adds	r7, #28
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b087      	sub	sp, #28
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	f003 031f 	and.w	r3, r3, #31
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	fa02 f303 	lsl.w	r3, r2, r3
 800cbec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	6a1a      	ldr	r2, [r3, #32]
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	43db      	mvns	r3, r3
 800cbf6:	401a      	ands	r2, r3
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	6a1a      	ldr	r2, [r3, #32]
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	f003 031f 	and.w	r3, r3, #31
 800cc06:	6879      	ldr	r1, [r7, #4]
 800cc08:	fa01 f303 	lsl.w	r3, r1, r3
 800cc0c:	431a      	orrs	r2, r3
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	621a      	str	r2, [r3, #32]
}
 800cc12:	bf00      	nop
 800cc14:	371c      	adds	r7, #28
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr
	...

0800cc20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b085      	sub	sp, #20
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d101      	bne.n	800cc38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cc34:	2302      	movs	r3, #2
 800cc36:	e077      	b.n	800cd28 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2202      	movs	r2, #2
 800cc44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	689b      	ldr	r3, [r3, #8]
 800cc56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a35      	ldr	r2, [pc, #212]	; (800cd34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d004      	beq.n	800cc6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a34      	ldr	r2, [pc, #208]	; (800cd38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d108      	bne.n	800cc7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cc72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	68fa      	ldr	r2, [r7, #12]
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	68fa      	ldr	r2, [r7, #12]
 800cc96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a25      	ldr	r2, [pc, #148]	; (800cd34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d02c      	beq.n	800ccfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccaa:	d027      	beq.n	800ccfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a22      	ldr	r2, [pc, #136]	; (800cd3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d022      	beq.n	800ccfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a21      	ldr	r2, [pc, #132]	; (800cd40 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d01d      	beq.n	800ccfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a1f      	ldr	r2, [pc, #124]	; (800cd44 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d018      	beq.n	800ccfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4a1a      	ldr	r2, [pc, #104]	; (800cd38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d013      	beq.n	800ccfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a1b      	ldr	r2, [pc, #108]	; (800cd48 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d00e      	beq.n	800ccfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a1a      	ldr	r2, [pc, #104]	; (800cd4c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d009      	beq.n	800ccfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a18      	ldr	r2, [pc, #96]	; (800cd50 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d004      	beq.n	800ccfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a17      	ldr	r2, [pc, #92]	; (800cd54 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d10c      	bne.n	800cd16 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	68ba      	ldr	r2, [r7, #8]
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	68ba      	ldr	r2, [r7, #8]
 800cd14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2201      	movs	r2, #1
 800cd1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd26:	2300      	movs	r3, #0
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3714      	adds	r7, #20
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr
 800cd34:	40010000 	.word	0x40010000
 800cd38:	40010400 	.word	0x40010400
 800cd3c:	40000400 	.word	0x40000400
 800cd40:	40000800 	.word	0x40000800
 800cd44:	40000c00 	.word	0x40000c00
 800cd48:	40001800 	.word	0x40001800
 800cd4c:	40014000 	.word	0x40014000
 800cd50:	4000e000 	.word	0x4000e000
 800cd54:	4000e400 	.word	0x4000e400

0800cd58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cd62:	2300      	movs	r3, #0
 800cd64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d101      	bne.n	800cd74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cd70:	2302      	movs	r3, #2
 800cd72:	e087      	b.n	800ce84 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2201      	movs	r2, #1
 800cd78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	68db      	ldr	r3, [r3, #12]
 800cd86:	4313      	orrs	r3, r2
 800cd88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	689b      	ldr	r3, [r3, #8]
 800cd94:	4313      	orrs	r3, r2
 800cd96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	4313      	orrs	r3, r2
 800cda4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	691b      	ldr	r3, [r3, #16]
 800cdbe:	4313      	orrs	r3, r2
 800cdc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	695b      	ldr	r3, [r3, #20]
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdda:	4313      	orrs	r3, r2
 800cddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	699b      	ldr	r3, [r3, #24]
 800cde8:	041b      	lsls	r3, r3, #16
 800cdea:	4313      	orrs	r3, r2
 800cdec:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4a27      	ldr	r2, [pc, #156]	; (800ce90 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d004      	beq.n	800ce02 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4a25      	ldr	r2, [pc, #148]	; (800ce94 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d106      	bne.n	800ce10 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	69db      	ldr	r3, [r3, #28]
 800ce0c:	4313      	orrs	r3, r2
 800ce0e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a1e      	ldr	r2, [pc, #120]	; (800ce90 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d004      	beq.n	800ce24 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4a1d      	ldr	r2, [pc, #116]	; (800ce94 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d126      	bne.n	800ce72 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce2e:	051b      	lsls	r3, r3, #20
 800ce30:	4313      	orrs	r3, r2
 800ce32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	6a1b      	ldr	r3, [r3, #32]
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4a0e      	ldr	r2, [pc, #56]	; (800ce90 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d004      	beq.n	800ce64 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4a0d      	ldr	r2, [pc, #52]	; (800ce94 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d106      	bne.n	800ce72 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	68fa      	ldr	r2, [r7, #12]
 800ce78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce82:	2300      	movs	r3, #0
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3714      	adds	r7, #20
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr
 800ce90:	40010000 	.word	0x40010000
 800ce94:	40010400 	.word	0x40010400

0800ce98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cea0:	bf00      	nop
 800cea2:	370c      	adds	r7, #12
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ceb4:	bf00      	nop
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cec8:	bf00      	nop
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d101      	bne.n	800cee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cee2:	2301      	movs	r3, #1
 800cee4:	e042      	b.n	800cf6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d106      	bne.n	800cefe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f7f8 f85d 	bl	8004fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2224      	movs	r2, #36	; 0x24
 800cf02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f022 0201 	bic.w	r2, r2, #1
 800cf14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 fd1c 	bl	800d954 <UART_SetConfig>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d101      	bne.n	800cf26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cf22:	2301      	movs	r3, #1
 800cf24:	e022      	b.n	800cf6c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d002      	beq.n	800cf34 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f001 fb7c 	bl	800e62c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	685a      	ldr	r2, [r3, #4]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cf42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	689a      	ldr	r2, [r3, #8]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cf52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f042 0201 	orr.w	r2, r2, #1
 800cf62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f001 fc03 	bl	800e770 <UART_CheckIdleState>
 800cf6a:	4603      	mov	r3, r0
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d101      	bne.n	800cf86 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800cf82:	2301      	movs	r3, #1
 800cf84:	e031      	b.n	800cfea <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2224      	movs	r2, #36	; 0x24
 800cf8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f022 0201 	bic.w	r2, r2, #1
 800cf9c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f7f8 f8d6 	bl	8005168 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cfe8:	2300      	movs	r3, #0
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
	...

0800cff4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b08a      	sub	sp, #40	; 0x28
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	60f8      	str	r0, [r7, #12]
 800cffc:	60b9      	str	r1, [r7, #8]
 800cffe:	4613      	mov	r3, r2
 800d000:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d008:	2b20      	cmp	r3, #32
 800d00a:	d167      	bne.n	800d0dc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d002      	beq.n	800d018 <HAL_UART_Transmit_DMA+0x24>
 800d012:	88fb      	ldrh	r3, [r7, #6]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d101      	bne.n	800d01c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800d018:	2301      	movs	r3, #1
 800d01a:	e060      	b.n	800d0de <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	88fa      	ldrh	r2, [r7, #6]
 800d026:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	88fa      	ldrh	r2, [r7, #6]
 800d02e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2200      	movs	r2, #0
 800d036:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2221      	movs	r2, #33	; 0x21
 800d03e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d046:	2b00      	cmp	r3, #0
 800d048:	d028      	beq.n	800d09c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d04e:	4a26      	ldr	r2, [pc, #152]	; (800d0e8 <HAL_UART_Transmit_DMA+0xf4>)
 800d050:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d056:	4a25      	ldr	r2, [pc, #148]	; (800d0ec <HAL_UART_Transmit_DMA+0xf8>)
 800d058:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d05e:	4a24      	ldr	r2, [pc, #144]	; (800d0f0 <HAL_UART_Transmit_DMA+0xfc>)
 800d060:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d066:	2200      	movs	r2, #0
 800d068:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d072:	4619      	mov	r1, r3
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	3328      	adds	r3, #40	; 0x28
 800d07a:	461a      	mov	r2, r3
 800d07c:	88fb      	ldrh	r3, [r7, #6]
 800d07e:	f7f8 ffaf 	bl	8005fe0 <HAL_DMA_Start_IT>
 800d082:	4603      	mov	r3, r0
 800d084:	2b00      	cmp	r3, #0
 800d086:	d009      	beq.n	800d09c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2210      	movs	r2, #16
 800d08c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2220      	movs	r2, #32
 800d094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800d098:	2301      	movs	r3, #1
 800d09a:	e020      	b.n	800d0de <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	2240      	movs	r2, #64	; 0x40
 800d0a2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	3308      	adds	r3, #8
 800d0aa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	e853 3f00 	ldrex	r3, [r3]
 800d0b2:	613b      	str	r3, [r7, #16]
   return(result);
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0ba:	627b      	str	r3, [r7, #36]	; 0x24
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	3308      	adds	r3, #8
 800d0c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0c4:	623a      	str	r2, [r7, #32]
 800d0c6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0c8:	69f9      	ldr	r1, [r7, #28]
 800d0ca:	6a3a      	ldr	r2, [r7, #32]
 800d0cc:	e841 2300 	strex	r3, r2, [r1]
 800d0d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d1e5      	bne.n	800d0a4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	e000      	b.n	800d0de <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800d0dc:	2302      	movs	r3, #2
  }
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3728      	adds	r7, #40	; 0x28
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	0800ec31 	.word	0x0800ec31
 800d0ec:	0800ecc7 	.word	0x0800ecc7
 800d0f0:	0800ee49 	.word	0x0800ee49

0800d0f4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b08a      	sub	sp, #40	; 0x28
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	4613      	mov	r3, r2
 800d100:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d108:	2b20      	cmp	r3, #32
 800d10a:	d137      	bne.n	800d17c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d002      	beq.n	800d118 <HAL_UART_Receive_DMA+0x24>
 800d112:	88fb      	ldrh	r3, [r7, #6]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d101      	bne.n	800d11c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d118:	2301      	movs	r3, #1
 800d11a:	e030      	b.n	800d17e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2200      	movs	r2, #0
 800d120:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4a18      	ldr	r2, [pc, #96]	; (800d188 <HAL_UART_Receive_DMA+0x94>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d01f      	beq.n	800d16c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d136:	2b00      	cmp	r3, #0
 800d138:	d018      	beq.n	800d16c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	e853 3f00 	ldrex	r3, [r3]
 800d146:	613b      	str	r3, [r7, #16]
   return(result);
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d14e:	627b      	str	r3, [r7, #36]	; 0x24
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	461a      	mov	r2, r3
 800d156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d158:	623b      	str	r3, [r7, #32]
 800d15a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d15c:	69f9      	ldr	r1, [r7, #28]
 800d15e:	6a3a      	ldr	r2, [r7, #32]
 800d160:	e841 2300 	strex	r3, r2, [r1]
 800d164:	61bb      	str	r3, [r7, #24]
   return(result);
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d1e6      	bne.n	800d13a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d16c:	88fb      	ldrh	r3, [r7, #6]
 800d16e:	461a      	mov	r2, r3
 800d170:	68b9      	ldr	r1, [r7, #8]
 800d172:	68f8      	ldr	r0, [r7, #12]
 800d174:	f001 fc0e 	bl	800e994 <UART_Start_Receive_DMA>
 800d178:	4603      	mov	r3, r0
 800d17a:	e000      	b.n	800d17e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d17c:	2302      	movs	r3, #2
  }
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3728      	adds	r7, #40	; 0x28
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	58000c00 	.word	0x58000c00

0800d18c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b0ba      	sub	sp, #232	; 0xe8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	69db      	ldr	r3, [r3, #28]
 800d19a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	689b      	ldr	r3, [r3, #8]
 800d1ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d1b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d1b6:	f640 030f 	movw	r3, #2063	; 0x80f
 800d1ba:	4013      	ands	r3, r2
 800d1bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d1c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d11b      	bne.n	800d200 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d1c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1cc:	f003 0320 	and.w	r3, r3, #32
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d015      	beq.n	800d200 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d1d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1d8:	f003 0320 	and.w	r3, r3, #32
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d105      	bne.n	800d1ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d1e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d1e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d009      	beq.n	800d200 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	f000 8377 	beq.w	800d8e4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	4798      	blx	r3
      }
      return;
 800d1fe:	e371      	b.n	800d8e4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d200:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d204:	2b00      	cmp	r3, #0
 800d206:	f000 8123 	beq.w	800d450 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d20a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d20e:	4b8d      	ldr	r3, [pc, #564]	; (800d444 <HAL_UART_IRQHandler+0x2b8>)
 800d210:	4013      	ands	r3, r2
 800d212:	2b00      	cmp	r3, #0
 800d214:	d106      	bne.n	800d224 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d216:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d21a:	4b8b      	ldr	r3, [pc, #556]	; (800d448 <HAL_UART_IRQHandler+0x2bc>)
 800d21c:	4013      	ands	r3, r2
 800d21e:	2b00      	cmp	r3, #0
 800d220:	f000 8116 	beq.w	800d450 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d228:	f003 0301 	and.w	r3, r3, #1
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d011      	beq.n	800d254 <HAL_UART_IRQHandler+0xc8>
 800d230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d00b      	beq.n	800d254 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2201      	movs	r2, #1
 800d242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d24a:	f043 0201 	orr.w	r2, r3, #1
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d258:	f003 0302 	and.w	r3, r3, #2
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d011      	beq.n	800d284 <HAL_UART_IRQHandler+0xf8>
 800d260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d264:	f003 0301 	and.w	r3, r3, #1
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00b      	beq.n	800d284 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2202      	movs	r2, #2
 800d272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d27a:	f043 0204 	orr.w	r2, r3, #4
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d288:	f003 0304 	and.w	r3, r3, #4
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d011      	beq.n	800d2b4 <HAL_UART_IRQHandler+0x128>
 800d290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d294:	f003 0301 	and.w	r3, r3, #1
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00b      	beq.n	800d2b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	2204      	movs	r2, #4
 800d2a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2aa:	f043 0202 	orr.w	r2, r3, #2
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d2b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2b8:	f003 0308 	and.w	r3, r3, #8
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d017      	beq.n	800d2f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d2c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2c4:	f003 0320 	and.w	r3, r3, #32
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d105      	bne.n	800d2d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d2cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d2d0:	4b5c      	ldr	r3, [pc, #368]	; (800d444 <HAL_UART_IRQHandler+0x2b8>)
 800d2d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d00b      	beq.n	800d2f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2208      	movs	r2, #8
 800d2de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2e6:	f043 0208 	orr.w	r2, r3, #8
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d2f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d012      	beq.n	800d322 <HAL_UART_IRQHandler+0x196>
 800d2fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d300:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d304:	2b00      	cmp	r3, #0
 800d306:	d00c      	beq.n	800d322 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d310:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d318:	f043 0220 	orr.w	r2, r3, #32
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d328:	2b00      	cmp	r3, #0
 800d32a:	f000 82dd 	beq.w	800d8e8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d32e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d332:	f003 0320 	and.w	r3, r3, #32
 800d336:	2b00      	cmp	r3, #0
 800d338:	d013      	beq.n	800d362 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d33a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d33e:	f003 0320 	and.w	r3, r3, #32
 800d342:	2b00      	cmp	r3, #0
 800d344:	d105      	bne.n	800d352 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d34a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d007      	beq.n	800d362 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d356:	2b00      	cmp	r3, #0
 800d358:	d003      	beq.n	800d362 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d368:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	689b      	ldr	r3, [r3, #8]
 800d372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d376:	2b40      	cmp	r3, #64	; 0x40
 800d378:	d005      	beq.n	800d386 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d37a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d37e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d382:	2b00      	cmp	r3, #0
 800d384:	d054      	beq.n	800d430 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f001 fbec 	bl	800eb64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	689b      	ldr	r3, [r3, #8]
 800d392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d396:	2b40      	cmp	r3, #64	; 0x40
 800d398:	d146      	bne.n	800d428 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	3308      	adds	r3, #8
 800d3a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d3a8:	e853 3f00 	ldrex	r3, [r3]
 800d3ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d3b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d3b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	3308      	adds	r3, #8
 800d3c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d3c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d3ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d3d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d3d6:	e841 2300 	strex	r3, r2, [r1]
 800d3da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d3de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d1d9      	bne.n	800d39a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d017      	beq.n	800d420 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3f6:	4a15      	ldr	r2, [pc, #84]	; (800d44c <HAL_UART_IRQHandler+0x2c0>)
 800d3f8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d400:	4618      	mov	r0, r3
 800d402:	f7f9 fb75 	bl	8006af0 <HAL_DMA_Abort_IT>
 800d406:	4603      	mov	r3, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d019      	beq.n	800d440 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d41a:	4610      	mov	r0, r2
 800d41c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d41e:	e00f      	b.n	800d440 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f7f4 f9df 	bl	80017e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d426:	e00b      	b.n	800d440 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f7f4 f9db 	bl	80017e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d42e:	e007      	b.n	800d440 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f7f4 f9d7 	bl	80017e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2200      	movs	r2, #0
 800d43a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d43e:	e253      	b.n	800d8e8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d440:	bf00      	nop
    return;
 800d442:	e251      	b.n	800d8e8 <HAL_UART_IRQHandler+0x75c>
 800d444:	10000001 	.word	0x10000001
 800d448:	04000120 	.word	0x04000120
 800d44c:	0800eec9 	.word	0x0800eec9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d454:	2b01      	cmp	r3, #1
 800d456:	f040 81e7 	bne.w	800d828 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d45a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d45e:	f003 0310 	and.w	r3, r3, #16
 800d462:	2b00      	cmp	r3, #0
 800d464:	f000 81e0 	beq.w	800d828 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d46c:	f003 0310 	and.w	r3, r3, #16
 800d470:	2b00      	cmp	r3, #0
 800d472:	f000 81d9 	beq.w	800d828 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	2210      	movs	r2, #16
 800d47c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	689b      	ldr	r3, [r3, #8]
 800d484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d488:	2b40      	cmp	r3, #64	; 0x40
 800d48a:	f040 8151 	bne.w	800d730 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	4a96      	ldr	r2, [pc, #600]	; (800d6f0 <HAL_UART_IRQHandler+0x564>)
 800d498:	4293      	cmp	r3, r2
 800d49a:	d068      	beq.n	800d56e <HAL_UART_IRQHandler+0x3e2>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4a93      	ldr	r2, [pc, #588]	; (800d6f4 <HAL_UART_IRQHandler+0x568>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d061      	beq.n	800d56e <HAL_UART_IRQHandler+0x3e2>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4a91      	ldr	r2, [pc, #580]	; (800d6f8 <HAL_UART_IRQHandler+0x56c>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d05a      	beq.n	800d56e <HAL_UART_IRQHandler+0x3e2>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a8e      	ldr	r2, [pc, #568]	; (800d6fc <HAL_UART_IRQHandler+0x570>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d053      	beq.n	800d56e <HAL_UART_IRQHandler+0x3e2>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	4a8c      	ldr	r2, [pc, #560]	; (800d700 <HAL_UART_IRQHandler+0x574>)
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	d04c      	beq.n	800d56e <HAL_UART_IRQHandler+0x3e2>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	4a89      	ldr	r2, [pc, #548]	; (800d704 <HAL_UART_IRQHandler+0x578>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d045      	beq.n	800d56e <HAL_UART_IRQHandler+0x3e2>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4a87      	ldr	r2, [pc, #540]	; (800d708 <HAL_UART_IRQHandler+0x57c>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d03e      	beq.n	800d56e <HAL_UART_IRQHandler+0x3e2>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4a84      	ldr	r2, [pc, #528]	; (800d70c <HAL_UART_IRQHandler+0x580>)
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d037      	beq.n	800d56e <HAL_UART_IRQHandler+0x3e2>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4a82      	ldr	r2, [pc, #520]	; (800d710 <HAL_UART_IRQHandler+0x584>)
 800d508:	4293      	cmp	r3, r2
 800d50a:	d030      	beq.n	800d56e <HAL_UART_IRQHandler+0x3e2>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4a7f      	ldr	r2, [pc, #508]	; (800d714 <HAL_UART_IRQHandler+0x588>)
 800d516:	4293      	cmp	r3, r2
 800d518:	d029      	beq.n	800d56e <HAL_UART_IRQHandler+0x3e2>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	4a7d      	ldr	r2, [pc, #500]	; (800d718 <HAL_UART_IRQHandler+0x58c>)
 800d524:	4293      	cmp	r3, r2
 800d526:	d022      	beq.n	800d56e <HAL_UART_IRQHandler+0x3e2>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a7a      	ldr	r2, [pc, #488]	; (800d71c <HAL_UART_IRQHandler+0x590>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d01b      	beq.n	800d56e <HAL_UART_IRQHandler+0x3e2>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4a78      	ldr	r2, [pc, #480]	; (800d720 <HAL_UART_IRQHandler+0x594>)
 800d540:	4293      	cmp	r3, r2
 800d542:	d014      	beq.n	800d56e <HAL_UART_IRQHandler+0x3e2>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a75      	ldr	r2, [pc, #468]	; (800d724 <HAL_UART_IRQHandler+0x598>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d00d      	beq.n	800d56e <HAL_UART_IRQHandler+0x3e2>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	4a73      	ldr	r2, [pc, #460]	; (800d728 <HAL_UART_IRQHandler+0x59c>)
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d006      	beq.n	800d56e <HAL_UART_IRQHandler+0x3e2>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a70      	ldr	r2, [pc, #448]	; (800d72c <HAL_UART_IRQHandler+0x5a0>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d106      	bne.n	800d57c <HAL_UART_IRQHandler+0x3f0>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	b29b      	uxth	r3, r3
 800d57a:	e005      	b.n	800d588 <HAL_UART_IRQHandler+0x3fc>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	b29b      	uxth	r3, r3
 800d588:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d58c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d590:	2b00      	cmp	r3, #0
 800d592:	f000 81ab 	beq.w	800d8ec <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d59c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	f080 81a3 	bcs.w	800d8ec <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d5ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5b6:	69db      	ldr	r3, [r3, #28]
 800d5b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5bc:	f000 8087 	beq.w	800d6ce <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d5cc:	e853 3f00 	ldrex	r3, [r3]
 800d5d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d5d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d5d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d5ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d5ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d5f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d5fa:	e841 2300 	strex	r3, r2, [r1]
 800d5fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d602:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d606:	2b00      	cmp	r3, #0
 800d608:	d1da      	bne.n	800d5c0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	3308      	adds	r3, #8
 800d610:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d614:	e853 3f00 	ldrex	r3, [r3]
 800d618:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d61a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d61c:	f023 0301 	bic.w	r3, r3, #1
 800d620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	3308      	adds	r3, #8
 800d62a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d62e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d632:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d634:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d636:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d63a:	e841 2300 	strex	r3, r2, [r1]
 800d63e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d642:	2b00      	cmp	r3, #0
 800d644:	d1e1      	bne.n	800d60a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	3308      	adds	r3, #8
 800d64c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d64e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d650:	e853 3f00 	ldrex	r3, [r3]
 800d654:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d65c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	3308      	adds	r3, #8
 800d666:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d66a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d66c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d66e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d670:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d672:	e841 2300 	strex	r3, r2, [r1]
 800d676:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d1e3      	bne.n	800d646 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2220      	movs	r2, #32
 800d682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2200      	movs	r2, #0
 800d68a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d694:	e853 3f00 	ldrex	r3, [r3]
 800d698:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d69a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d69c:	f023 0310 	bic.w	r3, r3, #16
 800d6a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d6ae:	65bb      	str	r3, [r7, #88]	; 0x58
 800d6b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d6b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6b6:	e841 2300 	strex	r3, r2, [r1]
 800d6ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d6bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d1e4      	bne.n	800d68c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7f8 fef3 	bl	80064b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2202      	movs	r2, #2
 800d6d2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	1ad3      	subs	r3, r2, r3
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 f927 	bl	800d93c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d6ee:	e0fd      	b.n	800d8ec <HAL_UART_IRQHandler+0x760>
 800d6f0:	40020010 	.word	0x40020010
 800d6f4:	40020028 	.word	0x40020028
 800d6f8:	40020040 	.word	0x40020040
 800d6fc:	40020058 	.word	0x40020058
 800d700:	40020070 	.word	0x40020070
 800d704:	40020088 	.word	0x40020088
 800d708:	400200a0 	.word	0x400200a0
 800d70c:	400200b8 	.word	0x400200b8
 800d710:	40020410 	.word	0x40020410
 800d714:	40020428 	.word	0x40020428
 800d718:	40020440 	.word	0x40020440
 800d71c:	40020458 	.word	0x40020458
 800d720:	40020470 	.word	0x40020470
 800d724:	40020488 	.word	0x40020488
 800d728:	400204a0 	.word	0x400204a0
 800d72c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	1ad3      	subs	r3, r2, r3
 800d740:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	f000 80cf 	beq.w	800d8f0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d752:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d756:	2b00      	cmp	r3, #0
 800d758:	f000 80ca 	beq.w	800d8f0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d764:	e853 3f00 	ldrex	r3, [r3]
 800d768:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d76c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d770:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	461a      	mov	r2, r3
 800d77a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d77e:	647b      	str	r3, [r7, #68]	; 0x44
 800d780:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d782:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d784:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d786:	e841 2300 	strex	r3, r2, [r1]
 800d78a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d78c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d1e4      	bne.n	800d75c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	3308      	adds	r3, #8
 800d798:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79c:	e853 3f00 	ldrex	r3, [r3]
 800d7a0:	623b      	str	r3, [r7, #32]
   return(result);
 800d7a2:	6a3a      	ldr	r2, [r7, #32]
 800d7a4:	4b55      	ldr	r3, [pc, #340]	; (800d8fc <HAL_UART_IRQHandler+0x770>)
 800d7a6:	4013      	ands	r3, r2
 800d7a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	3308      	adds	r3, #8
 800d7b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d7b6:	633a      	str	r2, [r7, #48]	; 0x30
 800d7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7be:	e841 2300 	strex	r3, r2, [r1]
 800d7c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d1e3      	bne.n	800d792 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2220      	movs	r2, #32
 800d7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	e853 3f00 	ldrex	r3, [r3]
 800d7ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f023 0310 	bic.w	r3, r3, #16
 800d7f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d800:	61fb      	str	r3, [r7, #28]
 800d802:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d804:	69b9      	ldr	r1, [r7, #24]
 800d806:	69fa      	ldr	r2, [r7, #28]
 800d808:	e841 2300 	strex	r3, r2, [r1]
 800d80c:	617b      	str	r3, [r7, #20]
   return(result);
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d1e4      	bne.n	800d7de <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2202      	movs	r2, #2
 800d818:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d81a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d81e:	4619      	mov	r1, r3
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f000 f88b 	bl	800d93c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d826:	e063      	b.n	800d8f0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d82c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d830:	2b00      	cmp	r3, #0
 800d832:	d00e      	beq.n	800d852 <HAL_UART_IRQHandler+0x6c6>
 800d834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d008      	beq.n	800d852 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d848:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f001 fb7d 	bl	800ef4a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d850:	e051      	b.n	800d8f6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d014      	beq.n	800d888 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d85e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d866:	2b00      	cmp	r3, #0
 800d868:	d105      	bne.n	800d876 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d86a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d86e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d872:	2b00      	cmp	r3, #0
 800d874:	d008      	beq.n	800d888 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d03a      	beq.n	800d8f4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	4798      	blx	r3
    }
    return;
 800d886:	e035      	b.n	800d8f4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d88c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d890:	2b00      	cmp	r3, #0
 800d892:	d009      	beq.n	800d8a8 <HAL_UART_IRQHandler+0x71c>
 800d894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d003      	beq.n	800d8a8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f001 fb27 	bl	800eef4 <UART_EndTransmit_IT>
    return;
 800d8a6:	e026      	b.n	800d8f6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d8a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d009      	beq.n	800d8c8 <HAL_UART_IRQHandler+0x73c>
 800d8b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d003      	beq.n	800d8c8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f001 fb56 	bl	800ef72 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d8c6:	e016      	b.n	800d8f6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d8c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d010      	beq.n	800d8f6 <HAL_UART_IRQHandler+0x76a>
 800d8d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	da0c      	bge.n	800d8f6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f001 fb3e 	bl	800ef5e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d8e2:	e008      	b.n	800d8f6 <HAL_UART_IRQHandler+0x76a>
      return;
 800d8e4:	bf00      	nop
 800d8e6:	e006      	b.n	800d8f6 <HAL_UART_IRQHandler+0x76a>
    return;
 800d8e8:	bf00      	nop
 800d8ea:	e004      	b.n	800d8f6 <HAL_UART_IRQHandler+0x76a>
      return;
 800d8ec:	bf00      	nop
 800d8ee:	e002      	b.n	800d8f6 <HAL_UART_IRQHandler+0x76a>
      return;
 800d8f0:	bf00      	nop
 800d8f2:	e000      	b.n	800d8f6 <HAL_UART_IRQHandler+0x76a>
    return;
 800d8f4:	bf00      	nop
  }
}
 800d8f6:	37e8      	adds	r7, #232	; 0xe8
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	effffffe 	.word	0xeffffffe

0800d900 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d900:	b480      	push	{r7}
 800d902:	b083      	sub	sp, #12
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d908:	bf00      	nop
 800d90a:	370c      	adds	r7, #12
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr

0800d914 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d914:	b480      	push	{r7}
 800d916:	b083      	sub	sp, #12
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d91c:	bf00      	nop
 800d91e:	370c      	adds	r7, #12
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d928:	b480      	push	{r7}
 800d92a:	b083      	sub	sp, #12
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d930:	bf00      	nop
 800d932:	370c      	adds	r7, #12
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr

0800d93c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b083      	sub	sp, #12
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	460b      	mov	r3, r1
 800d946:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d948:	bf00      	nop
 800d94a:	370c      	adds	r7, #12
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr

0800d954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d958:	b092      	sub	sp, #72	; 0x48
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d95e:	2300      	movs	r3, #0
 800d960:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	689a      	ldr	r2, [r3, #8]
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	691b      	ldr	r3, [r3, #16]
 800d96c:	431a      	orrs	r2, r3
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	695b      	ldr	r3, [r3, #20]
 800d972:	431a      	orrs	r2, r3
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	69db      	ldr	r3, [r3, #28]
 800d978:	4313      	orrs	r3, r2
 800d97a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	681a      	ldr	r2, [r3, #0]
 800d982:	4bbe      	ldr	r3, [pc, #760]	; (800dc7c <UART_SetConfig+0x328>)
 800d984:	4013      	ands	r3, r2
 800d986:	697a      	ldr	r2, [r7, #20]
 800d988:	6812      	ldr	r2, [r2, #0]
 800d98a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d98c:	430b      	orrs	r3, r1
 800d98e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	68da      	ldr	r2, [r3, #12]
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	430a      	orrs	r2, r1
 800d9a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	699b      	ldr	r3, [r3, #24]
 800d9aa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4ab3      	ldr	r2, [pc, #716]	; (800dc80 <UART_SetConfig+0x32c>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d004      	beq.n	800d9c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	6a1b      	ldr	r3, [r3, #32]
 800d9ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	689a      	ldr	r2, [r3, #8]
 800d9c6:	4baf      	ldr	r3, [pc, #700]	; (800dc84 <UART_SetConfig+0x330>)
 800d9c8:	4013      	ands	r3, r2
 800d9ca:	697a      	ldr	r2, [r7, #20]
 800d9cc:	6812      	ldr	r2, [r2, #0]
 800d9ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9d0:	430b      	orrs	r3, r1
 800d9d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9da:	f023 010f 	bic.w	r1, r3, #15
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	430a      	orrs	r2, r1
 800d9e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	4aa6      	ldr	r2, [pc, #664]	; (800dc88 <UART_SetConfig+0x334>)
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d177      	bne.n	800dae4 <UART_SetConfig+0x190>
 800d9f4:	4ba5      	ldr	r3, [pc, #660]	; (800dc8c <UART_SetConfig+0x338>)
 800d9f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d9fc:	2b28      	cmp	r3, #40	; 0x28
 800d9fe:	d86d      	bhi.n	800dadc <UART_SetConfig+0x188>
 800da00:	a201      	add	r2, pc, #4	; (adr r2, 800da08 <UART_SetConfig+0xb4>)
 800da02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da06:	bf00      	nop
 800da08:	0800daad 	.word	0x0800daad
 800da0c:	0800dadd 	.word	0x0800dadd
 800da10:	0800dadd 	.word	0x0800dadd
 800da14:	0800dadd 	.word	0x0800dadd
 800da18:	0800dadd 	.word	0x0800dadd
 800da1c:	0800dadd 	.word	0x0800dadd
 800da20:	0800dadd 	.word	0x0800dadd
 800da24:	0800dadd 	.word	0x0800dadd
 800da28:	0800dab5 	.word	0x0800dab5
 800da2c:	0800dadd 	.word	0x0800dadd
 800da30:	0800dadd 	.word	0x0800dadd
 800da34:	0800dadd 	.word	0x0800dadd
 800da38:	0800dadd 	.word	0x0800dadd
 800da3c:	0800dadd 	.word	0x0800dadd
 800da40:	0800dadd 	.word	0x0800dadd
 800da44:	0800dadd 	.word	0x0800dadd
 800da48:	0800dabd 	.word	0x0800dabd
 800da4c:	0800dadd 	.word	0x0800dadd
 800da50:	0800dadd 	.word	0x0800dadd
 800da54:	0800dadd 	.word	0x0800dadd
 800da58:	0800dadd 	.word	0x0800dadd
 800da5c:	0800dadd 	.word	0x0800dadd
 800da60:	0800dadd 	.word	0x0800dadd
 800da64:	0800dadd 	.word	0x0800dadd
 800da68:	0800dac5 	.word	0x0800dac5
 800da6c:	0800dadd 	.word	0x0800dadd
 800da70:	0800dadd 	.word	0x0800dadd
 800da74:	0800dadd 	.word	0x0800dadd
 800da78:	0800dadd 	.word	0x0800dadd
 800da7c:	0800dadd 	.word	0x0800dadd
 800da80:	0800dadd 	.word	0x0800dadd
 800da84:	0800dadd 	.word	0x0800dadd
 800da88:	0800dacd 	.word	0x0800dacd
 800da8c:	0800dadd 	.word	0x0800dadd
 800da90:	0800dadd 	.word	0x0800dadd
 800da94:	0800dadd 	.word	0x0800dadd
 800da98:	0800dadd 	.word	0x0800dadd
 800da9c:	0800dadd 	.word	0x0800dadd
 800daa0:	0800dadd 	.word	0x0800dadd
 800daa4:	0800dadd 	.word	0x0800dadd
 800daa8:	0800dad5 	.word	0x0800dad5
 800daac:	2301      	movs	r3, #1
 800daae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dab2:	e326      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dab4:	2304      	movs	r3, #4
 800dab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daba:	e322      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dabc:	2308      	movs	r3, #8
 800dabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dac2:	e31e      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dac4:	2310      	movs	r3, #16
 800dac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daca:	e31a      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dacc:	2320      	movs	r3, #32
 800dace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dad2:	e316      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dad4:	2340      	movs	r3, #64	; 0x40
 800dad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dada:	e312      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dadc:	2380      	movs	r3, #128	; 0x80
 800dade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dae2:	e30e      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4a69      	ldr	r2, [pc, #420]	; (800dc90 <UART_SetConfig+0x33c>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d130      	bne.n	800db50 <UART_SetConfig+0x1fc>
 800daee:	4b67      	ldr	r3, [pc, #412]	; (800dc8c <UART_SetConfig+0x338>)
 800daf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daf2:	f003 0307 	and.w	r3, r3, #7
 800daf6:	2b05      	cmp	r3, #5
 800daf8:	d826      	bhi.n	800db48 <UART_SetConfig+0x1f4>
 800dafa:	a201      	add	r2, pc, #4	; (adr r2, 800db00 <UART_SetConfig+0x1ac>)
 800dafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db00:	0800db19 	.word	0x0800db19
 800db04:	0800db21 	.word	0x0800db21
 800db08:	0800db29 	.word	0x0800db29
 800db0c:	0800db31 	.word	0x0800db31
 800db10:	0800db39 	.word	0x0800db39
 800db14:	0800db41 	.word	0x0800db41
 800db18:	2300      	movs	r3, #0
 800db1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db1e:	e2f0      	b.n	800e102 <UART_SetConfig+0x7ae>
 800db20:	2304      	movs	r3, #4
 800db22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db26:	e2ec      	b.n	800e102 <UART_SetConfig+0x7ae>
 800db28:	2308      	movs	r3, #8
 800db2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db2e:	e2e8      	b.n	800e102 <UART_SetConfig+0x7ae>
 800db30:	2310      	movs	r3, #16
 800db32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db36:	e2e4      	b.n	800e102 <UART_SetConfig+0x7ae>
 800db38:	2320      	movs	r3, #32
 800db3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db3e:	e2e0      	b.n	800e102 <UART_SetConfig+0x7ae>
 800db40:	2340      	movs	r3, #64	; 0x40
 800db42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db46:	e2dc      	b.n	800e102 <UART_SetConfig+0x7ae>
 800db48:	2380      	movs	r3, #128	; 0x80
 800db4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db4e:	e2d8      	b.n	800e102 <UART_SetConfig+0x7ae>
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4a4f      	ldr	r2, [pc, #316]	; (800dc94 <UART_SetConfig+0x340>)
 800db56:	4293      	cmp	r3, r2
 800db58:	d130      	bne.n	800dbbc <UART_SetConfig+0x268>
 800db5a:	4b4c      	ldr	r3, [pc, #304]	; (800dc8c <UART_SetConfig+0x338>)
 800db5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db5e:	f003 0307 	and.w	r3, r3, #7
 800db62:	2b05      	cmp	r3, #5
 800db64:	d826      	bhi.n	800dbb4 <UART_SetConfig+0x260>
 800db66:	a201      	add	r2, pc, #4	; (adr r2, 800db6c <UART_SetConfig+0x218>)
 800db68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db6c:	0800db85 	.word	0x0800db85
 800db70:	0800db8d 	.word	0x0800db8d
 800db74:	0800db95 	.word	0x0800db95
 800db78:	0800db9d 	.word	0x0800db9d
 800db7c:	0800dba5 	.word	0x0800dba5
 800db80:	0800dbad 	.word	0x0800dbad
 800db84:	2300      	movs	r3, #0
 800db86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db8a:	e2ba      	b.n	800e102 <UART_SetConfig+0x7ae>
 800db8c:	2304      	movs	r3, #4
 800db8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db92:	e2b6      	b.n	800e102 <UART_SetConfig+0x7ae>
 800db94:	2308      	movs	r3, #8
 800db96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db9a:	e2b2      	b.n	800e102 <UART_SetConfig+0x7ae>
 800db9c:	2310      	movs	r3, #16
 800db9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dba2:	e2ae      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dba4:	2320      	movs	r3, #32
 800dba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbaa:	e2aa      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dbac:	2340      	movs	r3, #64	; 0x40
 800dbae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbb2:	e2a6      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dbb4:	2380      	movs	r3, #128	; 0x80
 800dbb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbba:	e2a2      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a35      	ldr	r2, [pc, #212]	; (800dc98 <UART_SetConfig+0x344>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d130      	bne.n	800dc28 <UART_SetConfig+0x2d4>
 800dbc6:	4b31      	ldr	r3, [pc, #196]	; (800dc8c <UART_SetConfig+0x338>)
 800dbc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbca:	f003 0307 	and.w	r3, r3, #7
 800dbce:	2b05      	cmp	r3, #5
 800dbd0:	d826      	bhi.n	800dc20 <UART_SetConfig+0x2cc>
 800dbd2:	a201      	add	r2, pc, #4	; (adr r2, 800dbd8 <UART_SetConfig+0x284>)
 800dbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd8:	0800dbf1 	.word	0x0800dbf1
 800dbdc:	0800dbf9 	.word	0x0800dbf9
 800dbe0:	0800dc01 	.word	0x0800dc01
 800dbe4:	0800dc09 	.word	0x0800dc09
 800dbe8:	0800dc11 	.word	0x0800dc11
 800dbec:	0800dc19 	.word	0x0800dc19
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf6:	e284      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dbf8:	2304      	movs	r3, #4
 800dbfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbfe:	e280      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dc00:	2308      	movs	r3, #8
 800dc02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc06:	e27c      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dc08:	2310      	movs	r3, #16
 800dc0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc0e:	e278      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dc10:	2320      	movs	r3, #32
 800dc12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc16:	e274      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dc18:	2340      	movs	r3, #64	; 0x40
 800dc1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc1e:	e270      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dc20:	2380      	movs	r3, #128	; 0x80
 800dc22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc26:	e26c      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4a1b      	ldr	r2, [pc, #108]	; (800dc9c <UART_SetConfig+0x348>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d142      	bne.n	800dcb8 <UART_SetConfig+0x364>
 800dc32:	4b16      	ldr	r3, [pc, #88]	; (800dc8c <UART_SetConfig+0x338>)
 800dc34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc36:	f003 0307 	and.w	r3, r3, #7
 800dc3a:	2b05      	cmp	r3, #5
 800dc3c:	d838      	bhi.n	800dcb0 <UART_SetConfig+0x35c>
 800dc3e:	a201      	add	r2, pc, #4	; (adr r2, 800dc44 <UART_SetConfig+0x2f0>)
 800dc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc44:	0800dc5d 	.word	0x0800dc5d
 800dc48:	0800dc65 	.word	0x0800dc65
 800dc4c:	0800dc6d 	.word	0x0800dc6d
 800dc50:	0800dc75 	.word	0x0800dc75
 800dc54:	0800dca1 	.word	0x0800dca1
 800dc58:	0800dca9 	.word	0x0800dca9
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc62:	e24e      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dc64:	2304      	movs	r3, #4
 800dc66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc6a:	e24a      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dc6c:	2308      	movs	r3, #8
 800dc6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc72:	e246      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dc74:	2310      	movs	r3, #16
 800dc76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc7a:	e242      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dc7c:	cfff69f3 	.word	0xcfff69f3
 800dc80:	58000c00 	.word	0x58000c00
 800dc84:	11fff4ff 	.word	0x11fff4ff
 800dc88:	40011000 	.word	0x40011000
 800dc8c:	58024400 	.word	0x58024400
 800dc90:	40004400 	.word	0x40004400
 800dc94:	40004800 	.word	0x40004800
 800dc98:	40004c00 	.word	0x40004c00
 800dc9c:	40005000 	.word	0x40005000
 800dca0:	2320      	movs	r3, #32
 800dca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dca6:	e22c      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dca8:	2340      	movs	r3, #64	; 0x40
 800dcaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcae:	e228      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dcb0:	2380      	movs	r3, #128	; 0x80
 800dcb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcb6:	e224      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4ab1      	ldr	r2, [pc, #708]	; (800df84 <UART_SetConfig+0x630>)
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d176      	bne.n	800ddb0 <UART_SetConfig+0x45c>
 800dcc2:	4bb1      	ldr	r3, [pc, #708]	; (800df88 <UART_SetConfig+0x634>)
 800dcc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dcca:	2b28      	cmp	r3, #40	; 0x28
 800dccc:	d86c      	bhi.n	800dda8 <UART_SetConfig+0x454>
 800dcce:	a201      	add	r2, pc, #4	; (adr r2, 800dcd4 <UART_SetConfig+0x380>)
 800dcd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd4:	0800dd79 	.word	0x0800dd79
 800dcd8:	0800dda9 	.word	0x0800dda9
 800dcdc:	0800dda9 	.word	0x0800dda9
 800dce0:	0800dda9 	.word	0x0800dda9
 800dce4:	0800dda9 	.word	0x0800dda9
 800dce8:	0800dda9 	.word	0x0800dda9
 800dcec:	0800dda9 	.word	0x0800dda9
 800dcf0:	0800dda9 	.word	0x0800dda9
 800dcf4:	0800dd81 	.word	0x0800dd81
 800dcf8:	0800dda9 	.word	0x0800dda9
 800dcfc:	0800dda9 	.word	0x0800dda9
 800dd00:	0800dda9 	.word	0x0800dda9
 800dd04:	0800dda9 	.word	0x0800dda9
 800dd08:	0800dda9 	.word	0x0800dda9
 800dd0c:	0800dda9 	.word	0x0800dda9
 800dd10:	0800dda9 	.word	0x0800dda9
 800dd14:	0800dd89 	.word	0x0800dd89
 800dd18:	0800dda9 	.word	0x0800dda9
 800dd1c:	0800dda9 	.word	0x0800dda9
 800dd20:	0800dda9 	.word	0x0800dda9
 800dd24:	0800dda9 	.word	0x0800dda9
 800dd28:	0800dda9 	.word	0x0800dda9
 800dd2c:	0800dda9 	.word	0x0800dda9
 800dd30:	0800dda9 	.word	0x0800dda9
 800dd34:	0800dd91 	.word	0x0800dd91
 800dd38:	0800dda9 	.word	0x0800dda9
 800dd3c:	0800dda9 	.word	0x0800dda9
 800dd40:	0800dda9 	.word	0x0800dda9
 800dd44:	0800dda9 	.word	0x0800dda9
 800dd48:	0800dda9 	.word	0x0800dda9
 800dd4c:	0800dda9 	.word	0x0800dda9
 800dd50:	0800dda9 	.word	0x0800dda9
 800dd54:	0800dd99 	.word	0x0800dd99
 800dd58:	0800dda9 	.word	0x0800dda9
 800dd5c:	0800dda9 	.word	0x0800dda9
 800dd60:	0800dda9 	.word	0x0800dda9
 800dd64:	0800dda9 	.word	0x0800dda9
 800dd68:	0800dda9 	.word	0x0800dda9
 800dd6c:	0800dda9 	.word	0x0800dda9
 800dd70:	0800dda9 	.word	0x0800dda9
 800dd74:	0800dda1 	.word	0x0800dda1
 800dd78:	2301      	movs	r3, #1
 800dd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd7e:	e1c0      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dd80:	2304      	movs	r3, #4
 800dd82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd86:	e1bc      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dd88:	2308      	movs	r3, #8
 800dd8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd8e:	e1b8      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dd90:	2310      	movs	r3, #16
 800dd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd96:	e1b4      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dd98:	2320      	movs	r3, #32
 800dd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd9e:	e1b0      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dda0:	2340      	movs	r3, #64	; 0x40
 800dda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dda6:	e1ac      	b.n	800e102 <UART_SetConfig+0x7ae>
 800dda8:	2380      	movs	r3, #128	; 0x80
 800ddaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddae:	e1a8      	b.n	800e102 <UART_SetConfig+0x7ae>
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4a75      	ldr	r2, [pc, #468]	; (800df8c <UART_SetConfig+0x638>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d130      	bne.n	800de1c <UART_SetConfig+0x4c8>
 800ddba:	4b73      	ldr	r3, [pc, #460]	; (800df88 <UART_SetConfig+0x634>)
 800ddbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddbe:	f003 0307 	and.w	r3, r3, #7
 800ddc2:	2b05      	cmp	r3, #5
 800ddc4:	d826      	bhi.n	800de14 <UART_SetConfig+0x4c0>
 800ddc6:	a201      	add	r2, pc, #4	; (adr r2, 800ddcc <UART_SetConfig+0x478>)
 800ddc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddcc:	0800dde5 	.word	0x0800dde5
 800ddd0:	0800dded 	.word	0x0800dded
 800ddd4:	0800ddf5 	.word	0x0800ddf5
 800ddd8:	0800ddfd 	.word	0x0800ddfd
 800dddc:	0800de05 	.word	0x0800de05
 800dde0:	0800de0d 	.word	0x0800de0d
 800dde4:	2300      	movs	r3, #0
 800dde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddea:	e18a      	b.n	800e102 <UART_SetConfig+0x7ae>
 800ddec:	2304      	movs	r3, #4
 800ddee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddf2:	e186      	b.n	800e102 <UART_SetConfig+0x7ae>
 800ddf4:	2308      	movs	r3, #8
 800ddf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddfa:	e182      	b.n	800e102 <UART_SetConfig+0x7ae>
 800ddfc:	2310      	movs	r3, #16
 800ddfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de02:	e17e      	b.n	800e102 <UART_SetConfig+0x7ae>
 800de04:	2320      	movs	r3, #32
 800de06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de0a:	e17a      	b.n	800e102 <UART_SetConfig+0x7ae>
 800de0c:	2340      	movs	r3, #64	; 0x40
 800de0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de12:	e176      	b.n	800e102 <UART_SetConfig+0x7ae>
 800de14:	2380      	movs	r3, #128	; 0x80
 800de16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de1a:	e172      	b.n	800e102 <UART_SetConfig+0x7ae>
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4a5b      	ldr	r2, [pc, #364]	; (800df90 <UART_SetConfig+0x63c>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d130      	bne.n	800de88 <UART_SetConfig+0x534>
 800de26:	4b58      	ldr	r3, [pc, #352]	; (800df88 <UART_SetConfig+0x634>)
 800de28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de2a:	f003 0307 	and.w	r3, r3, #7
 800de2e:	2b05      	cmp	r3, #5
 800de30:	d826      	bhi.n	800de80 <UART_SetConfig+0x52c>
 800de32:	a201      	add	r2, pc, #4	; (adr r2, 800de38 <UART_SetConfig+0x4e4>)
 800de34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de38:	0800de51 	.word	0x0800de51
 800de3c:	0800de59 	.word	0x0800de59
 800de40:	0800de61 	.word	0x0800de61
 800de44:	0800de69 	.word	0x0800de69
 800de48:	0800de71 	.word	0x0800de71
 800de4c:	0800de79 	.word	0x0800de79
 800de50:	2300      	movs	r3, #0
 800de52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de56:	e154      	b.n	800e102 <UART_SetConfig+0x7ae>
 800de58:	2304      	movs	r3, #4
 800de5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de5e:	e150      	b.n	800e102 <UART_SetConfig+0x7ae>
 800de60:	2308      	movs	r3, #8
 800de62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de66:	e14c      	b.n	800e102 <UART_SetConfig+0x7ae>
 800de68:	2310      	movs	r3, #16
 800de6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de6e:	e148      	b.n	800e102 <UART_SetConfig+0x7ae>
 800de70:	2320      	movs	r3, #32
 800de72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de76:	e144      	b.n	800e102 <UART_SetConfig+0x7ae>
 800de78:	2340      	movs	r3, #64	; 0x40
 800de7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de7e:	e140      	b.n	800e102 <UART_SetConfig+0x7ae>
 800de80:	2380      	movs	r3, #128	; 0x80
 800de82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de86:	e13c      	b.n	800e102 <UART_SetConfig+0x7ae>
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4a41      	ldr	r2, [pc, #260]	; (800df94 <UART_SetConfig+0x640>)
 800de8e:	4293      	cmp	r3, r2
 800de90:	f040 8082 	bne.w	800df98 <UART_SetConfig+0x644>
 800de94:	4b3c      	ldr	r3, [pc, #240]	; (800df88 <UART_SetConfig+0x634>)
 800de96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de9c:	2b28      	cmp	r3, #40	; 0x28
 800de9e:	d86d      	bhi.n	800df7c <UART_SetConfig+0x628>
 800dea0:	a201      	add	r2, pc, #4	; (adr r2, 800dea8 <UART_SetConfig+0x554>)
 800dea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dea6:	bf00      	nop
 800dea8:	0800df4d 	.word	0x0800df4d
 800deac:	0800df7d 	.word	0x0800df7d
 800deb0:	0800df7d 	.word	0x0800df7d
 800deb4:	0800df7d 	.word	0x0800df7d
 800deb8:	0800df7d 	.word	0x0800df7d
 800debc:	0800df7d 	.word	0x0800df7d
 800dec0:	0800df7d 	.word	0x0800df7d
 800dec4:	0800df7d 	.word	0x0800df7d
 800dec8:	0800df55 	.word	0x0800df55
 800decc:	0800df7d 	.word	0x0800df7d
 800ded0:	0800df7d 	.word	0x0800df7d
 800ded4:	0800df7d 	.word	0x0800df7d
 800ded8:	0800df7d 	.word	0x0800df7d
 800dedc:	0800df7d 	.word	0x0800df7d
 800dee0:	0800df7d 	.word	0x0800df7d
 800dee4:	0800df7d 	.word	0x0800df7d
 800dee8:	0800df5d 	.word	0x0800df5d
 800deec:	0800df7d 	.word	0x0800df7d
 800def0:	0800df7d 	.word	0x0800df7d
 800def4:	0800df7d 	.word	0x0800df7d
 800def8:	0800df7d 	.word	0x0800df7d
 800defc:	0800df7d 	.word	0x0800df7d
 800df00:	0800df7d 	.word	0x0800df7d
 800df04:	0800df7d 	.word	0x0800df7d
 800df08:	0800df65 	.word	0x0800df65
 800df0c:	0800df7d 	.word	0x0800df7d
 800df10:	0800df7d 	.word	0x0800df7d
 800df14:	0800df7d 	.word	0x0800df7d
 800df18:	0800df7d 	.word	0x0800df7d
 800df1c:	0800df7d 	.word	0x0800df7d
 800df20:	0800df7d 	.word	0x0800df7d
 800df24:	0800df7d 	.word	0x0800df7d
 800df28:	0800df6d 	.word	0x0800df6d
 800df2c:	0800df7d 	.word	0x0800df7d
 800df30:	0800df7d 	.word	0x0800df7d
 800df34:	0800df7d 	.word	0x0800df7d
 800df38:	0800df7d 	.word	0x0800df7d
 800df3c:	0800df7d 	.word	0x0800df7d
 800df40:	0800df7d 	.word	0x0800df7d
 800df44:	0800df7d 	.word	0x0800df7d
 800df48:	0800df75 	.word	0x0800df75
 800df4c:	2301      	movs	r3, #1
 800df4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df52:	e0d6      	b.n	800e102 <UART_SetConfig+0x7ae>
 800df54:	2304      	movs	r3, #4
 800df56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df5a:	e0d2      	b.n	800e102 <UART_SetConfig+0x7ae>
 800df5c:	2308      	movs	r3, #8
 800df5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df62:	e0ce      	b.n	800e102 <UART_SetConfig+0x7ae>
 800df64:	2310      	movs	r3, #16
 800df66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df6a:	e0ca      	b.n	800e102 <UART_SetConfig+0x7ae>
 800df6c:	2320      	movs	r3, #32
 800df6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df72:	e0c6      	b.n	800e102 <UART_SetConfig+0x7ae>
 800df74:	2340      	movs	r3, #64	; 0x40
 800df76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df7a:	e0c2      	b.n	800e102 <UART_SetConfig+0x7ae>
 800df7c:	2380      	movs	r3, #128	; 0x80
 800df7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df82:	e0be      	b.n	800e102 <UART_SetConfig+0x7ae>
 800df84:	40011400 	.word	0x40011400
 800df88:	58024400 	.word	0x58024400
 800df8c:	40007800 	.word	0x40007800
 800df90:	40007c00 	.word	0x40007c00
 800df94:	40011800 	.word	0x40011800
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4aad      	ldr	r2, [pc, #692]	; (800e254 <UART_SetConfig+0x900>)
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d176      	bne.n	800e090 <UART_SetConfig+0x73c>
 800dfa2:	4bad      	ldr	r3, [pc, #692]	; (800e258 <UART_SetConfig+0x904>)
 800dfa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dfaa:	2b28      	cmp	r3, #40	; 0x28
 800dfac:	d86c      	bhi.n	800e088 <UART_SetConfig+0x734>
 800dfae:	a201      	add	r2, pc, #4	; (adr r2, 800dfb4 <UART_SetConfig+0x660>)
 800dfb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb4:	0800e059 	.word	0x0800e059
 800dfb8:	0800e089 	.word	0x0800e089
 800dfbc:	0800e089 	.word	0x0800e089
 800dfc0:	0800e089 	.word	0x0800e089
 800dfc4:	0800e089 	.word	0x0800e089
 800dfc8:	0800e089 	.word	0x0800e089
 800dfcc:	0800e089 	.word	0x0800e089
 800dfd0:	0800e089 	.word	0x0800e089
 800dfd4:	0800e061 	.word	0x0800e061
 800dfd8:	0800e089 	.word	0x0800e089
 800dfdc:	0800e089 	.word	0x0800e089
 800dfe0:	0800e089 	.word	0x0800e089
 800dfe4:	0800e089 	.word	0x0800e089
 800dfe8:	0800e089 	.word	0x0800e089
 800dfec:	0800e089 	.word	0x0800e089
 800dff0:	0800e089 	.word	0x0800e089
 800dff4:	0800e069 	.word	0x0800e069
 800dff8:	0800e089 	.word	0x0800e089
 800dffc:	0800e089 	.word	0x0800e089
 800e000:	0800e089 	.word	0x0800e089
 800e004:	0800e089 	.word	0x0800e089
 800e008:	0800e089 	.word	0x0800e089
 800e00c:	0800e089 	.word	0x0800e089
 800e010:	0800e089 	.word	0x0800e089
 800e014:	0800e071 	.word	0x0800e071
 800e018:	0800e089 	.word	0x0800e089
 800e01c:	0800e089 	.word	0x0800e089
 800e020:	0800e089 	.word	0x0800e089
 800e024:	0800e089 	.word	0x0800e089
 800e028:	0800e089 	.word	0x0800e089
 800e02c:	0800e089 	.word	0x0800e089
 800e030:	0800e089 	.word	0x0800e089
 800e034:	0800e079 	.word	0x0800e079
 800e038:	0800e089 	.word	0x0800e089
 800e03c:	0800e089 	.word	0x0800e089
 800e040:	0800e089 	.word	0x0800e089
 800e044:	0800e089 	.word	0x0800e089
 800e048:	0800e089 	.word	0x0800e089
 800e04c:	0800e089 	.word	0x0800e089
 800e050:	0800e089 	.word	0x0800e089
 800e054:	0800e081 	.word	0x0800e081
 800e058:	2301      	movs	r3, #1
 800e05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e05e:	e050      	b.n	800e102 <UART_SetConfig+0x7ae>
 800e060:	2304      	movs	r3, #4
 800e062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e066:	e04c      	b.n	800e102 <UART_SetConfig+0x7ae>
 800e068:	2308      	movs	r3, #8
 800e06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e06e:	e048      	b.n	800e102 <UART_SetConfig+0x7ae>
 800e070:	2310      	movs	r3, #16
 800e072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e076:	e044      	b.n	800e102 <UART_SetConfig+0x7ae>
 800e078:	2320      	movs	r3, #32
 800e07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e07e:	e040      	b.n	800e102 <UART_SetConfig+0x7ae>
 800e080:	2340      	movs	r3, #64	; 0x40
 800e082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e086:	e03c      	b.n	800e102 <UART_SetConfig+0x7ae>
 800e088:	2380      	movs	r3, #128	; 0x80
 800e08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e08e:	e038      	b.n	800e102 <UART_SetConfig+0x7ae>
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4a71      	ldr	r2, [pc, #452]	; (800e25c <UART_SetConfig+0x908>)
 800e096:	4293      	cmp	r3, r2
 800e098:	d130      	bne.n	800e0fc <UART_SetConfig+0x7a8>
 800e09a:	4b6f      	ldr	r3, [pc, #444]	; (800e258 <UART_SetConfig+0x904>)
 800e09c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e09e:	f003 0307 	and.w	r3, r3, #7
 800e0a2:	2b05      	cmp	r3, #5
 800e0a4:	d826      	bhi.n	800e0f4 <UART_SetConfig+0x7a0>
 800e0a6:	a201      	add	r2, pc, #4	; (adr r2, 800e0ac <UART_SetConfig+0x758>)
 800e0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ac:	0800e0c5 	.word	0x0800e0c5
 800e0b0:	0800e0cd 	.word	0x0800e0cd
 800e0b4:	0800e0d5 	.word	0x0800e0d5
 800e0b8:	0800e0dd 	.word	0x0800e0dd
 800e0bc:	0800e0e5 	.word	0x0800e0e5
 800e0c0:	0800e0ed 	.word	0x0800e0ed
 800e0c4:	2302      	movs	r3, #2
 800e0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ca:	e01a      	b.n	800e102 <UART_SetConfig+0x7ae>
 800e0cc:	2304      	movs	r3, #4
 800e0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0d2:	e016      	b.n	800e102 <UART_SetConfig+0x7ae>
 800e0d4:	2308      	movs	r3, #8
 800e0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0da:	e012      	b.n	800e102 <UART_SetConfig+0x7ae>
 800e0dc:	2310      	movs	r3, #16
 800e0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0e2:	e00e      	b.n	800e102 <UART_SetConfig+0x7ae>
 800e0e4:	2320      	movs	r3, #32
 800e0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ea:	e00a      	b.n	800e102 <UART_SetConfig+0x7ae>
 800e0ec:	2340      	movs	r3, #64	; 0x40
 800e0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0f2:	e006      	b.n	800e102 <UART_SetConfig+0x7ae>
 800e0f4:	2380      	movs	r3, #128	; 0x80
 800e0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0fa:	e002      	b.n	800e102 <UART_SetConfig+0x7ae>
 800e0fc:	2380      	movs	r3, #128	; 0x80
 800e0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	4a55      	ldr	r2, [pc, #340]	; (800e25c <UART_SetConfig+0x908>)
 800e108:	4293      	cmp	r3, r2
 800e10a:	f040 80f8 	bne.w	800e2fe <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e10e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e112:	2b20      	cmp	r3, #32
 800e114:	dc46      	bgt.n	800e1a4 <UART_SetConfig+0x850>
 800e116:	2b02      	cmp	r3, #2
 800e118:	db75      	blt.n	800e206 <UART_SetConfig+0x8b2>
 800e11a:	3b02      	subs	r3, #2
 800e11c:	2b1e      	cmp	r3, #30
 800e11e:	d872      	bhi.n	800e206 <UART_SetConfig+0x8b2>
 800e120:	a201      	add	r2, pc, #4	; (adr r2, 800e128 <UART_SetConfig+0x7d4>)
 800e122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e126:	bf00      	nop
 800e128:	0800e1ab 	.word	0x0800e1ab
 800e12c:	0800e207 	.word	0x0800e207
 800e130:	0800e1b3 	.word	0x0800e1b3
 800e134:	0800e207 	.word	0x0800e207
 800e138:	0800e207 	.word	0x0800e207
 800e13c:	0800e207 	.word	0x0800e207
 800e140:	0800e1c3 	.word	0x0800e1c3
 800e144:	0800e207 	.word	0x0800e207
 800e148:	0800e207 	.word	0x0800e207
 800e14c:	0800e207 	.word	0x0800e207
 800e150:	0800e207 	.word	0x0800e207
 800e154:	0800e207 	.word	0x0800e207
 800e158:	0800e207 	.word	0x0800e207
 800e15c:	0800e207 	.word	0x0800e207
 800e160:	0800e1d3 	.word	0x0800e1d3
 800e164:	0800e207 	.word	0x0800e207
 800e168:	0800e207 	.word	0x0800e207
 800e16c:	0800e207 	.word	0x0800e207
 800e170:	0800e207 	.word	0x0800e207
 800e174:	0800e207 	.word	0x0800e207
 800e178:	0800e207 	.word	0x0800e207
 800e17c:	0800e207 	.word	0x0800e207
 800e180:	0800e207 	.word	0x0800e207
 800e184:	0800e207 	.word	0x0800e207
 800e188:	0800e207 	.word	0x0800e207
 800e18c:	0800e207 	.word	0x0800e207
 800e190:	0800e207 	.word	0x0800e207
 800e194:	0800e207 	.word	0x0800e207
 800e198:	0800e207 	.word	0x0800e207
 800e19c:	0800e207 	.word	0x0800e207
 800e1a0:	0800e1f9 	.word	0x0800e1f9
 800e1a4:	2b40      	cmp	r3, #64	; 0x40
 800e1a6:	d02a      	beq.n	800e1fe <UART_SetConfig+0x8aa>
 800e1a8:	e02d      	b.n	800e206 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e1aa:	f7fc fdfd 	bl	800ada8 <HAL_RCCEx_GetD3PCLK1Freq>
 800e1ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1b0:	e02f      	b.n	800e212 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7fc fe0c 	bl	800add4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1c0:	e027      	b.n	800e212 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1c2:	f107 0318 	add.w	r3, r7, #24
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fc ff58 	bl	800b07c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1cc:	69fb      	ldr	r3, [r7, #28]
 800e1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1d0:	e01f      	b.n	800e212 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1d2:	4b21      	ldr	r3, [pc, #132]	; (800e258 <UART_SetConfig+0x904>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f003 0320 	and.w	r3, r3, #32
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d009      	beq.n	800e1f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1de:	4b1e      	ldr	r3, [pc, #120]	; (800e258 <UART_SetConfig+0x904>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	08db      	lsrs	r3, r3, #3
 800e1e4:	f003 0303 	and.w	r3, r3, #3
 800e1e8:	4a1d      	ldr	r2, [pc, #116]	; (800e260 <UART_SetConfig+0x90c>)
 800e1ea:	fa22 f303 	lsr.w	r3, r2, r3
 800e1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e1f0:	e00f      	b.n	800e212 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e1f2:	4b1b      	ldr	r3, [pc, #108]	; (800e260 <UART_SetConfig+0x90c>)
 800e1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1f6:	e00c      	b.n	800e212 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e1f8:	4b1a      	ldr	r3, [pc, #104]	; (800e264 <UART_SetConfig+0x910>)
 800e1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1fc:	e009      	b.n	800e212 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e1fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e204:	e005      	b.n	800e212 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e206:	2300      	movs	r3, #0
 800e208:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e20a:	2301      	movs	r3, #1
 800e20c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e210:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e214:	2b00      	cmp	r3, #0
 800e216:	f000 81ee 	beq.w	800e5f6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e21e:	4a12      	ldr	r2, [pc, #72]	; (800e268 <UART_SetConfig+0x914>)
 800e220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e224:	461a      	mov	r2, r3
 800e226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e228:	fbb3 f3f2 	udiv	r3, r3, r2
 800e22c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	685a      	ldr	r2, [r3, #4]
 800e232:	4613      	mov	r3, r2
 800e234:	005b      	lsls	r3, r3, #1
 800e236:	4413      	add	r3, r2
 800e238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d305      	bcc.n	800e24a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e246:	429a      	cmp	r2, r3
 800e248:	d910      	bls.n	800e26c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e24a:	2301      	movs	r3, #1
 800e24c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e250:	e1d1      	b.n	800e5f6 <UART_SetConfig+0xca2>
 800e252:	bf00      	nop
 800e254:	40011c00 	.word	0x40011c00
 800e258:	58024400 	.word	0x58024400
 800e25c:	58000c00 	.word	0x58000c00
 800e260:	03d09000 	.word	0x03d09000
 800e264:	003d0900 	.word	0x003d0900
 800e268:	0800f830 	.word	0x0800f830
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e26e:	2200      	movs	r2, #0
 800e270:	60bb      	str	r3, [r7, #8]
 800e272:	60fa      	str	r2, [r7, #12]
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e278:	4ac0      	ldr	r2, [pc, #768]	; (800e57c <UART_SetConfig+0xc28>)
 800e27a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e27e:	b29b      	uxth	r3, r3
 800e280:	2200      	movs	r2, #0
 800e282:	603b      	str	r3, [r7, #0]
 800e284:	607a      	str	r2, [r7, #4]
 800e286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e28a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e28e:	f7f2 f847 	bl	8000320 <__aeabi_uldivmod>
 800e292:	4602      	mov	r2, r0
 800e294:	460b      	mov	r3, r1
 800e296:	4610      	mov	r0, r2
 800e298:	4619      	mov	r1, r3
 800e29a:	f04f 0200 	mov.w	r2, #0
 800e29e:	f04f 0300 	mov.w	r3, #0
 800e2a2:	020b      	lsls	r3, r1, #8
 800e2a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e2a8:	0202      	lsls	r2, r0, #8
 800e2aa:	6979      	ldr	r1, [r7, #20]
 800e2ac:	6849      	ldr	r1, [r1, #4]
 800e2ae:	0849      	lsrs	r1, r1, #1
 800e2b0:	2000      	movs	r0, #0
 800e2b2:	460c      	mov	r4, r1
 800e2b4:	4605      	mov	r5, r0
 800e2b6:	eb12 0804 	adds.w	r8, r2, r4
 800e2ba:	eb43 0905 	adc.w	r9, r3, r5
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	469a      	mov	sl, r3
 800e2c6:	4693      	mov	fp, r2
 800e2c8:	4652      	mov	r2, sl
 800e2ca:	465b      	mov	r3, fp
 800e2cc:	4640      	mov	r0, r8
 800e2ce:	4649      	mov	r1, r9
 800e2d0:	f7f2 f826 	bl	8000320 <__aeabi_uldivmod>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	4613      	mov	r3, r2
 800e2da:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e2e2:	d308      	bcc.n	800e2f6 <UART_SetConfig+0x9a2>
 800e2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2ea:	d204      	bcs.n	800e2f6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2f2:	60da      	str	r2, [r3, #12]
 800e2f4:	e17f      	b.n	800e5f6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e2fc:	e17b      	b.n	800e5f6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	69db      	ldr	r3, [r3, #28]
 800e302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e306:	f040 80bd 	bne.w	800e484 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e30a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e30e:	2b20      	cmp	r3, #32
 800e310:	dc48      	bgt.n	800e3a4 <UART_SetConfig+0xa50>
 800e312:	2b00      	cmp	r3, #0
 800e314:	db7b      	blt.n	800e40e <UART_SetConfig+0xaba>
 800e316:	2b20      	cmp	r3, #32
 800e318:	d879      	bhi.n	800e40e <UART_SetConfig+0xaba>
 800e31a:	a201      	add	r2, pc, #4	; (adr r2, 800e320 <UART_SetConfig+0x9cc>)
 800e31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e320:	0800e3ab 	.word	0x0800e3ab
 800e324:	0800e3b3 	.word	0x0800e3b3
 800e328:	0800e40f 	.word	0x0800e40f
 800e32c:	0800e40f 	.word	0x0800e40f
 800e330:	0800e3bb 	.word	0x0800e3bb
 800e334:	0800e40f 	.word	0x0800e40f
 800e338:	0800e40f 	.word	0x0800e40f
 800e33c:	0800e40f 	.word	0x0800e40f
 800e340:	0800e3cb 	.word	0x0800e3cb
 800e344:	0800e40f 	.word	0x0800e40f
 800e348:	0800e40f 	.word	0x0800e40f
 800e34c:	0800e40f 	.word	0x0800e40f
 800e350:	0800e40f 	.word	0x0800e40f
 800e354:	0800e40f 	.word	0x0800e40f
 800e358:	0800e40f 	.word	0x0800e40f
 800e35c:	0800e40f 	.word	0x0800e40f
 800e360:	0800e3db 	.word	0x0800e3db
 800e364:	0800e40f 	.word	0x0800e40f
 800e368:	0800e40f 	.word	0x0800e40f
 800e36c:	0800e40f 	.word	0x0800e40f
 800e370:	0800e40f 	.word	0x0800e40f
 800e374:	0800e40f 	.word	0x0800e40f
 800e378:	0800e40f 	.word	0x0800e40f
 800e37c:	0800e40f 	.word	0x0800e40f
 800e380:	0800e40f 	.word	0x0800e40f
 800e384:	0800e40f 	.word	0x0800e40f
 800e388:	0800e40f 	.word	0x0800e40f
 800e38c:	0800e40f 	.word	0x0800e40f
 800e390:	0800e40f 	.word	0x0800e40f
 800e394:	0800e40f 	.word	0x0800e40f
 800e398:	0800e40f 	.word	0x0800e40f
 800e39c:	0800e40f 	.word	0x0800e40f
 800e3a0:	0800e401 	.word	0x0800e401
 800e3a4:	2b40      	cmp	r3, #64	; 0x40
 800e3a6:	d02e      	beq.n	800e406 <UART_SetConfig+0xab2>
 800e3a8:	e031      	b.n	800e40e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3aa:	f7fb fb31 	bl	8009a10 <HAL_RCC_GetPCLK1Freq>
 800e3ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3b0:	e033      	b.n	800e41a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e3b2:	f7fb fb43 	bl	8009a3c <HAL_RCC_GetPCLK2Freq>
 800e3b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3b8:	e02f      	b.n	800e41a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f7fc fd08 	bl	800add4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3c8:	e027      	b.n	800e41a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3ca:	f107 0318 	add.w	r3, r7, #24
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7fc fe54 	bl	800b07c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3d8:	e01f      	b.n	800e41a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3da:	4b69      	ldr	r3, [pc, #420]	; (800e580 <UART_SetConfig+0xc2c>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f003 0320 	and.w	r3, r3, #32
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d009      	beq.n	800e3fa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e3e6:	4b66      	ldr	r3, [pc, #408]	; (800e580 <UART_SetConfig+0xc2c>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	08db      	lsrs	r3, r3, #3
 800e3ec:	f003 0303 	and.w	r3, r3, #3
 800e3f0:	4a64      	ldr	r2, [pc, #400]	; (800e584 <UART_SetConfig+0xc30>)
 800e3f2:	fa22 f303 	lsr.w	r3, r2, r3
 800e3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e3f8:	e00f      	b.n	800e41a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e3fa:	4b62      	ldr	r3, [pc, #392]	; (800e584 <UART_SetConfig+0xc30>)
 800e3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3fe:	e00c      	b.n	800e41a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e400:	4b61      	ldr	r3, [pc, #388]	; (800e588 <UART_SetConfig+0xc34>)
 800e402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e404:	e009      	b.n	800e41a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e40c:	e005      	b.n	800e41a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e40e:	2300      	movs	r3, #0
 800e410:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e412:	2301      	movs	r3, #1
 800e414:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e418:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e41a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f000 80ea 	beq.w	800e5f6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e426:	4a55      	ldr	r2, [pc, #340]	; (800e57c <UART_SetConfig+0xc28>)
 800e428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e42c:	461a      	mov	r2, r3
 800e42e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e430:	fbb3 f3f2 	udiv	r3, r3, r2
 800e434:	005a      	lsls	r2, r3, #1
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	085b      	lsrs	r3, r3, #1
 800e43c:	441a      	add	r2, r3
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	fbb2 f3f3 	udiv	r3, r2, r3
 800e446:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44a:	2b0f      	cmp	r3, #15
 800e44c:	d916      	bls.n	800e47c <UART_SetConfig+0xb28>
 800e44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e454:	d212      	bcs.n	800e47c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e458:	b29b      	uxth	r3, r3
 800e45a:	f023 030f 	bic.w	r3, r3, #15
 800e45e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e462:	085b      	lsrs	r3, r3, #1
 800e464:	b29b      	uxth	r3, r3
 800e466:	f003 0307 	and.w	r3, r3, #7
 800e46a:	b29a      	uxth	r2, r3
 800e46c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e46e:	4313      	orrs	r3, r2
 800e470:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e478:	60da      	str	r2, [r3, #12]
 800e47a:	e0bc      	b.n	800e5f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e47c:	2301      	movs	r3, #1
 800e47e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e482:	e0b8      	b.n	800e5f6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e484:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e488:	2b20      	cmp	r3, #32
 800e48a:	dc4b      	bgt.n	800e524 <UART_SetConfig+0xbd0>
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	f2c0 8087 	blt.w	800e5a0 <UART_SetConfig+0xc4c>
 800e492:	2b20      	cmp	r3, #32
 800e494:	f200 8084 	bhi.w	800e5a0 <UART_SetConfig+0xc4c>
 800e498:	a201      	add	r2, pc, #4	; (adr r2, 800e4a0 <UART_SetConfig+0xb4c>)
 800e49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e49e:	bf00      	nop
 800e4a0:	0800e52b 	.word	0x0800e52b
 800e4a4:	0800e533 	.word	0x0800e533
 800e4a8:	0800e5a1 	.word	0x0800e5a1
 800e4ac:	0800e5a1 	.word	0x0800e5a1
 800e4b0:	0800e53b 	.word	0x0800e53b
 800e4b4:	0800e5a1 	.word	0x0800e5a1
 800e4b8:	0800e5a1 	.word	0x0800e5a1
 800e4bc:	0800e5a1 	.word	0x0800e5a1
 800e4c0:	0800e54b 	.word	0x0800e54b
 800e4c4:	0800e5a1 	.word	0x0800e5a1
 800e4c8:	0800e5a1 	.word	0x0800e5a1
 800e4cc:	0800e5a1 	.word	0x0800e5a1
 800e4d0:	0800e5a1 	.word	0x0800e5a1
 800e4d4:	0800e5a1 	.word	0x0800e5a1
 800e4d8:	0800e5a1 	.word	0x0800e5a1
 800e4dc:	0800e5a1 	.word	0x0800e5a1
 800e4e0:	0800e55b 	.word	0x0800e55b
 800e4e4:	0800e5a1 	.word	0x0800e5a1
 800e4e8:	0800e5a1 	.word	0x0800e5a1
 800e4ec:	0800e5a1 	.word	0x0800e5a1
 800e4f0:	0800e5a1 	.word	0x0800e5a1
 800e4f4:	0800e5a1 	.word	0x0800e5a1
 800e4f8:	0800e5a1 	.word	0x0800e5a1
 800e4fc:	0800e5a1 	.word	0x0800e5a1
 800e500:	0800e5a1 	.word	0x0800e5a1
 800e504:	0800e5a1 	.word	0x0800e5a1
 800e508:	0800e5a1 	.word	0x0800e5a1
 800e50c:	0800e5a1 	.word	0x0800e5a1
 800e510:	0800e5a1 	.word	0x0800e5a1
 800e514:	0800e5a1 	.word	0x0800e5a1
 800e518:	0800e5a1 	.word	0x0800e5a1
 800e51c:	0800e5a1 	.word	0x0800e5a1
 800e520:	0800e593 	.word	0x0800e593
 800e524:	2b40      	cmp	r3, #64	; 0x40
 800e526:	d037      	beq.n	800e598 <UART_SetConfig+0xc44>
 800e528:	e03a      	b.n	800e5a0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e52a:	f7fb fa71 	bl	8009a10 <HAL_RCC_GetPCLK1Freq>
 800e52e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e530:	e03c      	b.n	800e5ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e532:	f7fb fa83 	bl	8009a3c <HAL_RCC_GetPCLK2Freq>
 800e536:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e538:	e038      	b.n	800e5ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e53a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e53e:	4618      	mov	r0, r3
 800e540:	f7fc fc48 	bl	800add4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e548:	e030      	b.n	800e5ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e54a:	f107 0318 	add.w	r3, r7, #24
 800e54e:	4618      	mov	r0, r3
 800e550:	f7fc fd94 	bl	800b07c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e554:	69fb      	ldr	r3, [r7, #28]
 800e556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e558:	e028      	b.n	800e5ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e55a:	4b09      	ldr	r3, [pc, #36]	; (800e580 <UART_SetConfig+0xc2c>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f003 0320 	and.w	r3, r3, #32
 800e562:	2b00      	cmp	r3, #0
 800e564:	d012      	beq.n	800e58c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e566:	4b06      	ldr	r3, [pc, #24]	; (800e580 <UART_SetConfig+0xc2c>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	08db      	lsrs	r3, r3, #3
 800e56c:	f003 0303 	and.w	r3, r3, #3
 800e570:	4a04      	ldr	r2, [pc, #16]	; (800e584 <UART_SetConfig+0xc30>)
 800e572:	fa22 f303 	lsr.w	r3, r2, r3
 800e576:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e578:	e018      	b.n	800e5ac <UART_SetConfig+0xc58>
 800e57a:	bf00      	nop
 800e57c:	0800f830 	.word	0x0800f830
 800e580:	58024400 	.word	0x58024400
 800e584:	03d09000 	.word	0x03d09000
 800e588:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e58c:	4b24      	ldr	r3, [pc, #144]	; (800e620 <UART_SetConfig+0xccc>)
 800e58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e590:	e00c      	b.n	800e5ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e592:	4b24      	ldr	r3, [pc, #144]	; (800e624 <UART_SetConfig+0xcd0>)
 800e594:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e596:	e009      	b.n	800e5ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e59c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e59e:	e005      	b.n	800e5ac <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e5aa:	bf00      	nop
    }

    if (pclk != 0U)
 800e5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d021      	beq.n	800e5f6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5b6:	4a1c      	ldr	r2, [pc, #112]	; (800e628 <UART_SetConfig+0xcd4>)
 800e5b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5bc:	461a      	mov	r2, r3
 800e5be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5c0:	fbb3 f2f2 	udiv	r2, r3, r2
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	085b      	lsrs	r3, r3, #1
 800e5ca:	441a      	add	r2, r3
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5d4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d8:	2b0f      	cmp	r3, #15
 800e5da:	d909      	bls.n	800e5f0 <UART_SetConfig+0xc9c>
 800e5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5e2:	d205      	bcs.n	800e5f0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e6:	b29a      	uxth	r2, r3
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	60da      	str	r2, [r3, #12]
 800e5ee:	e002      	b.n	800e5f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	2201      	movs	r2, #1
 800e602:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	2200      	movs	r2, #0
 800e60a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	2200      	movs	r2, #0
 800e610:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e612:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e616:	4618      	mov	r0, r3
 800e618:	3748      	adds	r7, #72	; 0x48
 800e61a:	46bd      	mov	sp, r7
 800e61c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e620:	03d09000 	.word	0x03d09000
 800e624:	003d0900 	.word	0x003d0900
 800e628:	0800f830 	.word	0x0800f830

0800e62c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b083      	sub	sp, #12
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e638:	f003 0301 	and.w	r3, r3, #1
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d00a      	beq.n	800e656 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	430a      	orrs	r2, r1
 800e654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e65a:	f003 0302 	and.w	r3, r3, #2
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d00a      	beq.n	800e678 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	430a      	orrs	r2, r1
 800e676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e67c:	f003 0304 	and.w	r3, r3, #4
 800e680:	2b00      	cmp	r3, #0
 800e682:	d00a      	beq.n	800e69a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	430a      	orrs	r2, r1
 800e698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e69e:	f003 0308 	and.w	r3, r3, #8
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d00a      	beq.n	800e6bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	430a      	orrs	r2, r1
 800e6ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6c0:	f003 0310 	and.w	r3, r3, #16
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d00a      	beq.n	800e6de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	689b      	ldr	r3, [r3, #8]
 800e6ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	430a      	orrs	r2, r1
 800e6dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6e2:	f003 0320 	and.w	r3, r3, #32
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00a      	beq.n	800e700 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	689b      	ldr	r3, [r3, #8]
 800e6f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	430a      	orrs	r2, r1
 800e6fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d01a      	beq.n	800e742 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	685b      	ldr	r3, [r3, #4]
 800e712:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	430a      	orrs	r2, r1
 800e720:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e72a:	d10a      	bne.n	800e742 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	685b      	ldr	r3, [r3, #4]
 800e732:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	430a      	orrs	r2, r1
 800e740:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d00a      	beq.n	800e764 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	430a      	orrs	r2, r1
 800e762:	605a      	str	r2, [r3, #4]
  }
}
 800e764:	bf00      	nop
 800e766:	370c      	adds	r7, #12
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b098      	sub	sp, #96	; 0x60
 800e774:	af02      	add	r7, sp, #8
 800e776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2200      	movs	r2, #0
 800e77c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e780:	f7f6 fdd0 	bl	8005324 <HAL_GetTick>
 800e784:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f003 0308 	and.w	r3, r3, #8
 800e790:	2b08      	cmp	r3, #8
 800e792:	d12f      	bne.n	800e7f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e794:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e798:	9300      	str	r3, [sp, #0]
 800e79a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e79c:	2200      	movs	r2, #0
 800e79e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f000 f88e 	bl	800e8c4 <UART_WaitOnFlagUntilTimeout>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d022      	beq.n	800e7f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b6:	e853 3f00 	ldrex	r3, [r3]
 800e7ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e7bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7c2:	653b      	str	r3, [r7, #80]	; 0x50
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7cc:	647b      	str	r3, [r7, #68]	; 0x44
 800e7ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e7d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7d4:	e841 2300 	strex	r3, r2, [r1]
 800e7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e7da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d1e6      	bne.n	800e7ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2220      	movs	r2, #32
 800e7e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e7f0:	2303      	movs	r3, #3
 800e7f2:	e063      	b.n	800e8bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f003 0304 	and.w	r3, r3, #4
 800e7fe:	2b04      	cmp	r3, #4
 800e800:	d149      	bne.n	800e896 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e802:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e806:	9300      	str	r3, [sp, #0]
 800e808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e80a:	2200      	movs	r2, #0
 800e80c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 f857 	bl	800e8c4 <UART_WaitOnFlagUntilTimeout>
 800e816:	4603      	mov	r3, r0
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d03c      	beq.n	800e896 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e824:	e853 3f00 	ldrex	r3, [r3]
 800e828:	623b      	str	r3, [r7, #32]
   return(result);
 800e82a:	6a3b      	ldr	r3, [r7, #32]
 800e82c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e830:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	461a      	mov	r2, r3
 800e838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e83a:	633b      	str	r3, [r7, #48]	; 0x30
 800e83c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e83e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e842:	e841 2300 	strex	r3, r2, [r1]
 800e846:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d1e6      	bne.n	800e81c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	3308      	adds	r3, #8
 800e854:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e856:	693b      	ldr	r3, [r7, #16]
 800e858:	e853 3f00 	ldrex	r3, [r3]
 800e85c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	f023 0301 	bic.w	r3, r3, #1
 800e864:	64bb      	str	r3, [r7, #72]	; 0x48
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	3308      	adds	r3, #8
 800e86c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e86e:	61fa      	str	r2, [r7, #28]
 800e870:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e872:	69b9      	ldr	r1, [r7, #24]
 800e874:	69fa      	ldr	r2, [r7, #28]
 800e876:	e841 2300 	strex	r3, r2, [r1]
 800e87a:	617b      	str	r3, [r7, #20]
   return(result);
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d1e5      	bne.n	800e84e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2220      	movs	r2, #32
 800e886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2200      	movs	r2, #0
 800e88e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e892:	2303      	movs	r3, #3
 800e894:	e012      	b.n	800e8bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2220      	movs	r2, #32
 800e89a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2220      	movs	r2, #32
 800e8a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e8ba:	2300      	movs	r3, #0
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3758      	adds	r7, #88	; 0x58
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}

0800e8c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b084      	sub	sp, #16
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	60f8      	str	r0, [r7, #12]
 800e8cc:	60b9      	str	r1, [r7, #8]
 800e8ce:	603b      	str	r3, [r7, #0]
 800e8d0:	4613      	mov	r3, r2
 800e8d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e8d4:	e049      	b.n	800e96a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e8d6:	69bb      	ldr	r3, [r7, #24]
 800e8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8dc:	d045      	beq.n	800e96a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e8de:	f7f6 fd21 	bl	8005324 <HAL_GetTick>
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	1ad3      	subs	r3, r2, r3
 800e8e8:	69ba      	ldr	r2, [r7, #24]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d302      	bcc.n	800e8f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800e8ee:	69bb      	ldr	r3, [r7, #24]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d101      	bne.n	800e8f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e8f4:	2303      	movs	r3, #3
 800e8f6:	e048      	b.n	800e98a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f003 0304 	and.w	r3, r3, #4
 800e902:	2b00      	cmp	r3, #0
 800e904:	d031      	beq.n	800e96a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	69db      	ldr	r3, [r3, #28]
 800e90c:	f003 0308 	and.w	r3, r3, #8
 800e910:	2b08      	cmp	r3, #8
 800e912:	d110      	bne.n	800e936 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	2208      	movs	r2, #8
 800e91a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e91c:	68f8      	ldr	r0, [r7, #12]
 800e91e:	f000 f921 	bl	800eb64 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2208      	movs	r2, #8
 800e926:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2200      	movs	r2, #0
 800e92e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800e932:	2301      	movs	r3, #1
 800e934:	e029      	b.n	800e98a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	69db      	ldr	r3, [r3, #28]
 800e93c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e944:	d111      	bne.n	800e96a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e94e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	f000 f907 	bl	800eb64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2220      	movs	r2, #32
 800e95a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2200      	movs	r2, #0
 800e962:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e966:	2303      	movs	r3, #3
 800e968:	e00f      	b.n	800e98a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	69da      	ldr	r2, [r3, #28]
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	4013      	ands	r3, r2
 800e974:	68ba      	ldr	r2, [r7, #8]
 800e976:	429a      	cmp	r2, r3
 800e978:	bf0c      	ite	eq
 800e97a:	2301      	moveq	r3, #1
 800e97c:	2300      	movne	r3, #0
 800e97e:	b2db      	uxtb	r3, r3
 800e980:	461a      	mov	r2, r3
 800e982:	79fb      	ldrb	r3, [r7, #7]
 800e984:	429a      	cmp	r2, r3
 800e986:	d0a6      	beq.n	800e8d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e988:	2300      	movs	r3, #0
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3710      	adds	r7, #16
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
	...

0800e994 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b096      	sub	sp, #88	; 0x58
 800e998:	af00      	add	r7, sp, #0
 800e99a:	60f8      	str	r0, [r7, #12]
 800e99c:	60b9      	str	r1, [r7, #8]
 800e99e:	4613      	mov	r3, r2
 800e9a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	68ba      	ldr	r2, [r7, #8]
 800e9a6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	88fa      	ldrh	r2, [r7, #6]
 800e9ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2222      	movs	r2, #34	; 0x22
 800e9bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d02d      	beq.n	800ea26 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9d0:	4a40      	ldr	r2, [pc, #256]	; (800ead4 <UART_Start_Receive_DMA+0x140>)
 800e9d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9da:	4a3f      	ldr	r2, [pc, #252]	; (800ead8 <UART_Start_Receive_DMA+0x144>)
 800e9dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9e4:	4a3d      	ldr	r2, [pc, #244]	; (800eadc <UART_Start_Receive_DMA+0x148>)
 800e9e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	3324      	adds	r3, #36	; 0x24
 800e9fe:	4619      	mov	r1, r3
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea04:	461a      	mov	r2, r3
 800ea06:	88fb      	ldrh	r3, [r7, #6]
 800ea08:	f7f7 faea 	bl	8005fe0 <HAL_DMA_Start_IT>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d009      	beq.n	800ea26 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2210      	movs	r2, #16
 800ea16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2220      	movs	r2, #32
 800ea1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800ea22:	2301      	movs	r3, #1
 800ea24:	e051      	b.n	800eaca <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	691b      	ldr	r3, [r3, #16]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d018      	beq.n	800ea60 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea36:	e853 3f00 	ldrex	r3, [r3]
 800ea3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea42:	657b      	str	r3, [r7, #84]	; 0x54
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	461a      	mov	r2, r3
 800ea4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea4c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea4e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea54:	e841 2300 	strex	r3, r2, [r1]
 800ea58:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ea5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d1e6      	bne.n	800ea2e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	3308      	adds	r3, #8
 800ea66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea6a:	e853 3f00 	ldrex	r3, [r3]
 800ea6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea72:	f043 0301 	orr.w	r3, r3, #1
 800ea76:	653b      	str	r3, [r7, #80]	; 0x50
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	3308      	adds	r3, #8
 800ea7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea80:	637a      	str	r2, [r7, #52]	; 0x34
 800ea82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea88:	e841 2300 	strex	r3, r2, [r1]
 800ea8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ea8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d1e5      	bne.n	800ea60 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	3308      	adds	r3, #8
 800ea9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	e853 3f00 	ldrex	r3, [r3]
 800eaa2:	613b      	str	r3, [r7, #16]
   return(result);
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	3308      	adds	r3, #8
 800eab2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eab4:	623a      	str	r2, [r7, #32]
 800eab6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eab8:	69f9      	ldr	r1, [r7, #28]
 800eaba:	6a3a      	ldr	r2, [r7, #32]
 800eabc:	e841 2300 	strex	r3, r2, [r1]
 800eac0:	61bb      	str	r3, [r7, #24]
   return(result);
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1e5      	bne.n	800ea94 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800eac8:	2300      	movs	r3, #0
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3758      	adds	r7, #88	; 0x58
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	0800ece3 	.word	0x0800ece3
 800ead8:	0800ee0b 	.word	0x0800ee0b
 800eadc:	0800ee49 	.word	0x0800ee49

0800eae0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b08f      	sub	sp, #60	; 0x3c
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaee:	6a3b      	ldr	r3, [r7, #32]
 800eaf0:	e853 3f00 	ldrex	r3, [r3]
 800eaf4:	61fb      	str	r3, [r7, #28]
   return(result);
 800eaf6:	69fb      	ldr	r3, [r7, #28]
 800eaf8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800eafc:	637b      	str	r3, [r7, #52]	; 0x34
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	461a      	mov	r2, r3
 800eb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb08:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb0e:	e841 2300 	strex	r3, r2, [r1]
 800eb12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d1e6      	bne.n	800eae8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	3308      	adds	r3, #8
 800eb20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	e853 3f00 	ldrex	r3, [r3]
 800eb28:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800eb30:	633b      	str	r3, [r7, #48]	; 0x30
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	3308      	adds	r3, #8
 800eb38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb3a:	61ba      	str	r2, [r7, #24]
 800eb3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb3e:	6979      	ldr	r1, [r7, #20]
 800eb40:	69ba      	ldr	r2, [r7, #24]
 800eb42:	e841 2300 	strex	r3, r2, [r1]
 800eb46:	613b      	str	r3, [r7, #16]
   return(result);
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d1e5      	bne.n	800eb1a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2220      	movs	r2, #32
 800eb52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800eb56:	bf00      	nop
 800eb58:	373c      	adds	r7, #60	; 0x3c
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr
	...

0800eb64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b095      	sub	sp, #84	; 0x54
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb74:	e853 3f00 	ldrex	r3, [r3]
 800eb78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eb80:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	461a      	mov	r2, r3
 800eb88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb8a:	643b      	str	r3, [r7, #64]	; 0x40
 800eb8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eb92:	e841 2300 	strex	r3, r2, [r1]
 800eb96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d1e6      	bne.n	800eb6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	3308      	adds	r3, #8
 800eba4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eba6:	6a3b      	ldr	r3, [r7, #32]
 800eba8:	e853 3f00 	ldrex	r3, [r3]
 800ebac:	61fb      	str	r3, [r7, #28]
   return(result);
 800ebae:	69fa      	ldr	r2, [r7, #28]
 800ebb0:	4b1e      	ldr	r3, [pc, #120]	; (800ec2c <UART_EndRxTransfer+0xc8>)
 800ebb2:	4013      	ands	r3, r2
 800ebb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	3308      	adds	r3, #8
 800ebbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ebc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ebc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebc6:	e841 2300 	strex	r3, r2, [r1]
 800ebca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ebcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d1e5      	bne.n	800eb9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebd6:	2b01      	cmp	r3, #1
 800ebd8:	d118      	bne.n	800ec0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	e853 3f00 	ldrex	r3, [r3]
 800ebe6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	f023 0310 	bic.w	r3, r3, #16
 800ebee:	647b      	str	r3, [r7, #68]	; 0x44
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	461a      	mov	r2, r3
 800ebf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebf8:	61bb      	str	r3, [r7, #24]
 800ebfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebfc:	6979      	ldr	r1, [r7, #20]
 800ebfe:	69ba      	ldr	r2, [r7, #24]
 800ec00:	e841 2300 	strex	r3, r2, [r1]
 800ec04:	613b      	str	r3, [r7, #16]
   return(result);
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d1e6      	bne.n	800ebda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2220      	movs	r2, #32
 800ec10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2200      	movs	r2, #0
 800ec18:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ec20:	bf00      	nop
 800ec22:	3754      	adds	r7, #84	; 0x54
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr
 800ec2c:	effffffe 	.word	0xeffffffe

0800ec30 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b090      	sub	sp, #64	; 0x40
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec3c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	69db      	ldr	r3, [r3, #28]
 800ec42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec46:	d037      	beq.n	800ecb8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800ec48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ec50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	3308      	adds	r3, #8
 800ec56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec5a:	e853 3f00 	ldrex	r3, [r3]
 800ec5e:	623b      	str	r3, [r7, #32]
   return(result);
 800ec60:	6a3b      	ldr	r3, [r7, #32]
 800ec62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec66:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	3308      	adds	r3, #8
 800ec6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec70:	633a      	str	r2, [r7, #48]	; 0x30
 800ec72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec78:	e841 2300 	strex	r3, r2, [r1]
 800ec7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d1e5      	bne.n	800ec50 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ec84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	e853 3f00 	ldrex	r3, [r3]
 800ec90:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec98:	637b      	str	r3, [r7, #52]	; 0x34
 800ec9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	461a      	mov	r2, r3
 800eca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eca2:	61fb      	str	r3, [r7, #28]
 800eca4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eca6:	69b9      	ldr	r1, [r7, #24]
 800eca8:	69fa      	ldr	r2, [r7, #28]
 800ecaa:	e841 2300 	strex	r3, r2, [r1]
 800ecae:	617b      	str	r3, [r7, #20]
   return(result);
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d1e6      	bne.n	800ec84 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ecb6:	e002      	b.n	800ecbe <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800ecb8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ecba:	f7f4 fbd9 	bl	8003470 <HAL_UART_TxCpltCallback>
}
 800ecbe:	bf00      	nop
 800ecc0:	3740      	adds	r7, #64	; 0x40
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ecc6:	b580      	push	{r7, lr}
 800ecc8:	b084      	sub	sp, #16
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecd2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ecd4:	68f8      	ldr	r0, [r7, #12]
 800ecd6:	f7fe fe13 	bl	800d900 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ecda:	bf00      	nop
 800ecdc:	3710      	adds	r7, #16
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}

0800ece2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ece2:	b580      	push	{r7, lr}
 800ece4:	b09c      	sub	sp, #112	; 0x70
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecee:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	69db      	ldr	r3, [r3, #28]
 800ecf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecf8:	d071      	beq.n	800edde <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ecfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ed02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed0a:	e853 3f00 	ldrex	r3, [r3]
 800ed0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ed10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ed16:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed20:	65bb      	str	r3, [r7, #88]	; 0x58
 800ed22:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ed26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed28:	e841 2300 	strex	r3, r2, [r1]
 800ed2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ed2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d1e6      	bne.n	800ed02 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	3308      	adds	r3, #8
 800ed3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed3e:	e853 3f00 	ldrex	r3, [r3]
 800ed42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ed44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed46:	f023 0301 	bic.w	r3, r3, #1
 800ed4a:	667b      	str	r3, [r7, #100]	; 0x64
 800ed4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	3308      	adds	r3, #8
 800ed52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ed54:	647a      	str	r2, [r7, #68]	; 0x44
 800ed56:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed5c:	e841 2300 	strex	r3, r2, [r1]
 800ed60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ed62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d1e5      	bne.n	800ed34 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	3308      	adds	r3, #8
 800ed6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed72:	e853 3f00 	ldrex	r3, [r3]
 800ed76:	623b      	str	r3, [r7, #32]
   return(result);
 800ed78:	6a3b      	ldr	r3, [r7, #32]
 800ed7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed7e:	663b      	str	r3, [r7, #96]	; 0x60
 800ed80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	3308      	adds	r3, #8
 800ed86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ed88:	633a      	str	r2, [r7, #48]	; 0x30
 800ed8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed90:	e841 2300 	strex	r3, r2, [r1]
 800ed94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ed96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d1e5      	bne.n	800ed68 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ed9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed9e:	2220      	movs	r2, #32
 800eda0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eda4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eda6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eda8:	2b01      	cmp	r3, #1
 800edaa:	d118      	bne.n	800edde <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800edac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	e853 3f00 	ldrex	r3, [r3]
 800edb8:	60fb      	str	r3, [r7, #12]
   return(result);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	f023 0310 	bic.w	r3, r3, #16
 800edc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800edc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	461a      	mov	r2, r3
 800edc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edca:	61fb      	str	r3, [r7, #28]
 800edcc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edce:	69b9      	ldr	r1, [r7, #24]
 800edd0:	69fa      	ldr	r2, [r7, #28]
 800edd2:	e841 2300 	strex	r3, r2, [r1]
 800edd6:	617b      	str	r3, [r7, #20]
   return(result);
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d1e6      	bne.n	800edac <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800edde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ede0:	2200      	movs	r2, #0
 800ede2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ede4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ede6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ede8:	2b01      	cmp	r3, #1
 800edea:	d107      	bne.n	800edfc <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800edec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800edf2:	4619      	mov	r1, r3
 800edf4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800edf6:	f7fe fda1 	bl	800d93c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800edfa:	e002      	b.n	800ee02 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800edfc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800edfe:	f7fe fd89 	bl	800d914 <HAL_UART_RxCpltCallback>
}
 800ee02:	bf00      	nop
 800ee04:	3770      	adds	r7, #112	; 0x70
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}

0800ee0a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ee0a:	b580      	push	{r7, lr}
 800ee0c:	b084      	sub	sp, #16
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee16:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee22:	2b01      	cmp	r3, #1
 800ee24:	d109      	bne.n	800ee3a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee2c:	085b      	lsrs	r3, r3, #1
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	4619      	mov	r1, r3
 800ee32:	68f8      	ldr	r0, [r7, #12]
 800ee34:	f7fe fd82 	bl	800d93c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ee38:	e002      	b.n	800ee40 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ee3a:	68f8      	ldr	r0, [r7, #12]
 800ee3c:	f7fe fd74 	bl	800d928 <HAL_UART_RxHalfCpltCallback>
}
 800ee40:	bf00      	nop
 800ee42:	3710      	adds	r7, #16
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b086      	sub	sp, #24
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee54:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee5c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee64:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	689b      	ldr	r3, [r3, #8]
 800ee6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee70:	2b80      	cmp	r3, #128	; 0x80
 800ee72:	d109      	bne.n	800ee88 <UART_DMAError+0x40>
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	2b21      	cmp	r3, #33	; 0x21
 800ee78:	d106      	bne.n	800ee88 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ee82:	6978      	ldr	r0, [r7, #20]
 800ee84:	f7ff fe2c 	bl	800eae0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee92:	2b40      	cmp	r3, #64	; 0x40
 800ee94:	d109      	bne.n	800eeaa <UART_DMAError+0x62>
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	2b22      	cmp	r3, #34	; 0x22
 800ee9a:	d106      	bne.n	800eeaa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800eea4:	6978      	ldr	r0, [r7, #20]
 800eea6:	f7ff fe5d 	bl	800eb64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eeb0:	f043 0210 	orr.w	r2, r3, #16
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eeba:	6978      	ldr	r0, [r7, #20]
 800eebc:	f7f2 fc92 	bl	80017e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eec0:	bf00      	nop
 800eec2:	3718      	adds	r7, #24
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b084      	sub	sp, #16
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eed4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2200      	movs	r2, #0
 800eeda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	2200      	movs	r2, #0
 800eee2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eee6:	68f8      	ldr	r0, [r7, #12]
 800eee8:	f7f2 fc7c 	bl	80017e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eeec:	bf00      	nop
 800eeee:	3710      	adds	r7, #16
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b088      	sub	sp, #32
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	e853 3f00 	ldrex	r3, [r3]
 800ef08:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef10:	61fb      	str	r3, [r7, #28]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	461a      	mov	r2, r3
 800ef18:	69fb      	ldr	r3, [r7, #28]
 800ef1a:	61bb      	str	r3, [r7, #24]
 800ef1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef1e:	6979      	ldr	r1, [r7, #20]
 800ef20:	69ba      	ldr	r2, [r7, #24]
 800ef22:	e841 2300 	strex	r3, r2, [r1]
 800ef26:	613b      	str	r3, [r7, #16]
   return(result);
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d1e6      	bne.n	800eefc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2220      	movs	r2, #32
 800ef32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f7f4 fa97 	bl	8003470 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef42:	bf00      	nop
 800ef44:	3720      	adds	r7, #32
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}

0800ef4a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ef4a:	b480      	push	{r7}
 800ef4c:	b083      	sub	sp, #12
 800ef4e:	af00      	add	r7, sp, #0
 800ef50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ef52:	bf00      	nop
 800ef54:	370c      	adds	r7, #12
 800ef56:	46bd      	mov	sp, r7
 800ef58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5c:	4770      	bx	lr

0800ef5e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ef5e:	b480      	push	{r7}
 800ef60:	b083      	sub	sp, #12
 800ef62:	af00      	add	r7, sp, #0
 800ef64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ef66:	bf00      	nop
 800ef68:	370c      	adds	r7, #12
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef70:	4770      	bx	lr

0800ef72 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ef72:	b480      	push	{r7}
 800ef74:	b083      	sub	sp, #12
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ef7a:	bf00      	nop
 800ef7c:	370c      	adds	r7, #12
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef84:	4770      	bx	lr

0800ef86 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ef86:	b480      	push	{r7}
 800ef88:	b085      	sub	sp, #20
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	d101      	bne.n	800ef9c <HAL_UARTEx_DisableFifoMode+0x16>
 800ef98:	2302      	movs	r3, #2
 800ef9a:	e027      	b.n	800efec <HAL_UARTEx_DisableFifoMode+0x66>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2224      	movs	r2, #36	; 0x24
 800efa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	681a      	ldr	r2, [r3, #0]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f022 0201 	bic.w	r2, r2, #1
 800efc2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800efca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2200      	movs	r2, #0
 800efd0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	68fa      	ldr	r2, [r7, #12]
 800efd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2220      	movs	r2, #32
 800efde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2200      	movs	r2, #0
 800efe6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800efea:	2300      	movs	r3, #0
}
 800efec:	4618      	mov	r0, r3
 800efee:	3714      	adds	r7, #20
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr

0800eff8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d101      	bne.n	800f010 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f00c:	2302      	movs	r3, #2
 800f00e:	e02d      	b.n	800f06c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2201      	movs	r2, #1
 800f014:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2224      	movs	r2, #36	; 0x24
 800f01c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	681a      	ldr	r2, [r3, #0]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f022 0201 	bic.w	r2, r2, #1
 800f036:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	689b      	ldr	r3, [r3, #8]
 800f03e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	683a      	ldr	r2, [r7, #0]
 800f048:	430a      	orrs	r2, r1
 800f04a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 f84f 	bl	800f0f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	68fa      	ldr	r2, [r7, #12]
 800f058:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2220      	movs	r2, #32
 800f05e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2200      	movs	r2, #0
 800f066:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f06a:	2300      	movs	r3, #0
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3710      	adds	r7, #16
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b084      	sub	sp, #16
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f084:	2b01      	cmp	r3, #1
 800f086:	d101      	bne.n	800f08c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f088:	2302      	movs	r3, #2
 800f08a:	e02d      	b.n	800f0e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2201      	movs	r2, #1
 800f090:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2224      	movs	r2, #36	; 0x24
 800f098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	681a      	ldr	r2, [r3, #0]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f022 0201 	bic.w	r2, r2, #1
 800f0b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	689b      	ldr	r3, [r3, #8]
 800f0ba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	683a      	ldr	r2, [r7, #0]
 800f0c4:	430a      	orrs	r2, r1
 800f0c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 f811 	bl	800f0f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	68fa      	ldr	r2, [r7, #12]
 800f0d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2220      	movs	r2, #32
 800f0da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f0e6:	2300      	movs	r3, #0
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3710      	adds	r7, #16
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b085      	sub	sp, #20
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d108      	bne.n	800f112 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2201      	movs	r2, #1
 800f104:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2201      	movs	r2, #1
 800f10c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f110:	e031      	b.n	800f176 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f112:	2310      	movs	r3, #16
 800f114:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f116:	2310      	movs	r3, #16
 800f118:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	689b      	ldr	r3, [r3, #8]
 800f120:	0e5b      	lsrs	r3, r3, #25
 800f122:	b2db      	uxtb	r3, r3
 800f124:	f003 0307 	and.w	r3, r3, #7
 800f128:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	689b      	ldr	r3, [r3, #8]
 800f130:	0f5b      	lsrs	r3, r3, #29
 800f132:	b2db      	uxtb	r3, r3
 800f134:	f003 0307 	and.w	r3, r3, #7
 800f138:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f13a:	7bbb      	ldrb	r3, [r7, #14]
 800f13c:	7b3a      	ldrb	r2, [r7, #12]
 800f13e:	4911      	ldr	r1, [pc, #68]	; (800f184 <UARTEx_SetNbDataToProcess+0x94>)
 800f140:	5c8a      	ldrb	r2, [r1, r2]
 800f142:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f146:	7b3a      	ldrb	r2, [r7, #12]
 800f148:	490f      	ldr	r1, [pc, #60]	; (800f188 <UARTEx_SetNbDataToProcess+0x98>)
 800f14a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f14c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f150:	b29a      	uxth	r2, r3
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f158:	7bfb      	ldrb	r3, [r7, #15]
 800f15a:	7b7a      	ldrb	r2, [r7, #13]
 800f15c:	4909      	ldr	r1, [pc, #36]	; (800f184 <UARTEx_SetNbDataToProcess+0x94>)
 800f15e:	5c8a      	ldrb	r2, [r1, r2]
 800f160:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f164:	7b7a      	ldrb	r2, [r7, #13]
 800f166:	4908      	ldr	r1, [pc, #32]	; (800f188 <UARTEx_SetNbDataToProcess+0x98>)
 800f168:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f16a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f16e:	b29a      	uxth	r2, r3
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f176:	bf00      	nop
 800f178:	3714      	adds	r7, #20
 800f17a:	46bd      	mov	sp, r7
 800f17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f180:	4770      	bx	lr
 800f182:	bf00      	nop
 800f184:	0800f848 	.word	0x0800f848
 800f188:	0800f850 	.word	0x0800f850

0800f18c <__cxa_pure_virtual>:
 800f18c:	b508      	push	{r3, lr}
 800f18e:	f000 f80d 	bl	800f1ac <_ZSt9terminatev>

0800f192 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f192:	b508      	push	{r3, lr}
 800f194:	4780      	blx	r0
 800f196:	f000 f80e 	bl	800f1b6 <abort>
	...

0800f19c <_ZSt13get_terminatev>:
 800f19c:	4b02      	ldr	r3, [pc, #8]	; (800f1a8 <_ZSt13get_terminatev+0xc>)
 800f19e:	6818      	ldr	r0, [r3, #0]
 800f1a0:	f3bf 8f5b 	dmb	ish
 800f1a4:	4770      	bx	lr
 800f1a6:	bf00      	nop
 800f1a8:	24000010 	.word	0x24000010

0800f1ac <_ZSt9terminatev>:
 800f1ac:	b508      	push	{r3, lr}
 800f1ae:	f7ff fff5 	bl	800f19c <_ZSt13get_terminatev>
 800f1b2:	f7ff ffee 	bl	800f192 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f1b6 <abort>:
 800f1b6:	b508      	push	{r3, lr}
 800f1b8:	2006      	movs	r0, #6
 800f1ba:	f000 f873 	bl	800f2a4 <raise>
 800f1be:	2001      	movs	r0, #1
 800f1c0:	f7f5 f966 	bl	8004490 <_exit>

0800f1c4 <__errno>:
 800f1c4:	4b01      	ldr	r3, [pc, #4]	; (800f1cc <__errno+0x8>)
 800f1c6:	6818      	ldr	r0, [r3, #0]
 800f1c8:	4770      	bx	lr
 800f1ca:	bf00      	nop
 800f1cc:	24000014 	.word	0x24000014

0800f1d0 <__libc_init_array>:
 800f1d0:	b570      	push	{r4, r5, r6, lr}
 800f1d2:	4d0d      	ldr	r5, [pc, #52]	; (800f208 <__libc_init_array+0x38>)
 800f1d4:	4c0d      	ldr	r4, [pc, #52]	; (800f20c <__libc_init_array+0x3c>)
 800f1d6:	1b64      	subs	r4, r4, r5
 800f1d8:	10a4      	asrs	r4, r4, #2
 800f1da:	2600      	movs	r6, #0
 800f1dc:	42a6      	cmp	r6, r4
 800f1de:	d109      	bne.n	800f1f4 <__libc_init_array+0x24>
 800f1e0:	4d0b      	ldr	r5, [pc, #44]	; (800f210 <__libc_init_array+0x40>)
 800f1e2:	4c0c      	ldr	r4, [pc, #48]	; (800f214 <__libc_init_array+0x44>)
 800f1e4:	f000 f9b0 	bl	800f548 <_init>
 800f1e8:	1b64      	subs	r4, r4, r5
 800f1ea:	10a4      	asrs	r4, r4, #2
 800f1ec:	2600      	movs	r6, #0
 800f1ee:	42a6      	cmp	r6, r4
 800f1f0:	d105      	bne.n	800f1fe <__libc_init_array+0x2e>
 800f1f2:	bd70      	pop	{r4, r5, r6, pc}
 800f1f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1f8:	4798      	blx	r3
 800f1fa:	3601      	adds	r6, #1
 800f1fc:	e7ee      	b.n	800f1dc <__libc_init_array+0xc>
 800f1fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800f202:	4798      	blx	r3
 800f204:	3601      	adds	r6, #1
 800f206:	e7f2      	b.n	800f1ee <__libc_init_array+0x1e>
 800f208:	0800f860 	.word	0x0800f860
 800f20c:	0800f860 	.word	0x0800f860
 800f210:	0800f860 	.word	0x0800f860
 800f214:	0800f868 	.word	0x0800f868

0800f218 <memcpy>:
 800f218:	440a      	add	r2, r1
 800f21a:	4291      	cmp	r1, r2
 800f21c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f220:	d100      	bne.n	800f224 <memcpy+0xc>
 800f222:	4770      	bx	lr
 800f224:	b510      	push	{r4, lr}
 800f226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f22a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f22e:	4291      	cmp	r1, r2
 800f230:	d1f9      	bne.n	800f226 <memcpy+0xe>
 800f232:	bd10      	pop	{r4, pc}

0800f234 <memset>:
 800f234:	4402      	add	r2, r0
 800f236:	4603      	mov	r3, r0
 800f238:	4293      	cmp	r3, r2
 800f23a:	d100      	bne.n	800f23e <memset+0xa>
 800f23c:	4770      	bx	lr
 800f23e:	f803 1b01 	strb.w	r1, [r3], #1
 800f242:	e7f9      	b.n	800f238 <memset+0x4>

0800f244 <realloc>:
 800f244:	4b02      	ldr	r3, [pc, #8]	; (800f250 <realloc+0xc>)
 800f246:	460a      	mov	r2, r1
 800f248:	4601      	mov	r1, r0
 800f24a:	6818      	ldr	r0, [r3, #0]
 800f24c:	f000 b8da 	b.w	800f404 <_realloc_r>
 800f250:	24000014 	.word	0x24000014

0800f254 <_raise_r>:
 800f254:	291f      	cmp	r1, #31
 800f256:	b538      	push	{r3, r4, r5, lr}
 800f258:	4604      	mov	r4, r0
 800f25a:	460d      	mov	r5, r1
 800f25c:	d904      	bls.n	800f268 <_raise_r+0x14>
 800f25e:	2316      	movs	r3, #22
 800f260:	6003      	str	r3, [r0, #0]
 800f262:	f04f 30ff 	mov.w	r0, #4294967295
 800f266:	bd38      	pop	{r3, r4, r5, pc}
 800f268:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f26a:	b112      	cbz	r2, 800f272 <_raise_r+0x1e>
 800f26c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f270:	b94b      	cbnz	r3, 800f286 <_raise_r+0x32>
 800f272:	4620      	mov	r0, r4
 800f274:	f000 f830 	bl	800f2d8 <_getpid_r>
 800f278:	462a      	mov	r2, r5
 800f27a:	4601      	mov	r1, r0
 800f27c:	4620      	mov	r0, r4
 800f27e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f282:	f000 b817 	b.w	800f2b4 <_kill_r>
 800f286:	2b01      	cmp	r3, #1
 800f288:	d00a      	beq.n	800f2a0 <_raise_r+0x4c>
 800f28a:	1c59      	adds	r1, r3, #1
 800f28c:	d103      	bne.n	800f296 <_raise_r+0x42>
 800f28e:	2316      	movs	r3, #22
 800f290:	6003      	str	r3, [r0, #0]
 800f292:	2001      	movs	r0, #1
 800f294:	e7e7      	b.n	800f266 <_raise_r+0x12>
 800f296:	2400      	movs	r4, #0
 800f298:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f29c:	4628      	mov	r0, r5
 800f29e:	4798      	blx	r3
 800f2a0:	2000      	movs	r0, #0
 800f2a2:	e7e0      	b.n	800f266 <_raise_r+0x12>

0800f2a4 <raise>:
 800f2a4:	4b02      	ldr	r3, [pc, #8]	; (800f2b0 <raise+0xc>)
 800f2a6:	4601      	mov	r1, r0
 800f2a8:	6818      	ldr	r0, [r3, #0]
 800f2aa:	f7ff bfd3 	b.w	800f254 <_raise_r>
 800f2ae:	bf00      	nop
 800f2b0:	24000014 	.word	0x24000014

0800f2b4 <_kill_r>:
 800f2b4:	b538      	push	{r3, r4, r5, lr}
 800f2b6:	4d07      	ldr	r5, [pc, #28]	; (800f2d4 <_kill_r+0x20>)
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	4604      	mov	r4, r0
 800f2bc:	4608      	mov	r0, r1
 800f2be:	4611      	mov	r1, r2
 800f2c0:	602b      	str	r3, [r5, #0]
 800f2c2:	f7f5 f8d5 	bl	8004470 <_kill>
 800f2c6:	1c43      	adds	r3, r0, #1
 800f2c8:	d102      	bne.n	800f2d0 <_kill_r+0x1c>
 800f2ca:	682b      	ldr	r3, [r5, #0]
 800f2cc:	b103      	cbz	r3, 800f2d0 <_kill_r+0x1c>
 800f2ce:	6023      	str	r3, [r4, #0]
 800f2d0:	bd38      	pop	{r3, r4, r5, pc}
 800f2d2:	bf00      	nop
 800f2d4:	24001b00 	.word	0x24001b00

0800f2d8 <_getpid_r>:
 800f2d8:	f7f5 b8c2 	b.w	8004460 <_getpid>

0800f2dc <sbrk_aligned>:
 800f2dc:	b570      	push	{r4, r5, r6, lr}
 800f2de:	4e0e      	ldr	r6, [pc, #56]	; (800f318 <sbrk_aligned+0x3c>)
 800f2e0:	460c      	mov	r4, r1
 800f2e2:	6831      	ldr	r1, [r6, #0]
 800f2e4:	4605      	mov	r5, r0
 800f2e6:	b911      	cbnz	r1, 800f2ee <sbrk_aligned+0x12>
 800f2e8:	f000 f8bc 	bl	800f464 <_sbrk_r>
 800f2ec:	6030      	str	r0, [r6, #0]
 800f2ee:	4621      	mov	r1, r4
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	f000 f8b7 	bl	800f464 <_sbrk_r>
 800f2f6:	1c43      	adds	r3, r0, #1
 800f2f8:	d00a      	beq.n	800f310 <sbrk_aligned+0x34>
 800f2fa:	1cc4      	adds	r4, r0, #3
 800f2fc:	f024 0403 	bic.w	r4, r4, #3
 800f300:	42a0      	cmp	r0, r4
 800f302:	d007      	beq.n	800f314 <sbrk_aligned+0x38>
 800f304:	1a21      	subs	r1, r4, r0
 800f306:	4628      	mov	r0, r5
 800f308:	f000 f8ac 	bl	800f464 <_sbrk_r>
 800f30c:	3001      	adds	r0, #1
 800f30e:	d101      	bne.n	800f314 <sbrk_aligned+0x38>
 800f310:	f04f 34ff 	mov.w	r4, #4294967295
 800f314:	4620      	mov	r0, r4
 800f316:	bd70      	pop	{r4, r5, r6, pc}
 800f318:	24001afc 	.word	0x24001afc

0800f31c <_malloc_r>:
 800f31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f320:	1ccd      	adds	r5, r1, #3
 800f322:	f025 0503 	bic.w	r5, r5, #3
 800f326:	3508      	adds	r5, #8
 800f328:	2d0c      	cmp	r5, #12
 800f32a:	bf38      	it	cc
 800f32c:	250c      	movcc	r5, #12
 800f32e:	2d00      	cmp	r5, #0
 800f330:	4607      	mov	r7, r0
 800f332:	db01      	blt.n	800f338 <_malloc_r+0x1c>
 800f334:	42a9      	cmp	r1, r5
 800f336:	d905      	bls.n	800f344 <_malloc_r+0x28>
 800f338:	230c      	movs	r3, #12
 800f33a:	603b      	str	r3, [r7, #0]
 800f33c:	2600      	movs	r6, #0
 800f33e:	4630      	mov	r0, r6
 800f340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f344:	4e2e      	ldr	r6, [pc, #184]	; (800f400 <_malloc_r+0xe4>)
 800f346:	f000 f89d 	bl	800f484 <__malloc_lock>
 800f34a:	6833      	ldr	r3, [r6, #0]
 800f34c:	461c      	mov	r4, r3
 800f34e:	bb34      	cbnz	r4, 800f39e <_malloc_r+0x82>
 800f350:	4629      	mov	r1, r5
 800f352:	4638      	mov	r0, r7
 800f354:	f7ff ffc2 	bl	800f2dc <sbrk_aligned>
 800f358:	1c43      	adds	r3, r0, #1
 800f35a:	4604      	mov	r4, r0
 800f35c:	d14d      	bne.n	800f3fa <_malloc_r+0xde>
 800f35e:	6834      	ldr	r4, [r6, #0]
 800f360:	4626      	mov	r6, r4
 800f362:	2e00      	cmp	r6, #0
 800f364:	d140      	bne.n	800f3e8 <_malloc_r+0xcc>
 800f366:	6823      	ldr	r3, [r4, #0]
 800f368:	4631      	mov	r1, r6
 800f36a:	4638      	mov	r0, r7
 800f36c:	eb04 0803 	add.w	r8, r4, r3
 800f370:	f000 f878 	bl	800f464 <_sbrk_r>
 800f374:	4580      	cmp	r8, r0
 800f376:	d13a      	bne.n	800f3ee <_malloc_r+0xd2>
 800f378:	6821      	ldr	r1, [r4, #0]
 800f37a:	3503      	adds	r5, #3
 800f37c:	1a6d      	subs	r5, r5, r1
 800f37e:	f025 0503 	bic.w	r5, r5, #3
 800f382:	3508      	adds	r5, #8
 800f384:	2d0c      	cmp	r5, #12
 800f386:	bf38      	it	cc
 800f388:	250c      	movcc	r5, #12
 800f38a:	4629      	mov	r1, r5
 800f38c:	4638      	mov	r0, r7
 800f38e:	f7ff ffa5 	bl	800f2dc <sbrk_aligned>
 800f392:	3001      	adds	r0, #1
 800f394:	d02b      	beq.n	800f3ee <_malloc_r+0xd2>
 800f396:	6823      	ldr	r3, [r4, #0]
 800f398:	442b      	add	r3, r5
 800f39a:	6023      	str	r3, [r4, #0]
 800f39c:	e00e      	b.n	800f3bc <_malloc_r+0xa0>
 800f39e:	6822      	ldr	r2, [r4, #0]
 800f3a0:	1b52      	subs	r2, r2, r5
 800f3a2:	d41e      	bmi.n	800f3e2 <_malloc_r+0xc6>
 800f3a4:	2a0b      	cmp	r2, #11
 800f3a6:	d916      	bls.n	800f3d6 <_malloc_r+0xba>
 800f3a8:	1961      	adds	r1, r4, r5
 800f3aa:	42a3      	cmp	r3, r4
 800f3ac:	6025      	str	r5, [r4, #0]
 800f3ae:	bf18      	it	ne
 800f3b0:	6059      	strne	r1, [r3, #4]
 800f3b2:	6863      	ldr	r3, [r4, #4]
 800f3b4:	bf08      	it	eq
 800f3b6:	6031      	streq	r1, [r6, #0]
 800f3b8:	5162      	str	r2, [r4, r5]
 800f3ba:	604b      	str	r3, [r1, #4]
 800f3bc:	4638      	mov	r0, r7
 800f3be:	f104 060b 	add.w	r6, r4, #11
 800f3c2:	f000 f865 	bl	800f490 <__malloc_unlock>
 800f3c6:	f026 0607 	bic.w	r6, r6, #7
 800f3ca:	1d23      	adds	r3, r4, #4
 800f3cc:	1af2      	subs	r2, r6, r3
 800f3ce:	d0b6      	beq.n	800f33e <_malloc_r+0x22>
 800f3d0:	1b9b      	subs	r3, r3, r6
 800f3d2:	50a3      	str	r3, [r4, r2]
 800f3d4:	e7b3      	b.n	800f33e <_malloc_r+0x22>
 800f3d6:	6862      	ldr	r2, [r4, #4]
 800f3d8:	42a3      	cmp	r3, r4
 800f3da:	bf0c      	ite	eq
 800f3dc:	6032      	streq	r2, [r6, #0]
 800f3de:	605a      	strne	r2, [r3, #4]
 800f3e0:	e7ec      	b.n	800f3bc <_malloc_r+0xa0>
 800f3e2:	4623      	mov	r3, r4
 800f3e4:	6864      	ldr	r4, [r4, #4]
 800f3e6:	e7b2      	b.n	800f34e <_malloc_r+0x32>
 800f3e8:	4634      	mov	r4, r6
 800f3ea:	6876      	ldr	r6, [r6, #4]
 800f3ec:	e7b9      	b.n	800f362 <_malloc_r+0x46>
 800f3ee:	230c      	movs	r3, #12
 800f3f0:	603b      	str	r3, [r7, #0]
 800f3f2:	4638      	mov	r0, r7
 800f3f4:	f000 f84c 	bl	800f490 <__malloc_unlock>
 800f3f8:	e7a1      	b.n	800f33e <_malloc_r+0x22>
 800f3fa:	6025      	str	r5, [r4, #0]
 800f3fc:	e7de      	b.n	800f3bc <_malloc_r+0xa0>
 800f3fe:	bf00      	nop
 800f400:	24001af8 	.word	0x24001af8

0800f404 <_realloc_r>:
 800f404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f408:	4680      	mov	r8, r0
 800f40a:	4614      	mov	r4, r2
 800f40c:	460e      	mov	r6, r1
 800f40e:	b921      	cbnz	r1, 800f41a <_realloc_r+0x16>
 800f410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f414:	4611      	mov	r1, r2
 800f416:	f7ff bf81 	b.w	800f31c <_malloc_r>
 800f41a:	b92a      	cbnz	r2, 800f428 <_realloc_r+0x24>
 800f41c:	f000 f83e 	bl	800f49c <_free_r>
 800f420:	4625      	mov	r5, r4
 800f422:	4628      	mov	r0, r5
 800f424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f428:	f000 f884 	bl	800f534 <_malloc_usable_size_r>
 800f42c:	4284      	cmp	r4, r0
 800f42e:	4607      	mov	r7, r0
 800f430:	d802      	bhi.n	800f438 <_realloc_r+0x34>
 800f432:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f436:	d812      	bhi.n	800f45e <_realloc_r+0x5a>
 800f438:	4621      	mov	r1, r4
 800f43a:	4640      	mov	r0, r8
 800f43c:	f7ff ff6e 	bl	800f31c <_malloc_r>
 800f440:	4605      	mov	r5, r0
 800f442:	2800      	cmp	r0, #0
 800f444:	d0ed      	beq.n	800f422 <_realloc_r+0x1e>
 800f446:	42bc      	cmp	r4, r7
 800f448:	4622      	mov	r2, r4
 800f44a:	4631      	mov	r1, r6
 800f44c:	bf28      	it	cs
 800f44e:	463a      	movcs	r2, r7
 800f450:	f7ff fee2 	bl	800f218 <memcpy>
 800f454:	4631      	mov	r1, r6
 800f456:	4640      	mov	r0, r8
 800f458:	f000 f820 	bl	800f49c <_free_r>
 800f45c:	e7e1      	b.n	800f422 <_realloc_r+0x1e>
 800f45e:	4635      	mov	r5, r6
 800f460:	e7df      	b.n	800f422 <_realloc_r+0x1e>
	...

0800f464 <_sbrk_r>:
 800f464:	b538      	push	{r3, r4, r5, lr}
 800f466:	4d06      	ldr	r5, [pc, #24]	; (800f480 <_sbrk_r+0x1c>)
 800f468:	2300      	movs	r3, #0
 800f46a:	4604      	mov	r4, r0
 800f46c:	4608      	mov	r0, r1
 800f46e:	602b      	str	r3, [r5, #0]
 800f470:	f7f5 f818 	bl	80044a4 <_sbrk>
 800f474:	1c43      	adds	r3, r0, #1
 800f476:	d102      	bne.n	800f47e <_sbrk_r+0x1a>
 800f478:	682b      	ldr	r3, [r5, #0]
 800f47a:	b103      	cbz	r3, 800f47e <_sbrk_r+0x1a>
 800f47c:	6023      	str	r3, [r4, #0]
 800f47e:	bd38      	pop	{r3, r4, r5, pc}
 800f480:	24001b00 	.word	0x24001b00

0800f484 <__malloc_lock>:
 800f484:	4801      	ldr	r0, [pc, #4]	; (800f48c <__malloc_lock+0x8>)
 800f486:	f000 b85d 	b.w	800f544 <__retarget_lock_acquire_recursive>
 800f48a:	bf00      	nop
 800f48c:	24001b04 	.word	0x24001b04

0800f490 <__malloc_unlock>:
 800f490:	4801      	ldr	r0, [pc, #4]	; (800f498 <__malloc_unlock+0x8>)
 800f492:	f000 b858 	b.w	800f546 <__retarget_lock_release_recursive>
 800f496:	bf00      	nop
 800f498:	24001b04 	.word	0x24001b04

0800f49c <_free_r>:
 800f49c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f49e:	2900      	cmp	r1, #0
 800f4a0:	d044      	beq.n	800f52c <_free_r+0x90>
 800f4a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4a6:	9001      	str	r0, [sp, #4]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	f1a1 0404 	sub.w	r4, r1, #4
 800f4ae:	bfb8      	it	lt
 800f4b0:	18e4      	addlt	r4, r4, r3
 800f4b2:	f7ff ffe7 	bl	800f484 <__malloc_lock>
 800f4b6:	4a1e      	ldr	r2, [pc, #120]	; (800f530 <_free_r+0x94>)
 800f4b8:	9801      	ldr	r0, [sp, #4]
 800f4ba:	6813      	ldr	r3, [r2, #0]
 800f4bc:	b933      	cbnz	r3, 800f4cc <_free_r+0x30>
 800f4be:	6063      	str	r3, [r4, #4]
 800f4c0:	6014      	str	r4, [r2, #0]
 800f4c2:	b003      	add	sp, #12
 800f4c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4c8:	f7ff bfe2 	b.w	800f490 <__malloc_unlock>
 800f4cc:	42a3      	cmp	r3, r4
 800f4ce:	d908      	bls.n	800f4e2 <_free_r+0x46>
 800f4d0:	6825      	ldr	r5, [r4, #0]
 800f4d2:	1961      	adds	r1, r4, r5
 800f4d4:	428b      	cmp	r3, r1
 800f4d6:	bf01      	itttt	eq
 800f4d8:	6819      	ldreq	r1, [r3, #0]
 800f4da:	685b      	ldreq	r3, [r3, #4]
 800f4dc:	1949      	addeq	r1, r1, r5
 800f4de:	6021      	streq	r1, [r4, #0]
 800f4e0:	e7ed      	b.n	800f4be <_free_r+0x22>
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	b10b      	cbz	r3, 800f4ec <_free_r+0x50>
 800f4e8:	42a3      	cmp	r3, r4
 800f4ea:	d9fa      	bls.n	800f4e2 <_free_r+0x46>
 800f4ec:	6811      	ldr	r1, [r2, #0]
 800f4ee:	1855      	adds	r5, r2, r1
 800f4f0:	42a5      	cmp	r5, r4
 800f4f2:	d10b      	bne.n	800f50c <_free_r+0x70>
 800f4f4:	6824      	ldr	r4, [r4, #0]
 800f4f6:	4421      	add	r1, r4
 800f4f8:	1854      	adds	r4, r2, r1
 800f4fa:	42a3      	cmp	r3, r4
 800f4fc:	6011      	str	r1, [r2, #0]
 800f4fe:	d1e0      	bne.n	800f4c2 <_free_r+0x26>
 800f500:	681c      	ldr	r4, [r3, #0]
 800f502:	685b      	ldr	r3, [r3, #4]
 800f504:	6053      	str	r3, [r2, #4]
 800f506:	4421      	add	r1, r4
 800f508:	6011      	str	r1, [r2, #0]
 800f50a:	e7da      	b.n	800f4c2 <_free_r+0x26>
 800f50c:	d902      	bls.n	800f514 <_free_r+0x78>
 800f50e:	230c      	movs	r3, #12
 800f510:	6003      	str	r3, [r0, #0]
 800f512:	e7d6      	b.n	800f4c2 <_free_r+0x26>
 800f514:	6825      	ldr	r5, [r4, #0]
 800f516:	1961      	adds	r1, r4, r5
 800f518:	428b      	cmp	r3, r1
 800f51a:	bf04      	itt	eq
 800f51c:	6819      	ldreq	r1, [r3, #0]
 800f51e:	685b      	ldreq	r3, [r3, #4]
 800f520:	6063      	str	r3, [r4, #4]
 800f522:	bf04      	itt	eq
 800f524:	1949      	addeq	r1, r1, r5
 800f526:	6021      	streq	r1, [r4, #0]
 800f528:	6054      	str	r4, [r2, #4]
 800f52a:	e7ca      	b.n	800f4c2 <_free_r+0x26>
 800f52c:	b003      	add	sp, #12
 800f52e:	bd30      	pop	{r4, r5, pc}
 800f530:	24001af8 	.word	0x24001af8

0800f534 <_malloc_usable_size_r>:
 800f534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f538:	1f18      	subs	r0, r3, #4
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	bfbc      	itt	lt
 800f53e:	580b      	ldrlt	r3, [r1, r0]
 800f540:	18c0      	addlt	r0, r0, r3
 800f542:	4770      	bx	lr

0800f544 <__retarget_lock_acquire_recursive>:
 800f544:	4770      	bx	lr

0800f546 <__retarget_lock_release_recursive>:
 800f546:	4770      	bx	lr

0800f548 <_init>:
 800f548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f54a:	bf00      	nop
 800f54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f54e:	bc08      	pop	{r3}
 800f550:	469e      	mov	lr, r3
 800f552:	4770      	bx	lr

0800f554 <_fini>:
 800f554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f556:	bf00      	nop
 800f558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f55a:	bc08      	pop	{r3}
 800f55c:	469e      	mov	lr, r3
 800f55e:	4770      	bx	lr
