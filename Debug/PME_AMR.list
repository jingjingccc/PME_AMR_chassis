
PME_AMR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edc4  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  0800f094  0800f094  0001f094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f380  0800f380  0001f380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f388  0800f388  0001f388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f390  0800f390  0001f390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800f394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003958  24000078  0800f40c  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240039d0  0800f40c  000239d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021765  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ab2  00000000  00000000  0004180b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001508  00000000  00000000  000452c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013c8  00000000  00000000  000467c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035f2d  00000000  00000000  00047b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d3fe  00000000  00000000  0007dabd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153911  00000000  00000000  0009aebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ee7cc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d00  00000000  00000000  001ee81c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f07c 	.word	0x0800f07c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800f07c 	.word	0x0800f07c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <Control_Init>:
/**
 * @ brief Include all the initial function
 * @ retval None
 * */
void Control_Init()
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b0ab      	sub	sp, #172	; 0xac
 8000684:	af28      	add	r7, sp, #160	; 0xa0
	Hardware_Info_Init();
 8000686:	f000 faeb 	bl	8000c60 <Hardware_Info_Init>
	Control_Timer_Init();
 800068a:	f000 fab9 	bl	8000c00 <Control_Timer_Init>
	Motor_Driver_Init(&WheelA, M1_PHASE_Pin, M1_PHASE_GPIO_port, M1_Encoder_timer, M1_Encoder_timerchannel, M1_Encoder_dir, M1_PWM_timer, M1_PWM_timerchannel);
	Motor_Driver_Init(&WheelB, M2_PHASE_Pin, M2_PHASE_GPIO_port, M2_Encoder_timer, M2_Encoder_timerchannel, M2_Encoder_dir, M2_PWM_timer, M2_PWM_timerchannel);
	Motor_Driver_Init(&WheelC, M3_PHASE_Pin, M3_PHASE_GPIO_port, M3_Encoder_timer, M3_Encoder_timerchannel, M3_Encoder_dir, M3_PWM_timer, M3_PWM_timerchannel);
#endif
#ifdef G2_18V17
	Motor_Driver_Init(&WheelA, M1_DIR_Pin, M1_DIR_GPIO_port, M1_Encoder_timer, M1_Encoder_timerchannel, M1_Encoder_dir, M1_PWM_timer, M1_PWM_timerchannel);
 800068e:	4cbc      	ldr	r4, [pc, #752]	; (8000980 <Control_Init+0x300>)
 8000690:	2300      	movs	r3, #0
 8000692:	9327      	str	r3, [sp, #156]	; 0x9c
 8000694:	4abb      	ldr	r2, [pc, #748]	; (8000984 <Control_Init+0x304>)
 8000696:	ab14      	add	r3, sp, #80	; 0x50
 8000698:	4611      	mov	r1, r2
 800069a:	224c      	movs	r2, #76	; 0x4c
 800069c:	4618      	mov	r0, r3
 800069e:	f00e fb55 	bl	800ed4c <memcpy>
 80006a2:	2301      	movs	r3, #1
 80006a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80006a6:	2304      	movs	r3, #4
 80006a8:	9312      	str	r3, [sp, #72]	; 0x48
 80006aa:	4668      	mov	r0, sp
 80006ac:	1d23      	adds	r3, r4, #4
 80006ae:	2248      	movs	r2, #72	; 0x48
 80006b0:	4619      	mov	r1, r3
 80006b2:	f00e fb4b 	bl	800ed4c <memcpy>
 80006b6:	6823      	ldr	r3, [r4, #0]
 80006b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006bc:	49b2      	ldr	r1, [pc, #712]	; (8000988 <Control_Init+0x308>)
 80006be:	48b3      	ldr	r0, [pc, #716]	; (800098c <Control_Init+0x30c>)
 80006c0:	f000 fa69 	bl	8000b96 <Motor_Driver_Init>
	Motor_Driver_Init(&WheelB, M2_DIR_Pin, M2_DIR_GPIO_port, M2_Encoder_timer, M2_Encoder_timerchannel, M2_Encoder_dir, M2_PWM_timer, M2_PWM_timerchannel);
 80006c4:	4cb2      	ldr	r4, [pc, #712]	; (8000990 <Control_Init+0x310>)
 80006c6:	2304      	movs	r3, #4
 80006c8:	9327      	str	r3, [sp, #156]	; 0x9c
 80006ca:	4aae      	ldr	r2, [pc, #696]	; (8000984 <Control_Init+0x304>)
 80006cc:	ab14      	add	r3, sp, #80	; 0x50
 80006ce:	4611      	mov	r1, r2
 80006d0:	224c      	movs	r2, #76	; 0x4c
 80006d2:	4618      	mov	r0, r3
 80006d4:	f00e fb3a 	bl	800ed4c <memcpy>
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295
 80006dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80006de:	2304      	movs	r3, #4
 80006e0:	9312      	str	r3, [sp, #72]	; 0x48
 80006e2:	4668      	mov	r0, sp
 80006e4:	1d23      	adds	r3, r4, #4
 80006e6:	2248      	movs	r2, #72	; 0x48
 80006e8:	4619      	mov	r1, r3
 80006ea:	f00e fb2f 	bl	800ed4c <memcpy>
 80006ee:	6823      	ldr	r3, [r4, #0]
 80006f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006f4:	49a7      	ldr	r1, [pc, #668]	; (8000994 <Control_Init+0x314>)
 80006f6:	48a8      	ldr	r0, [pc, #672]	; (8000998 <Control_Init+0x318>)
 80006f8:	f000 fa4d 	bl	8000b96 <Motor_Driver_Init>
	Motor_Driver_Init(&WheelC, M3_DIR_Pin, M3_DIR_GPIO_port, M3_Encoder_timer, M3_Encoder_timerchannel, M3_Encoder_dir, M3_PWM_timer, M3_PWM_timerchannel);
 80006fc:	4ca7      	ldr	r4, [pc, #668]	; (800099c <Control_Init+0x31c>)
 80006fe:	2300      	movs	r3, #0
 8000700:	9327      	str	r3, [sp, #156]	; 0x9c
 8000702:	4aa7      	ldr	r2, [pc, #668]	; (80009a0 <Control_Init+0x320>)
 8000704:	ab14      	add	r3, sp, #80	; 0x50
 8000706:	4611      	mov	r1, r2
 8000708:	224c      	movs	r2, #76	; 0x4c
 800070a:	4618      	mov	r0, r3
 800070c:	f00e fb1e 	bl	800ed4c <memcpy>
 8000710:	2301      	movs	r3, #1
 8000712:	9313      	str	r3, [sp, #76]	; 0x4c
 8000714:	2304      	movs	r3, #4
 8000716:	9312      	str	r3, [sp, #72]	; 0x48
 8000718:	4668      	mov	r0, sp
 800071a:	1d23      	adds	r3, r4, #4
 800071c:	2248      	movs	r2, #72	; 0x48
 800071e:	4619      	mov	r1, r3
 8000720:	f00e fb14 	bl	800ed4c <memcpy>
 8000724:	6823      	ldr	r3, [r4, #0]
 8000726:	2208      	movs	r2, #8
 8000728:	499e      	ldr	r1, [pc, #632]	; (80009a4 <Control_Init+0x324>)
 800072a:	489f      	ldr	r0, [pc, #636]	; (80009a8 <Control_Init+0x328>)
 800072c:	f000 fa33 	bl	8000b96 <Motor_Driver_Init>
	Motor_Driver_Init(&WheelD, M4_DIR_Pin, M4_DIR_GPIO_port, M4_Encoder_timer, M4_Encoder_timerchannel, M4_Encoder_dir, M4_PWM_timer, M4_PWM_timerchannel);
 8000730:	4c9e      	ldr	r4, [pc, #632]	; (80009ac <Control_Init+0x32c>)
 8000732:	2304      	movs	r3, #4
 8000734:	9327      	str	r3, [sp, #156]	; 0x9c
 8000736:	4a9a      	ldr	r2, [pc, #616]	; (80009a0 <Control_Init+0x320>)
 8000738:	ab14      	add	r3, sp, #80	; 0x50
 800073a:	4611      	mov	r1, r2
 800073c:	224c      	movs	r2, #76	; 0x4c
 800073e:	4618      	mov	r0, r3
 8000740:	f00e fb04 	bl	800ed4c <memcpy>
 8000744:	f04f 33ff 	mov.w	r3, #4294967295
 8000748:	9313      	str	r3, [sp, #76]	; 0x4c
 800074a:	2304      	movs	r3, #4
 800074c:	9312      	str	r3, [sp, #72]	; 0x48
 800074e:	4668      	mov	r0, sp
 8000750:	1d23      	adds	r3, r4, #4
 8000752:	2248      	movs	r2, #72	; 0x48
 8000754:	4619      	mov	r1, r3
 8000756:	f00e faf9 	bl	800ed4c <memcpy>
 800075a:	6823      	ldr	r3, [r4, #0]
 800075c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000760:	4993      	ldr	r1, [pc, #588]	; (80009b0 <Control_Init+0x330>)
 8000762:	4894      	ldr	r0, [pc, #592]	; (80009b4 <Control_Init+0x334>)
 8000764:	f000 fa17 	bl	8000b96 <Motor_Driver_Init>
#endif

	Pid_Param_Init(&WheelA, M1_KP, M1_KI, M1_KD);
 8000768:	ed9f 2b79 	vldr	d2, [pc, #484]	; 8000950 <Control_Init+0x2d0>
 800076c:	ed9f 1b78 	vldr	d1, [pc, #480]	; 8000950 <Control_Init+0x2d0>
 8000770:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8000774:	4885      	ldr	r0, [pc, #532]	; (800098c <Control_Init+0x30c>)
 8000776:	f000 f9ef 	bl	8000b58 <Pid_Param_Init>
	Pid_Param_Init(&WheelB, M2_KP, M2_KI, M2_KD);
 800077a:	ed9f 2b75 	vldr	d2, [pc, #468]	; 8000950 <Control_Init+0x2d0>
 800077e:	ed9f 1b76 	vldr	d1, [pc, #472]	; 8000958 <Control_Init+0x2d8>
 8000782:	ed9f 0b77 	vldr	d0, [pc, #476]	; 8000960 <Control_Init+0x2e0>
 8000786:	4884      	ldr	r0, [pc, #528]	; (8000998 <Control_Init+0x318>)
 8000788:	f000 f9e6 	bl	8000b58 <Pid_Param_Init>
	Pid_Param_Init(&WheelC, M3_KP, M3_KI, M3_KD);
 800078c:	ed9f 2b70 	vldr	d2, [pc, #448]	; 8000950 <Control_Init+0x2d0>
 8000790:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8000950 <Control_Init+0x2d0>
 8000794:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8000798:	4883      	ldr	r0, [pc, #524]	; (80009a8 <Control_Init+0x328>)
 800079a:	f000 f9dd 	bl	8000b58 <Pid_Param_Init>
	Pid_Param_Init(&WheelD, M4_KP, M4_KI, M4_KD);
 800079e:	ed9f 2b6c 	vldr	d2, [pc, #432]	; 8000950 <Control_Init+0x2d0>
 80007a2:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8000968 <Control_Init+0x2e8>
 80007a6:	ed9f 0b72 	vldr	d0, [pc, #456]	; 8000970 <Control_Init+0x2f0>
 80007aa:	4882      	ldr	r0, [pc, #520]	; (80009b4 <Control_Init+0x334>)
 80007ac:	f000 f9d4 	bl	8000b58 <Pid_Param_Init>

	i = 0;
 80007b0:	4b81      	ldr	r3, [pc, #516]	; (80009b8 <Control_Init+0x338>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
	limit_integral = 0.6;
 80007b6:	4981      	ldr	r1, [pc, #516]	; (80009bc <Control_Init+0x33c>)
 80007b8:	a36f      	add	r3, pc, #444	; (adr r3, 8000978 <Control_Init+0x2f8>)
 80007ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007be:	e9c1 2300 	strd	r2, r3, [r1]
	pwm_arr = M1_PWM_timer.Init.Period;
 80007c2:	4b70      	ldr	r3, [pc, #448]	; (8000984 <Control_Init+0x304>)
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	ee07 3a90 	vmov	s15, r3
 80007ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007ce:	4b7c      	ldr	r3, [pc, #496]	; (80009c0 <Control_Init+0x340>)
 80007d0:	ed83 7b00 	vstr	d7, [r3]

	// PCLK1_freq, APB1 timer frequency
	int32_t PCLK1_freq = HAL_RCC_GetPCLK1Freq();
 80007d4:	f008 feb6 	bl	8009544 <HAL_RCC_GetPCLK1Freq>
 80007d8:	4603      	mov	r3, r0
 80007da:	607b      	str	r3, [r7, #4]
	/*if((RCC->CFGR & RCC_D2CFGR_D2PPRE1) != 0)
	{
		PCLK1_freq *=2;
	}*/

	int32_t timer_interrupt_freq = (double)PCLK1_freq / (Encoder_Interrupt_timer.Init.Prescaler + 1) / (Encoder_Interrupt_timer.Init.Period + 1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	ee07 3a90 	vmov	s15, r3
 80007e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007e6:	4b77      	ldr	r3, [pc, #476]	; (80009c4 <Control_Init+0x344>)
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	3301      	adds	r3, #1
 80007ec:	ee07 3a90 	vmov	s15, r3
 80007f0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007f4:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80007f8:	4b72      	ldr	r3, [pc, #456]	; (80009c4 <Control_Init+0x344>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	3301      	adds	r3, #1
 80007fe:	ee07 3a90 	vmov	s15, r3
 8000802:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000806:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800080a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800080e:	ee17 3a90 	vmov	r3, s15
 8000812:	603b      	str	r3, [r7, #0]
	control_period = (double)(1 / (double)timer_interrupt_freq);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	ee07 3a90 	vmov	s15, r3
 800081a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800081e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000822:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000826:	4b68      	ldr	r3, [pc, #416]	; (80009c8 <Control_Init+0x348>)
 8000828:	ed83 7b00 	vstr	d7, [r3]

	WheelA.integral = 0.0;
 800082c:	4957      	ldr	r1, [pc, #348]	; (800098c <Control_Init+0x30c>)
 800082e:	f04f 0200 	mov.w	r2, #0
 8000832:	f04f 0300 	mov.w	r3, #0
 8000836:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	WheelB.integral = 0.0;
 800083a:	4957      	ldr	r1, [pc, #348]	; (8000998 <Control_Init+0x318>)
 800083c:	f04f 0200 	mov.w	r2, #0
 8000840:	f04f 0300 	mov.w	r3, #0
 8000844:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	WheelC.integral = 0.0;
 8000848:	4957      	ldr	r1, [pc, #348]	; (80009a8 <Control_Init+0x328>)
 800084a:	f04f 0200 	mov.w	r2, #0
 800084e:	f04f 0300 	mov.w	r3, #0
 8000852:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	WheelD.integral = 0.0;
 8000856:	4957      	ldr	r1, [pc, #348]	; (80009b4 <Control_Init+0x334>)
 8000858:	f04f 0200 	mov.w	r2, #0
 800085c:	f04f 0300 	mov.w	r3, #0
 8000860:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	WheelA.goal = 0.0;
 8000864:	4949      	ldr	r1, [pc, #292]	; (800098c <Control_Init+0x30c>)
 8000866:	f04f 0200 	mov.w	r2, #0
 800086a:	f04f 0300 	mov.w	r3, #0
 800086e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	WheelB.goal = 0.0;
 8000872:	4949      	ldr	r1, [pc, #292]	; (8000998 <Control_Init+0x318>)
 8000874:	f04f 0200 	mov.w	r2, #0
 8000878:	f04f 0300 	mov.w	r3, #0
 800087c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	WheelC.goal = 0.0;
 8000880:	4949      	ldr	r1, [pc, #292]	; (80009a8 <Control_Init+0x328>)
 8000882:	f04f 0200 	mov.w	r2, #0
 8000886:	f04f 0300 	mov.w	r3, #0
 800088a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	WheelD.goal = 0.0;
 800088e:	4949      	ldr	r1, [pc, #292]	; (80009b4 <Control_Init+0x334>)
 8000890:	f04f 0200 	mov.w	r2, #0
 8000894:	f04f 0300 	mov.w	r3, #0
 8000898:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	// stop chassis
	HAL_GPIO_WritePin(WheelA.DIR_pin_type, WheelA.DIR_pin_Num, GPIO_PIN_RESET);
 800089c:	4b3b      	ldr	r3, [pc, #236]	; (800098c <Control_Init+0x30c>)
 800089e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a0:	4a3a      	ldr	r2, [pc, #232]	; (800098c <Control_Init+0x30c>)
 80008a2:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 80008a6:	2200      	movs	r2, #0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f007 febd 	bl	8008628 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelA.pwm_timer), WheelA.pwm_timer_channel, 0);
 80008ae:	4b37      	ldr	r3, [pc, #220]	; (800098c <Control_Init+0x30c>)
 80008b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d105      	bne.n	80008c4 <Control_Init+0x244>
 80008b8:	4b34      	ldr	r3, [pc, #208]	; (800098c <Control_Init+0x30c>)
 80008ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80008be:	2200      	movs	r2, #0
 80008c0:	635a      	str	r2, [r3, #52]	; 0x34
 80008c2:	e030      	b.n	8000926 <Control_Init+0x2a6>
 80008c4:	4b31      	ldr	r3, [pc, #196]	; (800098c <Control_Init+0x30c>)
 80008c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	d105      	bne.n	80008da <Control_Init+0x25a>
 80008ce:	4b2f      	ldr	r3, [pc, #188]	; (800098c <Control_Init+0x30c>)
 80008d0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80008d4:	2300      	movs	r3, #0
 80008d6:	6393      	str	r3, [r2, #56]	; 0x38
 80008d8:	e025      	b.n	8000926 <Control_Init+0x2a6>
 80008da:	4b2c      	ldr	r3, [pc, #176]	; (800098c <Control_Init+0x30c>)
 80008dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008e0:	2b08      	cmp	r3, #8
 80008e2:	d105      	bne.n	80008f0 <Control_Init+0x270>
 80008e4:	4b29      	ldr	r3, [pc, #164]	; (800098c <Control_Init+0x30c>)
 80008e6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80008ea:	2300      	movs	r3, #0
 80008ec:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008ee:	e01a      	b.n	8000926 <Control_Init+0x2a6>
 80008f0:	4b26      	ldr	r3, [pc, #152]	; (800098c <Control_Init+0x30c>)
 80008f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008f6:	2b0c      	cmp	r3, #12
 80008f8:	d105      	bne.n	8000906 <Control_Init+0x286>
 80008fa:	4b24      	ldr	r3, [pc, #144]	; (800098c <Control_Init+0x30c>)
 80008fc:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000900:	2300      	movs	r3, #0
 8000902:	6413      	str	r3, [r2, #64]	; 0x40
 8000904:	e00f      	b.n	8000926 <Control_Init+0x2a6>
 8000906:	4b21      	ldr	r3, [pc, #132]	; (800098c <Control_Init+0x30c>)
 8000908:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800090c:	2b10      	cmp	r3, #16
 800090e:	d105      	bne.n	800091c <Control_Init+0x29c>
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <Control_Init+0x30c>)
 8000912:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000916:	2300      	movs	r3, #0
 8000918:	6593      	str	r3, [r2, #88]	; 0x58
 800091a:	e004      	b.n	8000926 <Control_Init+0x2a6>
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <Control_Init+0x30c>)
 800091e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000922:	2300      	movs	r3, #0
 8000924:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_GPIO_WritePin(WheelB.DIR_pin_type, WheelB.DIR_pin_Num, GPIO_PIN_RESET);
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <Control_Init+0x318>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092a:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <Control_Init+0x318>)
 800092c:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8000930:	2200      	movs	r2, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f007 fe78 	bl	8008628 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelB.pwm_timer), WheelB.pwm_timer_channel, 0);
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <Control_Init+0x318>)
 800093a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800093e:	2b00      	cmp	r3, #0
 8000940:	d144      	bne.n	80009cc <Control_Init+0x34c>
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <Control_Init+0x318>)
 8000944:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000948:	2200      	movs	r2, #0
 800094a:	635a      	str	r2, [r3, #52]	; 0x34
 800094c:	e06f      	b.n	8000a2e <Control_Init+0x3ae>
 800094e:	bf00      	nop
	...
 8000958:	c24a5f41 	.word	0xc24a5f41
 800095c:	4022505d 	.word	0x4022505d
 8000960:	e485b74b 	.word	0xe485b74b
 8000964:	3fcb93ed 	.word	0x3fcb93ed
 8000968:	ebf65dc0 	.word	0xebf65dc0
 800096c:	4023cf4e 	.word	0x4023cf4e
 8000970:	11ba3ca7 	.word	0x11ba3ca7
 8000974:	3fdc1516 	.word	0x3fdc1516
 8000978:	33333333 	.word	0x33333333
 800097c:	3fe33333 	.word	0x3fe33333
 8000980:	24003624 	.word	0x24003624
 8000984:	24003754 	.word	0x24003754
 8000988:	58020c00 	.word	0x58020c00
 800098c:	240000f0 	.word	0x240000f0
 8000990:	24003708 	.word	0x24003708
 8000994:	58020400 	.word	0x58020400
 8000998:	24000200 	.word	0x24000200
 800099c:	24003670 	.word	0x24003670
 80009a0:	240037a0 	.word	0x240037a0
 80009a4:	58021000 	.word	0x58021000
 80009a8:	24000310 	.word	0x24000310
 80009ac:	240036bc 	.word	0x240036bc
 80009b0:	58020800 	.word	0x58020800
 80009b4:	24000420 	.word	0x24000420
 80009b8:	24000530 	.word	0x24000530
 80009bc:	240000d8 	.word	0x240000d8
 80009c0:	240000e0 	.word	0x240000e0
 80009c4:	240037ec 	.word	0x240037ec
 80009c8:	240000e8 	.word	0x240000e8
 80009cc:	4b5f      	ldr	r3, [pc, #380]	; (8000b4c <Control_Init+0x4cc>)
 80009ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	d105      	bne.n	80009e2 <Control_Init+0x362>
 80009d6:	4b5d      	ldr	r3, [pc, #372]	; (8000b4c <Control_Init+0x4cc>)
 80009d8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80009dc:	2300      	movs	r3, #0
 80009de:	6393      	str	r3, [r2, #56]	; 0x38
 80009e0:	e025      	b.n	8000a2e <Control_Init+0x3ae>
 80009e2:	4b5a      	ldr	r3, [pc, #360]	; (8000b4c <Control_Init+0x4cc>)
 80009e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009e8:	2b08      	cmp	r3, #8
 80009ea:	d105      	bne.n	80009f8 <Control_Init+0x378>
 80009ec:	4b57      	ldr	r3, [pc, #348]	; (8000b4c <Control_Init+0x4cc>)
 80009ee:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80009f2:	2300      	movs	r3, #0
 80009f4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80009f6:	e01a      	b.n	8000a2e <Control_Init+0x3ae>
 80009f8:	4b54      	ldr	r3, [pc, #336]	; (8000b4c <Control_Init+0x4cc>)
 80009fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009fe:	2b0c      	cmp	r3, #12
 8000a00:	d105      	bne.n	8000a0e <Control_Init+0x38e>
 8000a02:	4b52      	ldr	r3, [pc, #328]	; (8000b4c <Control_Init+0x4cc>)
 8000a04:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a08:	2300      	movs	r3, #0
 8000a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0c:	e00f      	b.n	8000a2e <Control_Init+0x3ae>
 8000a0e:	4b4f      	ldr	r3, [pc, #316]	; (8000b4c <Control_Init+0x4cc>)
 8000a10:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a14:	2b10      	cmp	r3, #16
 8000a16:	d105      	bne.n	8000a24 <Control_Init+0x3a4>
 8000a18:	4b4c      	ldr	r3, [pc, #304]	; (8000b4c <Control_Init+0x4cc>)
 8000a1a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a1e:	2300      	movs	r3, #0
 8000a20:	6593      	str	r3, [r2, #88]	; 0x58
 8000a22:	e004      	b.n	8000a2e <Control_Init+0x3ae>
 8000a24:	4b49      	ldr	r3, [pc, #292]	; (8000b4c <Control_Init+0x4cc>)
 8000a26:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_GPIO_WritePin(WheelC.DIR_pin_type, WheelC.DIR_pin_Num, GPIO_PIN_RESET);
 8000a2e:	4b48      	ldr	r3, [pc, #288]	; (8000b50 <Control_Init+0x4d0>)
 8000a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a32:	4a47      	ldr	r2, [pc, #284]	; (8000b50 <Control_Init+0x4d0>)
 8000a34:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f007 fdf4 	bl	8008628 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelC.pwm_timer), WheelC.pwm_timer_channel, 0);
 8000a40:	4b43      	ldr	r3, [pc, #268]	; (8000b50 <Control_Init+0x4d0>)
 8000a42:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d105      	bne.n	8000a56 <Control_Init+0x3d6>
 8000a4a:	4b41      	ldr	r3, [pc, #260]	; (8000b50 <Control_Init+0x4d0>)
 8000a4c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000a50:	2200      	movs	r2, #0
 8000a52:	635a      	str	r2, [r3, #52]	; 0x34
 8000a54:	e030      	b.n	8000ab8 <Control_Init+0x438>
 8000a56:	4b3e      	ldr	r3, [pc, #248]	; (8000b50 <Control_Init+0x4d0>)
 8000a58:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a5c:	2b04      	cmp	r3, #4
 8000a5e:	d105      	bne.n	8000a6c <Control_Init+0x3ec>
 8000a60:	4b3b      	ldr	r3, [pc, #236]	; (8000b50 <Control_Init+0x4d0>)
 8000a62:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a66:	2300      	movs	r3, #0
 8000a68:	6393      	str	r3, [r2, #56]	; 0x38
 8000a6a:	e025      	b.n	8000ab8 <Control_Init+0x438>
 8000a6c:	4b38      	ldr	r3, [pc, #224]	; (8000b50 <Control_Init+0x4d0>)
 8000a6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a72:	2b08      	cmp	r3, #8
 8000a74:	d105      	bne.n	8000a82 <Control_Init+0x402>
 8000a76:	4b36      	ldr	r3, [pc, #216]	; (8000b50 <Control_Init+0x4d0>)
 8000a78:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000a80:	e01a      	b.n	8000ab8 <Control_Init+0x438>
 8000a82:	4b33      	ldr	r3, [pc, #204]	; (8000b50 <Control_Init+0x4d0>)
 8000a84:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a88:	2b0c      	cmp	r3, #12
 8000a8a:	d105      	bne.n	8000a98 <Control_Init+0x418>
 8000a8c:	4b30      	ldr	r3, [pc, #192]	; (8000b50 <Control_Init+0x4d0>)
 8000a8e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a92:	2300      	movs	r3, #0
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	e00f      	b.n	8000ab8 <Control_Init+0x438>
 8000a98:	4b2d      	ldr	r3, [pc, #180]	; (8000b50 <Control_Init+0x4d0>)
 8000a9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a9e:	2b10      	cmp	r3, #16
 8000aa0:	d105      	bne.n	8000aae <Control_Init+0x42e>
 8000aa2:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <Control_Init+0x4d0>)
 8000aa4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8000aac:	e004      	b.n	8000ab8 <Control_Init+0x438>
 8000aae:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <Control_Init+0x4d0>)
 8000ab0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_GPIO_WritePin(WheelD.DIR_pin_type, WheelD.DIR_pin_Num, GPIO_PIN_RESET);
 8000ab8:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <Control_Init+0x4d4>)
 8000aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000abc:	4a25      	ldr	r2, [pc, #148]	; (8000b54 <Control_Init+0x4d4>)
 8000abe:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f007 fdaf 	bl	8008628 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000aca:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <Control_Init+0x4d4>)
 8000acc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d105      	bne.n	8000ae0 <Control_Init+0x460>
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <Control_Init+0x4d4>)
 8000ad6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000ada:	2200      	movs	r2, #0
 8000adc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ade:	e030      	b.n	8000b42 <Control_Init+0x4c2>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <Control_Init+0x4d4>)
 8000ae2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	d105      	bne.n	8000af6 <Control_Init+0x476>
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <Control_Init+0x4d4>)
 8000aec:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000af0:	2300      	movs	r3, #0
 8000af2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000af4:	e025      	b.n	8000b42 <Control_Init+0x4c2>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <Control_Init+0x4d4>)
 8000af8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000afc:	2b08      	cmp	r3, #8
 8000afe:	d105      	bne.n	8000b0c <Control_Init+0x48c>
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <Control_Init+0x4d4>)
 8000b02:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b06:	2300      	movs	r3, #0
 8000b08:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000b0a:	e01a      	b.n	8000b42 <Control_Init+0x4c2>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <Control_Init+0x4d4>)
 8000b0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000b12:	2b0c      	cmp	r3, #12
 8000b14:	d105      	bne.n	8000b22 <Control_Init+0x4a2>
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <Control_Init+0x4d4>)
 8000b18:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b20:	e00f      	b.n	8000b42 <Control_Init+0x4c2>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <Control_Init+0x4d4>)
 8000b24:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000b28:	2b10      	cmp	r3, #16
 8000b2a:	d105      	bne.n	8000b38 <Control_Init+0x4b8>
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <Control_Init+0x4d4>)
 8000b2e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b32:	2300      	movs	r3, #0
 8000b34:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000b36:	e004      	b.n	8000b42 <Control_Init+0x4c2>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <Control_Init+0x4d4>)
 8000b3a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b3e:	2300      	movs	r3, #0
 8000b40:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd90      	pop	{r4, r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	24000200 	.word	0x24000200
 8000b50:	24000310 	.word	0x24000310
 8000b54:	24000420 	.word	0x24000420

08000b58 <Pid_Param_Init>:
/**
 * @ brief assign the pid gain value into the PID_Controll object
 * @ retval None
 * */
void Pid_Param_Init(PID_Control *Wheel_, double kp, double ki, double kd)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	61f8      	str	r0, [r7, #28]
 8000b60:	ed87 0b04 	vstr	d0, [r7, #16]
 8000b64:	ed87 1b02 	vstr	d1, [r7, #8]
 8000b68:	ed87 2b00 	vstr	d2, [r7]
	Wheel_->Kp = kp;
 8000b6c:	69f9      	ldr	r1, [r7, #28]
 8000b6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b72:	e9c1 2300 	strd	r2, r3, [r1]
	Wheel_->Ki = ki;
 8000b76:	69f9      	ldr	r1, [r7, #28]
 8000b78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b7c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Wheel_->Kd = kd;
 8000b80:	69f9      	ldr	r1, [r7, #28]
 8000b82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b86:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8000b8a:	bf00      	nop
 8000b8c:	3724      	adds	r7, #36	; 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <Motor_Driver_Init>:
#ifdef G2_18V17
void Motor_Driver_Init(PID_Control *Wheel_,
		GPIO_TypeDef *DIR_pin_type, uint16_t DIR_pin_num_,
		TIM_HandleTypeDef encoder_timer_, uint32_t encoder_timer_channel_, int encoder_dir_,
		TIM_HandleTypeDef pwm_timer_, uint32_t pwm_timer_channel_)
{
 8000b96:	b082      	sub	sp, #8
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	61fb      	str	r3, [r7, #28]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	80fb      	strh	r3, [r7, #6]
	Wheel_->DIR_pin_type = DIR_pin_type;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	661a      	str	r2, [r3, #96]	; 0x60
	Wheel_->DIR_pin_Num = DIR_pin_num_;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	88fa      	ldrh	r2, [r7, #6]
 8000bb2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	Wheel_->encoder_timer = encoder_timer_;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	3368      	adds	r3, #104	; 0x68
 8000bba:	f107 011c 	add.w	r1, r7, #28
 8000bbe:	224c      	movs	r2, #76	; 0x4c
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f00e f8c3 	bl	800ed4c <memcpy>
	Wheel_->encoder_timer_channel = encoder_timer_channel_;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000bca:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	Wheel_->encoder_dir = encoder_dir_;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000bd2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	Wheel_->pwm_timer = pwm_timer_;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	33bc      	adds	r3, #188	; 0xbc
 8000bda:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000bde:	224c      	movs	r2, #76	; 0x4c
 8000be0:	4618      	mov	r0, r3
 8000be2:	f00e f8b3 	bl	800ed4c <memcpy>
	Wheel_->pwm_timer_channel = pwm_timer_channel_;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000bec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfa:	b002      	add	sp, #8
 8000bfc:	4770      	bx	lr
	...

08000c00 <Control_Timer_Init>:
 * @ brief initialize the timers that encoder and pwm used
 * @ all the definition in the function are in "control.h"
 * @ retval None
 * */
void Control_Timer_Init()
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&M1_Encoder_timer, M1_Encoder_timerchannel);
 8000c04:	2104      	movs	r1, #4
 8000c06:	4810      	ldr	r0, [pc, #64]	; (8000c48 <Control_Timer_Init+0x48>)
 8000c08:	f00a fd82 	bl	800b710 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M1_PWM_timer, M1_PWM_timerchannel);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	480f      	ldr	r0, [pc, #60]	; (8000c4c <Control_Timer_Init+0x4c>)
 8000c10:	f00a fbbc 	bl	800b38c <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M2_Encoder_timer, M2_Encoder_timerchannel);
 8000c14:	2104      	movs	r1, #4
 8000c16:	480e      	ldr	r0, [pc, #56]	; (8000c50 <Control_Timer_Init+0x50>)
 8000c18:	f00a fd7a 	bl	800b710 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M2_PWM_timer, M2_PWM_timerchannel);
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	480b      	ldr	r0, [pc, #44]	; (8000c4c <Control_Timer_Init+0x4c>)
 8000c20:	f00a fbb4 	bl	800b38c <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M3_Encoder_timer, M3_Encoder_timerchannel);
 8000c24:	2104      	movs	r1, #4
 8000c26:	480b      	ldr	r0, [pc, #44]	; (8000c54 <Control_Timer_Init+0x54>)
 8000c28:	f00a fd72 	bl	800b710 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M3_PWM_timer, M3_PWM_timerchannel);
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	480a      	ldr	r0, [pc, #40]	; (8000c58 <Control_Timer_Init+0x58>)
 8000c30:	f00a fbac 	bl	800b38c <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M4_Encoder_timer, M4_Encoder_timerchannel);
 8000c34:	2104      	movs	r1, #4
 8000c36:	4809      	ldr	r0, [pc, #36]	; (8000c5c <Control_Timer_Init+0x5c>)
 8000c38:	f00a fd6a 	bl	800b710 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M4_PWM_timer, M4_PWM_timerchannel);
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <Control_Timer_Init+0x58>)
 8000c40:	f00a fba4 	bl	800b38c <HAL_TIM_PWM_Start>
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	24003624 	.word	0x24003624
 8000c4c:	24003754 	.word	0x24003754
 8000c50:	24003708 	.word	0x24003708
 8000c54:	24003670 	.word	0x24003670
 8000c58:	240037a0 	.word	0x240037a0
 8000c5c:	240036bc 	.word	0x240036bc

08000c60 <Hardware_Info_Init>:
/**
 * @ brief assign the hardware value for motor and chassis radius error
 * @ retval None
 * */
void Hardware_Info_Init()
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
	radius_error_a = 1.0;
 8000c64:	4911      	ldr	r1, [pc, #68]	; (8000cac <Hardware_Info_Init+0x4c>)
 8000c66:	f04f 0200 	mov.w	r2, #0
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <Hardware_Info_Init+0x50>)
 8000c6c:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_b = 1.0;
 8000c70:	4910      	ldr	r1, [pc, #64]	; (8000cb4 <Hardware_Info_Init+0x54>)
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <Hardware_Info_Init+0x50>)
 8000c78:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_c = 1.0;
 8000c7c:	490e      	ldr	r1, [pc, #56]	; (8000cb8 <Hardware_Info_Init+0x58>)
 8000c7e:	f04f 0200 	mov.w	r2, #0
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <Hardware_Info_Init+0x50>)
 8000c84:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_d = 1.0;
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <Hardware_Info_Init+0x5c>)
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <Hardware_Info_Init+0x50>)
 8000c90:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_chassis = 1.0;
 8000c94:	490a      	ldr	r1, [pc, #40]	; (8000cc0 <Hardware_Info_Init+0x60>)
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <Hardware_Info_Init+0x50>)
 8000c9c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	24000098 	.word	0x24000098
 8000cb0:	3ff00000 	.word	0x3ff00000
 8000cb4:	240000a0 	.word	0x240000a0
 8000cb8:	240000a8 	.word	0x240000a8
 8000cbc:	240000b0 	.word	0x240000b0
 8000cc0:	240000b8 	.word	0x240000b8
 8000cc4:	00000000 	.word	0x00000000

08000cc8 <PID_Controller>:
 * @ brief PID control for the motor
 * @ param Wheel_ the object declare for each motor (WheelA, WheelB, WheelC)
 * @ retval None
 * */
void PID_Controller(PID_Control *Wheel_)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	Wheel_->CountNum = __HAL_TIM_GetCounter(&Wheel_->encoder_timer)* Wheel_->encoder_dir;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	fb12 f303 	smulbb	r3, r2, r3
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	b21a      	sxth	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	831a      	strh	r2, [r3, #24]
	Wheel_->rps = (double)Wheel_->CountNum / ((double)4 * encoder_resolution * speed_reduction_ratio * control_period);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000cf2:	ee07 3a90 	vmov	s15, r3
 8000cf6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000cfa:	4bb1      	ldr	r3, [pc, #708]	; (8000fc0 <PID_Controller+0x2f8>)
 8000cfc:	ed93 7b00 	vldr	d7, [r3]
 8000d00:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8000fb8 <PID_Controller+0x2f0>
 8000d04:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d08:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	ed83 7b08 	vstr	d7, [r3, #32]
	__HAL_TIM_SetCounter(&Wheel_->encoder_timer ,0);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24

	if (i<600)
 8000d1a:	4baa      	ldr	r3, [pc, #680]	; (8000fc4 <PID_Controller+0x2fc>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000d22:	da0e      	bge.n	8000d42 <PID_Controller+0x7a>
	{
		sssss[i] = Wheel_->rps;
 8000d24:	4ba7      	ldr	r3, [pc, #668]	; (8000fc4 <PID_Controller+0x2fc>)
 8000d26:	6819      	ldr	r1, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000d2e:	48a6      	ldr	r0, [pc, #664]	; (8000fc8 <PID_Controller+0x300>)
 8000d30:	00c9      	lsls	r1, r1, #3
 8000d32:	4401      	add	r1, r0
 8000d34:	e9c1 2300 	strd	r2, r3, [r1]
		i++;
 8000d38:	4ba2      	ldr	r3, [pc, #648]	; (8000fc4 <PID_Controller+0x2fc>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	4aa1      	ldr	r2, [pc, #644]	; (8000fc4 <PID_Controller+0x2fc>)
 8000d40:	6013      	str	r3, [r2, #0]
	}

	Wheel_->err = Wheel_->goal - Wheel_->rps;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	ed93 7b08 	vldr	d7, [r3, #32]
 8000d4e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	Wheel_->propotional = (double)Wheel_->err * Wheel_->Kp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	ed93 7b00 	vldr	d7, [r3]
 8000d64:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	Wheel_->integral += (double)Wheel_->err * Wheel_->Ki * control_period;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	ed93 7b02 	vldr	d7, [r3, #8]
 8000d80:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000d84:	4b8e      	ldr	r3, [pc, #568]	; (8000fc0 <PID_Controller+0x2f8>)
 8000d86:	ed93 7b00 	vldr	d7, [r3]
 8000d8a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d8e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	Wheel_->integral = (Wheel_->integral > limit_integral)? limit_integral : Wheel_->integral;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000d9e:	4b8b      	ldr	r3, [pc, #556]	; (8000fcc <PID_Controller+0x304>)
 8000da0:	ed93 7b00 	vldr	d7, [r3]
 8000da4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dac:	dd03      	ble.n	8000db6 <PID_Controller+0xee>
 8000dae:	4b87      	ldr	r3, [pc, #540]	; (8000fcc <PID_Controller+0x304>)
 8000db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db4:	e002      	b.n	8000dbc <PID_Controller+0xf4>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	Wheel_->integral = (Wheel_->integral < (double)(-1) * limit_integral)? (double)(-1) * limit_integral : Wheel_->integral;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000dc8:	4b80      	ldr	r3, [pc, #512]	; (8000fcc <PID_Controller+0x304>)
 8000dca:	ed93 7b00 	vldr	d7, [r3]
 8000dce:	eeb1 7b47 	vneg.f64	d7, d7
 8000dd2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dda:	d505      	bpl.n	8000de8 <PID_Controller+0x120>
 8000ddc:	4b7b      	ldr	r3, [pc, #492]	; (8000fcc <PID_Controller+0x304>)
 8000dde:	ed93 7b00 	vldr	d7, [r3]
 8000de2:	eeb1 7b47 	vneg.f64	d7, d7
 8000de6:	e002      	b.n	8000dee <PID_Controller+0x126>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	Wheel_->differential = (double) Wheel_->Kd * (-1) * (Wheel_->rps - Wheel_->rps_before) / control_period;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	ed93 7b04 	vldr	d7, [r3, #16]
 8000dfa:	eeb1 6b47 	vneg.f64	d6, d7
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	ed93 5b08 	vldr	d5, [r3, #32]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8000e0a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000e0e:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000e12:	4b6b      	ldr	r3, [pc, #428]	; (8000fc0 <PID_Controller+0x2f8>)
 8000e14:	ed93 6b00 	vldr	d6, [r3]
 8000e18:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50


	Wheel_->duty = Wheel_->propotional + Wheel_->integral + Wheel_->differential;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000e2e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8000e38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	Wheel_->duty = (Wheel_->duty > 1)? 1 : Wheel_->duty;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000e48:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e4c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e54:	dd03      	ble.n	8000e5e <PID_Controller+0x196>
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	4b5d      	ldr	r3, [pc, #372]	; (8000fd0 <PID_Controller+0x308>)
 8000e5c:	e002      	b.n	8000e64 <PID_Controller+0x19c>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	Wheel_->duty = (Wheel_->duty < -1)? -1 : Wheel_->duty;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000e70:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000e74:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7c:	d503      	bpl.n	8000e86 <PID_Controller+0x1be>
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	4b54      	ldr	r3, [pc, #336]	; (8000fd4 <PID_Controller+0x30c>)
 8000e84:	e002      	b.n	8000e8c <PID_Controller+0x1c4>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	Wheel_->duty = 1.0;
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	4b4d      	ldr	r3, [pc, #308]	; (8000fd0 <PID_Controller+0x308>)
 8000e9a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		HAL_GPIO_WritePin(Wheel_->PHASE_pin_type, Wheel_->PHASE_pin_Num, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
	}
#endif
#ifdef G2_18V17
	if(Wheel_->duty >= 0)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000ea4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eac:	f2c0 80a9 	blt.w	8001002 <PID_Controller+0x33a>
	{
		HAL_GPIO_WritePin(Wheel_->DIR_pin_type, Wheel_->DIR_pin_Num, GPIO_PIN_RESET);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000eba:	2200      	movs	r2, #0
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f007 fbb3 	bl	8008628 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d112      	bne.n	8000ef2 <PID_Controller+0x22a>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000ed2:	4b41      	ldr	r3, [pc, #260]	; (8000fd8 <PID_Controller+0x310>)
 8000ed4:	ed93 7b00 	vldr	d7, [r3]
 8000ed8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000edc:	eeb0 7bc7 	vabs.f64	d7, d7
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000ee6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000eea:	ee17 2a90 	vmov	r2, s15
 8000eee:	635a      	str	r2, [r3, #52]	; 0x34
 8000ef0:	e11a      	b.n	8001128 <PID_Controller+0x460>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d112      	bne.n	8000f22 <PID_Controller+0x25a>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f02:	4b35      	ldr	r3, [pc, #212]	; (8000fd8 <PID_Controller+0x310>)
 8000f04:	ed93 7b00 	vldr	d7, [r3]
 8000f08:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f0c:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000f16:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f1a:	ee17 3a90 	vmov	r3, s15
 8000f1e:	6393      	str	r3, [r2, #56]	; 0x38
 8000f20:	e102      	b.n	8001128 <PID_Controller+0x460>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d112      	bne.n	8000f52 <PID_Controller+0x28a>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f32:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <PID_Controller+0x310>)
 8000f34:	ed93 7b00 	vldr	d7, [r3]
 8000f38:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f3c:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000f46:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f4a:	ee17 3a90 	vmov	r3, s15
 8000f4e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000f50:	e0ea      	b.n	8001128 <PID_Controller+0x460>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f58:	2b0c      	cmp	r3, #12
 8000f5a:	d112      	bne.n	8000f82 <PID_Controller+0x2ba>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <PID_Controller+0x310>)
 8000f64:	ed93 7b00 	vldr	d7, [r3]
 8000f68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f6c:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000f76:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f7a:	ee17 3a90 	vmov	r3, s15
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	e0d2      	b.n	8001128 <PID_Controller+0x460>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f88:	2b10      	cmp	r3, #16
 8000f8a:	d127      	bne.n	8000fdc <PID_Controller+0x314>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <PID_Controller+0x310>)
 8000f94:	ed93 7b00 	vldr	d7, [r3]
 8000f98:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f9c:	eeb0 7bc7 	vabs.f64	d7, d7
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000fa6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000faa:	ee17 3a90 	vmov	r3, s15
 8000fae:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb0:	e0ba      	b.n	8001128 <PID_Controller+0x460>
 8000fb2:	bf00      	nop
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	40d80000 	.word	0x40d80000
 8000fc0:	240000e8 	.word	0x240000e8
 8000fc4:	24000530 	.word	0x24000530
 8000fc8:	24000538 	.word	0x24000538
 8000fcc:	240000d8 	.word	0x240000d8
 8000fd0:	3ff00000 	.word	0x3ff00000
 8000fd4:	bff00000 	.word	0xbff00000
 8000fd8:	240000e0 	.word	0x240000e0
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000fe2:	4b56      	ldr	r3, [pc, #344]	; (800113c <PID_Controller+0x474>)
 8000fe4:	ed93 7b00 	vldr	d7, [r3]
 8000fe8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000fec:	eeb0 7bc7 	vabs.f64	d7, d7
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000ff6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ffa:	ee17 3a90 	vmov	r3, s15
 8000ffe:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001000:	e092      	b.n	8001128 <PID_Controller+0x460>
	}
	else
	{
		HAL_GPIO_WritePin(Wheel_->DIR_pin_type, Wheel_->DIR_pin_Num, GPIO_PIN_SET);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800100c:	2201      	movs	r2, #1
 800100e:	4619      	mov	r1, r3
 8001010:	f007 fb0a 	bl	8008628 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800101a:	2b00      	cmp	r3, #0
 800101c:	d112      	bne.n	8001044 <PID_Controller+0x37c>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8001024:	4b45      	ldr	r3, [pc, #276]	; (800113c <PID_Controller+0x474>)
 8001026:	ed93 7b00 	vldr	d7, [r3]
 800102a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800102e:	eeb0 7bc7 	vabs.f64	d7, d7
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001038:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800103c:	ee17 2a90 	vmov	r2, s15
 8001040:	635a      	str	r2, [r3, #52]	; 0x34
 8001042:	e071      	b.n	8001128 <PID_Controller+0x460>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800104a:	2b04      	cmp	r3, #4
 800104c:	d112      	bne.n	8001074 <PID_Controller+0x3ac>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8001054:	4b39      	ldr	r3, [pc, #228]	; (800113c <PID_Controller+0x474>)
 8001056:	ed93 7b00 	vldr	d7, [r3]
 800105a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800105e:	eeb0 7bc7 	vabs.f64	d7, d7
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001068:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800106c:	ee17 3a90 	vmov	r3, s15
 8001070:	6393      	str	r3, [r2, #56]	; 0x38
 8001072:	e059      	b.n	8001128 <PID_Controller+0x460>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800107a:	2b08      	cmp	r3, #8
 800107c:	d112      	bne.n	80010a4 <PID_Controller+0x3dc>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8001084:	4b2d      	ldr	r3, [pc, #180]	; (800113c <PID_Controller+0x474>)
 8001086:	ed93 7b00 	vldr	d7, [r3]
 800108a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800108e:	eeb0 7bc7 	vabs.f64	d7, d7
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001098:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800109c:	ee17 3a90 	vmov	r3, s15
 80010a0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80010a2:	e041      	b.n	8001128 <PID_Controller+0x460>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010aa:	2b0c      	cmp	r3, #12
 80010ac:	d112      	bne.n	80010d4 <PID_Controller+0x40c>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80010b4:	4b21      	ldr	r3, [pc, #132]	; (800113c <PID_Controller+0x474>)
 80010b6:	ed93 7b00 	vldr	d7, [r3]
 80010ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010be:	eeb0 7bc7 	vabs.f64	d7, d7
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80010c8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010cc:	ee17 3a90 	vmov	r3, s15
 80010d0:	6413      	str	r3, [r2, #64]	; 0x40
 80010d2:	e029      	b.n	8001128 <PID_Controller+0x460>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010da:	2b10      	cmp	r3, #16
 80010dc:	d112      	bne.n	8001104 <PID_Controller+0x43c>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <PID_Controller+0x474>)
 80010e6:	ed93 7b00 	vldr	d7, [r3]
 80010ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010ee:	eeb0 7bc7 	vabs.f64	d7, d7
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80010f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010fc:	ee17 3a90 	vmov	r3, s15
 8001100:	6593      	str	r3, [r2, #88]	; 0x58
 8001102:	e011      	b.n	8001128 <PID_Controller+0x460>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <PID_Controller+0x474>)
 800110c:	ed93 7b00 	vldr	d7, [r3]
 8001110:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001114:	eeb0 7bc7 	vabs.f64	d7, d7
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800111e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001122:	ee17 3a90 	vmov	r3, s15
 8001126:	65d3      	str	r3, [r2, #92]	; 0x5c
	}
#endif

	Wheel_->rps_before = Wheel_->rps;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	240000e0 	.word	0x240000e0

08001140 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_DMA_Init+0x4c>)
 8001148:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800114c:	4a0f      	ldr	r2, [pc, #60]	; (800118c <MX_DMA_Init+0x4c>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <MX_DMA_Init+0x4c>)
 8001158:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	200b      	movs	r0, #11
 800116a:	f003 ff80 	bl	800506e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800116e:	200b      	movs	r0, #11
 8001170:	f003 ff97 	bl	80050a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	200c      	movs	r0, #12
 800117a:	f003 ff78 	bl	800506e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800117e:	200c      	movs	r0, #12
 8001180:	f003 ff8f 	bl	80050a2 <HAL_NVIC_EnableIRQ>

}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	58024400 	.word	0x58024400

08001190 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08c      	sub	sp, #48	; 0x30
 8001194:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011a6:	4b58      	ldr	r3, [pc, #352]	; (8001308 <MX_GPIO_Init+0x178>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ac:	4a56      	ldr	r2, [pc, #344]	; (8001308 <MX_GPIO_Init+0x178>)
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b6:	4b54      	ldr	r3, [pc, #336]	; (8001308 <MX_GPIO_Init+0x178>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	61bb      	str	r3, [r7, #24]
 80011c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c4:	4b50      	ldr	r3, [pc, #320]	; (8001308 <MX_GPIO_Init+0x178>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ca:	4a4f      	ldr	r2, [pc, #316]	; (8001308 <MX_GPIO_Init+0x178>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d4:	4b4c      	ldr	r3, [pc, #304]	; (8001308 <MX_GPIO_Init+0x178>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e2:	4b49      	ldr	r3, [pc, #292]	; (8001308 <MX_GPIO_Init+0x178>)
 80011e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e8:	4a47      	ldr	r2, [pc, #284]	; (8001308 <MX_GPIO_Init+0x178>)
 80011ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f2:	4b45      	ldr	r3, [pc, #276]	; (8001308 <MX_GPIO_Init+0x178>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	4b41      	ldr	r3, [pc, #260]	; (8001308 <MX_GPIO_Init+0x178>)
 8001202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001206:	4a40      	ldr	r2, [pc, #256]	; (8001308 <MX_GPIO_Init+0x178>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001210:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <MX_GPIO_Init+0x178>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	4b3a      	ldr	r3, [pc, #232]	; (8001308 <MX_GPIO_Init+0x178>)
 8001220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001224:	4a38      	ldr	r2, [pc, #224]	; (8001308 <MX_GPIO_Init+0x178>)
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800122e:	4b36      	ldr	r3, [pc, #216]	; (8001308 <MX_GPIO_Init+0x178>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123c:	4b32      	ldr	r3, [pc, #200]	; (8001308 <MX_GPIO_Init+0x178>)
 800123e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001242:	4a31      	ldr	r2, [pc, #196]	; (8001308 <MX_GPIO_Init+0x178>)
 8001244:	f043 0308 	orr.w	r3, r3, #8
 8001248:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124c:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <MX_GPIO_Init+0x178>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2108      	movs	r1, #8
 800125e:	482b      	ldr	r0, [pc, #172]	; (800130c <MX_GPIO_Init+0x17c>)
 8001260:	f007 f9e2 	bl	8008628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126a:	4829      	ldr	r0, [pc, #164]	; (8001310 <MX_GPIO_Init+0x180>)
 800126c:	f007 f9dc 	bl	8008628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001276:	4827      	ldr	r0, [pc, #156]	; (8001314 <MX_GPIO_Init+0x184>)
 8001278:	f007 f9d6 	bl	8008628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001282:	4825      	ldr	r0, [pc, #148]	; (8001318 <MX_GPIO_Init+0x188>)
 8001284:	f007 f9d0 	bl	8008628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001288:	2308      	movs	r3, #8
 800128a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	481b      	ldr	r0, [pc, #108]	; (800130c <MX_GPIO_Init+0x17c>)
 80012a0:	f006 ff18 	bl	80080d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	4619      	mov	r1, r3
 80012bc:	4814      	ldr	r0, [pc, #80]	; (8001310 <MX_GPIO_Init+0x180>)
 80012be:	f006 ff09 	bl	80080d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	4619      	mov	r1, r3
 80012da:	480e      	ldr	r0, [pc, #56]	; (8001314 <MX_GPIO_Init+0x184>)
 80012dc:	f006 fefa 	bl	80080d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	4807      	ldr	r0, [pc, #28]	; (8001318 <MX_GPIO_Init+0x188>)
 80012fa:	f006 feeb 	bl	80080d4 <HAL_GPIO_Init>

}
 80012fe:	bf00      	nop
 8001300:	3730      	adds	r7, #48	; 0x30
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	58024400 	.word	0x58024400
 800130c:	58021000 	.word	0x58021000
 8001310:	58020800 	.word	0x58020800
 8001314:	58020400 	.word	0x58020400
 8001318:	58020c00 	.word	0x58020c00

0800131c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001320:	f003 fd14 	bl	8004d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001324:	f000 f81e 	bl	8001364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001328:	f7ff ff32 	bl	8001190 <MX_GPIO_Init>
  MX_DMA_Init();
 800132c:	f7ff ff08 	bl	8001140 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001330:	f003 fb90 	bl	8004a54 <MX_USART1_UART_Init>
  MX_TIM12_Init();
 8001334:	f003 f854 	bl	80043e0 <MX_TIM12_Init>
  MX_TIM15_Init();
 8001338:	f003 f8b8 	bl	80044ac <MX_TIM15_Init>
  MX_TIM2_Init();
 800133c:	f002 fefa 	bl	8004134 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001340:	f002 ff4c 	bl	80041dc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001344:	f002 ffa0 	bl	8004288 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001348:	f002 fff4 	bl	8004334 <MX_TIM5_Init>
  MX_TIM23_Init();
 800134c:	f003 f940 	bl	80045d0 <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */

//	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
  HAL_TIM_Base_Start_IT(&Encoder_Interrupt_timer);
 8001350:	4803      	ldr	r0, [pc, #12]	; (8001360 <main+0x44>)
 8001352:	f009 ff3d 	bl	800b1d0 <HAL_TIM_Base_Start_IT>
  Control_Init();
 8001356:	f7ff f993 	bl	8000680 <Control_Init>
  Rosserial_Init();
 800135a:	f001 feb3 	bl	80030c4 <Rosserial_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800135e:	e7fe      	b.n	800135e <main+0x42>
 8001360:	240037ec 	.word	0x240037ec

08001364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b09c      	sub	sp, #112	; 0x70
 8001368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136e:	224c      	movs	r2, #76	; 0x4c
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f00d fcf8 	bl	800ed68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2220      	movs	r2, #32
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f00d fcf2 	bl	800ed68 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001384:	2002      	movs	r0, #2
 8001386:	f007 f969 	bl	800865c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800138a:	2300      	movs	r3, #0
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	4b2b      	ldr	r3, [pc, #172]	; (800143c <SystemClock_Config+0xd8>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	4a2a      	ldr	r2, [pc, #168]	; (800143c <SystemClock_Config+0xd8>)
 8001394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001398:	6193      	str	r3, [r2, #24]
 800139a:	4b28      	ldr	r3, [pc, #160]	; (800143c <SystemClock_Config+0xd8>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013a6:	bf00      	nop
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <SystemClock_Config+0xd8>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013b4:	d1f8      	bne.n	80013a8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b6:	2301      	movs	r3, #1
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c0:	2302      	movs	r3, #2
 80013c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c4:	2302      	movs	r3, #2
 80013c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013c8:	2304      	movs	r3, #4
 80013ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013cc:	23a8      	movs	r3, #168	; 0xa8
 80013ce:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013d4:	2304      	movs	r3, #4
 80013d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013d8:	2302      	movs	r3, #2
 80013da:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80013dc:	2304      	movs	r3, #4
 80013de:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ec:	4618      	mov	r0, r3
 80013ee:	f007 f96f 	bl	80086d0 <HAL_RCC_OscConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013f8:	f000 f868 	bl	80014cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fc:	233f      	movs	r3, #63	; 0x3f
 80013fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001400:	2303      	movs	r3, #3
 8001402:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001408:	2308      	movs	r3, #8
 800140a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800140c:	2340      	movs	r3, #64	; 0x40
 800140e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001410:	2340      	movs	r3, #64	; 0x40
 8001412:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001418:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800141a:	2340      	movs	r3, #64	; 0x40
 800141c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2102      	movs	r1, #2
 8001422:	4618      	mov	r0, r3
 8001424:	f007 fd2e 	bl	8008e84 <HAL_RCC_ClockConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800142e:	f000 f84d 	bl	80014cc <Error_Handler>
  }
}
 8001432:	bf00      	nop
 8001434:	3770      	adds	r7, #112	; 0x70
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	58024800 	.word	0x58024800

08001440 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	if(htim->Instance == Encoder_Interrupt_timer.Instance)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d102      	bne.n	800145a <HAL_TIM_PeriodElapsedCallback+0x1a>
//			linearvelocity_x = 0.0;
//			linearvelocity_y = 0.0;
//			angularvelocity = 0.0;
//		}
//		Forward_Kinematics(linearvelocity_x, linearvelocity_y, angularvelocity);
		PID_Controller(&WheelA);
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001456:	f7ff fc37 	bl	8000cc8 <PID_Controller>
//		PID_Controller(&WheelB);
//		PID_Controller(&WheelC);
//		PID_Controller(&WheelD);
	}
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	240037ec 	.word	0x240037ec
 8001468:	240000f0 	.word	0x240000f0

0800146c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a11      	ldr	r2, [pc, #68]	; (80014bc <HAL_UART_ErrorCallback+0x50>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d11b      	bne.n	80014b4 <HAL_UART_ErrorCallback+0x48>
	{
		linearvelocity_x = 0;
 800147c:	4910      	ldr	r1, [pc, #64]	; (80014c0 <HAL_UART_ErrorCallback+0x54>)
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	e9c1 2300 	strd	r2, r3, [r1]
		linearvelocity_y = 0;
 800148a:	490e      	ldr	r1, [pc, #56]	; (80014c4 <HAL_UART_ErrorCallback+0x58>)
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9c1 2300 	strd	r2, r3, [r1]
		angularvelocity = 0;
 8001498:	490b      	ldr	r1, [pc, #44]	; (80014c8 <HAL_UART_ErrorCallback+0x5c>)
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_UART_DeInit(&huart1);
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <HAL_UART_ErrorCallback+0x50>)
 80014a8:	f00b fafe 	bl	800caa8 <HAL_UART_DeInit>
		MX_USART1_UART_Init();
 80014ac:	f003 fad2 	bl	8004a54 <MX_USART1_UART_Init>
		Rosserial_GetHardware();
 80014b0:	f001 fe18 	bl	80030e4 <Rosserial_GetHardware>
	}
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	24003838 	.word	0x24003838
 80014c0:	240000c0 	.word	0x240000c0
 80014c4:	240000c8 	.word	0x240000c8
 80014c8:	240000d0 	.word	0x240000d0

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <Error_Handler+0x8>

080014d6 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <_ZN3ros3MsgC1Ev+0x1c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	0800f330 	.word	0x0800f330

08001518 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
      data()
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ffe8 	bl	80014f8 <_ZN3ros3MsgC1Ev>
 8001528:	4a06      	ldr	r2, [pc, #24]	; (8001544 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3304      	adds	r3, #4
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff ffcf 	bl	80014d6 <_ZN3ros4TimeC1Ev>
    {
    }
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	0800f318 	.word	0x0800f318

08001548 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6859      	ldr	r1, [r3, #4]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	4413      	add	r3, r2
 8001560:	b2ca      	uxtb	r2, r1
 8001562:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	0a19      	lsrs	r1, r3, #8
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3301      	adds	r3, #1
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	4413      	add	r3, r2
 8001572:	b2ca      	uxtb	r2, r1
 8001574:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	0c19      	lsrs	r1, r3, #16
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3302      	adds	r3, #2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	4413      	add	r3, r2
 8001584:	b2ca      	uxtb	r2, r1
 8001586:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	0e19      	lsrs	r1, r3, #24
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3303      	adds	r3, #3
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	4413      	add	r3, r2
 8001596:	b2ca      	uxtb	r2, r1
 8001598:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	3304      	adds	r3, #4
 800159e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6899      	ldr	r1, [r3, #8]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	4413      	add	r3, r2
 80015aa:	b2ca      	uxtb	r2, r1
 80015ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	0a19      	lsrs	r1, r3, #8
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3301      	adds	r3, #1
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	b2ca      	uxtb	r2, r1
 80015be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	0c19      	lsrs	r1, r3, #16
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	3302      	adds	r3, #2
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	b2ca      	uxtb	r2, r1
 80015d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	0e19      	lsrs	r1, r3, #24
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	3303      	adds	r3, #3
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	b2ca      	uxtb	r2, r1
 80015e2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3304      	adds	r3, #4
 80015e8:	60fb      	str	r3, [r7, #12]
      return offset;
 80015ea:	68fb      	ldr	r3, [r7, #12]
    }
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3301      	adds	r3, #1
 800161c:	6839      	ldr	r1, [r7, #0]
 800161e:	440b      	add	r3, r1
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	3302      	adds	r3, #2
 8001632:	6839      	ldr	r1, [r7, #0]
 8001634:	440b      	add	r3, r1
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	041b      	lsls	r3, r3, #16
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3303      	adds	r3, #3
 8001648:	6839      	ldr	r1, [r7, #0]
 800164a:	440b      	add	r3, r1
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	061b      	lsls	r3, r3, #24
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3304      	adds	r3, #4
 800165a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	4413      	add	r3, r2
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	3301      	adds	r3, #1
 8001672:	6839      	ldr	r1, [r7, #0]
 8001674:	440b      	add	r3, r1
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	3302      	adds	r3, #2
 8001688:	6839      	ldr	r1, [r7, #0]
 800168a:	440b      	add	r3, r1
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	041b      	lsls	r3, r3, #16
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3303      	adds	r3, #3
 800169e:	6839      	ldr	r1, [r7, #0]
 80016a0:	440b      	add	r3, r1
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	061b      	lsls	r3, r3, #24
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3304      	adds	r3, #4
 80016b0:	60fb      	str	r3, [r7, #12]
     return offset;
 80016b2:	68fb      	ldr	r3, [r7, #12]
    }
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	0800f094 	.word	0x0800f094

080016dc <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	0800f0a4 	.word	0x0800f0a4

080016f8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fef8 	bl	80014f8 <_ZN3ros3MsgC1Ev>
 8001708:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	809a      	strh	r2, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a09      	ldr	r2, [pc, #36]	; (800173c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a06      	ldr	r2, [pc, #24]	; (800173c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001724:	611a      	str	r2, [r3, #16]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
    {
    }
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	0800f300 	.word	0x0800f300
 800173c:	0800f0c8 	.word	0x0800f0c8

08001740 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	8899      	ldrh	r1, [r3, #4]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	4413      	add	r3, r2
 8001758:	b2ca      	uxtb	r2, r1
 800175a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	889b      	ldrh	r3, [r3, #4]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	b299      	uxth	r1, r3
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	3301      	adds	r3, #1
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	4413      	add	r3, r2
 800176c:	b2ca      	uxtb	r2, r1
 800176e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	3302      	adds	r3, #2
 8001774:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fdc8 	bl	8000310 <strlen>
 8001780:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	4413      	add	r3, r2
 8001788:	69b9      	ldr	r1, [r7, #24]
 800178a:	4618      	mov	r0, r3
 800178c:	f001 fcb8 	bl	8003100 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	3304      	adds	r3, #4
 8001794:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	18d0      	adds	r0, r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4619      	mov	r1, r3
 80017a4:	f00d fad2 	bl	800ed4c <memcpy>
      offset += length_topic_name;
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	4413      	add	r3, r2
 80017ae:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fdab 	bl	8000310 <strlen>
 80017ba:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	4413      	add	r3, r2
 80017c2:	6979      	ldr	r1, [r7, #20]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f001 fc9b 	bl	8003100 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	18d0      	adds	r0, r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4619      	mov	r1, r3
 80017de:	f00d fab5 	bl	800ed4c <memcpy>
      offset += length_message_type;
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	4413      	add	r3, r2
 80017e8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fd8e 	bl	8000310 <strlen>
 80017f4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	6939      	ldr	r1, [r7, #16]
 80017fe:	4618      	mov	r0, r3
 8001800:	f001 fc7e 	bl	8003100 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	3304      	adds	r3, #4
 8001808:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	18d0      	adds	r0, r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4619      	mov	r1, r3
 8001818:	f00d fa98 	bl	800ed4c <memcpy>
      offset += length_md5sum;
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4413      	add	r3, r2
 8001822:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800182a:	68f9      	ldr	r1, [r7, #12]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	4413      	add	r3, r2
 8001832:	b2ca      	uxtb	r2, r1
 8001834:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	0a19      	lsrs	r1, r3, #8
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3301      	adds	r3, #1
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	4413      	add	r3, r2
 8001842:	b2ca      	uxtb	r2, r1
 8001844:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	0c19      	lsrs	r1, r3, #16
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3302      	adds	r3, #2
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	4413      	add	r3, r2
 8001852:	b2ca      	uxtb	r2, r1
 8001854:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	0e19      	lsrs	r1, r3, #24
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3303      	adds	r3, #3
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	4413      	add	r3, r2
 8001862:	b2ca      	uxtb	r2, r1
 8001864:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	61fb      	str	r3, [r7, #28]
      return offset;
 800186c:	69fb      	ldr	r3, [r7, #28]
    }
 800186e:	4618      	mov	r0, r3
 8001870:	3720      	adds	r7, #32
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001876:	b580      	push	{r7, lr}
 8001878:	b08a      	sub	sp, #40	; 0x28
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b29a      	uxth	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	889b      	ldrh	r3, [r3, #4]
 8001896:	b21a      	sxth	r2, r3
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	3301      	adds	r3, #1
 800189c:	6839      	ldr	r1, [r7, #0]
 800189e:	440b      	add	r3, r1
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	4313      	orrs	r3, r2
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	3302      	adds	r3, #2
 80018b4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	441a      	add	r2, r3
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4611      	mov	r1, r2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f001 fc3a 	bl	800313c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	3304      	adds	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	4413      	add	r3, r2
 80018d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018da:	429a      	cmp	r2, r3
 80018dc:	d20c      	bcs.n	80018f8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	441a      	add	r2, r3
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6839      	ldr	r1, [r7, #0]
 80018ea:	440b      	add	r3, r1
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	3301      	adds	r3, #1
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
 80018f6:	e7ec      	b.n	80018d2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	4413      	add	r3, r2
 80018fe:	3b01      	subs	r3, #1
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	4413      	add	r3, r2
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	3b01      	subs	r3, #1
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	441a      	add	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	4413      	add	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	441a      	add	r2, r3
 8001922:	f107 0310 	add.w	r3, r7, #16
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f001 fc07 	bl	800313c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	3304      	adds	r3, #4
 8001932:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	623b      	str	r3, [r7, #32]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4413      	add	r3, r2
 800193e:	6a3a      	ldr	r2, [r7, #32]
 8001940:	429a      	cmp	r2, r3
 8001942:	d20c      	bcs.n	800195e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	441a      	add	r2, r3
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	3b01      	subs	r3, #1
 800194e:	6839      	ldr	r1, [r7, #0]
 8001950:	440b      	add	r3, r1
 8001952:	7812      	ldrb	r2, [r2, #0]
 8001954:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	3301      	adds	r3, #1
 800195a:	623b      	str	r3, [r7, #32]
 800195c:	e7ec      	b.n	8001938 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4413      	add	r3, r2
 8001964:	3b01      	subs	r3, #1
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	4413      	add	r3, r2
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	3b01      	subs	r3, #1
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	441a      	add	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4413      	add	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	441a      	add	r2, r3
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	4611      	mov	r1, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f001 fbd4 	bl	800313c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	3304      	adds	r3, #4
 8001998:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d20c      	bcs.n	80019c4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	441a      	add	r2, r3
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	6839      	ldr	r1, [r7, #0]
 80019b6:	440b      	add	r3, r1
 80019b8:	7812      	ldrb	r2, [r2, #0]
 80019ba:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	3301      	adds	r3, #1
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e7ec      	b.n	800199e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4413      	add	r3, r2
 80019ca:	3b01      	subs	r3, #1
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	441a      	add	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4413      	add	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	6839      	ldr	r1, [r7, #0]
 80019f2:	440a      	add	r2, r1
 80019f4:	7812      	ldrb	r2, [r2, #0]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	3301      	adds	r3, #1
 8001a00:	6839      	ldr	r1, [r7, #0]
 8001a02:	440b      	add	r3, r1
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	3302      	adds	r3, #2
 8001a12:	6839      	ldr	r1, [r7, #0]
 8001a14:	440b      	add	r3, r1
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	041b      	lsls	r3, r3, #16
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	3303      	adds	r3, #3
 8001a24:	6839      	ldr	r1, [r7, #0]
 8001a26:	440b      	add	r3, r1
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	061b      	lsls	r3, r3, #24
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	61bb      	str	r3, [r7, #24]
     return offset;
 8001a3c:	69bb      	ldr	r3, [r7, #24]
    }
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3728      	adds	r7, #40	; 0x28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	0800f0cc 	.word	0x0800f0cc

08001a64 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	0800f0e8 	.word	0x0800f0e8

08001a80 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fd34 	bl	80014f8 <_ZN3ros3MsgC1Ev>
 8001a90:	4a06      	ldr	r2, [pc, #24]	; (8001aac <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	711a      	strb	r2, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001aa0:	609a      	str	r2, [r3, #8]
    {
    }
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	0800f2e8 	.word	0x0800f2e8
 8001ab0:	0800f0c8 	.word	0x0800f0c8

08001ab4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	7912      	ldrb	r2, [r2, #4]
 8001acc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fc19 	bl	8000310 <strlen>
 8001ade:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	68b9      	ldr	r1, [r7, #8]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f001 fb09 	bl	8003100 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3304      	adds	r3, #4
 8001af2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	18d0      	adds	r0, r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f00d f923 	bl	800ed4c <memcpy>
      offset += length_msg;
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
      return offset;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
    }
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	3301      	adds	r3, #1
 8001b36:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	441a      	add	r2, r3
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 faf9 	bl	800313c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4413      	add	r3, r2
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d20c      	bcs.n	8001b7a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	441a      	add	r2, r3
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	440b      	add	r3, r1
 8001b6e:	7812      	ldrb	r2, [r2, #0]
 8001b70:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3301      	adds	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	e7ec      	b.n	8001b54 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b01      	subs	r3, #1
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	4413      	add	r3, r2
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	441a      	add	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
     return offset;
 8001b9e:	693b      	ldr	r3, [r7, #16]
    }
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	0800f10c 	.word	0x0800f10c

08001bc4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	0800f120 	.word	0x0800f120

08001be0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fc84 	bl	80014f8 <_ZN3ros3MsgC1Ev>
 8001bf0:	4a0c      	ldr	r2, [pc, #48]	; (8001c24 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	61da      	str	r2, [r3, #28]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	0800f2d0 	.word	0x0800f2d0

08001c28 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6859      	ldr	r1, [r3, #4]
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	b2ca      	uxtb	r2, r1
 8001c42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	0a19      	lsrs	r1, r3, #8
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	4413      	add	r3, r2
 8001c52:	b2ca      	uxtb	r2, r1
 8001c54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	0c19      	lsrs	r1, r3, #16
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	3302      	adds	r3, #2
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	b2ca      	uxtb	r2, r1
 8001c66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	0e19      	lsrs	r1, r3, #24
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	3303      	adds	r3, #3
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	4413      	add	r3, r2
 8001c76:	b2ca      	uxtb	r2, r1
 8001c78:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	6a3a      	ldr	r2, [r7, #32]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d22b      	bcs.n	8001ce6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001c9c:	6939      	ldr	r1, [r7, #16]
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	b2ca      	uxtb	r2, r1
 8001ca6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	0a19      	lsrs	r1, r3, #8
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	3301      	adds	r3, #1
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	b2ca      	uxtb	r2, r1
 8001cb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	0c19      	lsrs	r1, r3, #16
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	b2ca      	uxtb	r2, r1
 8001cc6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	0e19      	lsrs	r1, r3, #24
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	3303      	adds	r3, #3
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	b2ca      	uxtb	r2, r1
 8001cd6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	3304      	adds	r3, #4
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	623b      	str	r3, [r7, #32]
 8001ce4:	e7ce      	b.n	8001c84 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6919      	ldr	r1, [r3, #16]
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	b2ca      	uxtb	r2, r1
 8001cf2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	0a19      	lsrs	r1, r3, #8
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	4413      	add	r3, r2
 8001d02:	b2ca      	uxtb	r2, r1
 8001d04:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	0c19      	lsrs	r1, r3, #16
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	3302      	adds	r3, #2
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	b2ca      	uxtb	r2, r1
 8001d16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	0e19      	lsrs	r1, r3, #24
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	3303      	adds	r3, #3
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	4413      	add	r3, r2
 8001d26:	b2ca      	uxtb	r2, r1
 8001d28:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001d30:	2300      	movs	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	69fa      	ldr	r2, [r7, #28]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d22b      	bcs.n	8001d96 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699a      	ldr	r2, [r3, #24]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001d4c:	68f9      	ldr	r1, [r7, #12]
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	b2ca      	uxtb	r2, r1
 8001d56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	0a19      	lsrs	r1, r3, #8
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	3301      	adds	r3, #1
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	b2ca      	uxtb	r2, r1
 8001d66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	0c19      	lsrs	r1, r3, #16
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	3302      	adds	r3, #2
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	b2ca      	uxtb	r2, r1
 8001d76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	0e19      	lsrs	r1, r3, #24
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	3303      	adds	r3, #3
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	b2ca      	uxtb	r2, r1
 8001d86:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3301      	adds	r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	e7ce      	b.n	8001d34 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69d9      	ldr	r1, [r3, #28]
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	b2ca      	uxtb	r2, r1
 8001da2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	0a19      	lsrs	r1, r3, #8
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	3301      	adds	r3, #1
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	b2ca      	uxtb	r2, r1
 8001db4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	0c19      	lsrs	r1, r3, #16
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b2ca      	uxtb	r2, r1
 8001dc6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	0e19      	lsrs	r1, r3, #24
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	3303      	adds	r3, #3
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	b2ca      	uxtb	r2, r1
 8001dd8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	3304      	adds	r3, #4
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001de0:	2300      	movs	r3, #0
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d228      	bcs.n	8001e40 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fa88 	bl	8000310 <strlen>
 8001e00:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	6979      	ldr	r1, [r7, #20]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f001 f978 	bl	8003100 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	3304      	adds	r3, #4
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	18d0      	adds	r0, r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f00c ff8e 	bl	800ed4c <memcpy>
      offset += length_stringsi;
 8001e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	4413      	add	r3, r2
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	61bb      	str	r3, [r7, #24]
 8001e3e:	e7d1      	b.n	8001de4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001e42:	4618      	mov	r0, r3
 8001e44:	3728      	adds	r7, #40	; 0x28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b08e      	sub	sp, #56	; 0x38
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e64:	3301      	adds	r3, #1
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	6a3a      	ldr	r2, [r7, #32]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e76:	3302      	adds	r3, #2
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	041b      	lsls	r3, r3, #16
 8001e80:	6a3a      	ldr	r2, [r7, #32]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e88:	3303      	adds	r3, #3
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	061b      	lsls	r3, r3, #24
 8001e92:	6a3a      	ldr	r2, [r7, #32]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	6a3a      	ldr	r2, [r7, #32]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d90a      	bls.n	8001ebe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	f00c ff60 	bl	800ed78 <realloc>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a3a      	ldr	r2, [r7, #32]
 8001ec2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d236      	bcs.n	8001f40 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eda:	6839      	ldr	r1, [r7, #0]
 8001edc:	440a      	add	r2, r1
 8001ede:	7812      	ldrb	r2, [r2, #0]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee8:	3301      	adds	r3, #1
 8001eea:	6839      	ldr	r1, [r7, #0]
 8001eec:	440b      	add	r3, r1
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efa:	3302      	adds	r3, #2
 8001efc:	6839      	ldr	r1, [r7, #0]
 8001efe:	440b      	add	r3, r1
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	041b      	lsls	r3, r3, #16
 8001f04:	4313      	orrs	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f0c:	3303      	adds	r3, #3
 8001f0e:	6839      	ldr	r1, [r7, #0]
 8001f10:	440b      	add	r3, r1
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	061b      	lsls	r3, r3, #24
 8001f16:	4313      	orrs	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f22:	3304      	adds	r3, #4
 8001f24:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	3208      	adds	r2, #8
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f3e:	e7c3      	b.n	8001ec8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	4413      	add	r3, r2
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	021b      	lsls	r3, r3, #8
 8001f56:	69fa      	ldr	r2, [r7, #28]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5e:	3302      	adds	r3, #2
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	041b      	lsls	r3, r3, #16
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f70:	3303      	adds	r3, #3
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	4413      	add	r3, r2
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	061b      	lsls	r3, r3, #24
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f82:	3304      	adds	r3, #4
 8001f84:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d90a      	bls.n	8001fa6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	f00c feec 	bl	800ed78 <realloc>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d236      	bcs.n	8002028 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fc2:	6839      	ldr	r1, [r7, #0]
 8001fc4:	440a      	add	r2, r1
 8001fc6:	7812      	ldrb	r2, [r2, #0]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	6839      	ldr	r1, [r7, #0]
 8001fd4:	440b      	add	r3, r1
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	6839      	ldr	r1, [r7, #0]
 8001fe6:	440b      	add	r3, r1
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	041b      	lsls	r3, r3, #16
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff4:	3303      	adds	r3, #3
 8001ff6:	6839      	ldr	r1, [r7, #0]
 8001ff8:	440b      	add	r3, r1
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	061b      	lsls	r3, r3, #24
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200a:	3304      	adds	r3, #4
 800200c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699a      	ldr	r2, [r3, #24]
 8002012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	3214      	adds	r2, #20
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002022:	3301      	adds	r3, #1
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002026:	e7c3      	b.n	8001fb0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	4413      	add	r3, r2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002034:	3301      	adds	r3, #1
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	4413      	add	r3, r2
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002046:	3302      	adds	r3, #2
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	4413      	add	r3, r2
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	041b      	lsls	r3, r3, #16
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002058:	3303      	adds	r3, #3
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	4413      	add	r3, r2
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	061b      	lsls	r3, r3, #24
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206a:	3304      	adds	r3, #4
 800206c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	429a      	cmp	r2, r3
 8002076:	d90a      	bls.n	800208e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4619      	mov	r1, r3
 8002082:	4610      	mov	r0, r2
 8002084:	f00c fe78 	bl	800ed78 <realloc>
 8002088:	4602      	mov	r2, r0
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002094:	2300      	movs	r3, #0
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800209e:	429a      	cmp	r2, r3
 80020a0:	d23f      	bcs.n	8002122 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80020a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	441a      	add	r2, r3
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	4611      	mov	r1, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f001 f844 	bl	800313c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b6:	3304      	adds	r3, #4
 80020b8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80020ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
 80020be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4413      	add	r3, r2
 80020c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d20c      	bcs.n	80020e4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	441a      	add	r2, r3
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	3b01      	subs	r3, #1
 80020d4:	6839      	ldr	r1, [r7, #0]
 80020d6:	440b      	add	r3, r1
 80020d8:	7812      	ldrb	r2, [r2, #0]
 80020da:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	3301      	adds	r3, #1
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
 80020e2:	e7ec      	b.n	80020be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80020e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4413      	add	r3, r2
 80020ea:	3b01      	subs	r3, #1
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80020f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f6:	3b01      	subs	r3, #1
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	441a      	add	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4413      	add	r3, r2
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	3220      	adds	r2, #32
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800211a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211c:	3301      	adds	r3, #1
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002120:	e7ba      	b.n	8002098 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002124:	4618      	mov	r0, r3
 8002126:	3738      	adds	r7, #56	; 0x38
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	0800f224 	.word	0x0800f224

08002148 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	0800f144 	.word	0x0800f144

08002164 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
  }
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a4b      	ldr	r2, [pc, #300]	; (80022bc <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d077      	beq.n	8002284 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a48      	ldr	r2, [pc, #288]	; (80022c0 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d06f      	beq.n	8002284 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a45      	ldr	r2, [pc, #276]	; (80022c4 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d067      	beq.n	8002284 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a42      	ldr	r2, [pc, #264]	; (80022c8 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d05f      	beq.n	8002284 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a3f      	ldr	r2, [pc, #252]	; (80022cc <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d057      	beq.n	8002284 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a3c      	ldr	r2, [pc, #240]	; (80022d0 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d04f      	beq.n	8002284 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a39      	ldr	r2, [pc, #228]	; (80022d4 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d047      	beq.n	8002284 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a36      	ldr	r2, [pc, #216]	; (80022d8 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d03f      	beq.n	8002284 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a33      	ldr	r2, [pc, #204]	; (80022dc <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d037      	beq.n	8002284 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a30      	ldr	r2, [pc, #192]	; (80022e0 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d02f      	beq.n	8002284 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a2d      	ldr	r2, [pc, #180]	; (80022e4 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d027      	beq.n	8002284 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a2a      	ldr	r2, [pc, #168]	; (80022e8 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d01f      	beq.n	8002284 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a27      	ldr	r2, [pc, #156]	; (80022ec <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d017      	beq.n	8002284 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d00f      	beq.n	8002284 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a21      	ldr	r2, [pc, #132]	; (80022f4 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d007      	beq.n	8002284 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a1e      	ldr	r2, [pc, #120]	; (80022f8 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d10a      	bne.n	800229a <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002298:	e009      	b.n	80022ae <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80022aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40020010 	.word	0x40020010
 80022c0:	40020028 	.word	0x40020028
 80022c4:	40020040 	.word	0x40020040
 80022c8:	40020058 	.word	0x40020058
 80022cc:	40020070 	.word	0x40020070
 80022d0:	40020088 	.word	0x40020088
 80022d4:	400200a0 	.word	0x400200a0
 80022d8:	400200b8 	.word	0x400200b8
 80022dc:	40020410 	.word	0x40020410
 80022e0:	40020428 	.word	0x40020428
 80022e4:	40020440 	.word	0x40020440
 80022e8:	40020458 	.word	0x40020458
 80022ec:	40020470 	.word	0x40020470
 80022f0:	40020488 	.word	0x40020488
 80022f4:	400204a0 	.word	0x400204a0
 80022f8:	400204b8 	.word	0x400204b8

080022fc <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <_ZN13STM32HardwareC1Ev+0x34>)
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    }
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	24003838 	.word	0x24003838

08002334 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f804 	bl	800234a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
    	HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6858      	ldr	r0, [r3, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3308      	adds	r3, #8
 800235a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800235e:	4619      	mov	r1, r3
 8002360:	f00a fc62 	bl	800cc28 <HAL_UART_Receive_DMA>
    }
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <_ZN13STM32Hardware4readEv>:

    int read(){
 800236c:	b590      	push	{r4, r7, lr}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002374:	f04f 33ff 	mov.w	r3, #4294967295
 8002378:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f8d3 4408 	ldr.w	r4, [r3, #1032]	; 0x408
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff fefb 	bl	800217c <_ZN13STM32Hardware10getRdmaIndEv>
 8002386:	4603      	mov	r3, r0
 8002388:	429c      	cmp	r4, r3
 800238a:	bf14      	ite	ne
 800238c:	2301      	movne	r3, #1
 800238e:	2300      	moveq	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d012      	beq.n	80023bc <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800239c:	1c59      	adds	r1, r3, #1
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	4413      	add	r3, r2
 80023a8:	7a1b      	ldrb	r3, [r3, #8]
 80023aa:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80023b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
      }
      return c;
 80023bc:	68fb      	ldr	r3, [r7, #12]
    }
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd90      	pop	{r4, r7, pc}
	...

080023c8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d8:	2b20      	cmp	r3, #32
 80023da:	d108      	bne.n	80023ee <_ZN13STM32Hardware5flushEv+0x26>
 80023dc:	4b28      	ldr	r3, [pc, #160]	; (8002480 <_ZN13STM32Hardware5flushEv+0xb8>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	f083 0301 	eor.w	r3, r3, #1
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <_ZN13STM32Hardware5flushEv+0x26>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <_ZN13STM32Hardware5flushEv+0x28>
 80023ee:	2300      	movs	r3, #0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d040      	beq.n	8002476 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80023f4:	4b22      	ldr	r3, [pc, #136]	; (8002480 <_ZN13STM32Hardware5flushEv+0xb8>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8002406:	429a      	cmp	r2, r3
 8002408:	d032      	beq.n	8002470 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002416:	429a      	cmp	r2, r3
 8002418:	d20a      	bcs.n	8002430 <_ZN13STM32Hardware5flushEv+0x68>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002420:	b29a      	uxth	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8002428:	b29b      	uxth	r3, r3
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	b29b      	uxth	r3, r3
 800242e:	e006      	b.n	800243e <_ZN13STM32Hardware5flushEv+0x76>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8002436:	b29b      	uxth	r3, r3
 8002438:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800243c:	b29b      	uxth	r3, r3
 800243e:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6858      	ldr	r0, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800244a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	3304      	adds	r3, #4
 8002454:	89fa      	ldrh	r2, [r7, #14]
 8002456:	4619      	mov	r1, r3
 8002458:	f00a fb66 	bl	800cb28 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 8002462:	89fb      	ldrh	r3, [r7, #14]
 8002464:	4413      	add	r3, r2
 8002466:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
        }
        mutex = false;
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
      }
    }
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	24002478 	.word	0x24002478

08002484 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
      int n = length;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800249a:	bfa8      	it	ge
 800249c:	f44f 6380 	movge.w	r3, #1024	; 0x400
 80024a0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80024a8:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	4293      	cmp	r3, r2
 80024b0:	bf28      	it	cs
 80024b2:	4613      	movcs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80024bc:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4413      	add	r3, r2
 80024c4:	3304      	adds	r3, #4
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f00c fc3e 	bl	800ed4c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	4413      	add	r3, r2
 80024da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c

      if(n != n_tail){
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d00b      	beq.n	8002504 <_ZN13STM32Hardware5writeEPhi+0x80>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	18d1      	adds	r1, r2, r3
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	f00c fc24 	bl	800ed4c <memcpy>
      }

      flush();
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f7ff ff5f 	bl	80023c8 <_ZN13STM32Hardware5flushEv>
    }
 800250a:	bf00      	nop
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	f002 fc9d 	bl	8004e58 <HAL_GetTick>
 800251e:	4603      	mov	r3, r0
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe ffe0 	bl	80014f8 <_ZN3ros3MsgC1Ev>
 8002538:	4a0e      	ldr	r2, [pc, #56]	; (8002574 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	0800f28c 	.word	0x0800f28c

08002578 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002578:	b480      	push	{r7}
 800257a:	b08b      	sub	sp, #44	; 0x2c
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800258c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002590:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002594:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002596:	6838      	ldr	r0, [r7, #0]
 8002598:	4401      	add	r1, r0
 800259a:	b2d3      	uxtb	r3, r2
 800259c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800259e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	0a02      	lsrs	r2, r0, #8
 80025ac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80025b0:	0a0b      	lsrs	r3, r1, #8
 80025b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025b4:	3101      	adds	r1, #1
 80025b6:	6838      	ldr	r0, [r7, #0]
 80025b8:	4401      	add	r1, r0
 80025ba:	b2d3      	uxtb	r3, r2
 80025bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80025be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	0c02      	lsrs	r2, r0, #16
 80025cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80025d0:	0c0b      	lsrs	r3, r1, #16
 80025d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025d4:	3102      	adds	r1, #2
 80025d6:	6838      	ldr	r0, [r7, #0]
 80025d8:	4401      	add	r1, r0
 80025da:	b2d3      	uxtb	r3, r2
 80025dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80025de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	f04f 0300 	mov.w	r3, #0
 80025ea:	0e02      	lsrs	r2, r0, #24
 80025ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025f0:	0e0b      	lsrs	r3, r1, #24
 80025f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f4:	3103      	adds	r1, #3
 80025f6:	6838      	ldr	r0, [r7, #0]
 80025f8:	4401      	add	r1, r0
 80025fa:	b2d3      	uxtb	r3, r2
 80025fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80025fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	000a      	movs	r2, r1
 800260c:	2300      	movs	r3, #0
 800260e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002610:	3104      	adds	r1, #4
 8002612:	6838      	ldr	r0, [r7, #0]
 8002614:	4401      	add	r1, r0
 8002616:	b2d3      	uxtb	r3, r2
 8002618:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800261a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	0a0a      	lsrs	r2, r1, #8
 8002628:	2300      	movs	r3, #0
 800262a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800262c:	3105      	adds	r1, #5
 800262e:	6838      	ldr	r0, [r7, #0]
 8002630:	4401      	add	r1, r0
 8002632:	b2d3      	uxtb	r3, r2
 8002634:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002636:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	0c0a      	lsrs	r2, r1, #16
 8002644:	2300      	movs	r3, #0
 8002646:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002648:	3106      	adds	r1, #6
 800264a:	6838      	ldr	r0, [r7, #0]
 800264c:	4401      	add	r1, r0
 800264e:	b2d3      	uxtb	r3, r2
 8002650:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002652:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	0e0a      	lsrs	r2, r1, #24
 8002660:	2300      	movs	r3, #0
 8002662:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002664:	3107      	adds	r1, #7
 8002666:	6838      	ldr	r0, [r7, #0]
 8002668:	4401      	add	r1, r0
 800266a:	b2d3      	uxtb	r3, r2
 800266c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	3308      	adds	r3, #8
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800267a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800267e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002684:	6838      	ldr	r0, [r7, #0]
 8002686:	4401      	add	r1, r0
 8002688:	b2d3      	uxtb	r3, r2
 800268a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800268c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	0a02      	lsrs	r2, r0, #8
 800269a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800269e:	0a0b      	lsrs	r3, r1, #8
 80026a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026a2:	3101      	adds	r1, #1
 80026a4:	6838      	ldr	r0, [r7, #0]
 80026a6:	4401      	add	r1, r0
 80026a8:	b2d3      	uxtb	r3, r2
 80026aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80026ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	0c02      	lsrs	r2, r0, #16
 80026ba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026be:	0c0b      	lsrs	r3, r1, #16
 80026c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026c2:	3102      	adds	r1, #2
 80026c4:	6838      	ldr	r0, [r7, #0]
 80026c6:	4401      	add	r1, r0
 80026c8:	b2d3      	uxtb	r3, r2
 80026ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80026cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	0e02      	lsrs	r2, r0, #24
 80026da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026de:	0e0b      	lsrs	r3, r1, #24
 80026e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e2:	3103      	adds	r1, #3
 80026e4:	6838      	ldr	r0, [r7, #0]
 80026e6:	4401      	add	r1, r0
 80026e8:	b2d3      	uxtb	r3, r2
 80026ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80026ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	000a      	movs	r2, r1
 80026fa:	2300      	movs	r3, #0
 80026fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026fe:	3104      	adds	r1, #4
 8002700:	6838      	ldr	r0, [r7, #0]
 8002702:	4401      	add	r1, r0
 8002704:	b2d3      	uxtb	r3, r2
 8002706:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002708:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	0a0a      	lsrs	r2, r1, #8
 8002716:	2300      	movs	r3, #0
 8002718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800271a:	3105      	adds	r1, #5
 800271c:	6838      	ldr	r0, [r7, #0]
 800271e:	4401      	add	r1, r0
 8002720:	b2d3      	uxtb	r3, r2
 8002722:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002724:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	0c0a      	lsrs	r2, r1, #16
 8002732:	2300      	movs	r3, #0
 8002734:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002736:	3106      	adds	r1, #6
 8002738:	6838      	ldr	r0, [r7, #0]
 800273a:	4401      	add	r1, r0
 800273c:	b2d3      	uxtb	r3, r2
 800273e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002740:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	0e0a      	lsrs	r2, r1, #24
 800274e:	2300      	movs	r3, #0
 8002750:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002752:	3107      	adds	r1, #7
 8002754:	6838      	ldr	r0, [r7, #0]
 8002756:	4401      	add	r1, r0
 8002758:	b2d3      	uxtb	r3, r2
 800275a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	3308      	adds	r3, #8
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002768:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800276c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002772:	6838      	ldr	r0, [r7, #0]
 8002774:	4401      	add	r1, r0
 8002776:	b2d3      	uxtb	r3, r2
 8002778:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800277a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	0a02      	lsrs	r2, r0, #8
 8002788:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800278c:	0a0b      	lsrs	r3, r1, #8
 800278e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002790:	3101      	adds	r1, #1
 8002792:	6838      	ldr	r0, [r7, #0]
 8002794:	4401      	add	r1, r0
 8002796:	b2d3      	uxtb	r3, r2
 8002798:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800279a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	0c02      	lsrs	r2, r0, #16
 80027a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80027ac:	0c0b      	lsrs	r3, r1, #16
 80027ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027b0:	3102      	adds	r1, #2
 80027b2:	6838      	ldr	r0, [r7, #0]
 80027b4:	4401      	add	r1, r0
 80027b6:	b2d3      	uxtb	r3, r2
 80027b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80027ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	0e02      	lsrs	r2, r0, #24
 80027c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80027cc:	0e0b      	lsrs	r3, r1, #24
 80027ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027d0:	3103      	adds	r1, #3
 80027d2:	6838      	ldr	r0, [r7, #0]
 80027d4:	4401      	add	r1, r0
 80027d6:	b2d3      	uxtb	r3, r2
 80027d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80027da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	000a      	movs	r2, r1
 80027e8:	2300      	movs	r3, #0
 80027ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ec:	3104      	adds	r1, #4
 80027ee:	6838      	ldr	r0, [r7, #0]
 80027f0:	4401      	add	r1, r0
 80027f2:	b2d3      	uxtb	r3, r2
 80027f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80027f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	0a0a      	lsrs	r2, r1, #8
 8002804:	2300      	movs	r3, #0
 8002806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002808:	3105      	adds	r1, #5
 800280a:	6838      	ldr	r0, [r7, #0]
 800280c:	4401      	add	r1, r0
 800280e:	b2d3      	uxtb	r3, r2
 8002810:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002812:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	0c0a      	lsrs	r2, r1, #16
 8002820:	2300      	movs	r3, #0
 8002822:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002824:	3106      	adds	r1, #6
 8002826:	6838      	ldr	r0, [r7, #0]
 8002828:	4401      	add	r1, r0
 800282a:	b2d3      	uxtb	r3, r2
 800282c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800282e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	0e0a      	lsrs	r2, r1, #24
 800283c:	2300      	movs	r3, #0
 800283e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002840:	3107      	adds	r1, #7
 8002842:	6838      	ldr	r0, [r7, #0]
 8002844:	4401      	add	r1, r0
 8002846:	b2d3      	uxtb	r3, r2
 8002848:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	3308      	adds	r3, #8
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002852:	4618      	mov	r0, r3
 8002854:	372c      	adds	r7, #44	; 0x2c
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800285e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002862:	b0eb      	sub	sp, #428	; 0x1ac
 8002864:	af00      	add	r7, sp, #0
 8002866:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800286a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002880:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002884:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002888:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800288c:	4413      	add	r3, r2
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2200      	movs	r2, #0
 8002894:	461c      	mov	r4, r3
 8002896:	4615      	mov	r5, r2
 8002898:	ea40 0804 	orr.w	r8, r0, r4
 800289c:	ea41 0905 	orr.w	r9, r1, r5
 80028a0:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80028a4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80028a8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028b2:	4413      	add	r3, r2
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2200      	movs	r2, #0
 80028ba:	469a      	mov	sl, r3
 80028bc:	4693      	mov	fp, r2
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80028ca:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80028ce:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80028d2:	ea40 0402 	orr.w	r4, r0, r2
 80028d6:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80028da:	430b      	orrs	r3, r1
 80028dc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80028e0:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80028e4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80028e8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80028ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028f0:	1c9a      	adds	r2, r3, #2
 80028f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028f6:	4413      	add	r3, r2
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2200      	movs	r2, #0
 80028fe:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002902:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002912:	464c      	mov	r4, r9
 8002914:	0423      	lsls	r3, r4, #16
 8002916:	4644      	mov	r4, r8
 8002918:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800291c:	4644      	mov	r4, r8
 800291e:	0422      	lsls	r2, r4, #16
 8002920:	ea40 0402 	orr.w	r4, r0, r2
 8002924:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002928:	430b      	orrs	r3, r1
 800292a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800292e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002932:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002936:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800293a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800293e:	1cda      	adds	r2, r3, #3
 8002940:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002944:	4413      	add	r3, r2
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2200      	movs	r2, #0
 800294c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002950:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002954:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002958:	4623      	mov	r3, r4
 800295a:	0a1b      	lsrs	r3, r3, #8
 800295c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002960:	4623      	mov	r3, r4
 8002962:	061b      	lsls	r3, r3, #24
 8002964:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002968:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800296c:	4623      	mov	r3, r4
 800296e:	4303      	orrs	r3, r0
 8002970:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002974:	462b      	mov	r3, r5
 8002976:	430b      	orrs	r3, r1
 8002978:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800297c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002980:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002984:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002988:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800298c:	1d1a      	adds	r2, r3, #4
 800298e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002992:	4413      	add	r3, r2
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2200      	movs	r2, #0
 800299a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800299e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80029ae:	0023      	movs	r3, r4
 80029b0:	2200      	movs	r2, #0
 80029b2:	ea40 0402 	orr.w	r4, r0, r2
 80029b6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80029ba:	430b      	orrs	r3, r1
 80029bc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80029c0:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80029c4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80029c8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029d0:	1d5a      	adds	r2, r3, #5
 80029d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029d6:	4413      	add	r3, r2
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2200      	movs	r2, #0
 80029de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80029e2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80029f2:	0223      	lsls	r3, r4, #8
 80029f4:	2200      	movs	r2, #0
 80029f6:	ea40 0402 	orr.w	r4, r0, r2
 80029fa:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80029fe:	430b      	orrs	r3, r1
 8002a00:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002a04:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002a08:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002a0c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a14:	1d9a      	adds	r2, r3, #6
 8002a16:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a1a:	4413      	add	r3, r2
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2200      	movs	r2, #0
 8002a22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002a26:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002a36:	0423      	lsls	r3, r4, #16
 8002a38:	2200      	movs	r2, #0
 8002a3a:	ea40 0402 	orr.w	r4, r0, r2
 8002a3e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002a42:	430b      	orrs	r3, r1
 8002a44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002a48:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002a4c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002a50:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a54:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a58:	1dda      	adds	r2, r3, #7
 8002a5a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a5e:	4413      	add	r3, r2
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2200      	movs	r2, #0
 8002a66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002a6a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002a7a:	0623      	lsls	r3, r4, #24
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	ea40 0402 	orr.w	r4, r0, r2
 8002a82:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002a86:	430b      	orrs	r3, r1
 8002a88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a8c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002a90:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002a94:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a98:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002a9c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002aa0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002aa4:	3308      	adds	r3, #8
 8002aa6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ab6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002aba:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002abe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ac2:	4413      	add	r3, r2
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002ace:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002ad2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002ad6:	4623      	mov	r3, r4
 8002ad8:	4303      	orrs	r3, r0
 8002ada:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002ade:	462b      	mov	r3, r5
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ae6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002aea:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002aee:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002af2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002afc:	4413      	add	r3, r2
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2200      	movs	r2, #0
 8002b04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002b08:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002b18:	464c      	mov	r4, r9
 8002b1a:	0223      	lsls	r3, r4, #8
 8002b1c:	4644      	mov	r4, r8
 8002b1e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002b22:	4644      	mov	r4, r8
 8002b24:	0222      	lsls	r2, r4, #8
 8002b26:	ea40 0402 	orr.w	r4, r0, r2
 8002b2a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002b34:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002b38:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b3c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b44:	1c9a      	adds	r2, r3, #2
 8002b46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b4a:	4413      	add	r3, r2
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2200      	movs	r2, #0
 8002b52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002b66:	464c      	mov	r4, r9
 8002b68:	0423      	lsls	r3, r4, #16
 8002b6a:	4644      	mov	r4, r8
 8002b6c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002b70:	4644      	mov	r4, r8
 8002b72:	0422      	lsls	r2, r4, #16
 8002b74:	ea40 0402 	orr.w	r4, r0, r2
 8002b78:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b82:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002b86:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b8a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b92:	1cda      	adds	r2, r3, #3
 8002b94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b98:	4413      	add	r3, r2
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ba4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ba8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002bac:	4623      	mov	r3, r4
 8002bae:	0a1b      	lsrs	r3, r3, #8
 8002bb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002bb4:	4623      	mov	r3, r4
 8002bb6:	061b      	lsls	r3, r3, #24
 8002bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bbc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002bc0:	4623      	mov	r3, r4
 8002bc2:	4303      	orrs	r3, r0
 8002bc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bc8:	462b      	mov	r3, r5
 8002bca:	430b      	orrs	r3, r1
 8002bcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bd0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002bd4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002bd8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002bdc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002be0:	1d1a      	adds	r2, r3, #4
 8002be2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002be6:	4413      	add	r3, r2
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2200      	movs	r2, #0
 8002bee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bf2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002c02:	0023      	movs	r3, r4
 8002c04:	2200      	movs	r2, #0
 8002c06:	ea40 0402 	orr.w	r4, r0, r2
 8002c0a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002c0e:	430b      	orrs	r3, r1
 8002c10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002c14:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002c18:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002c1c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c20:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c24:	1d5a      	adds	r2, r3, #5
 8002c26:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c2a:	4413      	add	r3, r2
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2200      	movs	r2, #0
 8002c32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c36:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002c46:	0223      	lsls	r3, r4, #8
 8002c48:	2200      	movs	r2, #0
 8002c4a:	ea40 0402 	orr.w	r4, r0, r2
 8002c4e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002c52:	430b      	orrs	r3, r1
 8002c54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c58:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002c5c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002c60:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c64:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c68:	1d9a      	adds	r2, r3, #6
 8002c6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c6e:	4413      	add	r3, r2
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2200      	movs	r2, #0
 8002c76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002c8a:	0423      	lsls	r3, r4, #16
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	ea40 0402 	orr.w	r4, r0, r2
 8002c92:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002c96:	430b      	orrs	r3, r1
 8002c98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c9c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002ca0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002ca4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ca8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cac:	1dda      	adds	r2, r3, #7
 8002cae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cb2:	4413      	add	r3, r2
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002cce:	0623      	lsls	r3, r4, #24
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	ea40 0402 	orr.w	r4, r0, r2
 8002cd6:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002cda:	430b      	orrs	r3, r1
 8002cdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002ce0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002ce4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002ce8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002cec:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002cf0:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002cf4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cf8:	3308      	adds	r3, #8
 8002cfa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d0a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d0e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002d12:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d16:	4413      	add	r3, r2
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d22:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002d26:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	4303      	orrs	r3, r0
 8002d2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d30:	462b      	mov	r3, r5
 8002d32:	430b      	orrs	r3, r1
 8002d34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d36:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002d3a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d3e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d42:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d4c:	4413      	add	r3, r2
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2200      	movs	r2, #0
 8002d54:	673b      	str	r3, [r7, #112]	; 0x70
 8002d56:	677a      	str	r2, [r7, #116]	; 0x74
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d64:	464c      	mov	r4, r9
 8002d66:	0223      	lsls	r3, r4, #8
 8002d68:	4644      	mov	r4, r8
 8002d6a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d6e:	4644      	mov	r4, r8
 8002d70:	0222      	lsls	r2, r4, #8
 8002d72:	ea40 0402 	orr.w	r4, r0, r2
 8002d76:	66bc      	str	r4, [r7, #104]	; 0x68
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d7c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002d80:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d84:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d88:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d8c:	1c9a      	adds	r2, r3, #2
 8002d8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d92:	4413      	add	r3, r2
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2200      	movs	r2, #0
 8002d9a:	663b      	str	r3, [r7, #96]	; 0x60
 8002d9c:	667a      	str	r2, [r7, #100]	; 0x64
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002daa:	464c      	mov	r4, r9
 8002dac:	0423      	lsls	r3, r4, #16
 8002dae:	4644      	mov	r4, r8
 8002db0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002db4:	4644      	mov	r4, r8
 8002db6:	0422      	lsls	r2, r4, #16
 8002db8:	ea40 0402 	orr.w	r4, r0, r2
 8002dbc:	65bc      	str	r4, [r7, #88]	; 0x58
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dc2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002dc6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002dca:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002dce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dd2:	1cda      	adds	r2, r3, #3
 8002dd4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dd8:	4413      	add	r3, r2
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2200      	movs	r2, #0
 8002de0:	653b      	str	r3, [r7, #80]	; 0x50
 8002de2:	657a      	str	r2, [r7, #84]	; 0x54
 8002de4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002de8:	4623      	mov	r3, r4
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dee:	4623      	mov	r3, r4
 8002df0:	061b      	lsls	r3, r3, #24
 8002df2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002df4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002df8:	4623      	mov	r3, r4
 8002dfa:	4303      	orrs	r3, r0
 8002dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8002dfe:	462b      	mov	r3, r5
 8002e00:	430b      	orrs	r3, r1
 8002e02:	647b      	str	r3, [r7, #68]	; 0x44
 8002e04:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002e08:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002e0c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e14:	1d1a      	adds	r2, r3, #4
 8002e16:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e1a:	4413      	add	r3, r2
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2200      	movs	r2, #0
 8002e22:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002e30:	0023      	movs	r3, r4
 8002e32:	2200      	movs	r2, #0
 8002e34:	ea40 0402 	orr.w	r4, r0, r2
 8002e38:	633c      	str	r4, [r7, #48]	; 0x30
 8002e3a:	430b      	orrs	r3, r1
 8002e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e3e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002e42:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002e46:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e4a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e4e:	1d5a      	adds	r2, r3, #5
 8002e50:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e54:	4413      	add	r3, r2
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002e6a:	0223      	lsls	r3, r4, #8
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	ea40 0402 	orr.w	r4, r0, r2
 8002e72:	623c      	str	r4, [r7, #32]
 8002e74:	430b      	orrs	r3, r1
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
 8002e78:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002e7c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002e80:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e84:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e88:	3306      	adds	r3, #6
 8002e8a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002e8e:	4413      	add	r3, r2
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2200      	movs	r2, #0
 8002e96:	61bb      	str	r3, [r7, #24]
 8002e98:	61fa      	str	r2, [r7, #28]
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	69bc      	ldr	r4, [r7, #24]
 8002ea4:	0423      	lsls	r3, r4, #16
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	ea40 0402 	orr.w	r4, r0, r2
 8002eac:	613c      	str	r4, [r7, #16]
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002eb6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002eba:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ebe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ec2:	3307      	adds	r3, #7
 8002ec4:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002ec8:	4413      	add	r3, r2
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2200      	movs	r2, #0
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	60fa      	str	r2, [r7, #12]
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	68bc      	ldr	r4, [r7, #8]
 8002ede:	0623      	lsls	r3, r4, #24
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	ea40 0402 	orr.w	r4, r0, r2
 8002ee6:	603c      	str	r4, [r7, #0]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	607b      	str	r3, [r7, #4]
 8002eec:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002ef0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002ef4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002ef8:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002efc:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002f00:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f04:	3308      	adds	r3, #8
 8002f06:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002f0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002f14:	46bd      	mov	sp, r7
 8002f16:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f1a:	4770      	bx	lr

08002f1c <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	0800f168 	.word	0x0800f168

08002f38 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002f42:	4618      	mov	r0, r3
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	0800f180 	.word	0x0800f180

08002f54 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe faca 	bl	80014f8 <_ZN3ros3MsgC1Ev>
 8002f64:	4a08      	ldr	r2, [pc, #32]	; (8002f88 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fada 	bl	8002528 <_ZN13geometry_msgs7Vector3C1Ev>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3328      	adds	r3, #40	; 0x28
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fad5 	bl	8002528 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	0800f274 	.word	0x0800f274

08002f8c <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f103 0008 	add.w	r0, r3, #8
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	f7ff fae6 	bl	8002578 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f7ff fad9 	bl	8002578 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
      return offset;
 8002fce:	68fb      	ldr	r3, [r7, #12]
    }
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f103 0008 	add.w	r0, r3, #8
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	f7ff fc33 	bl	800285e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	4413      	add	r3, r2
 800300c:	4619      	mov	r1, r3
 800300e:	f7ff fc26 	bl	800285e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003012:	4602      	mov	r2, r0
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
     return offset;
 800301a:	68fb      	ldr	r3, [r7, #12]
    }
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	0800f1a4 	.word	0x0800f1a4

08003040 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	4b03      	ldr	r3, [pc, #12]	; (8003058 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	0800f1b8 	.word	0x0800f1b8

0800305c <_Z12vel_callbackRKN13geometry_msgs5TwistE>:
#include <ros.h>
#include <rosserial.h>
#include "geometry_msgs/TwistWithCovariance.h"

void vel_callback(const geometry_msgs::Twist &msg)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
	linearvelocity_x = msg.linear.x;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800306a:	490a      	ldr	r1, [pc, #40]	; (8003094 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 800306c:	e9c1 2300 	strd	r2, r3, [r1]
	linearvelocity_y = msg.linear.y;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003076:	4908      	ldr	r1, [pc, #32]	; (8003098 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x3c>)
 8003078:	e9c1 2300 	strd	r2, r3, [r1]
	angularvelocity = msg.angular.z;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003082:	4906      	ldr	r1, [pc, #24]	; (800309c <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x40>)
 8003084:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	240000c0 	.word	0x240000c0
 8003098:	240000c8 	.word	0x240000c8
 800309c:	240000d0 	.word	0x240000d0

080030a0 <HAL_UART_TxCpltCallback>:
//----------------------------definition of ros----------------------------
ros::NodeHandle nh;
ros::Subscriber<geometry_msgs::Twist> vel_sub("/cmd_vel", vel_callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 80030a8:	4805      	ldr	r0, [pc, #20]	; (80030c0 <HAL_UART_TxCpltCallback+0x20>)
 80030aa:	f000 f947 	bl	800333c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 80030ae:	4603      	mov	r3, r0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff f989 	bl	80023c8 <_ZN13STM32Hardware5flushEv>
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	2400247c 	.word	0x2400247c

080030c4 <Rosserial_Init>:

void Rosserial_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
    nh.initNode();
 80030c8:	4804      	ldr	r0, [pc, #16]	; (80030dc <Rosserial_Init+0x18>)
 80030ca:	f000 f943 	bl	8003354 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
    nh.subscribe(vel_sub);
 80030ce:	4904      	ldr	r1, [pc, #16]	; (80030e0 <Rosserial_Init+0x1c>)
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <Rosserial_Init+0x18>)
 80030d2:	f000 f968 	bl	80033a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	2400247c 	.word	0x2400247c
 80030e0:	240035c0 	.word	0x240035c0

080030e4 <Rosserial_GetHardware>:
{
		return nh.config_state();
}

void Rosserial_GetHardware(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
		nh.getHardware()->init();
 80030e8:	4804      	ldr	r0, [pc, #16]	; (80030fc <Rosserial_GetHardware+0x18>)
 80030ea:	f000 f927 	bl	800333c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 80030ee:	4603      	mov	r3, r0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff f91f 	bl	8002334 <_ZN13STM32Hardware4initEv>
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	2400247c 	.word	0x2400247c

08003100 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2b03      	cmp	r3, #3
 8003112:	d80d      	bhi.n	8003130 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	fa22 f103 	lsr.w	r1, r2, r3
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4413      	add	r3, r2
 8003124:	b2ca      	uxtb	r2, r1
 8003126:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	3301      	adds	r3, #1
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	e7ee      	b.n	800310e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d811      	bhi.n	800317a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6839      	ldr	r1, [r7, #0]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	440a      	add	r2, r1
 8003160:	7812      	ldrb	r2, [r2, #0]
 8003162:	4611      	mov	r1, r2
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	00d2      	lsls	r2, r2, #3
 8003168:	fa01 f202 	lsl.w	r2, r1, r2
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3301      	adds	r3, #1
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	e7ea      	b.n	8003150 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800317a:	bf00      	nop
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	4a04      	ldr	r2, [pc, #16]	; (80031a4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	0800f2bc 	.word	0x0800f2bc

080031a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ffe8 	bl	8003188 <_ZN3ros15NodeHandleBase_C1Ev>
 80031b8:	4a45      	ldr	r2, [pc, #276]	; (80032d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x128>)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3304      	adds	r3, #4
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff f89a 	bl	80022fc <_ZN13STM32HardwareC1Ev>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	f241 1318 	movw	r3, #4376	; 0x1118
 80031da:	4413      	add	r3, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fe fcff 	bl	8001be0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b18      	cmp	r3, #24
 80031ea:	d80a      	bhi.n	8003202 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5a>
      publishers[i] = 0;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 80031f4:	2100      	movs	r1, #0
 80031f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	3301      	adds	r3, #1
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	e7f1      	b.n	80031e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b18      	cmp	r3, #24
 800320a:	d80b      	bhi.n	8003224 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7c>
      subscribers[i] = 0;
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	2200      	movs	r2, #0
 800321a:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	3301      	adds	r3, #1
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	e7f0      	b.n	8003206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5e>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322e:	d20a      	bcs.n	8003246 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9e>
      message_in[i] = 0;
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4413      	add	r3, r2
 8003236:	f603 0328 	addw	r3, r3, #2088	; 0x828
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3301      	adds	r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	e7f0      	b.n	8003228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003246:	2300      	movs	r3, #0
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003250:	d20a      	bcs.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xc0>
      message_out[i] = 0;
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4413      	add	r3, r2
 8003258:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 800325c:	2200      	movs	r2, #0
 800325e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	3301      	adds	r3, #1
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	e7f0      	b.n	800324a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa2>

    req_param_resp.ints_length = 0;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800326e:	461a      	mov	r2, r3
 8003270:	2300      	movs	r3, #0
 8003272:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    req_param_resp.ints = NULL;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800327c:	461a      	mov	r2, r3
 800327e:	2300      	movs	r3, #0
 8003280:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    req_param_resp.floats_length = 0;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800328a:	461a      	mov	r2, r3
 800328c:	2300      	movs	r3, #0
 800328e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    req_param_resp.floats = NULL;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003298:	461a      	mov	r2, r3
 800329a:	2300      	movs	r3, #0
 800329c:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
    req_param_resp.ints_length = 0;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032a6:	461a      	mov	r2, r3
 80032a8:	2300      	movs	r3, #0
 80032aa:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    req_param_resp.ints = NULL;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032b4:	461a      	mov	r2, r3
 80032b6:	2300      	movs	r3, #0
 80032b8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

    spin_timeout_ = 0;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  }
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	0800f260 	.word	0x0800f260

080032d4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	4a04      	ldr	r2, [pc, #16]	; (80032f0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	0800f2a4 	.word	0x0800f2a4

080032f4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ffe5 	bl	80032d4 <_ZN3ros11Subscriber_C1Ev>
 800330a:	4a0b      	ldr	r2, [pc, #44]	; (8003338 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	3310      	adds	r3, #16
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fe1d 	bl	8002f54 <_ZN13geometry_msgs5TwistC1Ev>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	659a      	str	r2, [r3, #88]	; 0x58
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	609a      	str	r2, [r3, #8]
  };
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	0800f248 	.word	0x0800f248

0800333c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:

  Hardware* getHardware()
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
  }
 8003348:	4618      	mov	r0, r3
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3304      	adds	r3, #4
 8003360:	4618      	mov	r0, r3
 8003362:	f7fe ffe7 	bl	8002334 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800336c:	461a      	mov	r2, r3
 800336e:	2300      	movs	r3, #0
 8003370:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    bytes_ = 0;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800337a:	461a      	mov	r2, r3
 800337c:	2300      	movs	r3, #0
 800337e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    index_ = 0;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003388:	461a      	mov	r2, r3
 800338a:	2300      	movs	r3, #0
 800338c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    topic_ = 0;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003396:	461a      	mov	r2, r3
 8003398:	2300      	movs	r3, #0
 800339a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
  };
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80033a6:	b480      	push	{r7}
 80033a8:	b085      	sub	sp, #20
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b18      	cmp	r3, #24
 80033b8:	dc1b      	bgt.n	80033f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f203 4322 	addw	r3, r3, #1058	; 0x422
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10e      	bne.n	80033ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f203 4322 	addw	r3, r3, #1058	; 0x422
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	605a      	str	r2, [r3, #4]
        return true;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e004      	b.n	80033f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3301      	adds	r3, #1
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e7e0      	b.n	80033b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 80033f2:	2300      	movs	r3, #0
  }
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3304      	adds	r3, #4
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff f880 	bl	8002512 <_ZN13STM32Hardware4timeEv>
 8003412:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800341a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003426:	4293      	cmp	r3, r2
 8003428:	d905      	bls.n	8003436 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    if (mode_ != MODE_FIRST_FF)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800343c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00e      	beq.n	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800344a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	429a      	cmp	r2, r3
 8003452:	d906      	bls.n	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800345a:	461a      	mov	r2, r3
 800345c:	2300      	movs	r3, #0
 800345e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      if (spin_timeout_ > 0)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8003468:	2b00      	cmp	r3, #0
 800346a:	d014      	beq.n	8003496 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3304      	adds	r3, #4
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff f84e 	bl	8002512 <_ZN13STM32Hardware4timeEv>
 8003476:	4602      	mov	r2, r0
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1ad2      	subs	r2, r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8003482:	429a      	cmp	r2, r3
 8003484:	bf8c      	ite	hi
 8003486:	2301      	movhi	r3, #1
 8003488:	2300      	movls	r3, #0
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 8003490:	f06f 0301 	mvn.w	r3, #1
 8003494:	e221      	b.n	80038da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      int data = hardware_.read();
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3304      	adds	r3, #4
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe ff66 	bl	800236c <_ZN13STM32Hardware4readEv>
 80034a0:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f2c0 81fa 	blt.w	800389e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x49e>
      checksum_ += data;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034b0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4413      	add	r3, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034be:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034cc:	2b07      	cmp	r3, #7
 80034ce:	d12b      	bne.n	8003528 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x128>
        message_in[index_++] = data;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034d6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80034e2:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	b2d1      	uxtb	r1, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	4413      	add	r3, r2
 80034ee:	460a      	mov	r2, r1
 80034f0:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
        bytes_--;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034fe:	3b01      	subs	r3, #1
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003506:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003510:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1a4      	bne.n	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800351e:	461a      	mov	r2, r3
 8003520:	2308      	movs	r3, #8
 8003522:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003526:	e79c      	b.n	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800352e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d130      	bne.n	8003598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x198>
        if (data == 0xff)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2bff      	cmp	r3, #255	; 0xff
 800353a:	d112      	bne.n	8003562 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003546:	3301      	adds	r3, #1
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800354e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	3314      	adds	r3, #20
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800355c:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
 8003560:	e77f      	b.n	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3304      	adds	r3, #4
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe ffd3 	bl	8002512 <_ZN13STM32Hardware4timeEv>
 800356c:	4602      	mov	r2, r0
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	bf8c      	ite	hi
 800357a:	2301      	movhi	r3, #1
 800357c:	2300      	movls	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	f43f af6e 	beq.w	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
          return SPIN_TIMEOUT;
 8003592:	f06f 0301 	mvn.w	r3, #1
 8003596:	e1a0      	b.n	80038da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800359e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d121      	bne.n	80035ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ea>
        if (data == PROTOCOL_VER)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2bfe      	cmp	r3, #254	; 0xfe
 80035aa:	d10b      	bne.n	80035c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1c4>
          mode_++;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035b6:	3301      	adds	r3, #1
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035c2:	e74e      	b.n	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ca:	461a      	mov	r2, r3
 80035cc:	2300      	movs	r3, #0
 80035ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
          if (configured_ == false)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f47f af40 	bne.w	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f97d 	bl	80038e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 80035e8:	e73b      	b.n	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d120      	bne.n	800363a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23a>
        bytes_ = data;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035fe:	461a      	mov	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        index_ = 0;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800360c:	461a      	mov	r2, r3
 800360e:	2300      	movs	r3, #0
 8003610:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
        mode_++;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800361a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800361e:	3301      	adds	r3, #1
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003626:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        checksum_ = data;               /* first byte for calculating size checksum */
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003630:	461a      	mov	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8003638:	e713      	b.n	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003644:	2b03      	cmp	r3, #3
 8003646:	d118      	bne.n	800367a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27a>
        bytes_ += data << 8;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800364e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	4413      	add	r3, r2
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800365e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800366c:	3301      	adds	r3, #1
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003674:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003678:	e6f3      	b.n	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003684:	2b04      	cmp	r3, #4
 8003686:	d11f      	bne.n	80036c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c8>
        if ((checksum_ % 256) == 255)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800368e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003692:	425a      	negs	r2, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	bf58      	it	pl
 800369a:	4253      	negpl	r3, r2
 800369c:	2bff      	cmp	r3, #255	; 0xff
 800369e:	d10b      	bne.n	80036b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b8>
          mode_++;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036aa:	3301      	adds	r3, #1
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80036b6:	e6d4      	b.n	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036be:	461a      	mov	r2, r3
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80036c6:	e6cc      	b.n	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036d2:	2b05      	cmp	r3, #5
 80036d4:	d119      	bne.n	800370a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30a>
        topic_ = data;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036dc:	461a      	mov	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036ee:	3301      	adds	r3, #1
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        checksum_ = data;               /* first byte included in checksum */
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003700:	461a      	mov	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8003708:	e6ab      	b.n	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003714:	2b06      	cmp	r3, #6
 8003716:	d123      	bne.n	8003760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x360>
        topic_ += data << 8;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800371e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	4413      	add	r3, r2
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800372e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_ = MODE_MESSAGE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003738:	461a      	mov	r2, r3
 800373a:	2307      	movs	r3, #7
 800373c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003746:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800374a:	2b00      	cmp	r3, #0
 800374c:	f47f ae89 	bne.w	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003756:	461a      	mov	r2, r3
 8003758:	2308      	movs	r3, #8
 800375a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800375e:	e680      	b.n	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800376a:	2b08      	cmp	r3, #8
 800376c:	f47f ae79 	bne.w	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003776:	461a      	mov	r2, r3
 8003778:	2300      	movs	r3, #0
 800377a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if ((checksum_ % 256) == 255)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003784:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003788:	425a      	negs	r2, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	bf58      	it	pl
 8003790:	4253      	negpl	r3, r2
 8003792:	2bff      	cmp	r3, #255	; 0xff
 8003794:	f47f ae65 	bne.w	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800379e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d116      	bne.n	80037d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d4>
            requestSyncTime();
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f89b 	bl	80038e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f8b6 	bl	800391e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b8:	461a      	mov	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            last_sync_receive_time = c_time;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037c6:	461a      	mov	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            return SPIN_ERR;
 80037ce:	f04f 33ff 	mov.w	r3, #4294967295
 80037d2:	e082      	b.n	80038da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
          else if (topic_ == TopicInfo::ID_TIME)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037da:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80037de:	2b0a      	cmp	r3, #10
 80037e0:	d107      	bne.n	80037f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f2>
            syncTime(message_in);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f603 0328 	addw	r3, r3, #2088	; 0x828
 80037e8:	4619      	mov	r1, r3
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f97a 	bl	8003ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 80037f0:	e637      	b.n	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80037fc:	2b06      	cmp	r3, #6
 80037fe:	d111      	bne.n	8003824 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
            req_param_resp.deserialize(message_in);
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	f241 1318 	movw	r3, #4376	; 0x1118
 8003806:	4413      	add	r3, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	f602 0228 	addw	r2, r2, #2088	; 0x828
 800380e:	4611      	mov	r1, r2
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe fb1a 	bl	8001e4a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8003822:	e61e      	b.n	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800382a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800382e:	2b0b      	cmp	r3, #11
 8003830:	d106      	bne.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x440>
            configured_ = false;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 800383e:	e610      	b.n	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003846:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800384a:	3b64      	subs	r3, #100	; 0x64
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	f43f ae02 	beq.w	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003864:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003868:	3b64      	subs	r3, #100	; 0x64
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	6858      	ldr	r0, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800387c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003880:	3b64      	subs	r3, #100	; 0x64
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	f602 0228 	addw	r2, r2, #2088	; 0x828
 8003898:	4611      	mov	r1, r2
 800389a:	4798      	blx	r3
    while (true)
 800389c:	e5e1      	b.n	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 800389e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038a6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d014      	beq.n	80038d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d909      	bls.n	80038d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
      requestSyncTime();
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f80c 	bl	80038e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d0:	461a      	mov	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    return SPIN_OK;
 80038d8:	2300      	movs	r3, #0
  }
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b086      	sub	sp, #24
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80038ea:	f107 030c 	add.w	r3, r7, #12
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fd fe12 	bl	8001518 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f107 020c 	add.w	r2, r7, #12
 80038fe:	210a      	movs	r1, #10
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
    rt_time = hardware_.time();
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3304      	adds	r3, #4
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe fe02 	bl	8002512 <_ZN13STM32Hardware4timeEv>
 800390e:	4602      	mov	r2, r0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
  }
 8003916:	bf00      	nop
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800391e:	b590      	push	{r4, r7, lr}
 8003920:	b08b      	sub	sp, #44	; 0x2c
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003926:	f107 030c 	add.w	r3, r7, #12
 800392a:	4618      	mov	r0, r3
 800392c:	f7fd fee4 	bl	80016f8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003930:	2300      	movs	r3, #0
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	2b18      	cmp	r3, #24
 8003938:	dc5b      	bgt.n	80039f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393e:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d04f      	beq.n	80039ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394e:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	b29b      	uxth	r3, r3
 800395a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003960:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003970:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003978:	6859      	ldr	r1, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397e:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3308      	adds	r3, #8
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4608      	mov	r0, r1
 8003990:	4798      	blx	r3
 8003992:	4603      	mov	r3, r0
 8003994:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399a:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 800399e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a2:	6859      	ldr	r1, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a8:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 80039ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	330c      	adds	r3, #12
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4608      	mov	r0, r1
 80039ba:	4798      	blx	r3
 80039bc:	4603      	mov	r3, r0
 80039be:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80039c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039c4:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681c      	ldr	r4, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d0:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 80039d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fe fbc3 	bl	8002164 <_ZN3ros9Publisher15getEndpointTypeEv>
 80039de:	4601      	mov	r1, r0
 80039e0:	f107 030c 	add.w	r3, r7, #12
 80039e4:	461a      	mov	r2, r3
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	3301      	adds	r3, #1
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
 80039f0:	e7a0      	b.n	8003934 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80039f2:	2300      	movs	r3, #0
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	2b18      	cmp	r3, #24
 80039fa:	dc68      	bgt.n	8003ace <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d05b      	beq.n	8003ac6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	6859      	ldr	r1, [r3, #4]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3308      	adds	r3, #8
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4608      	mov	r0, r1
 8003a58:	4798      	blx	r3
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4608      	mov	r0, r1
 8003a82:	4798      	blx	r3
 8003a84:	4603      	mov	r3, r0
 8003a86:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a8c:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681c      	ldr	r4, [r3, #0]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	6859      	ldr	r1, [r3, #4]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4608      	mov	r0, r1
 8003ab8:	4798      	blx	r3
 8003aba:	4601      	mov	r1, r0
 8003abc:	f107 030c 	add.w	r3, r7, #12
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	3301      	adds	r3, #1
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
 8003acc:	e793      	b.n	80039f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
  }
 8003ada:	bf00      	nop
 8003adc:	372c      	adds	r7, #44	; 0x2c
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd90      	pop	{r4, r7, pc}
	...

08003ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003aee:	f107 0308 	add.w	r3, r7, #8
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd fd10 	bl	8001518 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3304      	adds	r3, #4
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fe fd08 	bl	8002512 <_ZN13STM32Hardware4timeEv>
 8003b02:	4602      	mov	r2, r0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003b0e:	f107 0308 	add.w	r3, r7, #8
 8003b12:	6839      	ldr	r1, [r7, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fd fd6f 	bl	80015f8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	4916      	ldr	r1, [pc, #88]	; (8003b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003b20:	fba1 1303 	umull	r1, r3, r1, r3
 8003b24:	099b      	lsrs	r3, r3, #6
 8003b26:	4413      	add	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003b2a:	6939      	ldr	r1, [r7, #16]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003b30:	fba3 0302 	umull	r0, r3, r3, r2
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b3a:	fb00 f303 	mul.w	r3, r0, r3
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	4a0e      	ldr	r2, [pc, #56]	; (8003b7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 8003b42:	fb02 f303 	mul.w	r3, r2, r3
 8003b46:	440b      	add	r3, r1
 8003b48:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003b4a:	f107 0308 	add.w	r3, r7, #8
 8003b4e:	3304      	adds	r3, #4
 8003b50:	4619      	mov	r1, r3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f8aa 	bl	8003cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe fcd8 	bl	8002512 <_ZN13STM32Hardware4timeEv>
 8003b62:	4602      	mov	r2, r0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b6a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
 8003b6e:	bf00      	nop
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	10624dd3 	.word	0x10624dd3
 8003b7c:	000f4240 	.word	0x000f4240

08003b80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b63      	cmp	r3, #99	; 0x63
 8003b90:	dd0b      	ble.n	8003baa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b98:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8003b9c:	f083 0301 	eor.w	r3, r3, #1
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e079      	b.n	8003c9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	f602 4228 	addw	r2, r2, #3112	; 0xc28
 8003bb6:	3207      	adds	r2, #7
 8003bb8:	4611      	mov	r1, r2
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4798      	blx	r3
 8003bbe:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	22ff      	movs	r2, #255	; 0xff
 8003bc4:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[1] = PROTOCOL_VER;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	22fe      	movs	r2, #254	; 0xfe
 8003bcc:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	0a1b      	lsrs	r3, r3, #8
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f883 2c2b 	strb.w	r2, [r3, #3115]	; 0xc2b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 2c2a 	ldrb.w	r2, [r3, #3114]	; 0xc2a
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f893 3c2b 	ldrb.w	r3, [r3, #3115]	; 0xc2b
 8003bf6:	4413      	add	r3, r2
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f883 2c2c 	strb.w	r2, [r3, #3116]	; 0xc2c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f883 2c2d 	strb.w	r2, [r3, #3117]	; 0xc2d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	b21b      	sxth	r3, r3
 8003c12:	121b      	asrs	r3, r3, #8
 8003c14:	b21b      	sxth	r3, r3
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f883 2c2e 	strb.w	r2, [r3, #3118]	; 0xc2e

    /* calculate checksum */
    int chk = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003c22:	2305      	movs	r3, #5
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	3306      	adds	r3, #6
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	dc0d      	bgt.n	8003c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	4413      	add	r3, r2
 8003c36:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	4413      	add	r3, r2
 8003c42:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	3301      	adds	r3, #1
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	e7ec      	b.n	8003c26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	3307      	adds	r3, #7
 8003c50:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	425a      	negs	r2, r3
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	bf58      	it	pl
 8003c5c:	4253      	negpl	r3, r2
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	1c59      	adds	r1, r3, #1
 8003c64:	6179      	str	r1, [r7, #20]
 8003c66:	43d2      	mvns	r2, r2
 8003c68:	b2d1      	uxtb	r1, r2
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	460a      	mov	r2, r1
 8003c70:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28

    if (l <= OUTPUT_SIZE)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c7a:	dc0a      	bgt.n	8003c92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x112>
    {
      hardware_.write(message_out, l);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	1d18      	adds	r0, r3, #4
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f7fe fbfb 	bl	8002484 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	e005      	b.n	8003c9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003c92:	4905      	ldr	r1, [pc, #20]	; (8003ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x128>)
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f849 	bl	8003d2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8003c9a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	0800f1dc 	.word	0x0800f1dc

08003cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe fc29 	bl	8002512 <_ZN13STM32Hardware4timeEv>
 8003cc0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4915      	ldr	r1, [pc, #84]	; (8003d20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003cca:	fba1 1303 	umull	r1, r3, r1, r3
 8003cce:	099b      	lsrs	r3, r3, #6
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	1e5a      	subs	r2, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6859      	ldr	r1, [r3, #4]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003ce2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ce6:	099b      	lsrs	r3, r3, #6
 8003ce8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cec:	fb00 f303 	mul.w	r3, r0, r3
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	4a0c      	ldr	r2, [pc, #48]	; (8003d24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 8003cf4:	fb02 f303 	mul.w	r3, r2, r3
 8003cf8:	1aca      	subs	r2, r1, r3
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 8003cfc:	4413      	add	r3, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	f8c2 3820 	str.w	r3, [r2, #2080]	; 0x820
    normalizeSecNSec(sec_offset, nsec_offset);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f603 021c 	addw	r2, r3, #2076	; 0x81c
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	f7fc fc86 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003d18:	bf00      	nop
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	10624dd3 	.word	0x10624dd3
 8003d24:	000f4240 	.word	0x000f4240
 8003d28:	3b9aca00 	.word	0x3b9aca00

08003d2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	2103      	movs	r1, #3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f804 	bl	8003d48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	460b      	mov	r3, r1
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003d56:	f107 0314 	add.w	r3, r7, #20
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fd fe90 	bl	8001a80 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003d60:	7afb      	ldrb	r3, [r7, #11]
 8003d62:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f107 0214 	add.w	r2, r7, #20
 8003d72:	2107      	movs	r1, #7
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	4798      	blx	r3
  }
 8003d78:	bf00      	nop
 8003d7a:	3720      	adds	r7, #32
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <_Z41__static_initialization_and_destruction_0ii>:
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d10d      	bne.n	8003dac <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d108      	bne.n	8003dac <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 8003d9a:	4806      	ldr	r0, [pc, #24]	; (8003db4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003d9c:	f7ff fa04 	bl	80031a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> vel_sub("/cmd_vel", vel_callback);
 8003da0:	2301      	movs	r3, #1
 8003da2:	4a05      	ldr	r2, [pc, #20]	; (8003db8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003da4:	4905      	ldr	r1, [pc, #20]	; (8003dbc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003da6:	4806      	ldr	r0, [pc, #24]	; (8003dc0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003da8:	f7ff faa4 	bl	80032f4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8003dac:	bf00      	nop
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	2400247c 	.word	0x2400247c
 8003db8:	0800305d 	.word	0x0800305d
 8003dbc:	0800f218 	.word	0x0800f218
 8003dc0:	240035c0 	.word	0x240035c0

08003dc4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3310      	adds	r3, #16
 8003dd2:	6839      	ldr	r1, [r7, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff f8ff 	bl	8002fd8 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	3210      	adds	r2, #16
 8003de2:	4610      	mov	r0, r2
 8003de4:	4798      	blx	r3
  }
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3310      	adds	r3, #16
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff f906 	bl	8003024 <_ZN13geometry_msgs5Twist7getTypeEv>
 8003e18:	4603      	mov	r3, r0
  }
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3310      	adds	r3, #16
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff f906 	bl	8003040 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003e34:	4603      	mov	r3, r0
  }
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
    return configured_;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
  };
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <_GLOBAL__sub_I__Z12vel_callbackRKN13geometry_msgs5TwistE>:
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e64:	2001      	movs	r0, #1
 8003e66:	f7ff ff8b 	bl	8003d80 <_Z41__static_initialization_and_destruction_0ii>
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e72:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <HAL_MspInit+0x30>)
 8003e74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e78:	4a08      	ldr	r2, [pc, #32]	; (8003e9c <HAL_MspInit+0x30>)
 8003e7a:	f043 0302 	orr.w	r3, r3, #2
 8003e7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_MspInit+0x30>)
 8003e84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	607b      	str	r3, [r7, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	58024400 	.word	0x58024400

08003ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ea4:	e7fe      	b.n	8003ea4 <NMI_Handler+0x4>

08003ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eaa:	e7fe      	b.n	8003eaa <HardFault_Handler+0x4>

08003eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eb0:	e7fe      	b.n	8003eb0 <MemManage_Handler+0x4>

08003eb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eb6:	e7fe      	b.n	8003eb6 <BusFault_Handler+0x4>

08003eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ebc:	e7fe      	b.n	8003ebc <UsageFault_Handler+0x4>

08003ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ec2:	bf00      	nop
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eec:	f000 ffa0 	bl	8004e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ef0:	bf00      	nop
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003ef8:	4802      	ldr	r0, [pc, #8]	; (8003f04 <DMA1_Stream0_IRQHandler+0x10>)
 8003efa:	f002 fdd9 	bl	8006ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	240038cc 	.word	0x240038cc

08003f08 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003f0c:	4802      	ldr	r0, [pc, #8]	; (8003f18 <DMA1_Stream1_IRQHandler+0x10>)
 8003f0e:	f002 fdcf 	bl	8006ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	24003944 	.word	0x24003944

08003f1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f20:	4802      	ldr	r0, [pc, #8]	; (8003f2c <TIM2_IRQHandler+0x10>)
 8003f22:	f007 fc83 	bl	800b82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	24003624 	.word	0x24003624

08003f30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f34:	4802      	ldr	r0, [pc, #8]	; (8003f40 <TIM3_IRQHandler+0x10>)
 8003f36:	f007 fc79 	bl	800b82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	24003670 	.word	0x24003670

08003f44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f48:	4802      	ldr	r0, [pc, #8]	; (8003f54 <TIM4_IRQHandler+0x10>)
 8003f4a:	f007 fc6f 	bl	800b82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	240036bc 	.word	0x240036bc

08003f58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f5c:	4802      	ldr	r0, [pc, #8]	; (8003f68 <USART1_IRQHandler+0x10>)
 8003f5e:	f008 feaf 	bl	800ccc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	24003838 	.word	0x24003838

08003f6c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003f70:	4802      	ldr	r0, [pc, #8]	; (8003f7c <TIM5_IRQHandler+0x10>)
 8003f72:	f007 fc5b 	bl	800b82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	24003708 	.word	0x24003708

08003f80 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8003f84:	4802      	ldr	r0, [pc, #8]	; (8003f90 <TIM23_IRQHandler+0x10>)
 8003f86:	f007 fc51 	bl	800b82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	240037ec 	.word	0x240037ec

08003f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return 1;
 8003f98:	2301      	movs	r3, #1
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <_kill>:

int _kill(int pid, int sig)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fae:	f00a fea3 	bl	800ecf8 <__errno>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2216      	movs	r2, #22
 8003fb6:	601a      	str	r2, [r3, #0]
  return -1;
 8003fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <_exit>:

void _exit (int status)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff ffe7 	bl	8003fa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fd6:	e7fe      	b.n	8003fd6 <_exit+0x12>

08003fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fe0:	4a14      	ldr	r2, [pc, #80]	; (8004034 <_sbrk+0x5c>)
 8003fe2:	4b15      	ldr	r3, [pc, #84]	; (8004038 <_sbrk+0x60>)
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fec:	4b13      	ldr	r3, [pc, #76]	; (800403c <_sbrk+0x64>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d102      	bne.n	8003ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ff4:	4b11      	ldr	r3, [pc, #68]	; (800403c <_sbrk+0x64>)
 8003ff6:	4a12      	ldr	r2, [pc, #72]	; (8004040 <_sbrk+0x68>)
 8003ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ffa:	4b10      	ldr	r3, [pc, #64]	; (800403c <_sbrk+0x64>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4413      	add	r3, r2
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	429a      	cmp	r2, r3
 8004006:	d207      	bcs.n	8004018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004008:	f00a fe76 	bl	800ecf8 <__errno>
 800400c:	4603      	mov	r3, r0
 800400e:	220c      	movs	r2, #12
 8004010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004012:	f04f 33ff 	mov.w	r3, #4294967295
 8004016:	e009      	b.n	800402c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004018:	4b08      	ldr	r3, [pc, #32]	; (800403c <_sbrk+0x64>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800401e:	4b07      	ldr	r3, [pc, #28]	; (800403c <_sbrk+0x64>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4413      	add	r3, r2
 8004026:	4a05      	ldr	r2, [pc, #20]	; (800403c <_sbrk+0x64>)
 8004028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800402a:	68fb      	ldr	r3, [r7, #12]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	24050000 	.word	0x24050000
 8004038:	00000400 	.word	0x00000400
 800403c:	24003620 	.word	0x24003620
 8004040:	240039d0 	.word	0x240039d0

08004044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004048:	4b32      	ldr	r3, [pc, #200]	; (8004114 <SystemInit+0xd0>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	4a31      	ldr	r2, [pc, #196]	; (8004114 <SystemInit+0xd0>)
 8004050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004058:	4b2f      	ldr	r3, [pc, #188]	; (8004118 <SystemInit+0xd4>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 030f 	and.w	r3, r3, #15
 8004060:	2b06      	cmp	r3, #6
 8004062:	d807      	bhi.n	8004074 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004064:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <SystemInit+0xd4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f023 030f 	bic.w	r3, r3, #15
 800406c:	4a2a      	ldr	r2, [pc, #168]	; (8004118 <SystemInit+0xd4>)
 800406e:	f043 0307 	orr.w	r3, r3, #7
 8004072:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004074:	4b29      	ldr	r3, [pc, #164]	; (800411c <SystemInit+0xd8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a28      	ldr	r2, [pc, #160]	; (800411c <SystemInit+0xd8>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004080:	4b26      	ldr	r3, [pc, #152]	; (800411c <SystemInit+0xd8>)
 8004082:	2200      	movs	r2, #0
 8004084:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004086:	4b25      	ldr	r3, [pc, #148]	; (800411c <SystemInit+0xd8>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4924      	ldr	r1, [pc, #144]	; (800411c <SystemInit+0xd8>)
 800408c:	4b24      	ldr	r3, [pc, #144]	; (8004120 <SystemInit+0xdc>)
 800408e:	4013      	ands	r3, r2
 8004090:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004092:	4b21      	ldr	r3, [pc, #132]	; (8004118 <SystemInit+0xd4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800409e:	4b1e      	ldr	r3, [pc, #120]	; (8004118 <SystemInit+0xd4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 030f 	bic.w	r3, r3, #15
 80040a6:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <SystemInit+0xd4>)
 80040a8:	f043 0307 	orr.w	r3, r3, #7
 80040ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80040ae:	4b1b      	ldr	r3, [pc, #108]	; (800411c <SystemInit+0xd8>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80040b4:	4b19      	ldr	r3, [pc, #100]	; (800411c <SystemInit+0xd8>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80040ba:	4b18      	ldr	r3, [pc, #96]	; (800411c <SystemInit+0xd8>)
 80040bc:	2200      	movs	r2, #0
 80040be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80040c0:	4b16      	ldr	r3, [pc, #88]	; (800411c <SystemInit+0xd8>)
 80040c2:	4a18      	ldr	r2, [pc, #96]	; (8004124 <SystemInit+0xe0>)
 80040c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80040c6:	4b15      	ldr	r3, [pc, #84]	; (800411c <SystemInit+0xd8>)
 80040c8:	4a17      	ldr	r2, [pc, #92]	; (8004128 <SystemInit+0xe4>)
 80040ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80040cc:	4b13      	ldr	r3, [pc, #76]	; (800411c <SystemInit+0xd8>)
 80040ce:	4a17      	ldr	r2, [pc, #92]	; (800412c <SystemInit+0xe8>)
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80040d2:	4b12      	ldr	r3, [pc, #72]	; (800411c <SystemInit+0xd8>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80040d8:	4b10      	ldr	r3, [pc, #64]	; (800411c <SystemInit+0xd8>)
 80040da:	4a14      	ldr	r2, [pc, #80]	; (800412c <SystemInit+0xe8>)
 80040dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80040de:	4b0f      	ldr	r3, [pc, #60]	; (800411c <SystemInit+0xd8>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80040e4:	4b0d      	ldr	r3, [pc, #52]	; (800411c <SystemInit+0xd8>)
 80040e6:	4a11      	ldr	r2, [pc, #68]	; (800412c <SystemInit+0xe8>)
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80040ea:	4b0c      	ldr	r3, [pc, #48]	; (800411c <SystemInit+0xd8>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80040f0:	4b0a      	ldr	r3, [pc, #40]	; (800411c <SystemInit+0xd8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a09      	ldr	r2, [pc, #36]	; (800411c <SystemInit+0xd8>)
 80040f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80040fc:	4b07      	ldr	r3, [pc, #28]	; (800411c <SystemInit+0xd8>)
 80040fe:	2200      	movs	r2, #0
 8004100:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004102:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <SystemInit+0xec>)
 8004104:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004108:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800410a:	bf00      	nop
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	e000ed00 	.word	0xe000ed00
 8004118:	52002000 	.word	0x52002000
 800411c:	58024400 	.word	0x58024400
 8004120:	eaf6ed7f 	.word	0xeaf6ed7f
 8004124:	02020200 	.word	0x02020200
 8004128:	01ff0000 	.word	0x01ff0000
 800412c:	01010280 	.word	0x01010280
 8004130:	52004000 	.word	0x52004000

08004134 <MX_TIM2_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim23;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08c      	sub	sp, #48	; 0x30
 8004138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800413a:	f107 030c 	add.w	r3, r7, #12
 800413e:	2224      	movs	r2, #36	; 0x24
 8004140:	2100      	movs	r1, #0
 8004142:	4618      	mov	r0, r3
 8004144:	f00a fe10 	bl	800ed68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004148:	463b      	mov	r3, r7
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	605a      	str	r2, [r3, #4]
 8004150:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004152:	4b21      	ldr	r3, [pc, #132]	; (80041d8 <MX_TIM2_Init+0xa4>)
 8004154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004158:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800415a:	4b1f      	ldr	r3, [pc, #124]	; (80041d8 <MX_TIM2_Init+0xa4>)
 800415c:	2200      	movs	r2, #0
 800415e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004160:	4b1d      	ldr	r3, [pc, #116]	; (80041d8 <MX_TIM2_Init+0xa4>)
 8004162:	2200      	movs	r2, #0
 8004164:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004166:	4b1c      	ldr	r3, [pc, #112]	; (80041d8 <MX_TIM2_Init+0xa4>)
 8004168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800416c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800416e:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <MX_TIM2_Init+0xa4>)
 8004170:	2200      	movs	r2, #0
 8004172:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004174:	4b18      	ldr	r3, [pc, #96]	; (80041d8 <MX_TIM2_Init+0xa4>)
 8004176:	2200      	movs	r2, #0
 8004178:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800417a:	2303      	movs	r3, #3
 800417c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800417e:	2300      	movs	r3, #0
 8004180:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004182:	2301      	movs	r3, #1
 8004184:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004186:	2300      	movs	r3, #0
 8004188:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800418e:	2300      	movs	r3, #0
 8004190:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004192:	2301      	movs	r3, #1
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004196:	2300      	movs	r3, #0
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800419e:	f107 030c 	add.w	r3, r7, #12
 80041a2:	4619      	mov	r1, r3
 80041a4:	480c      	ldr	r0, [pc, #48]	; (80041d8 <MX_TIM2_Init+0xa4>)
 80041a6:	f007 fa0d 	bl	800b5c4 <HAL_TIM_Encoder_Init>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80041b0:	f7fd f98c 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041b4:	2300      	movs	r3, #0
 80041b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041bc:	463b      	mov	r3, r7
 80041be:	4619      	mov	r1, r3
 80041c0:	4805      	ldr	r0, [pc, #20]	; (80041d8 <MX_TIM2_Init+0xa4>)
 80041c2:	f008 fac7 	bl	800c754 <HAL_TIMEx_MasterConfigSynchronization>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80041cc:	f7fd f97e 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80041d0:	bf00      	nop
 80041d2:	3730      	adds	r7, #48	; 0x30
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	24003624 	.word	0x24003624

080041dc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08c      	sub	sp, #48	; 0x30
 80041e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80041e2:	f107 030c 	add.w	r3, r7, #12
 80041e6:	2224      	movs	r2, #36	; 0x24
 80041e8:	2100      	movs	r1, #0
 80041ea:	4618      	mov	r0, r3
 80041ec:	f00a fdbc 	bl	800ed68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041f0:	463b      	mov	r3, r7
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	605a      	str	r2, [r3, #4]
 80041f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80041fa:	4b21      	ldr	r3, [pc, #132]	; (8004280 <MX_TIM3_Init+0xa4>)
 80041fc:	4a21      	ldr	r2, [pc, #132]	; (8004284 <MX_TIM3_Init+0xa8>)
 80041fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004200:	4b1f      	ldr	r3, [pc, #124]	; (8004280 <MX_TIM3_Init+0xa4>)
 8004202:	2200      	movs	r2, #0
 8004204:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004206:	4b1e      	ldr	r3, [pc, #120]	; (8004280 <MX_TIM3_Init+0xa4>)
 8004208:	2200      	movs	r2, #0
 800420a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800420c:	4b1c      	ldr	r3, [pc, #112]	; (8004280 <MX_TIM3_Init+0xa4>)
 800420e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004212:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <MX_TIM3_Init+0xa4>)
 8004216:	2200      	movs	r2, #0
 8004218:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800421a:	4b19      	ldr	r3, [pc, #100]	; (8004280 <MX_TIM3_Init+0xa4>)
 800421c:	2200      	movs	r2, #0
 800421e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004220:	2303      	movs	r3, #3
 8004222:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004224:	2300      	movs	r3, #0
 8004226:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004228:	2301      	movs	r3, #1
 800422a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800422c:	2300      	movs	r3, #0
 800422e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004234:	2300      	movs	r3, #0
 8004236:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004238:	2301      	movs	r3, #1
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800423c:	2300      	movs	r3, #0
 800423e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004240:	2300      	movs	r3, #0
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004244:	f107 030c 	add.w	r3, r7, #12
 8004248:	4619      	mov	r1, r3
 800424a:	480d      	ldr	r0, [pc, #52]	; (8004280 <MX_TIM3_Init+0xa4>)
 800424c:	f007 f9ba 	bl	800b5c4 <HAL_TIM_Encoder_Init>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8004256:	f7fd f939 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800425a:	2300      	movs	r3, #0
 800425c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800425e:	2300      	movs	r3, #0
 8004260:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004262:	463b      	mov	r3, r7
 8004264:	4619      	mov	r1, r3
 8004266:	4806      	ldr	r0, [pc, #24]	; (8004280 <MX_TIM3_Init+0xa4>)
 8004268:	f008 fa74 	bl	800c754 <HAL_TIMEx_MasterConfigSynchronization>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8004272:	f7fd f92b 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004276:	bf00      	nop
 8004278:	3730      	adds	r7, #48	; 0x30
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	24003670 	.word	0x24003670
 8004284:	40000400 	.word	0x40000400

08004288 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08c      	sub	sp, #48	; 0x30
 800428c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800428e:	f107 030c 	add.w	r3, r7, #12
 8004292:	2224      	movs	r2, #36	; 0x24
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f00a fd66 	bl	800ed68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800429c:	463b      	mov	r3, r7
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	605a      	str	r2, [r3, #4]
 80042a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80042a6:	4b21      	ldr	r3, [pc, #132]	; (800432c <MX_TIM4_Init+0xa4>)
 80042a8:	4a21      	ldr	r2, [pc, #132]	; (8004330 <MX_TIM4_Init+0xa8>)
 80042aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80042ac:	4b1f      	ldr	r3, [pc, #124]	; (800432c <MX_TIM4_Init+0xa4>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042b2:	4b1e      	ldr	r3, [pc, #120]	; (800432c <MX_TIM4_Init+0xa4>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80042b8:	4b1c      	ldr	r3, [pc, #112]	; (800432c <MX_TIM4_Init+0xa4>)
 80042ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042c0:	4b1a      	ldr	r3, [pc, #104]	; (800432c <MX_TIM4_Init+0xa4>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042c6:	4b19      	ldr	r3, [pc, #100]	; (800432c <MX_TIM4_Init+0xa4>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80042cc:	2303      	movs	r3, #3
 80042ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80042d0:	2300      	movs	r3, #0
 80042d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80042d4:	2301      	movs	r3, #1
 80042d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80042d8:	2300      	movs	r3, #0
 80042da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80042e0:	2300      	movs	r3, #0
 80042e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80042e4:	2301      	movs	r3, #1
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80042e8:	2300      	movs	r3, #0
 80042ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80042f0:	f107 030c 	add.w	r3, r7, #12
 80042f4:	4619      	mov	r1, r3
 80042f6:	480d      	ldr	r0, [pc, #52]	; (800432c <MX_TIM4_Init+0xa4>)
 80042f8:	f007 f964 	bl	800b5c4 <HAL_TIM_Encoder_Init>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8004302:	f7fd f8e3 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004306:	2300      	movs	r3, #0
 8004308:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800430a:	2300      	movs	r3, #0
 800430c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800430e:	463b      	mov	r3, r7
 8004310:	4619      	mov	r1, r3
 8004312:	4806      	ldr	r0, [pc, #24]	; (800432c <MX_TIM4_Init+0xa4>)
 8004314:	f008 fa1e 	bl	800c754 <HAL_TIMEx_MasterConfigSynchronization>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800431e:	f7fd f8d5 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004322:	bf00      	nop
 8004324:	3730      	adds	r7, #48	; 0x30
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	240036bc 	.word	0x240036bc
 8004330:	40000800 	.word	0x40000800

08004334 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08c      	sub	sp, #48	; 0x30
 8004338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800433a:	f107 030c 	add.w	r3, r7, #12
 800433e:	2224      	movs	r2, #36	; 0x24
 8004340:	2100      	movs	r1, #0
 8004342:	4618      	mov	r0, r3
 8004344:	f00a fd10 	bl	800ed68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004348:	463b      	mov	r3, r7
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	605a      	str	r2, [r3, #4]
 8004350:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004352:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <MX_TIM5_Init+0xa4>)
 8004354:	4a21      	ldr	r2, [pc, #132]	; (80043dc <MX_TIM5_Init+0xa8>)
 8004356:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004358:	4b1f      	ldr	r3, [pc, #124]	; (80043d8 <MX_TIM5_Init+0xa4>)
 800435a:	2200      	movs	r2, #0
 800435c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800435e:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <MX_TIM5_Init+0xa4>)
 8004360:	2200      	movs	r2, #0
 8004362:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8004364:	4b1c      	ldr	r3, [pc, #112]	; (80043d8 <MX_TIM5_Init+0xa4>)
 8004366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800436a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800436c:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <MX_TIM5_Init+0xa4>)
 800436e:	2200      	movs	r2, #0
 8004370:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004372:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <MX_TIM5_Init+0xa4>)
 8004374:	2200      	movs	r2, #0
 8004376:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004378:	2303      	movs	r3, #3
 800437a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800437c:	2300      	movs	r3, #0
 800437e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004380:	2301      	movs	r3, #1
 8004382:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004384:	2300      	movs	r3, #0
 8004386:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800438c:	2300      	movs	r3, #0
 800438e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004390:	2301      	movs	r3, #1
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004394:	2300      	movs	r3, #0
 8004396:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004398:	2300      	movs	r3, #0
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800439c:	f107 030c 	add.w	r3, r7, #12
 80043a0:	4619      	mov	r1, r3
 80043a2:	480d      	ldr	r0, [pc, #52]	; (80043d8 <MX_TIM5_Init+0xa4>)
 80043a4:	f007 f90e 	bl	800b5c4 <HAL_TIM_Encoder_Init>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80043ae:	f7fd f88d 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043b2:	2300      	movs	r3, #0
 80043b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80043ba:	463b      	mov	r3, r7
 80043bc:	4619      	mov	r1, r3
 80043be:	4806      	ldr	r0, [pc, #24]	; (80043d8 <MX_TIM5_Init+0xa4>)
 80043c0:	f008 f9c8 	bl	800c754 <HAL_TIMEx_MasterConfigSynchronization>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80043ca:	f7fd f87f 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80043ce:	bf00      	nop
 80043d0:	3730      	adds	r7, #48	; 0x30
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	24003708 	.word	0x24003708
 80043dc:	40000c00 	.word	0x40000c00

080043e0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08a      	sub	sp, #40	; 0x28
 80043e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043e6:	f107 031c 	add.w	r3, r7, #28
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	605a      	str	r2, [r3, #4]
 80043f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043f2:	463b      	mov	r3, r7
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	605a      	str	r2, [r3, #4]
 80043fa:	609a      	str	r2, [r3, #8]
 80043fc:	60da      	str	r2, [r3, #12]
 80043fe:	611a      	str	r2, [r3, #16]
 8004400:	615a      	str	r2, [r3, #20]
 8004402:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004404:	4b27      	ldr	r3, [pc, #156]	; (80044a4 <MX_TIM12_Init+0xc4>)
 8004406:	4a28      	ldr	r2, [pc, #160]	; (80044a8 <MX_TIM12_Init+0xc8>)
 8004408:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800440a:	4b26      	ldr	r3, [pc, #152]	; (80044a4 <MX_TIM12_Init+0xc4>)
 800440c:	2200      	movs	r2, #0
 800440e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004410:	4b24      	ldr	r3, [pc, #144]	; (80044a4 <MX_TIM12_Init+0xc4>)
 8004412:	2200      	movs	r2, #0
 8004414:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 3000;
 8004416:	4b23      	ldr	r3, [pc, #140]	; (80044a4 <MX_TIM12_Init+0xc4>)
 8004418:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800441c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800441e:	4b21      	ldr	r3, [pc, #132]	; (80044a4 <MX_TIM12_Init+0xc4>)
 8004420:	2200      	movs	r2, #0
 8004422:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004424:	4b1f      	ldr	r3, [pc, #124]	; (80044a4 <MX_TIM12_Init+0xc4>)
 8004426:	2200      	movs	r2, #0
 8004428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800442a:	481e      	ldr	r0, [pc, #120]	; (80044a4 <MX_TIM12_Init+0xc4>)
 800442c:	f006 ff56 	bl	800b2dc <HAL_TIM_PWM_Init>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8004436:	f7fd f849 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800443e:	2300      	movs	r3, #0
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8004442:	f107 031c 	add.w	r3, r7, #28
 8004446:	4619      	mov	r1, r3
 8004448:	4816      	ldr	r0, [pc, #88]	; (80044a4 <MX_TIM12_Init+0xc4>)
 800444a:	f008 f983 	bl	800c754 <HAL_TIMEx_MasterConfigSynchronization>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8004454:	f7fd f83a 	bl	80014cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004458:	2360      	movs	r3, #96	; 0x60
 800445a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004460:	2300      	movs	r3, #0
 8004462:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004464:	2300      	movs	r3, #0
 8004466:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004468:	463b      	mov	r3, r7
 800446a:	2200      	movs	r2, #0
 800446c:	4619      	mov	r1, r3
 800446e:	480d      	ldr	r0, [pc, #52]	; (80044a4 <MX_TIM12_Init+0xc4>)
 8004470:	f007 fafc 	bl	800ba6c <HAL_TIM_PWM_ConfigChannel>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 800447a:	f7fd f827 	bl	80014cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800447e:	463b      	mov	r3, r7
 8004480:	2204      	movs	r2, #4
 8004482:	4619      	mov	r1, r3
 8004484:	4807      	ldr	r0, [pc, #28]	; (80044a4 <MX_TIM12_Init+0xc4>)
 8004486:	f007 faf1 	bl	800ba6c <HAL_TIM_PWM_ConfigChannel>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <MX_TIM12_Init+0xb4>
  {
    Error_Handler();
 8004490:	f7fd f81c 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8004494:	4803      	ldr	r0, [pc, #12]	; (80044a4 <MX_TIM12_Init+0xc4>)
 8004496:	f000 fa79 	bl	800498c <HAL_TIM_MspPostInit>

}
 800449a:	bf00      	nop
 800449c:	3728      	adds	r7, #40	; 0x28
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	24003754 	.word	0x24003754
 80044a8:	40001800 	.word	0x40001800

080044ac <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b098      	sub	sp, #96	; 0x60
 80044b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	605a      	str	r2, [r3, #4]
 80044bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	605a      	str	r2, [r3, #4]
 80044c8:	609a      	str	r2, [r3, #8]
 80044ca:	60da      	str	r2, [r3, #12]
 80044cc:	611a      	str	r2, [r3, #16]
 80044ce:	615a      	str	r2, [r3, #20]
 80044d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80044d2:	1d3b      	adds	r3, r7, #4
 80044d4:	2234      	movs	r2, #52	; 0x34
 80044d6:	2100      	movs	r1, #0
 80044d8:	4618      	mov	r0, r3
 80044da:	f00a fc45 	bl	800ed68 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80044de:	4b3a      	ldr	r3, [pc, #232]	; (80045c8 <MX_TIM15_Init+0x11c>)
 80044e0:	4a3a      	ldr	r2, [pc, #232]	; (80045cc <MX_TIM15_Init+0x120>)
 80044e2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80044e4:	4b38      	ldr	r3, [pc, #224]	; (80045c8 <MX_TIM15_Init+0x11c>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ea:	4b37      	ldr	r3, [pc, #220]	; (80045c8 <MX_TIM15_Init+0x11c>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3000;
 80044f0:	4b35      	ldr	r3, [pc, #212]	; (80045c8 <MX_TIM15_Init+0x11c>)
 80044f2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80044f6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044f8:	4b33      	ldr	r3, [pc, #204]	; (80045c8 <MX_TIM15_Init+0x11c>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80044fe:	4b32      	ldr	r3, [pc, #200]	; (80045c8 <MX_TIM15_Init+0x11c>)
 8004500:	2200      	movs	r2, #0
 8004502:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004504:	4b30      	ldr	r3, [pc, #192]	; (80045c8 <MX_TIM15_Init+0x11c>)
 8004506:	2200      	movs	r2, #0
 8004508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800450a:	482f      	ldr	r0, [pc, #188]	; (80045c8 <MX_TIM15_Init+0x11c>)
 800450c:	f006 fee6 	bl	800b2dc <HAL_TIM_PWM_Init>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8004516:	f7fc ffd9 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800451a:	2300      	movs	r3, #0
 800451c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800451e:	2300      	movs	r3, #0
 8004520:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004522:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004526:	4619      	mov	r1, r3
 8004528:	4827      	ldr	r0, [pc, #156]	; (80045c8 <MX_TIM15_Init+0x11c>)
 800452a:	f008 f913 	bl	800c754 <HAL_TIMEx_MasterConfigSynchronization>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8004534:	f7fc ffca 	bl	80014cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004538:	2360      	movs	r3, #96	; 0x60
 800453a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004540:	2300      	movs	r3, #0
 8004542:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004544:	2300      	movs	r3, #0
 8004546:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004548:	2300      	movs	r3, #0
 800454a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800454c:	2300      	movs	r3, #0
 800454e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004550:	2300      	movs	r3, #0
 8004552:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004554:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004558:	2200      	movs	r2, #0
 800455a:	4619      	mov	r1, r3
 800455c:	481a      	ldr	r0, [pc, #104]	; (80045c8 <MX_TIM15_Init+0x11c>)
 800455e:	f007 fa85 	bl	800ba6c <HAL_TIM_PWM_ConfigChannel>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8004568:	f7fc ffb0 	bl	80014cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800456c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004570:	2204      	movs	r2, #4
 8004572:	4619      	mov	r1, r3
 8004574:	4814      	ldr	r0, [pc, #80]	; (80045c8 <MX_TIM15_Init+0x11c>)
 8004576:	f007 fa79 	bl	800ba6c <HAL_TIM_PWM_ConfigChannel>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8004580:	f7fc ffa4 	bl	80014cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004584:	2300      	movs	r3, #0
 8004586:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004588:	2300      	movs	r3, #0
 800458a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800459c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80045a2:	2300      	movs	r3, #0
 80045a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80045a6:	1d3b      	adds	r3, r7, #4
 80045a8:	4619      	mov	r1, r3
 80045aa:	4807      	ldr	r0, [pc, #28]	; (80045c8 <MX_TIM15_Init+0x11c>)
 80045ac:	f008 f96e 	bl	800c88c <HAL_TIMEx_ConfigBreakDeadTime>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80045b6:	f7fc ff89 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80045ba:	4803      	ldr	r0, [pc, #12]	; (80045c8 <MX_TIM15_Init+0x11c>)
 80045bc:	f000 f9e6 	bl	800498c <HAL_TIM_MspPostInit>

}
 80045c0:	bf00      	nop
 80045c2:	3760      	adds	r7, #96	; 0x60
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	240037a0 	.word	0x240037a0
 80045cc:	40014000 	.word	0x40014000

080045d0 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045d6:	f107 0310 	add.w	r3, r7, #16
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	605a      	str	r2, [r3, #4]
 80045e0:	609a      	str	r2, [r3, #8]
 80045e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045e4:	1d3b      	adds	r3, r7, #4
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	605a      	str	r2, [r3, #4]
 80045ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80045ee:	4b1d      	ldr	r3, [pc, #116]	; (8004664 <MX_TIM23_Init+0x94>)
 80045f0:	4a1d      	ldr	r2, [pc, #116]	; (8004668 <MX_TIM23_Init+0x98>)
 80045f2:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 13;
 80045f4:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <MX_TIM23_Init+0x94>)
 80045f6:	220d      	movs	r2, #13
 80045f8:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045fa:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <MX_TIM23_Init+0x94>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 11999;
 8004600:	4b18      	ldr	r3, [pc, #96]	; (8004664 <MX_TIM23_Init+0x94>)
 8004602:	f642 62df 	movw	r2, #11999	; 0x2edf
 8004606:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004608:	4b16      	ldr	r3, [pc, #88]	; (8004664 <MX_TIM23_Init+0x94>)
 800460a:	2200      	movs	r2, #0
 800460c:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800460e:	4b15      	ldr	r3, [pc, #84]	; (8004664 <MX_TIM23_Init+0x94>)
 8004610:	2200      	movs	r2, #0
 8004612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8004614:	4813      	ldr	r0, [pc, #76]	; (8004664 <MX_TIM23_Init+0x94>)
 8004616:	f006 fd83 	bl	800b120 <HAL_TIM_Base_Init>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <MX_TIM23_Init+0x54>
  {
    Error_Handler();
 8004620:	f7fc ff54 	bl	80014cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004628:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 800462a:	f107 0310 	add.w	r3, r7, #16
 800462e:	4619      	mov	r1, r3
 8004630:	480c      	ldr	r0, [pc, #48]	; (8004664 <MX_TIM23_Init+0x94>)
 8004632:	f007 fb2f 	bl	800bc94 <HAL_TIM_ConfigClockSource>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <MX_TIM23_Init+0x70>
  {
    Error_Handler();
 800463c:	f7fc ff46 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004640:	2300      	movs	r3, #0
 8004642:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8004648:	1d3b      	adds	r3, r7, #4
 800464a:	4619      	mov	r1, r3
 800464c:	4805      	ldr	r0, [pc, #20]	; (8004664 <MX_TIM23_Init+0x94>)
 800464e:	f008 f881 	bl	800c754 <HAL_TIMEx_MasterConfigSynchronization>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <MX_TIM23_Init+0x8c>
  {
    Error_Handler();
 8004658:	f7fc ff38 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800465c:	bf00      	nop
 800465e:	3720      	adds	r7, #32
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	240037ec 	.word	0x240037ec
 8004668:	4000e000 	.word	0x4000e000

0800466c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b090      	sub	sp, #64	; 0x40
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004674:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	605a      	str	r2, [r3, #4]
 800467e:	609a      	str	r2, [r3, #8]
 8004680:	60da      	str	r2, [r3, #12]
 8004682:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468c:	d156      	bne.n	800473c <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800468e:	4b87      	ldr	r3, [pc, #540]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 8004690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004694:	4a85      	ldr	r2, [pc, #532]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 8004696:	f043 0301 	orr.w	r3, r3, #1
 800469a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800469e:	4b83      	ldr	r3, [pc, #524]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 80046a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046aa:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ac:	4b7f      	ldr	r3, [pc, #508]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 80046ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046b2:	4a7e      	ldr	r2, [pc, #504]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046bc:	4b7b      	ldr	r3, [pc, #492]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 80046be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ca:	4b78      	ldr	r3, [pc, #480]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 80046cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046d0:	4a76      	ldr	r2, [pc, #472]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 80046d2:	f043 0302 	orr.w	r3, r3, #2
 80046d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046da:	4b74      	ldr	r3, [pc, #464]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 80046dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	623b      	str	r3, [r7, #32]
 80046e6:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80046e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ee:	2302      	movs	r3, #2
 80046f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f6:	2300      	movs	r3, #0
 80046f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80046fa:	2301      	movs	r3, #1
 80046fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004702:	4619      	mov	r1, r3
 8004704:	486a      	ldr	r0, [pc, #424]	; (80048b0 <HAL_TIM_Encoder_MspInit+0x244>)
 8004706:	f003 fce5 	bl	80080d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800470a:	2308      	movs	r3, #8
 800470c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800470e:	2302      	movs	r3, #2
 8004710:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004712:	2300      	movs	r3, #0
 8004714:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004716:	2300      	movs	r3, #0
 8004718:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800471a:	2301      	movs	r3, #1
 800471c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800471e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004722:	4619      	mov	r1, r3
 8004724:	4863      	ldr	r0, [pc, #396]	; (80048b4 <HAL_TIM_Encoder_MspInit+0x248>)
 8004726:	f003 fcd5 	bl	80080d4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800472a:	2200      	movs	r2, #0
 800472c:	2100      	movs	r1, #0
 800472e:	201c      	movs	r0, #28
 8004730:	f000 fc9d 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004734:	201c      	movs	r0, #28
 8004736:	f000 fcb4 	bl	80050a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800473a:	e0b3      	b.n	80048a4 <HAL_TIM_Encoder_MspInit+0x238>
  else if(tim_encoderHandle->Instance==TIM3)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a5d      	ldr	r2, [pc, #372]	; (80048b8 <HAL_TIM_Encoder_MspInit+0x24c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d136      	bne.n	80047b4 <HAL_TIM_Encoder_MspInit+0x148>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004746:	4b59      	ldr	r3, [pc, #356]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 8004748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800474c:	4a57      	ldr	r2, [pc, #348]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 800474e:	f043 0302 	orr.w	r3, r3, #2
 8004752:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004756:	4b55      	ldr	r3, [pc, #340]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 8004758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004764:	4b51      	ldr	r3, [pc, #324]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 8004766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800476a:	4a50      	ldr	r2, [pc, #320]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 800476c:	f043 0302 	orr.w	r3, r3, #2
 8004770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004774:	4b4d      	ldr	r3, [pc, #308]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 8004776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	61bb      	str	r3, [r7, #24]
 8004780:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004782:	2330      	movs	r3, #48	; 0x30
 8004784:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004786:	2302      	movs	r3, #2
 8004788:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478a:	2300      	movs	r3, #0
 800478c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478e:	2300      	movs	r3, #0
 8004790:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004792:	2302      	movs	r3, #2
 8004794:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800479a:	4619      	mov	r1, r3
 800479c:	4845      	ldr	r0, [pc, #276]	; (80048b4 <HAL_TIM_Encoder_MspInit+0x248>)
 800479e:	f003 fc99 	bl	80080d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80047a2:	2200      	movs	r2, #0
 80047a4:	2100      	movs	r1, #0
 80047a6:	201d      	movs	r0, #29
 80047a8:	f000 fc61 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80047ac:	201d      	movs	r0, #29
 80047ae:	f000 fc78 	bl	80050a2 <HAL_NVIC_EnableIRQ>
}
 80047b2:	e077      	b.n	80048a4 <HAL_TIM_Encoder_MspInit+0x238>
  else if(tim_encoderHandle->Instance==TIM4)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a40      	ldr	r2, [pc, #256]	; (80048bc <HAL_TIM_Encoder_MspInit+0x250>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d137      	bne.n	800482e <HAL_TIM_Encoder_MspInit+0x1c2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80047be:	4b3b      	ldr	r3, [pc, #236]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 80047c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047c4:	4a39      	ldr	r2, [pc, #228]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 80047c6:	f043 0304 	orr.w	r3, r3, #4
 80047ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80047ce:	4b37      	ldr	r3, [pc, #220]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 80047d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80047dc:	4b33      	ldr	r3, [pc, #204]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 80047de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047e2:	4a32      	ldr	r2, [pc, #200]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 80047e4:	f043 0308 	orr.w	r3, r3, #8
 80047e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047ec:	4b2f      	ldr	r3, [pc, #188]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 80047ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80047fa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004800:	2302      	movs	r3, #2
 8004802:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004804:	2300      	movs	r3, #0
 8004806:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004808:	2300      	movs	r3, #0
 800480a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800480c:	2302      	movs	r3, #2
 800480e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004814:	4619      	mov	r1, r3
 8004816:	482a      	ldr	r0, [pc, #168]	; (80048c0 <HAL_TIM_Encoder_MspInit+0x254>)
 8004818:	f003 fc5c 	bl	80080d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800481c:	2200      	movs	r2, #0
 800481e:	2100      	movs	r1, #0
 8004820:	201e      	movs	r0, #30
 8004822:	f000 fc24 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004826:	201e      	movs	r0, #30
 8004828:	f000 fc3b 	bl	80050a2 <HAL_NVIC_EnableIRQ>
}
 800482c:	e03a      	b.n	80048a4 <HAL_TIM_Encoder_MspInit+0x238>
  else if(tim_encoderHandle->Instance==TIM5)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a24      	ldr	r2, [pc, #144]	; (80048c4 <HAL_TIM_Encoder_MspInit+0x258>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d135      	bne.n	80048a4 <HAL_TIM_Encoder_MspInit+0x238>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004838:	4b1c      	ldr	r3, [pc, #112]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 800483a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800483e:	4a1b      	ldr	r2, [pc, #108]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 8004840:	f043 0308 	orr.w	r3, r3, #8
 8004844:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004848:	4b18      	ldr	r3, [pc, #96]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 800484a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004856:	4b15      	ldr	r3, [pc, #84]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 8004858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800485c:	4a13      	ldr	r2, [pc, #76]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004866:	4b11      	ldr	r3, [pc, #68]	; (80048ac <HAL_TIM_Encoder_MspInit+0x240>)
 8004868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004874:	2303      	movs	r3, #3
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004878:	2302      	movs	r3, #2
 800487a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487c:	2300      	movs	r3, #0
 800487e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004880:	2300      	movs	r3, #0
 8004882:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004884:	2302      	movs	r3, #2
 8004886:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800488c:	4619      	mov	r1, r3
 800488e:	4808      	ldr	r0, [pc, #32]	; (80048b0 <HAL_TIM_Encoder_MspInit+0x244>)
 8004890:	f003 fc20 	bl	80080d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004894:	2200      	movs	r2, #0
 8004896:	2100      	movs	r1, #0
 8004898:	2032      	movs	r0, #50	; 0x32
 800489a:	f000 fbe8 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800489e:	2032      	movs	r0, #50	; 0x32
 80048a0:	f000 fbff 	bl	80050a2 <HAL_NVIC_EnableIRQ>
}
 80048a4:	bf00      	nop
 80048a6:	3740      	adds	r7, #64	; 0x40
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	58024400 	.word	0x58024400
 80048b0:	58020000 	.word	0x58020000
 80048b4:	58020400 	.word	0x58020400
 80048b8:	40000400 	.word	0x40000400
 80048bc:	40000800 	.word	0x40000800
 80048c0:	58020c00 	.word	0x58020c00
 80048c4:	40000c00 	.word	0x40000c00

080048c8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a16      	ldr	r2, [pc, #88]	; (8004930 <HAL_TIM_PWM_MspInit+0x68>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d10f      	bne.n	80048fa <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80048da:	4b16      	ldr	r3, [pc, #88]	; (8004934 <HAL_TIM_PWM_MspInit+0x6c>)
 80048dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048e0:	4a14      	ldr	r2, [pc, #80]	; (8004934 <HAL_TIM_PWM_MspInit+0x6c>)
 80048e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80048ea:	4b12      	ldr	r3, [pc, #72]	; (8004934 <HAL_TIM_PWM_MspInit+0x6c>)
 80048ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80048f8:	e013      	b.n	8004922 <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM15)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a0e      	ldr	r2, [pc, #56]	; (8004938 <HAL_TIM_PWM_MspInit+0x70>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d10e      	bne.n	8004922 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <HAL_TIM_PWM_MspInit+0x6c>)
 8004906:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800490a:	4a0a      	ldr	r2, [pc, #40]	; (8004934 <HAL_TIM_PWM_MspInit+0x6c>)
 800490c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004910:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004914:	4b07      	ldr	r3, [pc, #28]	; (8004934 <HAL_TIM_PWM_MspInit+0x6c>)
 8004916:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800491a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800491e:	60bb      	str	r3, [r7, #8]
 8004920:	68bb      	ldr	r3, [r7, #8]
}
 8004922:	bf00      	nop
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40001800 	.word	0x40001800
 8004934:	58024400 	.word	0x58024400
 8004938:	40014000 	.word	0x40014000

0800493c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM23)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a0e      	ldr	r2, [pc, #56]	; (8004984 <HAL_TIM_Base_MspInit+0x48>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d116      	bne.n	800497c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* TIM23 clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 800494e:	4b0e      	ldr	r3, [pc, #56]	; (8004988 <HAL_TIM_Base_MspInit+0x4c>)
 8004950:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004954:	4a0c      	ldr	r2, [pc, #48]	; (8004988 <HAL_TIM_Base_MspInit+0x4c>)
 8004956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800495a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800495e:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <HAL_TIM_Base_MspInit+0x4c>)
 8004960:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	68fb      	ldr	r3, [r7, #12]

    /* TIM23 interrupt Init */
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 800496c:	2200      	movs	r2, #0
 800496e:	2100      	movs	r1, #0
 8004970:	20a1      	movs	r0, #161	; 0xa1
 8004972:	f000 fb7c 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8004976:	20a1      	movs	r0, #161	; 0xa1
 8004978:	f000 fb93 	bl	80050a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }
}
 800497c:	bf00      	nop
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	4000e000 	.word	0x4000e000
 8004988:	58024400 	.word	0x58024400

0800498c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004994:	f107 0314 	add.w	r3, r7, #20
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	605a      	str	r2, [r3, #4]
 800499e:	609a      	str	r2, [r3, #8]
 80049a0:	60da      	str	r2, [r3, #12]
 80049a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a25      	ldr	r2, [pc, #148]	; (8004a40 <HAL_TIM_MspPostInit+0xb4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d120      	bne.n	80049f0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049ae:	4b25      	ldr	r3, [pc, #148]	; (8004a44 <HAL_TIM_MspPostInit+0xb8>)
 80049b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049b4:	4a23      	ldr	r2, [pc, #140]	; (8004a44 <HAL_TIM_MspPostInit+0xb8>)
 80049b6:	f043 0302 	orr.w	r3, r3, #2
 80049ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049be:	4b21      	ldr	r3, [pc, #132]	; (8004a44 <HAL_TIM_MspPostInit+0xb8>)
 80049c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80049cc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80049d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d2:	2302      	movs	r3, #2
 80049d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049da:	2300      	movs	r3, #0
 80049dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80049de:	2302      	movs	r3, #2
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049e2:	f107 0314 	add.w	r3, r7, #20
 80049e6:	4619      	mov	r1, r3
 80049e8:	4817      	ldr	r0, [pc, #92]	; (8004a48 <HAL_TIM_MspPostInit+0xbc>)
 80049ea:	f003 fb73 	bl	80080d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80049ee:	e023      	b.n	8004a38 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM15)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a15      	ldr	r2, [pc, #84]	; (8004a4c <HAL_TIM_MspPostInit+0xc0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d11e      	bne.n	8004a38 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80049fa:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <HAL_TIM_MspPostInit+0xb8>)
 80049fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a00:	4a10      	ldr	r2, [pc, #64]	; (8004a44 <HAL_TIM_MspPostInit+0xb8>)
 8004a02:	f043 0310 	orr.w	r3, r3, #16
 8004a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a0a:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <HAL_TIM_MspPostInit+0xb8>)
 8004a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a10:	f003 0310 	and.w	r3, r3, #16
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004a18:	2360      	movs	r3, #96	; 0x60
 8004a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a24:	2300      	movs	r3, #0
 8004a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004a28:	2304      	movs	r3, #4
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a2c:	f107 0314 	add.w	r3, r7, #20
 8004a30:	4619      	mov	r1, r3
 8004a32:	4807      	ldr	r0, [pc, #28]	; (8004a50 <HAL_TIM_MspPostInit+0xc4>)
 8004a34:	f003 fb4e 	bl	80080d4 <HAL_GPIO_Init>
}
 8004a38:	bf00      	nop
 8004a3a:	3728      	adds	r7, #40	; 0x28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40001800 	.word	0x40001800
 8004a44:	58024400 	.word	0x58024400
 8004a48:	58020400 	.word	0x58020400
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	58021000 	.word	0x58021000

08004a54 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004a58:	4b22      	ldr	r3, [pc, #136]	; (8004ae4 <MX_USART1_UART_Init+0x90>)
 8004a5a:	4a23      	ldr	r2, [pc, #140]	; (8004ae8 <MX_USART1_UART_Init+0x94>)
 8004a5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004a5e:	4b21      	ldr	r3, [pc, #132]	; (8004ae4 <MX_USART1_UART_Init+0x90>)
 8004a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a66:	4b1f      	ldr	r3, [pc, #124]	; (8004ae4 <MX_USART1_UART_Init+0x90>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004a6c:	4b1d      	ldr	r3, [pc, #116]	; (8004ae4 <MX_USART1_UART_Init+0x90>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004a72:	4b1c      	ldr	r3, [pc, #112]	; (8004ae4 <MX_USART1_UART_Init+0x90>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004a78:	4b1a      	ldr	r3, [pc, #104]	; (8004ae4 <MX_USART1_UART_Init+0x90>)
 8004a7a:	220c      	movs	r2, #12
 8004a7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a7e:	4b19      	ldr	r3, [pc, #100]	; (8004ae4 <MX_USART1_UART_Init+0x90>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a84:	4b17      	ldr	r3, [pc, #92]	; (8004ae4 <MX_USART1_UART_Init+0x90>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a8a:	4b16      	ldr	r3, [pc, #88]	; (8004ae4 <MX_USART1_UART_Init+0x90>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004a90:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <MX_USART1_UART_Init+0x90>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a96:	4b13      	ldr	r3, [pc, #76]	; (8004ae4 <MX_USART1_UART_Init+0x90>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a9c:	4811      	ldr	r0, [pc, #68]	; (8004ae4 <MX_USART1_UART_Init+0x90>)
 8004a9e:	f007 ffb3 	bl	800ca08 <HAL_UART_Init>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004aa8:	f7fc fd10 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004aac:	2100      	movs	r1, #0
 8004aae:	480d      	ldr	r0, [pc, #52]	; (8004ae4 <MX_USART1_UART_Init+0x90>)
 8004ab0:	f00a f83c 	bl	800eb2c <HAL_UARTEx_SetTxFifoThreshold>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004aba:	f7fc fd07 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004abe:	2100      	movs	r1, #0
 8004ac0:	4808      	ldr	r0, [pc, #32]	; (8004ae4 <MX_USART1_UART_Init+0x90>)
 8004ac2:	f00a f871 	bl	800eba8 <HAL_UARTEx_SetRxFifoThreshold>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004acc:	f7fc fcfe 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004ad0:	4804      	ldr	r0, [pc, #16]	; (8004ae4 <MX_USART1_UART_Init+0x90>)
 8004ad2:	f009 fff2 	bl	800eaba <HAL_UARTEx_DisableFifoMode>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004adc:	f7fc fcf6 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ae0:	bf00      	nop
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	24003838 	.word	0x24003838
 8004ae8:	40011000 	.word	0x40011000

08004aec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b0b8      	sub	sp, #224	; 0xe0
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	605a      	str	r2, [r3, #4]
 8004afe:	609a      	str	r2, [r3, #8]
 8004b00:	60da      	str	r2, [r3, #12]
 8004b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b04:	f107 0310 	add.w	r3, r7, #16
 8004b08:	22b8      	movs	r2, #184	; 0xb8
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f00a f92b 	bl	800ed68 <memset>
  if(uartHandle->Instance==USART1)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a5a      	ldr	r2, [pc, #360]	; (8004c80 <HAL_UART_MspInit+0x194>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	f040 80ad 	bne.w	8004c78 <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004b1e:	f04f 0201 	mov.w	r2, #1
 8004b22:	f04f 0300 	mov.w	r3, #0
 8004b26:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b30:	f107 0310 	add.w	r3, r7, #16
 8004b34:	4618      	mov	r0, r3
 8004b36:	f004 fd31 	bl	800959c <HAL_RCCEx_PeriphCLKConfig>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8004b40:	f7fc fcc4 	bl	80014cc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b44:	4b4f      	ldr	r3, [pc, #316]	; (8004c84 <HAL_UART_MspInit+0x198>)
 8004b46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b4a:	4a4e      	ldr	r2, [pc, #312]	; (8004c84 <HAL_UART_MspInit+0x198>)
 8004b4c:	f043 0310 	orr.w	r3, r3, #16
 8004b50:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004b54:	4b4b      	ldr	r3, [pc, #300]	; (8004c84 <HAL_UART_MspInit+0x198>)
 8004b56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b62:	4b48      	ldr	r3, [pc, #288]	; (8004c84 <HAL_UART_MspInit+0x198>)
 8004b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b68:	4a46      	ldr	r2, [pc, #280]	; (8004c84 <HAL_UART_MspInit+0x198>)
 8004b6a:	f043 0301 	orr.w	r3, r3, #1
 8004b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b72:	4b44      	ldr	r3, [pc, #272]	; (8004c84 <HAL_UART_MspInit+0x198>)
 8004b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004b80:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004b84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b88:	2302      	movs	r3, #2
 8004b8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b94:	2300      	movs	r3, #0
 8004b96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b9a:	2307      	movs	r3, #7
 8004b9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4838      	ldr	r0, [pc, #224]	; (8004c88 <HAL_UART_MspInit+0x19c>)
 8004ba8:	f003 fa94 	bl	80080d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8004bac:	4b37      	ldr	r3, [pc, #220]	; (8004c8c <HAL_UART_MspInit+0x1a0>)
 8004bae:	4a38      	ldr	r2, [pc, #224]	; (8004c90 <HAL_UART_MspInit+0x1a4>)
 8004bb0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004bb2:	4b36      	ldr	r3, [pc, #216]	; (8004c8c <HAL_UART_MspInit+0x1a0>)
 8004bb4:	2229      	movs	r2, #41	; 0x29
 8004bb6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bb8:	4b34      	ldr	r3, [pc, #208]	; (8004c8c <HAL_UART_MspInit+0x1a0>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bbe:	4b33      	ldr	r3, [pc, #204]	; (8004c8c <HAL_UART_MspInit+0x1a0>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bc4:	4b31      	ldr	r3, [pc, #196]	; (8004c8c <HAL_UART_MspInit+0x1a0>)
 8004bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bcc:	4b2f      	ldr	r3, [pc, #188]	; (8004c8c <HAL_UART_MspInit+0x1a0>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bd2:	4b2e      	ldr	r3, [pc, #184]	; (8004c8c <HAL_UART_MspInit+0x1a0>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004bd8:	4b2c      	ldr	r3, [pc, #176]	; (8004c8c <HAL_UART_MspInit+0x1a0>)
 8004bda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bde:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004be0:	4b2a      	ldr	r3, [pc, #168]	; (8004c8c <HAL_UART_MspInit+0x1a0>)
 8004be2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004be6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004be8:	4b28      	ldr	r3, [pc, #160]	; (8004c8c <HAL_UART_MspInit+0x1a0>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004bee:	4827      	ldr	r0, [pc, #156]	; (8004c8c <HAL_UART_MspInit+0x1a0>)
 8004bf0:	f000 fa80 	bl	80050f4 <HAL_DMA_Init>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8004bfa:	f7fc fc67 	bl	80014cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a22      	ldr	r2, [pc, #136]	; (8004c8c <HAL_UART_MspInit+0x1a0>)
 8004c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004c06:	4a21      	ldr	r2, [pc, #132]	; (8004c8c <HAL_UART_MspInit+0x1a0>)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8004c0c:	4b21      	ldr	r3, [pc, #132]	; (8004c94 <HAL_UART_MspInit+0x1a8>)
 8004c0e:	4a22      	ldr	r2, [pc, #136]	; (8004c98 <HAL_UART_MspInit+0x1ac>)
 8004c10:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004c12:	4b20      	ldr	r3, [pc, #128]	; (8004c94 <HAL_UART_MspInit+0x1a8>)
 8004c14:	222a      	movs	r2, #42	; 0x2a
 8004c16:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c18:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <HAL_UART_MspInit+0x1a8>)
 8004c1a:	2240      	movs	r2, #64	; 0x40
 8004c1c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c1e:	4b1d      	ldr	r3, [pc, #116]	; (8004c94 <HAL_UART_MspInit+0x1a8>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c24:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <HAL_UART_MspInit+0x1a8>)
 8004c26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c2a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c2c:	4b19      	ldr	r3, [pc, #100]	; (8004c94 <HAL_UART_MspInit+0x1a8>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c32:	4b18      	ldr	r3, [pc, #96]	; (8004c94 <HAL_UART_MspInit+0x1a8>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004c38:	4b16      	ldr	r3, [pc, #88]	; (8004c94 <HAL_UART_MspInit+0x1a8>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004c3e:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <HAL_UART_MspInit+0x1a8>)
 8004c40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c44:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c46:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <HAL_UART_MspInit+0x1a8>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004c4c:	4811      	ldr	r0, [pc, #68]	; (8004c94 <HAL_UART_MspInit+0x1a8>)
 8004c4e:	f000 fa51 	bl	80050f4 <HAL_DMA_Init>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8004c58:	f7fc fc38 	bl	80014cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a0d      	ldr	r2, [pc, #52]	; (8004c94 <HAL_UART_MspInit+0x1a8>)
 8004c60:	67da      	str	r2, [r3, #124]	; 0x7c
 8004c62:	4a0c      	ldr	r2, [pc, #48]	; (8004c94 <HAL_UART_MspInit+0x1a8>)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004c68:	2200      	movs	r2, #0
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	2025      	movs	r0, #37	; 0x25
 8004c6e:	f000 f9fe 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004c72:	2025      	movs	r0, #37	; 0x25
 8004c74:	f000 fa15 	bl	80050a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004c78:	bf00      	nop
 8004c7a:	37e0      	adds	r7, #224	; 0xe0
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40011000 	.word	0x40011000
 8004c84:	58024400 	.word	0x58024400
 8004c88:	58020000 	.word	0x58020000
 8004c8c:	240038cc 	.word	0x240038cc
 8004c90:	40020010 	.word	0x40020010
 8004c94:	24003944 	.word	0x24003944
 8004c98:	40020028 	.word	0x40020028

08004c9c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a10      	ldr	r2, [pc, #64]	; (8004cec <HAL_UART_MspDeInit+0x50>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d11a      	bne.n	8004ce4 <HAL_UART_MspDeInit+0x48>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8004cae:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <HAL_UART_MspDeInit+0x54>)
 8004cb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cb4:	4a0e      	ldr	r2, [pc, #56]	; (8004cf0 <HAL_UART_MspDeInit+0x54>)
 8004cb6:	f023 0310 	bic.w	r3, r3, #16
 8004cba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8004cbe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004cc2:	480c      	ldr	r0, [pc, #48]	; (8004cf4 <HAL_UART_MspDeInit+0x58>)
 8004cc4:	f003 fbae 	bl	8008424 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fd6a 	bl	80057a8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 fd65 	bl	80057a8 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8004cde:	2025      	movs	r0, #37	; 0x25
 8004ce0:	f000 f9ed 	bl	80050be <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40011000 	.word	0x40011000
 8004cf0:	58024400 	.word	0x58024400
 8004cf4:	58020000 	.word	0x58020000

08004cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004cfc:	f7ff f9a2 	bl	8004044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d00:	480c      	ldr	r0, [pc, #48]	; (8004d34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004d02:	490d      	ldr	r1, [pc, #52]	; (8004d38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004d04:	4a0d      	ldr	r2, [pc, #52]	; (8004d3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d08:	e002      	b.n	8004d10 <LoopCopyDataInit>

08004d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d0e:	3304      	adds	r3, #4

08004d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d14:	d3f9      	bcc.n	8004d0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d16:	4a0a      	ldr	r2, [pc, #40]	; (8004d40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004d18:	4c0a      	ldr	r4, [pc, #40]	; (8004d44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d1c:	e001      	b.n	8004d22 <LoopFillZerobss>

08004d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d20:	3204      	adds	r2, #4

08004d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d24:	d3fb      	bcc.n	8004d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004d26:	f009 ffed 	bl	800ed04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d2a:	f7fc faf7 	bl	800131c <main>
  bx  lr
 8004d2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004d30:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004d34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004d38:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8004d3c:	0800f394 	.word	0x0800f394
  ldr r2, =_sbss
 8004d40:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8004d44:	240039d0 	.word	0x240039d0

08004d48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d48:	e7fe      	b.n	8004d48 <ADC3_IRQHandler>
	...

08004d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d52:	2003      	movs	r0, #3
 8004d54:	f000 f980 	bl	8005058 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d58:	f004 fa4a 	bl	80091f0 <HAL_RCC_GetSysClockFreq>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	4b15      	ldr	r3, [pc, #84]	; (8004db4 <HAL_Init+0x68>)
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	0a1b      	lsrs	r3, r3, #8
 8004d64:	f003 030f 	and.w	r3, r3, #15
 8004d68:	4913      	ldr	r1, [pc, #76]	; (8004db8 <HAL_Init+0x6c>)
 8004d6a:	5ccb      	ldrb	r3, [r1, r3]
 8004d6c:	f003 031f 	and.w	r3, r3, #31
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
 8004d74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d76:	4b0f      	ldr	r3, [pc, #60]	; (8004db4 <HAL_Init+0x68>)
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	4a0e      	ldr	r2, [pc, #56]	; (8004db8 <HAL_Init+0x6c>)
 8004d80:	5cd3      	ldrb	r3, [r2, r3]
 8004d82:	f003 031f 	and.w	r3, r3, #31
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8c:	4a0b      	ldr	r2, [pc, #44]	; (8004dbc <HAL_Init+0x70>)
 8004d8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d90:	4a0b      	ldr	r2, [pc, #44]	; (8004dc0 <HAL_Init+0x74>)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d96:	2000      	movs	r0, #0
 8004d98:	f000 f814 	bl	8004dc4 <HAL_InitTick>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e002      	b.n	8004dac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004da6:	f7ff f861 	bl	8003e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	58024400 	.word	0x58024400
 8004db8:	0800f340 	.word	0x0800f340
 8004dbc:	24000004 	.word	0x24000004
 8004dc0:	24000000 	.word	0x24000000

08004dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004dcc:	4b15      	ldr	r3, [pc, #84]	; (8004e24 <HAL_InitTick+0x60>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e021      	b.n	8004e1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004dd8:	4b13      	ldr	r3, [pc, #76]	; (8004e28 <HAL_InitTick+0x64>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4b11      	ldr	r3, [pc, #68]	; (8004e24 <HAL_InitTick+0x60>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	4619      	mov	r1, r3
 8004de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 f973 	bl	80050da <HAL_SYSTICK_Config>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e00e      	b.n	8004e1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b0f      	cmp	r3, #15
 8004e02:	d80a      	bhi.n	8004e1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e04:	2200      	movs	r2, #0
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0c:	f000 f92f 	bl	800506e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e10:	4a06      	ldr	r2, [pc, #24]	; (8004e2c <HAL_InitTick+0x68>)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	e000      	b.n	8004e1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	2400000c 	.word	0x2400000c
 8004e28:	24000000 	.word	0x24000000
 8004e2c:	24000008 	.word	0x24000008

08004e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004e34:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <HAL_IncTick+0x20>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <HAL_IncTick+0x24>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4413      	add	r3, r2
 8004e40:	4a04      	ldr	r2, [pc, #16]	; (8004e54 <HAL_IncTick+0x24>)
 8004e42:	6013      	str	r3, [r2, #0]
}
 8004e44:	bf00      	nop
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	2400000c 	.word	0x2400000c
 8004e54:	240039bc 	.word	0x240039bc

08004e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8004e5c:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <HAL_GetTick+0x14>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	240039bc 	.word	0x240039bc

08004e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e98:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e9e:	4a04      	ldr	r2, [pc, #16]	; (8004eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	60d3      	str	r3, [r2, #12]
}
 8004ea4:	bf00      	nop
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	e000ed00 	.word	0xe000ed00
 8004eb4:	05fa0000 	.word	0x05fa0000

08004eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ebc:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	0a1b      	lsrs	r3, r3, #8
 8004ec2:	f003 0307 	and.w	r3, r3, #7
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	e000ed00 	.word	0xe000ed00

08004ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ede:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	db0b      	blt.n	8004efe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	f003 021f 	and.w	r2, r3, #31
 8004eec:	4907      	ldr	r1, [pc, #28]	; (8004f0c <__NVIC_EnableIRQ+0x38>)
 8004eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8004efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	e000e100 	.word	0xe000e100

08004f10 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	4603      	mov	r3, r0
 8004f18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	db12      	blt.n	8004f48 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f22:	88fb      	ldrh	r3, [r7, #6]
 8004f24:	f003 021f 	and.w	r2, r3, #31
 8004f28:	490a      	ldr	r1, [pc, #40]	; (8004f54 <__NVIC_DisableIRQ+0x44>)
 8004f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	2001      	movs	r0, #1
 8004f32:	fa00 f202 	lsl.w	r2, r0, r2
 8004f36:	3320      	adds	r3, #32
 8004f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004f3c:	f3bf 8f4f 	dsb	sy
}
 8004f40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f42:	f3bf 8f6f 	isb	sy
}
 8004f46:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	e000e100 	.word	0xe000e100

08004f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	6039      	str	r1, [r7, #0]
 8004f62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	db0a      	blt.n	8004f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	490c      	ldr	r1, [pc, #48]	; (8004fa4 <__NVIC_SetPriority+0x4c>)
 8004f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f76:	0112      	lsls	r2, r2, #4
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f80:	e00a      	b.n	8004f98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	4908      	ldr	r1, [pc, #32]	; (8004fa8 <__NVIC_SetPriority+0x50>)
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	3b04      	subs	r3, #4
 8004f90:	0112      	lsls	r2, r2, #4
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	440b      	add	r3, r1
 8004f96:	761a      	strb	r2, [r3, #24]
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	e000e100 	.word	0xe000e100
 8004fa8:	e000ed00 	.word	0xe000ed00

08004fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b089      	sub	sp, #36	; 0x24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f1c3 0307 	rsb	r3, r3, #7
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	bf28      	it	cs
 8004fca:	2304      	movcs	r3, #4
 8004fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	2b06      	cmp	r3, #6
 8004fd4:	d902      	bls.n	8004fdc <NVIC_EncodePriority+0x30>
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	3b03      	subs	r3, #3
 8004fda:	e000      	b.n	8004fde <NVIC_EncodePriority+0x32>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fea:	43da      	mvns	r2, r3
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	401a      	ands	r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffe:	43d9      	mvns	r1, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005004:	4313      	orrs	r3, r2
         );
}
 8005006:	4618      	mov	r0, r3
 8005008:	3724      	adds	r7, #36	; 0x24
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
	...

08005014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3b01      	subs	r3, #1
 8005020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005024:	d301      	bcc.n	800502a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005026:	2301      	movs	r3, #1
 8005028:	e00f      	b.n	800504a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800502a:	4a0a      	ldr	r2, [pc, #40]	; (8005054 <SysTick_Config+0x40>)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3b01      	subs	r3, #1
 8005030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005032:	210f      	movs	r1, #15
 8005034:	f04f 30ff 	mov.w	r0, #4294967295
 8005038:	f7ff ff8e 	bl	8004f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <SysTick_Config+0x40>)
 800503e:	2200      	movs	r2, #0
 8005040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005042:	4b04      	ldr	r3, [pc, #16]	; (8005054 <SysTick_Config+0x40>)
 8005044:	2207      	movs	r2, #7
 8005046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	e000e010 	.word	0xe000e010

08005058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff ff05 	bl	8004e70 <__NVIC_SetPriorityGrouping>
}
 8005066:	bf00      	nop
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b086      	sub	sp, #24
 8005072:	af00      	add	r7, sp, #0
 8005074:	4603      	mov	r3, r0
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	607a      	str	r2, [r7, #4]
 800507a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800507c:	f7ff ff1c 	bl	8004eb8 <__NVIC_GetPriorityGrouping>
 8005080:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	6978      	ldr	r0, [r7, #20]
 8005088:	f7ff ff90 	bl	8004fac <NVIC_EncodePriority>
 800508c:	4602      	mov	r2, r0
 800508e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005092:	4611      	mov	r1, r2
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff ff5f 	bl	8004f58 <__NVIC_SetPriority>
}
 800509a:	bf00      	nop
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b082      	sub	sp, #8
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	4603      	mov	r3, r0
 80050aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff ff0f 	bl	8004ed4 <__NVIC_EnableIRQ>
}
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	4603      	mov	r3, r0
 80050c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80050c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff ff1f 	bl	8004f10 <__NVIC_DisableIRQ>
}
 80050d2:	bf00      	nop
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b082      	sub	sp, #8
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff ff96 	bl	8005014 <SysTick_Config>
 80050e8:	4603      	mov	r3, r0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80050fc:	f7ff feac 	bl	8004e58 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e314      	b.n	8005736 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a66      	ldr	r2, [pc, #408]	; (80052ac <HAL_DMA_Init+0x1b8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d04a      	beq.n	80051ac <HAL_DMA_Init+0xb8>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a65      	ldr	r2, [pc, #404]	; (80052b0 <HAL_DMA_Init+0x1bc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d045      	beq.n	80051ac <HAL_DMA_Init+0xb8>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a63      	ldr	r2, [pc, #396]	; (80052b4 <HAL_DMA_Init+0x1c0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d040      	beq.n	80051ac <HAL_DMA_Init+0xb8>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a62      	ldr	r2, [pc, #392]	; (80052b8 <HAL_DMA_Init+0x1c4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d03b      	beq.n	80051ac <HAL_DMA_Init+0xb8>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a60      	ldr	r2, [pc, #384]	; (80052bc <HAL_DMA_Init+0x1c8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d036      	beq.n	80051ac <HAL_DMA_Init+0xb8>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a5f      	ldr	r2, [pc, #380]	; (80052c0 <HAL_DMA_Init+0x1cc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d031      	beq.n	80051ac <HAL_DMA_Init+0xb8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a5d      	ldr	r2, [pc, #372]	; (80052c4 <HAL_DMA_Init+0x1d0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d02c      	beq.n	80051ac <HAL_DMA_Init+0xb8>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a5c      	ldr	r2, [pc, #368]	; (80052c8 <HAL_DMA_Init+0x1d4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d027      	beq.n	80051ac <HAL_DMA_Init+0xb8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a5a      	ldr	r2, [pc, #360]	; (80052cc <HAL_DMA_Init+0x1d8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d022      	beq.n	80051ac <HAL_DMA_Init+0xb8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a59      	ldr	r2, [pc, #356]	; (80052d0 <HAL_DMA_Init+0x1dc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d01d      	beq.n	80051ac <HAL_DMA_Init+0xb8>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a57      	ldr	r2, [pc, #348]	; (80052d4 <HAL_DMA_Init+0x1e0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d018      	beq.n	80051ac <HAL_DMA_Init+0xb8>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a56      	ldr	r2, [pc, #344]	; (80052d8 <HAL_DMA_Init+0x1e4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <HAL_DMA_Init+0xb8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a54      	ldr	r2, [pc, #336]	; (80052dc <HAL_DMA_Init+0x1e8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00e      	beq.n	80051ac <HAL_DMA_Init+0xb8>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a53      	ldr	r2, [pc, #332]	; (80052e0 <HAL_DMA_Init+0x1ec>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d009      	beq.n	80051ac <HAL_DMA_Init+0xb8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a51      	ldr	r2, [pc, #324]	; (80052e4 <HAL_DMA_Init+0x1f0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <HAL_DMA_Init+0xb8>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a50      	ldr	r2, [pc, #320]	; (80052e8 <HAL_DMA_Init+0x1f4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d101      	bne.n	80051b0 <HAL_DMA_Init+0xbc>
 80051ac:	2301      	movs	r3, #1
 80051ae:	e000      	b.n	80051b2 <HAL_DMA_Init+0xbe>
 80051b0:	2300      	movs	r3, #0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 813c 	beq.w	8005430 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a37      	ldr	r2, [pc, #220]	; (80052ac <HAL_DMA_Init+0x1b8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d04a      	beq.n	8005268 <HAL_DMA_Init+0x174>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a36      	ldr	r2, [pc, #216]	; (80052b0 <HAL_DMA_Init+0x1bc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d045      	beq.n	8005268 <HAL_DMA_Init+0x174>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a34      	ldr	r2, [pc, #208]	; (80052b4 <HAL_DMA_Init+0x1c0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d040      	beq.n	8005268 <HAL_DMA_Init+0x174>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a33      	ldr	r2, [pc, #204]	; (80052b8 <HAL_DMA_Init+0x1c4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d03b      	beq.n	8005268 <HAL_DMA_Init+0x174>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a31      	ldr	r2, [pc, #196]	; (80052bc <HAL_DMA_Init+0x1c8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d036      	beq.n	8005268 <HAL_DMA_Init+0x174>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a30      	ldr	r2, [pc, #192]	; (80052c0 <HAL_DMA_Init+0x1cc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d031      	beq.n	8005268 <HAL_DMA_Init+0x174>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a2e      	ldr	r2, [pc, #184]	; (80052c4 <HAL_DMA_Init+0x1d0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d02c      	beq.n	8005268 <HAL_DMA_Init+0x174>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a2d      	ldr	r2, [pc, #180]	; (80052c8 <HAL_DMA_Init+0x1d4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d027      	beq.n	8005268 <HAL_DMA_Init+0x174>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a2b      	ldr	r2, [pc, #172]	; (80052cc <HAL_DMA_Init+0x1d8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d022      	beq.n	8005268 <HAL_DMA_Init+0x174>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a2a      	ldr	r2, [pc, #168]	; (80052d0 <HAL_DMA_Init+0x1dc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d01d      	beq.n	8005268 <HAL_DMA_Init+0x174>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a28      	ldr	r2, [pc, #160]	; (80052d4 <HAL_DMA_Init+0x1e0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d018      	beq.n	8005268 <HAL_DMA_Init+0x174>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a27      	ldr	r2, [pc, #156]	; (80052d8 <HAL_DMA_Init+0x1e4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d013      	beq.n	8005268 <HAL_DMA_Init+0x174>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a25      	ldr	r2, [pc, #148]	; (80052dc <HAL_DMA_Init+0x1e8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00e      	beq.n	8005268 <HAL_DMA_Init+0x174>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a24      	ldr	r2, [pc, #144]	; (80052e0 <HAL_DMA_Init+0x1ec>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d009      	beq.n	8005268 <HAL_DMA_Init+0x174>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a22      	ldr	r2, [pc, #136]	; (80052e4 <HAL_DMA_Init+0x1f0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d004      	beq.n	8005268 <HAL_DMA_Init+0x174>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a21      	ldr	r2, [pc, #132]	; (80052e8 <HAL_DMA_Init+0x1f4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d108      	bne.n	800527a <HAL_DMA_Init+0x186>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0201 	bic.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	e007      	b.n	800528a <HAL_DMA_Init+0x196>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0201 	bic.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800528a:	e02f      	b.n	80052ec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800528c:	f7ff fde4 	bl	8004e58 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b05      	cmp	r3, #5
 8005298:	d928      	bls.n	80052ec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2220      	movs	r2, #32
 800529e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2203      	movs	r2, #3
 80052a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e244      	b.n	8005736 <HAL_DMA_Init+0x642>
 80052ac:	40020010 	.word	0x40020010
 80052b0:	40020028 	.word	0x40020028
 80052b4:	40020040 	.word	0x40020040
 80052b8:	40020058 	.word	0x40020058
 80052bc:	40020070 	.word	0x40020070
 80052c0:	40020088 	.word	0x40020088
 80052c4:	400200a0 	.word	0x400200a0
 80052c8:	400200b8 	.word	0x400200b8
 80052cc:	40020410 	.word	0x40020410
 80052d0:	40020428 	.word	0x40020428
 80052d4:	40020440 	.word	0x40020440
 80052d8:	40020458 	.word	0x40020458
 80052dc:	40020470 	.word	0x40020470
 80052e0:	40020488 	.word	0x40020488
 80052e4:	400204a0 	.word	0x400204a0
 80052e8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1c8      	bne.n	800528c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4b84      	ldr	r3, [pc, #528]	; (8005518 <HAL_DMA_Init+0x424>)
 8005306:	4013      	ands	r3, r2
 8005308:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005312:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800531e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800532a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	4313      	orrs	r3, r2
 8005336:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	2b04      	cmp	r3, #4
 800533e:	d107      	bne.n	8005350 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	4313      	orrs	r3, r2
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b28      	cmp	r3, #40	; 0x28
 8005356:	d903      	bls.n	8005360 <HAL_DMA_Init+0x26c>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2b2e      	cmp	r3, #46	; 0x2e
 800535e:	d91f      	bls.n	80053a0 <HAL_DMA_Init+0x2ac>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b3e      	cmp	r3, #62	; 0x3e
 8005366:	d903      	bls.n	8005370 <HAL_DMA_Init+0x27c>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b42      	cmp	r3, #66	; 0x42
 800536e:	d917      	bls.n	80053a0 <HAL_DMA_Init+0x2ac>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b46      	cmp	r3, #70	; 0x46
 8005376:	d903      	bls.n	8005380 <HAL_DMA_Init+0x28c>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b48      	cmp	r3, #72	; 0x48
 800537e:	d90f      	bls.n	80053a0 <HAL_DMA_Init+0x2ac>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	2b4e      	cmp	r3, #78	; 0x4e
 8005386:	d903      	bls.n	8005390 <HAL_DMA_Init+0x29c>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b52      	cmp	r3, #82	; 0x52
 800538e:	d907      	bls.n	80053a0 <HAL_DMA_Init+0x2ac>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	2b73      	cmp	r3, #115	; 0x73
 8005396:	d905      	bls.n	80053a4 <HAL_DMA_Init+0x2b0>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2b77      	cmp	r3, #119	; 0x77
 800539e:	d801      	bhi.n	80053a4 <HAL_DMA_Init+0x2b0>
 80053a0:	2301      	movs	r3, #1
 80053a2:	e000      	b.n	80053a6 <HAL_DMA_Init+0x2b2>
 80053a4:	2300      	movs	r3, #0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053b0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f023 0307 	bic.w	r3, r3, #7
 80053c8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d117      	bne.n	800540c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00e      	beq.n	800540c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f002 fce6 	bl	8007dc0 <DMA_CheckFifoParam>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d008      	beq.n	800540c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2240      	movs	r2, #64	; 0x40
 80053fe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e194      	b.n	8005736 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f002 fc21 	bl	8007c5c <DMA_CalcBaseAndBitshift>
 800541a:	4603      	mov	r3, r0
 800541c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005422:	f003 031f 	and.w	r3, r3, #31
 8005426:	223f      	movs	r2, #63	; 0x3f
 8005428:	409a      	lsls	r2, r3
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	609a      	str	r2, [r3, #8]
 800542e:	e0ca      	b.n	80055c6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a39      	ldr	r2, [pc, #228]	; (800551c <HAL_DMA_Init+0x428>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d022      	beq.n	8005480 <HAL_DMA_Init+0x38c>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a38      	ldr	r2, [pc, #224]	; (8005520 <HAL_DMA_Init+0x42c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d01d      	beq.n	8005480 <HAL_DMA_Init+0x38c>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a36      	ldr	r2, [pc, #216]	; (8005524 <HAL_DMA_Init+0x430>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d018      	beq.n	8005480 <HAL_DMA_Init+0x38c>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a35      	ldr	r2, [pc, #212]	; (8005528 <HAL_DMA_Init+0x434>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d013      	beq.n	8005480 <HAL_DMA_Init+0x38c>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a33      	ldr	r2, [pc, #204]	; (800552c <HAL_DMA_Init+0x438>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d00e      	beq.n	8005480 <HAL_DMA_Init+0x38c>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a32      	ldr	r2, [pc, #200]	; (8005530 <HAL_DMA_Init+0x43c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d009      	beq.n	8005480 <HAL_DMA_Init+0x38c>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a30      	ldr	r2, [pc, #192]	; (8005534 <HAL_DMA_Init+0x440>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d004      	beq.n	8005480 <HAL_DMA_Init+0x38c>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a2f      	ldr	r2, [pc, #188]	; (8005538 <HAL_DMA_Init+0x444>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d101      	bne.n	8005484 <HAL_DMA_Init+0x390>
 8005480:	2301      	movs	r3, #1
 8005482:	e000      	b.n	8005486 <HAL_DMA_Init+0x392>
 8005484:	2300      	movs	r3, #0
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 8094 	beq.w	80055b4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a22      	ldr	r2, [pc, #136]	; (800551c <HAL_DMA_Init+0x428>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d021      	beq.n	80054da <HAL_DMA_Init+0x3e6>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a21      	ldr	r2, [pc, #132]	; (8005520 <HAL_DMA_Init+0x42c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d01c      	beq.n	80054da <HAL_DMA_Init+0x3e6>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1f      	ldr	r2, [pc, #124]	; (8005524 <HAL_DMA_Init+0x430>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d017      	beq.n	80054da <HAL_DMA_Init+0x3e6>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a1e      	ldr	r2, [pc, #120]	; (8005528 <HAL_DMA_Init+0x434>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d012      	beq.n	80054da <HAL_DMA_Init+0x3e6>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a1c      	ldr	r2, [pc, #112]	; (800552c <HAL_DMA_Init+0x438>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00d      	beq.n	80054da <HAL_DMA_Init+0x3e6>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a1b      	ldr	r2, [pc, #108]	; (8005530 <HAL_DMA_Init+0x43c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d008      	beq.n	80054da <HAL_DMA_Init+0x3e6>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a19      	ldr	r2, [pc, #100]	; (8005534 <HAL_DMA_Init+0x440>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d003      	beq.n	80054da <HAL_DMA_Init+0x3e6>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a18      	ldr	r2, [pc, #96]	; (8005538 <HAL_DMA_Init+0x444>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	4b11      	ldr	r3, [pc, #68]	; (800553c <HAL_DMA_Init+0x448>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b40      	cmp	r3, #64	; 0x40
 8005502:	d01d      	beq.n	8005540 <HAL_DMA_Init+0x44c>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	2b80      	cmp	r3, #128	; 0x80
 800550a:	d102      	bne.n	8005512 <HAL_DMA_Init+0x41e>
 800550c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005510:	e017      	b.n	8005542 <HAL_DMA_Init+0x44e>
 8005512:	2300      	movs	r3, #0
 8005514:	e015      	b.n	8005542 <HAL_DMA_Init+0x44e>
 8005516:	bf00      	nop
 8005518:	fe10803f 	.word	0xfe10803f
 800551c:	58025408 	.word	0x58025408
 8005520:	5802541c 	.word	0x5802541c
 8005524:	58025430 	.word	0x58025430
 8005528:	58025444 	.word	0x58025444
 800552c:	58025458 	.word	0x58025458
 8005530:	5802546c 	.word	0x5802546c
 8005534:	58025480 	.word	0x58025480
 8005538:	58025494 	.word	0x58025494
 800553c:	fffe000f 	.word	0xfffe000f
 8005540:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	68d2      	ldr	r2, [r2, #12]
 8005546:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005548:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005550:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005558:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005560:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005568:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005570:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	4b6e      	ldr	r3, [pc, #440]	; (8005740 <HAL_DMA_Init+0x64c>)
 8005588:	4413      	add	r3, r2
 800558a:	4a6e      	ldr	r2, [pc, #440]	; (8005744 <HAL_DMA_Init+0x650>)
 800558c:	fba2 2303 	umull	r2, r3, r2, r3
 8005590:	091b      	lsrs	r3, r3, #4
 8005592:	009a      	lsls	r2, r3, #2
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f002 fb5f 	bl	8007c5c <DMA_CalcBaseAndBitshift>
 800559e:	4603      	mov	r3, r0
 80055a0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a6:	f003 031f 	and.w	r3, r3, #31
 80055aa:	2201      	movs	r2, #1
 80055ac:	409a      	lsls	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	605a      	str	r2, [r3, #4]
 80055b2:	e008      	b.n	80055c6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2240      	movs	r2, #64	; 0x40
 80055b8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2203      	movs	r2, #3
 80055be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e0b7      	b.n	8005736 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a5f      	ldr	r2, [pc, #380]	; (8005748 <HAL_DMA_Init+0x654>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d072      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a5d      	ldr	r2, [pc, #372]	; (800574c <HAL_DMA_Init+0x658>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d06d      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a5c      	ldr	r2, [pc, #368]	; (8005750 <HAL_DMA_Init+0x65c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d068      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a5a      	ldr	r2, [pc, #360]	; (8005754 <HAL_DMA_Init+0x660>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d063      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a59      	ldr	r2, [pc, #356]	; (8005758 <HAL_DMA_Init+0x664>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d05e      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a57      	ldr	r2, [pc, #348]	; (800575c <HAL_DMA_Init+0x668>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d059      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a56      	ldr	r2, [pc, #344]	; (8005760 <HAL_DMA_Init+0x66c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d054      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a54      	ldr	r2, [pc, #336]	; (8005764 <HAL_DMA_Init+0x670>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d04f      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a53      	ldr	r2, [pc, #332]	; (8005768 <HAL_DMA_Init+0x674>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d04a      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a51      	ldr	r2, [pc, #324]	; (800576c <HAL_DMA_Init+0x678>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d045      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a50      	ldr	r2, [pc, #320]	; (8005770 <HAL_DMA_Init+0x67c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d040      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a4e      	ldr	r2, [pc, #312]	; (8005774 <HAL_DMA_Init+0x680>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d03b      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a4d      	ldr	r2, [pc, #308]	; (8005778 <HAL_DMA_Init+0x684>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d036      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a4b      	ldr	r2, [pc, #300]	; (800577c <HAL_DMA_Init+0x688>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d031      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a4a      	ldr	r2, [pc, #296]	; (8005780 <HAL_DMA_Init+0x68c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d02c      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a48      	ldr	r2, [pc, #288]	; (8005784 <HAL_DMA_Init+0x690>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d027      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a47      	ldr	r2, [pc, #284]	; (8005788 <HAL_DMA_Init+0x694>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d022      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a45      	ldr	r2, [pc, #276]	; (800578c <HAL_DMA_Init+0x698>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d01d      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a44      	ldr	r2, [pc, #272]	; (8005790 <HAL_DMA_Init+0x69c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d018      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a42      	ldr	r2, [pc, #264]	; (8005794 <HAL_DMA_Init+0x6a0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d013      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a41      	ldr	r2, [pc, #260]	; (8005798 <HAL_DMA_Init+0x6a4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00e      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a3f      	ldr	r2, [pc, #252]	; (800579c <HAL_DMA_Init+0x6a8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d009      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a3e      	ldr	r2, [pc, #248]	; (80057a0 <HAL_DMA_Init+0x6ac>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d004      	beq.n	80056b6 <HAL_DMA_Init+0x5c2>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a3c      	ldr	r2, [pc, #240]	; (80057a4 <HAL_DMA_Init+0x6b0>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d101      	bne.n	80056ba <HAL_DMA_Init+0x5c6>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <HAL_DMA_Init+0x5c8>
 80056ba:	2300      	movs	r3, #0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d032      	beq.n	8005726 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f002 fbf9 	bl	8007eb8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	2b80      	cmp	r3, #128	; 0x80
 80056cc:	d102      	bne.n	80056d4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80056e8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d010      	beq.n	8005714 <HAL_DMA_Init+0x620>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	d80c      	bhi.n	8005714 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f002 fc76 	bl	8007fec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	e008      	b.n	8005726 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	a7fdabf8 	.word	0xa7fdabf8
 8005744:	cccccccd 	.word	0xcccccccd
 8005748:	40020010 	.word	0x40020010
 800574c:	40020028 	.word	0x40020028
 8005750:	40020040 	.word	0x40020040
 8005754:	40020058 	.word	0x40020058
 8005758:	40020070 	.word	0x40020070
 800575c:	40020088 	.word	0x40020088
 8005760:	400200a0 	.word	0x400200a0
 8005764:	400200b8 	.word	0x400200b8
 8005768:	40020410 	.word	0x40020410
 800576c:	40020428 	.word	0x40020428
 8005770:	40020440 	.word	0x40020440
 8005774:	40020458 	.word	0x40020458
 8005778:	40020470 	.word	0x40020470
 800577c:	40020488 	.word	0x40020488
 8005780:	400204a0 	.word	0x400204a0
 8005784:	400204b8 	.word	0x400204b8
 8005788:	58025408 	.word	0x58025408
 800578c:	5802541c 	.word	0x5802541c
 8005790:	58025430 	.word	0x58025430
 8005794:	58025444 	.word	0x58025444
 8005798:	58025458 	.word	0x58025458
 800579c:	5802546c 	.word	0x5802546c
 80057a0:	58025480 	.word	0x58025480
 80057a4:	58025494 	.word	0x58025494

080057a8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e1a8      	b.n	8005b0c <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a82      	ldr	r2, [pc, #520]	; (80059c8 <HAL_DMA_DeInit+0x220>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d04a      	beq.n	800585a <HAL_DMA_DeInit+0xb2>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a80      	ldr	r2, [pc, #512]	; (80059cc <HAL_DMA_DeInit+0x224>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d045      	beq.n	800585a <HAL_DMA_DeInit+0xb2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a7f      	ldr	r2, [pc, #508]	; (80059d0 <HAL_DMA_DeInit+0x228>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d040      	beq.n	800585a <HAL_DMA_DeInit+0xb2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a7d      	ldr	r2, [pc, #500]	; (80059d4 <HAL_DMA_DeInit+0x22c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d03b      	beq.n	800585a <HAL_DMA_DeInit+0xb2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a7c      	ldr	r2, [pc, #496]	; (80059d8 <HAL_DMA_DeInit+0x230>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d036      	beq.n	800585a <HAL_DMA_DeInit+0xb2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a7a      	ldr	r2, [pc, #488]	; (80059dc <HAL_DMA_DeInit+0x234>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d031      	beq.n	800585a <HAL_DMA_DeInit+0xb2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a79      	ldr	r2, [pc, #484]	; (80059e0 <HAL_DMA_DeInit+0x238>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d02c      	beq.n	800585a <HAL_DMA_DeInit+0xb2>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a77      	ldr	r2, [pc, #476]	; (80059e4 <HAL_DMA_DeInit+0x23c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d027      	beq.n	800585a <HAL_DMA_DeInit+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a76      	ldr	r2, [pc, #472]	; (80059e8 <HAL_DMA_DeInit+0x240>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d022      	beq.n	800585a <HAL_DMA_DeInit+0xb2>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a74      	ldr	r2, [pc, #464]	; (80059ec <HAL_DMA_DeInit+0x244>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d01d      	beq.n	800585a <HAL_DMA_DeInit+0xb2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a73      	ldr	r2, [pc, #460]	; (80059f0 <HAL_DMA_DeInit+0x248>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d018      	beq.n	800585a <HAL_DMA_DeInit+0xb2>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a71      	ldr	r2, [pc, #452]	; (80059f4 <HAL_DMA_DeInit+0x24c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d013      	beq.n	800585a <HAL_DMA_DeInit+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a70      	ldr	r2, [pc, #448]	; (80059f8 <HAL_DMA_DeInit+0x250>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00e      	beq.n	800585a <HAL_DMA_DeInit+0xb2>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a6e      	ldr	r2, [pc, #440]	; (80059fc <HAL_DMA_DeInit+0x254>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d009      	beq.n	800585a <HAL_DMA_DeInit+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a6d      	ldr	r2, [pc, #436]	; (8005a00 <HAL_DMA_DeInit+0x258>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d004      	beq.n	800585a <HAL_DMA_DeInit+0xb2>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a6b      	ldr	r2, [pc, #428]	; (8005a04 <HAL_DMA_DeInit+0x25c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d108      	bne.n	800586c <HAL_DMA_DeInit+0xc4>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0201 	bic.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	e007      	b.n	800587c <HAL_DMA_DeInit+0xd4>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 0201 	bic.w	r2, r2, #1
 800587a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a51      	ldr	r2, [pc, #324]	; (80059c8 <HAL_DMA_DeInit+0x220>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d04a      	beq.n	800591c <HAL_DMA_DeInit+0x174>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a50      	ldr	r2, [pc, #320]	; (80059cc <HAL_DMA_DeInit+0x224>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d045      	beq.n	800591c <HAL_DMA_DeInit+0x174>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a4e      	ldr	r2, [pc, #312]	; (80059d0 <HAL_DMA_DeInit+0x228>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d040      	beq.n	800591c <HAL_DMA_DeInit+0x174>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a4d      	ldr	r2, [pc, #308]	; (80059d4 <HAL_DMA_DeInit+0x22c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d03b      	beq.n	800591c <HAL_DMA_DeInit+0x174>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a4b      	ldr	r2, [pc, #300]	; (80059d8 <HAL_DMA_DeInit+0x230>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d036      	beq.n	800591c <HAL_DMA_DeInit+0x174>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a4a      	ldr	r2, [pc, #296]	; (80059dc <HAL_DMA_DeInit+0x234>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d031      	beq.n	800591c <HAL_DMA_DeInit+0x174>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a48      	ldr	r2, [pc, #288]	; (80059e0 <HAL_DMA_DeInit+0x238>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d02c      	beq.n	800591c <HAL_DMA_DeInit+0x174>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a47      	ldr	r2, [pc, #284]	; (80059e4 <HAL_DMA_DeInit+0x23c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d027      	beq.n	800591c <HAL_DMA_DeInit+0x174>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a45      	ldr	r2, [pc, #276]	; (80059e8 <HAL_DMA_DeInit+0x240>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d022      	beq.n	800591c <HAL_DMA_DeInit+0x174>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a44      	ldr	r2, [pc, #272]	; (80059ec <HAL_DMA_DeInit+0x244>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d01d      	beq.n	800591c <HAL_DMA_DeInit+0x174>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a42      	ldr	r2, [pc, #264]	; (80059f0 <HAL_DMA_DeInit+0x248>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d018      	beq.n	800591c <HAL_DMA_DeInit+0x174>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a41      	ldr	r2, [pc, #260]	; (80059f4 <HAL_DMA_DeInit+0x24c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d013      	beq.n	800591c <HAL_DMA_DeInit+0x174>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a3f      	ldr	r2, [pc, #252]	; (80059f8 <HAL_DMA_DeInit+0x250>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00e      	beq.n	800591c <HAL_DMA_DeInit+0x174>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a3e      	ldr	r2, [pc, #248]	; (80059fc <HAL_DMA_DeInit+0x254>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d009      	beq.n	800591c <HAL_DMA_DeInit+0x174>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a3c      	ldr	r2, [pc, #240]	; (8005a00 <HAL_DMA_DeInit+0x258>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d004      	beq.n	800591c <HAL_DMA_DeInit+0x174>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a3b      	ldr	r2, [pc, #236]	; (8005a04 <HAL_DMA_DeInit+0x25c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d101      	bne.n	8005920 <HAL_DMA_DeInit+0x178>
 800591c:	2301      	movs	r3, #1
 800591e:	e000      	b.n	8005922 <HAL_DMA_DeInit+0x17a>
 8005920:	2300      	movs	r3, #0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d025      	beq.n	8005972 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2200      	movs	r2, #0
 800592c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2200      	movs	r2, #0
 8005934:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2200      	movs	r2, #0
 800593c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2200      	movs	r2, #0
 8005944:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2200      	movs	r2, #0
 800594c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2221      	movs	r2, #33	; 0x21
 8005954:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f002 f980 	bl	8007c5c <DMA_CalcBaseAndBitshift>
 800595c:	4603      	mov	r3, r0
 800595e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005964:	f003 031f 	and.w	r3, r3, #31
 8005968:	223f      	movs	r2, #63	; 0x3f
 800596a:	409a      	lsls	r2, r3
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	609a      	str	r2, [r3, #8]
 8005970:	e081      	b.n	8005a76 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a24      	ldr	r2, [pc, #144]	; (8005a08 <HAL_DMA_DeInit+0x260>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d022      	beq.n	80059c2 <HAL_DMA_DeInit+0x21a>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a22      	ldr	r2, [pc, #136]	; (8005a0c <HAL_DMA_DeInit+0x264>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d01d      	beq.n	80059c2 <HAL_DMA_DeInit+0x21a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a21      	ldr	r2, [pc, #132]	; (8005a10 <HAL_DMA_DeInit+0x268>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d018      	beq.n	80059c2 <HAL_DMA_DeInit+0x21a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a1f      	ldr	r2, [pc, #124]	; (8005a14 <HAL_DMA_DeInit+0x26c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <HAL_DMA_DeInit+0x21a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a1e      	ldr	r2, [pc, #120]	; (8005a18 <HAL_DMA_DeInit+0x270>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00e      	beq.n	80059c2 <HAL_DMA_DeInit+0x21a>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1c      	ldr	r2, [pc, #112]	; (8005a1c <HAL_DMA_DeInit+0x274>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d009      	beq.n	80059c2 <HAL_DMA_DeInit+0x21a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a1b      	ldr	r2, [pc, #108]	; (8005a20 <HAL_DMA_DeInit+0x278>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d004      	beq.n	80059c2 <HAL_DMA_DeInit+0x21a>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a19      	ldr	r2, [pc, #100]	; (8005a24 <HAL_DMA_DeInit+0x27c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d132      	bne.n	8005a28 <HAL_DMA_DeInit+0x280>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e031      	b.n	8005a2a <HAL_DMA_DeInit+0x282>
 80059c6:	bf00      	nop
 80059c8:	40020010 	.word	0x40020010
 80059cc:	40020028 	.word	0x40020028
 80059d0:	40020040 	.word	0x40020040
 80059d4:	40020058 	.word	0x40020058
 80059d8:	40020070 	.word	0x40020070
 80059dc:	40020088 	.word	0x40020088
 80059e0:	400200a0 	.word	0x400200a0
 80059e4:	400200b8 	.word	0x400200b8
 80059e8:	40020410 	.word	0x40020410
 80059ec:	40020428 	.word	0x40020428
 80059f0:	40020440 	.word	0x40020440
 80059f4:	40020458 	.word	0x40020458
 80059f8:	40020470 	.word	0x40020470
 80059fc:	40020488 	.word	0x40020488
 8005a00:	400204a0 	.word	0x400204a0
 8005a04:	400204b8 	.word	0x400204b8
 8005a08:	58025408 	.word	0x58025408
 8005a0c:	5802541c 	.word	0x5802541c
 8005a10:	58025430 	.word	0x58025430
 8005a14:	58025444 	.word	0x58025444
 8005a18:	58025458 	.word	0x58025458
 8005a1c:	5802546c 	.word	0x5802546c
 8005a20:	58025480 	.word	0x58025480
 8005a24:	58025494 	.word	0x58025494
 8005a28:	2300      	movs	r3, #0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d021      	beq.n	8005a72 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2200      	movs	r2, #0
 8005a44:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2200      	movs	r2, #0
 8005a54:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f002 f900 	bl	8007c5c <DMA_CalcBaseAndBitshift>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a64:	f003 031f 	and.w	r3, r3, #31
 8005a68:	2201      	movs	r2, #1
 8005a6a:	409a      	lsls	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	605a      	str	r2, [r3, #4]
 8005a70:	e001      	b.n	8005a76 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e04a      	b.n	8005b0c <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f002 fa1e 	bl	8007eb8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d008      	beq.n	8005a96 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a94:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00f      	beq.n	8005abe <HAL_DMA_DeInit+0x316>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d80b      	bhi.n	8005abe <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f002 faa0 	bl	8007fec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005abc:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e226      	b.n	8005f7e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <HAL_DMA_Start_IT+0x2a>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	e21f      	b.n	8005f7e <HAL_DMA_Start_IT+0x46a>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	f040 820a 	bne.w	8005f68 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a68      	ldr	r2, [pc, #416]	; (8005d08 <HAL_DMA_Start_IT+0x1f4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d04a      	beq.n	8005c02 <HAL_DMA_Start_IT+0xee>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a66      	ldr	r2, [pc, #408]	; (8005d0c <HAL_DMA_Start_IT+0x1f8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d045      	beq.n	8005c02 <HAL_DMA_Start_IT+0xee>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a65      	ldr	r2, [pc, #404]	; (8005d10 <HAL_DMA_Start_IT+0x1fc>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d040      	beq.n	8005c02 <HAL_DMA_Start_IT+0xee>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a63      	ldr	r2, [pc, #396]	; (8005d14 <HAL_DMA_Start_IT+0x200>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d03b      	beq.n	8005c02 <HAL_DMA_Start_IT+0xee>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a62      	ldr	r2, [pc, #392]	; (8005d18 <HAL_DMA_Start_IT+0x204>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d036      	beq.n	8005c02 <HAL_DMA_Start_IT+0xee>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a60      	ldr	r2, [pc, #384]	; (8005d1c <HAL_DMA_Start_IT+0x208>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d031      	beq.n	8005c02 <HAL_DMA_Start_IT+0xee>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a5f      	ldr	r2, [pc, #380]	; (8005d20 <HAL_DMA_Start_IT+0x20c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d02c      	beq.n	8005c02 <HAL_DMA_Start_IT+0xee>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a5d      	ldr	r2, [pc, #372]	; (8005d24 <HAL_DMA_Start_IT+0x210>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d027      	beq.n	8005c02 <HAL_DMA_Start_IT+0xee>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a5c      	ldr	r2, [pc, #368]	; (8005d28 <HAL_DMA_Start_IT+0x214>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d022      	beq.n	8005c02 <HAL_DMA_Start_IT+0xee>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a5a      	ldr	r2, [pc, #360]	; (8005d2c <HAL_DMA_Start_IT+0x218>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d01d      	beq.n	8005c02 <HAL_DMA_Start_IT+0xee>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a59      	ldr	r2, [pc, #356]	; (8005d30 <HAL_DMA_Start_IT+0x21c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d018      	beq.n	8005c02 <HAL_DMA_Start_IT+0xee>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a57      	ldr	r2, [pc, #348]	; (8005d34 <HAL_DMA_Start_IT+0x220>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d013      	beq.n	8005c02 <HAL_DMA_Start_IT+0xee>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a56      	ldr	r2, [pc, #344]	; (8005d38 <HAL_DMA_Start_IT+0x224>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00e      	beq.n	8005c02 <HAL_DMA_Start_IT+0xee>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a54      	ldr	r2, [pc, #336]	; (8005d3c <HAL_DMA_Start_IT+0x228>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d009      	beq.n	8005c02 <HAL_DMA_Start_IT+0xee>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a53      	ldr	r2, [pc, #332]	; (8005d40 <HAL_DMA_Start_IT+0x22c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d004      	beq.n	8005c02 <HAL_DMA_Start_IT+0xee>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a51      	ldr	r2, [pc, #324]	; (8005d44 <HAL_DMA_Start_IT+0x230>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d108      	bne.n	8005c14 <HAL_DMA_Start_IT+0x100>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0201 	bic.w	r2, r2, #1
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	e007      	b.n	8005c24 <HAL_DMA_Start_IT+0x110>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0201 	bic.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	68b9      	ldr	r1, [r7, #8]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f001 fe6a 	bl	8007904 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a34      	ldr	r2, [pc, #208]	; (8005d08 <HAL_DMA_Start_IT+0x1f4>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d04a      	beq.n	8005cd0 <HAL_DMA_Start_IT+0x1bc>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a33      	ldr	r2, [pc, #204]	; (8005d0c <HAL_DMA_Start_IT+0x1f8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d045      	beq.n	8005cd0 <HAL_DMA_Start_IT+0x1bc>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a31      	ldr	r2, [pc, #196]	; (8005d10 <HAL_DMA_Start_IT+0x1fc>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d040      	beq.n	8005cd0 <HAL_DMA_Start_IT+0x1bc>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a30      	ldr	r2, [pc, #192]	; (8005d14 <HAL_DMA_Start_IT+0x200>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d03b      	beq.n	8005cd0 <HAL_DMA_Start_IT+0x1bc>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a2e      	ldr	r2, [pc, #184]	; (8005d18 <HAL_DMA_Start_IT+0x204>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d036      	beq.n	8005cd0 <HAL_DMA_Start_IT+0x1bc>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a2d      	ldr	r2, [pc, #180]	; (8005d1c <HAL_DMA_Start_IT+0x208>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d031      	beq.n	8005cd0 <HAL_DMA_Start_IT+0x1bc>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a2b      	ldr	r2, [pc, #172]	; (8005d20 <HAL_DMA_Start_IT+0x20c>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d02c      	beq.n	8005cd0 <HAL_DMA_Start_IT+0x1bc>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a2a      	ldr	r2, [pc, #168]	; (8005d24 <HAL_DMA_Start_IT+0x210>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d027      	beq.n	8005cd0 <HAL_DMA_Start_IT+0x1bc>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a28      	ldr	r2, [pc, #160]	; (8005d28 <HAL_DMA_Start_IT+0x214>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d022      	beq.n	8005cd0 <HAL_DMA_Start_IT+0x1bc>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a27      	ldr	r2, [pc, #156]	; (8005d2c <HAL_DMA_Start_IT+0x218>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d01d      	beq.n	8005cd0 <HAL_DMA_Start_IT+0x1bc>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a25      	ldr	r2, [pc, #148]	; (8005d30 <HAL_DMA_Start_IT+0x21c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d018      	beq.n	8005cd0 <HAL_DMA_Start_IT+0x1bc>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a24      	ldr	r2, [pc, #144]	; (8005d34 <HAL_DMA_Start_IT+0x220>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d013      	beq.n	8005cd0 <HAL_DMA_Start_IT+0x1bc>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a22      	ldr	r2, [pc, #136]	; (8005d38 <HAL_DMA_Start_IT+0x224>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00e      	beq.n	8005cd0 <HAL_DMA_Start_IT+0x1bc>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a21      	ldr	r2, [pc, #132]	; (8005d3c <HAL_DMA_Start_IT+0x228>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d009      	beq.n	8005cd0 <HAL_DMA_Start_IT+0x1bc>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <HAL_DMA_Start_IT+0x22c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d004      	beq.n	8005cd0 <HAL_DMA_Start_IT+0x1bc>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1e      	ldr	r2, [pc, #120]	; (8005d44 <HAL_DMA_Start_IT+0x230>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d101      	bne.n	8005cd4 <HAL_DMA_Start_IT+0x1c0>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e000      	b.n	8005cd6 <HAL_DMA_Start_IT+0x1c2>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d036      	beq.n	8005d48 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f023 021e 	bic.w	r2, r3, #30
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0216 	orr.w	r2, r2, #22
 8005cec:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d03e      	beq.n	8005d74 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f042 0208 	orr.w	r2, r2, #8
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	e035      	b.n	8005d74 <HAL_DMA_Start_IT+0x260>
 8005d08:	40020010 	.word	0x40020010
 8005d0c:	40020028 	.word	0x40020028
 8005d10:	40020040 	.word	0x40020040
 8005d14:	40020058 	.word	0x40020058
 8005d18:	40020070 	.word	0x40020070
 8005d1c:	40020088 	.word	0x40020088
 8005d20:	400200a0 	.word	0x400200a0
 8005d24:	400200b8 	.word	0x400200b8
 8005d28:	40020410 	.word	0x40020410
 8005d2c:	40020428 	.word	0x40020428
 8005d30:	40020440 	.word	0x40020440
 8005d34:	40020458 	.word	0x40020458
 8005d38:	40020470 	.word	0x40020470
 8005d3c:	40020488 	.word	0x40020488
 8005d40:	400204a0 	.word	0x400204a0
 8005d44:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f023 020e 	bic.w	r2, r3, #14
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 020a 	orr.w	r2, r2, #10
 8005d5a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d007      	beq.n	8005d74 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0204 	orr.w	r2, r2, #4
 8005d72:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a83      	ldr	r2, [pc, #524]	; (8005f88 <HAL_DMA_Start_IT+0x474>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d072      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a82      	ldr	r2, [pc, #520]	; (8005f8c <HAL_DMA_Start_IT+0x478>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d06d      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a80      	ldr	r2, [pc, #512]	; (8005f90 <HAL_DMA_Start_IT+0x47c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d068      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a7f      	ldr	r2, [pc, #508]	; (8005f94 <HAL_DMA_Start_IT+0x480>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d063      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a7d      	ldr	r2, [pc, #500]	; (8005f98 <HAL_DMA_Start_IT+0x484>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d05e      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a7c      	ldr	r2, [pc, #496]	; (8005f9c <HAL_DMA_Start_IT+0x488>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d059      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a7a      	ldr	r2, [pc, #488]	; (8005fa0 <HAL_DMA_Start_IT+0x48c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d054      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a79      	ldr	r2, [pc, #484]	; (8005fa4 <HAL_DMA_Start_IT+0x490>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d04f      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a77      	ldr	r2, [pc, #476]	; (8005fa8 <HAL_DMA_Start_IT+0x494>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d04a      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a76      	ldr	r2, [pc, #472]	; (8005fac <HAL_DMA_Start_IT+0x498>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d045      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a74      	ldr	r2, [pc, #464]	; (8005fb0 <HAL_DMA_Start_IT+0x49c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d040      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a73      	ldr	r2, [pc, #460]	; (8005fb4 <HAL_DMA_Start_IT+0x4a0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d03b      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a71      	ldr	r2, [pc, #452]	; (8005fb8 <HAL_DMA_Start_IT+0x4a4>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d036      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a70      	ldr	r2, [pc, #448]	; (8005fbc <HAL_DMA_Start_IT+0x4a8>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d031      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a6e      	ldr	r2, [pc, #440]	; (8005fc0 <HAL_DMA_Start_IT+0x4ac>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d02c      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a6d      	ldr	r2, [pc, #436]	; (8005fc4 <HAL_DMA_Start_IT+0x4b0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d027      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a6b      	ldr	r2, [pc, #428]	; (8005fc8 <HAL_DMA_Start_IT+0x4b4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d022      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a6a      	ldr	r2, [pc, #424]	; (8005fcc <HAL_DMA_Start_IT+0x4b8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d01d      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a68      	ldr	r2, [pc, #416]	; (8005fd0 <HAL_DMA_Start_IT+0x4bc>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d018      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a67      	ldr	r2, [pc, #412]	; (8005fd4 <HAL_DMA_Start_IT+0x4c0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d013      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a65      	ldr	r2, [pc, #404]	; (8005fd8 <HAL_DMA_Start_IT+0x4c4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00e      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a64      	ldr	r2, [pc, #400]	; (8005fdc <HAL_DMA_Start_IT+0x4c8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d009      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a62      	ldr	r2, [pc, #392]	; (8005fe0 <HAL_DMA_Start_IT+0x4cc>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d004      	beq.n	8005e64 <HAL_DMA_Start_IT+0x350>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a61      	ldr	r2, [pc, #388]	; (8005fe4 <HAL_DMA_Start_IT+0x4d0>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d101      	bne.n	8005e68 <HAL_DMA_Start_IT+0x354>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <HAL_DMA_Start_IT+0x356>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d01a      	beq.n	8005ea4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d007      	beq.n	8005e8c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e8a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d007      	beq.n	8005ea4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ea2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a37      	ldr	r2, [pc, #220]	; (8005f88 <HAL_DMA_Start_IT+0x474>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d04a      	beq.n	8005f44 <HAL_DMA_Start_IT+0x430>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a36      	ldr	r2, [pc, #216]	; (8005f8c <HAL_DMA_Start_IT+0x478>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d045      	beq.n	8005f44 <HAL_DMA_Start_IT+0x430>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a34      	ldr	r2, [pc, #208]	; (8005f90 <HAL_DMA_Start_IT+0x47c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d040      	beq.n	8005f44 <HAL_DMA_Start_IT+0x430>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a33      	ldr	r2, [pc, #204]	; (8005f94 <HAL_DMA_Start_IT+0x480>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d03b      	beq.n	8005f44 <HAL_DMA_Start_IT+0x430>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a31      	ldr	r2, [pc, #196]	; (8005f98 <HAL_DMA_Start_IT+0x484>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d036      	beq.n	8005f44 <HAL_DMA_Start_IT+0x430>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a30      	ldr	r2, [pc, #192]	; (8005f9c <HAL_DMA_Start_IT+0x488>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d031      	beq.n	8005f44 <HAL_DMA_Start_IT+0x430>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a2e      	ldr	r2, [pc, #184]	; (8005fa0 <HAL_DMA_Start_IT+0x48c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d02c      	beq.n	8005f44 <HAL_DMA_Start_IT+0x430>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a2d      	ldr	r2, [pc, #180]	; (8005fa4 <HAL_DMA_Start_IT+0x490>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d027      	beq.n	8005f44 <HAL_DMA_Start_IT+0x430>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a2b      	ldr	r2, [pc, #172]	; (8005fa8 <HAL_DMA_Start_IT+0x494>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d022      	beq.n	8005f44 <HAL_DMA_Start_IT+0x430>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a2a      	ldr	r2, [pc, #168]	; (8005fac <HAL_DMA_Start_IT+0x498>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d01d      	beq.n	8005f44 <HAL_DMA_Start_IT+0x430>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a28      	ldr	r2, [pc, #160]	; (8005fb0 <HAL_DMA_Start_IT+0x49c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d018      	beq.n	8005f44 <HAL_DMA_Start_IT+0x430>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a27      	ldr	r2, [pc, #156]	; (8005fb4 <HAL_DMA_Start_IT+0x4a0>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d013      	beq.n	8005f44 <HAL_DMA_Start_IT+0x430>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a25      	ldr	r2, [pc, #148]	; (8005fb8 <HAL_DMA_Start_IT+0x4a4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00e      	beq.n	8005f44 <HAL_DMA_Start_IT+0x430>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a24      	ldr	r2, [pc, #144]	; (8005fbc <HAL_DMA_Start_IT+0x4a8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d009      	beq.n	8005f44 <HAL_DMA_Start_IT+0x430>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a22      	ldr	r2, [pc, #136]	; (8005fc0 <HAL_DMA_Start_IT+0x4ac>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d004      	beq.n	8005f44 <HAL_DMA_Start_IT+0x430>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a21      	ldr	r2, [pc, #132]	; (8005fc4 <HAL_DMA_Start_IT+0x4b0>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d108      	bne.n	8005f56 <HAL_DMA_Start_IT+0x442>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0201 	orr.w	r2, r2, #1
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	e012      	b.n	8005f7c <HAL_DMA_Start_IT+0x468>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f042 0201 	orr.w	r2, r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e009      	b.n	8005f7c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f6e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	40020010 	.word	0x40020010
 8005f8c:	40020028 	.word	0x40020028
 8005f90:	40020040 	.word	0x40020040
 8005f94:	40020058 	.word	0x40020058
 8005f98:	40020070 	.word	0x40020070
 8005f9c:	40020088 	.word	0x40020088
 8005fa0:	400200a0 	.word	0x400200a0
 8005fa4:	400200b8 	.word	0x400200b8
 8005fa8:	40020410 	.word	0x40020410
 8005fac:	40020428 	.word	0x40020428
 8005fb0:	40020440 	.word	0x40020440
 8005fb4:	40020458 	.word	0x40020458
 8005fb8:	40020470 	.word	0x40020470
 8005fbc:	40020488 	.word	0x40020488
 8005fc0:	400204a0 	.word	0x400204a0
 8005fc4:	400204b8 	.word	0x400204b8
 8005fc8:	58025408 	.word	0x58025408
 8005fcc:	5802541c 	.word	0x5802541c
 8005fd0:	58025430 	.word	0x58025430
 8005fd4:	58025444 	.word	0x58025444
 8005fd8:	58025458 	.word	0x58025458
 8005fdc:	5802546c 	.word	0x5802546c
 8005fe0:	58025480 	.word	0x58025480
 8005fe4:	58025494 	.word	0x58025494

08005fe8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005ff0:	f7fe ff32 	bl	8004e58 <HAL_GetTick>
 8005ff4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e2dc      	b.n	80065ba <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d008      	beq.n	800601e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2280      	movs	r2, #128	; 0x80
 8006010:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e2cd      	b.n	80065ba <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a76      	ldr	r2, [pc, #472]	; (80061fc <HAL_DMA_Abort+0x214>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d04a      	beq.n	80060be <HAL_DMA_Abort+0xd6>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a74      	ldr	r2, [pc, #464]	; (8006200 <HAL_DMA_Abort+0x218>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d045      	beq.n	80060be <HAL_DMA_Abort+0xd6>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a73      	ldr	r2, [pc, #460]	; (8006204 <HAL_DMA_Abort+0x21c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d040      	beq.n	80060be <HAL_DMA_Abort+0xd6>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a71      	ldr	r2, [pc, #452]	; (8006208 <HAL_DMA_Abort+0x220>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d03b      	beq.n	80060be <HAL_DMA_Abort+0xd6>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a70      	ldr	r2, [pc, #448]	; (800620c <HAL_DMA_Abort+0x224>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d036      	beq.n	80060be <HAL_DMA_Abort+0xd6>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a6e      	ldr	r2, [pc, #440]	; (8006210 <HAL_DMA_Abort+0x228>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d031      	beq.n	80060be <HAL_DMA_Abort+0xd6>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a6d      	ldr	r2, [pc, #436]	; (8006214 <HAL_DMA_Abort+0x22c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d02c      	beq.n	80060be <HAL_DMA_Abort+0xd6>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a6b      	ldr	r2, [pc, #428]	; (8006218 <HAL_DMA_Abort+0x230>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d027      	beq.n	80060be <HAL_DMA_Abort+0xd6>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a6a      	ldr	r2, [pc, #424]	; (800621c <HAL_DMA_Abort+0x234>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d022      	beq.n	80060be <HAL_DMA_Abort+0xd6>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a68      	ldr	r2, [pc, #416]	; (8006220 <HAL_DMA_Abort+0x238>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d01d      	beq.n	80060be <HAL_DMA_Abort+0xd6>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a67      	ldr	r2, [pc, #412]	; (8006224 <HAL_DMA_Abort+0x23c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d018      	beq.n	80060be <HAL_DMA_Abort+0xd6>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a65      	ldr	r2, [pc, #404]	; (8006228 <HAL_DMA_Abort+0x240>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d013      	beq.n	80060be <HAL_DMA_Abort+0xd6>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a64      	ldr	r2, [pc, #400]	; (800622c <HAL_DMA_Abort+0x244>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00e      	beq.n	80060be <HAL_DMA_Abort+0xd6>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a62      	ldr	r2, [pc, #392]	; (8006230 <HAL_DMA_Abort+0x248>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d009      	beq.n	80060be <HAL_DMA_Abort+0xd6>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a61      	ldr	r2, [pc, #388]	; (8006234 <HAL_DMA_Abort+0x24c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d004      	beq.n	80060be <HAL_DMA_Abort+0xd6>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a5f      	ldr	r2, [pc, #380]	; (8006238 <HAL_DMA_Abort+0x250>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d101      	bne.n	80060c2 <HAL_DMA_Abort+0xda>
 80060be:	2301      	movs	r3, #1
 80060c0:	e000      	b.n	80060c4 <HAL_DMA_Abort+0xdc>
 80060c2:	2300      	movs	r3, #0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d013      	beq.n	80060f0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 021e 	bic.w	r2, r2, #30
 80060d6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695a      	ldr	r2, [r3, #20]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060e6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	e00a      	b.n	8006106 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 020e 	bic.w	r2, r2, #14
 80060fe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a3c      	ldr	r2, [pc, #240]	; (80061fc <HAL_DMA_Abort+0x214>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d072      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a3a      	ldr	r2, [pc, #232]	; (8006200 <HAL_DMA_Abort+0x218>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d06d      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a39      	ldr	r2, [pc, #228]	; (8006204 <HAL_DMA_Abort+0x21c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d068      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a37      	ldr	r2, [pc, #220]	; (8006208 <HAL_DMA_Abort+0x220>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d063      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a36      	ldr	r2, [pc, #216]	; (800620c <HAL_DMA_Abort+0x224>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d05e      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a34      	ldr	r2, [pc, #208]	; (8006210 <HAL_DMA_Abort+0x228>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d059      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a33      	ldr	r2, [pc, #204]	; (8006214 <HAL_DMA_Abort+0x22c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d054      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a31      	ldr	r2, [pc, #196]	; (8006218 <HAL_DMA_Abort+0x230>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d04f      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a30      	ldr	r2, [pc, #192]	; (800621c <HAL_DMA_Abort+0x234>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d04a      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a2e      	ldr	r2, [pc, #184]	; (8006220 <HAL_DMA_Abort+0x238>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d045      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a2d      	ldr	r2, [pc, #180]	; (8006224 <HAL_DMA_Abort+0x23c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d040      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a2b      	ldr	r2, [pc, #172]	; (8006228 <HAL_DMA_Abort+0x240>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d03b      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a2a      	ldr	r2, [pc, #168]	; (800622c <HAL_DMA_Abort+0x244>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d036      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a28      	ldr	r2, [pc, #160]	; (8006230 <HAL_DMA_Abort+0x248>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d031      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a27      	ldr	r2, [pc, #156]	; (8006234 <HAL_DMA_Abort+0x24c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d02c      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a25      	ldr	r2, [pc, #148]	; (8006238 <HAL_DMA_Abort+0x250>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d027      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a24      	ldr	r2, [pc, #144]	; (800623c <HAL_DMA_Abort+0x254>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d022      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a22      	ldr	r2, [pc, #136]	; (8006240 <HAL_DMA_Abort+0x258>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d01d      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a21      	ldr	r2, [pc, #132]	; (8006244 <HAL_DMA_Abort+0x25c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d018      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a1f      	ldr	r2, [pc, #124]	; (8006248 <HAL_DMA_Abort+0x260>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d013      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a1e      	ldr	r2, [pc, #120]	; (800624c <HAL_DMA_Abort+0x264>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00e      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a1c      	ldr	r2, [pc, #112]	; (8006250 <HAL_DMA_Abort+0x268>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d009      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a1b      	ldr	r2, [pc, #108]	; (8006254 <HAL_DMA_Abort+0x26c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d004      	beq.n	80061f6 <HAL_DMA_Abort+0x20e>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a19      	ldr	r2, [pc, #100]	; (8006258 <HAL_DMA_Abort+0x270>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d132      	bne.n	800625c <HAL_DMA_Abort+0x274>
 80061f6:	2301      	movs	r3, #1
 80061f8:	e031      	b.n	800625e <HAL_DMA_Abort+0x276>
 80061fa:	bf00      	nop
 80061fc:	40020010 	.word	0x40020010
 8006200:	40020028 	.word	0x40020028
 8006204:	40020040 	.word	0x40020040
 8006208:	40020058 	.word	0x40020058
 800620c:	40020070 	.word	0x40020070
 8006210:	40020088 	.word	0x40020088
 8006214:	400200a0 	.word	0x400200a0
 8006218:	400200b8 	.word	0x400200b8
 800621c:	40020410 	.word	0x40020410
 8006220:	40020428 	.word	0x40020428
 8006224:	40020440 	.word	0x40020440
 8006228:	40020458 	.word	0x40020458
 800622c:	40020470 	.word	0x40020470
 8006230:	40020488 	.word	0x40020488
 8006234:	400204a0 	.word	0x400204a0
 8006238:	400204b8 	.word	0x400204b8
 800623c:	58025408 	.word	0x58025408
 8006240:	5802541c 	.word	0x5802541c
 8006244:	58025430 	.word	0x58025430
 8006248:	58025444 	.word	0x58025444
 800624c:	58025458 	.word	0x58025458
 8006250:	5802546c 	.word	0x5802546c
 8006254:	58025480 	.word	0x58025480
 8006258:	58025494 	.word	0x58025494
 800625c:	2300      	movs	r3, #0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d007      	beq.n	8006272 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800626c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006270:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a6d      	ldr	r2, [pc, #436]	; (800642c <HAL_DMA_Abort+0x444>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d04a      	beq.n	8006312 <HAL_DMA_Abort+0x32a>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a6b      	ldr	r2, [pc, #428]	; (8006430 <HAL_DMA_Abort+0x448>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d045      	beq.n	8006312 <HAL_DMA_Abort+0x32a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a6a      	ldr	r2, [pc, #424]	; (8006434 <HAL_DMA_Abort+0x44c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d040      	beq.n	8006312 <HAL_DMA_Abort+0x32a>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a68      	ldr	r2, [pc, #416]	; (8006438 <HAL_DMA_Abort+0x450>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d03b      	beq.n	8006312 <HAL_DMA_Abort+0x32a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a67      	ldr	r2, [pc, #412]	; (800643c <HAL_DMA_Abort+0x454>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d036      	beq.n	8006312 <HAL_DMA_Abort+0x32a>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a65      	ldr	r2, [pc, #404]	; (8006440 <HAL_DMA_Abort+0x458>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d031      	beq.n	8006312 <HAL_DMA_Abort+0x32a>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a64      	ldr	r2, [pc, #400]	; (8006444 <HAL_DMA_Abort+0x45c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d02c      	beq.n	8006312 <HAL_DMA_Abort+0x32a>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a62      	ldr	r2, [pc, #392]	; (8006448 <HAL_DMA_Abort+0x460>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d027      	beq.n	8006312 <HAL_DMA_Abort+0x32a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a61      	ldr	r2, [pc, #388]	; (800644c <HAL_DMA_Abort+0x464>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d022      	beq.n	8006312 <HAL_DMA_Abort+0x32a>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a5f      	ldr	r2, [pc, #380]	; (8006450 <HAL_DMA_Abort+0x468>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d01d      	beq.n	8006312 <HAL_DMA_Abort+0x32a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a5e      	ldr	r2, [pc, #376]	; (8006454 <HAL_DMA_Abort+0x46c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d018      	beq.n	8006312 <HAL_DMA_Abort+0x32a>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a5c      	ldr	r2, [pc, #368]	; (8006458 <HAL_DMA_Abort+0x470>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d013      	beq.n	8006312 <HAL_DMA_Abort+0x32a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a5b      	ldr	r2, [pc, #364]	; (800645c <HAL_DMA_Abort+0x474>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d00e      	beq.n	8006312 <HAL_DMA_Abort+0x32a>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a59      	ldr	r2, [pc, #356]	; (8006460 <HAL_DMA_Abort+0x478>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d009      	beq.n	8006312 <HAL_DMA_Abort+0x32a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a58      	ldr	r2, [pc, #352]	; (8006464 <HAL_DMA_Abort+0x47c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d004      	beq.n	8006312 <HAL_DMA_Abort+0x32a>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a56      	ldr	r2, [pc, #344]	; (8006468 <HAL_DMA_Abort+0x480>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d108      	bne.n	8006324 <HAL_DMA_Abort+0x33c>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 0201 	bic.w	r2, r2, #1
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	e007      	b.n	8006334 <HAL_DMA_Abort+0x34c>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0201 	bic.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006334:	e013      	b.n	800635e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006336:	f7fe fd8f 	bl	8004e58 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b05      	cmp	r3, #5
 8006342:	d90c      	bls.n	800635e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2220      	movs	r2, #32
 8006348:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2203      	movs	r2, #3
 800634e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e12d      	b.n	80065ba <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e5      	bne.n	8006336 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a2f      	ldr	r2, [pc, #188]	; (800642c <HAL_DMA_Abort+0x444>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d04a      	beq.n	800640a <HAL_DMA_Abort+0x422>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a2d      	ldr	r2, [pc, #180]	; (8006430 <HAL_DMA_Abort+0x448>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d045      	beq.n	800640a <HAL_DMA_Abort+0x422>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a2c      	ldr	r2, [pc, #176]	; (8006434 <HAL_DMA_Abort+0x44c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d040      	beq.n	800640a <HAL_DMA_Abort+0x422>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a2a      	ldr	r2, [pc, #168]	; (8006438 <HAL_DMA_Abort+0x450>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d03b      	beq.n	800640a <HAL_DMA_Abort+0x422>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a29      	ldr	r2, [pc, #164]	; (800643c <HAL_DMA_Abort+0x454>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d036      	beq.n	800640a <HAL_DMA_Abort+0x422>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a27      	ldr	r2, [pc, #156]	; (8006440 <HAL_DMA_Abort+0x458>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d031      	beq.n	800640a <HAL_DMA_Abort+0x422>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a26      	ldr	r2, [pc, #152]	; (8006444 <HAL_DMA_Abort+0x45c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d02c      	beq.n	800640a <HAL_DMA_Abort+0x422>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a24      	ldr	r2, [pc, #144]	; (8006448 <HAL_DMA_Abort+0x460>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d027      	beq.n	800640a <HAL_DMA_Abort+0x422>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a23      	ldr	r2, [pc, #140]	; (800644c <HAL_DMA_Abort+0x464>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d022      	beq.n	800640a <HAL_DMA_Abort+0x422>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a21      	ldr	r2, [pc, #132]	; (8006450 <HAL_DMA_Abort+0x468>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d01d      	beq.n	800640a <HAL_DMA_Abort+0x422>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a20      	ldr	r2, [pc, #128]	; (8006454 <HAL_DMA_Abort+0x46c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d018      	beq.n	800640a <HAL_DMA_Abort+0x422>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a1e      	ldr	r2, [pc, #120]	; (8006458 <HAL_DMA_Abort+0x470>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d013      	beq.n	800640a <HAL_DMA_Abort+0x422>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a1d      	ldr	r2, [pc, #116]	; (800645c <HAL_DMA_Abort+0x474>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d00e      	beq.n	800640a <HAL_DMA_Abort+0x422>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a1b      	ldr	r2, [pc, #108]	; (8006460 <HAL_DMA_Abort+0x478>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d009      	beq.n	800640a <HAL_DMA_Abort+0x422>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a1a      	ldr	r2, [pc, #104]	; (8006464 <HAL_DMA_Abort+0x47c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d004      	beq.n	800640a <HAL_DMA_Abort+0x422>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a18      	ldr	r2, [pc, #96]	; (8006468 <HAL_DMA_Abort+0x480>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d101      	bne.n	800640e <HAL_DMA_Abort+0x426>
 800640a:	2301      	movs	r3, #1
 800640c:	e000      	b.n	8006410 <HAL_DMA_Abort+0x428>
 800640e:	2300      	movs	r3, #0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d02b      	beq.n	800646c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006418:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641e:	f003 031f 	and.w	r3, r3, #31
 8006422:	223f      	movs	r2, #63	; 0x3f
 8006424:	409a      	lsls	r2, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	609a      	str	r2, [r3, #8]
 800642a:	e02a      	b.n	8006482 <HAL_DMA_Abort+0x49a>
 800642c:	40020010 	.word	0x40020010
 8006430:	40020028 	.word	0x40020028
 8006434:	40020040 	.word	0x40020040
 8006438:	40020058 	.word	0x40020058
 800643c:	40020070 	.word	0x40020070
 8006440:	40020088 	.word	0x40020088
 8006444:	400200a0 	.word	0x400200a0
 8006448:	400200b8 	.word	0x400200b8
 800644c:	40020410 	.word	0x40020410
 8006450:	40020428 	.word	0x40020428
 8006454:	40020440 	.word	0x40020440
 8006458:	40020458 	.word	0x40020458
 800645c:	40020470 	.word	0x40020470
 8006460:	40020488 	.word	0x40020488
 8006464:	400204a0 	.word	0x400204a0
 8006468:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006470:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006476:	f003 031f 	and.w	r3, r3, #31
 800647a:	2201      	movs	r2, #1
 800647c:	409a      	lsls	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a4f      	ldr	r2, [pc, #316]	; (80065c4 <HAL_DMA_Abort+0x5dc>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d072      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a4d      	ldr	r2, [pc, #308]	; (80065c8 <HAL_DMA_Abort+0x5e0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d06d      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a4c      	ldr	r2, [pc, #304]	; (80065cc <HAL_DMA_Abort+0x5e4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d068      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a4a      	ldr	r2, [pc, #296]	; (80065d0 <HAL_DMA_Abort+0x5e8>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d063      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a49      	ldr	r2, [pc, #292]	; (80065d4 <HAL_DMA_Abort+0x5ec>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d05e      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a47      	ldr	r2, [pc, #284]	; (80065d8 <HAL_DMA_Abort+0x5f0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d059      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a46      	ldr	r2, [pc, #280]	; (80065dc <HAL_DMA_Abort+0x5f4>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d054      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a44      	ldr	r2, [pc, #272]	; (80065e0 <HAL_DMA_Abort+0x5f8>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d04f      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a43      	ldr	r2, [pc, #268]	; (80065e4 <HAL_DMA_Abort+0x5fc>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d04a      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a41      	ldr	r2, [pc, #260]	; (80065e8 <HAL_DMA_Abort+0x600>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d045      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a40      	ldr	r2, [pc, #256]	; (80065ec <HAL_DMA_Abort+0x604>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d040      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a3e      	ldr	r2, [pc, #248]	; (80065f0 <HAL_DMA_Abort+0x608>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d03b      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a3d      	ldr	r2, [pc, #244]	; (80065f4 <HAL_DMA_Abort+0x60c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d036      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a3b      	ldr	r2, [pc, #236]	; (80065f8 <HAL_DMA_Abort+0x610>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d031      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a3a      	ldr	r2, [pc, #232]	; (80065fc <HAL_DMA_Abort+0x614>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d02c      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a38      	ldr	r2, [pc, #224]	; (8006600 <HAL_DMA_Abort+0x618>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d027      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a37      	ldr	r2, [pc, #220]	; (8006604 <HAL_DMA_Abort+0x61c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d022      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a35      	ldr	r2, [pc, #212]	; (8006608 <HAL_DMA_Abort+0x620>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d01d      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a34      	ldr	r2, [pc, #208]	; (800660c <HAL_DMA_Abort+0x624>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d018      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a32      	ldr	r2, [pc, #200]	; (8006610 <HAL_DMA_Abort+0x628>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d013      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a31      	ldr	r2, [pc, #196]	; (8006614 <HAL_DMA_Abort+0x62c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d00e      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a2f      	ldr	r2, [pc, #188]	; (8006618 <HAL_DMA_Abort+0x630>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d009      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a2e      	ldr	r2, [pc, #184]	; (800661c <HAL_DMA_Abort+0x634>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d004      	beq.n	8006572 <HAL_DMA_Abort+0x58a>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a2c      	ldr	r2, [pc, #176]	; (8006620 <HAL_DMA_Abort+0x638>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d101      	bne.n	8006576 <HAL_DMA_Abort+0x58e>
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <HAL_DMA_Abort+0x590>
 8006576:	2300      	movs	r3, #0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d015      	beq.n	80065a8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006584:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00c      	beq.n	80065a8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800659c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80065a6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3718      	adds	r7, #24
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	40020010 	.word	0x40020010
 80065c8:	40020028 	.word	0x40020028
 80065cc:	40020040 	.word	0x40020040
 80065d0:	40020058 	.word	0x40020058
 80065d4:	40020070 	.word	0x40020070
 80065d8:	40020088 	.word	0x40020088
 80065dc:	400200a0 	.word	0x400200a0
 80065e0:	400200b8 	.word	0x400200b8
 80065e4:	40020410 	.word	0x40020410
 80065e8:	40020428 	.word	0x40020428
 80065ec:	40020440 	.word	0x40020440
 80065f0:	40020458 	.word	0x40020458
 80065f4:	40020470 	.word	0x40020470
 80065f8:	40020488 	.word	0x40020488
 80065fc:	400204a0 	.word	0x400204a0
 8006600:	400204b8 	.word	0x400204b8
 8006604:	58025408 	.word	0x58025408
 8006608:	5802541c 	.word	0x5802541c
 800660c:	58025430 	.word	0x58025430
 8006610:	58025444 	.word	0x58025444
 8006614:	58025458 	.word	0x58025458
 8006618:	5802546c 	.word	0x5802546c
 800661c:	58025480 	.word	0x58025480
 8006620:	58025494 	.word	0x58025494

08006624 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e237      	b.n	8006aa6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d004      	beq.n	800664c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2280      	movs	r2, #128	; 0x80
 8006646:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e22c      	b.n	8006aa6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a5c      	ldr	r2, [pc, #368]	; (80067c4 <HAL_DMA_Abort_IT+0x1a0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d04a      	beq.n	80066ec <HAL_DMA_Abort_IT+0xc8>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a5b      	ldr	r2, [pc, #364]	; (80067c8 <HAL_DMA_Abort_IT+0x1a4>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d045      	beq.n	80066ec <HAL_DMA_Abort_IT+0xc8>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a59      	ldr	r2, [pc, #356]	; (80067cc <HAL_DMA_Abort_IT+0x1a8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d040      	beq.n	80066ec <HAL_DMA_Abort_IT+0xc8>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a58      	ldr	r2, [pc, #352]	; (80067d0 <HAL_DMA_Abort_IT+0x1ac>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d03b      	beq.n	80066ec <HAL_DMA_Abort_IT+0xc8>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a56      	ldr	r2, [pc, #344]	; (80067d4 <HAL_DMA_Abort_IT+0x1b0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d036      	beq.n	80066ec <HAL_DMA_Abort_IT+0xc8>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a55      	ldr	r2, [pc, #340]	; (80067d8 <HAL_DMA_Abort_IT+0x1b4>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d031      	beq.n	80066ec <HAL_DMA_Abort_IT+0xc8>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a53      	ldr	r2, [pc, #332]	; (80067dc <HAL_DMA_Abort_IT+0x1b8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d02c      	beq.n	80066ec <HAL_DMA_Abort_IT+0xc8>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a52      	ldr	r2, [pc, #328]	; (80067e0 <HAL_DMA_Abort_IT+0x1bc>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d027      	beq.n	80066ec <HAL_DMA_Abort_IT+0xc8>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a50      	ldr	r2, [pc, #320]	; (80067e4 <HAL_DMA_Abort_IT+0x1c0>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d022      	beq.n	80066ec <HAL_DMA_Abort_IT+0xc8>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a4f      	ldr	r2, [pc, #316]	; (80067e8 <HAL_DMA_Abort_IT+0x1c4>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d01d      	beq.n	80066ec <HAL_DMA_Abort_IT+0xc8>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a4d      	ldr	r2, [pc, #308]	; (80067ec <HAL_DMA_Abort_IT+0x1c8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d018      	beq.n	80066ec <HAL_DMA_Abort_IT+0xc8>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a4c      	ldr	r2, [pc, #304]	; (80067f0 <HAL_DMA_Abort_IT+0x1cc>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d013      	beq.n	80066ec <HAL_DMA_Abort_IT+0xc8>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a4a      	ldr	r2, [pc, #296]	; (80067f4 <HAL_DMA_Abort_IT+0x1d0>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d00e      	beq.n	80066ec <HAL_DMA_Abort_IT+0xc8>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a49      	ldr	r2, [pc, #292]	; (80067f8 <HAL_DMA_Abort_IT+0x1d4>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d009      	beq.n	80066ec <HAL_DMA_Abort_IT+0xc8>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a47      	ldr	r2, [pc, #284]	; (80067fc <HAL_DMA_Abort_IT+0x1d8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d004      	beq.n	80066ec <HAL_DMA_Abort_IT+0xc8>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a46      	ldr	r2, [pc, #280]	; (8006800 <HAL_DMA_Abort_IT+0x1dc>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d101      	bne.n	80066f0 <HAL_DMA_Abort_IT+0xcc>
 80066ec:	2301      	movs	r3, #1
 80066ee:	e000      	b.n	80066f2 <HAL_DMA_Abort_IT+0xce>
 80066f0:	2300      	movs	r3, #0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 8086 	beq.w	8006804 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2204      	movs	r2, #4
 80066fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a2f      	ldr	r2, [pc, #188]	; (80067c4 <HAL_DMA_Abort_IT+0x1a0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d04a      	beq.n	80067a0 <HAL_DMA_Abort_IT+0x17c>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a2e      	ldr	r2, [pc, #184]	; (80067c8 <HAL_DMA_Abort_IT+0x1a4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d045      	beq.n	80067a0 <HAL_DMA_Abort_IT+0x17c>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a2c      	ldr	r2, [pc, #176]	; (80067cc <HAL_DMA_Abort_IT+0x1a8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d040      	beq.n	80067a0 <HAL_DMA_Abort_IT+0x17c>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a2b      	ldr	r2, [pc, #172]	; (80067d0 <HAL_DMA_Abort_IT+0x1ac>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d03b      	beq.n	80067a0 <HAL_DMA_Abort_IT+0x17c>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a29      	ldr	r2, [pc, #164]	; (80067d4 <HAL_DMA_Abort_IT+0x1b0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d036      	beq.n	80067a0 <HAL_DMA_Abort_IT+0x17c>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a28      	ldr	r2, [pc, #160]	; (80067d8 <HAL_DMA_Abort_IT+0x1b4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d031      	beq.n	80067a0 <HAL_DMA_Abort_IT+0x17c>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a26      	ldr	r2, [pc, #152]	; (80067dc <HAL_DMA_Abort_IT+0x1b8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d02c      	beq.n	80067a0 <HAL_DMA_Abort_IT+0x17c>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a25      	ldr	r2, [pc, #148]	; (80067e0 <HAL_DMA_Abort_IT+0x1bc>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d027      	beq.n	80067a0 <HAL_DMA_Abort_IT+0x17c>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a23      	ldr	r2, [pc, #140]	; (80067e4 <HAL_DMA_Abort_IT+0x1c0>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d022      	beq.n	80067a0 <HAL_DMA_Abort_IT+0x17c>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a22      	ldr	r2, [pc, #136]	; (80067e8 <HAL_DMA_Abort_IT+0x1c4>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d01d      	beq.n	80067a0 <HAL_DMA_Abort_IT+0x17c>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a20      	ldr	r2, [pc, #128]	; (80067ec <HAL_DMA_Abort_IT+0x1c8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d018      	beq.n	80067a0 <HAL_DMA_Abort_IT+0x17c>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a1f      	ldr	r2, [pc, #124]	; (80067f0 <HAL_DMA_Abort_IT+0x1cc>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d013      	beq.n	80067a0 <HAL_DMA_Abort_IT+0x17c>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a1d      	ldr	r2, [pc, #116]	; (80067f4 <HAL_DMA_Abort_IT+0x1d0>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00e      	beq.n	80067a0 <HAL_DMA_Abort_IT+0x17c>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a1c      	ldr	r2, [pc, #112]	; (80067f8 <HAL_DMA_Abort_IT+0x1d4>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d009      	beq.n	80067a0 <HAL_DMA_Abort_IT+0x17c>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1a      	ldr	r2, [pc, #104]	; (80067fc <HAL_DMA_Abort_IT+0x1d8>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d004      	beq.n	80067a0 <HAL_DMA_Abort_IT+0x17c>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a19      	ldr	r2, [pc, #100]	; (8006800 <HAL_DMA_Abort_IT+0x1dc>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d108      	bne.n	80067b2 <HAL_DMA_Abort_IT+0x18e>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0201 	bic.w	r2, r2, #1
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	e178      	b.n	8006aa4 <HAL_DMA_Abort_IT+0x480>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0201 	bic.w	r2, r2, #1
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	e16f      	b.n	8006aa4 <HAL_DMA_Abort_IT+0x480>
 80067c4:	40020010 	.word	0x40020010
 80067c8:	40020028 	.word	0x40020028
 80067cc:	40020040 	.word	0x40020040
 80067d0:	40020058 	.word	0x40020058
 80067d4:	40020070 	.word	0x40020070
 80067d8:	40020088 	.word	0x40020088
 80067dc:	400200a0 	.word	0x400200a0
 80067e0:	400200b8 	.word	0x400200b8
 80067e4:	40020410 	.word	0x40020410
 80067e8:	40020428 	.word	0x40020428
 80067ec:	40020440 	.word	0x40020440
 80067f0:	40020458 	.word	0x40020458
 80067f4:	40020470 	.word	0x40020470
 80067f8:	40020488 	.word	0x40020488
 80067fc:	400204a0 	.word	0x400204a0
 8006800:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 020e 	bic.w	r2, r2, #14
 8006812:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a6c      	ldr	r2, [pc, #432]	; (80069cc <HAL_DMA_Abort_IT+0x3a8>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d04a      	beq.n	80068b4 <HAL_DMA_Abort_IT+0x290>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a6b      	ldr	r2, [pc, #428]	; (80069d0 <HAL_DMA_Abort_IT+0x3ac>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d045      	beq.n	80068b4 <HAL_DMA_Abort_IT+0x290>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a69      	ldr	r2, [pc, #420]	; (80069d4 <HAL_DMA_Abort_IT+0x3b0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d040      	beq.n	80068b4 <HAL_DMA_Abort_IT+0x290>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a68      	ldr	r2, [pc, #416]	; (80069d8 <HAL_DMA_Abort_IT+0x3b4>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d03b      	beq.n	80068b4 <HAL_DMA_Abort_IT+0x290>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a66      	ldr	r2, [pc, #408]	; (80069dc <HAL_DMA_Abort_IT+0x3b8>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d036      	beq.n	80068b4 <HAL_DMA_Abort_IT+0x290>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a65      	ldr	r2, [pc, #404]	; (80069e0 <HAL_DMA_Abort_IT+0x3bc>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d031      	beq.n	80068b4 <HAL_DMA_Abort_IT+0x290>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a63      	ldr	r2, [pc, #396]	; (80069e4 <HAL_DMA_Abort_IT+0x3c0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d02c      	beq.n	80068b4 <HAL_DMA_Abort_IT+0x290>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a62      	ldr	r2, [pc, #392]	; (80069e8 <HAL_DMA_Abort_IT+0x3c4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d027      	beq.n	80068b4 <HAL_DMA_Abort_IT+0x290>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a60      	ldr	r2, [pc, #384]	; (80069ec <HAL_DMA_Abort_IT+0x3c8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d022      	beq.n	80068b4 <HAL_DMA_Abort_IT+0x290>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a5f      	ldr	r2, [pc, #380]	; (80069f0 <HAL_DMA_Abort_IT+0x3cc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d01d      	beq.n	80068b4 <HAL_DMA_Abort_IT+0x290>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a5d      	ldr	r2, [pc, #372]	; (80069f4 <HAL_DMA_Abort_IT+0x3d0>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d018      	beq.n	80068b4 <HAL_DMA_Abort_IT+0x290>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a5c      	ldr	r2, [pc, #368]	; (80069f8 <HAL_DMA_Abort_IT+0x3d4>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d013      	beq.n	80068b4 <HAL_DMA_Abort_IT+0x290>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a5a      	ldr	r2, [pc, #360]	; (80069fc <HAL_DMA_Abort_IT+0x3d8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d00e      	beq.n	80068b4 <HAL_DMA_Abort_IT+0x290>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a59      	ldr	r2, [pc, #356]	; (8006a00 <HAL_DMA_Abort_IT+0x3dc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d009      	beq.n	80068b4 <HAL_DMA_Abort_IT+0x290>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a57      	ldr	r2, [pc, #348]	; (8006a04 <HAL_DMA_Abort_IT+0x3e0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d004      	beq.n	80068b4 <HAL_DMA_Abort_IT+0x290>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a56      	ldr	r2, [pc, #344]	; (8006a08 <HAL_DMA_Abort_IT+0x3e4>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d108      	bne.n	80068c6 <HAL_DMA_Abort_IT+0x2a2>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0201 	bic.w	r2, r2, #1
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	e007      	b.n	80068d6 <HAL_DMA_Abort_IT+0x2b2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0201 	bic.w	r2, r2, #1
 80068d4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a3c      	ldr	r2, [pc, #240]	; (80069cc <HAL_DMA_Abort_IT+0x3a8>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d072      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a3a      	ldr	r2, [pc, #232]	; (80069d0 <HAL_DMA_Abort_IT+0x3ac>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d06d      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a39      	ldr	r2, [pc, #228]	; (80069d4 <HAL_DMA_Abort_IT+0x3b0>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d068      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a37      	ldr	r2, [pc, #220]	; (80069d8 <HAL_DMA_Abort_IT+0x3b4>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d063      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a36      	ldr	r2, [pc, #216]	; (80069dc <HAL_DMA_Abort_IT+0x3b8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d05e      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a34      	ldr	r2, [pc, #208]	; (80069e0 <HAL_DMA_Abort_IT+0x3bc>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d059      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a33      	ldr	r2, [pc, #204]	; (80069e4 <HAL_DMA_Abort_IT+0x3c0>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d054      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a31      	ldr	r2, [pc, #196]	; (80069e8 <HAL_DMA_Abort_IT+0x3c4>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d04f      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a30      	ldr	r2, [pc, #192]	; (80069ec <HAL_DMA_Abort_IT+0x3c8>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d04a      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a2e      	ldr	r2, [pc, #184]	; (80069f0 <HAL_DMA_Abort_IT+0x3cc>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d045      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a2d      	ldr	r2, [pc, #180]	; (80069f4 <HAL_DMA_Abort_IT+0x3d0>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d040      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a2b      	ldr	r2, [pc, #172]	; (80069f8 <HAL_DMA_Abort_IT+0x3d4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d03b      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a2a      	ldr	r2, [pc, #168]	; (80069fc <HAL_DMA_Abort_IT+0x3d8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d036      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a28      	ldr	r2, [pc, #160]	; (8006a00 <HAL_DMA_Abort_IT+0x3dc>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d031      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a27      	ldr	r2, [pc, #156]	; (8006a04 <HAL_DMA_Abort_IT+0x3e0>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d02c      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a25      	ldr	r2, [pc, #148]	; (8006a08 <HAL_DMA_Abort_IT+0x3e4>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d027      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a24      	ldr	r2, [pc, #144]	; (8006a0c <HAL_DMA_Abort_IT+0x3e8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d022      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a22      	ldr	r2, [pc, #136]	; (8006a10 <HAL_DMA_Abort_IT+0x3ec>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d01d      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a21      	ldr	r2, [pc, #132]	; (8006a14 <HAL_DMA_Abort_IT+0x3f0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d018      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a1f      	ldr	r2, [pc, #124]	; (8006a18 <HAL_DMA_Abort_IT+0x3f4>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d013      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a1e      	ldr	r2, [pc, #120]	; (8006a1c <HAL_DMA_Abort_IT+0x3f8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00e      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a1c      	ldr	r2, [pc, #112]	; (8006a20 <HAL_DMA_Abort_IT+0x3fc>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d009      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a1b      	ldr	r2, [pc, #108]	; (8006a24 <HAL_DMA_Abort_IT+0x400>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d004      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x3a2>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a19      	ldr	r2, [pc, #100]	; (8006a28 <HAL_DMA_Abort_IT+0x404>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d132      	bne.n	8006a2c <HAL_DMA_Abort_IT+0x408>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e031      	b.n	8006a2e <HAL_DMA_Abort_IT+0x40a>
 80069ca:	bf00      	nop
 80069cc:	40020010 	.word	0x40020010
 80069d0:	40020028 	.word	0x40020028
 80069d4:	40020040 	.word	0x40020040
 80069d8:	40020058 	.word	0x40020058
 80069dc:	40020070 	.word	0x40020070
 80069e0:	40020088 	.word	0x40020088
 80069e4:	400200a0 	.word	0x400200a0
 80069e8:	400200b8 	.word	0x400200b8
 80069ec:	40020410 	.word	0x40020410
 80069f0:	40020428 	.word	0x40020428
 80069f4:	40020440 	.word	0x40020440
 80069f8:	40020458 	.word	0x40020458
 80069fc:	40020470 	.word	0x40020470
 8006a00:	40020488 	.word	0x40020488
 8006a04:	400204a0 	.word	0x400204a0
 8006a08:	400204b8 	.word	0x400204b8
 8006a0c:	58025408 	.word	0x58025408
 8006a10:	5802541c 	.word	0x5802541c
 8006a14:	58025430 	.word	0x58025430
 8006a18:	58025444 	.word	0x58025444
 8006a1c:	58025458 	.word	0x58025458
 8006a20:	5802546c 	.word	0x5802546c
 8006a24:	58025480 	.word	0x58025480
 8006a28:	58025494 	.word	0x58025494
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d028      	beq.n	8006a84 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a40:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a46:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a4c:	f003 031f 	and.w	r3, r3, #31
 8006a50:	2201      	movs	r2, #1
 8006a52:	409a      	lsls	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a60:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00c      	beq.n	8006a84 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a78:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a82:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop

08006ab0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08a      	sub	sp, #40	; 0x28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006abc:	4b67      	ldr	r3, [pc, #412]	; (8006c5c <HAL_DMA_IRQHandler+0x1ac>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a67      	ldr	r2, [pc, #412]	; (8006c60 <HAL_DMA_IRQHandler+0x1b0>)
 8006ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac6:	0a9b      	lsrs	r3, r3, #10
 8006ac8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ace:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a5f      	ldr	r2, [pc, #380]	; (8006c64 <HAL_DMA_IRQHandler+0x1b4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d04a      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xd2>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a5d      	ldr	r2, [pc, #372]	; (8006c68 <HAL_DMA_IRQHandler+0x1b8>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d045      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xd2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a5c      	ldr	r2, [pc, #368]	; (8006c6c <HAL_DMA_IRQHandler+0x1bc>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d040      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xd2>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a5a      	ldr	r2, [pc, #360]	; (8006c70 <HAL_DMA_IRQHandler+0x1c0>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d03b      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xd2>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a59      	ldr	r2, [pc, #356]	; (8006c74 <HAL_DMA_IRQHandler+0x1c4>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d036      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xd2>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a57      	ldr	r2, [pc, #348]	; (8006c78 <HAL_DMA_IRQHandler+0x1c8>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d031      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xd2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a56      	ldr	r2, [pc, #344]	; (8006c7c <HAL_DMA_IRQHandler+0x1cc>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d02c      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xd2>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a54      	ldr	r2, [pc, #336]	; (8006c80 <HAL_DMA_IRQHandler+0x1d0>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d027      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xd2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a53      	ldr	r2, [pc, #332]	; (8006c84 <HAL_DMA_IRQHandler+0x1d4>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d022      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xd2>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a51      	ldr	r2, [pc, #324]	; (8006c88 <HAL_DMA_IRQHandler+0x1d8>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d01d      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xd2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a50      	ldr	r2, [pc, #320]	; (8006c8c <HAL_DMA_IRQHandler+0x1dc>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d018      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xd2>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a4e      	ldr	r2, [pc, #312]	; (8006c90 <HAL_DMA_IRQHandler+0x1e0>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d013      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xd2>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a4d      	ldr	r2, [pc, #308]	; (8006c94 <HAL_DMA_IRQHandler+0x1e4>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d00e      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xd2>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a4b      	ldr	r2, [pc, #300]	; (8006c98 <HAL_DMA_IRQHandler+0x1e8>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d009      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xd2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a4a      	ldr	r2, [pc, #296]	; (8006c9c <HAL_DMA_IRQHandler+0x1ec>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d004      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xd2>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a48      	ldr	r2, [pc, #288]	; (8006ca0 <HAL_DMA_IRQHandler+0x1f0>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d101      	bne.n	8006b86 <HAL_DMA_IRQHandler+0xd6>
 8006b82:	2301      	movs	r3, #1
 8006b84:	e000      	b.n	8006b88 <HAL_DMA_IRQHandler+0xd8>
 8006b86:	2300      	movs	r3, #0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 842b 	beq.w	80073e4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b92:	f003 031f 	and.w	r3, r3, #31
 8006b96:	2208      	movs	r2, #8
 8006b98:	409a      	lsls	r2, r3
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f000 80a2 	beq.w	8006ce8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a2e      	ldr	r2, [pc, #184]	; (8006c64 <HAL_DMA_IRQHandler+0x1b4>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d04a      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x194>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a2d      	ldr	r2, [pc, #180]	; (8006c68 <HAL_DMA_IRQHandler+0x1b8>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d045      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x194>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a2b      	ldr	r2, [pc, #172]	; (8006c6c <HAL_DMA_IRQHandler+0x1bc>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d040      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x194>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a2a      	ldr	r2, [pc, #168]	; (8006c70 <HAL_DMA_IRQHandler+0x1c0>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d03b      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x194>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a28      	ldr	r2, [pc, #160]	; (8006c74 <HAL_DMA_IRQHandler+0x1c4>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d036      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x194>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a27      	ldr	r2, [pc, #156]	; (8006c78 <HAL_DMA_IRQHandler+0x1c8>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d031      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x194>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a25      	ldr	r2, [pc, #148]	; (8006c7c <HAL_DMA_IRQHandler+0x1cc>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d02c      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x194>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a24      	ldr	r2, [pc, #144]	; (8006c80 <HAL_DMA_IRQHandler+0x1d0>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d027      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x194>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a22      	ldr	r2, [pc, #136]	; (8006c84 <HAL_DMA_IRQHandler+0x1d4>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d022      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x194>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a21      	ldr	r2, [pc, #132]	; (8006c88 <HAL_DMA_IRQHandler+0x1d8>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d01d      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x194>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a1f      	ldr	r2, [pc, #124]	; (8006c8c <HAL_DMA_IRQHandler+0x1dc>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d018      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x194>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a1e      	ldr	r2, [pc, #120]	; (8006c90 <HAL_DMA_IRQHandler+0x1e0>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d013      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x194>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a1c      	ldr	r2, [pc, #112]	; (8006c94 <HAL_DMA_IRQHandler+0x1e4>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00e      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x194>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a1b      	ldr	r2, [pc, #108]	; (8006c98 <HAL_DMA_IRQHandler+0x1e8>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d009      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x194>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a19      	ldr	r2, [pc, #100]	; (8006c9c <HAL_DMA_IRQHandler+0x1ec>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d004      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x194>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a18      	ldr	r2, [pc, #96]	; (8006ca0 <HAL_DMA_IRQHandler+0x1f0>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d12f      	bne.n	8006ca4 <HAL_DMA_IRQHandler+0x1f4>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	bf14      	ite	ne
 8006c52:	2301      	movne	r3, #1
 8006c54:	2300      	moveq	r3, #0
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	e02e      	b.n	8006cb8 <HAL_DMA_IRQHandler+0x208>
 8006c5a:	bf00      	nop
 8006c5c:	24000000 	.word	0x24000000
 8006c60:	1b4e81b5 	.word	0x1b4e81b5
 8006c64:	40020010 	.word	0x40020010
 8006c68:	40020028 	.word	0x40020028
 8006c6c:	40020040 	.word	0x40020040
 8006c70:	40020058 	.word	0x40020058
 8006c74:	40020070 	.word	0x40020070
 8006c78:	40020088 	.word	0x40020088
 8006c7c:	400200a0 	.word	0x400200a0
 8006c80:	400200b8 	.word	0x400200b8
 8006c84:	40020410 	.word	0x40020410
 8006c88:	40020428 	.word	0x40020428
 8006c8c:	40020440 	.word	0x40020440
 8006c90:	40020458 	.word	0x40020458
 8006c94:	40020470 	.word	0x40020470
 8006c98:	40020488 	.word	0x40020488
 8006c9c:	400204a0 	.word	0x400204a0
 8006ca0:	400204b8 	.word	0x400204b8
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0308 	and.w	r3, r3, #8
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	bf14      	ite	ne
 8006cb2:	2301      	movne	r3, #1
 8006cb4:	2300      	moveq	r3, #0
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d015      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0204 	bic.w	r2, r2, #4
 8006cca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd0:	f003 031f 	and.w	r3, r3, #31
 8006cd4:	2208      	movs	r2, #8
 8006cd6:	409a      	lsls	r2, r3
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce0:	f043 0201 	orr.w	r2, r3, #1
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cec:	f003 031f 	and.w	r3, r3, #31
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d06e      	beq.n	8006ddc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a69      	ldr	r2, [pc, #420]	; (8006ea8 <HAL_DMA_IRQHandler+0x3f8>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d04a      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x2ee>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a67      	ldr	r2, [pc, #412]	; (8006eac <HAL_DMA_IRQHandler+0x3fc>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d045      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x2ee>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a66      	ldr	r2, [pc, #408]	; (8006eb0 <HAL_DMA_IRQHandler+0x400>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d040      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x2ee>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a64      	ldr	r2, [pc, #400]	; (8006eb4 <HAL_DMA_IRQHandler+0x404>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d03b      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x2ee>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a63      	ldr	r2, [pc, #396]	; (8006eb8 <HAL_DMA_IRQHandler+0x408>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d036      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x2ee>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a61      	ldr	r2, [pc, #388]	; (8006ebc <HAL_DMA_IRQHandler+0x40c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d031      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x2ee>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a60      	ldr	r2, [pc, #384]	; (8006ec0 <HAL_DMA_IRQHandler+0x410>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d02c      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x2ee>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a5e      	ldr	r2, [pc, #376]	; (8006ec4 <HAL_DMA_IRQHandler+0x414>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d027      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x2ee>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a5d      	ldr	r2, [pc, #372]	; (8006ec8 <HAL_DMA_IRQHandler+0x418>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d022      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x2ee>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a5b      	ldr	r2, [pc, #364]	; (8006ecc <HAL_DMA_IRQHandler+0x41c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d01d      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x2ee>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a5a      	ldr	r2, [pc, #360]	; (8006ed0 <HAL_DMA_IRQHandler+0x420>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d018      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x2ee>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a58      	ldr	r2, [pc, #352]	; (8006ed4 <HAL_DMA_IRQHandler+0x424>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d013      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x2ee>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a57      	ldr	r2, [pc, #348]	; (8006ed8 <HAL_DMA_IRQHandler+0x428>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d00e      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x2ee>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a55      	ldr	r2, [pc, #340]	; (8006edc <HAL_DMA_IRQHandler+0x42c>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d009      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x2ee>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a54      	ldr	r2, [pc, #336]	; (8006ee0 <HAL_DMA_IRQHandler+0x430>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d004      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x2ee>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a52      	ldr	r2, [pc, #328]	; (8006ee4 <HAL_DMA_IRQHandler+0x434>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d10a      	bne.n	8006db4 <HAL_DMA_IRQHandler+0x304>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	bf14      	ite	ne
 8006dac:	2301      	movne	r3, #1
 8006dae:	2300      	moveq	r3, #0
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	e003      	b.n	8006dbc <HAL_DMA_IRQHandler+0x30c>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00d      	beq.n	8006ddc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc4:	f003 031f 	and.w	r3, r3, #31
 8006dc8:	2201      	movs	r2, #1
 8006dca:	409a      	lsls	r2, r3
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd4:	f043 0202 	orr.w	r2, r3, #2
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de0:	f003 031f 	and.w	r3, r3, #31
 8006de4:	2204      	movs	r2, #4
 8006de6:	409a      	lsls	r2, r3
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	4013      	ands	r3, r2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 808f 	beq.w	8006f10 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a2c      	ldr	r2, [pc, #176]	; (8006ea8 <HAL_DMA_IRQHandler+0x3f8>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d04a      	beq.n	8006e92 <HAL_DMA_IRQHandler+0x3e2>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a2a      	ldr	r2, [pc, #168]	; (8006eac <HAL_DMA_IRQHandler+0x3fc>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d045      	beq.n	8006e92 <HAL_DMA_IRQHandler+0x3e2>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a29      	ldr	r2, [pc, #164]	; (8006eb0 <HAL_DMA_IRQHandler+0x400>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d040      	beq.n	8006e92 <HAL_DMA_IRQHandler+0x3e2>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a27      	ldr	r2, [pc, #156]	; (8006eb4 <HAL_DMA_IRQHandler+0x404>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d03b      	beq.n	8006e92 <HAL_DMA_IRQHandler+0x3e2>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a26      	ldr	r2, [pc, #152]	; (8006eb8 <HAL_DMA_IRQHandler+0x408>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d036      	beq.n	8006e92 <HAL_DMA_IRQHandler+0x3e2>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a24      	ldr	r2, [pc, #144]	; (8006ebc <HAL_DMA_IRQHandler+0x40c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d031      	beq.n	8006e92 <HAL_DMA_IRQHandler+0x3e2>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a23      	ldr	r2, [pc, #140]	; (8006ec0 <HAL_DMA_IRQHandler+0x410>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d02c      	beq.n	8006e92 <HAL_DMA_IRQHandler+0x3e2>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a21      	ldr	r2, [pc, #132]	; (8006ec4 <HAL_DMA_IRQHandler+0x414>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d027      	beq.n	8006e92 <HAL_DMA_IRQHandler+0x3e2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a20      	ldr	r2, [pc, #128]	; (8006ec8 <HAL_DMA_IRQHandler+0x418>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d022      	beq.n	8006e92 <HAL_DMA_IRQHandler+0x3e2>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a1e      	ldr	r2, [pc, #120]	; (8006ecc <HAL_DMA_IRQHandler+0x41c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d01d      	beq.n	8006e92 <HAL_DMA_IRQHandler+0x3e2>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a1d      	ldr	r2, [pc, #116]	; (8006ed0 <HAL_DMA_IRQHandler+0x420>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d018      	beq.n	8006e92 <HAL_DMA_IRQHandler+0x3e2>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a1b      	ldr	r2, [pc, #108]	; (8006ed4 <HAL_DMA_IRQHandler+0x424>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d013      	beq.n	8006e92 <HAL_DMA_IRQHandler+0x3e2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a1a      	ldr	r2, [pc, #104]	; (8006ed8 <HAL_DMA_IRQHandler+0x428>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d00e      	beq.n	8006e92 <HAL_DMA_IRQHandler+0x3e2>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a18      	ldr	r2, [pc, #96]	; (8006edc <HAL_DMA_IRQHandler+0x42c>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d009      	beq.n	8006e92 <HAL_DMA_IRQHandler+0x3e2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a17      	ldr	r2, [pc, #92]	; (8006ee0 <HAL_DMA_IRQHandler+0x430>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d004      	beq.n	8006e92 <HAL_DMA_IRQHandler+0x3e2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a15      	ldr	r2, [pc, #84]	; (8006ee4 <HAL_DMA_IRQHandler+0x434>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d12a      	bne.n	8006ee8 <HAL_DMA_IRQHandler+0x438>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0302 	and.w	r3, r3, #2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	bf14      	ite	ne
 8006ea0:	2301      	movne	r3, #1
 8006ea2:	2300      	moveq	r3, #0
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	e023      	b.n	8006ef0 <HAL_DMA_IRQHandler+0x440>
 8006ea8:	40020010 	.word	0x40020010
 8006eac:	40020028 	.word	0x40020028
 8006eb0:	40020040 	.word	0x40020040
 8006eb4:	40020058 	.word	0x40020058
 8006eb8:	40020070 	.word	0x40020070
 8006ebc:	40020088 	.word	0x40020088
 8006ec0:	400200a0 	.word	0x400200a0
 8006ec4:	400200b8 	.word	0x400200b8
 8006ec8:	40020410 	.word	0x40020410
 8006ecc:	40020428 	.word	0x40020428
 8006ed0:	40020440 	.word	0x40020440
 8006ed4:	40020458 	.word	0x40020458
 8006ed8:	40020470 	.word	0x40020470
 8006edc:	40020488 	.word	0x40020488
 8006ee0:	400204a0 	.word	0x400204a0
 8006ee4:	400204b8 	.word	0x400204b8
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00d      	beq.n	8006f10 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef8:	f003 031f 	and.w	r3, r3, #31
 8006efc:	2204      	movs	r2, #4
 8006efe:	409a      	lsls	r2, r3
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f08:	f043 0204 	orr.w	r2, r3, #4
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f14:	f003 031f 	and.w	r3, r3, #31
 8006f18:	2210      	movs	r2, #16
 8006f1a:	409a      	lsls	r2, r3
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	4013      	ands	r3, r2
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 80a6 	beq.w	8007072 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a85      	ldr	r2, [pc, #532]	; (8007140 <HAL_DMA_IRQHandler+0x690>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d04a      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x516>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a83      	ldr	r2, [pc, #524]	; (8007144 <HAL_DMA_IRQHandler+0x694>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d045      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x516>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a82      	ldr	r2, [pc, #520]	; (8007148 <HAL_DMA_IRQHandler+0x698>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d040      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x516>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a80      	ldr	r2, [pc, #512]	; (800714c <HAL_DMA_IRQHandler+0x69c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d03b      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x516>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a7f      	ldr	r2, [pc, #508]	; (8007150 <HAL_DMA_IRQHandler+0x6a0>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d036      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x516>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a7d      	ldr	r2, [pc, #500]	; (8007154 <HAL_DMA_IRQHandler+0x6a4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d031      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x516>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a7c      	ldr	r2, [pc, #496]	; (8007158 <HAL_DMA_IRQHandler+0x6a8>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d02c      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x516>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a7a      	ldr	r2, [pc, #488]	; (800715c <HAL_DMA_IRQHandler+0x6ac>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d027      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x516>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a79      	ldr	r2, [pc, #484]	; (8007160 <HAL_DMA_IRQHandler+0x6b0>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d022      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x516>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a77      	ldr	r2, [pc, #476]	; (8007164 <HAL_DMA_IRQHandler+0x6b4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d01d      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x516>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a76      	ldr	r2, [pc, #472]	; (8007168 <HAL_DMA_IRQHandler+0x6b8>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d018      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x516>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a74      	ldr	r2, [pc, #464]	; (800716c <HAL_DMA_IRQHandler+0x6bc>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d013      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x516>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a73      	ldr	r2, [pc, #460]	; (8007170 <HAL_DMA_IRQHandler+0x6c0>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00e      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x516>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a71      	ldr	r2, [pc, #452]	; (8007174 <HAL_DMA_IRQHandler+0x6c4>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d009      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x516>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a70      	ldr	r2, [pc, #448]	; (8007178 <HAL_DMA_IRQHandler+0x6c8>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d004      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x516>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a6e      	ldr	r2, [pc, #440]	; (800717c <HAL_DMA_IRQHandler+0x6cc>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d10a      	bne.n	8006fdc <HAL_DMA_IRQHandler+0x52c>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	bf14      	ite	ne
 8006fd4:	2301      	movne	r3, #1
 8006fd6:	2300      	moveq	r3, #0
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	e009      	b.n	8006ff0 <HAL_DMA_IRQHandler+0x540>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0304 	and.w	r3, r3, #4
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	bf14      	ite	ne
 8006fea:	2301      	movne	r3, #1
 8006fec:	2300      	moveq	r3, #0
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d03e      	beq.n	8007072 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff8:	f003 031f 	and.w	r3, r3, #31
 8006ffc:	2210      	movs	r2, #16
 8006ffe:	409a      	lsls	r2, r3
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d018      	beq.n	8007044 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d108      	bne.n	8007032 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007024:	2b00      	cmp	r3, #0
 8007026:	d024      	beq.n	8007072 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	4798      	blx	r3
 8007030:	e01f      	b.n	8007072 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007036:	2b00      	cmp	r3, #0
 8007038:	d01b      	beq.n	8007072 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	4798      	blx	r3
 8007042:	e016      	b.n	8007072 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800704e:	2b00      	cmp	r3, #0
 8007050:	d107      	bne.n	8007062 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f022 0208 	bic.w	r2, r2, #8
 8007060:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007076:	f003 031f 	and.w	r3, r3, #31
 800707a:	2220      	movs	r2, #32
 800707c:	409a      	lsls	r2, r3
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	4013      	ands	r3, r2
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 8110 	beq.w	80072a8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a2c      	ldr	r2, [pc, #176]	; (8007140 <HAL_DMA_IRQHandler+0x690>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d04a      	beq.n	8007128 <HAL_DMA_IRQHandler+0x678>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a2b      	ldr	r2, [pc, #172]	; (8007144 <HAL_DMA_IRQHandler+0x694>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d045      	beq.n	8007128 <HAL_DMA_IRQHandler+0x678>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a29      	ldr	r2, [pc, #164]	; (8007148 <HAL_DMA_IRQHandler+0x698>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d040      	beq.n	8007128 <HAL_DMA_IRQHandler+0x678>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a28      	ldr	r2, [pc, #160]	; (800714c <HAL_DMA_IRQHandler+0x69c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d03b      	beq.n	8007128 <HAL_DMA_IRQHandler+0x678>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a26      	ldr	r2, [pc, #152]	; (8007150 <HAL_DMA_IRQHandler+0x6a0>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d036      	beq.n	8007128 <HAL_DMA_IRQHandler+0x678>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a25      	ldr	r2, [pc, #148]	; (8007154 <HAL_DMA_IRQHandler+0x6a4>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d031      	beq.n	8007128 <HAL_DMA_IRQHandler+0x678>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a23      	ldr	r2, [pc, #140]	; (8007158 <HAL_DMA_IRQHandler+0x6a8>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d02c      	beq.n	8007128 <HAL_DMA_IRQHandler+0x678>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a22      	ldr	r2, [pc, #136]	; (800715c <HAL_DMA_IRQHandler+0x6ac>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d027      	beq.n	8007128 <HAL_DMA_IRQHandler+0x678>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a20      	ldr	r2, [pc, #128]	; (8007160 <HAL_DMA_IRQHandler+0x6b0>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d022      	beq.n	8007128 <HAL_DMA_IRQHandler+0x678>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1f      	ldr	r2, [pc, #124]	; (8007164 <HAL_DMA_IRQHandler+0x6b4>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d01d      	beq.n	8007128 <HAL_DMA_IRQHandler+0x678>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a1d      	ldr	r2, [pc, #116]	; (8007168 <HAL_DMA_IRQHandler+0x6b8>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d018      	beq.n	8007128 <HAL_DMA_IRQHandler+0x678>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a1c      	ldr	r2, [pc, #112]	; (800716c <HAL_DMA_IRQHandler+0x6bc>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d013      	beq.n	8007128 <HAL_DMA_IRQHandler+0x678>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1a      	ldr	r2, [pc, #104]	; (8007170 <HAL_DMA_IRQHandler+0x6c0>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d00e      	beq.n	8007128 <HAL_DMA_IRQHandler+0x678>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a19      	ldr	r2, [pc, #100]	; (8007174 <HAL_DMA_IRQHandler+0x6c4>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d009      	beq.n	8007128 <HAL_DMA_IRQHandler+0x678>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a17      	ldr	r2, [pc, #92]	; (8007178 <HAL_DMA_IRQHandler+0x6c8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d004      	beq.n	8007128 <HAL_DMA_IRQHandler+0x678>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a16      	ldr	r2, [pc, #88]	; (800717c <HAL_DMA_IRQHandler+0x6cc>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d12b      	bne.n	8007180 <HAL_DMA_IRQHandler+0x6d0>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0310 	and.w	r3, r3, #16
 8007132:	2b00      	cmp	r3, #0
 8007134:	bf14      	ite	ne
 8007136:	2301      	movne	r3, #1
 8007138:	2300      	moveq	r3, #0
 800713a:	b2db      	uxtb	r3, r3
 800713c:	e02a      	b.n	8007194 <HAL_DMA_IRQHandler+0x6e4>
 800713e:	bf00      	nop
 8007140:	40020010 	.word	0x40020010
 8007144:	40020028 	.word	0x40020028
 8007148:	40020040 	.word	0x40020040
 800714c:	40020058 	.word	0x40020058
 8007150:	40020070 	.word	0x40020070
 8007154:	40020088 	.word	0x40020088
 8007158:	400200a0 	.word	0x400200a0
 800715c:	400200b8 	.word	0x400200b8
 8007160:	40020410 	.word	0x40020410
 8007164:	40020428 	.word	0x40020428
 8007168:	40020440 	.word	0x40020440
 800716c:	40020458 	.word	0x40020458
 8007170:	40020470 	.word	0x40020470
 8007174:	40020488 	.word	0x40020488
 8007178:	400204a0 	.word	0x400204a0
 800717c:	400204b8 	.word	0x400204b8
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b00      	cmp	r3, #0
 800718c:	bf14      	ite	ne
 800718e:	2301      	movne	r3, #1
 8007190:	2300      	moveq	r3, #0
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 8087 	beq.w	80072a8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719e:	f003 031f 	and.w	r3, r3, #31
 80071a2:	2220      	movs	r2, #32
 80071a4:	409a      	lsls	r2, r3
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b04      	cmp	r3, #4
 80071b4:	d139      	bne.n	800722a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f022 0216 	bic.w	r2, r2, #22
 80071c4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	695a      	ldr	r2, [r3, #20]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071d4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d103      	bne.n	80071e6 <HAL_DMA_IRQHandler+0x736>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d007      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0208 	bic.w	r2, r2, #8
 80071f4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071fa:	f003 031f 	and.w	r3, r3, #31
 80071fe:	223f      	movs	r2, #63	; 0x3f
 8007200:	409a      	lsls	r2, r3
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 834a 	beq.w	80078b4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	4798      	blx	r3
          }
          return;
 8007228:	e344      	b.n	80078b4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d018      	beq.n	800726a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d108      	bne.n	8007258 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724a:	2b00      	cmp	r3, #0
 800724c:	d02c      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	4798      	blx	r3
 8007256:	e027      	b.n	80072a8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725c:	2b00      	cmp	r3, #0
 800725e:	d023      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	4798      	blx	r3
 8007268:	e01e      	b.n	80072a8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10f      	bne.n	8007298 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0210 	bic.w	r2, r2, #16
 8007286:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729c:	2b00      	cmp	r3, #0
 800729e:	d003      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f000 8306 	beq.w	80078be <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 8088 	beq.w	80073d0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2204      	movs	r2, #4
 80072c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a7a      	ldr	r2, [pc, #488]	; (80074b8 <HAL_DMA_IRQHandler+0xa08>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d04a      	beq.n	8007368 <HAL_DMA_IRQHandler+0x8b8>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a79      	ldr	r2, [pc, #484]	; (80074bc <HAL_DMA_IRQHandler+0xa0c>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d045      	beq.n	8007368 <HAL_DMA_IRQHandler+0x8b8>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a77      	ldr	r2, [pc, #476]	; (80074c0 <HAL_DMA_IRQHandler+0xa10>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d040      	beq.n	8007368 <HAL_DMA_IRQHandler+0x8b8>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a76      	ldr	r2, [pc, #472]	; (80074c4 <HAL_DMA_IRQHandler+0xa14>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d03b      	beq.n	8007368 <HAL_DMA_IRQHandler+0x8b8>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a74      	ldr	r2, [pc, #464]	; (80074c8 <HAL_DMA_IRQHandler+0xa18>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d036      	beq.n	8007368 <HAL_DMA_IRQHandler+0x8b8>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a73      	ldr	r2, [pc, #460]	; (80074cc <HAL_DMA_IRQHandler+0xa1c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d031      	beq.n	8007368 <HAL_DMA_IRQHandler+0x8b8>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a71      	ldr	r2, [pc, #452]	; (80074d0 <HAL_DMA_IRQHandler+0xa20>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d02c      	beq.n	8007368 <HAL_DMA_IRQHandler+0x8b8>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a70      	ldr	r2, [pc, #448]	; (80074d4 <HAL_DMA_IRQHandler+0xa24>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d027      	beq.n	8007368 <HAL_DMA_IRQHandler+0x8b8>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a6e      	ldr	r2, [pc, #440]	; (80074d8 <HAL_DMA_IRQHandler+0xa28>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d022      	beq.n	8007368 <HAL_DMA_IRQHandler+0x8b8>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a6d      	ldr	r2, [pc, #436]	; (80074dc <HAL_DMA_IRQHandler+0xa2c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d01d      	beq.n	8007368 <HAL_DMA_IRQHandler+0x8b8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a6b      	ldr	r2, [pc, #428]	; (80074e0 <HAL_DMA_IRQHandler+0xa30>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d018      	beq.n	8007368 <HAL_DMA_IRQHandler+0x8b8>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a6a      	ldr	r2, [pc, #424]	; (80074e4 <HAL_DMA_IRQHandler+0xa34>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d013      	beq.n	8007368 <HAL_DMA_IRQHandler+0x8b8>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a68      	ldr	r2, [pc, #416]	; (80074e8 <HAL_DMA_IRQHandler+0xa38>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d00e      	beq.n	8007368 <HAL_DMA_IRQHandler+0x8b8>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a67      	ldr	r2, [pc, #412]	; (80074ec <HAL_DMA_IRQHandler+0xa3c>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d009      	beq.n	8007368 <HAL_DMA_IRQHandler+0x8b8>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a65      	ldr	r2, [pc, #404]	; (80074f0 <HAL_DMA_IRQHandler+0xa40>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d004      	beq.n	8007368 <HAL_DMA_IRQHandler+0x8b8>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a64      	ldr	r2, [pc, #400]	; (80074f4 <HAL_DMA_IRQHandler+0xa44>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d108      	bne.n	800737a <HAL_DMA_IRQHandler+0x8ca>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f022 0201 	bic.w	r2, r2, #1
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	e007      	b.n	800738a <HAL_DMA_IRQHandler+0x8da>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 0201 	bic.w	r2, r2, #1
 8007388:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	3301      	adds	r3, #1
 800738e:	60fb      	str	r3, [r7, #12]
 8007390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007392:	429a      	cmp	r2, r3
 8007394:	d307      	bcc.n	80073a6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f2      	bne.n	800738a <HAL_DMA_IRQHandler+0x8da>
 80073a4:	e000      	b.n	80073a8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80073a6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d004      	beq.n	80073c0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2203      	movs	r2, #3
 80073ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80073be:	e003      	b.n	80073c8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 8272 	beq.w	80078be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	4798      	blx	r3
 80073e2:	e26c      	b.n	80078be <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a43      	ldr	r2, [pc, #268]	; (80074f8 <HAL_DMA_IRQHandler+0xa48>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d022      	beq.n	8007434 <HAL_DMA_IRQHandler+0x984>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a42      	ldr	r2, [pc, #264]	; (80074fc <HAL_DMA_IRQHandler+0xa4c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d01d      	beq.n	8007434 <HAL_DMA_IRQHandler+0x984>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a40      	ldr	r2, [pc, #256]	; (8007500 <HAL_DMA_IRQHandler+0xa50>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d018      	beq.n	8007434 <HAL_DMA_IRQHandler+0x984>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a3f      	ldr	r2, [pc, #252]	; (8007504 <HAL_DMA_IRQHandler+0xa54>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d013      	beq.n	8007434 <HAL_DMA_IRQHandler+0x984>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a3d      	ldr	r2, [pc, #244]	; (8007508 <HAL_DMA_IRQHandler+0xa58>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d00e      	beq.n	8007434 <HAL_DMA_IRQHandler+0x984>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a3c      	ldr	r2, [pc, #240]	; (800750c <HAL_DMA_IRQHandler+0xa5c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d009      	beq.n	8007434 <HAL_DMA_IRQHandler+0x984>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a3a      	ldr	r2, [pc, #232]	; (8007510 <HAL_DMA_IRQHandler+0xa60>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d004      	beq.n	8007434 <HAL_DMA_IRQHandler+0x984>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a39      	ldr	r2, [pc, #228]	; (8007514 <HAL_DMA_IRQHandler+0xa64>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d101      	bne.n	8007438 <HAL_DMA_IRQHandler+0x988>
 8007434:	2301      	movs	r3, #1
 8007436:	e000      	b.n	800743a <HAL_DMA_IRQHandler+0x98a>
 8007438:	2300      	movs	r3, #0
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 823f 	beq.w	80078be <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800744c:	f003 031f 	and.w	r3, r3, #31
 8007450:	2204      	movs	r2, #4
 8007452:	409a      	lsls	r2, r3
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	4013      	ands	r3, r2
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 80cd 	beq.w	80075f8 <HAL_DMA_IRQHandler+0xb48>
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 80c7 	beq.w	80075f8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800746e:	f003 031f 	and.w	r3, r3, #31
 8007472:	2204      	movs	r2, #4
 8007474:	409a      	lsls	r2, r3
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d049      	beq.n	8007518 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d109      	bne.n	80074a2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 8210 	beq.w	80078b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074a0:	e20a      	b.n	80078b8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 8206 	beq.w	80078b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074b4:	e200      	b.n	80078b8 <HAL_DMA_IRQHandler+0xe08>
 80074b6:	bf00      	nop
 80074b8:	40020010 	.word	0x40020010
 80074bc:	40020028 	.word	0x40020028
 80074c0:	40020040 	.word	0x40020040
 80074c4:	40020058 	.word	0x40020058
 80074c8:	40020070 	.word	0x40020070
 80074cc:	40020088 	.word	0x40020088
 80074d0:	400200a0 	.word	0x400200a0
 80074d4:	400200b8 	.word	0x400200b8
 80074d8:	40020410 	.word	0x40020410
 80074dc:	40020428 	.word	0x40020428
 80074e0:	40020440 	.word	0x40020440
 80074e4:	40020458 	.word	0x40020458
 80074e8:	40020470 	.word	0x40020470
 80074ec:	40020488 	.word	0x40020488
 80074f0:	400204a0 	.word	0x400204a0
 80074f4:	400204b8 	.word	0x400204b8
 80074f8:	58025408 	.word	0x58025408
 80074fc:	5802541c 	.word	0x5802541c
 8007500:	58025430 	.word	0x58025430
 8007504:	58025444 	.word	0x58025444
 8007508:	58025458 	.word	0x58025458
 800750c:	5802546c 	.word	0x5802546c
 8007510:	58025480 	.word	0x58025480
 8007514:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	f003 0320 	and.w	r3, r3, #32
 800751e:	2b00      	cmp	r3, #0
 8007520:	d160      	bne.n	80075e4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a7f      	ldr	r2, [pc, #508]	; (8007724 <HAL_DMA_IRQHandler+0xc74>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d04a      	beq.n	80075c2 <HAL_DMA_IRQHandler+0xb12>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a7d      	ldr	r2, [pc, #500]	; (8007728 <HAL_DMA_IRQHandler+0xc78>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d045      	beq.n	80075c2 <HAL_DMA_IRQHandler+0xb12>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a7c      	ldr	r2, [pc, #496]	; (800772c <HAL_DMA_IRQHandler+0xc7c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d040      	beq.n	80075c2 <HAL_DMA_IRQHandler+0xb12>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a7a      	ldr	r2, [pc, #488]	; (8007730 <HAL_DMA_IRQHandler+0xc80>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d03b      	beq.n	80075c2 <HAL_DMA_IRQHandler+0xb12>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a79      	ldr	r2, [pc, #484]	; (8007734 <HAL_DMA_IRQHandler+0xc84>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d036      	beq.n	80075c2 <HAL_DMA_IRQHandler+0xb12>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a77      	ldr	r2, [pc, #476]	; (8007738 <HAL_DMA_IRQHandler+0xc88>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d031      	beq.n	80075c2 <HAL_DMA_IRQHandler+0xb12>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a76      	ldr	r2, [pc, #472]	; (800773c <HAL_DMA_IRQHandler+0xc8c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d02c      	beq.n	80075c2 <HAL_DMA_IRQHandler+0xb12>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a74      	ldr	r2, [pc, #464]	; (8007740 <HAL_DMA_IRQHandler+0xc90>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d027      	beq.n	80075c2 <HAL_DMA_IRQHandler+0xb12>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a73      	ldr	r2, [pc, #460]	; (8007744 <HAL_DMA_IRQHandler+0xc94>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d022      	beq.n	80075c2 <HAL_DMA_IRQHandler+0xb12>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a71      	ldr	r2, [pc, #452]	; (8007748 <HAL_DMA_IRQHandler+0xc98>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d01d      	beq.n	80075c2 <HAL_DMA_IRQHandler+0xb12>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a70      	ldr	r2, [pc, #448]	; (800774c <HAL_DMA_IRQHandler+0xc9c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d018      	beq.n	80075c2 <HAL_DMA_IRQHandler+0xb12>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a6e      	ldr	r2, [pc, #440]	; (8007750 <HAL_DMA_IRQHandler+0xca0>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d013      	beq.n	80075c2 <HAL_DMA_IRQHandler+0xb12>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a6d      	ldr	r2, [pc, #436]	; (8007754 <HAL_DMA_IRQHandler+0xca4>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d00e      	beq.n	80075c2 <HAL_DMA_IRQHandler+0xb12>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a6b      	ldr	r2, [pc, #428]	; (8007758 <HAL_DMA_IRQHandler+0xca8>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d009      	beq.n	80075c2 <HAL_DMA_IRQHandler+0xb12>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a6a      	ldr	r2, [pc, #424]	; (800775c <HAL_DMA_IRQHandler+0xcac>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d004      	beq.n	80075c2 <HAL_DMA_IRQHandler+0xb12>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a68      	ldr	r2, [pc, #416]	; (8007760 <HAL_DMA_IRQHandler+0xcb0>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d108      	bne.n	80075d4 <HAL_DMA_IRQHandler+0xb24>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 0208 	bic.w	r2, r2, #8
 80075d0:	601a      	str	r2, [r3, #0]
 80075d2:	e007      	b.n	80075e4 <HAL_DMA_IRQHandler+0xb34>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f022 0204 	bic.w	r2, r2, #4
 80075e2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 8165 	beq.w	80078b8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075f6:	e15f      	b.n	80078b8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075fc:	f003 031f 	and.w	r3, r3, #31
 8007600:	2202      	movs	r2, #2
 8007602:	409a      	lsls	r2, r3
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	4013      	ands	r3, r2
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 80c5 	beq.w	8007798 <HAL_DMA_IRQHandler+0xce8>
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	f003 0302 	and.w	r3, r3, #2
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 80bf 	beq.w	8007798 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800761e:	f003 031f 	and.w	r3, r3, #31
 8007622:	2202      	movs	r2, #2
 8007624:	409a      	lsls	r2, r3
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d018      	beq.n	8007666 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d109      	bne.n	8007652 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 813a 	beq.w	80078bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007650:	e134      	b.n	80078bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 8130 	beq.w	80078bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007664:	e12a      	b.n	80078bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	f003 0320 	and.w	r3, r3, #32
 800766c:	2b00      	cmp	r3, #0
 800766e:	f040 8089 	bne.w	8007784 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a2b      	ldr	r2, [pc, #172]	; (8007724 <HAL_DMA_IRQHandler+0xc74>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d04a      	beq.n	8007712 <HAL_DMA_IRQHandler+0xc62>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a29      	ldr	r2, [pc, #164]	; (8007728 <HAL_DMA_IRQHandler+0xc78>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d045      	beq.n	8007712 <HAL_DMA_IRQHandler+0xc62>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a28      	ldr	r2, [pc, #160]	; (800772c <HAL_DMA_IRQHandler+0xc7c>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d040      	beq.n	8007712 <HAL_DMA_IRQHandler+0xc62>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a26      	ldr	r2, [pc, #152]	; (8007730 <HAL_DMA_IRQHandler+0xc80>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d03b      	beq.n	8007712 <HAL_DMA_IRQHandler+0xc62>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a25      	ldr	r2, [pc, #148]	; (8007734 <HAL_DMA_IRQHandler+0xc84>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d036      	beq.n	8007712 <HAL_DMA_IRQHandler+0xc62>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a23      	ldr	r2, [pc, #140]	; (8007738 <HAL_DMA_IRQHandler+0xc88>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d031      	beq.n	8007712 <HAL_DMA_IRQHandler+0xc62>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a22      	ldr	r2, [pc, #136]	; (800773c <HAL_DMA_IRQHandler+0xc8c>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d02c      	beq.n	8007712 <HAL_DMA_IRQHandler+0xc62>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a20      	ldr	r2, [pc, #128]	; (8007740 <HAL_DMA_IRQHandler+0xc90>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d027      	beq.n	8007712 <HAL_DMA_IRQHandler+0xc62>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a1f      	ldr	r2, [pc, #124]	; (8007744 <HAL_DMA_IRQHandler+0xc94>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d022      	beq.n	8007712 <HAL_DMA_IRQHandler+0xc62>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a1d      	ldr	r2, [pc, #116]	; (8007748 <HAL_DMA_IRQHandler+0xc98>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d01d      	beq.n	8007712 <HAL_DMA_IRQHandler+0xc62>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a1c      	ldr	r2, [pc, #112]	; (800774c <HAL_DMA_IRQHandler+0xc9c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d018      	beq.n	8007712 <HAL_DMA_IRQHandler+0xc62>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a1a      	ldr	r2, [pc, #104]	; (8007750 <HAL_DMA_IRQHandler+0xca0>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d013      	beq.n	8007712 <HAL_DMA_IRQHandler+0xc62>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a19      	ldr	r2, [pc, #100]	; (8007754 <HAL_DMA_IRQHandler+0xca4>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d00e      	beq.n	8007712 <HAL_DMA_IRQHandler+0xc62>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a17      	ldr	r2, [pc, #92]	; (8007758 <HAL_DMA_IRQHandler+0xca8>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d009      	beq.n	8007712 <HAL_DMA_IRQHandler+0xc62>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a16      	ldr	r2, [pc, #88]	; (800775c <HAL_DMA_IRQHandler+0xcac>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d004      	beq.n	8007712 <HAL_DMA_IRQHandler+0xc62>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a14      	ldr	r2, [pc, #80]	; (8007760 <HAL_DMA_IRQHandler+0xcb0>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d128      	bne.n	8007764 <HAL_DMA_IRQHandler+0xcb4>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 0214 	bic.w	r2, r2, #20
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	e027      	b.n	8007774 <HAL_DMA_IRQHandler+0xcc4>
 8007724:	40020010 	.word	0x40020010
 8007728:	40020028 	.word	0x40020028
 800772c:	40020040 	.word	0x40020040
 8007730:	40020058 	.word	0x40020058
 8007734:	40020070 	.word	0x40020070
 8007738:	40020088 	.word	0x40020088
 800773c:	400200a0 	.word	0x400200a0
 8007740:	400200b8 	.word	0x400200b8
 8007744:	40020410 	.word	0x40020410
 8007748:	40020428 	.word	0x40020428
 800774c:	40020440 	.word	0x40020440
 8007750:	40020458 	.word	0x40020458
 8007754:	40020470 	.word	0x40020470
 8007758:	40020488 	.word	0x40020488
 800775c:	400204a0 	.word	0x400204a0
 8007760:	400204b8 	.word	0x400204b8
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f022 020a 	bic.w	r2, r2, #10
 8007772:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 8097 	beq.w	80078bc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007796:	e091      	b.n	80078bc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800779c:	f003 031f 	and.w	r3, r3, #31
 80077a0:	2208      	movs	r2, #8
 80077a2:	409a      	lsls	r2, r3
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	4013      	ands	r3, r2
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 8088 	beq.w	80078be <HAL_DMA_IRQHandler+0xe0e>
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	f003 0308 	and.w	r3, r3, #8
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 8082 	beq.w	80078be <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a41      	ldr	r2, [pc, #260]	; (80078c4 <HAL_DMA_IRQHandler+0xe14>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d04a      	beq.n	800785a <HAL_DMA_IRQHandler+0xdaa>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a3f      	ldr	r2, [pc, #252]	; (80078c8 <HAL_DMA_IRQHandler+0xe18>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d045      	beq.n	800785a <HAL_DMA_IRQHandler+0xdaa>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a3e      	ldr	r2, [pc, #248]	; (80078cc <HAL_DMA_IRQHandler+0xe1c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d040      	beq.n	800785a <HAL_DMA_IRQHandler+0xdaa>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a3c      	ldr	r2, [pc, #240]	; (80078d0 <HAL_DMA_IRQHandler+0xe20>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d03b      	beq.n	800785a <HAL_DMA_IRQHandler+0xdaa>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a3b      	ldr	r2, [pc, #236]	; (80078d4 <HAL_DMA_IRQHandler+0xe24>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d036      	beq.n	800785a <HAL_DMA_IRQHandler+0xdaa>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a39      	ldr	r2, [pc, #228]	; (80078d8 <HAL_DMA_IRQHandler+0xe28>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d031      	beq.n	800785a <HAL_DMA_IRQHandler+0xdaa>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a38      	ldr	r2, [pc, #224]	; (80078dc <HAL_DMA_IRQHandler+0xe2c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d02c      	beq.n	800785a <HAL_DMA_IRQHandler+0xdaa>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a36      	ldr	r2, [pc, #216]	; (80078e0 <HAL_DMA_IRQHandler+0xe30>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d027      	beq.n	800785a <HAL_DMA_IRQHandler+0xdaa>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a35      	ldr	r2, [pc, #212]	; (80078e4 <HAL_DMA_IRQHandler+0xe34>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d022      	beq.n	800785a <HAL_DMA_IRQHandler+0xdaa>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a33      	ldr	r2, [pc, #204]	; (80078e8 <HAL_DMA_IRQHandler+0xe38>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d01d      	beq.n	800785a <HAL_DMA_IRQHandler+0xdaa>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a32      	ldr	r2, [pc, #200]	; (80078ec <HAL_DMA_IRQHandler+0xe3c>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d018      	beq.n	800785a <HAL_DMA_IRQHandler+0xdaa>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a30      	ldr	r2, [pc, #192]	; (80078f0 <HAL_DMA_IRQHandler+0xe40>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d013      	beq.n	800785a <HAL_DMA_IRQHandler+0xdaa>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a2f      	ldr	r2, [pc, #188]	; (80078f4 <HAL_DMA_IRQHandler+0xe44>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d00e      	beq.n	800785a <HAL_DMA_IRQHandler+0xdaa>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a2d      	ldr	r2, [pc, #180]	; (80078f8 <HAL_DMA_IRQHandler+0xe48>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d009      	beq.n	800785a <HAL_DMA_IRQHandler+0xdaa>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a2c      	ldr	r2, [pc, #176]	; (80078fc <HAL_DMA_IRQHandler+0xe4c>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d004      	beq.n	800785a <HAL_DMA_IRQHandler+0xdaa>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a2a      	ldr	r2, [pc, #168]	; (8007900 <HAL_DMA_IRQHandler+0xe50>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d108      	bne.n	800786c <HAL_DMA_IRQHandler+0xdbc>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f022 021c 	bic.w	r2, r2, #28
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	e007      	b.n	800787c <HAL_DMA_IRQHandler+0xdcc>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f022 020e 	bic.w	r2, r2, #14
 800787a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007880:	f003 031f 	and.w	r3, r3, #31
 8007884:	2201      	movs	r2, #1
 8007886:	409a      	lsls	r2, r3
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d009      	beq.n	80078be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	4798      	blx	r3
 80078b2:	e004      	b.n	80078be <HAL_DMA_IRQHandler+0xe0e>
          return;
 80078b4:	bf00      	nop
 80078b6:	e002      	b.n	80078be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078b8:	bf00      	nop
 80078ba:	e000      	b.n	80078be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078bc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80078be:	3728      	adds	r7, #40	; 0x28
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	40020010 	.word	0x40020010
 80078c8:	40020028 	.word	0x40020028
 80078cc:	40020040 	.word	0x40020040
 80078d0:	40020058 	.word	0x40020058
 80078d4:	40020070 	.word	0x40020070
 80078d8:	40020088 	.word	0x40020088
 80078dc:	400200a0 	.word	0x400200a0
 80078e0:	400200b8 	.word	0x400200b8
 80078e4:	40020410 	.word	0x40020410
 80078e8:	40020428 	.word	0x40020428
 80078ec:	40020440 	.word	0x40020440
 80078f0:	40020458 	.word	0x40020458
 80078f4:	40020470 	.word	0x40020470
 80078f8:	40020488 	.word	0x40020488
 80078fc:	400204a0 	.word	0x400204a0
 8007900:	400204b8 	.word	0x400204b8

08007904 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
 8007910:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007916:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800791c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a7f      	ldr	r2, [pc, #508]	; (8007b20 <DMA_SetConfig+0x21c>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d072      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a7d      	ldr	r2, [pc, #500]	; (8007b24 <DMA_SetConfig+0x220>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d06d      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a7c      	ldr	r2, [pc, #496]	; (8007b28 <DMA_SetConfig+0x224>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d068      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a7a      	ldr	r2, [pc, #488]	; (8007b2c <DMA_SetConfig+0x228>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d063      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a79      	ldr	r2, [pc, #484]	; (8007b30 <DMA_SetConfig+0x22c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d05e      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a77      	ldr	r2, [pc, #476]	; (8007b34 <DMA_SetConfig+0x230>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d059      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a76      	ldr	r2, [pc, #472]	; (8007b38 <DMA_SetConfig+0x234>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d054      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a74      	ldr	r2, [pc, #464]	; (8007b3c <DMA_SetConfig+0x238>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d04f      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a73      	ldr	r2, [pc, #460]	; (8007b40 <DMA_SetConfig+0x23c>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d04a      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a71      	ldr	r2, [pc, #452]	; (8007b44 <DMA_SetConfig+0x240>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d045      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a70      	ldr	r2, [pc, #448]	; (8007b48 <DMA_SetConfig+0x244>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d040      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a6e      	ldr	r2, [pc, #440]	; (8007b4c <DMA_SetConfig+0x248>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d03b      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a6d      	ldr	r2, [pc, #436]	; (8007b50 <DMA_SetConfig+0x24c>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d036      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a6b      	ldr	r2, [pc, #428]	; (8007b54 <DMA_SetConfig+0x250>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d031      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a6a      	ldr	r2, [pc, #424]	; (8007b58 <DMA_SetConfig+0x254>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d02c      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a68      	ldr	r2, [pc, #416]	; (8007b5c <DMA_SetConfig+0x258>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d027      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a67      	ldr	r2, [pc, #412]	; (8007b60 <DMA_SetConfig+0x25c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d022      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a65      	ldr	r2, [pc, #404]	; (8007b64 <DMA_SetConfig+0x260>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d01d      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a64      	ldr	r2, [pc, #400]	; (8007b68 <DMA_SetConfig+0x264>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d018      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a62      	ldr	r2, [pc, #392]	; (8007b6c <DMA_SetConfig+0x268>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d013      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a61      	ldr	r2, [pc, #388]	; (8007b70 <DMA_SetConfig+0x26c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d00e      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a5f      	ldr	r2, [pc, #380]	; (8007b74 <DMA_SetConfig+0x270>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d009      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a5e      	ldr	r2, [pc, #376]	; (8007b78 <DMA_SetConfig+0x274>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d004      	beq.n	8007a0e <DMA_SetConfig+0x10a>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a5c      	ldr	r2, [pc, #368]	; (8007b7c <DMA_SetConfig+0x278>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d101      	bne.n	8007a12 <DMA_SetConfig+0x10e>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e000      	b.n	8007a14 <DMA_SetConfig+0x110>
 8007a12:	2300      	movs	r3, #0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00d      	beq.n	8007a34 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a20:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d004      	beq.n	8007a34 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007a32:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a39      	ldr	r2, [pc, #228]	; (8007b20 <DMA_SetConfig+0x21c>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d04a      	beq.n	8007ad4 <DMA_SetConfig+0x1d0>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a38      	ldr	r2, [pc, #224]	; (8007b24 <DMA_SetConfig+0x220>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d045      	beq.n	8007ad4 <DMA_SetConfig+0x1d0>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a36      	ldr	r2, [pc, #216]	; (8007b28 <DMA_SetConfig+0x224>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d040      	beq.n	8007ad4 <DMA_SetConfig+0x1d0>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a35      	ldr	r2, [pc, #212]	; (8007b2c <DMA_SetConfig+0x228>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d03b      	beq.n	8007ad4 <DMA_SetConfig+0x1d0>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a33      	ldr	r2, [pc, #204]	; (8007b30 <DMA_SetConfig+0x22c>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d036      	beq.n	8007ad4 <DMA_SetConfig+0x1d0>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a32      	ldr	r2, [pc, #200]	; (8007b34 <DMA_SetConfig+0x230>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d031      	beq.n	8007ad4 <DMA_SetConfig+0x1d0>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a30      	ldr	r2, [pc, #192]	; (8007b38 <DMA_SetConfig+0x234>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d02c      	beq.n	8007ad4 <DMA_SetConfig+0x1d0>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a2f      	ldr	r2, [pc, #188]	; (8007b3c <DMA_SetConfig+0x238>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d027      	beq.n	8007ad4 <DMA_SetConfig+0x1d0>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a2d      	ldr	r2, [pc, #180]	; (8007b40 <DMA_SetConfig+0x23c>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d022      	beq.n	8007ad4 <DMA_SetConfig+0x1d0>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a2c      	ldr	r2, [pc, #176]	; (8007b44 <DMA_SetConfig+0x240>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d01d      	beq.n	8007ad4 <DMA_SetConfig+0x1d0>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a2a      	ldr	r2, [pc, #168]	; (8007b48 <DMA_SetConfig+0x244>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d018      	beq.n	8007ad4 <DMA_SetConfig+0x1d0>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a29      	ldr	r2, [pc, #164]	; (8007b4c <DMA_SetConfig+0x248>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d013      	beq.n	8007ad4 <DMA_SetConfig+0x1d0>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a27      	ldr	r2, [pc, #156]	; (8007b50 <DMA_SetConfig+0x24c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d00e      	beq.n	8007ad4 <DMA_SetConfig+0x1d0>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a26      	ldr	r2, [pc, #152]	; (8007b54 <DMA_SetConfig+0x250>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d009      	beq.n	8007ad4 <DMA_SetConfig+0x1d0>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a24      	ldr	r2, [pc, #144]	; (8007b58 <DMA_SetConfig+0x254>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d004      	beq.n	8007ad4 <DMA_SetConfig+0x1d0>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a23      	ldr	r2, [pc, #140]	; (8007b5c <DMA_SetConfig+0x258>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d101      	bne.n	8007ad8 <DMA_SetConfig+0x1d4>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e000      	b.n	8007ada <DMA_SetConfig+0x1d6>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d059      	beq.n	8007b92 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae2:	f003 031f 	and.w	r3, r3, #31
 8007ae6:	223f      	movs	r2, #63	; 0x3f
 8007ae8:	409a      	lsls	r2, r3
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007afc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	2b40      	cmp	r3, #64	; 0x40
 8007b0c:	d138      	bne.n	8007b80 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007b1e:	e086      	b.n	8007c2e <DMA_SetConfig+0x32a>
 8007b20:	40020010 	.word	0x40020010
 8007b24:	40020028 	.word	0x40020028
 8007b28:	40020040 	.word	0x40020040
 8007b2c:	40020058 	.word	0x40020058
 8007b30:	40020070 	.word	0x40020070
 8007b34:	40020088 	.word	0x40020088
 8007b38:	400200a0 	.word	0x400200a0
 8007b3c:	400200b8 	.word	0x400200b8
 8007b40:	40020410 	.word	0x40020410
 8007b44:	40020428 	.word	0x40020428
 8007b48:	40020440 	.word	0x40020440
 8007b4c:	40020458 	.word	0x40020458
 8007b50:	40020470 	.word	0x40020470
 8007b54:	40020488 	.word	0x40020488
 8007b58:	400204a0 	.word	0x400204a0
 8007b5c:	400204b8 	.word	0x400204b8
 8007b60:	58025408 	.word	0x58025408
 8007b64:	5802541c 	.word	0x5802541c
 8007b68:	58025430 	.word	0x58025430
 8007b6c:	58025444 	.word	0x58025444
 8007b70:	58025458 	.word	0x58025458
 8007b74:	5802546c 	.word	0x5802546c
 8007b78:	58025480 	.word	0x58025480
 8007b7c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	60da      	str	r2, [r3, #12]
}
 8007b90:	e04d      	b.n	8007c2e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a29      	ldr	r2, [pc, #164]	; (8007c3c <DMA_SetConfig+0x338>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d022      	beq.n	8007be2 <DMA_SetConfig+0x2de>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a27      	ldr	r2, [pc, #156]	; (8007c40 <DMA_SetConfig+0x33c>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d01d      	beq.n	8007be2 <DMA_SetConfig+0x2de>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a26      	ldr	r2, [pc, #152]	; (8007c44 <DMA_SetConfig+0x340>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d018      	beq.n	8007be2 <DMA_SetConfig+0x2de>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a24      	ldr	r2, [pc, #144]	; (8007c48 <DMA_SetConfig+0x344>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d013      	beq.n	8007be2 <DMA_SetConfig+0x2de>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a23      	ldr	r2, [pc, #140]	; (8007c4c <DMA_SetConfig+0x348>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d00e      	beq.n	8007be2 <DMA_SetConfig+0x2de>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a21      	ldr	r2, [pc, #132]	; (8007c50 <DMA_SetConfig+0x34c>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d009      	beq.n	8007be2 <DMA_SetConfig+0x2de>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a20      	ldr	r2, [pc, #128]	; (8007c54 <DMA_SetConfig+0x350>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d004      	beq.n	8007be2 <DMA_SetConfig+0x2de>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a1e      	ldr	r2, [pc, #120]	; (8007c58 <DMA_SetConfig+0x354>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d101      	bne.n	8007be6 <DMA_SetConfig+0x2e2>
 8007be2:	2301      	movs	r3, #1
 8007be4:	e000      	b.n	8007be8 <DMA_SetConfig+0x2e4>
 8007be6:	2300      	movs	r3, #0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d020      	beq.n	8007c2e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bf0:	f003 031f 	and.w	r3, r3, #31
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	409a      	lsls	r2, r3
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	683a      	ldr	r2, [r7, #0]
 8007c02:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	2b40      	cmp	r3, #64	; 0x40
 8007c0a:	d108      	bne.n	8007c1e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	60da      	str	r2, [r3, #12]
}
 8007c1c:	e007      	b.n	8007c2e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	60da      	str	r2, [r3, #12]
}
 8007c2e:	bf00      	nop
 8007c30:	371c      	adds	r7, #28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	58025408 	.word	0x58025408
 8007c40:	5802541c 	.word	0x5802541c
 8007c44:	58025430 	.word	0x58025430
 8007c48:	58025444 	.word	0x58025444
 8007c4c:	58025458 	.word	0x58025458
 8007c50:	5802546c 	.word	0x5802546c
 8007c54:	58025480 	.word	0x58025480
 8007c58:	58025494 	.word	0x58025494

08007c5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a42      	ldr	r2, [pc, #264]	; (8007d74 <DMA_CalcBaseAndBitshift+0x118>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d04a      	beq.n	8007d04 <DMA_CalcBaseAndBitshift+0xa8>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a41      	ldr	r2, [pc, #260]	; (8007d78 <DMA_CalcBaseAndBitshift+0x11c>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d045      	beq.n	8007d04 <DMA_CalcBaseAndBitshift+0xa8>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a3f      	ldr	r2, [pc, #252]	; (8007d7c <DMA_CalcBaseAndBitshift+0x120>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d040      	beq.n	8007d04 <DMA_CalcBaseAndBitshift+0xa8>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a3e      	ldr	r2, [pc, #248]	; (8007d80 <DMA_CalcBaseAndBitshift+0x124>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d03b      	beq.n	8007d04 <DMA_CalcBaseAndBitshift+0xa8>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a3c      	ldr	r2, [pc, #240]	; (8007d84 <DMA_CalcBaseAndBitshift+0x128>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d036      	beq.n	8007d04 <DMA_CalcBaseAndBitshift+0xa8>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a3b      	ldr	r2, [pc, #236]	; (8007d88 <DMA_CalcBaseAndBitshift+0x12c>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d031      	beq.n	8007d04 <DMA_CalcBaseAndBitshift+0xa8>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a39      	ldr	r2, [pc, #228]	; (8007d8c <DMA_CalcBaseAndBitshift+0x130>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d02c      	beq.n	8007d04 <DMA_CalcBaseAndBitshift+0xa8>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a38      	ldr	r2, [pc, #224]	; (8007d90 <DMA_CalcBaseAndBitshift+0x134>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d027      	beq.n	8007d04 <DMA_CalcBaseAndBitshift+0xa8>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a36      	ldr	r2, [pc, #216]	; (8007d94 <DMA_CalcBaseAndBitshift+0x138>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d022      	beq.n	8007d04 <DMA_CalcBaseAndBitshift+0xa8>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a35      	ldr	r2, [pc, #212]	; (8007d98 <DMA_CalcBaseAndBitshift+0x13c>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d01d      	beq.n	8007d04 <DMA_CalcBaseAndBitshift+0xa8>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a33      	ldr	r2, [pc, #204]	; (8007d9c <DMA_CalcBaseAndBitshift+0x140>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d018      	beq.n	8007d04 <DMA_CalcBaseAndBitshift+0xa8>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a32      	ldr	r2, [pc, #200]	; (8007da0 <DMA_CalcBaseAndBitshift+0x144>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d013      	beq.n	8007d04 <DMA_CalcBaseAndBitshift+0xa8>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a30      	ldr	r2, [pc, #192]	; (8007da4 <DMA_CalcBaseAndBitshift+0x148>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d00e      	beq.n	8007d04 <DMA_CalcBaseAndBitshift+0xa8>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a2f      	ldr	r2, [pc, #188]	; (8007da8 <DMA_CalcBaseAndBitshift+0x14c>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d009      	beq.n	8007d04 <DMA_CalcBaseAndBitshift+0xa8>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a2d      	ldr	r2, [pc, #180]	; (8007dac <DMA_CalcBaseAndBitshift+0x150>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d004      	beq.n	8007d04 <DMA_CalcBaseAndBitshift+0xa8>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a2c      	ldr	r2, [pc, #176]	; (8007db0 <DMA_CalcBaseAndBitshift+0x154>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d101      	bne.n	8007d08 <DMA_CalcBaseAndBitshift+0xac>
 8007d04:	2301      	movs	r3, #1
 8007d06:	e000      	b.n	8007d0a <DMA_CalcBaseAndBitshift+0xae>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d024      	beq.n	8007d58 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	3b10      	subs	r3, #16
 8007d16:	4a27      	ldr	r2, [pc, #156]	; (8007db4 <DMA_CalcBaseAndBitshift+0x158>)
 8007d18:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1c:	091b      	lsrs	r3, r3, #4
 8007d1e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f003 0307 	and.w	r3, r3, #7
 8007d26:	4a24      	ldr	r2, [pc, #144]	; (8007db8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007d28:	5cd3      	ldrb	r3, [r2, r3]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d908      	bls.n	8007d48 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	4b1f      	ldr	r3, [pc, #124]	; (8007dbc <DMA_CalcBaseAndBitshift+0x160>)
 8007d3e:	4013      	ands	r3, r2
 8007d40:	1d1a      	adds	r2, r3, #4
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	659a      	str	r2, [r3, #88]	; 0x58
 8007d46:	e00d      	b.n	8007d64 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	4b1b      	ldr	r3, [pc, #108]	; (8007dbc <DMA_CalcBaseAndBitshift+0x160>)
 8007d50:	4013      	ands	r3, r2
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	6593      	str	r3, [r2, #88]	; 0x58
 8007d56:	e005      	b.n	8007d64 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	40020010 	.word	0x40020010
 8007d78:	40020028 	.word	0x40020028
 8007d7c:	40020040 	.word	0x40020040
 8007d80:	40020058 	.word	0x40020058
 8007d84:	40020070 	.word	0x40020070
 8007d88:	40020088 	.word	0x40020088
 8007d8c:	400200a0 	.word	0x400200a0
 8007d90:	400200b8 	.word	0x400200b8
 8007d94:	40020410 	.word	0x40020410
 8007d98:	40020428 	.word	0x40020428
 8007d9c:	40020440 	.word	0x40020440
 8007da0:	40020458 	.word	0x40020458
 8007da4:	40020470 	.word	0x40020470
 8007da8:	40020488 	.word	0x40020488
 8007dac:	400204a0 	.word	0x400204a0
 8007db0:	400204b8 	.word	0x400204b8
 8007db4:	aaaaaaab 	.word	0xaaaaaaab
 8007db8:	0800f350 	.word	0x0800f350
 8007dbc:	fffffc00 	.word	0xfffffc00

08007dc0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d120      	bne.n	8007e16 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d858      	bhi.n	8007e8e <DMA_CheckFifoParam+0xce>
 8007ddc:	a201      	add	r2, pc, #4	; (adr r2, 8007de4 <DMA_CheckFifoParam+0x24>)
 8007dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de2:	bf00      	nop
 8007de4:	08007df5 	.word	0x08007df5
 8007de8:	08007e07 	.word	0x08007e07
 8007dec:	08007df5 	.word	0x08007df5
 8007df0:	08007e8f 	.word	0x08007e8f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d048      	beq.n	8007e92 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e04:	e045      	b.n	8007e92 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e0e:	d142      	bne.n	8007e96 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e14:	e03f      	b.n	8007e96 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e1e:	d123      	bne.n	8007e68 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e24:	2b03      	cmp	r3, #3
 8007e26:	d838      	bhi.n	8007e9a <DMA_CheckFifoParam+0xda>
 8007e28:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <DMA_CheckFifoParam+0x70>)
 8007e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2e:	bf00      	nop
 8007e30:	08007e41 	.word	0x08007e41
 8007e34:	08007e47 	.word	0x08007e47
 8007e38:	08007e41 	.word	0x08007e41
 8007e3c:	08007e59 	.word	0x08007e59
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	73fb      	strb	r3, [r7, #15]
        break;
 8007e44:	e030      	b.n	8007ea8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d025      	beq.n	8007e9e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e56:	e022      	b.n	8007e9e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e60:	d11f      	bne.n	8007ea2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e66:	e01c      	b.n	8007ea2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d902      	bls.n	8007e76 <DMA_CheckFifoParam+0xb6>
 8007e70:	2b03      	cmp	r3, #3
 8007e72:	d003      	beq.n	8007e7c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007e74:	e018      	b.n	8007ea8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	73fb      	strb	r3, [r7, #15]
        break;
 8007e7a:	e015      	b.n	8007ea8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00e      	beq.n	8007ea6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e8c:	e00b      	b.n	8007ea6 <DMA_CheckFifoParam+0xe6>
        break;
 8007e8e:	bf00      	nop
 8007e90:	e00a      	b.n	8007ea8 <DMA_CheckFifoParam+0xe8>
        break;
 8007e92:	bf00      	nop
 8007e94:	e008      	b.n	8007ea8 <DMA_CheckFifoParam+0xe8>
        break;
 8007e96:	bf00      	nop
 8007e98:	e006      	b.n	8007ea8 <DMA_CheckFifoParam+0xe8>
        break;
 8007e9a:	bf00      	nop
 8007e9c:	e004      	b.n	8007ea8 <DMA_CheckFifoParam+0xe8>
        break;
 8007e9e:	bf00      	nop
 8007ea0:	e002      	b.n	8007ea8 <DMA_CheckFifoParam+0xe8>
        break;
 8007ea2:	bf00      	nop
 8007ea4:	e000      	b.n	8007ea8 <DMA_CheckFifoParam+0xe8>
    break;
 8007ea6:	bf00      	nop
    }
  }

  return status;
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop

08007eb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a38      	ldr	r2, [pc, #224]	; (8007fac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d022      	beq.n	8007f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a36      	ldr	r2, [pc, #216]	; (8007fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d01d      	beq.n	8007f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a35      	ldr	r2, [pc, #212]	; (8007fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d018      	beq.n	8007f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a33      	ldr	r2, [pc, #204]	; (8007fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d013      	beq.n	8007f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a32      	ldr	r2, [pc, #200]	; (8007fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d00e      	beq.n	8007f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a30      	ldr	r2, [pc, #192]	; (8007fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d009      	beq.n	8007f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a2f      	ldr	r2, [pc, #188]	; (8007fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d004      	beq.n	8007f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a2d      	ldr	r2, [pc, #180]	; (8007fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d101      	bne.n	8007f1a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e000      	b.n	8007f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d01a      	beq.n	8007f56 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	3b08      	subs	r3, #8
 8007f28:	4a28      	ldr	r2, [pc, #160]	; (8007fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f2e:	091b      	lsrs	r3, r3, #4
 8007f30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	4b26      	ldr	r3, [pc, #152]	; (8007fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007f36:	4413      	add	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a24      	ldr	r2, [pc, #144]	; (8007fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007f44:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f003 031f 	and.w	r3, r3, #31
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	409a      	lsls	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007f54:	e024      	b.n	8007fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	3b10      	subs	r3, #16
 8007f5e:	4a1e      	ldr	r2, [pc, #120]	; (8007fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007f60:	fba2 2303 	umull	r2, r3, r2, r3
 8007f64:	091b      	lsrs	r3, r3, #4
 8007f66:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	4a1c      	ldr	r2, [pc, #112]	; (8007fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d806      	bhi.n	8007f7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	4a1b      	ldr	r2, [pc, #108]	; (8007fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d902      	bls.n	8007f7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3308      	adds	r3, #8
 8007f7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	4b18      	ldr	r3, [pc, #96]	; (8007fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007f82:	4413      	add	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	461a      	mov	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a16      	ldr	r2, [pc, #88]	; (8007fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007f90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f003 031f 	and.w	r3, r3, #31
 8007f98:	2201      	movs	r2, #1
 8007f9a:	409a      	lsls	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007fa0:	bf00      	nop
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	58025408 	.word	0x58025408
 8007fb0:	5802541c 	.word	0x5802541c
 8007fb4:	58025430 	.word	0x58025430
 8007fb8:	58025444 	.word	0x58025444
 8007fbc:	58025458 	.word	0x58025458
 8007fc0:	5802546c 	.word	0x5802546c
 8007fc4:	58025480 	.word	0x58025480
 8007fc8:	58025494 	.word	0x58025494
 8007fcc:	cccccccd 	.word	0xcccccccd
 8007fd0:	16009600 	.word	0x16009600
 8007fd4:	58025880 	.word	0x58025880
 8007fd8:	aaaaaaab 	.word	0xaaaaaaab
 8007fdc:	400204b8 	.word	0x400204b8
 8007fe0:	4002040f 	.word	0x4002040f
 8007fe4:	10008200 	.word	0x10008200
 8007fe8:	40020880 	.word	0x40020880

08007fec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d04a      	beq.n	8008098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2b08      	cmp	r3, #8
 8008006:	d847      	bhi.n	8008098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a25      	ldr	r2, [pc, #148]	; (80080a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d022      	beq.n	8008058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a24      	ldr	r2, [pc, #144]	; (80080a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d01d      	beq.n	8008058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a22      	ldr	r2, [pc, #136]	; (80080ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d018      	beq.n	8008058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a21      	ldr	r2, [pc, #132]	; (80080b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d013      	beq.n	8008058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a1f      	ldr	r2, [pc, #124]	; (80080b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d00e      	beq.n	8008058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a1e      	ldr	r2, [pc, #120]	; (80080b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d009      	beq.n	8008058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a1c      	ldr	r2, [pc, #112]	; (80080bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d004      	beq.n	8008058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a1b      	ldr	r2, [pc, #108]	; (80080c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d101      	bne.n	800805c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008058:	2301      	movs	r3, #1
 800805a:	e000      	b.n	800805e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800805c:	2300      	movs	r3, #0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00a      	beq.n	8008078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	4b17      	ldr	r3, [pc, #92]	; (80080c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008066:	4413      	add	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	461a      	mov	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a15      	ldr	r2, [pc, #84]	; (80080c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008074:	671a      	str	r2, [r3, #112]	; 0x70
 8008076:	e009      	b.n	800808c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	4b14      	ldr	r3, [pc, #80]	; (80080cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	461a      	mov	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a11      	ldr	r2, [pc, #68]	; (80080d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800808a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	3b01      	subs	r3, #1
 8008090:	2201      	movs	r2, #1
 8008092:	409a      	lsls	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008098:	bf00      	nop
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	58025408 	.word	0x58025408
 80080a8:	5802541c 	.word	0x5802541c
 80080ac:	58025430 	.word	0x58025430
 80080b0:	58025444 	.word	0x58025444
 80080b4:	58025458 	.word	0x58025458
 80080b8:	5802546c 	.word	0x5802546c
 80080bc:	58025480 	.word	0x58025480
 80080c0:	58025494 	.word	0x58025494
 80080c4:	1600963f 	.word	0x1600963f
 80080c8:	58025940 	.word	0x58025940
 80080cc:	1000823f 	.word	0x1000823f
 80080d0:	40020940 	.word	0x40020940

080080d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b089      	sub	sp, #36	; 0x24
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80080de:	2300      	movs	r3, #0
 80080e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80080e2:	4b86      	ldr	r3, [pc, #536]	; (80082fc <HAL_GPIO_Init+0x228>)
 80080e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80080e6:	e18c      	b.n	8008402 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	2101      	movs	r1, #1
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	fa01 f303 	lsl.w	r3, r1, r3
 80080f4:	4013      	ands	r3, r2
 80080f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 817e 	beq.w	80083fc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f003 0303 	and.w	r3, r3, #3
 8008108:	2b01      	cmp	r3, #1
 800810a:	d005      	beq.n	8008118 <HAL_GPIO_Init+0x44>
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f003 0303 	and.w	r3, r3, #3
 8008114:	2b02      	cmp	r3, #2
 8008116:	d130      	bne.n	800817a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	005b      	lsls	r3, r3, #1
 8008122:	2203      	movs	r2, #3
 8008124:	fa02 f303 	lsl.w	r3, r2, r3
 8008128:	43db      	mvns	r3, r3
 800812a:	69ba      	ldr	r2, [r7, #24]
 800812c:	4013      	ands	r3, r2
 800812e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	68da      	ldr	r2, [r3, #12]
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	005b      	lsls	r3, r3, #1
 8008138:	fa02 f303 	lsl.w	r3, r2, r3
 800813c:	69ba      	ldr	r2, [r7, #24]
 800813e:	4313      	orrs	r3, r2
 8008140:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	69ba      	ldr	r2, [r7, #24]
 8008146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800814e:	2201      	movs	r2, #1
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	fa02 f303 	lsl.w	r3, r2, r3
 8008156:	43db      	mvns	r3, r3
 8008158:	69ba      	ldr	r2, [r7, #24]
 800815a:	4013      	ands	r3, r2
 800815c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	091b      	lsrs	r3, r3, #4
 8008164:	f003 0201 	and.w	r2, r3, #1
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	fa02 f303 	lsl.w	r3, r2, r3
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	4313      	orrs	r3, r2
 8008172:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	69ba      	ldr	r2, [r7, #24]
 8008178:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f003 0303 	and.w	r3, r3, #3
 8008182:	2b03      	cmp	r3, #3
 8008184:	d017      	beq.n	80081b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	005b      	lsls	r3, r3, #1
 8008190:	2203      	movs	r2, #3
 8008192:	fa02 f303 	lsl.w	r3, r2, r3
 8008196:	43db      	mvns	r3, r3
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	4013      	ands	r3, r2
 800819c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	689a      	ldr	r2, [r3, #8]
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	005b      	lsls	r3, r3, #1
 80081a6:	fa02 f303 	lsl.w	r3, r2, r3
 80081aa:	69ba      	ldr	r2, [r7, #24]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	69ba      	ldr	r2, [r7, #24]
 80081b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f003 0303 	and.w	r3, r3, #3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d123      	bne.n	800820a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	08da      	lsrs	r2, r3, #3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	3208      	adds	r2, #8
 80081ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	f003 0307 	and.w	r3, r3, #7
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	220f      	movs	r2, #15
 80081da:	fa02 f303 	lsl.w	r3, r2, r3
 80081de:	43db      	mvns	r3, r3
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	4013      	ands	r3, r2
 80081e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	691a      	ldr	r2, [r3, #16]
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	f003 0307 	and.w	r3, r3, #7
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	fa02 f303 	lsl.w	r3, r2, r3
 80081f6:	69ba      	ldr	r2, [r7, #24]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	08da      	lsrs	r2, r3, #3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	3208      	adds	r2, #8
 8008204:	69b9      	ldr	r1, [r7, #24]
 8008206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	005b      	lsls	r3, r3, #1
 8008214:	2203      	movs	r2, #3
 8008216:	fa02 f303 	lsl.w	r3, r2, r3
 800821a:	43db      	mvns	r3, r3
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	4013      	ands	r3, r2
 8008220:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f003 0203 	and.w	r2, r3, #3
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	fa02 f303 	lsl.w	r3, r2, r3
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	4313      	orrs	r3, r2
 8008236:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	69ba      	ldr	r2, [r7, #24]
 800823c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008246:	2b00      	cmp	r3, #0
 8008248:	f000 80d8 	beq.w	80083fc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800824c:	4b2c      	ldr	r3, [pc, #176]	; (8008300 <HAL_GPIO_Init+0x22c>)
 800824e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008252:	4a2b      	ldr	r2, [pc, #172]	; (8008300 <HAL_GPIO_Init+0x22c>)
 8008254:	f043 0302 	orr.w	r3, r3, #2
 8008258:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800825c:	4b28      	ldr	r3, [pc, #160]	; (8008300 <HAL_GPIO_Init+0x22c>)
 800825e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008262:	f003 0302 	and.w	r3, r3, #2
 8008266:	60fb      	str	r3, [r7, #12]
 8008268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800826a:	4a26      	ldr	r2, [pc, #152]	; (8008304 <HAL_GPIO_Init+0x230>)
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	089b      	lsrs	r3, r3, #2
 8008270:	3302      	adds	r3, #2
 8008272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	f003 0303 	and.w	r3, r3, #3
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	220f      	movs	r2, #15
 8008282:	fa02 f303 	lsl.w	r3, r2, r3
 8008286:	43db      	mvns	r3, r3
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	4013      	ands	r3, r2
 800828c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a1d      	ldr	r2, [pc, #116]	; (8008308 <HAL_GPIO_Init+0x234>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d04a      	beq.n	800832c <HAL_GPIO_Init+0x258>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a1c      	ldr	r2, [pc, #112]	; (800830c <HAL_GPIO_Init+0x238>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d02b      	beq.n	80082f6 <HAL_GPIO_Init+0x222>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a1b      	ldr	r2, [pc, #108]	; (8008310 <HAL_GPIO_Init+0x23c>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d025      	beq.n	80082f2 <HAL_GPIO_Init+0x21e>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a1a      	ldr	r2, [pc, #104]	; (8008314 <HAL_GPIO_Init+0x240>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d01f      	beq.n	80082ee <HAL_GPIO_Init+0x21a>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a19      	ldr	r2, [pc, #100]	; (8008318 <HAL_GPIO_Init+0x244>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d019      	beq.n	80082ea <HAL_GPIO_Init+0x216>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a18      	ldr	r2, [pc, #96]	; (800831c <HAL_GPIO_Init+0x248>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d013      	beq.n	80082e6 <HAL_GPIO_Init+0x212>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a17      	ldr	r2, [pc, #92]	; (8008320 <HAL_GPIO_Init+0x24c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d00d      	beq.n	80082e2 <HAL_GPIO_Init+0x20e>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a16      	ldr	r2, [pc, #88]	; (8008324 <HAL_GPIO_Init+0x250>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d007      	beq.n	80082de <HAL_GPIO_Init+0x20a>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a15      	ldr	r2, [pc, #84]	; (8008328 <HAL_GPIO_Init+0x254>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d101      	bne.n	80082da <HAL_GPIO_Init+0x206>
 80082d6:	2309      	movs	r3, #9
 80082d8:	e029      	b.n	800832e <HAL_GPIO_Init+0x25a>
 80082da:	230a      	movs	r3, #10
 80082dc:	e027      	b.n	800832e <HAL_GPIO_Init+0x25a>
 80082de:	2307      	movs	r3, #7
 80082e0:	e025      	b.n	800832e <HAL_GPIO_Init+0x25a>
 80082e2:	2306      	movs	r3, #6
 80082e4:	e023      	b.n	800832e <HAL_GPIO_Init+0x25a>
 80082e6:	2305      	movs	r3, #5
 80082e8:	e021      	b.n	800832e <HAL_GPIO_Init+0x25a>
 80082ea:	2304      	movs	r3, #4
 80082ec:	e01f      	b.n	800832e <HAL_GPIO_Init+0x25a>
 80082ee:	2303      	movs	r3, #3
 80082f0:	e01d      	b.n	800832e <HAL_GPIO_Init+0x25a>
 80082f2:	2302      	movs	r3, #2
 80082f4:	e01b      	b.n	800832e <HAL_GPIO_Init+0x25a>
 80082f6:	2301      	movs	r3, #1
 80082f8:	e019      	b.n	800832e <HAL_GPIO_Init+0x25a>
 80082fa:	bf00      	nop
 80082fc:	58000080 	.word	0x58000080
 8008300:	58024400 	.word	0x58024400
 8008304:	58000400 	.word	0x58000400
 8008308:	58020000 	.word	0x58020000
 800830c:	58020400 	.word	0x58020400
 8008310:	58020800 	.word	0x58020800
 8008314:	58020c00 	.word	0x58020c00
 8008318:	58021000 	.word	0x58021000
 800831c:	58021400 	.word	0x58021400
 8008320:	58021800 	.word	0x58021800
 8008324:	58021c00 	.word	0x58021c00
 8008328:	58022400 	.word	0x58022400
 800832c:	2300      	movs	r3, #0
 800832e:	69fa      	ldr	r2, [r7, #28]
 8008330:	f002 0203 	and.w	r2, r2, #3
 8008334:	0092      	lsls	r2, r2, #2
 8008336:	4093      	lsls	r3, r2
 8008338:	69ba      	ldr	r2, [r7, #24]
 800833a:	4313      	orrs	r3, r2
 800833c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800833e:	4938      	ldr	r1, [pc, #224]	; (8008420 <HAL_GPIO_Init+0x34c>)
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	089b      	lsrs	r3, r3, #2
 8008344:	3302      	adds	r3, #2
 8008346:	69ba      	ldr	r2, [r7, #24]
 8008348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800834c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	43db      	mvns	r3, r3
 8008358:	69ba      	ldr	r2, [r7, #24]
 800835a:	4013      	ands	r3, r2
 800835c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800836a:	69ba      	ldr	r2, [r7, #24]
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	4313      	orrs	r3, r2
 8008370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008372:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800837a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	43db      	mvns	r3, r3
 8008386:	69ba      	ldr	r2, [r7, #24]
 8008388:	4013      	ands	r3, r2
 800838a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d003      	beq.n	80083a0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008398:	69ba      	ldr	r2, [r7, #24]
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	4313      	orrs	r3, r2
 800839e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80083a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	43db      	mvns	r3, r3
 80083b2:	69ba      	ldr	r2, [r7, #24]
 80083b4:	4013      	ands	r3, r2
 80083b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d003      	beq.n	80083cc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	69ba      	ldr	r2, [r7, #24]
 80083d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	43db      	mvns	r3, r3
 80083dc:	69ba      	ldr	r2, [r7, #24]
 80083de:	4013      	ands	r3, r2
 80083e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80083ee:	69ba      	ldr	r2, [r7, #24]
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	69ba      	ldr	r2, [r7, #24]
 80083fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	3301      	adds	r3, #1
 8008400:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	fa22 f303 	lsr.w	r3, r2, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	f47f ae6b 	bne.w	80080e8 <HAL_GPIO_Init+0x14>
  }
}
 8008412:	bf00      	nop
 8008414:	bf00      	nop
 8008416:	3724      	adds	r7, #36	; 0x24
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	58000400 	.word	0x58000400

08008424 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008424:	b480      	push	{r7}
 8008426:	b087      	sub	sp, #28
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800842e:	2300      	movs	r3, #0
 8008430:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008432:	4b72      	ldr	r3, [pc, #456]	; (80085fc <HAL_GPIO_DeInit+0x1d8>)
 8008434:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008436:	e0d3      	b.n	80085e0 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008438:	2201      	movs	r2, #1
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	fa02 f303 	lsl.w	r3, r2, r3
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	4013      	ands	r3, r2
 8008444:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 80c6 	beq.w	80085da <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800844e:	4a6c      	ldr	r2, [pc, #432]	; (8008600 <HAL_GPIO_DeInit+0x1dc>)
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	089b      	lsrs	r3, r3, #2
 8008454:	3302      	adds	r3, #2
 8008456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800845a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f003 0303 	and.w	r3, r3, #3
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	220f      	movs	r2, #15
 8008466:	fa02 f303 	lsl.w	r3, r2, r3
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	4013      	ands	r3, r2
 800846e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a64      	ldr	r2, [pc, #400]	; (8008604 <HAL_GPIO_DeInit+0x1e0>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d031      	beq.n	80084dc <HAL_GPIO_DeInit+0xb8>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a63      	ldr	r2, [pc, #396]	; (8008608 <HAL_GPIO_DeInit+0x1e4>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d02b      	beq.n	80084d8 <HAL_GPIO_DeInit+0xb4>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a62      	ldr	r2, [pc, #392]	; (800860c <HAL_GPIO_DeInit+0x1e8>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d025      	beq.n	80084d4 <HAL_GPIO_DeInit+0xb0>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a61      	ldr	r2, [pc, #388]	; (8008610 <HAL_GPIO_DeInit+0x1ec>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d01f      	beq.n	80084d0 <HAL_GPIO_DeInit+0xac>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a60      	ldr	r2, [pc, #384]	; (8008614 <HAL_GPIO_DeInit+0x1f0>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d019      	beq.n	80084cc <HAL_GPIO_DeInit+0xa8>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a5f      	ldr	r2, [pc, #380]	; (8008618 <HAL_GPIO_DeInit+0x1f4>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d013      	beq.n	80084c8 <HAL_GPIO_DeInit+0xa4>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a5e      	ldr	r2, [pc, #376]	; (800861c <HAL_GPIO_DeInit+0x1f8>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d00d      	beq.n	80084c4 <HAL_GPIO_DeInit+0xa0>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a5d      	ldr	r2, [pc, #372]	; (8008620 <HAL_GPIO_DeInit+0x1fc>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d007      	beq.n	80084c0 <HAL_GPIO_DeInit+0x9c>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a5c      	ldr	r2, [pc, #368]	; (8008624 <HAL_GPIO_DeInit+0x200>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d101      	bne.n	80084bc <HAL_GPIO_DeInit+0x98>
 80084b8:	2309      	movs	r3, #9
 80084ba:	e010      	b.n	80084de <HAL_GPIO_DeInit+0xba>
 80084bc:	230a      	movs	r3, #10
 80084be:	e00e      	b.n	80084de <HAL_GPIO_DeInit+0xba>
 80084c0:	2307      	movs	r3, #7
 80084c2:	e00c      	b.n	80084de <HAL_GPIO_DeInit+0xba>
 80084c4:	2306      	movs	r3, #6
 80084c6:	e00a      	b.n	80084de <HAL_GPIO_DeInit+0xba>
 80084c8:	2305      	movs	r3, #5
 80084ca:	e008      	b.n	80084de <HAL_GPIO_DeInit+0xba>
 80084cc:	2304      	movs	r3, #4
 80084ce:	e006      	b.n	80084de <HAL_GPIO_DeInit+0xba>
 80084d0:	2303      	movs	r3, #3
 80084d2:	e004      	b.n	80084de <HAL_GPIO_DeInit+0xba>
 80084d4:	2302      	movs	r3, #2
 80084d6:	e002      	b.n	80084de <HAL_GPIO_DeInit+0xba>
 80084d8:	2301      	movs	r3, #1
 80084da:	e000      	b.n	80084de <HAL_GPIO_DeInit+0xba>
 80084dc:	2300      	movs	r3, #0
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	f002 0203 	and.w	r2, r2, #3
 80084e4:	0092      	lsls	r2, r2, #2
 80084e6:	4093      	lsls	r3, r2
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d136      	bne.n	800855c <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	43db      	mvns	r3, r3
 80084f6:	401a      	ands	r2, r3
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	43db      	mvns	r3, r3
 8008504:	401a      	ands	r2, r3
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800850a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	43db      	mvns	r3, r3
 8008514:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008518:	4013      	ands	r3, r2
 800851a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800851c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	43db      	mvns	r3, r3
 8008526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800852a:	4013      	ands	r3, r2
 800852c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f003 0303 	and.w	r3, r3, #3
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	220f      	movs	r2, #15
 8008538:	fa02 f303 	lsl.w	r3, r2, r3
 800853c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800853e:	4a30      	ldr	r2, [pc, #192]	; (8008600 <HAL_GPIO_DeInit+0x1dc>)
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	089b      	lsrs	r3, r3, #2
 8008544:	3302      	adds	r3, #2
 8008546:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	43da      	mvns	r2, r3
 800854e:	482c      	ldr	r0, [pc, #176]	; (8008600 <HAL_GPIO_DeInit+0x1dc>)
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	089b      	lsrs	r3, r3, #2
 8008554:	400a      	ands	r2, r1
 8008556:	3302      	adds	r3, #2
 8008558:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	2103      	movs	r1, #3
 8008566:	fa01 f303 	lsl.w	r3, r1, r3
 800856a:	431a      	orrs	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	08da      	lsrs	r2, r3, #3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	3208      	adds	r2, #8
 8008578:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	f003 0307 	and.w	r3, r3, #7
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	220f      	movs	r2, #15
 8008586:	fa02 f303 	lsl.w	r3, r2, r3
 800858a:	43db      	mvns	r3, r3
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	08d2      	lsrs	r2, r2, #3
 8008590:	4019      	ands	r1, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	3208      	adds	r2, #8
 8008596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68da      	ldr	r2, [r3, #12]
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	2103      	movs	r1, #3
 80085a4:	fa01 f303 	lsl.w	r3, r1, r3
 80085a8:	43db      	mvns	r3, r3
 80085aa:	401a      	ands	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	685a      	ldr	r2, [r3, #4]
 80085b4:	2101      	movs	r1, #1
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	fa01 f303 	lsl.w	r3, r1, r3
 80085bc:	43db      	mvns	r3, r3
 80085be:	401a      	ands	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689a      	ldr	r2, [r3, #8]
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	005b      	lsls	r3, r3, #1
 80085cc:	2103      	movs	r1, #3
 80085ce:	fa01 f303 	lsl.w	r3, r1, r3
 80085d2:	43db      	mvns	r3, r3
 80085d4:	401a      	ands	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	609a      	str	r2, [r3, #8]
    }

    position++;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	3301      	adds	r3, #1
 80085de:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80085e0:	683a      	ldr	r2, [r7, #0]
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	fa22 f303 	lsr.w	r3, r2, r3
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f47f af25 	bne.w	8008438 <HAL_GPIO_DeInit+0x14>
  }
}
 80085ee:	bf00      	nop
 80085f0:	bf00      	nop
 80085f2:	371c      	adds	r7, #28
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	58000080 	.word	0x58000080
 8008600:	58000400 	.word	0x58000400
 8008604:	58020000 	.word	0x58020000
 8008608:	58020400 	.word	0x58020400
 800860c:	58020800 	.word	0x58020800
 8008610:	58020c00 	.word	0x58020c00
 8008614:	58021000 	.word	0x58021000
 8008618:	58021400 	.word	0x58021400
 800861c:	58021800 	.word	0x58021800
 8008620:	58021c00 	.word	0x58021c00
 8008624:	58022400 	.word	0x58022400

08008628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	807b      	strh	r3, [r7, #2]
 8008634:	4613      	mov	r3, r2
 8008636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008638:	787b      	ldrb	r3, [r7, #1]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800863e:	887a      	ldrh	r2, [r7, #2]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008644:	e003      	b.n	800864e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008646:	887b      	ldrh	r3, [r7, #2]
 8008648:	041a      	lsls	r2, r3, #16
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	619a      	str	r2, [r3, #24]
}
 800864e:	bf00      	nop
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
	...

0800865c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008664:	4b19      	ldr	r3, [pc, #100]	; (80086cc <HAL_PWREx_ConfigSupply+0x70>)
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	f003 0304 	and.w	r3, r3, #4
 800866c:	2b04      	cmp	r3, #4
 800866e:	d00a      	beq.n	8008686 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008670:	4b16      	ldr	r3, [pc, #88]	; (80086cc <HAL_PWREx_ConfigSupply+0x70>)
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	f003 0307 	and.w	r3, r3, #7
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	429a      	cmp	r2, r3
 800867c:	d001      	beq.n	8008682 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e01f      	b.n	80086c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	e01d      	b.n	80086c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008686:	4b11      	ldr	r3, [pc, #68]	; (80086cc <HAL_PWREx_ConfigSupply+0x70>)
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	f023 0207 	bic.w	r2, r3, #7
 800868e:	490f      	ldr	r1, [pc, #60]	; (80086cc <HAL_PWREx_ConfigSupply+0x70>)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4313      	orrs	r3, r2
 8008694:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008696:	f7fc fbdf 	bl	8004e58 <HAL_GetTick>
 800869a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800869c:	e009      	b.n	80086b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800869e:	f7fc fbdb 	bl	8004e58 <HAL_GetTick>
 80086a2:	4602      	mov	r2, r0
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086ac:	d901      	bls.n	80086b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e007      	b.n	80086c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80086b2:	4b06      	ldr	r3, [pc, #24]	; (80086cc <HAL_PWREx_ConfigSupply+0x70>)
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086be:	d1ee      	bne.n	800869e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	58024800 	.word	0x58024800

080086d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08c      	sub	sp, #48	; 0x30
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d101      	bne.n	80086e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e3c8      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 8087 	beq.w	80087fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086f0:	4b88      	ldr	r3, [pc, #544]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086fa:	4b86      	ldr	r3, [pc, #536]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 80086fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008702:	2b10      	cmp	r3, #16
 8008704:	d007      	beq.n	8008716 <HAL_RCC_OscConfig+0x46>
 8008706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008708:	2b18      	cmp	r3, #24
 800870a:	d110      	bne.n	800872e <HAL_RCC_OscConfig+0x5e>
 800870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870e:	f003 0303 	and.w	r3, r3, #3
 8008712:	2b02      	cmp	r3, #2
 8008714:	d10b      	bne.n	800872e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008716:	4b7f      	ldr	r3, [pc, #508]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d06c      	beq.n	80087fc <HAL_RCC_OscConfig+0x12c>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d168      	bne.n	80087fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e3a2      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008736:	d106      	bne.n	8008746 <HAL_RCC_OscConfig+0x76>
 8008738:	4b76      	ldr	r3, [pc, #472]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a75      	ldr	r2, [pc, #468]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 800873e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	e02e      	b.n	80087a4 <HAL_RCC_OscConfig+0xd4>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10c      	bne.n	8008768 <HAL_RCC_OscConfig+0x98>
 800874e:	4b71      	ldr	r3, [pc, #452]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a70      	ldr	r2, [pc, #448]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 8008754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008758:	6013      	str	r3, [r2, #0]
 800875a:	4b6e      	ldr	r3, [pc, #440]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a6d      	ldr	r2, [pc, #436]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 8008760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008764:	6013      	str	r3, [r2, #0]
 8008766:	e01d      	b.n	80087a4 <HAL_RCC_OscConfig+0xd4>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008770:	d10c      	bne.n	800878c <HAL_RCC_OscConfig+0xbc>
 8008772:	4b68      	ldr	r3, [pc, #416]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a67      	ldr	r2, [pc, #412]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 8008778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800877c:	6013      	str	r3, [r2, #0]
 800877e:	4b65      	ldr	r3, [pc, #404]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a64      	ldr	r2, [pc, #400]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 8008784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008788:	6013      	str	r3, [r2, #0]
 800878a:	e00b      	b.n	80087a4 <HAL_RCC_OscConfig+0xd4>
 800878c:	4b61      	ldr	r3, [pc, #388]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a60      	ldr	r2, [pc, #384]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 8008792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	4b5e      	ldr	r3, [pc, #376]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a5d      	ldr	r2, [pc, #372]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 800879e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d013      	beq.n	80087d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ac:	f7fc fb54 	bl	8004e58 <HAL_GetTick>
 80087b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087b2:	e008      	b.n	80087c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087b4:	f7fc fb50 	bl	8004e58 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	2b64      	cmp	r3, #100	; 0x64
 80087c0:	d901      	bls.n	80087c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e356      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087c6:	4b53      	ldr	r3, [pc, #332]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d0f0      	beq.n	80087b4 <HAL_RCC_OscConfig+0xe4>
 80087d2:	e014      	b.n	80087fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087d4:	f7fc fb40 	bl	8004e58 <HAL_GetTick>
 80087d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80087da:	e008      	b.n	80087ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087dc:	f7fc fb3c 	bl	8004e58 <HAL_GetTick>
 80087e0:	4602      	mov	r2, r0
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	2b64      	cmp	r3, #100	; 0x64
 80087e8:	d901      	bls.n	80087ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e342      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80087ee:	4b49      	ldr	r3, [pc, #292]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1f0      	bne.n	80087dc <HAL_RCC_OscConfig+0x10c>
 80087fa:	e000      	b.n	80087fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0302 	and.w	r3, r3, #2
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 808c 	beq.w	8008924 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800880c:	4b41      	ldr	r3, [pc, #260]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008814:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008816:	4b3f      	ldr	r3, [pc, #252]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 8008818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d007      	beq.n	8008832 <HAL_RCC_OscConfig+0x162>
 8008822:	6a3b      	ldr	r3, [r7, #32]
 8008824:	2b18      	cmp	r3, #24
 8008826:	d137      	bne.n	8008898 <HAL_RCC_OscConfig+0x1c8>
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	f003 0303 	and.w	r3, r3, #3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d132      	bne.n	8008898 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008832:	4b38      	ldr	r3, [pc, #224]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0304 	and.w	r3, r3, #4
 800883a:	2b00      	cmp	r3, #0
 800883c:	d005      	beq.n	800884a <HAL_RCC_OscConfig+0x17a>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e314      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800884a:	4b32      	ldr	r3, [pc, #200]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f023 0219 	bic.w	r2, r3, #25
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	492f      	ldr	r1, [pc, #188]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 8008858:	4313      	orrs	r3, r2
 800885a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800885c:	f7fc fafc 	bl	8004e58 <HAL_GetTick>
 8008860:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008862:	e008      	b.n	8008876 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008864:	f7fc faf8 	bl	8004e58 <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	2b02      	cmp	r3, #2
 8008870:	d901      	bls.n	8008876 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e2fe      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008876:	4b27      	ldr	r3, [pc, #156]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0304 	and.w	r3, r3, #4
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0f0      	beq.n	8008864 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008882:	4b24      	ldr	r3, [pc, #144]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	061b      	lsls	r3, r3, #24
 8008890:	4920      	ldr	r1, [pc, #128]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 8008892:	4313      	orrs	r3, r2
 8008894:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008896:	e045      	b.n	8008924 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d026      	beq.n	80088ee <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80088a0:	4b1c      	ldr	r3, [pc, #112]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f023 0219 	bic.w	r2, r3, #25
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	4919      	ldr	r1, [pc, #100]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 80088ae:	4313      	orrs	r3, r2
 80088b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b2:	f7fc fad1 	bl	8004e58 <HAL_GetTick>
 80088b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088b8:	e008      	b.n	80088cc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088ba:	f7fc facd 	bl	8004e58 <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d901      	bls.n	80088cc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e2d3      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088cc:	4b11      	ldr	r3, [pc, #68]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0304 	and.w	r3, r3, #4
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d0f0      	beq.n	80088ba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088d8:	4b0e      	ldr	r3, [pc, #56]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	061b      	lsls	r3, r3, #24
 80088e6:	490b      	ldr	r1, [pc, #44]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	604b      	str	r3, [r1, #4]
 80088ec:	e01a      	b.n	8008924 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088ee:	4b09      	ldr	r3, [pc, #36]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a08      	ldr	r2, [pc, #32]	; (8008914 <HAL_RCC_OscConfig+0x244>)
 80088f4:	f023 0301 	bic.w	r3, r3, #1
 80088f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088fa:	f7fc faad 	bl	8004e58 <HAL_GetTick>
 80088fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008900:	e00a      	b.n	8008918 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008902:	f7fc faa9 	bl	8004e58 <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	2b02      	cmp	r3, #2
 800890e:	d903      	bls.n	8008918 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e2af      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
 8008914:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008918:	4b96      	ldr	r3, [pc, #600]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 0304 	and.w	r3, r3, #4
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1ee      	bne.n	8008902 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 0310 	and.w	r3, r3, #16
 800892c:	2b00      	cmp	r3, #0
 800892e:	d06a      	beq.n	8008a06 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008930:	4b90      	ldr	r3, [pc, #576]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008938:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800893a:	4b8e      	ldr	r3, [pc, #568]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 800893c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	2b08      	cmp	r3, #8
 8008944:	d007      	beq.n	8008956 <HAL_RCC_OscConfig+0x286>
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	2b18      	cmp	r3, #24
 800894a:	d11b      	bne.n	8008984 <HAL_RCC_OscConfig+0x2b4>
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f003 0303 	and.w	r3, r3, #3
 8008952:	2b01      	cmp	r3, #1
 8008954:	d116      	bne.n	8008984 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008956:	4b87      	ldr	r3, [pc, #540]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800895e:	2b00      	cmp	r3, #0
 8008960:	d005      	beq.n	800896e <HAL_RCC_OscConfig+0x29e>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	2b80      	cmp	r3, #128	; 0x80
 8008968:	d001      	beq.n	800896e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e282      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800896e:	4b81      	ldr	r3, [pc, #516]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	061b      	lsls	r3, r3, #24
 800897c:	497d      	ldr	r1, [pc, #500]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 800897e:	4313      	orrs	r3, r2
 8008980:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008982:	e040      	b.n	8008a06 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d023      	beq.n	80089d4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800898c:	4b79      	ldr	r3, [pc, #484]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a78      	ldr	r2, [pc, #480]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008998:	f7fc fa5e 	bl	8004e58 <HAL_GetTick>
 800899c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800899e:	e008      	b.n	80089b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80089a0:	f7fc fa5a 	bl	8004e58 <HAL_GetTick>
 80089a4:	4602      	mov	r2, r0
 80089a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d901      	bls.n	80089b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e260      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089b2:	4b70      	ldr	r3, [pc, #448]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d0f0      	beq.n	80089a0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089be:	4b6d      	ldr	r3, [pc, #436]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	061b      	lsls	r3, r3, #24
 80089cc:	4969      	ldr	r1, [pc, #420]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 80089ce:	4313      	orrs	r3, r2
 80089d0:	60cb      	str	r3, [r1, #12]
 80089d2:	e018      	b.n	8008a06 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80089d4:	4b67      	ldr	r3, [pc, #412]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a66      	ldr	r2, [pc, #408]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 80089da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089e0:	f7fc fa3a 	bl	8004e58 <HAL_GetTick>
 80089e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80089e6:	e008      	b.n	80089fa <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80089e8:	f7fc fa36 	bl	8004e58 <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d901      	bls.n	80089fa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e23c      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80089fa:	4b5e      	ldr	r3, [pc, #376]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1f0      	bne.n	80089e8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d036      	beq.n	8008a80 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d019      	beq.n	8008a4e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a1a:	4b56      	ldr	r3, [pc, #344]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a1e:	4a55      	ldr	r2, [pc, #340]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008a20:	f043 0301 	orr.w	r3, r3, #1
 8008a24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a26:	f7fc fa17 	bl	8004e58 <HAL_GetTick>
 8008a2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a2c:	e008      	b.n	8008a40 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a2e:	f7fc fa13 	bl	8004e58 <HAL_GetTick>
 8008a32:	4602      	mov	r2, r0
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d901      	bls.n	8008a40 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e219      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a40:	4b4c      	ldr	r3, [pc, #304]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a44:	f003 0302 	and.w	r3, r3, #2
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d0f0      	beq.n	8008a2e <HAL_RCC_OscConfig+0x35e>
 8008a4c:	e018      	b.n	8008a80 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a4e:	4b49      	ldr	r3, [pc, #292]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a52:	4a48      	ldr	r2, [pc, #288]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008a54:	f023 0301 	bic.w	r3, r3, #1
 8008a58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a5a:	f7fc f9fd 	bl	8004e58 <HAL_GetTick>
 8008a5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a60:	e008      	b.n	8008a74 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a62:	f7fc f9f9 	bl	8004e58 <HAL_GetTick>
 8008a66:	4602      	mov	r2, r0
 8008a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d901      	bls.n	8008a74 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e1ff      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a74:	4b3f      	ldr	r3, [pc, #252]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a78:	f003 0302 	and.w	r3, r3, #2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1f0      	bne.n	8008a62 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0320 	and.w	r3, r3, #32
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d036      	beq.n	8008afa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d019      	beq.n	8008ac8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a94:	4b37      	ldr	r3, [pc, #220]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a36      	ldr	r2, [pc, #216]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008a9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008aa0:	f7fc f9da 	bl	8004e58 <HAL_GetTick>
 8008aa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008aa6:	e008      	b.n	8008aba <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008aa8:	f7fc f9d6 	bl	8004e58 <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d901      	bls.n	8008aba <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e1dc      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008aba:	4b2e      	ldr	r3, [pc, #184]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d0f0      	beq.n	8008aa8 <HAL_RCC_OscConfig+0x3d8>
 8008ac6:	e018      	b.n	8008afa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ac8:	4b2a      	ldr	r3, [pc, #168]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a29      	ldr	r2, [pc, #164]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ad2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ad4:	f7fc f9c0 	bl	8004e58 <HAL_GetTick>
 8008ad8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ada:	e008      	b.n	8008aee <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008adc:	f7fc f9bc 	bl	8004e58 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d901      	bls.n	8008aee <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e1c2      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008aee:	4b21      	ldr	r3, [pc, #132]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1f0      	bne.n	8008adc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0304 	and.w	r3, r3, #4
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f000 8086 	beq.w	8008c14 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008b08:	4b1b      	ldr	r3, [pc, #108]	; (8008b78 <HAL_RCC_OscConfig+0x4a8>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a1a      	ldr	r2, [pc, #104]	; (8008b78 <HAL_RCC_OscConfig+0x4a8>)
 8008b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b14:	f7fc f9a0 	bl	8004e58 <HAL_GetTick>
 8008b18:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b1a:	e008      	b.n	8008b2e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b1c:	f7fc f99c 	bl	8004e58 <HAL_GetTick>
 8008b20:	4602      	mov	r2, r0
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	2b64      	cmp	r3, #100	; 0x64
 8008b28:	d901      	bls.n	8008b2e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e1a2      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b2e:	4b12      	ldr	r3, [pc, #72]	; (8008b78 <HAL_RCC_OscConfig+0x4a8>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d0f0      	beq.n	8008b1c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d106      	bne.n	8008b50 <HAL_RCC_OscConfig+0x480>
 8008b42:	4b0c      	ldr	r3, [pc, #48]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b46:	4a0b      	ldr	r2, [pc, #44]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008b48:	f043 0301 	orr.w	r3, r3, #1
 8008b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8008b4e:	e032      	b.n	8008bb6 <HAL_RCC_OscConfig+0x4e6>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d111      	bne.n	8008b7c <HAL_RCC_OscConfig+0x4ac>
 8008b58:	4b06      	ldr	r3, [pc, #24]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5c:	4a05      	ldr	r2, [pc, #20]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008b5e:	f023 0301 	bic.w	r3, r3, #1
 8008b62:	6713      	str	r3, [r2, #112]	; 0x70
 8008b64:	4b03      	ldr	r3, [pc, #12]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b68:	4a02      	ldr	r2, [pc, #8]	; (8008b74 <HAL_RCC_OscConfig+0x4a4>)
 8008b6a:	f023 0304 	bic.w	r3, r3, #4
 8008b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8008b70:	e021      	b.n	8008bb6 <HAL_RCC_OscConfig+0x4e6>
 8008b72:	bf00      	nop
 8008b74:	58024400 	.word	0x58024400
 8008b78:	58024800 	.word	0x58024800
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	2b05      	cmp	r3, #5
 8008b82:	d10c      	bne.n	8008b9e <HAL_RCC_OscConfig+0x4ce>
 8008b84:	4b83      	ldr	r3, [pc, #524]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b88:	4a82      	ldr	r2, [pc, #520]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008b8a:	f043 0304 	orr.w	r3, r3, #4
 8008b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8008b90:	4b80      	ldr	r3, [pc, #512]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b94:	4a7f      	ldr	r2, [pc, #508]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008b96:	f043 0301 	orr.w	r3, r3, #1
 8008b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8008b9c:	e00b      	b.n	8008bb6 <HAL_RCC_OscConfig+0x4e6>
 8008b9e:	4b7d      	ldr	r3, [pc, #500]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba2:	4a7c      	ldr	r2, [pc, #496]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008ba4:	f023 0301 	bic.w	r3, r3, #1
 8008ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8008baa:	4b7a      	ldr	r3, [pc, #488]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bae:	4a79      	ldr	r2, [pc, #484]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008bb0:	f023 0304 	bic.w	r3, r3, #4
 8008bb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d015      	beq.n	8008bea <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bbe:	f7fc f94b 	bl	8004e58 <HAL_GetTick>
 8008bc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bc4:	e00a      	b.n	8008bdc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bc6:	f7fc f947 	bl	8004e58 <HAL_GetTick>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d901      	bls.n	8008bdc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e14b      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bdc:	4b6d      	ldr	r3, [pc, #436]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d0ee      	beq.n	8008bc6 <HAL_RCC_OscConfig+0x4f6>
 8008be8:	e014      	b.n	8008c14 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bea:	f7fc f935 	bl	8004e58 <HAL_GetTick>
 8008bee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008bf0:	e00a      	b.n	8008c08 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bf2:	f7fc f931 	bl	8004e58 <HAL_GetTick>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d901      	bls.n	8008c08 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e135      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c08:	4b62      	ldr	r3, [pc, #392]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c0c:	f003 0302 	and.w	r3, r3, #2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1ee      	bne.n	8008bf2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f000 812a 	beq.w	8008e72 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008c1e:	4b5d      	ldr	r3, [pc, #372]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c26:	2b18      	cmp	r3, #24
 8008c28:	f000 80ba 	beq.w	8008da0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	f040 8095 	bne.w	8008d60 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c36:	4b57      	ldr	r3, [pc, #348]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a56      	ldr	r2, [pc, #344]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008c3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c42:	f7fc f909 	bl	8004e58 <HAL_GetTick>
 8008c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c48:	e008      	b.n	8008c5c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c4a:	f7fc f905 	bl	8004e58 <HAL_GetTick>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d901      	bls.n	8008c5c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	e10b      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c5c:	4b4d      	ldr	r3, [pc, #308]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1f0      	bne.n	8008c4a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c68:	4b4a      	ldr	r3, [pc, #296]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008c6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c6c:	4b4a      	ldr	r3, [pc, #296]	; (8008d98 <HAL_RCC_OscConfig+0x6c8>)
 8008c6e:	4013      	ands	r3, r2
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008c78:	0112      	lsls	r2, r2, #4
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	4945      	ldr	r1, [pc, #276]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	628b      	str	r3, [r1, #40]	; 0x28
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c86:	3b01      	subs	r3, #1
 8008c88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c90:	3b01      	subs	r3, #1
 8008c92:	025b      	lsls	r3, r3, #9
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	431a      	orrs	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	041b      	lsls	r3, r3, #16
 8008ca0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008caa:	3b01      	subs	r3, #1
 8008cac:	061b      	lsls	r3, r3, #24
 8008cae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008cb2:	4938      	ldr	r1, [pc, #224]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008cb8:	4b36      	ldr	r3, [pc, #216]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbc:	4a35      	ldr	r2, [pc, #212]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008cbe:	f023 0301 	bic.w	r3, r3, #1
 8008cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008cc4:	4b33      	ldr	r3, [pc, #204]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cc8:	4b34      	ldr	r3, [pc, #208]	; (8008d9c <HAL_RCC_OscConfig+0x6cc>)
 8008cca:	4013      	ands	r3, r2
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008cd0:	00d2      	lsls	r2, r2, #3
 8008cd2:	4930      	ldr	r1, [pc, #192]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008cd8:	4b2e      	ldr	r3, [pc, #184]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cdc:	f023 020c 	bic.w	r2, r3, #12
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce4:	492b      	ldr	r1, [pc, #172]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008cea:	4b2a      	ldr	r3, [pc, #168]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cee:	f023 0202 	bic.w	r2, r3, #2
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cf6:	4927      	ldr	r1, [pc, #156]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008cfc:	4b25      	ldr	r3, [pc, #148]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d00:	4a24      	ldr	r2, [pc, #144]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d08:	4b22      	ldr	r3, [pc, #136]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0c:	4a21      	ldr	r2, [pc, #132]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008d14:	4b1f      	ldr	r3, [pc, #124]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d18:	4a1e      	ldr	r2, [pc, #120]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008d1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008d20:	4b1c      	ldr	r3, [pc, #112]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d24:	4a1b      	ldr	r2, [pc, #108]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008d26:	f043 0301 	orr.w	r3, r3, #1
 8008d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d2c:	4b19      	ldr	r3, [pc, #100]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a18      	ldr	r2, [pc, #96]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d38:	f7fc f88e 	bl	8004e58 <HAL_GetTick>
 8008d3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d3e:	e008      	b.n	8008d52 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d40:	f7fc f88a 	bl	8004e58 <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d901      	bls.n	8008d52 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e090      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d52:	4b10      	ldr	r3, [pc, #64]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d0f0      	beq.n	8008d40 <HAL_RCC_OscConfig+0x670>
 8008d5e:	e088      	b.n	8008e72 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d60:	4b0c      	ldr	r3, [pc, #48]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a0b      	ldr	r2, [pc, #44]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d6c:	f7fc f874 	bl	8004e58 <HAL_GetTick>
 8008d70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d72:	e008      	b.n	8008d86 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d74:	f7fc f870 	bl	8004e58 <HAL_GetTick>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	d901      	bls.n	8008d86 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	e076      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d86:	4b03      	ldr	r3, [pc, #12]	; (8008d94 <HAL_RCC_OscConfig+0x6c4>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1f0      	bne.n	8008d74 <HAL_RCC_OscConfig+0x6a4>
 8008d92:	e06e      	b.n	8008e72 <HAL_RCC_OscConfig+0x7a2>
 8008d94:	58024400 	.word	0x58024400
 8008d98:	fffffc0c 	.word	0xfffffc0c
 8008d9c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008da0:	4b36      	ldr	r3, [pc, #216]	; (8008e7c <HAL_RCC_OscConfig+0x7ac>)
 8008da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008da6:	4b35      	ldr	r3, [pc, #212]	; (8008e7c <HAL_RCC_OscConfig+0x7ac>)
 8008da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008daa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d031      	beq.n	8008e18 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	f003 0203 	and.w	r2, r3, #3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d12a      	bne.n	8008e18 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	091b      	lsrs	r3, r3, #4
 8008dc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d122      	bne.n	8008e18 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ddc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d11a      	bne.n	8008e18 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	0a5b      	lsrs	r3, r3, #9
 8008de6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d111      	bne.n	8008e18 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	0c1b      	lsrs	r3, r3, #16
 8008df8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e00:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d108      	bne.n	8008e18 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	0e1b      	lsrs	r3, r3, #24
 8008e0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e12:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d001      	beq.n	8008e1c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e02b      	b.n	8008e74 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008e1c:	4b17      	ldr	r3, [pc, #92]	; (8008e7c <HAL_RCC_OscConfig+0x7ac>)
 8008e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e20:	08db      	lsrs	r3, r3, #3
 8008e22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e26:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d01f      	beq.n	8008e72 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008e32:	4b12      	ldr	r3, [pc, #72]	; (8008e7c <HAL_RCC_OscConfig+0x7ac>)
 8008e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e36:	4a11      	ldr	r2, [pc, #68]	; (8008e7c <HAL_RCC_OscConfig+0x7ac>)
 8008e38:	f023 0301 	bic.w	r3, r3, #1
 8008e3c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008e3e:	f7fc f80b 	bl	8004e58 <HAL_GetTick>
 8008e42:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008e44:	bf00      	nop
 8008e46:	f7fc f807 	bl	8004e58 <HAL_GetTick>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d0f9      	beq.n	8008e46 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e52:	4b0a      	ldr	r3, [pc, #40]	; (8008e7c <HAL_RCC_OscConfig+0x7ac>)
 8008e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e56:	4b0a      	ldr	r3, [pc, #40]	; (8008e80 <HAL_RCC_OscConfig+0x7b0>)
 8008e58:	4013      	ands	r3, r2
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e5e:	00d2      	lsls	r2, r2, #3
 8008e60:	4906      	ldr	r1, [pc, #24]	; (8008e7c <HAL_RCC_OscConfig+0x7ac>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008e66:	4b05      	ldr	r3, [pc, #20]	; (8008e7c <HAL_RCC_OscConfig+0x7ac>)
 8008e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6a:	4a04      	ldr	r2, [pc, #16]	; (8008e7c <HAL_RCC_OscConfig+0x7ac>)
 8008e6c:	f043 0301 	orr.w	r3, r3, #1
 8008e70:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3730      	adds	r7, #48	; 0x30
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	58024400 	.word	0x58024400
 8008e80:	ffff0007 	.word	0xffff0007

08008e84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d101      	bne.n	8008e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e19c      	b.n	80091d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e98:	4b8a      	ldr	r3, [pc, #552]	; (80090c4 <HAL_RCC_ClockConfig+0x240>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 030f 	and.w	r3, r3, #15
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d910      	bls.n	8008ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ea6:	4b87      	ldr	r3, [pc, #540]	; (80090c4 <HAL_RCC_ClockConfig+0x240>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f023 020f 	bic.w	r2, r3, #15
 8008eae:	4985      	ldr	r1, [pc, #532]	; (80090c4 <HAL_RCC_ClockConfig+0x240>)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eb6:	4b83      	ldr	r3, [pc, #524]	; (80090c4 <HAL_RCC_ClockConfig+0x240>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 030f 	and.w	r3, r3, #15
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d001      	beq.n	8008ec8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e184      	b.n	80091d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 0304 	and.w	r3, r3, #4
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d010      	beq.n	8008ef6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	691a      	ldr	r2, [r3, #16]
 8008ed8:	4b7b      	ldr	r3, [pc, #492]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d908      	bls.n	8008ef6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ee4:	4b78      	ldr	r3, [pc, #480]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	4975      	ldr	r1, [pc, #468]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f003 0308 	and.w	r3, r3, #8
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d010      	beq.n	8008f24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	695a      	ldr	r2, [r3, #20]
 8008f06:	4b70      	ldr	r3, [pc, #448]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8008f08:	69db      	ldr	r3, [r3, #28]
 8008f0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d908      	bls.n	8008f24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f12:	4b6d      	ldr	r3, [pc, #436]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	496a      	ldr	r1, [pc, #424]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 0310 	and.w	r3, r3, #16
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d010      	beq.n	8008f52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	699a      	ldr	r2, [r3, #24]
 8008f34:	4b64      	ldr	r3, [pc, #400]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8008f36:	69db      	ldr	r3, [r3, #28]
 8008f38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d908      	bls.n	8008f52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f40:	4b61      	ldr	r3, [pc, #388]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8008f42:	69db      	ldr	r3, [r3, #28]
 8008f44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	495e      	ldr	r1, [pc, #376]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0320 	and.w	r3, r3, #32
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d010      	beq.n	8008f80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	69da      	ldr	r2, [r3, #28]
 8008f62:	4b59      	ldr	r3, [pc, #356]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d908      	bls.n	8008f80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008f6e:	4b56      	ldr	r3, [pc, #344]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8008f70:	6a1b      	ldr	r3, [r3, #32]
 8008f72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	4953      	ldr	r1, [pc, #332]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0302 	and.w	r3, r3, #2
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d010      	beq.n	8008fae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	68da      	ldr	r2, [r3, #12]
 8008f90:	4b4d      	ldr	r3, [pc, #308]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	f003 030f 	and.w	r3, r3, #15
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d908      	bls.n	8008fae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f9c:	4b4a      	ldr	r3, [pc, #296]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	f023 020f 	bic.w	r2, r3, #15
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	4947      	ldr	r1, [pc, #284]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d055      	beq.n	8009066 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008fba:	4b43      	ldr	r3, [pc, #268]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	4940      	ldr	r1, [pc, #256]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d107      	bne.n	8008fe4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008fd4:	4b3c      	ldr	r3, [pc, #240]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d121      	bne.n	8009024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e0f6      	b.n	80091d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	d107      	bne.n	8008ffc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008fec:	4b36      	ldr	r3, [pc, #216]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d115      	bne.n	8009024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e0ea      	b.n	80091d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d107      	bne.n	8009014 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009004:	4b30      	ldr	r3, [pc, #192]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800900c:	2b00      	cmp	r3, #0
 800900e:	d109      	bne.n	8009024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e0de      	b.n	80091d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009014:	4b2c      	ldr	r3, [pc, #176]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 0304 	and.w	r3, r3, #4
 800901c:	2b00      	cmp	r3, #0
 800901e:	d101      	bne.n	8009024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e0d6      	b.n	80091d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009024:	4b28      	ldr	r3, [pc, #160]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	f023 0207 	bic.w	r2, r3, #7
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	4925      	ldr	r1, [pc, #148]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8009032:	4313      	orrs	r3, r2
 8009034:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009036:	f7fb ff0f 	bl	8004e58 <HAL_GetTick>
 800903a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800903c:	e00a      	b.n	8009054 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800903e:	f7fb ff0b 	bl	8004e58 <HAL_GetTick>
 8009042:	4602      	mov	r2, r0
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	f241 3288 	movw	r2, #5000	; 0x1388
 800904c:	4293      	cmp	r3, r2
 800904e:	d901      	bls.n	8009054 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e0be      	b.n	80091d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009054:	4b1c      	ldr	r3, [pc, #112]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	00db      	lsls	r3, r3, #3
 8009062:	429a      	cmp	r2, r3
 8009064:	d1eb      	bne.n	800903e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 0302 	and.w	r3, r3, #2
 800906e:	2b00      	cmp	r3, #0
 8009070:	d010      	beq.n	8009094 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	68da      	ldr	r2, [r3, #12]
 8009076:	4b14      	ldr	r3, [pc, #80]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	f003 030f 	and.w	r3, r3, #15
 800907e:	429a      	cmp	r2, r3
 8009080:	d208      	bcs.n	8009094 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009082:	4b11      	ldr	r3, [pc, #68]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	f023 020f 	bic.w	r2, r3, #15
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	490e      	ldr	r1, [pc, #56]	; (80090c8 <HAL_RCC_ClockConfig+0x244>)
 8009090:	4313      	orrs	r3, r2
 8009092:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009094:	4b0b      	ldr	r3, [pc, #44]	; (80090c4 <HAL_RCC_ClockConfig+0x240>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 030f 	and.w	r3, r3, #15
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d214      	bcs.n	80090cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090a2:	4b08      	ldr	r3, [pc, #32]	; (80090c4 <HAL_RCC_ClockConfig+0x240>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f023 020f 	bic.w	r2, r3, #15
 80090aa:	4906      	ldr	r1, [pc, #24]	; (80090c4 <HAL_RCC_ClockConfig+0x240>)
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090b2:	4b04      	ldr	r3, [pc, #16]	; (80090c4 <HAL_RCC_ClockConfig+0x240>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 030f 	and.w	r3, r3, #15
 80090ba:	683a      	ldr	r2, [r7, #0]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d005      	beq.n	80090cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e086      	b.n	80091d2 <HAL_RCC_ClockConfig+0x34e>
 80090c4:	52002000 	.word	0x52002000
 80090c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 0304 	and.w	r3, r3, #4
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d010      	beq.n	80090fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	691a      	ldr	r2, [r3, #16]
 80090dc:	4b3f      	ldr	r3, [pc, #252]	; (80091dc <HAL_RCC_ClockConfig+0x358>)
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d208      	bcs.n	80090fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80090e8:	4b3c      	ldr	r3, [pc, #240]	; (80091dc <HAL_RCC_ClockConfig+0x358>)
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	4939      	ldr	r1, [pc, #228]	; (80091dc <HAL_RCC_ClockConfig+0x358>)
 80090f6:	4313      	orrs	r3, r2
 80090f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0308 	and.w	r3, r3, #8
 8009102:	2b00      	cmp	r3, #0
 8009104:	d010      	beq.n	8009128 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	695a      	ldr	r2, [r3, #20]
 800910a:	4b34      	ldr	r3, [pc, #208]	; (80091dc <HAL_RCC_ClockConfig+0x358>)
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009112:	429a      	cmp	r2, r3
 8009114:	d208      	bcs.n	8009128 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009116:	4b31      	ldr	r3, [pc, #196]	; (80091dc <HAL_RCC_ClockConfig+0x358>)
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	492e      	ldr	r1, [pc, #184]	; (80091dc <HAL_RCC_ClockConfig+0x358>)
 8009124:	4313      	orrs	r3, r2
 8009126:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0310 	and.w	r3, r3, #16
 8009130:	2b00      	cmp	r3, #0
 8009132:	d010      	beq.n	8009156 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	699a      	ldr	r2, [r3, #24]
 8009138:	4b28      	ldr	r3, [pc, #160]	; (80091dc <HAL_RCC_ClockConfig+0x358>)
 800913a:	69db      	ldr	r3, [r3, #28]
 800913c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009140:	429a      	cmp	r2, r3
 8009142:	d208      	bcs.n	8009156 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009144:	4b25      	ldr	r3, [pc, #148]	; (80091dc <HAL_RCC_ClockConfig+0x358>)
 8009146:	69db      	ldr	r3, [r3, #28]
 8009148:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	699b      	ldr	r3, [r3, #24]
 8009150:	4922      	ldr	r1, [pc, #136]	; (80091dc <HAL_RCC_ClockConfig+0x358>)
 8009152:	4313      	orrs	r3, r2
 8009154:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0320 	and.w	r3, r3, #32
 800915e:	2b00      	cmp	r3, #0
 8009160:	d010      	beq.n	8009184 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	69da      	ldr	r2, [r3, #28]
 8009166:	4b1d      	ldr	r3, [pc, #116]	; (80091dc <HAL_RCC_ClockConfig+0x358>)
 8009168:	6a1b      	ldr	r3, [r3, #32]
 800916a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800916e:	429a      	cmp	r2, r3
 8009170:	d208      	bcs.n	8009184 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009172:	4b1a      	ldr	r3, [pc, #104]	; (80091dc <HAL_RCC_ClockConfig+0x358>)
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	69db      	ldr	r3, [r3, #28]
 800917e:	4917      	ldr	r1, [pc, #92]	; (80091dc <HAL_RCC_ClockConfig+0x358>)
 8009180:	4313      	orrs	r3, r2
 8009182:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009184:	f000 f834 	bl	80091f0 <HAL_RCC_GetSysClockFreq>
 8009188:	4602      	mov	r2, r0
 800918a:	4b14      	ldr	r3, [pc, #80]	; (80091dc <HAL_RCC_ClockConfig+0x358>)
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	0a1b      	lsrs	r3, r3, #8
 8009190:	f003 030f 	and.w	r3, r3, #15
 8009194:	4912      	ldr	r1, [pc, #72]	; (80091e0 <HAL_RCC_ClockConfig+0x35c>)
 8009196:	5ccb      	ldrb	r3, [r1, r3]
 8009198:	f003 031f 	and.w	r3, r3, #31
 800919c:	fa22 f303 	lsr.w	r3, r2, r3
 80091a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80091a2:	4b0e      	ldr	r3, [pc, #56]	; (80091dc <HAL_RCC_ClockConfig+0x358>)
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	f003 030f 	and.w	r3, r3, #15
 80091aa:	4a0d      	ldr	r2, [pc, #52]	; (80091e0 <HAL_RCC_ClockConfig+0x35c>)
 80091ac:	5cd3      	ldrb	r3, [r2, r3]
 80091ae:	f003 031f 	and.w	r3, r3, #31
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	fa22 f303 	lsr.w	r3, r2, r3
 80091b8:	4a0a      	ldr	r2, [pc, #40]	; (80091e4 <HAL_RCC_ClockConfig+0x360>)
 80091ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80091bc:	4a0a      	ldr	r2, [pc, #40]	; (80091e8 <HAL_RCC_ClockConfig+0x364>)
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80091c2:	4b0a      	ldr	r3, [pc, #40]	; (80091ec <HAL_RCC_ClockConfig+0x368>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7fb fdfc 	bl	8004dc4 <HAL_InitTick>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3718      	adds	r7, #24
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	58024400 	.word	0x58024400
 80091e0:	0800f340 	.word	0x0800f340
 80091e4:	24000004 	.word	0x24000004
 80091e8:	24000000 	.word	0x24000000
 80091ec:	24000008 	.word	0x24000008

080091f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b089      	sub	sp, #36	; 0x24
 80091f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091f6:	4bb3      	ldr	r3, [pc, #716]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091fe:	2b18      	cmp	r3, #24
 8009200:	f200 8155 	bhi.w	80094ae <HAL_RCC_GetSysClockFreq+0x2be>
 8009204:	a201      	add	r2, pc, #4	; (adr r2, 800920c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920a:	bf00      	nop
 800920c:	08009271 	.word	0x08009271
 8009210:	080094af 	.word	0x080094af
 8009214:	080094af 	.word	0x080094af
 8009218:	080094af 	.word	0x080094af
 800921c:	080094af 	.word	0x080094af
 8009220:	080094af 	.word	0x080094af
 8009224:	080094af 	.word	0x080094af
 8009228:	080094af 	.word	0x080094af
 800922c:	08009297 	.word	0x08009297
 8009230:	080094af 	.word	0x080094af
 8009234:	080094af 	.word	0x080094af
 8009238:	080094af 	.word	0x080094af
 800923c:	080094af 	.word	0x080094af
 8009240:	080094af 	.word	0x080094af
 8009244:	080094af 	.word	0x080094af
 8009248:	080094af 	.word	0x080094af
 800924c:	0800929d 	.word	0x0800929d
 8009250:	080094af 	.word	0x080094af
 8009254:	080094af 	.word	0x080094af
 8009258:	080094af 	.word	0x080094af
 800925c:	080094af 	.word	0x080094af
 8009260:	080094af 	.word	0x080094af
 8009264:	080094af 	.word	0x080094af
 8009268:	080094af 	.word	0x080094af
 800926c:	080092a3 	.word	0x080092a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009270:	4b94      	ldr	r3, [pc, #592]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 0320 	and.w	r3, r3, #32
 8009278:	2b00      	cmp	r3, #0
 800927a:	d009      	beq.n	8009290 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800927c:	4b91      	ldr	r3, [pc, #580]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	08db      	lsrs	r3, r3, #3
 8009282:	f003 0303 	and.w	r3, r3, #3
 8009286:	4a90      	ldr	r2, [pc, #576]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009288:	fa22 f303 	lsr.w	r3, r2, r3
 800928c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800928e:	e111      	b.n	80094b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009290:	4b8d      	ldr	r3, [pc, #564]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009292:	61bb      	str	r3, [r7, #24]
      break;
 8009294:	e10e      	b.n	80094b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009296:	4b8d      	ldr	r3, [pc, #564]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009298:	61bb      	str	r3, [r7, #24]
      break;
 800929a:	e10b      	b.n	80094b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800929c:	4b8c      	ldr	r3, [pc, #560]	; (80094d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800929e:	61bb      	str	r3, [r7, #24]
      break;
 80092a0:	e108      	b.n	80094b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092a2:	4b88      	ldr	r3, [pc, #544]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a6:	f003 0303 	and.w	r3, r3, #3
 80092aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80092ac:	4b85      	ldr	r3, [pc, #532]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b0:	091b      	lsrs	r3, r3, #4
 80092b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80092b8:	4b82      	ldr	r3, [pc, #520]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092bc:	f003 0301 	and.w	r3, r3, #1
 80092c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80092c2:	4b80      	ldr	r3, [pc, #512]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c6:	08db      	lsrs	r3, r3, #3
 80092c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	fb02 f303 	mul.w	r3, r2, r3
 80092d2:	ee07 3a90 	vmov	s15, r3
 80092d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 80e1 	beq.w	80094a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	f000 8083 	beq.w	80093f4 <HAL_RCC_GetSysClockFreq+0x204>
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	f200 80a1 	bhi.w	8009438 <HAL_RCC_GetSysClockFreq+0x248>
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d003      	beq.n	8009304 <HAL_RCC_GetSysClockFreq+0x114>
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d056      	beq.n	80093b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009302:	e099      	b.n	8009438 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009304:	4b6f      	ldr	r3, [pc, #444]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 0320 	and.w	r3, r3, #32
 800930c:	2b00      	cmp	r3, #0
 800930e:	d02d      	beq.n	800936c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009310:	4b6c      	ldr	r3, [pc, #432]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	08db      	lsrs	r3, r3, #3
 8009316:	f003 0303 	and.w	r3, r3, #3
 800931a:	4a6b      	ldr	r2, [pc, #428]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800931c:	fa22 f303 	lsr.w	r3, r2, r3
 8009320:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	ee07 3a90 	vmov	s15, r3
 8009328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	ee07 3a90 	vmov	s15, r3
 8009332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800933a:	4b62      	ldr	r3, [pc, #392]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800933c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009342:	ee07 3a90 	vmov	s15, r3
 8009346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800934a:	ed97 6a02 	vldr	s12, [r7, #8]
 800934e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80094d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800935a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800935e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009366:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800936a:	e087      	b.n	800947c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	ee07 3a90 	vmov	s15, r3
 8009372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009376:	eddf 6a58 	vldr	s13, [pc, #352]	; 80094d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800937a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800937e:	4b51      	ldr	r3, [pc, #324]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800938e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009392:	eddf 5a50 	vldr	s11, [pc, #320]	; 80094d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800939a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800939e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80093ae:	e065      	b.n	800947c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	ee07 3a90 	vmov	s15, r3
 80093b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ba:	eddf 6a48 	vldr	s13, [pc, #288]	; 80094dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80093be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c2:	4b40      	ldr	r3, [pc, #256]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ca:	ee07 3a90 	vmov	s15, r3
 80093ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80093d6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80094d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80093f2:	e043      	b.n	800947c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	ee07 3a90 	vmov	s15, r3
 80093fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093fe:	eddf 6a38 	vldr	s13, [pc, #224]	; 80094e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009406:	4b2f      	ldr	r3, [pc, #188]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800940a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800940e:	ee07 3a90 	vmov	s15, r3
 8009412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009416:	ed97 6a02 	vldr	s12, [r7, #8]
 800941a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80094d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800941e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800942a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800942e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009432:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009436:	e021      	b.n	800947c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	ee07 3a90 	vmov	s15, r3
 800943e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009442:	eddf 6a26 	vldr	s13, [pc, #152]	; 80094dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8009446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800944a:	4b1e      	ldr	r3, [pc, #120]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800944c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009452:	ee07 3a90 	vmov	s15, r3
 8009456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800945a:	ed97 6a02 	vldr	s12, [r7, #8]
 800945e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80094d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800946a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800946e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009476:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800947a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800947c:	4b11      	ldr	r3, [pc, #68]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800947e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009480:	0a5b      	lsrs	r3, r3, #9
 8009482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009486:	3301      	adds	r3, #1
 8009488:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	ee07 3a90 	vmov	s15, r3
 8009490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009494:	edd7 6a07 	vldr	s13, [r7, #28]
 8009498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800949c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094a0:	ee17 3a90 	vmov	r3, s15
 80094a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80094a6:	e005      	b.n	80094b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80094a8:	2300      	movs	r3, #0
 80094aa:	61bb      	str	r3, [r7, #24]
      break;
 80094ac:	e002      	b.n	80094b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80094ae:	4b07      	ldr	r3, [pc, #28]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094b0:	61bb      	str	r3, [r7, #24]
      break;
 80094b2:	bf00      	nop
  }

  return sysclockfreq;
 80094b4:	69bb      	ldr	r3, [r7, #24]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3724      	adds	r7, #36	; 0x24
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	58024400 	.word	0x58024400
 80094c8:	03d09000 	.word	0x03d09000
 80094cc:	003d0900 	.word	0x003d0900
 80094d0:	007a1200 	.word	0x007a1200
 80094d4:	46000000 	.word	0x46000000
 80094d8:	4c742400 	.word	0x4c742400
 80094dc:	4a742400 	.word	0x4a742400
 80094e0:	4af42400 	.word	0x4af42400

080094e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80094ea:	f7ff fe81 	bl	80091f0 <HAL_RCC_GetSysClockFreq>
 80094ee:	4602      	mov	r2, r0
 80094f0:	4b10      	ldr	r3, [pc, #64]	; (8009534 <HAL_RCC_GetHCLKFreq+0x50>)
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	0a1b      	lsrs	r3, r3, #8
 80094f6:	f003 030f 	and.w	r3, r3, #15
 80094fa:	490f      	ldr	r1, [pc, #60]	; (8009538 <HAL_RCC_GetHCLKFreq+0x54>)
 80094fc:	5ccb      	ldrb	r3, [r1, r3]
 80094fe:	f003 031f 	and.w	r3, r3, #31
 8009502:	fa22 f303 	lsr.w	r3, r2, r3
 8009506:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009508:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <HAL_RCC_GetHCLKFreq+0x50>)
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	f003 030f 	and.w	r3, r3, #15
 8009510:	4a09      	ldr	r2, [pc, #36]	; (8009538 <HAL_RCC_GetHCLKFreq+0x54>)
 8009512:	5cd3      	ldrb	r3, [r2, r3]
 8009514:	f003 031f 	and.w	r3, r3, #31
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	fa22 f303 	lsr.w	r3, r2, r3
 800951e:	4a07      	ldr	r2, [pc, #28]	; (800953c <HAL_RCC_GetHCLKFreq+0x58>)
 8009520:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009522:	4a07      	ldr	r2, [pc, #28]	; (8009540 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009528:	4b04      	ldr	r3, [pc, #16]	; (800953c <HAL_RCC_GetHCLKFreq+0x58>)
 800952a:	681b      	ldr	r3, [r3, #0]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3708      	adds	r7, #8
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	58024400 	.word	0x58024400
 8009538:	0800f340 	.word	0x0800f340
 800953c:	24000004 	.word	0x24000004
 8009540:	24000000 	.word	0x24000000

08009544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009548:	f7ff ffcc 	bl	80094e4 <HAL_RCC_GetHCLKFreq>
 800954c:	4602      	mov	r2, r0
 800954e:	4b06      	ldr	r3, [pc, #24]	; (8009568 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009550:	69db      	ldr	r3, [r3, #28]
 8009552:	091b      	lsrs	r3, r3, #4
 8009554:	f003 0307 	and.w	r3, r3, #7
 8009558:	4904      	ldr	r1, [pc, #16]	; (800956c <HAL_RCC_GetPCLK1Freq+0x28>)
 800955a:	5ccb      	ldrb	r3, [r1, r3]
 800955c:	f003 031f 	and.w	r3, r3, #31
 8009560:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009564:	4618      	mov	r0, r3
 8009566:	bd80      	pop	{r7, pc}
 8009568:	58024400 	.word	0x58024400
 800956c:	0800f340 	.word	0x0800f340

08009570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009574:	f7ff ffb6 	bl	80094e4 <HAL_RCC_GetHCLKFreq>
 8009578:	4602      	mov	r2, r0
 800957a:	4b06      	ldr	r3, [pc, #24]	; (8009594 <HAL_RCC_GetPCLK2Freq+0x24>)
 800957c:	69db      	ldr	r3, [r3, #28]
 800957e:	0a1b      	lsrs	r3, r3, #8
 8009580:	f003 0307 	and.w	r3, r3, #7
 8009584:	4904      	ldr	r1, [pc, #16]	; (8009598 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009586:	5ccb      	ldrb	r3, [r1, r3]
 8009588:	f003 031f 	and.w	r3, r3, #31
 800958c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009590:	4618      	mov	r0, r3
 8009592:	bd80      	pop	{r7, pc}
 8009594:	58024400 	.word	0x58024400
 8009598:	0800f340 	.word	0x0800f340

0800959c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800959c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095a0:	b0c6      	sub	sp, #280	; 0x118
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80095a8:	2300      	movs	r3, #0
 80095aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80095ae:	2300      	movs	r3, #0
 80095b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80095b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095bc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80095c0:	2500      	movs	r5, #0
 80095c2:	ea54 0305 	orrs.w	r3, r4, r5
 80095c6:	d049      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80095c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095d2:	d02f      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80095d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095d8:	d828      	bhi.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80095da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095de:	d01a      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80095e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095e4:	d822      	bhi.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d003      	beq.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80095ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095ee:	d007      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80095f0:	e01c      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095f2:	4bab      	ldr	r3, [pc, #684]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80095f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f6:	4aaa      	ldr	r2, [pc, #680]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80095f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80095fe:	e01a      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009604:	3308      	adds	r3, #8
 8009606:	2102      	movs	r1, #2
 8009608:	4618      	mov	r0, r3
 800960a:	f001 fc25 	bl	800ae58 <RCCEx_PLL2_Config>
 800960e:	4603      	mov	r3, r0
 8009610:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009614:	e00f      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800961a:	3328      	adds	r3, #40	; 0x28
 800961c:	2102      	movs	r1, #2
 800961e:	4618      	mov	r0, r3
 8009620:	f001 fccc 	bl	800afbc <RCCEx_PLL3_Config>
 8009624:	4603      	mov	r3, r0
 8009626:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800962a:	e004      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009632:	e000      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009636:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10a      	bne.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800963e:	4b98      	ldr	r3, [pc, #608]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009642:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800964a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800964c:	4a94      	ldr	r2, [pc, #592]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800964e:	430b      	orrs	r3, r1
 8009650:	6513      	str	r3, [r2, #80]	; 0x50
 8009652:	e003      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009654:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009658:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800965c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009664:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009668:	f04f 0900 	mov.w	r9, #0
 800966c:	ea58 0309 	orrs.w	r3, r8, r9
 8009670:	d047      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009678:	2b04      	cmp	r3, #4
 800967a:	d82a      	bhi.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800967c:	a201      	add	r2, pc, #4	; (adr r2, 8009684 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800967e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009682:	bf00      	nop
 8009684:	08009699 	.word	0x08009699
 8009688:	080096a7 	.word	0x080096a7
 800968c:	080096bd 	.word	0x080096bd
 8009690:	080096db 	.word	0x080096db
 8009694:	080096db 	.word	0x080096db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009698:	4b81      	ldr	r3, [pc, #516]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800969a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969c:	4a80      	ldr	r2, [pc, #512]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800969e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096a4:	e01a      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096aa:	3308      	adds	r3, #8
 80096ac:	2100      	movs	r1, #0
 80096ae:	4618      	mov	r0, r3
 80096b0:	f001 fbd2 	bl	800ae58 <RCCEx_PLL2_Config>
 80096b4:	4603      	mov	r3, r0
 80096b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096ba:	e00f      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80096bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096c0:	3328      	adds	r3, #40	; 0x28
 80096c2:	2100      	movs	r1, #0
 80096c4:	4618      	mov	r0, r3
 80096c6:	f001 fc79 	bl	800afbc <RCCEx_PLL3_Config>
 80096ca:	4603      	mov	r3, r0
 80096cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096d0:	e004      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80096d8:	e000      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80096da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10a      	bne.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80096e4:	4b6e      	ldr	r3, [pc, #440]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096e8:	f023 0107 	bic.w	r1, r3, #7
 80096ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f2:	4a6b      	ldr	r2, [pc, #428]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096f4:	430b      	orrs	r3, r1
 80096f6:	6513      	str	r3, [r2, #80]	; 0x50
 80096f8:	e003      	b.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096fe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800970e:	f04f 0b00 	mov.w	fp, #0
 8009712:	ea5a 030b 	orrs.w	r3, sl, fp
 8009716:	d05b      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800971c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009720:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009724:	d03b      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009726:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800972a:	d834      	bhi.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800972c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009730:	d037      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009732:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009736:	d82e      	bhi.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009738:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800973c:	d033      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800973e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009742:	d828      	bhi.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009748:	d01a      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800974a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800974e:	d822      	bhi.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009750:	2b00      	cmp	r3, #0
 8009752:	d003      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009754:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009758:	d007      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800975a:	e01c      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800975c:	4b50      	ldr	r3, [pc, #320]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800975e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009760:	4a4f      	ldr	r2, [pc, #316]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009766:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009768:	e01e      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800976a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800976e:	3308      	adds	r3, #8
 8009770:	2100      	movs	r1, #0
 8009772:	4618      	mov	r0, r3
 8009774:	f001 fb70 	bl	800ae58 <RCCEx_PLL2_Config>
 8009778:	4603      	mov	r3, r0
 800977a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800977e:	e013      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009784:	3328      	adds	r3, #40	; 0x28
 8009786:	2100      	movs	r1, #0
 8009788:	4618      	mov	r0, r3
 800978a:	f001 fc17 	bl	800afbc <RCCEx_PLL3_Config>
 800978e:	4603      	mov	r3, r0
 8009790:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009794:	e008      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800979c:	e004      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800979e:	bf00      	nop
 80097a0:	e002      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80097a2:	bf00      	nop
 80097a4:	e000      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80097a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10b      	bne.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80097b0:	4b3b      	ldr	r3, [pc, #236]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80097b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097b4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80097b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80097c0:	4a37      	ldr	r2, [pc, #220]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80097c2:	430b      	orrs	r3, r1
 80097c4:	6593      	str	r3, [r2, #88]	; 0x58
 80097c6:	e003      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80097cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80097d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80097dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80097e0:	2300      	movs	r3, #0
 80097e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80097e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80097ea:	460b      	mov	r3, r1
 80097ec:	4313      	orrs	r3, r2
 80097ee:	d05d      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80097f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80097f8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80097fc:	d03b      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80097fe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009802:	d834      	bhi.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009804:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009808:	d037      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800980a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800980e:	d82e      	bhi.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009810:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009814:	d033      	beq.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009816:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800981a:	d828      	bhi.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800981c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009820:	d01a      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009822:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009826:	d822      	bhi.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009828:	2b00      	cmp	r3, #0
 800982a:	d003      	beq.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800982c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009830:	d007      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009832:	e01c      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009834:	4b1a      	ldr	r3, [pc, #104]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009838:	4a19      	ldr	r2, [pc, #100]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800983a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800983e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009840:	e01e      	b.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009846:	3308      	adds	r3, #8
 8009848:	2100      	movs	r1, #0
 800984a:	4618      	mov	r0, r3
 800984c:	f001 fb04 	bl	800ae58 <RCCEx_PLL2_Config>
 8009850:	4603      	mov	r3, r0
 8009852:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009856:	e013      	b.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800985c:	3328      	adds	r3, #40	; 0x28
 800985e:	2100      	movs	r1, #0
 8009860:	4618      	mov	r0, r3
 8009862:	f001 fbab 	bl	800afbc <RCCEx_PLL3_Config>
 8009866:	4603      	mov	r3, r0
 8009868:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800986c:	e008      	b.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009874:	e004      	b.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009876:	bf00      	nop
 8009878:	e002      	b.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800987a:	bf00      	nop
 800987c:	e000      	b.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800987e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009880:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10d      	bne.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009888:	4b05      	ldr	r3, [pc, #20]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800988a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800988c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009894:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009898:	4a01      	ldr	r2, [pc, #4]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800989a:	430b      	orrs	r3, r1
 800989c:	6593      	str	r3, [r2, #88]	; 0x58
 800989e:	e005      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x310>
 80098a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80098a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80098ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80098b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80098bc:	2300      	movs	r3, #0
 80098be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80098c2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80098c6:	460b      	mov	r3, r1
 80098c8:	4313      	orrs	r3, r2
 80098ca:	d03a      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80098cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098d2:	2b30      	cmp	r3, #48	; 0x30
 80098d4:	d01f      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80098d6:	2b30      	cmp	r3, #48	; 0x30
 80098d8:	d819      	bhi.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80098da:	2b20      	cmp	r3, #32
 80098dc:	d00c      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80098de:	2b20      	cmp	r3, #32
 80098e0:	d815      	bhi.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d019      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80098e6:	2b10      	cmp	r3, #16
 80098e8:	d111      	bne.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098ea:	4baa      	ldr	r3, [pc, #680]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ee:	4aa9      	ldr	r2, [pc, #676]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80098f6:	e011      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80098f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098fc:	3308      	adds	r3, #8
 80098fe:	2102      	movs	r1, #2
 8009900:	4618      	mov	r0, r3
 8009902:	f001 faa9 	bl	800ae58 <RCCEx_PLL2_Config>
 8009906:	4603      	mov	r3, r0
 8009908:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800990c:	e006      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009914:	e002      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009916:	bf00      	nop
 8009918:	e000      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800991a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800991c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009920:	2b00      	cmp	r3, #0
 8009922:	d10a      	bne.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009924:	4b9b      	ldr	r3, [pc, #620]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009928:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800992c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009932:	4a98      	ldr	r2, [pc, #608]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009934:	430b      	orrs	r3, r1
 8009936:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009938:	e003      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800993a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800993e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800994e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009952:	2300      	movs	r3, #0
 8009954:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009958:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800995c:	460b      	mov	r3, r1
 800995e:	4313      	orrs	r3, r2
 8009960:	d051      	beq.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009968:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800996c:	d035      	beq.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800996e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009972:	d82e      	bhi.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009974:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009978:	d031      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x442>
 800997a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800997e:	d828      	bhi.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009984:	d01a      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800998a:	d822      	bhi.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800998c:	2b00      	cmp	r3, #0
 800998e:	d003      	beq.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009994:	d007      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009996:	e01c      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009998:	4b7e      	ldr	r3, [pc, #504]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800999a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999c:	4a7d      	ldr	r2, [pc, #500]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800999e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80099a4:	e01c      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099aa:	3308      	adds	r3, #8
 80099ac:	2100      	movs	r1, #0
 80099ae:	4618      	mov	r0, r3
 80099b0:	f001 fa52 	bl	800ae58 <RCCEx_PLL2_Config>
 80099b4:	4603      	mov	r3, r0
 80099b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80099ba:	e011      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099c0:	3328      	adds	r3, #40	; 0x28
 80099c2:	2100      	movs	r1, #0
 80099c4:	4618      	mov	r0, r3
 80099c6:	f001 faf9 	bl	800afbc <RCCEx_PLL3_Config>
 80099ca:	4603      	mov	r3, r0
 80099cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80099d0:	e006      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80099d8:	e002      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80099da:	bf00      	nop
 80099dc:	e000      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80099de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10a      	bne.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80099e8:	4b6a      	ldr	r3, [pc, #424]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ec:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80099f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099f6:	4a67      	ldr	r2, [pc, #412]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099f8:	430b      	orrs	r3, r1
 80099fa:	6513      	str	r3, [r2, #80]	; 0x50
 80099fc:	e003      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009a12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a16:	2300      	movs	r3, #0
 8009a18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a1c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009a20:	460b      	mov	r3, r1
 8009a22:	4313      	orrs	r3, r2
 8009a24:	d053      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a30:	d033      	beq.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009a32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a36:	d82c      	bhi.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009a38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a3c:	d02f      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009a3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a42:	d826      	bhi.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009a44:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a48:	d02b      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009a4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a4e:	d820      	bhi.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009a50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a54:	d012      	beq.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009a56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a5a:	d81a      	bhi.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d022      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a64:	d115      	bne.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a6a:	3308      	adds	r3, #8
 8009a6c:	2101      	movs	r1, #1
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f001 f9f2 	bl	800ae58 <RCCEx_PLL2_Config>
 8009a74:	4603      	mov	r3, r0
 8009a76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009a7a:	e015      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a80:	3328      	adds	r3, #40	; 0x28
 8009a82:	2101      	movs	r1, #1
 8009a84:	4618      	mov	r0, r3
 8009a86:	f001 fa99 	bl	800afbc <RCCEx_PLL3_Config>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009a90:	e00a      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009a98:	e006      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009a9a:	bf00      	nop
 8009a9c:	e004      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009a9e:	bf00      	nop
 8009aa0:	e002      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009aa2:	bf00      	nop
 8009aa4:	e000      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aa8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10a      	bne.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009ab0:	4b38      	ldr	r3, [pc, #224]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ab4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009abe:	4a35      	ldr	r2, [pc, #212]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009ac0:	430b      	orrs	r3, r1
 8009ac2:	6513      	str	r3, [r2, #80]	; 0x50
 8009ac4:	e003      	b.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ac6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009aca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009ada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ae4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009ae8:	460b      	mov	r3, r1
 8009aea:	4313      	orrs	r3, r2
 8009aec:	d058      	beq.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009af2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009afa:	d033      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b00:	d82c      	bhi.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b06:	d02f      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b0c:	d826      	bhi.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b12:	d02b      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009b14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b18:	d820      	bhi.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b1e:	d012      	beq.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b24:	d81a      	bhi.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d022      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009b2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b2e:	d115      	bne.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b34:	3308      	adds	r3, #8
 8009b36:	2101      	movs	r1, #1
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f001 f98d 	bl	800ae58 <RCCEx_PLL2_Config>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009b44:	e015      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b4a:	3328      	adds	r3, #40	; 0x28
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f001 fa34 	bl	800afbc <RCCEx_PLL3_Config>
 8009b54:	4603      	mov	r3, r0
 8009b56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009b5a:	e00a      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009b62:	e006      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009b64:	bf00      	nop
 8009b66:	e004      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009b68:	bf00      	nop
 8009b6a:	e002      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009b6c:	bf00      	nop
 8009b6e:	e000      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10e      	bne.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009b7a:	4b06      	ldr	r3, [pc, #24]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b7e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b8a:	4a02      	ldr	r2, [pc, #8]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b8c:	430b      	orrs	r3, r1
 8009b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8009b90:	e006      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009b92:	bf00      	nop
 8009b94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009bac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009bb6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009bba:	460b      	mov	r3, r1
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	d037      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bca:	d00e      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bd0:	d816      	bhi.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d018      	beq.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bda:	d111      	bne.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bdc:	4bc4      	ldr	r3, [pc, #784]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be0:	4ac3      	ldr	r2, [pc, #780]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009be6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009be8:	e00f      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bee:	3308      	adds	r3, #8
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f001 f930 	bl	800ae58 <RCCEx_PLL2_Config>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009bfe:	e004      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c00:	2301      	movs	r3, #1
 8009c02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009c06:	e000      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d10a      	bne.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c12:	4bb7      	ldr	r3, [pc, #732]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c16:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c20:	4ab3      	ldr	r2, [pc, #716]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c22:	430b      	orrs	r3, r1
 8009c24:	6513      	str	r3, [r2, #80]	; 0x50
 8009c26:	e003      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c38:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009c3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c40:	2300      	movs	r3, #0
 8009c42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	d039      	beq.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	d81c      	bhi.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009c5a:	a201      	add	r2, pc, #4	; (adr r2, 8009c60 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c60:	08009c9d 	.word	0x08009c9d
 8009c64:	08009c71 	.word	0x08009c71
 8009c68:	08009c7f 	.word	0x08009c7f
 8009c6c:	08009c9d 	.word	0x08009c9d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c70:	4b9f      	ldr	r3, [pc, #636]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c74:	4a9e      	ldr	r2, [pc, #632]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009c7c:	e00f      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c82:	3308      	adds	r3, #8
 8009c84:	2102      	movs	r1, #2
 8009c86:	4618      	mov	r0, r3
 8009c88:	f001 f8e6 	bl	800ae58 <RCCEx_PLL2_Config>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009c92:	e004      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009c9a:	e000      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d10a      	bne.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009ca6:	4b92      	ldr	r3, [pc, #584]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009caa:	f023 0103 	bic.w	r1, r3, #3
 8009cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cb4:	4a8e      	ldr	r2, [pc, #568]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cb6:	430b      	orrs	r3, r1
 8009cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009cba:	e003      	b.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009cc0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ccc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009cda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	f000 8099 	beq.w	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ce6:	4b83      	ldr	r3, [pc, #524]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a82      	ldr	r2, [pc, #520]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cf0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009cf2:	f7fb f8b1 	bl	8004e58 <HAL_GetTick>
 8009cf6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cfa:	e00b      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cfc:	f7fb f8ac 	bl	8004e58 <HAL_GetTick>
 8009d00:	4602      	mov	r2, r0
 8009d02:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d06:	1ad3      	subs	r3, r2, r3
 8009d08:	2b64      	cmp	r3, #100	; 0x64
 8009d0a:	d903      	bls.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009d12:	e005      	b.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d14:	4b77      	ldr	r3, [pc, #476]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d0ed      	beq.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009d20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d173      	bne.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009d28:	4b71      	ldr	r3, [pc, #452]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d34:	4053      	eors	r3, r2
 8009d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d015      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d3e:	4b6c      	ldr	r3, [pc, #432]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d4a:	4b69      	ldr	r3, [pc, #420]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d4e:	4a68      	ldr	r2, [pc, #416]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d54:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d56:	4b66      	ldr	r3, [pc, #408]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d5a:	4a65      	ldr	r2, [pc, #404]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d60:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009d62:	4a63      	ldr	r2, [pc, #396]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d68:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d76:	d118      	bne.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d78:	f7fb f86e 	bl	8004e58 <HAL_GetTick>
 8009d7c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d80:	e00d      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d82:	f7fb f869 	bl	8004e58 <HAL_GetTick>
 8009d86:	4602      	mov	r2, r0
 8009d88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d8c:	1ad2      	subs	r2, r2, r3
 8009d8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d903      	bls.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009d96:	2303      	movs	r3, #3
 8009d98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8009d9c:	e005      	b.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d9e:	4b54      	ldr	r3, [pc, #336]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da2:	f003 0302 	and.w	r3, r3, #2
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d0eb      	beq.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009daa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d129      	bne.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009db6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dc2:	d10e      	bne.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009dc4:	4b4a      	ldr	r3, [pc, #296]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009dd4:	091a      	lsrs	r2, r3, #4
 8009dd6:	4b48      	ldr	r3, [pc, #288]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009dd8:	4013      	ands	r3, r2
 8009dda:	4a45      	ldr	r2, [pc, #276]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ddc:	430b      	orrs	r3, r1
 8009dde:	6113      	str	r3, [r2, #16]
 8009de0:	e005      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009de2:	4b43      	ldr	r3, [pc, #268]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	4a42      	ldr	r2, [pc, #264]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009de8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009dec:	6113      	str	r3, [r2, #16]
 8009dee:	4b40      	ldr	r3, [pc, #256]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009df0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009df6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dfe:	4a3c      	ldr	r2, [pc, #240]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e00:	430b      	orrs	r3, r1
 8009e02:	6713      	str	r3, [r2, #112]	; 0x70
 8009e04:	e008      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e0a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8009e0e:	e003      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	f002 0301 	and.w	r3, r2, #1
 8009e24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e28:	2300      	movs	r3, #0
 8009e2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009e2e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009e32:	460b      	mov	r3, r1
 8009e34:	4313      	orrs	r3, r2
 8009e36:	f000 808f 	beq.w	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e40:	2b28      	cmp	r3, #40	; 0x28
 8009e42:	d871      	bhi.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009e44:	a201      	add	r2, pc, #4	; (adr r2, 8009e4c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4a:	bf00      	nop
 8009e4c:	08009f31 	.word	0x08009f31
 8009e50:	08009f29 	.word	0x08009f29
 8009e54:	08009f29 	.word	0x08009f29
 8009e58:	08009f29 	.word	0x08009f29
 8009e5c:	08009f29 	.word	0x08009f29
 8009e60:	08009f29 	.word	0x08009f29
 8009e64:	08009f29 	.word	0x08009f29
 8009e68:	08009f29 	.word	0x08009f29
 8009e6c:	08009efd 	.word	0x08009efd
 8009e70:	08009f29 	.word	0x08009f29
 8009e74:	08009f29 	.word	0x08009f29
 8009e78:	08009f29 	.word	0x08009f29
 8009e7c:	08009f29 	.word	0x08009f29
 8009e80:	08009f29 	.word	0x08009f29
 8009e84:	08009f29 	.word	0x08009f29
 8009e88:	08009f29 	.word	0x08009f29
 8009e8c:	08009f13 	.word	0x08009f13
 8009e90:	08009f29 	.word	0x08009f29
 8009e94:	08009f29 	.word	0x08009f29
 8009e98:	08009f29 	.word	0x08009f29
 8009e9c:	08009f29 	.word	0x08009f29
 8009ea0:	08009f29 	.word	0x08009f29
 8009ea4:	08009f29 	.word	0x08009f29
 8009ea8:	08009f29 	.word	0x08009f29
 8009eac:	08009f31 	.word	0x08009f31
 8009eb0:	08009f29 	.word	0x08009f29
 8009eb4:	08009f29 	.word	0x08009f29
 8009eb8:	08009f29 	.word	0x08009f29
 8009ebc:	08009f29 	.word	0x08009f29
 8009ec0:	08009f29 	.word	0x08009f29
 8009ec4:	08009f29 	.word	0x08009f29
 8009ec8:	08009f29 	.word	0x08009f29
 8009ecc:	08009f31 	.word	0x08009f31
 8009ed0:	08009f29 	.word	0x08009f29
 8009ed4:	08009f29 	.word	0x08009f29
 8009ed8:	08009f29 	.word	0x08009f29
 8009edc:	08009f29 	.word	0x08009f29
 8009ee0:	08009f29 	.word	0x08009f29
 8009ee4:	08009f29 	.word	0x08009f29
 8009ee8:	08009f29 	.word	0x08009f29
 8009eec:	08009f31 	.word	0x08009f31
 8009ef0:	58024400 	.word	0x58024400
 8009ef4:	58024800 	.word	0x58024800
 8009ef8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f00:	3308      	adds	r3, #8
 8009f02:	2101      	movs	r1, #1
 8009f04:	4618      	mov	r0, r3
 8009f06:	f000 ffa7 	bl	800ae58 <RCCEx_PLL2_Config>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009f10:	e00f      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f16:	3328      	adds	r3, #40	; 0x28
 8009f18:	2101      	movs	r1, #1
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f001 f84e 	bl	800afbc <RCCEx_PLL3_Config>
 8009f20:	4603      	mov	r3, r0
 8009f22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009f26:	e004      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009f2e:	e000      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d10a      	bne.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009f3a:	4bbf      	ldr	r3, [pc, #764]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f3e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f48:	4abb      	ldr	r2, [pc, #748]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f4a:	430b      	orrs	r3, r1
 8009f4c:	6553      	str	r3, [r2, #84]	; 0x54
 8009f4e:	e003      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f60:	f002 0302 	and.w	r3, r2, #2
 8009f64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f6e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009f72:	460b      	mov	r3, r1
 8009f74:	4313      	orrs	r3, r2
 8009f76:	d041      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f7e:	2b05      	cmp	r3, #5
 8009f80:	d824      	bhi.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009f82:	a201      	add	r2, pc, #4	; (adr r2, 8009f88 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f88:	08009fd5 	.word	0x08009fd5
 8009f8c:	08009fa1 	.word	0x08009fa1
 8009f90:	08009fb7 	.word	0x08009fb7
 8009f94:	08009fd5 	.word	0x08009fd5
 8009f98:	08009fd5 	.word	0x08009fd5
 8009f9c:	08009fd5 	.word	0x08009fd5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fa4:	3308      	adds	r3, #8
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f000 ff55 	bl	800ae58 <RCCEx_PLL2_Config>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009fb4:	e00f      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fba:	3328      	adds	r3, #40	; 0x28
 8009fbc:	2101      	movs	r1, #1
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 fffc 	bl	800afbc <RCCEx_PLL3_Config>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009fca:	e004      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009fd2:	e000      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10a      	bne.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009fde:	4b96      	ldr	r3, [pc, #600]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fe2:	f023 0107 	bic.w	r1, r3, #7
 8009fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fec:	4a92      	ldr	r2, [pc, #584]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009fee:	430b      	orrs	r3, r1
 8009ff0:	6553      	str	r3, [r2, #84]	; 0x54
 8009ff2:	e003      	b.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ff8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	f002 0304 	and.w	r3, r2, #4
 800a008:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a00c:	2300      	movs	r3, #0
 800a00e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a012:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a016:	460b      	mov	r3, r1
 800a018:	4313      	orrs	r3, r2
 800a01a:	d044      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a024:	2b05      	cmp	r3, #5
 800a026:	d825      	bhi.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a028:	a201      	add	r2, pc, #4	; (adr r2, 800a030 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02e:	bf00      	nop
 800a030:	0800a07d 	.word	0x0800a07d
 800a034:	0800a049 	.word	0x0800a049
 800a038:	0800a05f 	.word	0x0800a05f
 800a03c:	0800a07d 	.word	0x0800a07d
 800a040:	0800a07d 	.word	0x0800a07d
 800a044:	0800a07d 	.word	0x0800a07d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a04c:	3308      	adds	r3, #8
 800a04e:	2101      	movs	r1, #1
 800a050:	4618      	mov	r0, r3
 800a052:	f000 ff01 	bl	800ae58 <RCCEx_PLL2_Config>
 800a056:	4603      	mov	r3, r0
 800a058:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a05c:	e00f      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a062:	3328      	adds	r3, #40	; 0x28
 800a064:	2101      	movs	r1, #1
 800a066:	4618      	mov	r0, r3
 800a068:	f000 ffa8 	bl	800afbc <RCCEx_PLL3_Config>
 800a06c:	4603      	mov	r3, r0
 800a06e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a072:	e004      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a07a:	e000      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a07c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a07e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a082:	2b00      	cmp	r3, #0
 800a084:	d10b      	bne.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a086:	4b6c      	ldr	r3, [pc, #432]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a08a:	f023 0107 	bic.w	r1, r3, #7
 800a08e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a096:	4a68      	ldr	r2, [pc, #416]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a098:	430b      	orrs	r3, r1
 800a09a:	6593      	str	r3, [r2, #88]	; 0x58
 800a09c:	e003      	b.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a09e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a0a2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ae:	f002 0320 	and.w	r3, r2, #32
 800a0b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a0bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	d055      	beq.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a0c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0d2:	d033      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a0d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0d8:	d82c      	bhi.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a0da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0de:	d02f      	beq.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a0e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0e4:	d826      	bhi.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a0e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0ea:	d02b      	beq.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a0ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0f0:	d820      	bhi.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a0f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0f6:	d012      	beq.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a0f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0fc:	d81a      	bhi.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d022      	beq.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a106:	d115      	bne.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a10c:	3308      	adds	r3, #8
 800a10e:	2100      	movs	r1, #0
 800a110:	4618      	mov	r0, r3
 800a112:	f000 fea1 	bl	800ae58 <RCCEx_PLL2_Config>
 800a116:	4603      	mov	r3, r0
 800a118:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a11c:	e015      	b.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a11e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a122:	3328      	adds	r3, #40	; 0x28
 800a124:	2102      	movs	r1, #2
 800a126:	4618      	mov	r0, r3
 800a128:	f000 ff48 	bl	800afbc <RCCEx_PLL3_Config>
 800a12c:	4603      	mov	r3, r0
 800a12e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a132:	e00a      	b.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a13a:	e006      	b.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a13c:	bf00      	nop
 800a13e:	e004      	b.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a140:	bf00      	nop
 800a142:	e002      	b.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a144:	bf00      	nop
 800a146:	e000      	b.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a14a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10b      	bne.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a152:	4b39      	ldr	r3, [pc, #228]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a156:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a15e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a162:	4a35      	ldr	r2, [pc, #212]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a164:	430b      	orrs	r3, r1
 800a166:	6553      	str	r3, [r2, #84]	; 0x54
 800a168:	e003      	b.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a16a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a16e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a17e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a182:	2300      	movs	r3, #0
 800a184:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a188:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a18c:	460b      	mov	r3, r1
 800a18e:	4313      	orrs	r3, r2
 800a190:	d058      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a196:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a19a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a19e:	d033      	beq.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a1a0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a1a4:	d82c      	bhi.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a1a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1aa:	d02f      	beq.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a1ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1b0:	d826      	bhi.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a1b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1b6:	d02b      	beq.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a1b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1bc:	d820      	bhi.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a1be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1c2:	d012      	beq.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a1c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1c8:	d81a      	bhi.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d022      	beq.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a1ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1d2:	d115      	bne.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1d8:	3308      	adds	r3, #8
 800a1da:	2100      	movs	r1, #0
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f000 fe3b 	bl	800ae58 <RCCEx_PLL2_Config>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a1e8:	e015      	b.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ee:	3328      	adds	r3, #40	; 0x28
 800a1f0:	2102      	movs	r1, #2
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 fee2 	bl	800afbc <RCCEx_PLL3_Config>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a1fe:	e00a      	b.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a200:	2301      	movs	r3, #1
 800a202:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a206:	e006      	b.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a208:	bf00      	nop
 800a20a:	e004      	b.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a20c:	bf00      	nop
 800a20e:	e002      	b.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a210:	bf00      	nop
 800a212:	e000      	b.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a214:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a216:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10e      	bne.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a21e:	4b06      	ldr	r3, [pc, #24]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a222:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a22a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a22e:	4a02      	ldr	r2, [pc, #8]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a230:	430b      	orrs	r3, r1
 800a232:	6593      	str	r3, [r2, #88]	; 0x58
 800a234:	e006      	b.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a236:	bf00      	nop
 800a238:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a23c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a240:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a250:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a254:	2300      	movs	r3, #0
 800a256:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a25a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a25e:	460b      	mov	r3, r1
 800a260:	4313      	orrs	r3, r2
 800a262:	d055      	beq.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a268:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a26c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a270:	d033      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a272:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a276:	d82c      	bhi.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a27c:	d02f      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a27e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a282:	d826      	bhi.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a284:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a288:	d02b      	beq.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a28a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a28e:	d820      	bhi.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a294:	d012      	beq.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a296:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a29a:	d81a      	bhi.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d022      	beq.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a2a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2a4:	d115      	bne.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2aa:	3308      	adds	r3, #8
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f000 fdd2 	bl	800ae58 <RCCEx_PLL2_Config>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a2ba:	e015      	b.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a2bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2c0:	3328      	adds	r3, #40	; 0x28
 800a2c2:	2102      	movs	r1, #2
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f000 fe79 	bl	800afbc <RCCEx_PLL3_Config>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a2d0:	e00a      	b.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a2d8:	e006      	b.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a2da:	bf00      	nop
 800a2dc:	e004      	b.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a2de:	bf00      	nop
 800a2e0:	e002      	b.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a2e2:	bf00      	nop
 800a2e4:	e000      	b.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a2e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d10b      	bne.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a2f0:	4ba0      	ldr	r3, [pc, #640]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a2f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2f4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a300:	4a9c      	ldr	r2, [pc, #624]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a302:	430b      	orrs	r3, r1
 800a304:	6593      	str	r3, [r2, #88]	; 0x58
 800a306:	e003      	b.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a308:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a30c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a318:	f002 0308 	and.w	r3, r2, #8
 800a31c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a320:	2300      	movs	r3, #0
 800a322:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a326:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a32a:	460b      	mov	r3, r1
 800a32c:	4313      	orrs	r3, r2
 800a32e:	d01e      	beq.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a33c:	d10c      	bne.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a33e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a342:	3328      	adds	r3, #40	; 0x28
 800a344:	2102      	movs	r1, #2
 800a346:	4618      	mov	r0, r3
 800a348:	f000 fe38 	bl	800afbc <RCCEx_PLL3_Config>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d002      	beq.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a358:	4b86      	ldr	r3, [pc, #536]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a35a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a35c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a368:	4a82      	ldr	r2, [pc, #520]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a36a:	430b      	orrs	r3, r1
 800a36c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a376:	f002 0310 	and.w	r3, r2, #16
 800a37a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a37e:	2300      	movs	r3, #0
 800a380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a384:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a388:	460b      	mov	r3, r1
 800a38a:	4313      	orrs	r3, r2
 800a38c:	d01e      	beq.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a39a:	d10c      	bne.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3a0:	3328      	adds	r3, #40	; 0x28
 800a3a2:	2102      	movs	r1, #2
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f000 fe09 	bl	800afbc <RCCEx_PLL3_Config>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d002      	beq.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a3b6:	4b6f      	ldr	r3, [pc, #444]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3c6:	4a6b      	ldr	r2, [pc, #428]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3c8:	430b      	orrs	r3, r1
 800a3ca:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a3d8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a3da:	2300      	movs	r3, #0
 800a3dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a3de:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	d03e      	beq.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a3e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a3f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3f4:	d022      	beq.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a3f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3fa:	d81b      	bhi.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d003      	beq.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a404:	d00b      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a406:	e015      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a40c:	3308      	adds	r3, #8
 800a40e:	2100      	movs	r1, #0
 800a410:	4618      	mov	r0, r3
 800a412:	f000 fd21 	bl	800ae58 <RCCEx_PLL2_Config>
 800a416:	4603      	mov	r3, r0
 800a418:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a41c:	e00f      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a422:	3328      	adds	r3, #40	; 0x28
 800a424:	2102      	movs	r1, #2
 800a426:	4618      	mov	r0, r3
 800a428:	f000 fdc8 	bl	800afbc <RCCEx_PLL3_Config>
 800a42c:	4603      	mov	r3, r0
 800a42e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a432:	e004      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a43a:	e000      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a43c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a43e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10b      	bne.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a446:	4b4b      	ldr	r3, [pc, #300]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a44a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a44e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a452:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a456:	4a47      	ldr	r2, [pc, #284]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a458:	430b      	orrs	r3, r1
 800a45a:	6593      	str	r3, [r2, #88]	; 0x58
 800a45c:	e003      	b.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a45e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a462:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a472:	673b      	str	r3, [r7, #112]	; 0x70
 800a474:	2300      	movs	r3, #0
 800a476:	677b      	str	r3, [r7, #116]	; 0x74
 800a478:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a47c:	460b      	mov	r3, r1
 800a47e:	4313      	orrs	r3, r2
 800a480:	d03b      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a48a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a48e:	d01f      	beq.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a490:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a494:	d818      	bhi.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a49a:	d003      	beq.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a49c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4a0:	d007      	beq.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a4a2:	e011      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4a4:	4b33      	ldr	r3, [pc, #204]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a8:	4a32      	ldr	r2, [pc, #200]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a4b0:	e00f      	b.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4b6:	3328      	adds	r3, #40	; 0x28
 800a4b8:	2101      	movs	r1, #1
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 fd7e 	bl	800afbc <RCCEx_PLL3_Config>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a4c6:	e004      	b.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a4ce:	e000      	b.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a4d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d10b      	bne.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a4da:	4b26      	ldr	r3, [pc, #152]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4de:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a4e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4ea:	4a22      	ldr	r2, [pc, #136]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4ec:	430b      	orrs	r3, r1
 800a4ee:	6553      	str	r3, [r2, #84]	; 0x54
 800a4f0:	e003      	b.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a502:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a506:	66bb      	str	r3, [r7, #104]	; 0x68
 800a508:	2300      	movs	r3, #0
 800a50a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a50c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a510:	460b      	mov	r3, r1
 800a512:	4313      	orrs	r3, r2
 800a514:	d034      	beq.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a51a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d003      	beq.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a524:	d007      	beq.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a526:	e011      	b.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a528:	4b12      	ldr	r3, [pc, #72]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52c:	4a11      	ldr	r2, [pc, #68]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a52e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a532:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a534:	e00e      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a53a:	3308      	adds	r3, #8
 800a53c:	2102      	movs	r1, #2
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 fc8a 	bl	800ae58 <RCCEx_PLL2_Config>
 800a544:	4603      	mov	r3, r0
 800a546:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a54a:	e003      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a552:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a554:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10d      	bne.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a55c:	4b05      	ldr	r3, [pc, #20]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a55e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a560:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a56a:	4a02      	ldr	r2, [pc, #8]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a56c:	430b      	orrs	r3, r1
 800a56e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a570:	e006      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a572:	bf00      	nop
 800a574:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a578:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a57c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a588:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a58c:	663b      	str	r3, [r7, #96]	; 0x60
 800a58e:	2300      	movs	r3, #0
 800a590:	667b      	str	r3, [r7, #100]	; 0x64
 800a592:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a596:	460b      	mov	r3, r1
 800a598:	4313      	orrs	r3, r2
 800a59a:	d00c      	beq.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a59c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5a0:	3328      	adds	r3, #40	; 0x28
 800a5a2:	2102      	movs	r1, #2
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f000 fd09 	bl	800afbc <RCCEx_PLL3_Config>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d002      	beq.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5be:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a5c2:	65bb      	str	r3, [r7, #88]	; 0x58
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5c8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	d036      	beq.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a5d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5dc:	d018      	beq.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a5de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5e2:	d811      	bhi.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a5e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5e8:	d014      	beq.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a5ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5ee:	d80b      	bhi.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d011      	beq.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a5f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5f8:	d106      	bne.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5fa:	4bb7      	ldr	r3, [pc, #732]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fe:	4ab6      	ldr	r2, [pc, #728]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a604:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a606:	e008      	b.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a60e:	e004      	b.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a610:	bf00      	nop
 800a612:	e002      	b.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a614:	bf00      	nop
 800a616:	e000      	b.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a61a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10a      	bne.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a622:	4bad      	ldr	r3, [pc, #692]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a626:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a62e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a630:	4aa9      	ldr	r2, [pc, #676]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a632:	430b      	orrs	r3, r1
 800a634:	6553      	str	r3, [r2, #84]	; 0x54
 800a636:	e003      	b.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a638:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a63c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a648:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a64c:	653b      	str	r3, [r7, #80]	; 0x50
 800a64e:	2300      	movs	r3, #0
 800a650:	657b      	str	r3, [r7, #84]	; 0x54
 800a652:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a656:	460b      	mov	r3, r1
 800a658:	4313      	orrs	r3, r2
 800a65a:	d009      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a65c:	4b9e      	ldr	r3, [pc, #632]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a65e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a660:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a66a:	4a9b      	ldr	r2, [pc, #620]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a66c:	430b      	orrs	r3, r1
 800a66e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a67c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a67e:	2300      	movs	r3, #0
 800a680:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a682:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a686:	460b      	mov	r3, r1
 800a688:	4313      	orrs	r3, r2
 800a68a:	d009      	beq.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a68c:	4b92      	ldr	r3, [pc, #584]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a68e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a690:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a698:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a69a:	4a8f      	ldr	r2, [pc, #572]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a69c:	430b      	orrs	r3, r1
 800a69e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a6ac:	643b      	str	r3, [r7, #64]	; 0x40
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	647b      	str	r3, [r7, #68]	; 0x44
 800a6b2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	d00e      	beq.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a6bc:	4b86      	ldr	r3, [pc, #536]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6be:	691b      	ldr	r3, [r3, #16]
 800a6c0:	4a85      	ldr	r2, [pc, #532]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a6c6:	6113      	str	r3, [r2, #16]
 800a6c8:	4b83      	ldr	r3, [pc, #524]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6ca:	6919      	ldr	r1, [r3, #16]
 800a6cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a6d4:	4a80      	ldr	r2, [pc, #512]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6d6:	430b      	orrs	r3, r1
 800a6d8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a6da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a6e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6ec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	d009      	beq.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a6f6:	4b78      	ldr	r3, [pc, #480]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6fa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a704:	4a74      	ldr	r2, [pc, #464]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a706:	430b      	orrs	r3, r1
 800a708:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a712:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a716:	633b      	str	r3, [r7, #48]	; 0x30
 800a718:	2300      	movs	r3, #0
 800a71a:	637b      	str	r3, [r7, #52]	; 0x34
 800a71c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a720:	460b      	mov	r3, r1
 800a722:	4313      	orrs	r3, r2
 800a724:	d00a      	beq.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a726:	4b6c      	ldr	r3, [pc, #432]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a72a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a736:	4a68      	ldr	r2, [pc, #416]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a738:	430b      	orrs	r3, r1
 800a73a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a73c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a744:	2100      	movs	r1, #0
 800a746:	62b9      	str	r1, [r7, #40]	; 0x28
 800a748:	f003 0301 	and.w	r3, r3, #1
 800a74c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a74e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a752:	460b      	mov	r3, r1
 800a754:	4313      	orrs	r3, r2
 800a756:	d011      	beq.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a75c:	3308      	adds	r3, #8
 800a75e:	2100      	movs	r1, #0
 800a760:	4618      	mov	r0, r3
 800a762:	f000 fb79 	bl	800ae58 <RCCEx_PLL2_Config>
 800a766:	4603      	mov	r3, r0
 800a768:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a76c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a770:	2b00      	cmp	r3, #0
 800a772:	d003      	beq.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a774:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a778:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a784:	2100      	movs	r1, #0
 800a786:	6239      	str	r1, [r7, #32]
 800a788:	f003 0302 	and.w	r3, r3, #2
 800a78c:	627b      	str	r3, [r7, #36]	; 0x24
 800a78e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a792:	460b      	mov	r3, r1
 800a794:	4313      	orrs	r3, r2
 800a796:	d011      	beq.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a79c:	3308      	adds	r3, #8
 800a79e:	2101      	movs	r1, #1
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f000 fb59 	bl	800ae58 <RCCEx_PLL2_Config>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a7ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d003      	beq.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	61b9      	str	r1, [r7, #24]
 800a7c8:	f003 0304 	and.w	r3, r3, #4
 800a7cc:	61fb      	str	r3, [r7, #28]
 800a7ce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	d011      	beq.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7dc:	3308      	adds	r3, #8
 800a7de:	2102      	movs	r1, #2
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 fb39 	bl	800ae58 <RCCEx_PLL2_Config>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a7ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d003      	beq.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a7fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a804:	2100      	movs	r1, #0
 800a806:	6139      	str	r1, [r7, #16]
 800a808:	f003 0308 	and.w	r3, r3, #8
 800a80c:	617b      	str	r3, [r7, #20]
 800a80e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a812:	460b      	mov	r3, r1
 800a814:	4313      	orrs	r3, r2
 800a816:	d011      	beq.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a81c:	3328      	adds	r3, #40	; 0x28
 800a81e:	2100      	movs	r1, #0
 800a820:	4618      	mov	r0, r3
 800a822:	f000 fbcb 	bl	800afbc <RCCEx_PLL3_Config>
 800a826:	4603      	mov	r3, r0
 800a828:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800a82c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a830:	2b00      	cmp	r3, #0
 800a832:	d003      	beq.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a834:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a838:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a844:	2100      	movs	r1, #0
 800a846:	60b9      	str	r1, [r7, #8]
 800a848:	f003 0310 	and.w	r3, r3, #16
 800a84c:	60fb      	str	r3, [r7, #12]
 800a84e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a852:	460b      	mov	r3, r1
 800a854:	4313      	orrs	r3, r2
 800a856:	d011      	beq.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a85c:	3328      	adds	r3, #40	; 0x28
 800a85e:	2101      	movs	r1, #1
 800a860:	4618      	mov	r0, r3
 800a862:	f000 fbab 	bl	800afbc <RCCEx_PLL3_Config>
 800a866:	4603      	mov	r3, r0
 800a868:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a86c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a870:	2b00      	cmp	r3, #0
 800a872:	d003      	beq.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a874:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a878:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a87c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a884:	2100      	movs	r1, #0
 800a886:	6039      	str	r1, [r7, #0]
 800a888:	f003 0320 	and.w	r3, r3, #32
 800a88c:	607b      	str	r3, [r7, #4]
 800a88e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a892:	460b      	mov	r3, r1
 800a894:	4313      	orrs	r3, r2
 800a896:	d011      	beq.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a89c:	3328      	adds	r3, #40	; 0x28
 800a89e:	2102      	movs	r1, #2
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 fb8b 	bl	800afbc <RCCEx_PLL3_Config>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a8ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d003      	beq.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800a8bc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d101      	bne.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	e000      	b.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8d6:	bf00      	nop
 800a8d8:	58024400 	.word	0x58024400

0800a8dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a8e0:	f7fe fe00 	bl	80094e4 <HAL_RCC_GetHCLKFreq>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	4b06      	ldr	r3, [pc, #24]	; (800a900 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a8e8:	6a1b      	ldr	r3, [r3, #32]
 800a8ea:	091b      	lsrs	r3, r3, #4
 800a8ec:	f003 0307 	and.w	r3, r3, #7
 800a8f0:	4904      	ldr	r1, [pc, #16]	; (800a904 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a8f2:	5ccb      	ldrb	r3, [r1, r3]
 800a8f4:	f003 031f 	and.w	r3, r3, #31
 800a8f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	58024400 	.word	0x58024400
 800a904:	0800f340 	.word	0x0800f340

0800a908 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a908:	b480      	push	{r7}
 800a90a:	b089      	sub	sp, #36	; 0x24
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a910:	4ba1      	ldr	r3, [pc, #644]	; (800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a914:	f003 0303 	and.w	r3, r3, #3
 800a918:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a91a:	4b9f      	ldr	r3, [pc, #636]	; (800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a91e:	0b1b      	lsrs	r3, r3, #12
 800a920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a924:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a926:	4b9c      	ldr	r3, [pc, #624]	; (800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92a:	091b      	lsrs	r3, r3, #4
 800a92c:	f003 0301 	and.w	r3, r3, #1
 800a930:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a932:	4b99      	ldr	r3, [pc, #612]	; (800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a936:	08db      	lsrs	r3, r3, #3
 800a938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a93c:	693a      	ldr	r2, [r7, #16]
 800a93e:	fb02 f303 	mul.w	r3, r2, r3
 800a942:	ee07 3a90 	vmov	s15, r3
 800a946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a94a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	2b00      	cmp	r3, #0
 800a952:	f000 8111 	beq.w	800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	2b02      	cmp	r3, #2
 800a95a:	f000 8083 	beq.w	800aa64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	2b02      	cmp	r3, #2
 800a962:	f200 80a1 	bhi.w	800aaa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d003      	beq.n	800a974 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d056      	beq.n	800aa20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a972:	e099      	b.n	800aaa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a974:	4b88      	ldr	r3, [pc, #544]	; (800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 0320 	and.w	r3, r3, #32
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d02d      	beq.n	800a9dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a980:	4b85      	ldr	r3, [pc, #532]	; (800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	08db      	lsrs	r3, r3, #3
 800a986:	f003 0303 	and.w	r3, r3, #3
 800a98a:	4a84      	ldr	r2, [pc, #528]	; (800ab9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a98c:	fa22 f303 	lsr.w	r3, r2, r3
 800a990:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	ee07 3a90 	vmov	s15, r3
 800a998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	ee07 3a90 	vmov	s15, r3
 800a9a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9aa:	4b7b      	ldr	r3, [pc, #492]	; (800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9b2:	ee07 3a90 	vmov	s15, r3
 800a9b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9be:	eddf 5a78 	vldr	s11, [pc, #480]	; 800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a9da:	e087      	b.n	800aaec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	ee07 3a90 	vmov	s15, r3
 800a9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800aba4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a9ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ee:	4b6a      	ldr	r3, [pc, #424]	; (800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9f6:	ee07 3a90 	vmov	s15, r3
 800a9fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa02:	eddf 5a67 	vldr	s11, [pc, #412]	; 800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa1e:	e065      	b.n	800aaec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	ee07 3a90 	vmov	s15, r3
 800aa26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800aba8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa32:	4b59      	ldr	r3, [pc, #356]	; (800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa3a:	ee07 3a90 	vmov	s15, r3
 800aa3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa42:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa46:	eddf 5a56 	vldr	s11, [pc, #344]	; 800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa62:	e043      	b.n	800aaec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	ee07 3a90 	vmov	s15, r3
 800aa6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800abac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aa72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa76:	4b48      	ldr	r3, [pc, #288]	; (800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa7e:	ee07 3a90 	vmov	s15, r3
 800aa82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa86:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaa6:	e021      	b.n	800aaec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	ee07 3a90 	vmov	s15, r3
 800aaae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aba8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaba:	4b37      	ldr	r3, [pc, #220]	; (800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aac2:	ee07 3a90 	vmov	s15, r3
 800aac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaca:	ed97 6a03 	vldr	s12, [r7, #12]
 800aace:	eddf 5a34 	vldr	s11, [pc, #208]	; 800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aaec:	4b2a      	ldr	r3, [pc, #168]	; (800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf0:	0a5b      	lsrs	r3, r3, #9
 800aaf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaf6:	ee07 3a90 	vmov	s15, r3
 800aafa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aafe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab06:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab12:	ee17 2a90 	vmov	r2, s15
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ab1a:	4b1f      	ldr	r3, [pc, #124]	; (800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1e:	0c1b      	lsrs	r3, r3, #16
 800ab20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab24:	ee07 3a90 	vmov	s15, r3
 800ab28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab34:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab40:	ee17 2a90 	vmov	r2, s15
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ab48:	4b13      	ldr	r3, [pc, #76]	; (800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4c:	0e1b      	lsrs	r3, r3, #24
 800ab4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab52:	ee07 3a90 	vmov	s15, r3
 800ab56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab62:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab6e:	ee17 2a90 	vmov	r2, s15
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ab76:	e008      	b.n	800ab8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2200      	movs	r2, #0
 800ab82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	609a      	str	r2, [r3, #8]
}
 800ab8a:	bf00      	nop
 800ab8c:	3724      	adds	r7, #36	; 0x24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop
 800ab98:	58024400 	.word	0x58024400
 800ab9c:	03d09000 	.word	0x03d09000
 800aba0:	46000000 	.word	0x46000000
 800aba4:	4c742400 	.word	0x4c742400
 800aba8:	4a742400 	.word	0x4a742400
 800abac:	4af42400 	.word	0x4af42400

0800abb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b089      	sub	sp, #36	; 0x24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abb8:	4ba1      	ldr	r3, [pc, #644]	; (800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abbc:	f003 0303 	and.w	r3, r3, #3
 800abc0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800abc2:	4b9f      	ldr	r3, [pc, #636]	; (800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc6:	0d1b      	lsrs	r3, r3, #20
 800abc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abcc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800abce:	4b9c      	ldr	r3, [pc, #624]	; (800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd2:	0a1b      	lsrs	r3, r3, #8
 800abd4:	f003 0301 	and.w	r3, r3, #1
 800abd8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800abda:	4b99      	ldr	r3, [pc, #612]	; (800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abde:	08db      	lsrs	r3, r3, #3
 800abe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abe4:	693a      	ldr	r2, [r7, #16]
 800abe6:	fb02 f303 	mul.w	r3, r2, r3
 800abea:	ee07 3a90 	vmov	s15, r3
 800abee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	f000 8111 	beq.w	800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	f000 8083 	beq.w	800ad0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	f200 80a1 	bhi.w	800ad50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d003      	beq.n	800ac1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d056      	beq.n	800acc8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ac1a:	e099      	b.n	800ad50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac1c:	4b88      	ldr	r3, [pc, #544]	; (800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f003 0320 	and.w	r3, r3, #32
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d02d      	beq.n	800ac84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac28:	4b85      	ldr	r3, [pc, #532]	; (800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	08db      	lsrs	r3, r3, #3
 800ac2e:	f003 0303 	and.w	r3, r3, #3
 800ac32:	4a84      	ldr	r2, [pc, #528]	; (800ae44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ac34:	fa22 f303 	lsr.w	r3, r2, r3
 800ac38:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	ee07 3a90 	vmov	s15, r3
 800ac40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	ee07 3a90 	vmov	s15, r3
 800ac4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac52:	4b7b      	ldr	r3, [pc, #492]	; (800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac5a:	ee07 3a90 	vmov	s15, r3
 800ac5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac66:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac82:	e087      	b.n	800ad94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	ee07 3a90 	vmov	s15, r3
 800ac8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ae4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ac92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac96:	4b6a      	ldr	r3, [pc, #424]	; (800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac9e:	ee07 3a90 	vmov	s15, r3
 800aca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aca6:	ed97 6a03 	vldr	s12, [r7, #12]
 800acaa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acc6:	e065      	b.n	800ad94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	ee07 3a90 	vmov	s15, r3
 800acce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ae50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800acd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acda:	4b59      	ldr	r3, [pc, #356]	; (800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ace2:	ee07 3a90 	vmov	s15, r3
 800ace6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acea:	ed97 6a03 	vldr	s12, [r7, #12]
 800acee:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad0a:	e043      	b.n	800ad94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	ee07 3a90 	vmov	s15, r3
 800ad12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ae54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ad1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad1e:	4b48      	ldr	r3, [pc, #288]	; (800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad26:	ee07 3a90 	vmov	s15, r3
 800ad2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad32:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad4e:	e021      	b.n	800ad94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	ee07 3a90 	vmov	s15, r3
 800ad56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ae50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad62:	4b37      	ldr	r3, [pc, #220]	; (800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad6a:	ee07 3a90 	vmov	s15, r3
 800ad6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad76:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ad94:	4b2a      	ldr	r3, [pc, #168]	; (800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad98:	0a5b      	lsrs	r3, r3, #9
 800ad9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad9e:	ee07 3a90 	vmov	s15, r3
 800ada2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ada6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adae:	edd7 6a07 	vldr	s13, [r7, #28]
 800adb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adba:	ee17 2a90 	vmov	r2, s15
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800adc2:	4b1f      	ldr	r3, [pc, #124]	; (800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc6:	0c1b      	lsrs	r3, r3, #16
 800adc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adcc:	ee07 3a90 	vmov	s15, r3
 800add0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800add4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800add8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800addc:	edd7 6a07 	vldr	s13, [r7, #28]
 800ade0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ade4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ade8:	ee17 2a90 	vmov	r2, s15
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800adf0:	4b13      	ldr	r3, [pc, #76]	; (800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf4:	0e1b      	lsrs	r3, r3, #24
 800adf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adfa:	ee07 3a90 	vmov	s15, r3
 800adfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae16:	ee17 2a90 	vmov	r2, s15
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae1e:	e008      	b.n	800ae32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	609a      	str	r2, [r3, #8]
}
 800ae32:	bf00      	nop
 800ae34:	3724      	adds	r7, #36	; 0x24
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	58024400 	.word	0x58024400
 800ae44:	03d09000 	.word	0x03d09000
 800ae48:	46000000 	.word	0x46000000
 800ae4c:	4c742400 	.word	0x4c742400
 800ae50:	4a742400 	.word	0x4a742400
 800ae54:	4af42400 	.word	0x4af42400

0800ae58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae62:	2300      	movs	r3, #0
 800ae64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ae66:	4b53      	ldr	r3, [pc, #332]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800ae68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae6a:	f003 0303 	and.w	r3, r3, #3
 800ae6e:	2b03      	cmp	r3, #3
 800ae70:	d101      	bne.n	800ae76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	e099      	b.n	800afaa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ae76:	4b4f      	ldr	r3, [pc, #316]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a4e      	ldr	r2, [pc, #312]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800ae7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ae80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae82:	f7f9 ffe9 	bl	8004e58 <HAL_GetTick>
 800ae86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae88:	e008      	b.n	800ae9c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ae8a:	f7f9 ffe5 	bl	8004e58 <HAL_GetTick>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	1ad3      	subs	r3, r2, r3
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d901      	bls.n	800ae9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae98:	2303      	movs	r3, #3
 800ae9a:	e086      	b.n	800afaa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae9c:	4b45      	ldr	r3, [pc, #276]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d1f0      	bne.n	800ae8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aea8:	4b42      	ldr	r3, [pc, #264]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800aeaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	031b      	lsls	r3, r3, #12
 800aeb6:	493f      	ldr	r1, [pc, #252]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	628b      	str	r3, [r1, #40]	; 0x28
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	3b01      	subs	r3, #1
 800aec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	3b01      	subs	r3, #1
 800aecc:	025b      	lsls	r3, r3, #9
 800aece:	b29b      	uxth	r3, r3
 800aed0:	431a      	orrs	r2, r3
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	3b01      	subs	r3, #1
 800aed8:	041b      	lsls	r3, r3, #16
 800aeda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aede:	431a      	orrs	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	691b      	ldr	r3, [r3, #16]
 800aee4:	3b01      	subs	r3, #1
 800aee6:	061b      	lsls	r3, r3, #24
 800aee8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aeec:	4931      	ldr	r1, [pc, #196]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800aeee:	4313      	orrs	r3, r2
 800aef0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aef2:	4b30      	ldr	r3, [pc, #192]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800aef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	695b      	ldr	r3, [r3, #20]
 800aefe:	492d      	ldr	r1, [pc, #180]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800af00:	4313      	orrs	r3, r2
 800af02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800af04:	4b2b      	ldr	r3, [pc, #172]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800af06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af08:	f023 0220 	bic.w	r2, r3, #32
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	699b      	ldr	r3, [r3, #24]
 800af10:	4928      	ldr	r1, [pc, #160]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800af12:	4313      	orrs	r3, r2
 800af14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800af16:	4b27      	ldr	r3, [pc, #156]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800af18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1a:	4a26      	ldr	r2, [pc, #152]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800af1c:	f023 0310 	bic.w	r3, r3, #16
 800af20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800af22:	4b24      	ldr	r3, [pc, #144]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800af24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af26:	4b24      	ldr	r3, [pc, #144]	; (800afb8 <RCCEx_PLL2_Config+0x160>)
 800af28:	4013      	ands	r3, r2
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	69d2      	ldr	r2, [r2, #28]
 800af2e:	00d2      	lsls	r2, r2, #3
 800af30:	4920      	ldr	r1, [pc, #128]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800af32:	4313      	orrs	r3, r2
 800af34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800af36:	4b1f      	ldr	r3, [pc, #124]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800af38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3a:	4a1e      	ldr	r2, [pc, #120]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800af3c:	f043 0310 	orr.w	r3, r3, #16
 800af40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d106      	bne.n	800af56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800af48:	4b1a      	ldr	r3, [pc, #104]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800af4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af4c:	4a19      	ldr	r2, [pc, #100]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800af4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af52:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af54:	e00f      	b.n	800af76 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d106      	bne.n	800af6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800af5c:	4b15      	ldr	r3, [pc, #84]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800af5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af60:	4a14      	ldr	r2, [pc, #80]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800af62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af66:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af68:	e005      	b.n	800af76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800af6a:	4b12      	ldr	r3, [pc, #72]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800af6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af6e:	4a11      	ldr	r2, [pc, #68]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800af70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800af76:	4b0f      	ldr	r3, [pc, #60]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a0e      	ldr	r2, [pc, #56]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800af7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af82:	f7f9 ff69 	bl	8004e58 <HAL_GetTick>
 800af86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af88:	e008      	b.n	800af9c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800af8a:	f7f9 ff65 	bl	8004e58 <HAL_GetTick>
 800af8e:	4602      	mov	r2, r0
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	1ad3      	subs	r3, r2, r3
 800af94:	2b02      	cmp	r3, #2
 800af96:	d901      	bls.n	800af9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af98:	2303      	movs	r3, #3
 800af9a:	e006      	b.n	800afaa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af9c:	4b05      	ldr	r3, [pc, #20]	; (800afb4 <RCCEx_PLL2_Config+0x15c>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d0f0      	beq.n	800af8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800afa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	58024400 	.word	0x58024400
 800afb8:	ffff0007 	.word	0xffff0007

0800afbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800afc6:	2300      	movs	r3, #0
 800afc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800afca:	4b53      	ldr	r3, [pc, #332]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800afcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afce:	f003 0303 	and.w	r3, r3, #3
 800afd2:	2b03      	cmp	r3, #3
 800afd4:	d101      	bne.n	800afda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	e099      	b.n	800b10e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800afda:	4b4f      	ldr	r3, [pc, #316]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a4e      	ldr	r2, [pc, #312]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800afe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afe6:	f7f9 ff37 	bl	8004e58 <HAL_GetTick>
 800afea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800afec:	e008      	b.n	800b000 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800afee:	f7f9 ff33 	bl	8004e58 <HAL_GetTick>
 800aff2:	4602      	mov	r2, r0
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	1ad3      	subs	r3, r2, r3
 800aff8:	2b02      	cmp	r3, #2
 800affa:	d901      	bls.n	800b000 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800affc:	2303      	movs	r3, #3
 800affe:	e086      	b.n	800b10e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b000:	4b45      	ldr	r3, [pc, #276]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1f0      	bne.n	800afee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b00c:	4b42      	ldr	r3, [pc, #264]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b010:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	051b      	lsls	r3, r3, #20
 800b01a:	493f      	ldr	r1, [pc, #252]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b01c:	4313      	orrs	r3, r2
 800b01e:	628b      	str	r3, [r1, #40]	; 0x28
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	3b01      	subs	r3, #1
 800b026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	3b01      	subs	r3, #1
 800b030:	025b      	lsls	r3, r3, #9
 800b032:	b29b      	uxth	r3, r3
 800b034:	431a      	orrs	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	3b01      	subs	r3, #1
 800b03c:	041b      	lsls	r3, r3, #16
 800b03e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b042:	431a      	orrs	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	691b      	ldr	r3, [r3, #16]
 800b048:	3b01      	subs	r3, #1
 800b04a:	061b      	lsls	r3, r3, #24
 800b04c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b050:	4931      	ldr	r1, [pc, #196]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b052:	4313      	orrs	r3, r2
 800b054:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b056:	4b30      	ldr	r3, [pc, #192]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	695b      	ldr	r3, [r3, #20]
 800b062:	492d      	ldr	r1, [pc, #180]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b064:	4313      	orrs	r3, r2
 800b066:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b068:	4b2b      	ldr	r3, [pc, #172]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b06c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	4928      	ldr	r1, [pc, #160]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b076:	4313      	orrs	r3, r2
 800b078:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b07a:	4b27      	ldr	r3, [pc, #156]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07e:	4a26      	ldr	r2, [pc, #152]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b086:	4b24      	ldr	r3, [pc, #144]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b08a:	4b24      	ldr	r3, [pc, #144]	; (800b11c <RCCEx_PLL3_Config+0x160>)
 800b08c:	4013      	ands	r3, r2
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	69d2      	ldr	r2, [r2, #28]
 800b092:	00d2      	lsls	r2, r2, #3
 800b094:	4920      	ldr	r1, [pc, #128]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b096:	4313      	orrs	r3, r2
 800b098:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b09a:	4b1f      	ldr	r3, [pc, #124]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09e:	4a1e      	ldr	r2, [pc, #120]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b0a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d106      	bne.n	800b0ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b0ac:	4b1a      	ldr	r3, [pc, #104]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b0:	4a19      	ldr	r2, [pc, #100]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b0b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b0b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0b8:	e00f      	b.n	800b0da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d106      	bne.n	800b0ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b0c0:	4b15      	ldr	r3, [pc, #84]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c4:	4a14      	ldr	r2, [pc, #80]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b0c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b0ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0cc:	e005      	b.n	800b0da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b0ce:	4b12      	ldr	r3, [pc, #72]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d2:	4a11      	ldr	r2, [pc, #68]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b0d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b0da:	4b0f      	ldr	r3, [pc, #60]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a0e      	ldr	r2, [pc, #56]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b0e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0e6:	f7f9 feb7 	bl	8004e58 <HAL_GetTick>
 800b0ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b0ec:	e008      	b.n	800b100 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b0ee:	f7f9 feb3 	bl	8004e58 <HAL_GetTick>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	1ad3      	subs	r3, r2, r3
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	d901      	bls.n	800b100 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	e006      	b.n	800b10e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b100:	4b05      	ldr	r3, [pc, #20]	; (800b118 <RCCEx_PLL3_Config+0x15c>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d0f0      	beq.n	800b0ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	58024400 	.word	0x58024400
 800b11c:	ffff0007 	.word	0xffff0007

0800b120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d101      	bne.n	800b132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b12e:	2301      	movs	r3, #1
 800b130:	e049      	b.n	800b1c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d106      	bne.n	800b14c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f7f9 fbf8 	bl	800493c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2202      	movs	r2, #2
 800b150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	3304      	adds	r3, #4
 800b15c:	4619      	mov	r1, r3
 800b15e:	4610      	mov	r0, r2
 800b160:	f000 feb8 	bl	800bed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
	...

0800b1d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b085      	sub	sp, #20
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d001      	beq.n	800b1e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e05e      	b.n	800b2a6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2202      	movs	r2, #2
 800b1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	68da      	ldr	r2, [r3, #12]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f042 0201 	orr.w	r2, r2, #1
 800b1fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a2b      	ldr	r2, [pc, #172]	; (800b2b4 <HAL_TIM_Base_Start_IT+0xe4>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d02c      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x94>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b212:	d027      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x94>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a27      	ldr	r2, [pc, #156]	; (800b2b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d022      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x94>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4a26      	ldr	r2, [pc, #152]	; (800b2bc <HAL_TIM_Base_Start_IT+0xec>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d01d      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x94>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a24      	ldr	r2, [pc, #144]	; (800b2c0 <HAL_TIM_Base_Start_IT+0xf0>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d018      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x94>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a23      	ldr	r2, [pc, #140]	; (800b2c4 <HAL_TIM_Base_Start_IT+0xf4>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d013      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x94>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a21      	ldr	r2, [pc, #132]	; (800b2c8 <HAL_TIM_Base_Start_IT+0xf8>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d00e      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x94>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a20      	ldr	r2, [pc, #128]	; (800b2cc <HAL_TIM_Base_Start_IT+0xfc>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d009      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x94>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a1e      	ldr	r2, [pc, #120]	; (800b2d0 <HAL_TIM_Base_Start_IT+0x100>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d004      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x94>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a1d      	ldr	r2, [pc, #116]	; (800b2d4 <HAL_TIM_Base_Start_IT+0x104>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d115      	bne.n	800b290 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	689a      	ldr	r2, [r3, #8]
 800b26a:	4b1b      	ldr	r3, [pc, #108]	; (800b2d8 <HAL_TIM_Base_Start_IT+0x108>)
 800b26c:	4013      	ands	r3, r2
 800b26e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2b06      	cmp	r3, #6
 800b274:	d015      	beq.n	800b2a2 <HAL_TIM_Base_Start_IT+0xd2>
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b27c:	d011      	beq.n	800b2a2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f042 0201 	orr.w	r2, r2, #1
 800b28c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b28e:	e008      	b.n	800b2a2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f042 0201 	orr.w	r2, r2, #1
 800b29e:	601a      	str	r2, [r3, #0]
 800b2a0:	e000      	b.n	800b2a4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3714      	adds	r7, #20
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	40010000 	.word	0x40010000
 800b2b8:	40000400 	.word	0x40000400
 800b2bc:	40000800 	.word	0x40000800
 800b2c0:	40000c00 	.word	0x40000c00
 800b2c4:	40010400 	.word	0x40010400
 800b2c8:	40001800 	.word	0x40001800
 800b2cc:	40014000 	.word	0x40014000
 800b2d0:	4000e000 	.word	0x4000e000
 800b2d4:	4000e400 	.word	0x4000e400
 800b2d8:	00010007 	.word	0x00010007

0800b2dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d101      	bne.n	800b2ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e049      	b.n	800b382 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d106      	bne.n	800b308 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f7f9 fae0 	bl	80048c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2202      	movs	r2, #2
 800b30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	3304      	adds	r3, #4
 800b318:	4619      	mov	r1, r3
 800b31a:	4610      	mov	r0, r2
 800b31c:	f000 fdda 	bl	800bed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2201      	movs	r2, #1
 800b354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
	...

0800b38c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d109      	bne.n	800b3b0 <HAL_TIM_PWM_Start+0x24>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	bf14      	ite	ne
 800b3a8:	2301      	movne	r3, #1
 800b3aa:	2300      	moveq	r3, #0
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	e03c      	b.n	800b42a <HAL_TIM_PWM_Start+0x9e>
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	2b04      	cmp	r3, #4
 800b3b4:	d109      	bne.n	800b3ca <HAL_TIM_PWM_Start+0x3e>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	bf14      	ite	ne
 800b3c2:	2301      	movne	r3, #1
 800b3c4:	2300      	moveq	r3, #0
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	e02f      	b.n	800b42a <HAL_TIM_PWM_Start+0x9e>
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	2b08      	cmp	r3, #8
 800b3ce:	d109      	bne.n	800b3e4 <HAL_TIM_PWM_Start+0x58>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	bf14      	ite	ne
 800b3dc:	2301      	movne	r3, #1
 800b3de:	2300      	moveq	r3, #0
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	e022      	b.n	800b42a <HAL_TIM_PWM_Start+0x9e>
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	2b0c      	cmp	r3, #12
 800b3e8:	d109      	bne.n	800b3fe <HAL_TIM_PWM_Start+0x72>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	bf14      	ite	ne
 800b3f6:	2301      	movne	r3, #1
 800b3f8:	2300      	moveq	r3, #0
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	e015      	b.n	800b42a <HAL_TIM_PWM_Start+0x9e>
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	2b10      	cmp	r3, #16
 800b402:	d109      	bne.n	800b418 <HAL_TIM_PWM_Start+0x8c>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	bf14      	ite	ne
 800b410:	2301      	movne	r3, #1
 800b412:	2300      	moveq	r3, #0
 800b414:	b2db      	uxtb	r3, r3
 800b416:	e008      	b.n	800b42a <HAL_TIM_PWM_Start+0x9e>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	2b01      	cmp	r3, #1
 800b422:	bf14      	ite	ne
 800b424:	2301      	movne	r3, #1
 800b426:	2300      	moveq	r3, #0
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d001      	beq.n	800b432 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	e0ab      	b.n	800b58a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d104      	bne.n	800b442 <HAL_TIM_PWM_Start+0xb6>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2202      	movs	r2, #2
 800b43c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b440:	e023      	b.n	800b48a <HAL_TIM_PWM_Start+0xfe>
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	2b04      	cmp	r3, #4
 800b446:	d104      	bne.n	800b452 <HAL_TIM_PWM_Start+0xc6>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2202      	movs	r2, #2
 800b44c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b450:	e01b      	b.n	800b48a <HAL_TIM_PWM_Start+0xfe>
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	2b08      	cmp	r3, #8
 800b456:	d104      	bne.n	800b462 <HAL_TIM_PWM_Start+0xd6>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2202      	movs	r2, #2
 800b45c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b460:	e013      	b.n	800b48a <HAL_TIM_PWM_Start+0xfe>
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	2b0c      	cmp	r3, #12
 800b466:	d104      	bne.n	800b472 <HAL_TIM_PWM_Start+0xe6>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2202      	movs	r2, #2
 800b46c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b470:	e00b      	b.n	800b48a <HAL_TIM_PWM_Start+0xfe>
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	2b10      	cmp	r3, #16
 800b476:	d104      	bne.n	800b482 <HAL_TIM_PWM_Start+0xf6>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2202      	movs	r2, #2
 800b47c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b480:	e003      	b.n	800b48a <HAL_TIM_PWM_Start+0xfe>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2202      	movs	r2, #2
 800b486:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2201      	movs	r2, #1
 800b490:	6839      	ldr	r1, [r7, #0]
 800b492:	4618      	mov	r0, r3
 800b494:	f001 f938 	bl	800c708 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a3d      	ldr	r2, [pc, #244]	; (800b594 <HAL_TIM_PWM_Start+0x208>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d013      	beq.n	800b4ca <HAL_TIM_PWM_Start+0x13e>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a3c      	ldr	r2, [pc, #240]	; (800b598 <HAL_TIM_PWM_Start+0x20c>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d00e      	beq.n	800b4ca <HAL_TIM_PWM_Start+0x13e>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a3a      	ldr	r2, [pc, #232]	; (800b59c <HAL_TIM_PWM_Start+0x210>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d009      	beq.n	800b4ca <HAL_TIM_PWM_Start+0x13e>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a39      	ldr	r2, [pc, #228]	; (800b5a0 <HAL_TIM_PWM_Start+0x214>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d004      	beq.n	800b4ca <HAL_TIM_PWM_Start+0x13e>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a37      	ldr	r2, [pc, #220]	; (800b5a4 <HAL_TIM_PWM_Start+0x218>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d101      	bne.n	800b4ce <HAL_TIM_PWM_Start+0x142>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e000      	b.n	800b4d0 <HAL_TIM_PWM_Start+0x144>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d007      	beq.n	800b4e4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a2a      	ldr	r2, [pc, #168]	; (800b594 <HAL_TIM_PWM_Start+0x208>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d02c      	beq.n	800b548 <HAL_TIM_PWM_Start+0x1bc>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4f6:	d027      	beq.n	800b548 <HAL_TIM_PWM_Start+0x1bc>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a2a      	ldr	r2, [pc, #168]	; (800b5a8 <HAL_TIM_PWM_Start+0x21c>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d022      	beq.n	800b548 <HAL_TIM_PWM_Start+0x1bc>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a29      	ldr	r2, [pc, #164]	; (800b5ac <HAL_TIM_PWM_Start+0x220>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d01d      	beq.n	800b548 <HAL_TIM_PWM_Start+0x1bc>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a27      	ldr	r2, [pc, #156]	; (800b5b0 <HAL_TIM_PWM_Start+0x224>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d018      	beq.n	800b548 <HAL_TIM_PWM_Start+0x1bc>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a1f      	ldr	r2, [pc, #124]	; (800b598 <HAL_TIM_PWM_Start+0x20c>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d013      	beq.n	800b548 <HAL_TIM_PWM_Start+0x1bc>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a23      	ldr	r2, [pc, #140]	; (800b5b4 <HAL_TIM_PWM_Start+0x228>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d00e      	beq.n	800b548 <HAL_TIM_PWM_Start+0x1bc>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a1b      	ldr	r2, [pc, #108]	; (800b59c <HAL_TIM_PWM_Start+0x210>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d009      	beq.n	800b548 <HAL_TIM_PWM_Start+0x1bc>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a1f      	ldr	r2, [pc, #124]	; (800b5b8 <HAL_TIM_PWM_Start+0x22c>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d004      	beq.n	800b548 <HAL_TIM_PWM_Start+0x1bc>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a1e      	ldr	r2, [pc, #120]	; (800b5bc <HAL_TIM_PWM_Start+0x230>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d115      	bne.n	800b574 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	689a      	ldr	r2, [r3, #8]
 800b54e:	4b1c      	ldr	r3, [pc, #112]	; (800b5c0 <HAL_TIM_PWM_Start+0x234>)
 800b550:	4013      	ands	r3, r2
 800b552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2b06      	cmp	r3, #6
 800b558:	d015      	beq.n	800b586 <HAL_TIM_PWM_Start+0x1fa>
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b560:	d011      	beq.n	800b586 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f042 0201 	orr.w	r2, r2, #1
 800b570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b572:	e008      	b.n	800b586 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f042 0201 	orr.w	r2, r2, #1
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	e000      	b.n	800b588 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b586:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	40010000 	.word	0x40010000
 800b598:	40010400 	.word	0x40010400
 800b59c:	40014000 	.word	0x40014000
 800b5a0:	40014400 	.word	0x40014400
 800b5a4:	40014800 	.word	0x40014800
 800b5a8:	40000400 	.word	0x40000400
 800b5ac:	40000800 	.word	0x40000800
 800b5b0:	40000c00 	.word	0x40000c00
 800b5b4:	40001800 	.word	0x40001800
 800b5b8:	4000e000 	.word	0x4000e000
 800b5bc:	4000e400 	.word	0x4000e400
 800b5c0:	00010007 	.word	0x00010007

0800b5c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b086      	sub	sp, #24
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e08f      	b.n	800b6f8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d106      	bne.n	800b5f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f7f9 f83d 	bl	800466c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2202      	movs	r2, #2
 800b5f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	6899      	ldr	r1, [r3, #8]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	4b3e      	ldr	r3, [pc, #248]	; (800b700 <HAL_TIM_Encoder_Init+0x13c>)
 800b606:	400b      	ands	r3, r1
 800b608:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	3304      	adds	r3, #4
 800b612:	4619      	mov	r1, r3
 800b614:	4610      	mov	r0, r2
 800b616:	f000 fc5d 	bl	800bed4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	699b      	ldr	r3, [r3, #24]
 800b628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	6a1b      	ldr	r3, [r3, #32]
 800b630:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	697a      	ldr	r2, [r7, #20]
 800b638:	4313      	orrs	r3, r2
 800b63a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b63c:	693a      	ldr	r2, [r7, #16]
 800b63e:	4b31      	ldr	r3, [pc, #196]	; (800b704 <HAL_TIM_Encoder_Init+0x140>)
 800b640:	4013      	ands	r3, r2
 800b642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	689a      	ldr	r2, [r3, #8]
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	699b      	ldr	r3, [r3, #24]
 800b64c:	021b      	lsls	r3, r3, #8
 800b64e:	4313      	orrs	r3, r2
 800b650:	693a      	ldr	r2, [r7, #16]
 800b652:	4313      	orrs	r3, r2
 800b654:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b656:	693a      	ldr	r2, [r7, #16]
 800b658:	4b2b      	ldr	r3, [pc, #172]	; (800b708 <HAL_TIM_Encoder_Init+0x144>)
 800b65a:	4013      	ands	r3, r2
 800b65c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b65e:	693a      	ldr	r2, [r7, #16]
 800b660:	4b2a      	ldr	r3, [pc, #168]	; (800b70c <HAL_TIM_Encoder_Init+0x148>)
 800b662:	4013      	ands	r3, r2
 800b664:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	68da      	ldr	r2, [r3, #12]
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	69db      	ldr	r3, [r3, #28]
 800b66e:	021b      	lsls	r3, r3, #8
 800b670:	4313      	orrs	r3, r2
 800b672:	693a      	ldr	r2, [r7, #16]
 800b674:	4313      	orrs	r3, r2
 800b676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	011a      	lsls	r2, r3, #4
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	6a1b      	ldr	r3, [r3, #32]
 800b682:	031b      	lsls	r3, r3, #12
 800b684:	4313      	orrs	r3, r2
 800b686:	693a      	ldr	r2, [r7, #16]
 800b688:	4313      	orrs	r3, r2
 800b68a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b692:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b69a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	685a      	ldr	r2, [r3, #4]
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	695b      	ldr	r3, [r3, #20]
 800b6a4:	011b      	lsls	r3, r3, #4
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	697a      	ldr	r2, [r7, #20]
 800b6b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	693a      	ldr	r2, [r7, #16]
 800b6bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3718      	adds	r7, #24
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	fffebff8 	.word	0xfffebff8
 800b704:	fffffcfc 	.word	0xfffffcfc
 800b708:	fffff3f3 	.word	0xfffff3f3
 800b70c:	ffff0f0f 	.word	0xffff0f0f

0800b710 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b720:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b728:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b730:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b738:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d110      	bne.n	800b762 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b740:	7bfb      	ldrb	r3, [r7, #15]
 800b742:	2b01      	cmp	r3, #1
 800b744:	d102      	bne.n	800b74c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b746:	7b7b      	ldrb	r3, [r7, #13]
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d001      	beq.n	800b750 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b74c:	2301      	movs	r3, #1
 800b74e:	e069      	b.n	800b824 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2202      	movs	r2, #2
 800b754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2202      	movs	r2, #2
 800b75c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b760:	e031      	b.n	800b7c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	2b04      	cmp	r3, #4
 800b766:	d110      	bne.n	800b78a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b768:	7bbb      	ldrb	r3, [r7, #14]
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d102      	bne.n	800b774 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b76e:	7b3b      	ldrb	r3, [r7, #12]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d001      	beq.n	800b778 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	e055      	b.n	800b824 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2202      	movs	r2, #2
 800b77c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2202      	movs	r2, #2
 800b784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b788:	e01d      	b.n	800b7c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b78a:	7bfb      	ldrb	r3, [r7, #15]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d108      	bne.n	800b7a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b790:	7bbb      	ldrb	r3, [r7, #14]
 800b792:	2b01      	cmp	r3, #1
 800b794:	d105      	bne.n	800b7a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b796:	7b7b      	ldrb	r3, [r7, #13]
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d102      	bne.n	800b7a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b79c:	7b3b      	ldrb	r3, [r7, #12]
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d001      	beq.n	800b7a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e03e      	b.n	800b824 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2202      	movs	r2, #2
 800b7aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2202      	movs	r2, #2
 800b7b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2202      	movs	r2, #2
 800b7ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2202      	movs	r2, #2
 800b7c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d003      	beq.n	800b7d4 <HAL_TIM_Encoder_Start+0xc4>
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	2b04      	cmp	r3, #4
 800b7d0:	d008      	beq.n	800b7e4 <HAL_TIM_Encoder_Start+0xd4>
 800b7d2:	e00f      	b.n	800b7f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	2100      	movs	r1, #0
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f000 ff93 	bl	800c708 <TIM_CCxChannelCmd>
      break;
 800b7e2:	e016      	b.n	800b812 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	2104      	movs	r1, #4
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f000 ff8b 	bl	800c708 <TIM_CCxChannelCmd>
      break;
 800b7f2:	e00e      	b.n	800b812 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	2100      	movs	r1, #0
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f000 ff83 	bl	800c708 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2201      	movs	r2, #1
 800b808:	2104      	movs	r1, #4
 800b80a:	4618      	mov	r0, r3
 800b80c:	f000 ff7c 	bl	800c708 <TIM_CCxChannelCmd>
      break;
 800b810:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f042 0201 	orr.w	r2, r2, #1
 800b820:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b822:	2300      	movs	r3, #0
}
 800b824:	4618      	mov	r0, r3
 800b826:	3710      	adds	r7, #16
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	f003 0302 	and.w	r3, r3, #2
 800b83e:	2b02      	cmp	r3, #2
 800b840:	d122      	bne.n	800b888 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	f003 0302 	and.w	r3, r3, #2
 800b84c:	2b02      	cmp	r3, #2
 800b84e:	d11b      	bne.n	800b888 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f06f 0202 	mvn.w	r2, #2
 800b858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2201      	movs	r2, #1
 800b85e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	699b      	ldr	r3, [r3, #24]
 800b866:	f003 0303 	and.w	r3, r3, #3
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d003      	beq.n	800b876 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 fb12 	bl	800be98 <HAL_TIM_IC_CaptureCallback>
 800b874:	e005      	b.n	800b882 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 fb04 	bl	800be84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f000 fb15 	bl	800beac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	691b      	ldr	r3, [r3, #16]
 800b88e:	f003 0304 	and.w	r3, r3, #4
 800b892:	2b04      	cmp	r3, #4
 800b894:	d122      	bne.n	800b8dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	f003 0304 	and.w	r3, r3, #4
 800b8a0:	2b04      	cmp	r3, #4
 800b8a2:	d11b      	bne.n	800b8dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f06f 0204 	mvn.w	r2, #4
 800b8ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2202      	movs	r2, #2
 800b8b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	699b      	ldr	r3, [r3, #24]
 800b8ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d003      	beq.n	800b8ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fae8 	bl	800be98 <HAL_TIM_IC_CaptureCallback>
 800b8c8:	e005      	b.n	800b8d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fada 	bl	800be84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 faeb 	bl	800beac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	691b      	ldr	r3, [r3, #16]
 800b8e2:	f003 0308 	and.w	r3, r3, #8
 800b8e6:	2b08      	cmp	r3, #8
 800b8e8:	d122      	bne.n	800b930 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	f003 0308 	and.w	r3, r3, #8
 800b8f4:	2b08      	cmp	r3, #8
 800b8f6:	d11b      	bne.n	800b930 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f06f 0208 	mvn.w	r2, #8
 800b900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2204      	movs	r2, #4
 800b906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	69db      	ldr	r3, [r3, #28]
 800b90e:	f003 0303 	and.w	r3, r3, #3
 800b912:	2b00      	cmp	r3, #0
 800b914:	d003      	beq.n	800b91e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 fabe 	bl	800be98 <HAL_TIM_IC_CaptureCallback>
 800b91c:	e005      	b.n	800b92a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 fab0 	bl	800be84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 fac1 	bl	800beac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	691b      	ldr	r3, [r3, #16]
 800b936:	f003 0310 	and.w	r3, r3, #16
 800b93a:	2b10      	cmp	r3, #16
 800b93c:	d122      	bne.n	800b984 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	f003 0310 	and.w	r3, r3, #16
 800b948:	2b10      	cmp	r3, #16
 800b94a:	d11b      	bne.n	800b984 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f06f 0210 	mvn.w	r2, #16
 800b954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2208      	movs	r2, #8
 800b95a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	69db      	ldr	r3, [r3, #28]
 800b962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b966:	2b00      	cmp	r3, #0
 800b968:	d003      	beq.n	800b972 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fa94 	bl	800be98 <HAL_TIM_IC_CaptureCallback>
 800b970:	e005      	b.n	800b97e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 fa86 	bl	800be84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 fa97 	bl	800beac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	691b      	ldr	r3, [r3, #16]
 800b98a:	f003 0301 	and.w	r3, r3, #1
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d10e      	bne.n	800b9b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	f003 0301 	and.w	r3, r3, #1
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d107      	bne.n	800b9b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f06f 0201 	mvn.w	r2, #1
 800b9a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f7f5 fd48 	bl	8001440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	691b      	ldr	r3, [r3, #16]
 800b9b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9ba:	2b80      	cmp	r3, #128	; 0x80
 800b9bc:	d10e      	bne.n	800b9dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9c8:	2b80      	cmp	r3, #128	; 0x80
 800b9ca:	d107      	bne.n	800b9dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b9d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f001 f802 	bl	800c9e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9ea:	d10e      	bne.n	800ba0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9f6:	2b80      	cmp	r3, #128	; 0x80
 800b9f8:	d107      	bne.n	800ba0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ba02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 fff5 	bl	800c9f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	691b      	ldr	r3, [r3, #16]
 800ba10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba14:	2b40      	cmp	r3, #64	; 0x40
 800ba16:	d10e      	bne.n	800ba36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba22:	2b40      	cmp	r3, #64	; 0x40
 800ba24:	d107      	bne.n	800ba36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ba2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fa45 	bl	800bec0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	691b      	ldr	r3, [r3, #16]
 800ba3c:	f003 0320 	and.w	r3, r3, #32
 800ba40:	2b20      	cmp	r3, #32
 800ba42:	d10e      	bne.n	800ba62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	f003 0320 	and.w	r3, r3, #32
 800ba4e:	2b20      	cmp	r3, #32
 800ba50:	d107      	bne.n	800ba62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f06f 0220 	mvn.w	r2, #32
 800ba5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 ffb5 	bl	800c9cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba62:	bf00      	nop
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
	...

0800ba6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b086      	sub	sp, #24
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d101      	bne.n	800ba8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ba86:	2302      	movs	r3, #2
 800ba88:	e0ff      	b.n	800bc8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2b14      	cmp	r3, #20
 800ba96:	f200 80f0 	bhi.w	800bc7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ba9a:	a201      	add	r2, pc, #4	; (adr r2, 800baa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ba9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa0:	0800baf5 	.word	0x0800baf5
 800baa4:	0800bc7b 	.word	0x0800bc7b
 800baa8:	0800bc7b 	.word	0x0800bc7b
 800baac:	0800bc7b 	.word	0x0800bc7b
 800bab0:	0800bb35 	.word	0x0800bb35
 800bab4:	0800bc7b 	.word	0x0800bc7b
 800bab8:	0800bc7b 	.word	0x0800bc7b
 800babc:	0800bc7b 	.word	0x0800bc7b
 800bac0:	0800bb77 	.word	0x0800bb77
 800bac4:	0800bc7b 	.word	0x0800bc7b
 800bac8:	0800bc7b 	.word	0x0800bc7b
 800bacc:	0800bc7b 	.word	0x0800bc7b
 800bad0:	0800bbb7 	.word	0x0800bbb7
 800bad4:	0800bc7b 	.word	0x0800bc7b
 800bad8:	0800bc7b 	.word	0x0800bc7b
 800badc:	0800bc7b 	.word	0x0800bc7b
 800bae0:	0800bbf9 	.word	0x0800bbf9
 800bae4:	0800bc7b 	.word	0x0800bc7b
 800bae8:	0800bc7b 	.word	0x0800bc7b
 800baec:	0800bc7b 	.word	0x0800bc7b
 800baf0:	0800bc39 	.word	0x0800bc39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68b9      	ldr	r1, [r7, #8]
 800bafa:	4618      	mov	r0, r3
 800bafc:	f000 fa90 	bl	800c020 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	699a      	ldr	r2, [r3, #24]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f042 0208 	orr.w	r2, r2, #8
 800bb0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	699a      	ldr	r2, [r3, #24]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f022 0204 	bic.w	r2, r2, #4
 800bb1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	6999      	ldr	r1, [r3, #24]
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	691a      	ldr	r2, [r3, #16]
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	430a      	orrs	r2, r1
 800bb30:	619a      	str	r2, [r3, #24]
      break;
 800bb32:	e0a5      	b.n	800bc80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68b9      	ldr	r1, [r7, #8]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f000 fb00 	bl	800c140 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	699a      	ldr	r2, [r3, #24]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	699a      	ldr	r2, [r3, #24]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6999      	ldr	r1, [r3, #24]
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	021a      	lsls	r2, r3, #8
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	430a      	orrs	r2, r1
 800bb72:	619a      	str	r2, [r3, #24]
      break;
 800bb74:	e084      	b.n	800bc80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	68b9      	ldr	r1, [r7, #8]
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f000 fb69 	bl	800c254 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	69da      	ldr	r2, [r3, #28]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f042 0208 	orr.w	r2, r2, #8
 800bb90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	69da      	ldr	r2, [r3, #28]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f022 0204 	bic.w	r2, r2, #4
 800bba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	69d9      	ldr	r1, [r3, #28]
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	691a      	ldr	r2, [r3, #16]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	430a      	orrs	r2, r1
 800bbb2:	61da      	str	r2, [r3, #28]
      break;
 800bbb4:	e064      	b.n	800bc80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	68b9      	ldr	r1, [r7, #8]
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f000 fbd1 	bl	800c364 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	69da      	ldr	r2, [r3, #28]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	69da      	ldr	r2, [r3, #28]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	69d9      	ldr	r1, [r3, #28]
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	691b      	ldr	r3, [r3, #16]
 800bbec:	021a      	lsls	r2, r3, #8
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	430a      	orrs	r2, r1
 800bbf4:	61da      	str	r2, [r3, #28]
      break;
 800bbf6:	e043      	b.n	800bc80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	68b9      	ldr	r1, [r7, #8]
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f000 fc1a 	bl	800c438 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f042 0208 	orr.w	r2, r2, #8
 800bc12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f022 0204 	bic.w	r2, r2, #4
 800bc22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	691a      	ldr	r2, [r3, #16]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	430a      	orrs	r2, r1
 800bc34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bc36:	e023      	b.n	800bc80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68b9      	ldr	r1, [r7, #8]
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f000 fc5e 	bl	800c500 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	691b      	ldr	r3, [r3, #16]
 800bc6e:	021a      	lsls	r2, r3, #8
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	430a      	orrs	r2, r1
 800bc76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bc78:	e002      	b.n	800bc80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	75fb      	strb	r3, [r7, #23]
      break;
 800bc7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bc88:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3718      	adds	r7, #24
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop

0800bc94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d101      	bne.n	800bcb0 <HAL_TIM_ConfigClockSource+0x1c>
 800bcac:	2302      	movs	r3, #2
 800bcae:	e0dc      	b.n	800be6a <HAL_TIM_ConfigClockSource+0x1d6>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2202      	movs	r2, #2
 800bcbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	689b      	ldr	r3, [r3, #8]
 800bcc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bcc8:	68ba      	ldr	r2, [r7, #8]
 800bcca:	4b6a      	ldr	r3, [pc, #424]	; (800be74 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bccc:	4013      	ands	r3, r2
 800bcce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bcd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a64      	ldr	r2, [pc, #400]	; (800be78 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	f000 80a9 	beq.w	800be3e <HAL_TIM_ConfigClockSource+0x1aa>
 800bcec:	4a62      	ldr	r2, [pc, #392]	; (800be78 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	f200 80ae 	bhi.w	800be50 <HAL_TIM_ConfigClockSource+0x1bc>
 800bcf4:	4a61      	ldr	r2, [pc, #388]	; (800be7c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	f000 80a1 	beq.w	800be3e <HAL_TIM_ConfigClockSource+0x1aa>
 800bcfc:	4a5f      	ldr	r2, [pc, #380]	; (800be7c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	f200 80a6 	bhi.w	800be50 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd04:	4a5e      	ldr	r2, [pc, #376]	; (800be80 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	f000 8099 	beq.w	800be3e <HAL_TIM_ConfigClockSource+0x1aa>
 800bd0c:	4a5c      	ldr	r2, [pc, #368]	; (800be80 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	f200 809e 	bhi.w	800be50 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bd18:	f000 8091 	beq.w	800be3e <HAL_TIM_ConfigClockSource+0x1aa>
 800bd1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bd20:	f200 8096 	bhi.w	800be50 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd28:	f000 8089 	beq.w	800be3e <HAL_TIM_ConfigClockSource+0x1aa>
 800bd2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd30:	f200 808e 	bhi.w	800be50 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd38:	d03e      	beq.n	800bdb8 <HAL_TIM_ConfigClockSource+0x124>
 800bd3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd3e:	f200 8087 	bhi.w	800be50 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd46:	f000 8086 	beq.w	800be56 <HAL_TIM_ConfigClockSource+0x1c2>
 800bd4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd4e:	d87f      	bhi.n	800be50 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd50:	2b70      	cmp	r3, #112	; 0x70
 800bd52:	d01a      	beq.n	800bd8a <HAL_TIM_ConfigClockSource+0xf6>
 800bd54:	2b70      	cmp	r3, #112	; 0x70
 800bd56:	d87b      	bhi.n	800be50 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd58:	2b60      	cmp	r3, #96	; 0x60
 800bd5a:	d050      	beq.n	800bdfe <HAL_TIM_ConfigClockSource+0x16a>
 800bd5c:	2b60      	cmp	r3, #96	; 0x60
 800bd5e:	d877      	bhi.n	800be50 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd60:	2b50      	cmp	r3, #80	; 0x50
 800bd62:	d03c      	beq.n	800bdde <HAL_TIM_ConfigClockSource+0x14a>
 800bd64:	2b50      	cmp	r3, #80	; 0x50
 800bd66:	d873      	bhi.n	800be50 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd68:	2b40      	cmp	r3, #64	; 0x40
 800bd6a:	d058      	beq.n	800be1e <HAL_TIM_ConfigClockSource+0x18a>
 800bd6c:	2b40      	cmp	r3, #64	; 0x40
 800bd6e:	d86f      	bhi.n	800be50 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd70:	2b30      	cmp	r3, #48	; 0x30
 800bd72:	d064      	beq.n	800be3e <HAL_TIM_ConfigClockSource+0x1aa>
 800bd74:	2b30      	cmp	r3, #48	; 0x30
 800bd76:	d86b      	bhi.n	800be50 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd78:	2b20      	cmp	r3, #32
 800bd7a:	d060      	beq.n	800be3e <HAL_TIM_ConfigClockSource+0x1aa>
 800bd7c:	2b20      	cmp	r3, #32
 800bd7e:	d867      	bhi.n	800be50 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d05c      	beq.n	800be3e <HAL_TIM_ConfigClockSource+0x1aa>
 800bd84:	2b10      	cmp	r3, #16
 800bd86:	d05a      	beq.n	800be3e <HAL_TIM_ConfigClockSource+0x1aa>
 800bd88:	e062      	b.n	800be50 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6818      	ldr	r0, [r3, #0]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	6899      	ldr	r1, [r3, #8]
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	685a      	ldr	r2, [r3, #4]
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	f000 fc95 	bl	800c6c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bdac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	68ba      	ldr	r2, [r7, #8]
 800bdb4:	609a      	str	r2, [r3, #8]
      break;
 800bdb6:	e04f      	b.n	800be58 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6818      	ldr	r0, [r3, #0]
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	6899      	ldr	r1, [r3, #8]
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	685a      	ldr	r2, [r3, #4]
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	f000 fc7e 	bl	800c6c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	689a      	ldr	r2, [r3, #8]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bdda:	609a      	str	r2, [r3, #8]
      break;
 800bddc:	e03c      	b.n	800be58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6818      	ldr	r0, [r3, #0]
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	6859      	ldr	r1, [r3, #4]
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	461a      	mov	r2, r3
 800bdec:	f000 fbee 	bl	800c5cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2150      	movs	r1, #80	; 0x50
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f000 fc48 	bl	800c68c <TIM_ITRx_SetConfig>
      break;
 800bdfc:	e02c      	b.n	800be58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6818      	ldr	r0, [r3, #0]
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	6859      	ldr	r1, [r3, #4]
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	461a      	mov	r2, r3
 800be0c:	f000 fc0d 	bl	800c62a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2160      	movs	r1, #96	; 0x60
 800be16:	4618      	mov	r0, r3
 800be18:	f000 fc38 	bl	800c68c <TIM_ITRx_SetConfig>
      break;
 800be1c:	e01c      	b.n	800be58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6818      	ldr	r0, [r3, #0]
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	6859      	ldr	r1, [r3, #4]
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	68db      	ldr	r3, [r3, #12]
 800be2a:	461a      	mov	r2, r3
 800be2c:	f000 fbce 	bl	800c5cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	2140      	movs	r1, #64	; 0x40
 800be36:	4618      	mov	r0, r3
 800be38:	f000 fc28 	bl	800c68c <TIM_ITRx_SetConfig>
      break;
 800be3c:	e00c      	b.n	800be58 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4619      	mov	r1, r3
 800be48:	4610      	mov	r0, r2
 800be4a:	f000 fc1f 	bl	800c68c <TIM_ITRx_SetConfig>
      break;
 800be4e:	e003      	b.n	800be58 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800be50:	2301      	movs	r3, #1
 800be52:	73fb      	strb	r3, [r7, #15]
      break;
 800be54:	e000      	b.n	800be58 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800be56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2201      	movs	r2, #1
 800be5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2200      	movs	r2, #0
 800be64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be68:	7bfb      	ldrb	r3, [r7, #15]
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3710      	adds	r7, #16
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	ffceff88 	.word	0xffceff88
 800be78:	00100040 	.word	0x00100040
 800be7c:	00100030 	.word	0x00100030
 800be80:	00100020 	.word	0x00100020

0800be84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800be8c:	bf00      	nop
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bea0:	bf00      	nop
 800bea2:	370c      	adds	r7, #12
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr

0800beac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800beb4:	bf00      	nop
 800beb6:	370c      	adds	r7, #12
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b083      	sub	sp, #12
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bec8:	bf00      	nop
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b085      	sub	sp, #20
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4a44      	ldr	r2, [pc, #272]	; (800bff8 <TIM_Base_SetConfig+0x124>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d013      	beq.n	800bf14 <TIM_Base_SetConfig+0x40>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bef2:	d00f      	beq.n	800bf14 <TIM_Base_SetConfig+0x40>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4a41      	ldr	r2, [pc, #260]	; (800bffc <TIM_Base_SetConfig+0x128>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d00b      	beq.n	800bf14 <TIM_Base_SetConfig+0x40>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4a40      	ldr	r2, [pc, #256]	; (800c000 <TIM_Base_SetConfig+0x12c>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d007      	beq.n	800bf14 <TIM_Base_SetConfig+0x40>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4a3f      	ldr	r2, [pc, #252]	; (800c004 <TIM_Base_SetConfig+0x130>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d003      	beq.n	800bf14 <TIM_Base_SetConfig+0x40>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a3e      	ldr	r2, [pc, #248]	; (800c008 <TIM_Base_SetConfig+0x134>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d108      	bne.n	800bf26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	4313      	orrs	r3, r2
 800bf24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	4a33      	ldr	r2, [pc, #204]	; (800bff8 <TIM_Base_SetConfig+0x124>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d027      	beq.n	800bf7e <TIM_Base_SetConfig+0xaa>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf34:	d023      	beq.n	800bf7e <TIM_Base_SetConfig+0xaa>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4a30      	ldr	r2, [pc, #192]	; (800bffc <TIM_Base_SetConfig+0x128>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d01f      	beq.n	800bf7e <TIM_Base_SetConfig+0xaa>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4a2f      	ldr	r2, [pc, #188]	; (800c000 <TIM_Base_SetConfig+0x12c>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d01b      	beq.n	800bf7e <TIM_Base_SetConfig+0xaa>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4a2e      	ldr	r2, [pc, #184]	; (800c004 <TIM_Base_SetConfig+0x130>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d017      	beq.n	800bf7e <TIM_Base_SetConfig+0xaa>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4a2d      	ldr	r2, [pc, #180]	; (800c008 <TIM_Base_SetConfig+0x134>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d013      	beq.n	800bf7e <TIM_Base_SetConfig+0xaa>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	4a2c      	ldr	r2, [pc, #176]	; (800c00c <TIM_Base_SetConfig+0x138>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d00f      	beq.n	800bf7e <TIM_Base_SetConfig+0xaa>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4a2b      	ldr	r2, [pc, #172]	; (800c010 <TIM_Base_SetConfig+0x13c>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d00b      	beq.n	800bf7e <TIM_Base_SetConfig+0xaa>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	4a2a      	ldr	r2, [pc, #168]	; (800c014 <TIM_Base_SetConfig+0x140>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d007      	beq.n	800bf7e <TIM_Base_SetConfig+0xaa>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	4a29      	ldr	r2, [pc, #164]	; (800c018 <TIM_Base_SetConfig+0x144>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d003      	beq.n	800bf7e <TIM_Base_SetConfig+0xaa>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	4a28      	ldr	r2, [pc, #160]	; (800c01c <TIM_Base_SetConfig+0x148>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d108      	bne.n	800bf90 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	68fa      	ldr	r2, [r7, #12]
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	695b      	ldr	r3, [r3, #20]
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	68fa      	ldr	r2, [r7, #12]
 800bfa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	689a      	ldr	r2, [r3, #8]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	4a10      	ldr	r2, [pc, #64]	; (800bff8 <TIM_Base_SetConfig+0x124>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d00f      	beq.n	800bfdc <TIM_Base_SetConfig+0x108>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	4a12      	ldr	r2, [pc, #72]	; (800c008 <TIM_Base_SetConfig+0x134>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d00b      	beq.n	800bfdc <TIM_Base_SetConfig+0x108>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4a11      	ldr	r2, [pc, #68]	; (800c00c <TIM_Base_SetConfig+0x138>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d007      	beq.n	800bfdc <TIM_Base_SetConfig+0x108>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4a10      	ldr	r2, [pc, #64]	; (800c010 <TIM_Base_SetConfig+0x13c>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d003      	beq.n	800bfdc <TIM_Base_SetConfig+0x108>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a0f      	ldr	r2, [pc, #60]	; (800c014 <TIM_Base_SetConfig+0x140>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d103      	bne.n	800bfe4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	691a      	ldr	r2, [r3, #16]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	615a      	str	r2, [r3, #20]
}
 800bfea:	bf00      	nop
 800bfec:	3714      	adds	r7, #20
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr
 800bff6:	bf00      	nop
 800bff8:	40010000 	.word	0x40010000
 800bffc:	40000400 	.word	0x40000400
 800c000:	40000800 	.word	0x40000800
 800c004:	40000c00 	.word	0x40000c00
 800c008:	40010400 	.word	0x40010400
 800c00c:	40014000 	.word	0x40014000
 800c010:	40014400 	.word	0x40014400
 800c014:	40014800 	.word	0x40014800
 800c018:	4000e000 	.word	0x4000e000
 800c01c:	4000e400 	.word	0x4000e400

0800c020 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c020:	b480      	push	{r7}
 800c022:	b087      	sub	sp, #28
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6a1b      	ldr	r3, [r3, #32]
 800c02e:	f023 0201 	bic.w	r2, r3, #1
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6a1b      	ldr	r3, [r3, #32]
 800c03a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	699b      	ldr	r3, [r3, #24]
 800c046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c048:	68fa      	ldr	r2, [r7, #12]
 800c04a:	4b37      	ldr	r3, [pc, #220]	; (800c128 <TIM_OC1_SetConfig+0x108>)
 800c04c:	4013      	ands	r3, r2
 800c04e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f023 0303 	bic.w	r3, r3, #3
 800c056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	68fa      	ldr	r2, [r7, #12]
 800c05e:	4313      	orrs	r3, r2
 800c060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	f023 0302 	bic.w	r3, r3, #2
 800c068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	697a      	ldr	r2, [r7, #20]
 800c070:	4313      	orrs	r3, r2
 800c072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4a2d      	ldr	r2, [pc, #180]	; (800c12c <TIM_OC1_SetConfig+0x10c>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d00f      	beq.n	800c09c <TIM_OC1_SetConfig+0x7c>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4a2c      	ldr	r2, [pc, #176]	; (800c130 <TIM_OC1_SetConfig+0x110>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d00b      	beq.n	800c09c <TIM_OC1_SetConfig+0x7c>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	4a2b      	ldr	r2, [pc, #172]	; (800c134 <TIM_OC1_SetConfig+0x114>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d007      	beq.n	800c09c <TIM_OC1_SetConfig+0x7c>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	4a2a      	ldr	r2, [pc, #168]	; (800c138 <TIM_OC1_SetConfig+0x118>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d003      	beq.n	800c09c <TIM_OC1_SetConfig+0x7c>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	4a29      	ldr	r2, [pc, #164]	; (800c13c <TIM_OC1_SetConfig+0x11c>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d10c      	bne.n	800c0b6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	f023 0308 	bic.w	r3, r3, #8
 800c0a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	697a      	ldr	r2, [r7, #20]
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	f023 0304 	bic.w	r3, r3, #4
 800c0b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4a1c      	ldr	r2, [pc, #112]	; (800c12c <TIM_OC1_SetConfig+0x10c>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d00f      	beq.n	800c0de <TIM_OC1_SetConfig+0xbe>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	4a1b      	ldr	r2, [pc, #108]	; (800c130 <TIM_OC1_SetConfig+0x110>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d00b      	beq.n	800c0de <TIM_OC1_SetConfig+0xbe>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4a1a      	ldr	r2, [pc, #104]	; (800c134 <TIM_OC1_SetConfig+0x114>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d007      	beq.n	800c0de <TIM_OC1_SetConfig+0xbe>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4a19      	ldr	r2, [pc, #100]	; (800c138 <TIM_OC1_SetConfig+0x118>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d003      	beq.n	800c0de <TIM_OC1_SetConfig+0xbe>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	4a18      	ldr	r2, [pc, #96]	; (800c13c <TIM_OC1_SetConfig+0x11c>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d111      	bne.n	800c102 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c0ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	695b      	ldr	r3, [r3, #20]
 800c0f2:	693a      	ldr	r2, [r7, #16]
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	699b      	ldr	r3, [r3, #24]
 800c0fc:	693a      	ldr	r2, [r7, #16]
 800c0fe:	4313      	orrs	r3, r2
 800c100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	693a      	ldr	r2, [r7, #16]
 800c106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	68fa      	ldr	r2, [r7, #12]
 800c10c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	685a      	ldr	r2, [r3, #4]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	697a      	ldr	r2, [r7, #20]
 800c11a:	621a      	str	r2, [r3, #32]
}
 800c11c:	bf00      	nop
 800c11e:	371c      	adds	r7, #28
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr
 800c128:	fffeff8f 	.word	0xfffeff8f
 800c12c:	40010000 	.word	0x40010000
 800c130:	40010400 	.word	0x40010400
 800c134:	40014000 	.word	0x40014000
 800c138:	40014400 	.word	0x40014400
 800c13c:	40014800 	.word	0x40014800

0800c140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c140:	b480      	push	{r7}
 800c142:	b087      	sub	sp, #28
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6a1b      	ldr	r3, [r3, #32]
 800c14e:	f023 0210 	bic.w	r2, r3, #16
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6a1b      	ldr	r3, [r3, #32]
 800c15a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	699b      	ldr	r3, [r3, #24]
 800c166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	4b34      	ldr	r3, [pc, #208]	; (800c23c <TIM_OC2_SetConfig+0xfc>)
 800c16c:	4013      	ands	r3, r2
 800c16e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	021b      	lsls	r3, r3, #8
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	4313      	orrs	r3, r2
 800c182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	f023 0320 	bic.w	r3, r3, #32
 800c18a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	689b      	ldr	r3, [r3, #8]
 800c190:	011b      	lsls	r3, r3, #4
 800c192:	697a      	ldr	r2, [r7, #20]
 800c194:	4313      	orrs	r3, r2
 800c196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4a29      	ldr	r2, [pc, #164]	; (800c240 <TIM_OC2_SetConfig+0x100>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d003      	beq.n	800c1a8 <TIM_OC2_SetConfig+0x68>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	4a28      	ldr	r2, [pc, #160]	; (800c244 <TIM_OC2_SetConfig+0x104>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d10d      	bne.n	800c1c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	68db      	ldr	r3, [r3, #12]
 800c1b4:	011b      	lsls	r3, r3, #4
 800c1b6:	697a      	ldr	r2, [r7, #20]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a1e      	ldr	r2, [pc, #120]	; (800c240 <TIM_OC2_SetConfig+0x100>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d00f      	beq.n	800c1ec <TIM_OC2_SetConfig+0xac>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a1d      	ldr	r2, [pc, #116]	; (800c244 <TIM_OC2_SetConfig+0x104>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d00b      	beq.n	800c1ec <TIM_OC2_SetConfig+0xac>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a1c      	ldr	r2, [pc, #112]	; (800c248 <TIM_OC2_SetConfig+0x108>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d007      	beq.n	800c1ec <TIM_OC2_SetConfig+0xac>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a1b      	ldr	r2, [pc, #108]	; (800c24c <TIM_OC2_SetConfig+0x10c>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d003      	beq.n	800c1ec <TIM_OC2_SetConfig+0xac>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	4a1a      	ldr	r2, [pc, #104]	; (800c250 <TIM_OC2_SetConfig+0x110>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d113      	bne.n	800c214 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c1f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c1fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	695b      	ldr	r3, [r3, #20]
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	693a      	ldr	r2, [r7, #16]
 800c204:	4313      	orrs	r3, r2
 800c206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	699b      	ldr	r3, [r3, #24]
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	693a      	ldr	r2, [r7, #16]
 800c210:	4313      	orrs	r3, r2
 800c212:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	693a      	ldr	r2, [r7, #16]
 800c218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	685a      	ldr	r2, [r3, #4]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	697a      	ldr	r2, [r7, #20]
 800c22c:	621a      	str	r2, [r3, #32]
}
 800c22e:	bf00      	nop
 800c230:	371c      	adds	r7, #28
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	feff8fff 	.word	0xfeff8fff
 800c240:	40010000 	.word	0x40010000
 800c244:	40010400 	.word	0x40010400
 800c248:	40014000 	.word	0x40014000
 800c24c:	40014400 	.word	0x40014400
 800c250:	40014800 	.word	0x40014800

0800c254 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c254:	b480      	push	{r7}
 800c256:	b087      	sub	sp, #28
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6a1b      	ldr	r3, [r3, #32]
 800c262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a1b      	ldr	r3, [r3, #32]
 800c26e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	69db      	ldr	r3, [r3, #28]
 800c27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	4b33      	ldr	r3, [pc, #204]	; (800c34c <TIM_OC3_SetConfig+0xf8>)
 800c280:	4013      	ands	r3, r2
 800c282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f023 0303 	bic.w	r3, r3, #3
 800c28a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	4313      	orrs	r3, r2
 800c294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c29c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	689b      	ldr	r3, [r3, #8]
 800c2a2:	021b      	lsls	r3, r3, #8
 800c2a4:	697a      	ldr	r2, [r7, #20]
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a28      	ldr	r2, [pc, #160]	; (800c350 <TIM_OC3_SetConfig+0xfc>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d003      	beq.n	800c2ba <TIM_OC3_SetConfig+0x66>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a27      	ldr	r2, [pc, #156]	; (800c354 <TIM_OC3_SetConfig+0x100>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d10d      	bne.n	800c2d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c2c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	021b      	lsls	r3, r3, #8
 800c2c8:	697a      	ldr	r2, [r7, #20]
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c2d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4a1d      	ldr	r2, [pc, #116]	; (800c350 <TIM_OC3_SetConfig+0xfc>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d00f      	beq.n	800c2fe <TIM_OC3_SetConfig+0xaa>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4a1c      	ldr	r2, [pc, #112]	; (800c354 <TIM_OC3_SetConfig+0x100>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d00b      	beq.n	800c2fe <TIM_OC3_SetConfig+0xaa>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	4a1b      	ldr	r2, [pc, #108]	; (800c358 <TIM_OC3_SetConfig+0x104>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d007      	beq.n	800c2fe <TIM_OC3_SetConfig+0xaa>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4a1a      	ldr	r2, [pc, #104]	; (800c35c <TIM_OC3_SetConfig+0x108>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d003      	beq.n	800c2fe <TIM_OC3_SetConfig+0xaa>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	4a19      	ldr	r2, [pc, #100]	; (800c360 <TIM_OC3_SetConfig+0x10c>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d113      	bne.n	800c326 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c30c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	695b      	ldr	r3, [r3, #20]
 800c312:	011b      	lsls	r3, r3, #4
 800c314:	693a      	ldr	r2, [r7, #16]
 800c316:	4313      	orrs	r3, r2
 800c318:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	699b      	ldr	r3, [r3, #24]
 800c31e:	011b      	lsls	r3, r3, #4
 800c320:	693a      	ldr	r2, [r7, #16]
 800c322:	4313      	orrs	r3, r2
 800c324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	693a      	ldr	r2, [r7, #16]
 800c32a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	685a      	ldr	r2, [r3, #4]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	697a      	ldr	r2, [r7, #20]
 800c33e:	621a      	str	r2, [r3, #32]
}
 800c340:	bf00      	nop
 800c342:	371c      	adds	r7, #28
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr
 800c34c:	fffeff8f 	.word	0xfffeff8f
 800c350:	40010000 	.word	0x40010000
 800c354:	40010400 	.word	0x40010400
 800c358:	40014000 	.word	0x40014000
 800c35c:	40014400 	.word	0x40014400
 800c360:	40014800 	.word	0x40014800

0800c364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c364:	b480      	push	{r7}
 800c366:	b087      	sub	sp, #28
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6a1b      	ldr	r3, [r3, #32]
 800c372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6a1b      	ldr	r3, [r3, #32]
 800c37e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	69db      	ldr	r3, [r3, #28]
 800c38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	4b24      	ldr	r3, [pc, #144]	; (800c420 <TIM_OC4_SetConfig+0xbc>)
 800c390:	4013      	ands	r3, r2
 800c392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c39a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	021b      	lsls	r3, r3, #8
 800c3a2:	68fa      	ldr	r2, [r7, #12]
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c3ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	031b      	lsls	r3, r3, #12
 800c3b6:	693a      	ldr	r2, [r7, #16]
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4a19      	ldr	r2, [pc, #100]	; (800c424 <TIM_OC4_SetConfig+0xc0>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d00f      	beq.n	800c3e4 <TIM_OC4_SetConfig+0x80>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	4a18      	ldr	r2, [pc, #96]	; (800c428 <TIM_OC4_SetConfig+0xc4>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d00b      	beq.n	800c3e4 <TIM_OC4_SetConfig+0x80>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4a17      	ldr	r2, [pc, #92]	; (800c42c <TIM_OC4_SetConfig+0xc8>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d007      	beq.n	800c3e4 <TIM_OC4_SetConfig+0x80>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4a16      	ldr	r2, [pc, #88]	; (800c430 <TIM_OC4_SetConfig+0xcc>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d003      	beq.n	800c3e4 <TIM_OC4_SetConfig+0x80>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	4a15      	ldr	r2, [pc, #84]	; (800c434 <TIM_OC4_SetConfig+0xd0>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d109      	bne.n	800c3f8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c3ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	695b      	ldr	r3, [r3, #20]
 800c3f0:	019b      	lsls	r3, r3, #6
 800c3f2:	697a      	ldr	r2, [r7, #20]
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	697a      	ldr	r2, [r7, #20]
 800c3fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	685a      	ldr	r2, [r3, #4]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	693a      	ldr	r2, [r7, #16]
 800c410:	621a      	str	r2, [r3, #32]
}
 800c412:	bf00      	nop
 800c414:	371c      	adds	r7, #28
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	feff8fff 	.word	0xfeff8fff
 800c424:	40010000 	.word	0x40010000
 800c428:	40010400 	.word	0x40010400
 800c42c:	40014000 	.word	0x40014000
 800c430:	40014400 	.word	0x40014400
 800c434:	40014800 	.word	0x40014800

0800c438 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c438:	b480      	push	{r7}
 800c43a:	b087      	sub	sp, #28
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a1b      	ldr	r3, [r3, #32]
 800c446:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6a1b      	ldr	r3, [r3, #32]
 800c452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c45e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c460:	68fa      	ldr	r2, [r7, #12]
 800c462:	4b21      	ldr	r3, [pc, #132]	; (800c4e8 <TIM_OC5_SetConfig+0xb0>)
 800c464:	4013      	ands	r3, r2
 800c466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	68fa      	ldr	r2, [r7, #12]
 800c46e:	4313      	orrs	r3, r2
 800c470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c478:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	689b      	ldr	r3, [r3, #8]
 800c47e:	041b      	lsls	r3, r3, #16
 800c480:	693a      	ldr	r2, [r7, #16]
 800c482:	4313      	orrs	r3, r2
 800c484:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4a18      	ldr	r2, [pc, #96]	; (800c4ec <TIM_OC5_SetConfig+0xb4>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d00f      	beq.n	800c4ae <TIM_OC5_SetConfig+0x76>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a17      	ldr	r2, [pc, #92]	; (800c4f0 <TIM_OC5_SetConfig+0xb8>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d00b      	beq.n	800c4ae <TIM_OC5_SetConfig+0x76>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	4a16      	ldr	r2, [pc, #88]	; (800c4f4 <TIM_OC5_SetConfig+0xbc>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d007      	beq.n	800c4ae <TIM_OC5_SetConfig+0x76>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4a15      	ldr	r2, [pc, #84]	; (800c4f8 <TIM_OC5_SetConfig+0xc0>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d003      	beq.n	800c4ae <TIM_OC5_SetConfig+0x76>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	4a14      	ldr	r2, [pc, #80]	; (800c4fc <TIM_OC5_SetConfig+0xc4>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d109      	bne.n	800c4c2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	695b      	ldr	r3, [r3, #20]
 800c4ba:	021b      	lsls	r3, r3, #8
 800c4bc:	697a      	ldr	r2, [r7, #20]
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	697a      	ldr	r2, [r7, #20]
 800c4c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	685a      	ldr	r2, [r3, #4]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	693a      	ldr	r2, [r7, #16]
 800c4da:	621a      	str	r2, [r3, #32]
}
 800c4dc:	bf00      	nop
 800c4de:	371c      	adds	r7, #28
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr
 800c4e8:	fffeff8f 	.word	0xfffeff8f
 800c4ec:	40010000 	.word	0x40010000
 800c4f0:	40010400 	.word	0x40010400
 800c4f4:	40014000 	.word	0x40014000
 800c4f8:	40014400 	.word	0x40014400
 800c4fc:	40014800 	.word	0x40014800

0800c500 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c500:	b480      	push	{r7}
 800c502:	b087      	sub	sp, #28
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6a1b      	ldr	r3, [r3, #32]
 800c50e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6a1b      	ldr	r3, [r3, #32]
 800c51a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	4b22      	ldr	r3, [pc, #136]	; (800c5b4 <TIM_OC6_SetConfig+0xb4>)
 800c52c:	4013      	ands	r3, r2
 800c52e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	021b      	lsls	r3, r3, #8
 800c536:	68fa      	ldr	r2, [r7, #12]
 800c538:	4313      	orrs	r3, r2
 800c53a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	689b      	ldr	r3, [r3, #8]
 800c548:	051b      	lsls	r3, r3, #20
 800c54a:	693a      	ldr	r2, [r7, #16]
 800c54c:	4313      	orrs	r3, r2
 800c54e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	4a19      	ldr	r2, [pc, #100]	; (800c5b8 <TIM_OC6_SetConfig+0xb8>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d00f      	beq.n	800c578 <TIM_OC6_SetConfig+0x78>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	4a18      	ldr	r2, [pc, #96]	; (800c5bc <TIM_OC6_SetConfig+0xbc>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d00b      	beq.n	800c578 <TIM_OC6_SetConfig+0x78>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	4a17      	ldr	r2, [pc, #92]	; (800c5c0 <TIM_OC6_SetConfig+0xc0>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d007      	beq.n	800c578 <TIM_OC6_SetConfig+0x78>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	4a16      	ldr	r2, [pc, #88]	; (800c5c4 <TIM_OC6_SetConfig+0xc4>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d003      	beq.n	800c578 <TIM_OC6_SetConfig+0x78>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	4a15      	ldr	r2, [pc, #84]	; (800c5c8 <TIM_OC6_SetConfig+0xc8>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d109      	bne.n	800c58c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c57e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	695b      	ldr	r3, [r3, #20]
 800c584:	029b      	lsls	r3, r3, #10
 800c586:	697a      	ldr	r2, [r7, #20]
 800c588:	4313      	orrs	r3, r2
 800c58a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	697a      	ldr	r2, [r7, #20]
 800c590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	685a      	ldr	r2, [r3, #4]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	693a      	ldr	r2, [r7, #16]
 800c5a4:	621a      	str	r2, [r3, #32]
}
 800c5a6:	bf00      	nop
 800c5a8:	371c      	adds	r7, #28
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	feff8fff 	.word	0xfeff8fff
 800c5b8:	40010000 	.word	0x40010000
 800c5bc:	40010400 	.word	0x40010400
 800c5c0:	40014000 	.word	0x40014000
 800c5c4:	40014400 	.word	0x40014400
 800c5c8:	40014800 	.word	0x40014800

0800c5cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b087      	sub	sp, #28
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	60b9      	str	r1, [r7, #8]
 800c5d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6a1b      	ldr	r3, [r3, #32]
 800c5dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	f023 0201 	bic.w	r2, r3, #1
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	699b      	ldr	r3, [r3, #24]
 800c5ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c5f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	011b      	lsls	r3, r3, #4
 800c5fc:	693a      	ldr	r2, [r7, #16]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	f023 030a 	bic.w	r3, r3, #10
 800c608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c60a:	697a      	ldr	r2, [r7, #20]
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	4313      	orrs	r3, r2
 800c610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	693a      	ldr	r2, [r7, #16]
 800c616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	697a      	ldr	r2, [r7, #20]
 800c61c:	621a      	str	r2, [r3, #32]
}
 800c61e:	bf00      	nop
 800c620:	371c      	adds	r7, #28
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr

0800c62a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c62a:	b480      	push	{r7}
 800c62c:	b087      	sub	sp, #28
 800c62e:	af00      	add	r7, sp, #0
 800c630:	60f8      	str	r0, [r7, #12]
 800c632:	60b9      	str	r1, [r7, #8]
 800c634:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6a1b      	ldr	r3, [r3, #32]
 800c63a:	f023 0210 	bic.w	r2, r3, #16
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	699b      	ldr	r3, [r3, #24]
 800c646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6a1b      	ldr	r3, [r3, #32]
 800c64c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	031b      	lsls	r3, r3, #12
 800c65a:	697a      	ldr	r2, [r7, #20]
 800c65c:	4313      	orrs	r3, r2
 800c65e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c666:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	011b      	lsls	r3, r3, #4
 800c66c:	693a      	ldr	r2, [r7, #16]
 800c66e:	4313      	orrs	r3, r2
 800c670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	697a      	ldr	r2, [r7, #20]
 800c676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	693a      	ldr	r2, [r7, #16]
 800c67c:	621a      	str	r2, [r3, #32]
}
 800c67e:	bf00      	nop
 800c680:	371c      	adds	r7, #28
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr
	...

0800c68c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b085      	sub	sp, #20
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	689b      	ldr	r3, [r3, #8]
 800c69a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	4b09      	ldr	r3, [pc, #36]	; (800c6c4 <TIM_ITRx_SetConfig+0x38>)
 800c6a0:	4013      	ands	r3, r2
 800c6a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c6a4:	683a      	ldr	r2, [r7, #0]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	f043 0307 	orr.w	r3, r3, #7
 800c6ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	68fa      	ldr	r2, [r7, #12]
 800c6b4:	609a      	str	r2, [r3, #8]
}
 800c6b6:	bf00      	nop
 800c6b8:	3714      	adds	r7, #20
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	ffcfff8f 	.word	0xffcfff8f

0800c6c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b087      	sub	sp, #28
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	607a      	str	r2, [r7, #4]
 800c6d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	689b      	ldr	r3, [r3, #8]
 800c6da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c6e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	021a      	lsls	r2, r3, #8
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	431a      	orrs	r2, r3
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	697a      	ldr	r2, [r7, #20]
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	697a      	ldr	r2, [r7, #20]
 800c6fa:	609a      	str	r2, [r3, #8]
}
 800c6fc:	bf00      	nop
 800c6fe:	371c      	adds	r7, #28
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr

0800c708 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c708:	b480      	push	{r7}
 800c70a:	b087      	sub	sp, #28
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	f003 031f 	and.w	r3, r3, #31
 800c71a:	2201      	movs	r2, #1
 800c71c:	fa02 f303 	lsl.w	r3, r2, r3
 800c720:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	6a1a      	ldr	r2, [r3, #32]
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	43db      	mvns	r3, r3
 800c72a:	401a      	ands	r2, r3
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	6a1a      	ldr	r2, [r3, #32]
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	f003 031f 	and.w	r3, r3, #31
 800c73a:	6879      	ldr	r1, [r7, #4]
 800c73c:	fa01 f303 	lsl.w	r3, r1, r3
 800c740:	431a      	orrs	r2, r3
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	621a      	str	r2, [r3, #32]
}
 800c746:	bf00      	nop
 800c748:	371c      	adds	r7, #28
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
	...

0800c754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c754:	b480      	push	{r7}
 800c756:	b085      	sub	sp, #20
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c764:	2b01      	cmp	r3, #1
 800c766:	d101      	bne.n	800c76c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c768:	2302      	movs	r3, #2
 800c76a:	e077      	b.n	800c85c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2201      	movs	r2, #1
 800c770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2202      	movs	r2, #2
 800c778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	689b      	ldr	r3, [r3, #8]
 800c78a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4a35      	ldr	r2, [pc, #212]	; (800c868 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d004      	beq.n	800c7a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a34      	ldr	r2, [pc, #208]	; (800c86c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d108      	bne.n	800c7b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c7a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	68fa      	ldr	r2, [r7, #12]
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	68fa      	ldr	r2, [r7, #12]
 800c7ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a25      	ldr	r2, [pc, #148]	; (800c868 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d02c      	beq.n	800c830 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7de:	d027      	beq.n	800c830 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4a22      	ldr	r2, [pc, #136]	; (800c870 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d022      	beq.n	800c830 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a21      	ldr	r2, [pc, #132]	; (800c874 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d01d      	beq.n	800c830 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a1f      	ldr	r2, [pc, #124]	; (800c878 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d018      	beq.n	800c830 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4a1a      	ldr	r2, [pc, #104]	; (800c86c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d013      	beq.n	800c830 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a1b      	ldr	r2, [pc, #108]	; (800c87c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d00e      	beq.n	800c830 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a1a      	ldr	r2, [pc, #104]	; (800c880 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d009      	beq.n	800c830 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a18      	ldr	r2, [pc, #96]	; (800c884 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d004      	beq.n	800c830 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4a17      	ldr	r2, [pc, #92]	; (800c888 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d10c      	bne.n	800c84a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c836:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	68ba      	ldr	r2, [r7, #8]
 800c83e:	4313      	orrs	r3, r2
 800c840:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	68ba      	ldr	r2, [r7, #8]
 800c848:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2201      	movs	r2, #1
 800c84e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2200      	movs	r2, #0
 800c856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c85a:	2300      	movs	r3, #0
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3714      	adds	r7, #20
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr
 800c868:	40010000 	.word	0x40010000
 800c86c:	40010400 	.word	0x40010400
 800c870:	40000400 	.word	0x40000400
 800c874:	40000800 	.word	0x40000800
 800c878:	40000c00 	.word	0x40000c00
 800c87c:	40001800 	.word	0x40001800
 800c880:	40014000 	.word	0x40014000
 800c884:	4000e000 	.word	0x4000e000
 800c888:	4000e400 	.word	0x4000e400

0800c88c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b085      	sub	sp, #20
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c896:	2300      	movs	r3, #0
 800c898:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d101      	bne.n	800c8a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c8a4:	2302      	movs	r3, #2
 800c8a6:	e087      	b.n	800c9b8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	68db      	ldr	r3, [r3, #12]
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	4313      	orrs	r3, r2
 800c8ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	685b      	ldr	r3, [r3, #4]
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	691b      	ldr	r3, [r3, #16]
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	695b      	ldr	r3, [r3, #20]
 800c900:	4313      	orrs	r3, r2
 800c902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c90e:	4313      	orrs	r3, r2
 800c910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	699b      	ldr	r3, [r3, #24]
 800c91c:	041b      	lsls	r3, r3, #16
 800c91e:	4313      	orrs	r3, r2
 800c920:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4a27      	ldr	r2, [pc, #156]	; (800c9c4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d004      	beq.n	800c936 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a25      	ldr	r2, [pc, #148]	; (800c9c8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d106      	bne.n	800c944 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	69db      	ldr	r3, [r3, #28]
 800c940:	4313      	orrs	r3, r2
 800c942:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a1e      	ldr	r2, [pc, #120]	; (800c9c4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d004      	beq.n	800c958 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4a1d      	ldr	r2, [pc, #116]	; (800c9c8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d126      	bne.n	800c9a6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c962:	051b      	lsls	r3, r3, #20
 800c964:	4313      	orrs	r3, r2
 800c966:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	6a1b      	ldr	r3, [r3, #32]
 800c972:	4313      	orrs	r3, r2
 800c974:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c980:	4313      	orrs	r3, r2
 800c982:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a0e      	ldr	r2, [pc, #56]	; (800c9c4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d004      	beq.n	800c998 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a0d      	ldr	r2, [pc, #52]	; (800c9c8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d106      	bne.n	800c9a6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	68fa      	ldr	r2, [r7, #12]
 800c9ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9b6:	2300      	movs	r3, #0
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3714      	adds	r7, #20
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr
 800c9c4:	40010000 	.word	0x40010000
 800c9c8:	40010400 	.word	0x40010400

0800c9cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c9d4:	bf00      	nop
 800c9d6:	370c      	adds	r7, #12
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b083      	sub	sp, #12
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c9e8:	bf00      	nop
 800c9ea:	370c      	adds	r7, #12
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr

0800c9f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b083      	sub	sp, #12
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c9fc:	bf00      	nop
 800c9fe:	370c      	adds	r7, #12
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr

0800ca08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d101      	bne.n	800ca1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca16:	2301      	movs	r3, #1
 800ca18:	e042      	b.n	800caa0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d106      	bne.n	800ca32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f7f8 f85d 	bl	8004aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2224      	movs	r2, #36	; 0x24
 800ca36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	681a      	ldr	r2, [r3, #0]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f022 0201 	bic.w	r2, r2, #1
 800ca48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 fd1c 	bl	800d488 <UART_SetConfig>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d101      	bne.n	800ca5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ca56:	2301      	movs	r3, #1
 800ca58:	e022      	b.n	800caa0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d002      	beq.n	800ca68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f001 fb7c 	bl	800e160 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	685a      	ldr	r2, [r3, #4]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ca76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	689a      	ldr	r2, [r3, #8]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ca86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f042 0201 	orr.w	r2, r2, #1
 800ca96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f001 fc03 	bl	800e2a4 <UART_CheckIdleState>
 800ca9e:	4603      	mov	r3, r0
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3708      	adds	r7, #8
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d101      	bne.n	800caba <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800cab6:	2301      	movs	r3, #1
 800cab8:	e031      	b.n	800cb1e <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2224      	movs	r2, #36	; 0x24
 800cabe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f022 0201 	bic.w	r2, r2, #1
 800cad0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	2200      	movs	r2, #0
 800cad8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2200      	movs	r2, #0
 800cae0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2200      	movs	r2, #0
 800cae8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f7f8 f8d6 	bl	8004c9c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2200      	movs	r2, #0
 800cafc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cb1c:	2300      	movs	r3, #0
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3708      	adds	r7, #8
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
	...

0800cb28 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b08a      	sub	sp, #40	; 0x28
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	4613      	mov	r3, r2
 800cb34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb3c:	2b20      	cmp	r3, #32
 800cb3e:	d167      	bne.n	800cc10 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d002      	beq.n	800cb4c <HAL_UART_Transmit_DMA+0x24>
 800cb46:	88fb      	ldrh	r3, [r7, #6]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d101      	bne.n	800cb50 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	e060      	b.n	800cc12 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	68ba      	ldr	r2, [r7, #8]
 800cb54:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	88fa      	ldrh	r2, [r7, #6]
 800cb5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	88fa      	ldrh	r2, [r7, #6]
 800cb62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2221      	movs	r2, #33	; 0x21
 800cb72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d028      	beq.n	800cbd0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb82:	4a26      	ldr	r2, [pc, #152]	; (800cc1c <HAL_UART_Transmit_DMA+0xf4>)
 800cb84:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb8a:	4a25      	ldr	r2, [pc, #148]	; (800cc20 <HAL_UART_Transmit_DMA+0xf8>)
 800cb8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb92:	4a24      	ldr	r2, [pc, #144]	; (800cc24 <HAL_UART_Transmit_DMA+0xfc>)
 800cb94:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cba6:	4619      	mov	r1, r3
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	3328      	adds	r3, #40	; 0x28
 800cbae:	461a      	mov	r2, r3
 800cbb0:	88fb      	ldrh	r3, [r7, #6]
 800cbb2:	f7f8 ffaf 	bl	8005b14 <HAL_DMA_Start_IT>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d009      	beq.n	800cbd0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2210      	movs	r2, #16
 800cbc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2220      	movs	r2, #32
 800cbc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	e020      	b.n	800cc12 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2240      	movs	r2, #64	; 0x40
 800cbd6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	3308      	adds	r3, #8
 800cbde:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	e853 3f00 	ldrex	r3, [r3]
 800cbe6:	613b      	str	r3, [r7, #16]
   return(result);
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbee:	627b      	str	r3, [r7, #36]	; 0x24
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	3308      	adds	r3, #8
 800cbf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbf8:	623a      	str	r2, [r7, #32]
 800cbfa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbfc:	69f9      	ldr	r1, [r7, #28]
 800cbfe:	6a3a      	ldr	r2, [r7, #32]
 800cc00:	e841 2300 	strex	r3, r2, [r1]
 800cc04:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d1e5      	bne.n	800cbd8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	e000      	b.n	800cc12 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800cc10:	2302      	movs	r3, #2
  }
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3728      	adds	r7, #40	; 0x28
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	0800e765 	.word	0x0800e765
 800cc20:	0800e7fb 	.word	0x0800e7fb
 800cc24:	0800e97d 	.word	0x0800e97d

0800cc28 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b08a      	sub	sp, #40	; 0x28
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	4613      	mov	r3, r2
 800cc34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc3c:	2b20      	cmp	r3, #32
 800cc3e:	d137      	bne.n	800ccb0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d002      	beq.n	800cc4c <HAL_UART_Receive_DMA+0x24>
 800cc46:	88fb      	ldrh	r3, [r7, #6]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d101      	bne.n	800cc50 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	e030      	b.n	800ccb2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2200      	movs	r2, #0
 800cc54:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4a18      	ldr	r2, [pc, #96]	; (800ccbc <HAL_UART_Receive_DMA+0x94>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d01f      	beq.n	800cca0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d018      	beq.n	800cca0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	e853 3f00 	ldrex	r3, [r3]
 800cc7a:	613b      	str	r3, [r7, #16]
   return(result);
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cc82:	627b      	str	r3, [r7, #36]	; 0x24
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	461a      	mov	r2, r3
 800cc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8c:	623b      	str	r3, [r7, #32]
 800cc8e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc90:	69f9      	ldr	r1, [r7, #28]
 800cc92:	6a3a      	ldr	r2, [r7, #32]
 800cc94:	e841 2300 	strex	r3, r2, [r1]
 800cc98:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d1e6      	bne.n	800cc6e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cca0:	88fb      	ldrh	r3, [r7, #6]
 800cca2:	461a      	mov	r2, r3
 800cca4:	68b9      	ldr	r1, [r7, #8]
 800cca6:	68f8      	ldr	r0, [r7, #12]
 800cca8:	f001 fc0e 	bl	800e4c8 <UART_Start_Receive_DMA>
 800ccac:	4603      	mov	r3, r0
 800ccae:	e000      	b.n	800ccb2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ccb0:	2302      	movs	r3, #2
  }
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3728      	adds	r7, #40	; 0x28
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	58000c00 	.word	0x58000c00

0800ccc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b0ba      	sub	sp, #232	; 0xe8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	69db      	ldr	r3, [r3, #28]
 800ccce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	689b      	ldr	r3, [r3, #8]
 800cce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cce6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ccea:	f640 030f 	movw	r3, #2063	; 0x80f
 800ccee:	4013      	ands	r3, r2
 800ccf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ccf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d11b      	bne.n	800cd34 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ccfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd00:	f003 0320 	and.w	r3, r3, #32
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d015      	beq.n	800cd34 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd0c:	f003 0320 	and.w	r3, r3, #32
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d105      	bne.n	800cd20 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cd14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d009      	beq.n	800cd34 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f000 8377 	beq.w	800d418 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	4798      	blx	r3
      }
      return;
 800cd32:	e371      	b.n	800d418 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cd34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	f000 8123 	beq.w	800cf84 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cd3e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cd42:	4b8d      	ldr	r3, [pc, #564]	; (800cf78 <HAL_UART_IRQHandler+0x2b8>)
 800cd44:	4013      	ands	r3, r2
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d106      	bne.n	800cd58 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cd4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cd4e:	4b8b      	ldr	r3, [pc, #556]	; (800cf7c <HAL_UART_IRQHandler+0x2bc>)
 800cd50:	4013      	ands	r3, r2
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	f000 8116 	beq.w	800cf84 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cd58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd5c:	f003 0301 	and.w	r3, r3, #1
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d011      	beq.n	800cd88 <HAL_UART_IRQHandler+0xc8>
 800cd64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d00b      	beq.n	800cd88 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	2201      	movs	r2, #1
 800cd76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd7e:	f043 0201 	orr.w	r2, r3, #1
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd8c:	f003 0302 	and.w	r3, r3, #2
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d011      	beq.n	800cdb8 <HAL_UART_IRQHandler+0xf8>
 800cd94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd98:	f003 0301 	and.w	r3, r3, #1
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d00b      	beq.n	800cdb8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	2202      	movs	r2, #2
 800cda6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdae:	f043 0204 	orr.w	r2, r3, #4
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cdb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdbc:	f003 0304 	and.w	r3, r3, #4
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d011      	beq.n	800cde8 <HAL_UART_IRQHandler+0x128>
 800cdc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cdc8:	f003 0301 	and.w	r3, r3, #1
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d00b      	beq.n	800cde8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2204      	movs	r2, #4
 800cdd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdde:	f043 0202 	orr.w	r2, r3, #2
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cde8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdec:	f003 0308 	and.w	r3, r3, #8
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d017      	beq.n	800ce24 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cdf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cdf8:	f003 0320 	and.w	r3, r3, #32
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d105      	bne.n	800ce0c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ce00:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ce04:	4b5c      	ldr	r3, [pc, #368]	; (800cf78 <HAL_UART_IRQHandler+0x2b8>)
 800ce06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00b      	beq.n	800ce24 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2208      	movs	r2, #8
 800ce12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce1a:	f043 0208 	orr.w	r2, r3, #8
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ce24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d012      	beq.n	800ce56 <HAL_UART_IRQHandler+0x196>
 800ce30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d00c      	beq.n	800ce56 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce4c:	f043 0220 	orr.w	r2, r3, #32
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	f000 82dd 	beq.w	800d41c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ce62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce66:	f003 0320 	and.w	r3, r3, #32
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d013      	beq.n	800ce96 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ce6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce72:	f003 0320 	and.w	r3, r3, #32
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d105      	bne.n	800ce86 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ce7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d007      	beq.n	800ce96 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d003      	beq.n	800ce96 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceaa:	2b40      	cmp	r3, #64	; 0x40
 800ceac:	d005      	beq.n	800ceba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ceae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ceb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d054      	beq.n	800cf64 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f001 fbec 	bl	800e698 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	689b      	ldr	r3, [r3, #8]
 800cec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceca:	2b40      	cmp	r3, #64	; 0x40
 800cecc:	d146      	bne.n	800cf5c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	3308      	adds	r3, #8
 800ced4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ced8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cedc:	e853 3f00 	ldrex	r3, [r3]
 800cee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ceec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	3308      	adds	r3, #8
 800cef6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cefa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cefe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cf06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cf0a:	e841 2300 	strex	r3, r2, [r1]
 800cf0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cf12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d1d9      	bne.n	800cece <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d017      	beq.n	800cf54 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf2a:	4a15      	ldr	r2, [pc, #84]	; (800cf80 <HAL_UART_IRQHandler+0x2c0>)
 800cf2c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7f9 fb75 	bl	8006624 <HAL_DMA_Abort_IT>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d019      	beq.n	800cf74 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800cf4e:	4610      	mov	r0, r2
 800cf50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf52:	e00f      	b.n	800cf74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f7f4 fa89 	bl	800146c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf5a:	e00b      	b.n	800cf74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f7f4 fa85 	bl	800146c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf62:	e007      	b.n	800cf74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f7f4 fa81 	bl	800146c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800cf72:	e253      	b.n	800d41c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf74:	bf00      	nop
    return;
 800cf76:	e251      	b.n	800d41c <HAL_UART_IRQHandler+0x75c>
 800cf78:	10000001 	.word	0x10000001
 800cf7c:	04000120 	.word	0x04000120
 800cf80:	0800e9fd 	.word	0x0800e9fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	f040 81e7 	bne.w	800d35c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cf8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf92:	f003 0310 	and.w	r3, r3, #16
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	f000 81e0 	beq.w	800d35c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cf9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfa0:	f003 0310 	and.w	r3, r3, #16
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f000 81d9 	beq.w	800d35c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	2210      	movs	r2, #16
 800cfb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	689b      	ldr	r3, [r3, #8]
 800cfb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfbc:	2b40      	cmp	r3, #64	; 0x40
 800cfbe:	f040 8151 	bne.w	800d264 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4a96      	ldr	r2, [pc, #600]	; (800d224 <HAL_UART_IRQHandler+0x564>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d068      	beq.n	800d0a2 <HAL_UART_IRQHandler+0x3e2>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4a93      	ldr	r2, [pc, #588]	; (800d228 <HAL_UART_IRQHandler+0x568>)
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	d061      	beq.n	800d0a2 <HAL_UART_IRQHandler+0x3e2>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4a91      	ldr	r2, [pc, #580]	; (800d22c <HAL_UART_IRQHandler+0x56c>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d05a      	beq.n	800d0a2 <HAL_UART_IRQHandler+0x3e2>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a8e      	ldr	r2, [pc, #568]	; (800d230 <HAL_UART_IRQHandler+0x570>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d053      	beq.n	800d0a2 <HAL_UART_IRQHandler+0x3e2>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4a8c      	ldr	r2, [pc, #560]	; (800d234 <HAL_UART_IRQHandler+0x574>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d04c      	beq.n	800d0a2 <HAL_UART_IRQHandler+0x3e2>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a89      	ldr	r2, [pc, #548]	; (800d238 <HAL_UART_IRQHandler+0x578>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d045      	beq.n	800d0a2 <HAL_UART_IRQHandler+0x3e2>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4a87      	ldr	r2, [pc, #540]	; (800d23c <HAL_UART_IRQHandler+0x57c>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d03e      	beq.n	800d0a2 <HAL_UART_IRQHandler+0x3e2>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a84      	ldr	r2, [pc, #528]	; (800d240 <HAL_UART_IRQHandler+0x580>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d037      	beq.n	800d0a2 <HAL_UART_IRQHandler+0x3e2>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4a82      	ldr	r2, [pc, #520]	; (800d244 <HAL_UART_IRQHandler+0x584>)
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d030      	beq.n	800d0a2 <HAL_UART_IRQHandler+0x3e2>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a7f      	ldr	r2, [pc, #508]	; (800d248 <HAL_UART_IRQHandler+0x588>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d029      	beq.n	800d0a2 <HAL_UART_IRQHandler+0x3e2>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4a7d      	ldr	r2, [pc, #500]	; (800d24c <HAL_UART_IRQHandler+0x58c>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d022      	beq.n	800d0a2 <HAL_UART_IRQHandler+0x3e2>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a7a      	ldr	r2, [pc, #488]	; (800d250 <HAL_UART_IRQHandler+0x590>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d01b      	beq.n	800d0a2 <HAL_UART_IRQHandler+0x3e2>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	4a78      	ldr	r2, [pc, #480]	; (800d254 <HAL_UART_IRQHandler+0x594>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d014      	beq.n	800d0a2 <HAL_UART_IRQHandler+0x3e2>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a75      	ldr	r2, [pc, #468]	; (800d258 <HAL_UART_IRQHandler+0x598>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d00d      	beq.n	800d0a2 <HAL_UART_IRQHandler+0x3e2>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4a73      	ldr	r2, [pc, #460]	; (800d25c <HAL_UART_IRQHandler+0x59c>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d006      	beq.n	800d0a2 <HAL_UART_IRQHandler+0x3e2>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a70      	ldr	r2, [pc, #448]	; (800d260 <HAL_UART_IRQHandler+0x5a0>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d106      	bne.n	800d0b0 <HAL_UART_IRQHandler+0x3f0>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	e005      	b.n	800d0bc <HAL_UART_IRQHandler+0x3fc>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d0c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	f000 81ab 	beq.w	800d420 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d0d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	f080 81a3 	bcs.w	800d420 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d0e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0ea:	69db      	ldr	r3, [r3, #28]
 800d0ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0f0:	f000 8087 	beq.w	800d202 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d100:	e853 3f00 	ldrex	r3, [r3]
 800d104:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d108:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d10c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	461a      	mov	r2, r3
 800d11a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d11e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d122:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d126:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d12a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d12e:	e841 2300 	strex	r3, r2, [r1]
 800d132:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d1da      	bne.n	800d0f4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	3308      	adds	r3, #8
 800d144:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d148:	e853 3f00 	ldrex	r3, [r3]
 800d14c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d14e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d150:	f023 0301 	bic.w	r3, r3, #1
 800d154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	3308      	adds	r3, #8
 800d15e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d162:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d166:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d168:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d16a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d16e:	e841 2300 	strex	r3, r2, [r1]
 800d172:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d176:	2b00      	cmp	r3, #0
 800d178:	d1e1      	bne.n	800d13e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	3308      	adds	r3, #8
 800d180:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d184:	e853 3f00 	ldrex	r3, [r3]
 800d188:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d18a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d18c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	3308      	adds	r3, #8
 800d19a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d19e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d1a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d1a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d1a6:	e841 2300 	strex	r3, r2, [r1]
 800d1aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d1ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d1e3      	bne.n	800d17a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2220      	movs	r2, #32
 800d1b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1c8:	e853 3f00 	ldrex	r3, [r3]
 800d1cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d1ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1d0:	f023 0310 	bic.w	r3, r3, #16
 800d1d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	461a      	mov	r2, r3
 800d1de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d1e2:	65bb      	str	r3, [r7, #88]	; 0x58
 800d1e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d1e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1ea:	e841 2300 	strex	r3, r2, [r1]
 800d1ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d1f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d1e4      	bne.n	800d1c0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7f8 fef3 	bl	8005fe8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2202      	movs	r2, #2
 800d206:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d214:	b29b      	uxth	r3, r3
 800d216:	1ad3      	subs	r3, r2, r3
 800d218:	b29b      	uxth	r3, r3
 800d21a:	4619      	mov	r1, r3
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 f927 	bl	800d470 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d222:	e0fd      	b.n	800d420 <HAL_UART_IRQHandler+0x760>
 800d224:	40020010 	.word	0x40020010
 800d228:	40020028 	.word	0x40020028
 800d22c:	40020040 	.word	0x40020040
 800d230:	40020058 	.word	0x40020058
 800d234:	40020070 	.word	0x40020070
 800d238:	40020088 	.word	0x40020088
 800d23c:	400200a0 	.word	0x400200a0
 800d240:	400200b8 	.word	0x400200b8
 800d244:	40020410 	.word	0x40020410
 800d248:	40020428 	.word	0x40020428
 800d24c:	40020440 	.word	0x40020440
 800d250:	40020458 	.word	0x40020458
 800d254:	40020470 	.word	0x40020470
 800d258:	40020488 	.word	0x40020488
 800d25c:	400204a0 	.word	0x400204a0
 800d260:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d270:	b29b      	uxth	r3, r3
 800d272:	1ad3      	subs	r3, r2, r3
 800d274:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d27e:	b29b      	uxth	r3, r3
 800d280:	2b00      	cmp	r3, #0
 800d282:	f000 80cf 	beq.w	800d424 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d286:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f000 80ca 	beq.w	800d424 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d298:	e853 3f00 	ldrex	r3, [r3]
 800d29c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d2a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d2b2:	647b      	str	r3, [r7, #68]	; 0x44
 800d2b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d2b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2ba:	e841 2300 	strex	r3, r2, [r1]
 800d2be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1e4      	bne.n	800d290 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	3308      	adds	r3, #8
 800d2cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d0:	e853 3f00 	ldrex	r3, [r3]
 800d2d4:	623b      	str	r3, [r7, #32]
   return(result);
 800d2d6:	6a3a      	ldr	r2, [r7, #32]
 800d2d8:	4b55      	ldr	r3, [pc, #340]	; (800d430 <HAL_UART_IRQHandler+0x770>)
 800d2da:	4013      	ands	r3, r2
 800d2dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	3308      	adds	r3, #8
 800d2e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d2ea:	633a      	str	r2, [r7, #48]	; 0x30
 800d2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d2f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2f2:	e841 2300 	strex	r3, r2, [r1]
 800d2f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1e3      	bne.n	800d2c6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2220      	movs	r2, #32
 800d302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2200      	movs	r2, #0
 800d30a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2200      	movs	r2, #0
 800d310:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	e853 3f00 	ldrex	r3, [r3]
 800d31e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f023 0310 	bic.w	r3, r3, #16
 800d326:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	461a      	mov	r2, r3
 800d330:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d334:	61fb      	str	r3, [r7, #28]
 800d336:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d338:	69b9      	ldr	r1, [r7, #24]
 800d33a:	69fa      	ldr	r2, [r7, #28]
 800d33c:	e841 2300 	strex	r3, r2, [r1]
 800d340:	617b      	str	r3, [r7, #20]
   return(result);
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d1e4      	bne.n	800d312 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2202      	movs	r2, #2
 800d34c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d34e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d352:	4619      	mov	r1, r3
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 f88b 	bl	800d470 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d35a:	e063      	b.n	800d424 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d35c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d364:	2b00      	cmp	r3, #0
 800d366:	d00e      	beq.n	800d386 <HAL_UART_IRQHandler+0x6c6>
 800d368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d36c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d370:	2b00      	cmp	r3, #0
 800d372:	d008      	beq.n	800d386 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d37c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f001 fb7d 	bl	800ea7e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d384:	e051      	b.n	800d42a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d38a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d014      	beq.n	800d3bc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d105      	bne.n	800d3aa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d39e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d008      	beq.n	800d3bc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d03a      	beq.n	800d428 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	4798      	blx	r3
    }
    return;
 800d3ba:	e035      	b.n	800d428 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d3bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d009      	beq.n	800d3dc <HAL_UART_IRQHandler+0x71c>
 800d3c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d003      	beq.n	800d3dc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f001 fb27 	bl	800ea28 <UART_EndTransmit_IT>
    return;
 800d3da:	e026      	b.n	800d42a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d3dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d009      	beq.n	800d3fc <HAL_UART_IRQHandler+0x73c>
 800d3e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d003      	beq.n	800d3fc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f001 fb56 	bl	800eaa6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d3fa:	e016      	b.n	800d42a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d3fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d404:	2b00      	cmp	r3, #0
 800d406:	d010      	beq.n	800d42a <HAL_UART_IRQHandler+0x76a>
 800d408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	da0c      	bge.n	800d42a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f001 fb3e 	bl	800ea92 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d416:	e008      	b.n	800d42a <HAL_UART_IRQHandler+0x76a>
      return;
 800d418:	bf00      	nop
 800d41a:	e006      	b.n	800d42a <HAL_UART_IRQHandler+0x76a>
    return;
 800d41c:	bf00      	nop
 800d41e:	e004      	b.n	800d42a <HAL_UART_IRQHandler+0x76a>
      return;
 800d420:	bf00      	nop
 800d422:	e002      	b.n	800d42a <HAL_UART_IRQHandler+0x76a>
      return;
 800d424:	bf00      	nop
 800d426:	e000      	b.n	800d42a <HAL_UART_IRQHandler+0x76a>
    return;
 800d428:	bf00      	nop
  }
}
 800d42a:	37e8      	adds	r7, #232	; 0xe8
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	effffffe 	.word	0xeffffffe

0800d434 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d43c:	bf00      	nop
 800d43e:	370c      	adds	r7, #12
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr

0800d448 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d450:	bf00      	nop
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d464:	bf00      	nop
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	460b      	mov	r3, r1
 800d47a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d47c:	bf00      	nop
 800d47e:	370c      	adds	r7, #12
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr

0800d488 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d48c:	b092      	sub	sp, #72	; 0x48
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d492:	2300      	movs	r3, #0
 800d494:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	689a      	ldr	r2, [r3, #8]
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	691b      	ldr	r3, [r3, #16]
 800d4a0:	431a      	orrs	r2, r3
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	695b      	ldr	r3, [r3, #20]
 800d4a6:	431a      	orrs	r2, r3
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	69db      	ldr	r3, [r3, #28]
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	681a      	ldr	r2, [r3, #0]
 800d4b6:	4bbe      	ldr	r3, [pc, #760]	; (800d7b0 <UART_SetConfig+0x328>)
 800d4b8:	4013      	ands	r3, r2
 800d4ba:	697a      	ldr	r2, [r7, #20]
 800d4bc:	6812      	ldr	r2, [r2, #0]
 800d4be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4c0:	430b      	orrs	r3, r1
 800d4c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	68da      	ldr	r2, [r3, #12]
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	430a      	orrs	r2, r1
 800d4d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	699b      	ldr	r3, [r3, #24]
 800d4de:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4ab3      	ldr	r2, [pc, #716]	; (800d7b4 <UART_SetConfig+0x32c>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d004      	beq.n	800d4f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	6a1b      	ldr	r3, [r3, #32]
 800d4ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	689a      	ldr	r2, [r3, #8]
 800d4fa:	4baf      	ldr	r3, [pc, #700]	; (800d7b8 <UART_SetConfig+0x330>)
 800d4fc:	4013      	ands	r3, r2
 800d4fe:	697a      	ldr	r2, [r7, #20]
 800d500:	6812      	ldr	r2, [r2, #0]
 800d502:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d504:	430b      	orrs	r3, r1
 800d506:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d50e:	f023 010f 	bic.w	r1, r3, #15
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	430a      	orrs	r2, r1
 800d51c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	4aa6      	ldr	r2, [pc, #664]	; (800d7bc <UART_SetConfig+0x334>)
 800d524:	4293      	cmp	r3, r2
 800d526:	d177      	bne.n	800d618 <UART_SetConfig+0x190>
 800d528:	4ba5      	ldr	r3, [pc, #660]	; (800d7c0 <UART_SetConfig+0x338>)
 800d52a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d52c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d530:	2b28      	cmp	r3, #40	; 0x28
 800d532:	d86d      	bhi.n	800d610 <UART_SetConfig+0x188>
 800d534:	a201      	add	r2, pc, #4	; (adr r2, 800d53c <UART_SetConfig+0xb4>)
 800d536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d53a:	bf00      	nop
 800d53c:	0800d5e1 	.word	0x0800d5e1
 800d540:	0800d611 	.word	0x0800d611
 800d544:	0800d611 	.word	0x0800d611
 800d548:	0800d611 	.word	0x0800d611
 800d54c:	0800d611 	.word	0x0800d611
 800d550:	0800d611 	.word	0x0800d611
 800d554:	0800d611 	.word	0x0800d611
 800d558:	0800d611 	.word	0x0800d611
 800d55c:	0800d5e9 	.word	0x0800d5e9
 800d560:	0800d611 	.word	0x0800d611
 800d564:	0800d611 	.word	0x0800d611
 800d568:	0800d611 	.word	0x0800d611
 800d56c:	0800d611 	.word	0x0800d611
 800d570:	0800d611 	.word	0x0800d611
 800d574:	0800d611 	.word	0x0800d611
 800d578:	0800d611 	.word	0x0800d611
 800d57c:	0800d5f1 	.word	0x0800d5f1
 800d580:	0800d611 	.word	0x0800d611
 800d584:	0800d611 	.word	0x0800d611
 800d588:	0800d611 	.word	0x0800d611
 800d58c:	0800d611 	.word	0x0800d611
 800d590:	0800d611 	.word	0x0800d611
 800d594:	0800d611 	.word	0x0800d611
 800d598:	0800d611 	.word	0x0800d611
 800d59c:	0800d5f9 	.word	0x0800d5f9
 800d5a0:	0800d611 	.word	0x0800d611
 800d5a4:	0800d611 	.word	0x0800d611
 800d5a8:	0800d611 	.word	0x0800d611
 800d5ac:	0800d611 	.word	0x0800d611
 800d5b0:	0800d611 	.word	0x0800d611
 800d5b4:	0800d611 	.word	0x0800d611
 800d5b8:	0800d611 	.word	0x0800d611
 800d5bc:	0800d601 	.word	0x0800d601
 800d5c0:	0800d611 	.word	0x0800d611
 800d5c4:	0800d611 	.word	0x0800d611
 800d5c8:	0800d611 	.word	0x0800d611
 800d5cc:	0800d611 	.word	0x0800d611
 800d5d0:	0800d611 	.word	0x0800d611
 800d5d4:	0800d611 	.word	0x0800d611
 800d5d8:	0800d611 	.word	0x0800d611
 800d5dc:	0800d609 	.word	0x0800d609
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5e6:	e326      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d5e8:	2304      	movs	r3, #4
 800d5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ee:	e322      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d5f0:	2308      	movs	r3, #8
 800d5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5f6:	e31e      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d5f8:	2310      	movs	r3, #16
 800d5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5fe:	e31a      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d600:	2320      	movs	r3, #32
 800d602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d606:	e316      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d608:	2340      	movs	r3, #64	; 0x40
 800d60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d60e:	e312      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d610:	2380      	movs	r3, #128	; 0x80
 800d612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d616:	e30e      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a69      	ldr	r2, [pc, #420]	; (800d7c4 <UART_SetConfig+0x33c>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d130      	bne.n	800d684 <UART_SetConfig+0x1fc>
 800d622:	4b67      	ldr	r3, [pc, #412]	; (800d7c0 <UART_SetConfig+0x338>)
 800d624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d626:	f003 0307 	and.w	r3, r3, #7
 800d62a:	2b05      	cmp	r3, #5
 800d62c:	d826      	bhi.n	800d67c <UART_SetConfig+0x1f4>
 800d62e:	a201      	add	r2, pc, #4	; (adr r2, 800d634 <UART_SetConfig+0x1ac>)
 800d630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d634:	0800d64d 	.word	0x0800d64d
 800d638:	0800d655 	.word	0x0800d655
 800d63c:	0800d65d 	.word	0x0800d65d
 800d640:	0800d665 	.word	0x0800d665
 800d644:	0800d66d 	.word	0x0800d66d
 800d648:	0800d675 	.word	0x0800d675
 800d64c:	2300      	movs	r3, #0
 800d64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d652:	e2f0      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d654:	2304      	movs	r3, #4
 800d656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d65a:	e2ec      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d65c:	2308      	movs	r3, #8
 800d65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d662:	e2e8      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d664:	2310      	movs	r3, #16
 800d666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d66a:	e2e4      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d66c:	2320      	movs	r3, #32
 800d66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d672:	e2e0      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d674:	2340      	movs	r3, #64	; 0x40
 800d676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d67a:	e2dc      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d67c:	2380      	movs	r3, #128	; 0x80
 800d67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d682:	e2d8      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4a4f      	ldr	r2, [pc, #316]	; (800d7c8 <UART_SetConfig+0x340>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d130      	bne.n	800d6f0 <UART_SetConfig+0x268>
 800d68e:	4b4c      	ldr	r3, [pc, #304]	; (800d7c0 <UART_SetConfig+0x338>)
 800d690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d692:	f003 0307 	and.w	r3, r3, #7
 800d696:	2b05      	cmp	r3, #5
 800d698:	d826      	bhi.n	800d6e8 <UART_SetConfig+0x260>
 800d69a:	a201      	add	r2, pc, #4	; (adr r2, 800d6a0 <UART_SetConfig+0x218>)
 800d69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a0:	0800d6b9 	.word	0x0800d6b9
 800d6a4:	0800d6c1 	.word	0x0800d6c1
 800d6a8:	0800d6c9 	.word	0x0800d6c9
 800d6ac:	0800d6d1 	.word	0x0800d6d1
 800d6b0:	0800d6d9 	.word	0x0800d6d9
 800d6b4:	0800d6e1 	.word	0x0800d6e1
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6be:	e2ba      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d6c0:	2304      	movs	r3, #4
 800d6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6c6:	e2b6      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d6c8:	2308      	movs	r3, #8
 800d6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ce:	e2b2      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d6d0:	2310      	movs	r3, #16
 800d6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6d6:	e2ae      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d6d8:	2320      	movs	r3, #32
 800d6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6de:	e2aa      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d6e0:	2340      	movs	r3, #64	; 0x40
 800d6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6e6:	e2a6      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d6e8:	2380      	movs	r3, #128	; 0x80
 800d6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ee:	e2a2      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4a35      	ldr	r2, [pc, #212]	; (800d7cc <UART_SetConfig+0x344>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d130      	bne.n	800d75c <UART_SetConfig+0x2d4>
 800d6fa:	4b31      	ldr	r3, [pc, #196]	; (800d7c0 <UART_SetConfig+0x338>)
 800d6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6fe:	f003 0307 	and.w	r3, r3, #7
 800d702:	2b05      	cmp	r3, #5
 800d704:	d826      	bhi.n	800d754 <UART_SetConfig+0x2cc>
 800d706:	a201      	add	r2, pc, #4	; (adr r2, 800d70c <UART_SetConfig+0x284>)
 800d708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d70c:	0800d725 	.word	0x0800d725
 800d710:	0800d72d 	.word	0x0800d72d
 800d714:	0800d735 	.word	0x0800d735
 800d718:	0800d73d 	.word	0x0800d73d
 800d71c:	0800d745 	.word	0x0800d745
 800d720:	0800d74d 	.word	0x0800d74d
 800d724:	2300      	movs	r3, #0
 800d726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d72a:	e284      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d72c:	2304      	movs	r3, #4
 800d72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d732:	e280      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d734:	2308      	movs	r3, #8
 800d736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d73a:	e27c      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d73c:	2310      	movs	r3, #16
 800d73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d742:	e278      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d744:	2320      	movs	r3, #32
 800d746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d74a:	e274      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d74c:	2340      	movs	r3, #64	; 0x40
 800d74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d752:	e270      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d754:	2380      	movs	r3, #128	; 0x80
 800d756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d75a:	e26c      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4a1b      	ldr	r2, [pc, #108]	; (800d7d0 <UART_SetConfig+0x348>)
 800d762:	4293      	cmp	r3, r2
 800d764:	d142      	bne.n	800d7ec <UART_SetConfig+0x364>
 800d766:	4b16      	ldr	r3, [pc, #88]	; (800d7c0 <UART_SetConfig+0x338>)
 800d768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d76a:	f003 0307 	and.w	r3, r3, #7
 800d76e:	2b05      	cmp	r3, #5
 800d770:	d838      	bhi.n	800d7e4 <UART_SetConfig+0x35c>
 800d772:	a201      	add	r2, pc, #4	; (adr r2, 800d778 <UART_SetConfig+0x2f0>)
 800d774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d778:	0800d791 	.word	0x0800d791
 800d77c:	0800d799 	.word	0x0800d799
 800d780:	0800d7a1 	.word	0x0800d7a1
 800d784:	0800d7a9 	.word	0x0800d7a9
 800d788:	0800d7d5 	.word	0x0800d7d5
 800d78c:	0800d7dd 	.word	0x0800d7dd
 800d790:	2300      	movs	r3, #0
 800d792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d796:	e24e      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d798:	2304      	movs	r3, #4
 800d79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79e:	e24a      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d7a0:	2308      	movs	r3, #8
 800d7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a6:	e246      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d7a8:	2310      	movs	r3, #16
 800d7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ae:	e242      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d7b0:	cfff69f3 	.word	0xcfff69f3
 800d7b4:	58000c00 	.word	0x58000c00
 800d7b8:	11fff4ff 	.word	0x11fff4ff
 800d7bc:	40011000 	.word	0x40011000
 800d7c0:	58024400 	.word	0x58024400
 800d7c4:	40004400 	.word	0x40004400
 800d7c8:	40004800 	.word	0x40004800
 800d7cc:	40004c00 	.word	0x40004c00
 800d7d0:	40005000 	.word	0x40005000
 800d7d4:	2320      	movs	r3, #32
 800d7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7da:	e22c      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d7dc:	2340      	movs	r3, #64	; 0x40
 800d7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7e2:	e228      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d7e4:	2380      	movs	r3, #128	; 0x80
 800d7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ea:	e224      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4ab1      	ldr	r2, [pc, #708]	; (800dab8 <UART_SetConfig+0x630>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d176      	bne.n	800d8e4 <UART_SetConfig+0x45c>
 800d7f6:	4bb1      	ldr	r3, [pc, #708]	; (800dabc <UART_SetConfig+0x634>)
 800d7f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d7fe:	2b28      	cmp	r3, #40	; 0x28
 800d800:	d86c      	bhi.n	800d8dc <UART_SetConfig+0x454>
 800d802:	a201      	add	r2, pc, #4	; (adr r2, 800d808 <UART_SetConfig+0x380>)
 800d804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d808:	0800d8ad 	.word	0x0800d8ad
 800d80c:	0800d8dd 	.word	0x0800d8dd
 800d810:	0800d8dd 	.word	0x0800d8dd
 800d814:	0800d8dd 	.word	0x0800d8dd
 800d818:	0800d8dd 	.word	0x0800d8dd
 800d81c:	0800d8dd 	.word	0x0800d8dd
 800d820:	0800d8dd 	.word	0x0800d8dd
 800d824:	0800d8dd 	.word	0x0800d8dd
 800d828:	0800d8b5 	.word	0x0800d8b5
 800d82c:	0800d8dd 	.word	0x0800d8dd
 800d830:	0800d8dd 	.word	0x0800d8dd
 800d834:	0800d8dd 	.word	0x0800d8dd
 800d838:	0800d8dd 	.word	0x0800d8dd
 800d83c:	0800d8dd 	.word	0x0800d8dd
 800d840:	0800d8dd 	.word	0x0800d8dd
 800d844:	0800d8dd 	.word	0x0800d8dd
 800d848:	0800d8bd 	.word	0x0800d8bd
 800d84c:	0800d8dd 	.word	0x0800d8dd
 800d850:	0800d8dd 	.word	0x0800d8dd
 800d854:	0800d8dd 	.word	0x0800d8dd
 800d858:	0800d8dd 	.word	0x0800d8dd
 800d85c:	0800d8dd 	.word	0x0800d8dd
 800d860:	0800d8dd 	.word	0x0800d8dd
 800d864:	0800d8dd 	.word	0x0800d8dd
 800d868:	0800d8c5 	.word	0x0800d8c5
 800d86c:	0800d8dd 	.word	0x0800d8dd
 800d870:	0800d8dd 	.word	0x0800d8dd
 800d874:	0800d8dd 	.word	0x0800d8dd
 800d878:	0800d8dd 	.word	0x0800d8dd
 800d87c:	0800d8dd 	.word	0x0800d8dd
 800d880:	0800d8dd 	.word	0x0800d8dd
 800d884:	0800d8dd 	.word	0x0800d8dd
 800d888:	0800d8cd 	.word	0x0800d8cd
 800d88c:	0800d8dd 	.word	0x0800d8dd
 800d890:	0800d8dd 	.word	0x0800d8dd
 800d894:	0800d8dd 	.word	0x0800d8dd
 800d898:	0800d8dd 	.word	0x0800d8dd
 800d89c:	0800d8dd 	.word	0x0800d8dd
 800d8a0:	0800d8dd 	.word	0x0800d8dd
 800d8a4:	0800d8dd 	.word	0x0800d8dd
 800d8a8:	0800d8d5 	.word	0x0800d8d5
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8b2:	e1c0      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d8b4:	2304      	movs	r3, #4
 800d8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ba:	e1bc      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d8bc:	2308      	movs	r3, #8
 800d8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8c2:	e1b8      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d8c4:	2310      	movs	r3, #16
 800d8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ca:	e1b4      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d8cc:	2320      	movs	r3, #32
 800d8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8d2:	e1b0      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d8d4:	2340      	movs	r3, #64	; 0x40
 800d8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8da:	e1ac      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d8dc:	2380      	movs	r3, #128	; 0x80
 800d8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8e2:	e1a8      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4a75      	ldr	r2, [pc, #468]	; (800dac0 <UART_SetConfig+0x638>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d130      	bne.n	800d950 <UART_SetConfig+0x4c8>
 800d8ee:	4b73      	ldr	r3, [pc, #460]	; (800dabc <UART_SetConfig+0x634>)
 800d8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8f2:	f003 0307 	and.w	r3, r3, #7
 800d8f6:	2b05      	cmp	r3, #5
 800d8f8:	d826      	bhi.n	800d948 <UART_SetConfig+0x4c0>
 800d8fa:	a201      	add	r2, pc, #4	; (adr r2, 800d900 <UART_SetConfig+0x478>)
 800d8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d900:	0800d919 	.word	0x0800d919
 800d904:	0800d921 	.word	0x0800d921
 800d908:	0800d929 	.word	0x0800d929
 800d90c:	0800d931 	.word	0x0800d931
 800d910:	0800d939 	.word	0x0800d939
 800d914:	0800d941 	.word	0x0800d941
 800d918:	2300      	movs	r3, #0
 800d91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d91e:	e18a      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d920:	2304      	movs	r3, #4
 800d922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d926:	e186      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d928:	2308      	movs	r3, #8
 800d92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d92e:	e182      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d930:	2310      	movs	r3, #16
 800d932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d936:	e17e      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d938:	2320      	movs	r3, #32
 800d93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d93e:	e17a      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d940:	2340      	movs	r3, #64	; 0x40
 800d942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d946:	e176      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d948:	2380      	movs	r3, #128	; 0x80
 800d94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d94e:	e172      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4a5b      	ldr	r2, [pc, #364]	; (800dac4 <UART_SetConfig+0x63c>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d130      	bne.n	800d9bc <UART_SetConfig+0x534>
 800d95a:	4b58      	ldr	r3, [pc, #352]	; (800dabc <UART_SetConfig+0x634>)
 800d95c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d95e:	f003 0307 	and.w	r3, r3, #7
 800d962:	2b05      	cmp	r3, #5
 800d964:	d826      	bhi.n	800d9b4 <UART_SetConfig+0x52c>
 800d966:	a201      	add	r2, pc, #4	; (adr r2, 800d96c <UART_SetConfig+0x4e4>)
 800d968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d96c:	0800d985 	.word	0x0800d985
 800d970:	0800d98d 	.word	0x0800d98d
 800d974:	0800d995 	.word	0x0800d995
 800d978:	0800d99d 	.word	0x0800d99d
 800d97c:	0800d9a5 	.word	0x0800d9a5
 800d980:	0800d9ad 	.word	0x0800d9ad
 800d984:	2300      	movs	r3, #0
 800d986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d98a:	e154      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d98c:	2304      	movs	r3, #4
 800d98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d992:	e150      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d994:	2308      	movs	r3, #8
 800d996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d99a:	e14c      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d99c:	2310      	movs	r3, #16
 800d99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9a2:	e148      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d9a4:	2320      	movs	r3, #32
 800d9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9aa:	e144      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d9ac:	2340      	movs	r3, #64	; 0x40
 800d9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9b2:	e140      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d9b4:	2380      	movs	r3, #128	; 0x80
 800d9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ba:	e13c      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4a41      	ldr	r2, [pc, #260]	; (800dac8 <UART_SetConfig+0x640>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	f040 8082 	bne.w	800dacc <UART_SetConfig+0x644>
 800d9c8:	4b3c      	ldr	r3, [pc, #240]	; (800dabc <UART_SetConfig+0x634>)
 800d9ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d9d0:	2b28      	cmp	r3, #40	; 0x28
 800d9d2:	d86d      	bhi.n	800dab0 <UART_SetConfig+0x628>
 800d9d4:	a201      	add	r2, pc, #4	; (adr r2, 800d9dc <UART_SetConfig+0x554>)
 800d9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9da:	bf00      	nop
 800d9dc:	0800da81 	.word	0x0800da81
 800d9e0:	0800dab1 	.word	0x0800dab1
 800d9e4:	0800dab1 	.word	0x0800dab1
 800d9e8:	0800dab1 	.word	0x0800dab1
 800d9ec:	0800dab1 	.word	0x0800dab1
 800d9f0:	0800dab1 	.word	0x0800dab1
 800d9f4:	0800dab1 	.word	0x0800dab1
 800d9f8:	0800dab1 	.word	0x0800dab1
 800d9fc:	0800da89 	.word	0x0800da89
 800da00:	0800dab1 	.word	0x0800dab1
 800da04:	0800dab1 	.word	0x0800dab1
 800da08:	0800dab1 	.word	0x0800dab1
 800da0c:	0800dab1 	.word	0x0800dab1
 800da10:	0800dab1 	.word	0x0800dab1
 800da14:	0800dab1 	.word	0x0800dab1
 800da18:	0800dab1 	.word	0x0800dab1
 800da1c:	0800da91 	.word	0x0800da91
 800da20:	0800dab1 	.word	0x0800dab1
 800da24:	0800dab1 	.word	0x0800dab1
 800da28:	0800dab1 	.word	0x0800dab1
 800da2c:	0800dab1 	.word	0x0800dab1
 800da30:	0800dab1 	.word	0x0800dab1
 800da34:	0800dab1 	.word	0x0800dab1
 800da38:	0800dab1 	.word	0x0800dab1
 800da3c:	0800da99 	.word	0x0800da99
 800da40:	0800dab1 	.word	0x0800dab1
 800da44:	0800dab1 	.word	0x0800dab1
 800da48:	0800dab1 	.word	0x0800dab1
 800da4c:	0800dab1 	.word	0x0800dab1
 800da50:	0800dab1 	.word	0x0800dab1
 800da54:	0800dab1 	.word	0x0800dab1
 800da58:	0800dab1 	.word	0x0800dab1
 800da5c:	0800daa1 	.word	0x0800daa1
 800da60:	0800dab1 	.word	0x0800dab1
 800da64:	0800dab1 	.word	0x0800dab1
 800da68:	0800dab1 	.word	0x0800dab1
 800da6c:	0800dab1 	.word	0x0800dab1
 800da70:	0800dab1 	.word	0x0800dab1
 800da74:	0800dab1 	.word	0x0800dab1
 800da78:	0800dab1 	.word	0x0800dab1
 800da7c:	0800daa9 	.word	0x0800daa9
 800da80:	2301      	movs	r3, #1
 800da82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da86:	e0d6      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800da88:	2304      	movs	r3, #4
 800da8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da8e:	e0d2      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800da90:	2308      	movs	r3, #8
 800da92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da96:	e0ce      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800da98:	2310      	movs	r3, #16
 800da9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da9e:	e0ca      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800daa0:	2320      	movs	r3, #32
 800daa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daa6:	e0c6      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800daa8:	2340      	movs	r3, #64	; 0x40
 800daaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daae:	e0c2      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800dab0:	2380      	movs	r3, #128	; 0x80
 800dab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dab6:	e0be      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800dab8:	40011400 	.word	0x40011400
 800dabc:	58024400 	.word	0x58024400
 800dac0:	40007800 	.word	0x40007800
 800dac4:	40007c00 	.word	0x40007c00
 800dac8:	40011800 	.word	0x40011800
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4aad      	ldr	r2, [pc, #692]	; (800dd88 <UART_SetConfig+0x900>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d176      	bne.n	800dbc4 <UART_SetConfig+0x73c>
 800dad6:	4bad      	ldr	r3, [pc, #692]	; (800dd8c <UART_SetConfig+0x904>)
 800dad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dada:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dade:	2b28      	cmp	r3, #40	; 0x28
 800dae0:	d86c      	bhi.n	800dbbc <UART_SetConfig+0x734>
 800dae2:	a201      	add	r2, pc, #4	; (adr r2, 800dae8 <UART_SetConfig+0x660>)
 800dae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae8:	0800db8d 	.word	0x0800db8d
 800daec:	0800dbbd 	.word	0x0800dbbd
 800daf0:	0800dbbd 	.word	0x0800dbbd
 800daf4:	0800dbbd 	.word	0x0800dbbd
 800daf8:	0800dbbd 	.word	0x0800dbbd
 800dafc:	0800dbbd 	.word	0x0800dbbd
 800db00:	0800dbbd 	.word	0x0800dbbd
 800db04:	0800dbbd 	.word	0x0800dbbd
 800db08:	0800db95 	.word	0x0800db95
 800db0c:	0800dbbd 	.word	0x0800dbbd
 800db10:	0800dbbd 	.word	0x0800dbbd
 800db14:	0800dbbd 	.word	0x0800dbbd
 800db18:	0800dbbd 	.word	0x0800dbbd
 800db1c:	0800dbbd 	.word	0x0800dbbd
 800db20:	0800dbbd 	.word	0x0800dbbd
 800db24:	0800dbbd 	.word	0x0800dbbd
 800db28:	0800db9d 	.word	0x0800db9d
 800db2c:	0800dbbd 	.word	0x0800dbbd
 800db30:	0800dbbd 	.word	0x0800dbbd
 800db34:	0800dbbd 	.word	0x0800dbbd
 800db38:	0800dbbd 	.word	0x0800dbbd
 800db3c:	0800dbbd 	.word	0x0800dbbd
 800db40:	0800dbbd 	.word	0x0800dbbd
 800db44:	0800dbbd 	.word	0x0800dbbd
 800db48:	0800dba5 	.word	0x0800dba5
 800db4c:	0800dbbd 	.word	0x0800dbbd
 800db50:	0800dbbd 	.word	0x0800dbbd
 800db54:	0800dbbd 	.word	0x0800dbbd
 800db58:	0800dbbd 	.word	0x0800dbbd
 800db5c:	0800dbbd 	.word	0x0800dbbd
 800db60:	0800dbbd 	.word	0x0800dbbd
 800db64:	0800dbbd 	.word	0x0800dbbd
 800db68:	0800dbad 	.word	0x0800dbad
 800db6c:	0800dbbd 	.word	0x0800dbbd
 800db70:	0800dbbd 	.word	0x0800dbbd
 800db74:	0800dbbd 	.word	0x0800dbbd
 800db78:	0800dbbd 	.word	0x0800dbbd
 800db7c:	0800dbbd 	.word	0x0800dbbd
 800db80:	0800dbbd 	.word	0x0800dbbd
 800db84:	0800dbbd 	.word	0x0800dbbd
 800db88:	0800dbb5 	.word	0x0800dbb5
 800db8c:	2301      	movs	r3, #1
 800db8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db92:	e050      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800db94:	2304      	movs	r3, #4
 800db96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db9a:	e04c      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800db9c:	2308      	movs	r3, #8
 800db9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dba2:	e048      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800dba4:	2310      	movs	r3, #16
 800dba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbaa:	e044      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800dbac:	2320      	movs	r3, #32
 800dbae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbb2:	e040      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800dbb4:	2340      	movs	r3, #64	; 0x40
 800dbb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbba:	e03c      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800dbbc:	2380      	movs	r3, #128	; 0x80
 800dbbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbc2:	e038      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4a71      	ldr	r2, [pc, #452]	; (800dd90 <UART_SetConfig+0x908>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d130      	bne.n	800dc30 <UART_SetConfig+0x7a8>
 800dbce:	4b6f      	ldr	r3, [pc, #444]	; (800dd8c <UART_SetConfig+0x904>)
 800dbd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbd2:	f003 0307 	and.w	r3, r3, #7
 800dbd6:	2b05      	cmp	r3, #5
 800dbd8:	d826      	bhi.n	800dc28 <UART_SetConfig+0x7a0>
 800dbda:	a201      	add	r2, pc, #4	; (adr r2, 800dbe0 <UART_SetConfig+0x758>)
 800dbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe0:	0800dbf9 	.word	0x0800dbf9
 800dbe4:	0800dc01 	.word	0x0800dc01
 800dbe8:	0800dc09 	.word	0x0800dc09
 800dbec:	0800dc11 	.word	0x0800dc11
 800dbf0:	0800dc19 	.word	0x0800dc19
 800dbf4:	0800dc21 	.word	0x0800dc21
 800dbf8:	2302      	movs	r3, #2
 800dbfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbfe:	e01a      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800dc00:	2304      	movs	r3, #4
 800dc02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc06:	e016      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800dc08:	2308      	movs	r3, #8
 800dc0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc0e:	e012      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800dc10:	2310      	movs	r3, #16
 800dc12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc16:	e00e      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800dc18:	2320      	movs	r3, #32
 800dc1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc1e:	e00a      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800dc20:	2340      	movs	r3, #64	; 0x40
 800dc22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc26:	e006      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800dc28:	2380      	movs	r3, #128	; 0x80
 800dc2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc2e:	e002      	b.n	800dc36 <UART_SetConfig+0x7ae>
 800dc30:	2380      	movs	r3, #128	; 0x80
 800dc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	4a55      	ldr	r2, [pc, #340]	; (800dd90 <UART_SetConfig+0x908>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	f040 80f8 	bne.w	800de32 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dc42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dc46:	2b20      	cmp	r3, #32
 800dc48:	dc46      	bgt.n	800dcd8 <UART_SetConfig+0x850>
 800dc4a:	2b02      	cmp	r3, #2
 800dc4c:	db75      	blt.n	800dd3a <UART_SetConfig+0x8b2>
 800dc4e:	3b02      	subs	r3, #2
 800dc50:	2b1e      	cmp	r3, #30
 800dc52:	d872      	bhi.n	800dd3a <UART_SetConfig+0x8b2>
 800dc54:	a201      	add	r2, pc, #4	; (adr r2, 800dc5c <UART_SetConfig+0x7d4>)
 800dc56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc5a:	bf00      	nop
 800dc5c:	0800dcdf 	.word	0x0800dcdf
 800dc60:	0800dd3b 	.word	0x0800dd3b
 800dc64:	0800dce7 	.word	0x0800dce7
 800dc68:	0800dd3b 	.word	0x0800dd3b
 800dc6c:	0800dd3b 	.word	0x0800dd3b
 800dc70:	0800dd3b 	.word	0x0800dd3b
 800dc74:	0800dcf7 	.word	0x0800dcf7
 800dc78:	0800dd3b 	.word	0x0800dd3b
 800dc7c:	0800dd3b 	.word	0x0800dd3b
 800dc80:	0800dd3b 	.word	0x0800dd3b
 800dc84:	0800dd3b 	.word	0x0800dd3b
 800dc88:	0800dd3b 	.word	0x0800dd3b
 800dc8c:	0800dd3b 	.word	0x0800dd3b
 800dc90:	0800dd3b 	.word	0x0800dd3b
 800dc94:	0800dd07 	.word	0x0800dd07
 800dc98:	0800dd3b 	.word	0x0800dd3b
 800dc9c:	0800dd3b 	.word	0x0800dd3b
 800dca0:	0800dd3b 	.word	0x0800dd3b
 800dca4:	0800dd3b 	.word	0x0800dd3b
 800dca8:	0800dd3b 	.word	0x0800dd3b
 800dcac:	0800dd3b 	.word	0x0800dd3b
 800dcb0:	0800dd3b 	.word	0x0800dd3b
 800dcb4:	0800dd3b 	.word	0x0800dd3b
 800dcb8:	0800dd3b 	.word	0x0800dd3b
 800dcbc:	0800dd3b 	.word	0x0800dd3b
 800dcc0:	0800dd3b 	.word	0x0800dd3b
 800dcc4:	0800dd3b 	.word	0x0800dd3b
 800dcc8:	0800dd3b 	.word	0x0800dd3b
 800dccc:	0800dd3b 	.word	0x0800dd3b
 800dcd0:	0800dd3b 	.word	0x0800dd3b
 800dcd4:	0800dd2d 	.word	0x0800dd2d
 800dcd8:	2b40      	cmp	r3, #64	; 0x40
 800dcda:	d02a      	beq.n	800dd32 <UART_SetConfig+0x8aa>
 800dcdc:	e02d      	b.n	800dd3a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dcde:	f7fc fdfd 	bl	800a8dc <HAL_RCCEx_GetD3PCLK1Freq>
 800dce2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dce4:	e02f      	b.n	800dd46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7fc fe0c 	bl	800a908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcf4:	e027      	b.n	800dd46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dcf6:	f107 0318 	add.w	r3, r7, #24
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7fc ff58 	bl	800abb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd04:	e01f      	b.n	800dd46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd06:	4b21      	ldr	r3, [pc, #132]	; (800dd8c <UART_SetConfig+0x904>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f003 0320 	and.w	r3, r3, #32
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d009      	beq.n	800dd26 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd12:	4b1e      	ldr	r3, [pc, #120]	; (800dd8c <UART_SetConfig+0x904>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	08db      	lsrs	r3, r3, #3
 800dd18:	f003 0303 	and.w	r3, r3, #3
 800dd1c:	4a1d      	ldr	r2, [pc, #116]	; (800dd94 <UART_SetConfig+0x90c>)
 800dd1e:	fa22 f303 	lsr.w	r3, r2, r3
 800dd22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd24:	e00f      	b.n	800dd46 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dd26:	4b1b      	ldr	r3, [pc, #108]	; (800dd94 <UART_SetConfig+0x90c>)
 800dd28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd2a:	e00c      	b.n	800dd46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd2c:	4b1a      	ldr	r3, [pc, #104]	; (800dd98 <UART_SetConfig+0x910>)
 800dd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd30:	e009      	b.n	800dd46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd38:	e005      	b.n	800dd46 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dd44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dd46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	f000 81ee 	beq.w	800e12a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd52:	4a12      	ldr	r2, [pc, #72]	; (800dd9c <UART_SetConfig+0x914>)
 800dd54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd58:	461a      	mov	r2, r3
 800dd5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd60:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	685a      	ldr	r2, [r3, #4]
 800dd66:	4613      	mov	r3, r2
 800dd68:	005b      	lsls	r3, r3, #1
 800dd6a:	4413      	add	r3, r2
 800dd6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d305      	bcc.n	800dd7e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	685b      	ldr	r3, [r3, #4]
 800dd76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dd78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d910      	bls.n	800dda0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dd84:	e1d1      	b.n	800e12a <UART_SetConfig+0xca2>
 800dd86:	bf00      	nop
 800dd88:	40011c00 	.word	0x40011c00
 800dd8c:	58024400 	.word	0x58024400
 800dd90:	58000c00 	.word	0x58000c00
 800dd94:	03d09000 	.word	0x03d09000
 800dd98:	003d0900 	.word	0x003d0900
 800dd9c:	0800f358 	.word	0x0800f358
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dda0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dda2:	2200      	movs	r2, #0
 800dda4:	60bb      	str	r3, [r7, #8]
 800dda6:	60fa      	str	r2, [r7, #12]
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddac:	4ac0      	ldr	r2, [pc, #768]	; (800e0b0 <UART_SetConfig+0xc28>)
 800ddae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	603b      	str	r3, [r7, #0]
 800ddb8:	607a      	str	r2, [r7, #4]
 800ddba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ddbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ddc2:	f7f2 faad 	bl	8000320 <__aeabi_uldivmod>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	460b      	mov	r3, r1
 800ddca:	4610      	mov	r0, r2
 800ddcc:	4619      	mov	r1, r3
 800ddce:	f04f 0200 	mov.w	r2, #0
 800ddd2:	f04f 0300 	mov.w	r3, #0
 800ddd6:	020b      	lsls	r3, r1, #8
 800ddd8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dddc:	0202      	lsls	r2, r0, #8
 800ddde:	6979      	ldr	r1, [r7, #20]
 800dde0:	6849      	ldr	r1, [r1, #4]
 800dde2:	0849      	lsrs	r1, r1, #1
 800dde4:	2000      	movs	r0, #0
 800dde6:	460c      	mov	r4, r1
 800dde8:	4605      	mov	r5, r0
 800ddea:	eb12 0804 	adds.w	r8, r2, r4
 800ddee:	eb43 0905 	adc.w	r9, r3, r5
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	469a      	mov	sl, r3
 800ddfa:	4693      	mov	fp, r2
 800ddfc:	4652      	mov	r2, sl
 800ddfe:	465b      	mov	r3, fp
 800de00:	4640      	mov	r0, r8
 800de02:	4649      	mov	r1, r9
 800de04:	f7f2 fa8c 	bl	8000320 <__aeabi_uldivmod>
 800de08:	4602      	mov	r2, r0
 800de0a:	460b      	mov	r3, r1
 800de0c:	4613      	mov	r3, r2
 800de0e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800de10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800de16:	d308      	bcc.n	800de2a <UART_SetConfig+0x9a2>
 800de18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de1e:	d204      	bcs.n	800de2a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de26:	60da      	str	r2, [r3, #12]
 800de28:	e17f      	b.n	800e12a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800de2a:	2301      	movs	r3, #1
 800de2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800de30:	e17b      	b.n	800e12a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	69db      	ldr	r3, [r3, #28]
 800de36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de3a:	f040 80bd 	bne.w	800dfb8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800de3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800de42:	2b20      	cmp	r3, #32
 800de44:	dc48      	bgt.n	800ded8 <UART_SetConfig+0xa50>
 800de46:	2b00      	cmp	r3, #0
 800de48:	db7b      	blt.n	800df42 <UART_SetConfig+0xaba>
 800de4a:	2b20      	cmp	r3, #32
 800de4c:	d879      	bhi.n	800df42 <UART_SetConfig+0xaba>
 800de4e:	a201      	add	r2, pc, #4	; (adr r2, 800de54 <UART_SetConfig+0x9cc>)
 800de50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de54:	0800dedf 	.word	0x0800dedf
 800de58:	0800dee7 	.word	0x0800dee7
 800de5c:	0800df43 	.word	0x0800df43
 800de60:	0800df43 	.word	0x0800df43
 800de64:	0800deef 	.word	0x0800deef
 800de68:	0800df43 	.word	0x0800df43
 800de6c:	0800df43 	.word	0x0800df43
 800de70:	0800df43 	.word	0x0800df43
 800de74:	0800deff 	.word	0x0800deff
 800de78:	0800df43 	.word	0x0800df43
 800de7c:	0800df43 	.word	0x0800df43
 800de80:	0800df43 	.word	0x0800df43
 800de84:	0800df43 	.word	0x0800df43
 800de88:	0800df43 	.word	0x0800df43
 800de8c:	0800df43 	.word	0x0800df43
 800de90:	0800df43 	.word	0x0800df43
 800de94:	0800df0f 	.word	0x0800df0f
 800de98:	0800df43 	.word	0x0800df43
 800de9c:	0800df43 	.word	0x0800df43
 800dea0:	0800df43 	.word	0x0800df43
 800dea4:	0800df43 	.word	0x0800df43
 800dea8:	0800df43 	.word	0x0800df43
 800deac:	0800df43 	.word	0x0800df43
 800deb0:	0800df43 	.word	0x0800df43
 800deb4:	0800df43 	.word	0x0800df43
 800deb8:	0800df43 	.word	0x0800df43
 800debc:	0800df43 	.word	0x0800df43
 800dec0:	0800df43 	.word	0x0800df43
 800dec4:	0800df43 	.word	0x0800df43
 800dec8:	0800df43 	.word	0x0800df43
 800decc:	0800df43 	.word	0x0800df43
 800ded0:	0800df43 	.word	0x0800df43
 800ded4:	0800df35 	.word	0x0800df35
 800ded8:	2b40      	cmp	r3, #64	; 0x40
 800deda:	d02e      	beq.n	800df3a <UART_SetConfig+0xab2>
 800dedc:	e031      	b.n	800df42 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dede:	f7fb fb31 	bl	8009544 <HAL_RCC_GetPCLK1Freq>
 800dee2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dee4:	e033      	b.n	800df4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dee6:	f7fb fb43 	bl	8009570 <HAL_RCC_GetPCLK2Freq>
 800deea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800deec:	e02f      	b.n	800df4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800deee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800def2:	4618      	mov	r0, r3
 800def4:	f7fc fd08 	bl	800a908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800def8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800defc:	e027      	b.n	800df4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800defe:	f107 0318 	add.w	r3, r7, #24
 800df02:	4618      	mov	r0, r3
 800df04:	f7fc fe54 	bl	800abb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800df08:	69fb      	ldr	r3, [r7, #28]
 800df0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df0c:	e01f      	b.n	800df4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df0e:	4b69      	ldr	r3, [pc, #420]	; (800e0b4 <UART_SetConfig+0xc2c>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f003 0320 	and.w	r3, r3, #32
 800df16:	2b00      	cmp	r3, #0
 800df18:	d009      	beq.n	800df2e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df1a:	4b66      	ldr	r3, [pc, #408]	; (800e0b4 <UART_SetConfig+0xc2c>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	08db      	lsrs	r3, r3, #3
 800df20:	f003 0303 	and.w	r3, r3, #3
 800df24:	4a64      	ldr	r2, [pc, #400]	; (800e0b8 <UART_SetConfig+0xc30>)
 800df26:	fa22 f303 	lsr.w	r3, r2, r3
 800df2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df2c:	e00f      	b.n	800df4e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800df2e:	4b62      	ldr	r3, [pc, #392]	; (800e0b8 <UART_SetConfig+0xc30>)
 800df30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df32:	e00c      	b.n	800df4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df34:	4b61      	ldr	r3, [pc, #388]	; (800e0bc <UART_SetConfig+0xc34>)
 800df36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df38:	e009      	b.n	800df4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df40:	e005      	b.n	800df4e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800df42:	2300      	movs	r3, #0
 800df44:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800df46:	2301      	movs	r3, #1
 800df48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800df4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800df4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df50:	2b00      	cmp	r3, #0
 800df52:	f000 80ea 	beq.w	800e12a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df5a:	4a55      	ldr	r2, [pc, #340]	; (800e0b0 <UART_SetConfig+0xc28>)
 800df5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df60:	461a      	mov	r2, r3
 800df62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df64:	fbb3 f3f2 	udiv	r3, r3, r2
 800df68:	005a      	lsls	r2, r3, #1
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	085b      	lsrs	r3, r3, #1
 800df70:	441a      	add	r2, r3
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	fbb2 f3f3 	udiv	r3, r2, r3
 800df7a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df7e:	2b0f      	cmp	r3, #15
 800df80:	d916      	bls.n	800dfb0 <UART_SetConfig+0xb28>
 800df82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df88:	d212      	bcs.n	800dfb0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800df8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	f023 030f 	bic.w	r3, r3, #15
 800df92:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800df94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df96:	085b      	lsrs	r3, r3, #1
 800df98:	b29b      	uxth	r3, r3
 800df9a:	f003 0307 	and.w	r3, r3, #7
 800df9e:	b29a      	uxth	r2, r3
 800dfa0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dfa2:	4313      	orrs	r3, r2
 800dfa4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800dfac:	60da      	str	r2, [r3, #12]
 800dfae:	e0bc      	b.n	800e12a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dfb6:	e0b8      	b.n	800e12a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dfb8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dfbc:	2b20      	cmp	r3, #32
 800dfbe:	dc4b      	bgt.n	800e058 <UART_SetConfig+0xbd0>
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	f2c0 8087 	blt.w	800e0d4 <UART_SetConfig+0xc4c>
 800dfc6:	2b20      	cmp	r3, #32
 800dfc8:	f200 8084 	bhi.w	800e0d4 <UART_SetConfig+0xc4c>
 800dfcc:	a201      	add	r2, pc, #4	; (adr r2, 800dfd4 <UART_SetConfig+0xb4c>)
 800dfce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfd2:	bf00      	nop
 800dfd4:	0800e05f 	.word	0x0800e05f
 800dfd8:	0800e067 	.word	0x0800e067
 800dfdc:	0800e0d5 	.word	0x0800e0d5
 800dfe0:	0800e0d5 	.word	0x0800e0d5
 800dfe4:	0800e06f 	.word	0x0800e06f
 800dfe8:	0800e0d5 	.word	0x0800e0d5
 800dfec:	0800e0d5 	.word	0x0800e0d5
 800dff0:	0800e0d5 	.word	0x0800e0d5
 800dff4:	0800e07f 	.word	0x0800e07f
 800dff8:	0800e0d5 	.word	0x0800e0d5
 800dffc:	0800e0d5 	.word	0x0800e0d5
 800e000:	0800e0d5 	.word	0x0800e0d5
 800e004:	0800e0d5 	.word	0x0800e0d5
 800e008:	0800e0d5 	.word	0x0800e0d5
 800e00c:	0800e0d5 	.word	0x0800e0d5
 800e010:	0800e0d5 	.word	0x0800e0d5
 800e014:	0800e08f 	.word	0x0800e08f
 800e018:	0800e0d5 	.word	0x0800e0d5
 800e01c:	0800e0d5 	.word	0x0800e0d5
 800e020:	0800e0d5 	.word	0x0800e0d5
 800e024:	0800e0d5 	.word	0x0800e0d5
 800e028:	0800e0d5 	.word	0x0800e0d5
 800e02c:	0800e0d5 	.word	0x0800e0d5
 800e030:	0800e0d5 	.word	0x0800e0d5
 800e034:	0800e0d5 	.word	0x0800e0d5
 800e038:	0800e0d5 	.word	0x0800e0d5
 800e03c:	0800e0d5 	.word	0x0800e0d5
 800e040:	0800e0d5 	.word	0x0800e0d5
 800e044:	0800e0d5 	.word	0x0800e0d5
 800e048:	0800e0d5 	.word	0x0800e0d5
 800e04c:	0800e0d5 	.word	0x0800e0d5
 800e050:	0800e0d5 	.word	0x0800e0d5
 800e054:	0800e0c7 	.word	0x0800e0c7
 800e058:	2b40      	cmp	r3, #64	; 0x40
 800e05a:	d037      	beq.n	800e0cc <UART_SetConfig+0xc44>
 800e05c:	e03a      	b.n	800e0d4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e05e:	f7fb fa71 	bl	8009544 <HAL_RCC_GetPCLK1Freq>
 800e062:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e064:	e03c      	b.n	800e0e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e066:	f7fb fa83 	bl	8009570 <HAL_RCC_GetPCLK2Freq>
 800e06a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e06c:	e038      	b.n	800e0e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e06e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e072:	4618      	mov	r0, r3
 800e074:	f7fc fc48 	bl	800a908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e07a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e07c:	e030      	b.n	800e0e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e07e:	f107 0318 	add.w	r3, r7, #24
 800e082:	4618      	mov	r0, r3
 800e084:	f7fc fd94 	bl	800abb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e088:	69fb      	ldr	r3, [r7, #28]
 800e08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e08c:	e028      	b.n	800e0e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e08e:	4b09      	ldr	r3, [pc, #36]	; (800e0b4 <UART_SetConfig+0xc2c>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f003 0320 	and.w	r3, r3, #32
 800e096:	2b00      	cmp	r3, #0
 800e098:	d012      	beq.n	800e0c0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e09a:	4b06      	ldr	r3, [pc, #24]	; (800e0b4 <UART_SetConfig+0xc2c>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	08db      	lsrs	r3, r3, #3
 800e0a0:	f003 0303 	and.w	r3, r3, #3
 800e0a4:	4a04      	ldr	r2, [pc, #16]	; (800e0b8 <UART_SetConfig+0xc30>)
 800e0a6:	fa22 f303 	lsr.w	r3, r2, r3
 800e0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e0ac:	e018      	b.n	800e0e0 <UART_SetConfig+0xc58>
 800e0ae:	bf00      	nop
 800e0b0:	0800f358 	.word	0x0800f358
 800e0b4:	58024400 	.word	0x58024400
 800e0b8:	03d09000 	.word	0x03d09000
 800e0bc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e0c0:	4b24      	ldr	r3, [pc, #144]	; (800e154 <UART_SetConfig+0xccc>)
 800e0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0c4:	e00c      	b.n	800e0e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e0c6:	4b24      	ldr	r3, [pc, #144]	; (800e158 <UART_SetConfig+0xcd0>)
 800e0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0ca:	e009      	b.n	800e0e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e0cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0d2:	e005      	b.n	800e0e0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e0de:	bf00      	nop
    }

    if (pclk != 0U)
 800e0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d021      	beq.n	800e12a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ea:	4a1c      	ldr	r2, [pc, #112]	; (800e15c <UART_SetConfig+0xcd4>)
 800e0ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0f4:	fbb3 f2f2 	udiv	r2, r3, r2
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	085b      	lsrs	r3, r3, #1
 800e0fe:	441a      	add	r2, r3
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	fbb2 f3f3 	udiv	r3, r2, r3
 800e108:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10c:	2b0f      	cmp	r3, #15
 800e10e:	d909      	bls.n	800e124 <UART_SetConfig+0xc9c>
 800e110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e116:	d205      	bcs.n	800e124 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11a:	b29a      	uxth	r2, r3
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	60da      	str	r2, [r3, #12]
 800e122:	e002      	b.n	800e12a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e124:	2301      	movs	r3, #1
 800e126:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	2201      	movs	r2, #1
 800e12e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	2201      	movs	r2, #1
 800e136:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	2200      	movs	r2, #0
 800e13e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	2200      	movs	r2, #0
 800e144:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e146:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3748      	adds	r7, #72	; 0x48
 800e14e:	46bd      	mov	sp, r7
 800e150:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e154:	03d09000 	.word	0x03d09000
 800e158:	003d0900 	.word	0x003d0900
 800e15c:	0800f358 	.word	0x0800f358

0800e160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e160:	b480      	push	{r7}
 800e162:	b083      	sub	sp, #12
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e16c:	f003 0301 	and.w	r3, r3, #1
 800e170:	2b00      	cmp	r3, #0
 800e172:	d00a      	beq.n	800e18a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	430a      	orrs	r2, r1
 800e188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e18e:	f003 0302 	and.w	r3, r3, #2
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00a      	beq.n	800e1ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	430a      	orrs	r2, r1
 800e1aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1b0:	f003 0304 	and.w	r3, r3, #4
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d00a      	beq.n	800e1ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	430a      	orrs	r2, r1
 800e1cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1d2:	f003 0308 	and.w	r3, r3, #8
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00a      	beq.n	800e1f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	430a      	orrs	r2, r1
 800e1ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1f4:	f003 0310 	and.w	r3, r3, #16
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d00a      	beq.n	800e212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	689b      	ldr	r3, [r3, #8]
 800e202:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	430a      	orrs	r2, r1
 800e210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e216:	f003 0320 	and.w	r3, r3, #32
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00a      	beq.n	800e234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	689b      	ldr	r3, [r3, #8]
 800e224:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	430a      	orrs	r2, r1
 800e232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d01a      	beq.n	800e276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	430a      	orrs	r2, r1
 800e254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e25a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e25e:	d10a      	bne.n	800e276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	430a      	orrs	r2, r1
 800e274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e27a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d00a      	beq.n	800e298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	430a      	orrs	r2, r1
 800e296:	605a      	str	r2, [r3, #4]
  }
}
 800e298:	bf00      	nop
 800e29a:	370c      	adds	r7, #12
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	4770      	bx	lr

0800e2a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b098      	sub	sp, #96	; 0x60
 800e2a8:	af02      	add	r7, sp, #8
 800e2aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e2b4:	f7f6 fdd0 	bl	8004e58 <HAL_GetTick>
 800e2b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f003 0308 	and.w	r3, r3, #8
 800e2c4:	2b08      	cmp	r3, #8
 800e2c6:	d12f      	bne.n	800e328 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e2c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e2cc:	9300      	str	r3, [sp, #0]
 800e2ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 f88e 	bl	800e3f8 <UART_WaitOnFlagUntilTimeout>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d022      	beq.n	800e328 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ea:	e853 3f00 	ldrex	r3, [r3]
 800e2ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2f6:	653b      	str	r3, [r7, #80]	; 0x50
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e300:	647b      	str	r3, [r7, #68]	; 0x44
 800e302:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e304:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e308:	e841 2300 	strex	r3, r2, [r1]
 800e30c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e310:	2b00      	cmp	r3, #0
 800e312:	d1e6      	bne.n	800e2e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2220      	movs	r2, #32
 800e318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2200      	movs	r2, #0
 800e320:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e324:	2303      	movs	r3, #3
 800e326:	e063      	b.n	800e3f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f003 0304 	and.w	r3, r3, #4
 800e332:	2b04      	cmp	r3, #4
 800e334:	d149      	bne.n	800e3ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e336:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e33a:	9300      	str	r3, [sp, #0]
 800e33c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e33e:	2200      	movs	r2, #0
 800e340:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f000 f857 	bl	800e3f8 <UART_WaitOnFlagUntilTimeout>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d03c      	beq.n	800e3ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e358:	e853 3f00 	ldrex	r3, [r3]
 800e35c:	623b      	str	r3, [r7, #32]
   return(result);
 800e35e:	6a3b      	ldr	r3, [r7, #32]
 800e360:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e364:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	461a      	mov	r2, r3
 800e36c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e36e:	633b      	str	r3, [r7, #48]	; 0x30
 800e370:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e372:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e376:	e841 2300 	strex	r3, r2, [r1]
 800e37a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d1e6      	bne.n	800e350 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	3308      	adds	r3, #8
 800e388:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	e853 3f00 	ldrex	r3, [r3]
 800e390:	60fb      	str	r3, [r7, #12]
   return(result);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	f023 0301 	bic.w	r3, r3, #1
 800e398:	64bb      	str	r3, [r7, #72]	; 0x48
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	3308      	adds	r3, #8
 800e3a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3a2:	61fa      	str	r2, [r7, #28]
 800e3a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3a6:	69b9      	ldr	r1, [r7, #24]
 800e3a8:	69fa      	ldr	r2, [r7, #28]
 800e3aa:	e841 2300 	strex	r3, r2, [r1]
 800e3ae:	617b      	str	r3, [r7, #20]
   return(result);
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d1e5      	bne.n	800e382 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2220      	movs	r2, #32
 800e3ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e3c6:	2303      	movs	r3, #3
 800e3c8:	e012      	b.n	800e3f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2220      	movs	r2, #32
 800e3ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2220      	movs	r2, #32
 800e3d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2200      	movs	r2, #0
 800e3de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e3ee:	2300      	movs	r3, #0
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3758      	adds	r7, #88	; 0x58
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	603b      	str	r3, [r7, #0]
 800e404:	4613      	mov	r3, r2
 800e406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e408:	e049      	b.n	800e49e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e40a:	69bb      	ldr	r3, [r7, #24]
 800e40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e410:	d045      	beq.n	800e49e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e412:	f7f6 fd21 	bl	8004e58 <HAL_GetTick>
 800e416:	4602      	mov	r2, r0
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	1ad3      	subs	r3, r2, r3
 800e41c:	69ba      	ldr	r2, [r7, #24]
 800e41e:	429a      	cmp	r2, r3
 800e420:	d302      	bcc.n	800e428 <UART_WaitOnFlagUntilTimeout+0x30>
 800e422:	69bb      	ldr	r3, [r7, #24]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d101      	bne.n	800e42c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e428:	2303      	movs	r3, #3
 800e42a:	e048      	b.n	800e4be <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f003 0304 	and.w	r3, r3, #4
 800e436:	2b00      	cmp	r3, #0
 800e438:	d031      	beq.n	800e49e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	69db      	ldr	r3, [r3, #28]
 800e440:	f003 0308 	and.w	r3, r3, #8
 800e444:	2b08      	cmp	r3, #8
 800e446:	d110      	bne.n	800e46a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	2208      	movs	r2, #8
 800e44e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	f000 f921 	bl	800e698 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2208      	movs	r2, #8
 800e45a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2200      	movs	r2, #0
 800e462:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800e466:	2301      	movs	r3, #1
 800e468:	e029      	b.n	800e4be <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	69db      	ldr	r3, [r3, #28]
 800e470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e478:	d111      	bne.n	800e49e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e484:	68f8      	ldr	r0, [r7, #12]
 800e486:	f000 f907 	bl	800e698 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2220      	movs	r2, #32
 800e48e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2200      	movs	r2, #0
 800e496:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e49a:	2303      	movs	r3, #3
 800e49c:	e00f      	b.n	800e4be <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	69da      	ldr	r2, [r3, #28]
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	4013      	ands	r3, r2
 800e4a8:	68ba      	ldr	r2, [r7, #8]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	bf0c      	ite	eq
 800e4ae:	2301      	moveq	r3, #1
 800e4b0:	2300      	movne	r3, #0
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	461a      	mov	r2, r3
 800e4b6:	79fb      	ldrb	r3, [r7, #7]
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d0a6      	beq.n	800e40a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e4bc:	2300      	movs	r3, #0
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3710      	adds	r7, #16
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
	...

0800e4c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b096      	sub	sp, #88	; 0x58
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	60f8      	str	r0, [r7, #12]
 800e4d0:	60b9      	str	r1, [r7, #8]
 800e4d2:	4613      	mov	r3, r2
 800e4d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	68ba      	ldr	r2, [r7, #8]
 800e4da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	88fa      	ldrh	r2, [r7, #6]
 800e4e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2222      	movs	r2, #34	; 0x22
 800e4f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d02d      	beq.n	800e55a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e504:	4a40      	ldr	r2, [pc, #256]	; (800e608 <UART_Start_Receive_DMA+0x140>)
 800e506:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e50e:	4a3f      	ldr	r2, [pc, #252]	; (800e60c <UART_Start_Receive_DMA+0x144>)
 800e510:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e518:	4a3d      	ldr	r2, [pc, #244]	; (800e610 <UART_Start_Receive_DMA+0x148>)
 800e51a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e522:	2200      	movs	r2, #0
 800e524:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	3324      	adds	r3, #36	; 0x24
 800e532:	4619      	mov	r1, r3
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e538:	461a      	mov	r2, r3
 800e53a:	88fb      	ldrh	r3, [r7, #6]
 800e53c:	f7f7 faea 	bl	8005b14 <HAL_DMA_Start_IT>
 800e540:	4603      	mov	r3, r0
 800e542:	2b00      	cmp	r3, #0
 800e544:	d009      	beq.n	800e55a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2210      	movs	r2, #16
 800e54a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2220      	movs	r2, #32
 800e552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800e556:	2301      	movs	r3, #1
 800e558:	e051      	b.n	800e5fe <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	691b      	ldr	r3, [r3, #16]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d018      	beq.n	800e594 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e56a:	e853 3f00 	ldrex	r3, [r3]
 800e56e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e576:	657b      	str	r3, [r7, #84]	; 0x54
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	461a      	mov	r2, r3
 800e57e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e580:	64bb      	str	r3, [r7, #72]	; 0x48
 800e582:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e584:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e588:	e841 2300 	strex	r3, r2, [r1]
 800e58c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e58e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e590:	2b00      	cmp	r3, #0
 800e592:	d1e6      	bne.n	800e562 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	3308      	adds	r3, #8
 800e59a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59e:	e853 3f00 	ldrex	r3, [r3]
 800e5a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a6:	f043 0301 	orr.w	r3, r3, #1
 800e5aa:	653b      	str	r3, [r7, #80]	; 0x50
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	3308      	adds	r3, #8
 800e5b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e5b4:	637a      	str	r2, [r7, #52]	; 0x34
 800e5b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e5ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5bc:	e841 2300 	strex	r3, r2, [r1]
 800e5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d1e5      	bne.n	800e594 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	3308      	adds	r3, #8
 800e5ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	e853 3f00 	ldrex	r3, [r3]
 800e5d6:	613b      	str	r3, [r7, #16]
   return(result);
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	3308      	adds	r3, #8
 800e5e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e5e8:	623a      	str	r2, [r7, #32]
 800e5ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ec:	69f9      	ldr	r1, [r7, #28]
 800e5ee:	6a3a      	ldr	r2, [r7, #32]
 800e5f0:	e841 2300 	strex	r3, r2, [r1]
 800e5f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e5f6:	69bb      	ldr	r3, [r7, #24]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d1e5      	bne.n	800e5c8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e5fc:	2300      	movs	r3, #0
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3758      	adds	r7, #88	; 0x58
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop
 800e608:	0800e817 	.word	0x0800e817
 800e60c:	0800e93f 	.word	0x0800e93f
 800e610:	0800e97d 	.word	0x0800e97d

0800e614 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e614:	b480      	push	{r7}
 800e616:	b08f      	sub	sp, #60	; 0x3c
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e622:	6a3b      	ldr	r3, [r7, #32]
 800e624:	e853 3f00 	ldrex	r3, [r3]
 800e628:	61fb      	str	r3, [r7, #28]
   return(result);
 800e62a:	69fb      	ldr	r3, [r7, #28]
 800e62c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e630:	637b      	str	r3, [r7, #52]	; 0x34
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	461a      	mov	r2, r3
 800e638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e63a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e63c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e63e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e642:	e841 2300 	strex	r3, r2, [r1]
 800e646:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d1e6      	bne.n	800e61c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	3308      	adds	r3, #8
 800e654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	e853 3f00 	ldrex	r3, [r3]
 800e65c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e664:	633b      	str	r3, [r7, #48]	; 0x30
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	3308      	adds	r3, #8
 800e66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e66e:	61ba      	str	r2, [r7, #24]
 800e670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e672:	6979      	ldr	r1, [r7, #20]
 800e674:	69ba      	ldr	r2, [r7, #24]
 800e676:	e841 2300 	strex	r3, r2, [r1]
 800e67a:	613b      	str	r3, [r7, #16]
   return(result);
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d1e5      	bne.n	800e64e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2220      	movs	r2, #32
 800e686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800e68a:	bf00      	nop
 800e68c:	373c      	adds	r7, #60	; 0x3c
 800e68e:	46bd      	mov	sp, r7
 800e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e694:	4770      	bx	lr
	...

0800e698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e698:	b480      	push	{r7}
 800e69a:	b095      	sub	sp, #84	; 0x54
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6a8:	e853 3f00 	ldrex	r3, [r3]
 800e6ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e6b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6be:	643b      	str	r3, [r7, #64]	; 0x40
 800e6c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e6c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e6c6:	e841 2300 	strex	r3, r2, [r1]
 800e6ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d1e6      	bne.n	800e6a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	3308      	adds	r3, #8
 800e6d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6da:	6a3b      	ldr	r3, [r7, #32]
 800e6dc:	e853 3f00 	ldrex	r3, [r3]
 800e6e0:	61fb      	str	r3, [r7, #28]
   return(result);
 800e6e2:	69fa      	ldr	r2, [r7, #28]
 800e6e4:	4b1e      	ldr	r3, [pc, #120]	; (800e760 <UART_EndRxTransfer+0xc8>)
 800e6e6:	4013      	ands	r3, r2
 800e6e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	3308      	adds	r3, #8
 800e6f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e6f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e6f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6fa:	e841 2300 	strex	r3, r2, [r1]
 800e6fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e702:	2b00      	cmp	r3, #0
 800e704:	d1e5      	bne.n	800e6d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e70a:	2b01      	cmp	r3, #1
 800e70c:	d118      	bne.n	800e740 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	e853 3f00 	ldrex	r3, [r3]
 800e71a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	f023 0310 	bic.w	r3, r3, #16
 800e722:	647b      	str	r3, [r7, #68]	; 0x44
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	461a      	mov	r2, r3
 800e72a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e72c:	61bb      	str	r3, [r7, #24]
 800e72e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e730:	6979      	ldr	r1, [r7, #20]
 800e732:	69ba      	ldr	r2, [r7, #24]
 800e734:	e841 2300 	strex	r3, r2, [r1]
 800e738:	613b      	str	r3, [r7, #16]
   return(result);
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d1e6      	bne.n	800e70e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2220      	movs	r2, #32
 800e744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2200      	movs	r2, #0
 800e74c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2200      	movs	r2, #0
 800e752:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e754:	bf00      	nop
 800e756:	3754      	adds	r7, #84	; 0x54
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr
 800e760:	effffffe 	.word	0xeffffffe

0800e764 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b090      	sub	sp, #64	; 0x40
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e770:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	69db      	ldr	r3, [r3, #28]
 800e776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e77a:	d037      	beq.n	800e7ec <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e77c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e77e:	2200      	movs	r2, #0
 800e780:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	3308      	adds	r3, #8
 800e78a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78e:	e853 3f00 	ldrex	r3, [r3]
 800e792:	623b      	str	r3, [r7, #32]
   return(result);
 800e794:	6a3b      	ldr	r3, [r7, #32]
 800e796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e79a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e79c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	3308      	adds	r3, #8
 800e7a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7a4:	633a      	str	r2, [r7, #48]	; 0x30
 800e7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7ac:	e841 2300 	strex	r3, r2, [r1]
 800e7b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d1e5      	bne.n	800e784 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e7b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	e853 3f00 	ldrex	r3, [r3]
 800e7c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7cc:	637b      	str	r3, [r7, #52]	; 0x34
 800e7ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7d6:	61fb      	str	r3, [r7, #28]
 800e7d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7da:	69b9      	ldr	r1, [r7, #24]
 800e7dc:	69fa      	ldr	r2, [r7, #28]
 800e7de:	e841 2300 	strex	r3, r2, [r1]
 800e7e2:	617b      	str	r3, [r7, #20]
   return(result);
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d1e6      	bne.n	800e7b8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e7ea:	e002      	b.n	800e7f2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e7ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e7ee:	f7f4 fc57 	bl	80030a0 <HAL_UART_TxCpltCallback>
}
 800e7f2:	bf00      	nop
 800e7f4:	3740      	adds	r7, #64	; 0x40
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}

0800e7fa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e7fa:	b580      	push	{r7, lr}
 800e7fc:	b084      	sub	sp, #16
 800e7fe:	af00      	add	r7, sp, #0
 800e800:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e806:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e808:	68f8      	ldr	r0, [r7, #12]
 800e80a:	f7fe fe13 	bl	800d434 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e80e:	bf00      	nop
 800e810:	3710      	adds	r7, #16
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}

0800e816 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e816:	b580      	push	{r7, lr}
 800e818:	b09c      	sub	sp, #112	; 0x70
 800e81a:	af00      	add	r7, sp, #0
 800e81c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e822:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	69db      	ldr	r3, [r3, #28]
 800e828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e82c:	d071      	beq.n	800e912 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e82e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e830:	2200      	movs	r2, #0
 800e832:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e83c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e83e:	e853 3f00 	ldrex	r3, [r3]
 800e842:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e846:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e84a:	66bb      	str	r3, [r7, #104]	; 0x68
 800e84c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	461a      	mov	r2, r3
 800e852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e854:	65bb      	str	r3, [r7, #88]	; 0x58
 800e856:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e858:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e85a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e85c:	e841 2300 	strex	r3, r2, [r1]
 800e860:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e864:	2b00      	cmp	r3, #0
 800e866:	d1e6      	bne.n	800e836 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	3308      	adds	r3, #8
 800e86e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e872:	e853 3f00 	ldrex	r3, [r3]
 800e876:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e87a:	f023 0301 	bic.w	r3, r3, #1
 800e87e:	667b      	str	r3, [r7, #100]	; 0x64
 800e880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	3308      	adds	r3, #8
 800e886:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e888:	647a      	str	r2, [r7, #68]	; 0x44
 800e88a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e88c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e88e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e890:	e841 2300 	strex	r3, r2, [r1]
 800e894:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d1e5      	bne.n	800e868 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e89c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	3308      	adds	r3, #8
 800e8a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a6:	e853 3f00 	ldrex	r3, [r3]
 800e8aa:	623b      	str	r3, [r7, #32]
   return(result);
 800e8ac:	6a3b      	ldr	r3, [r7, #32]
 800e8ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8b2:	663b      	str	r3, [r7, #96]	; 0x60
 800e8b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	3308      	adds	r3, #8
 800e8ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e8bc:	633a      	str	r2, [r7, #48]	; 0x30
 800e8be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8c4:	e841 2300 	strex	r3, r2, [r1]
 800e8c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d1e5      	bne.n	800e89c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e8d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8d2:	2220      	movs	r2, #32
 800e8d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d118      	bne.n	800e912 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	e853 3f00 	ldrex	r3, [r3]
 800e8ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	f023 0310 	bic.w	r3, r3, #16
 800e8f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e8f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8fe:	61fb      	str	r3, [r7, #28]
 800e900:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e902:	69b9      	ldr	r1, [r7, #24]
 800e904:	69fa      	ldr	r2, [r7, #28]
 800e906:	e841 2300 	strex	r3, r2, [r1]
 800e90a:	617b      	str	r3, [r7, #20]
   return(result);
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d1e6      	bne.n	800e8e0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e914:	2200      	movs	r2, #0
 800e916:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e91a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e91c:	2b01      	cmp	r3, #1
 800e91e:	d107      	bne.n	800e930 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e922:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e926:	4619      	mov	r1, r3
 800e928:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e92a:	f7fe fda1 	bl	800d470 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e92e:	e002      	b.n	800e936 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800e930:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e932:	f7fe fd89 	bl	800d448 <HAL_UART_RxCpltCallback>
}
 800e936:	bf00      	nop
 800e938:	3770      	adds	r7, #112	; 0x70
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}

0800e93e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e93e:	b580      	push	{r7, lr}
 800e940:	b084      	sub	sp, #16
 800e942:	af00      	add	r7, sp, #0
 800e944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e94a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	2201      	movs	r2, #1
 800e950:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e956:	2b01      	cmp	r3, #1
 800e958:	d109      	bne.n	800e96e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e960:	085b      	lsrs	r3, r3, #1
 800e962:	b29b      	uxth	r3, r3
 800e964:	4619      	mov	r1, r3
 800e966:	68f8      	ldr	r0, [r7, #12]
 800e968:	f7fe fd82 	bl	800d470 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e96c:	e002      	b.n	800e974 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e96e:	68f8      	ldr	r0, [r7, #12]
 800e970:	f7fe fd74 	bl	800d45c <HAL_UART_RxHalfCpltCallback>
}
 800e974:	bf00      	nop
 800e976:	3710      	adds	r7, #16
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b086      	sub	sp, #24
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e988:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e990:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e998:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9a4:	2b80      	cmp	r3, #128	; 0x80
 800e9a6:	d109      	bne.n	800e9bc <UART_DMAError+0x40>
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	2b21      	cmp	r3, #33	; 0x21
 800e9ac:	d106      	bne.n	800e9bc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e9b6:	6978      	ldr	r0, [r7, #20]
 800e9b8:	f7ff fe2c 	bl	800e614 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	689b      	ldr	r3, [r3, #8]
 800e9c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9c6:	2b40      	cmp	r3, #64	; 0x40
 800e9c8:	d109      	bne.n	800e9de <UART_DMAError+0x62>
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2b22      	cmp	r3, #34	; 0x22
 800e9ce:	d106      	bne.n	800e9de <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e9d8:	6978      	ldr	r0, [r7, #20]
 800e9da:	f7ff fe5d 	bl	800e698 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9e4:	f043 0210 	orr.w	r2, r3, #16
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e9ee:	6978      	ldr	r0, [r7, #20]
 800e9f0:	f7f2 fd3c 	bl	800146c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9f4:	bf00      	nop
 800e9f6:	3718      	adds	r7, #24
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b084      	sub	sp, #16
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2200      	movs	r2, #0
 800ea16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ea1a:	68f8      	ldr	r0, [r7, #12]
 800ea1c:	f7f2 fd26 	bl	800146c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea20:	bf00      	nop
 800ea22:	3710      	adds	r7, #16
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b088      	sub	sp, #32
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	e853 3f00 	ldrex	r3, [r3]
 800ea3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea44:	61fb      	str	r3, [r7, #28]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	69fb      	ldr	r3, [r7, #28]
 800ea4e:	61bb      	str	r3, [r7, #24]
 800ea50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea52:	6979      	ldr	r1, [r7, #20]
 800ea54:	69ba      	ldr	r2, [r7, #24]
 800ea56:	e841 2300 	strex	r3, r2, [r1]
 800ea5a:	613b      	str	r3, [r7, #16]
   return(result);
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d1e6      	bne.n	800ea30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2220      	movs	r2, #32
 800ea66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f7f4 fb15 	bl	80030a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea76:	bf00      	nop
 800ea78:	3720      	adds	r7, #32
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ea7e:	b480      	push	{r7}
 800ea80:	b083      	sub	sp, #12
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ea86:	bf00      	nop
 800ea88:	370c      	adds	r7, #12
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr

0800ea92 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ea92:	b480      	push	{r7}
 800ea94:	b083      	sub	sp, #12
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ea9a:	bf00      	nop
 800ea9c:	370c      	adds	r7, #12
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr

0800eaa6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800eaa6:	b480      	push	{r7}
 800eaa8:	b083      	sub	sp, #12
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800eaae:	bf00      	nop
 800eab0:	370c      	adds	r7, #12
 800eab2:	46bd      	mov	sp, r7
 800eab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab8:	4770      	bx	lr

0800eaba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eaba:	b480      	push	{r7}
 800eabc:	b085      	sub	sp, #20
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eac8:	2b01      	cmp	r3, #1
 800eaca:	d101      	bne.n	800ead0 <HAL_UARTEx_DisableFifoMode+0x16>
 800eacc:	2302      	movs	r3, #2
 800eace:	e027      	b.n	800eb20 <HAL_UARTEx_DisableFifoMode+0x66>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2201      	movs	r2, #1
 800ead4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2224      	movs	r2, #36	; 0x24
 800eadc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f022 0201 	bic.w	r2, r2, #1
 800eaf6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800eafe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2200      	movs	r2, #0
 800eb04:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	68fa      	ldr	r2, [r7, #12]
 800eb0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2220      	movs	r2, #32
 800eb12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eb1e:	2300      	movs	r3, #0
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3714      	adds	r7, #20
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr

0800eb2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d101      	bne.n	800eb44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eb40:	2302      	movs	r3, #2
 800eb42:	e02d      	b.n	800eba0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2201      	movs	r2, #1
 800eb48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2224      	movs	r2, #36	; 0x24
 800eb50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	681a      	ldr	r2, [r3, #0]
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	f022 0201 	bic.w	r2, r2, #1
 800eb6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	689b      	ldr	r3, [r3, #8]
 800eb72:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	683a      	ldr	r2, [r7, #0]
 800eb7c:	430a      	orrs	r2, r1
 800eb7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f000 f84f 	bl	800ec24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	68fa      	ldr	r2, [r7, #12]
 800eb8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2220      	movs	r2, #32
 800eb92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eb9e:	2300      	movs	r3, #0
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3710      	adds	r7, #16
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b084      	sub	sp, #16
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ebb8:	2b01      	cmp	r3, #1
 800ebba:	d101      	bne.n	800ebc0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ebbc:	2302      	movs	r3, #2
 800ebbe:	e02d      	b.n	800ec1c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2224      	movs	r2, #36	; 0x24
 800ebcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	681a      	ldr	r2, [r3, #0]
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	f022 0201 	bic.w	r2, r2, #1
 800ebe6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	689b      	ldr	r3, [r3, #8]
 800ebee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	683a      	ldr	r2, [r7, #0]
 800ebf8:	430a      	orrs	r2, r1
 800ebfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f000 f811 	bl	800ec24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	68fa      	ldr	r2, [r7, #12]
 800ec08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2220      	movs	r2, #32
 800ec0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2200      	movs	r2, #0
 800ec16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ec1a:	2300      	movs	r3, #0
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3710      	adds	r7, #16
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b085      	sub	sp, #20
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d108      	bne.n	800ec46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2201      	movs	r2, #1
 800ec38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2201      	movs	r2, #1
 800ec40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ec44:	e031      	b.n	800ecaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ec46:	2310      	movs	r3, #16
 800ec48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ec4a:	2310      	movs	r3, #16
 800ec4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	689b      	ldr	r3, [r3, #8]
 800ec54:	0e5b      	lsrs	r3, r3, #25
 800ec56:	b2db      	uxtb	r3, r3
 800ec58:	f003 0307 	and.w	r3, r3, #7
 800ec5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	689b      	ldr	r3, [r3, #8]
 800ec64:	0f5b      	lsrs	r3, r3, #29
 800ec66:	b2db      	uxtb	r3, r3
 800ec68:	f003 0307 	and.w	r3, r3, #7
 800ec6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec6e:	7bbb      	ldrb	r3, [r7, #14]
 800ec70:	7b3a      	ldrb	r2, [r7, #12]
 800ec72:	4911      	ldr	r1, [pc, #68]	; (800ecb8 <UARTEx_SetNbDataToProcess+0x94>)
 800ec74:	5c8a      	ldrb	r2, [r1, r2]
 800ec76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ec7a:	7b3a      	ldrb	r2, [r7, #12]
 800ec7c:	490f      	ldr	r1, [pc, #60]	; (800ecbc <UARTEx_SetNbDataToProcess+0x98>)
 800ec7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec80:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec84:	b29a      	uxth	r2, r3
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec8c:	7bfb      	ldrb	r3, [r7, #15]
 800ec8e:	7b7a      	ldrb	r2, [r7, #13]
 800ec90:	4909      	ldr	r1, [pc, #36]	; (800ecb8 <UARTEx_SetNbDataToProcess+0x94>)
 800ec92:	5c8a      	ldrb	r2, [r1, r2]
 800ec94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ec98:	7b7a      	ldrb	r2, [r7, #13]
 800ec9a:	4908      	ldr	r1, [pc, #32]	; (800ecbc <UARTEx_SetNbDataToProcess+0x98>)
 800ec9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec9e:	fb93 f3f2 	sdiv	r3, r3, r2
 800eca2:	b29a      	uxth	r2, r3
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ecaa:	bf00      	nop
 800ecac:	3714      	adds	r7, #20
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb4:	4770      	bx	lr
 800ecb6:	bf00      	nop
 800ecb8:	0800f370 	.word	0x0800f370
 800ecbc:	0800f378 	.word	0x0800f378

0800ecc0 <__cxa_pure_virtual>:
 800ecc0:	b508      	push	{r3, lr}
 800ecc2:	f000 f80d 	bl	800ece0 <_ZSt9terminatev>

0800ecc6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ecc6:	b508      	push	{r3, lr}
 800ecc8:	4780      	blx	r0
 800ecca:	f000 f80e 	bl	800ecea <abort>
	...

0800ecd0 <_ZSt13get_terminatev>:
 800ecd0:	4b02      	ldr	r3, [pc, #8]	; (800ecdc <_ZSt13get_terminatev+0xc>)
 800ecd2:	6818      	ldr	r0, [r3, #0]
 800ecd4:	f3bf 8f5b 	dmb	ish
 800ecd8:	4770      	bx	lr
 800ecda:	bf00      	nop
 800ecdc:	24000010 	.word	0x24000010

0800ece0 <_ZSt9terminatev>:
 800ece0:	b508      	push	{r3, lr}
 800ece2:	f7ff fff5 	bl	800ecd0 <_ZSt13get_terminatev>
 800ece6:	f7ff ffee 	bl	800ecc6 <_ZN10__cxxabiv111__terminateEPFvvE>

0800ecea <abort>:
 800ecea:	b508      	push	{r3, lr}
 800ecec:	2006      	movs	r0, #6
 800ecee:	f000 f873 	bl	800edd8 <raise>
 800ecf2:	2001      	movs	r0, #1
 800ecf4:	f7f5 f966 	bl	8003fc4 <_exit>

0800ecf8 <__errno>:
 800ecf8:	4b01      	ldr	r3, [pc, #4]	; (800ed00 <__errno+0x8>)
 800ecfa:	6818      	ldr	r0, [r3, #0]
 800ecfc:	4770      	bx	lr
 800ecfe:	bf00      	nop
 800ed00:	24000014 	.word	0x24000014

0800ed04 <__libc_init_array>:
 800ed04:	b570      	push	{r4, r5, r6, lr}
 800ed06:	4d0d      	ldr	r5, [pc, #52]	; (800ed3c <__libc_init_array+0x38>)
 800ed08:	4c0d      	ldr	r4, [pc, #52]	; (800ed40 <__libc_init_array+0x3c>)
 800ed0a:	1b64      	subs	r4, r4, r5
 800ed0c:	10a4      	asrs	r4, r4, #2
 800ed0e:	2600      	movs	r6, #0
 800ed10:	42a6      	cmp	r6, r4
 800ed12:	d109      	bne.n	800ed28 <__libc_init_array+0x24>
 800ed14:	4d0b      	ldr	r5, [pc, #44]	; (800ed44 <__libc_init_array+0x40>)
 800ed16:	4c0c      	ldr	r4, [pc, #48]	; (800ed48 <__libc_init_array+0x44>)
 800ed18:	f000 f9b0 	bl	800f07c <_init>
 800ed1c:	1b64      	subs	r4, r4, r5
 800ed1e:	10a4      	asrs	r4, r4, #2
 800ed20:	2600      	movs	r6, #0
 800ed22:	42a6      	cmp	r6, r4
 800ed24:	d105      	bne.n	800ed32 <__libc_init_array+0x2e>
 800ed26:	bd70      	pop	{r4, r5, r6, pc}
 800ed28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed2c:	4798      	blx	r3
 800ed2e:	3601      	adds	r6, #1
 800ed30:	e7ee      	b.n	800ed10 <__libc_init_array+0xc>
 800ed32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed36:	4798      	blx	r3
 800ed38:	3601      	adds	r6, #1
 800ed3a:	e7f2      	b.n	800ed22 <__libc_init_array+0x1e>
 800ed3c:	0800f388 	.word	0x0800f388
 800ed40:	0800f388 	.word	0x0800f388
 800ed44:	0800f388 	.word	0x0800f388
 800ed48:	0800f390 	.word	0x0800f390

0800ed4c <memcpy>:
 800ed4c:	440a      	add	r2, r1
 800ed4e:	4291      	cmp	r1, r2
 800ed50:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed54:	d100      	bne.n	800ed58 <memcpy+0xc>
 800ed56:	4770      	bx	lr
 800ed58:	b510      	push	{r4, lr}
 800ed5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed62:	4291      	cmp	r1, r2
 800ed64:	d1f9      	bne.n	800ed5a <memcpy+0xe>
 800ed66:	bd10      	pop	{r4, pc}

0800ed68 <memset>:
 800ed68:	4402      	add	r2, r0
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d100      	bne.n	800ed72 <memset+0xa>
 800ed70:	4770      	bx	lr
 800ed72:	f803 1b01 	strb.w	r1, [r3], #1
 800ed76:	e7f9      	b.n	800ed6c <memset+0x4>

0800ed78 <realloc>:
 800ed78:	4b02      	ldr	r3, [pc, #8]	; (800ed84 <realloc+0xc>)
 800ed7a:	460a      	mov	r2, r1
 800ed7c:	4601      	mov	r1, r0
 800ed7e:	6818      	ldr	r0, [r3, #0]
 800ed80:	f000 b8da 	b.w	800ef38 <_realloc_r>
 800ed84:	24000014 	.word	0x24000014

0800ed88 <_raise_r>:
 800ed88:	291f      	cmp	r1, #31
 800ed8a:	b538      	push	{r3, r4, r5, lr}
 800ed8c:	4604      	mov	r4, r0
 800ed8e:	460d      	mov	r5, r1
 800ed90:	d904      	bls.n	800ed9c <_raise_r+0x14>
 800ed92:	2316      	movs	r3, #22
 800ed94:	6003      	str	r3, [r0, #0]
 800ed96:	f04f 30ff 	mov.w	r0, #4294967295
 800ed9a:	bd38      	pop	{r3, r4, r5, pc}
 800ed9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ed9e:	b112      	cbz	r2, 800eda6 <_raise_r+0x1e>
 800eda0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eda4:	b94b      	cbnz	r3, 800edba <_raise_r+0x32>
 800eda6:	4620      	mov	r0, r4
 800eda8:	f000 f830 	bl	800ee0c <_getpid_r>
 800edac:	462a      	mov	r2, r5
 800edae:	4601      	mov	r1, r0
 800edb0:	4620      	mov	r0, r4
 800edb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edb6:	f000 b817 	b.w	800ede8 <_kill_r>
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d00a      	beq.n	800edd4 <_raise_r+0x4c>
 800edbe:	1c59      	adds	r1, r3, #1
 800edc0:	d103      	bne.n	800edca <_raise_r+0x42>
 800edc2:	2316      	movs	r3, #22
 800edc4:	6003      	str	r3, [r0, #0]
 800edc6:	2001      	movs	r0, #1
 800edc8:	e7e7      	b.n	800ed9a <_raise_r+0x12>
 800edca:	2400      	movs	r4, #0
 800edcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800edd0:	4628      	mov	r0, r5
 800edd2:	4798      	blx	r3
 800edd4:	2000      	movs	r0, #0
 800edd6:	e7e0      	b.n	800ed9a <_raise_r+0x12>

0800edd8 <raise>:
 800edd8:	4b02      	ldr	r3, [pc, #8]	; (800ede4 <raise+0xc>)
 800edda:	4601      	mov	r1, r0
 800eddc:	6818      	ldr	r0, [r3, #0]
 800edde:	f7ff bfd3 	b.w	800ed88 <_raise_r>
 800ede2:	bf00      	nop
 800ede4:	24000014 	.word	0x24000014

0800ede8 <_kill_r>:
 800ede8:	b538      	push	{r3, r4, r5, lr}
 800edea:	4d07      	ldr	r5, [pc, #28]	; (800ee08 <_kill_r+0x20>)
 800edec:	2300      	movs	r3, #0
 800edee:	4604      	mov	r4, r0
 800edf0:	4608      	mov	r0, r1
 800edf2:	4611      	mov	r1, r2
 800edf4:	602b      	str	r3, [r5, #0]
 800edf6:	f7f5 f8d5 	bl	8003fa4 <_kill>
 800edfa:	1c43      	adds	r3, r0, #1
 800edfc:	d102      	bne.n	800ee04 <_kill_r+0x1c>
 800edfe:	682b      	ldr	r3, [r5, #0]
 800ee00:	b103      	cbz	r3, 800ee04 <_kill_r+0x1c>
 800ee02:	6023      	str	r3, [r4, #0]
 800ee04:	bd38      	pop	{r3, r4, r5, pc}
 800ee06:	bf00      	nop
 800ee08:	240039c8 	.word	0x240039c8

0800ee0c <_getpid_r>:
 800ee0c:	f7f5 b8c2 	b.w	8003f94 <_getpid>

0800ee10 <sbrk_aligned>:
 800ee10:	b570      	push	{r4, r5, r6, lr}
 800ee12:	4e0e      	ldr	r6, [pc, #56]	; (800ee4c <sbrk_aligned+0x3c>)
 800ee14:	460c      	mov	r4, r1
 800ee16:	6831      	ldr	r1, [r6, #0]
 800ee18:	4605      	mov	r5, r0
 800ee1a:	b911      	cbnz	r1, 800ee22 <sbrk_aligned+0x12>
 800ee1c:	f000 f8bc 	bl	800ef98 <_sbrk_r>
 800ee20:	6030      	str	r0, [r6, #0]
 800ee22:	4621      	mov	r1, r4
 800ee24:	4628      	mov	r0, r5
 800ee26:	f000 f8b7 	bl	800ef98 <_sbrk_r>
 800ee2a:	1c43      	adds	r3, r0, #1
 800ee2c:	d00a      	beq.n	800ee44 <sbrk_aligned+0x34>
 800ee2e:	1cc4      	adds	r4, r0, #3
 800ee30:	f024 0403 	bic.w	r4, r4, #3
 800ee34:	42a0      	cmp	r0, r4
 800ee36:	d007      	beq.n	800ee48 <sbrk_aligned+0x38>
 800ee38:	1a21      	subs	r1, r4, r0
 800ee3a:	4628      	mov	r0, r5
 800ee3c:	f000 f8ac 	bl	800ef98 <_sbrk_r>
 800ee40:	3001      	adds	r0, #1
 800ee42:	d101      	bne.n	800ee48 <sbrk_aligned+0x38>
 800ee44:	f04f 34ff 	mov.w	r4, #4294967295
 800ee48:	4620      	mov	r0, r4
 800ee4a:	bd70      	pop	{r4, r5, r6, pc}
 800ee4c:	240039c4 	.word	0x240039c4

0800ee50 <_malloc_r>:
 800ee50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee54:	1ccd      	adds	r5, r1, #3
 800ee56:	f025 0503 	bic.w	r5, r5, #3
 800ee5a:	3508      	adds	r5, #8
 800ee5c:	2d0c      	cmp	r5, #12
 800ee5e:	bf38      	it	cc
 800ee60:	250c      	movcc	r5, #12
 800ee62:	2d00      	cmp	r5, #0
 800ee64:	4607      	mov	r7, r0
 800ee66:	db01      	blt.n	800ee6c <_malloc_r+0x1c>
 800ee68:	42a9      	cmp	r1, r5
 800ee6a:	d905      	bls.n	800ee78 <_malloc_r+0x28>
 800ee6c:	230c      	movs	r3, #12
 800ee6e:	603b      	str	r3, [r7, #0]
 800ee70:	2600      	movs	r6, #0
 800ee72:	4630      	mov	r0, r6
 800ee74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee78:	4e2e      	ldr	r6, [pc, #184]	; (800ef34 <_malloc_r+0xe4>)
 800ee7a:	f000 f89d 	bl	800efb8 <__malloc_lock>
 800ee7e:	6833      	ldr	r3, [r6, #0]
 800ee80:	461c      	mov	r4, r3
 800ee82:	bb34      	cbnz	r4, 800eed2 <_malloc_r+0x82>
 800ee84:	4629      	mov	r1, r5
 800ee86:	4638      	mov	r0, r7
 800ee88:	f7ff ffc2 	bl	800ee10 <sbrk_aligned>
 800ee8c:	1c43      	adds	r3, r0, #1
 800ee8e:	4604      	mov	r4, r0
 800ee90:	d14d      	bne.n	800ef2e <_malloc_r+0xde>
 800ee92:	6834      	ldr	r4, [r6, #0]
 800ee94:	4626      	mov	r6, r4
 800ee96:	2e00      	cmp	r6, #0
 800ee98:	d140      	bne.n	800ef1c <_malloc_r+0xcc>
 800ee9a:	6823      	ldr	r3, [r4, #0]
 800ee9c:	4631      	mov	r1, r6
 800ee9e:	4638      	mov	r0, r7
 800eea0:	eb04 0803 	add.w	r8, r4, r3
 800eea4:	f000 f878 	bl	800ef98 <_sbrk_r>
 800eea8:	4580      	cmp	r8, r0
 800eeaa:	d13a      	bne.n	800ef22 <_malloc_r+0xd2>
 800eeac:	6821      	ldr	r1, [r4, #0]
 800eeae:	3503      	adds	r5, #3
 800eeb0:	1a6d      	subs	r5, r5, r1
 800eeb2:	f025 0503 	bic.w	r5, r5, #3
 800eeb6:	3508      	adds	r5, #8
 800eeb8:	2d0c      	cmp	r5, #12
 800eeba:	bf38      	it	cc
 800eebc:	250c      	movcc	r5, #12
 800eebe:	4629      	mov	r1, r5
 800eec0:	4638      	mov	r0, r7
 800eec2:	f7ff ffa5 	bl	800ee10 <sbrk_aligned>
 800eec6:	3001      	adds	r0, #1
 800eec8:	d02b      	beq.n	800ef22 <_malloc_r+0xd2>
 800eeca:	6823      	ldr	r3, [r4, #0]
 800eecc:	442b      	add	r3, r5
 800eece:	6023      	str	r3, [r4, #0]
 800eed0:	e00e      	b.n	800eef0 <_malloc_r+0xa0>
 800eed2:	6822      	ldr	r2, [r4, #0]
 800eed4:	1b52      	subs	r2, r2, r5
 800eed6:	d41e      	bmi.n	800ef16 <_malloc_r+0xc6>
 800eed8:	2a0b      	cmp	r2, #11
 800eeda:	d916      	bls.n	800ef0a <_malloc_r+0xba>
 800eedc:	1961      	adds	r1, r4, r5
 800eede:	42a3      	cmp	r3, r4
 800eee0:	6025      	str	r5, [r4, #0]
 800eee2:	bf18      	it	ne
 800eee4:	6059      	strne	r1, [r3, #4]
 800eee6:	6863      	ldr	r3, [r4, #4]
 800eee8:	bf08      	it	eq
 800eeea:	6031      	streq	r1, [r6, #0]
 800eeec:	5162      	str	r2, [r4, r5]
 800eeee:	604b      	str	r3, [r1, #4]
 800eef0:	4638      	mov	r0, r7
 800eef2:	f104 060b 	add.w	r6, r4, #11
 800eef6:	f000 f865 	bl	800efc4 <__malloc_unlock>
 800eefa:	f026 0607 	bic.w	r6, r6, #7
 800eefe:	1d23      	adds	r3, r4, #4
 800ef00:	1af2      	subs	r2, r6, r3
 800ef02:	d0b6      	beq.n	800ee72 <_malloc_r+0x22>
 800ef04:	1b9b      	subs	r3, r3, r6
 800ef06:	50a3      	str	r3, [r4, r2]
 800ef08:	e7b3      	b.n	800ee72 <_malloc_r+0x22>
 800ef0a:	6862      	ldr	r2, [r4, #4]
 800ef0c:	42a3      	cmp	r3, r4
 800ef0e:	bf0c      	ite	eq
 800ef10:	6032      	streq	r2, [r6, #0]
 800ef12:	605a      	strne	r2, [r3, #4]
 800ef14:	e7ec      	b.n	800eef0 <_malloc_r+0xa0>
 800ef16:	4623      	mov	r3, r4
 800ef18:	6864      	ldr	r4, [r4, #4]
 800ef1a:	e7b2      	b.n	800ee82 <_malloc_r+0x32>
 800ef1c:	4634      	mov	r4, r6
 800ef1e:	6876      	ldr	r6, [r6, #4]
 800ef20:	e7b9      	b.n	800ee96 <_malloc_r+0x46>
 800ef22:	230c      	movs	r3, #12
 800ef24:	603b      	str	r3, [r7, #0]
 800ef26:	4638      	mov	r0, r7
 800ef28:	f000 f84c 	bl	800efc4 <__malloc_unlock>
 800ef2c:	e7a1      	b.n	800ee72 <_malloc_r+0x22>
 800ef2e:	6025      	str	r5, [r4, #0]
 800ef30:	e7de      	b.n	800eef0 <_malloc_r+0xa0>
 800ef32:	bf00      	nop
 800ef34:	240039c0 	.word	0x240039c0

0800ef38 <_realloc_r>:
 800ef38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef3c:	4680      	mov	r8, r0
 800ef3e:	4614      	mov	r4, r2
 800ef40:	460e      	mov	r6, r1
 800ef42:	b921      	cbnz	r1, 800ef4e <_realloc_r+0x16>
 800ef44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef48:	4611      	mov	r1, r2
 800ef4a:	f7ff bf81 	b.w	800ee50 <_malloc_r>
 800ef4e:	b92a      	cbnz	r2, 800ef5c <_realloc_r+0x24>
 800ef50:	f000 f83e 	bl	800efd0 <_free_r>
 800ef54:	4625      	mov	r5, r4
 800ef56:	4628      	mov	r0, r5
 800ef58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef5c:	f000 f884 	bl	800f068 <_malloc_usable_size_r>
 800ef60:	4284      	cmp	r4, r0
 800ef62:	4607      	mov	r7, r0
 800ef64:	d802      	bhi.n	800ef6c <_realloc_r+0x34>
 800ef66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ef6a:	d812      	bhi.n	800ef92 <_realloc_r+0x5a>
 800ef6c:	4621      	mov	r1, r4
 800ef6e:	4640      	mov	r0, r8
 800ef70:	f7ff ff6e 	bl	800ee50 <_malloc_r>
 800ef74:	4605      	mov	r5, r0
 800ef76:	2800      	cmp	r0, #0
 800ef78:	d0ed      	beq.n	800ef56 <_realloc_r+0x1e>
 800ef7a:	42bc      	cmp	r4, r7
 800ef7c:	4622      	mov	r2, r4
 800ef7e:	4631      	mov	r1, r6
 800ef80:	bf28      	it	cs
 800ef82:	463a      	movcs	r2, r7
 800ef84:	f7ff fee2 	bl	800ed4c <memcpy>
 800ef88:	4631      	mov	r1, r6
 800ef8a:	4640      	mov	r0, r8
 800ef8c:	f000 f820 	bl	800efd0 <_free_r>
 800ef90:	e7e1      	b.n	800ef56 <_realloc_r+0x1e>
 800ef92:	4635      	mov	r5, r6
 800ef94:	e7df      	b.n	800ef56 <_realloc_r+0x1e>
	...

0800ef98 <_sbrk_r>:
 800ef98:	b538      	push	{r3, r4, r5, lr}
 800ef9a:	4d06      	ldr	r5, [pc, #24]	; (800efb4 <_sbrk_r+0x1c>)
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	4604      	mov	r4, r0
 800efa0:	4608      	mov	r0, r1
 800efa2:	602b      	str	r3, [r5, #0]
 800efa4:	f7f5 f818 	bl	8003fd8 <_sbrk>
 800efa8:	1c43      	adds	r3, r0, #1
 800efaa:	d102      	bne.n	800efb2 <_sbrk_r+0x1a>
 800efac:	682b      	ldr	r3, [r5, #0]
 800efae:	b103      	cbz	r3, 800efb2 <_sbrk_r+0x1a>
 800efb0:	6023      	str	r3, [r4, #0]
 800efb2:	bd38      	pop	{r3, r4, r5, pc}
 800efb4:	240039c8 	.word	0x240039c8

0800efb8 <__malloc_lock>:
 800efb8:	4801      	ldr	r0, [pc, #4]	; (800efc0 <__malloc_lock+0x8>)
 800efba:	f000 b85d 	b.w	800f078 <__retarget_lock_acquire_recursive>
 800efbe:	bf00      	nop
 800efc0:	240039cc 	.word	0x240039cc

0800efc4 <__malloc_unlock>:
 800efc4:	4801      	ldr	r0, [pc, #4]	; (800efcc <__malloc_unlock+0x8>)
 800efc6:	f000 b858 	b.w	800f07a <__retarget_lock_release_recursive>
 800efca:	bf00      	nop
 800efcc:	240039cc 	.word	0x240039cc

0800efd0 <_free_r>:
 800efd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800efd2:	2900      	cmp	r1, #0
 800efd4:	d044      	beq.n	800f060 <_free_r+0x90>
 800efd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efda:	9001      	str	r0, [sp, #4]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	f1a1 0404 	sub.w	r4, r1, #4
 800efe2:	bfb8      	it	lt
 800efe4:	18e4      	addlt	r4, r4, r3
 800efe6:	f7ff ffe7 	bl	800efb8 <__malloc_lock>
 800efea:	4a1e      	ldr	r2, [pc, #120]	; (800f064 <_free_r+0x94>)
 800efec:	9801      	ldr	r0, [sp, #4]
 800efee:	6813      	ldr	r3, [r2, #0]
 800eff0:	b933      	cbnz	r3, 800f000 <_free_r+0x30>
 800eff2:	6063      	str	r3, [r4, #4]
 800eff4:	6014      	str	r4, [r2, #0]
 800eff6:	b003      	add	sp, #12
 800eff8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800effc:	f7ff bfe2 	b.w	800efc4 <__malloc_unlock>
 800f000:	42a3      	cmp	r3, r4
 800f002:	d908      	bls.n	800f016 <_free_r+0x46>
 800f004:	6825      	ldr	r5, [r4, #0]
 800f006:	1961      	adds	r1, r4, r5
 800f008:	428b      	cmp	r3, r1
 800f00a:	bf01      	itttt	eq
 800f00c:	6819      	ldreq	r1, [r3, #0]
 800f00e:	685b      	ldreq	r3, [r3, #4]
 800f010:	1949      	addeq	r1, r1, r5
 800f012:	6021      	streq	r1, [r4, #0]
 800f014:	e7ed      	b.n	800eff2 <_free_r+0x22>
 800f016:	461a      	mov	r2, r3
 800f018:	685b      	ldr	r3, [r3, #4]
 800f01a:	b10b      	cbz	r3, 800f020 <_free_r+0x50>
 800f01c:	42a3      	cmp	r3, r4
 800f01e:	d9fa      	bls.n	800f016 <_free_r+0x46>
 800f020:	6811      	ldr	r1, [r2, #0]
 800f022:	1855      	adds	r5, r2, r1
 800f024:	42a5      	cmp	r5, r4
 800f026:	d10b      	bne.n	800f040 <_free_r+0x70>
 800f028:	6824      	ldr	r4, [r4, #0]
 800f02a:	4421      	add	r1, r4
 800f02c:	1854      	adds	r4, r2, r1
 800f02e:	42a3      	cmp	r3, r4
 800f030:	6011      	str	r1, [r2, #0]
 800f032:	d1e0      	bne.n	800eff6 <_free_r+0x26>
 800f034:	681c      	ldr	r4, [r3, #0]
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	6053      	str	r3, [r2, #4]
 800f03a:	4421      	add	r1, r4
 800f03c:	6011      	str	r1, [r2, #0]
 800f03e:	e7da      	b.n	800eff6 <_free_r+0x26>
 800f040:	d902      	bls.n	800f048 <_free_r+0x78>
 800f042:	230c      	movs	r3, #12
 800f044:	6003      	str	r3, [r0, #0]
 800f046:	e7d6      	b.n	800eff6 <_free_r+0x26>
 800f048:	6825      	ldr	r5, [r4, #0]
 800f04a:	1961      	adds	r1, r4, r5
 800f04c:	428b      	cmp	r3, r1
 800f04e:	bf04      	itt	eq
 800f050:	6819      	ldreq	r1, [r3, #0]
 800f052:	685b      	ldreq	r3, [r3, #4]
 800f054:	6063      	str	r3, [r4, #4]
 800f056:	bf04      	itt	eq
 800f058:	1949      	addeq	r1, r1, r5
 800f05a:	6021      	streq	r1, [r4, #0]
 800f05c:	6054      	str	r4, [r2, #4]
 800f05e:	e7ca      	b.n	800eff6 <_free_r+0x26>
 800f060:	b003      	add	sp, #12
 800f062:	bd30      	pop	{r4, r5, pc}
 800f064:	240039c0 	.word	0x240039c0

0800f068 <_malloc_usable_size_r>:
 800f068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f06c:	1f18      	subs	r0, r3, #4
 800f06e:	2b00      	cmp	r3, #0
 800f070:	bfbc      	itt	lt
 800f072:	580b      	ldrlt	r3, [r1, r0]
 800f074:	18c0      	addlt	r0, r0, r3
 800f076:	4770      	bx	lr

0800f078 <__retarget_lock_acquire_recursive>:
 800f078:	4770      	bx	lr

0800f07a <__retarget_lock_release_recursive>:
 800f07a:	4770      	bx	lr

0800f07c <_init>:
 800f07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f07e:	bf00      	nop
 800f080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f082:	bc08      	pop	{r3}
 800f084:	469e      	mov	lr, r3
 800f086:	4770      	bx	lr

0800f088 <_fini>:
 800f088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f08a:	bf00      	nop
 800f08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f08e:	bc08      	pop	{r3}
 800f090:	469e      	mov	lr, r3
 800f092:	4770      	bx	lr
