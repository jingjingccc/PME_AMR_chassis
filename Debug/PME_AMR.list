
PME_AMR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edbc  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  0800f08c  0800f08c  0001f08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f378  0800f378  0001f378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f380  0800f380  0001f380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f388  0800f388  0001f388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800f38c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001a10  24000078  0800f404  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001a88  0800f404  00021a88  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021b5c  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ad2  00000000  00000000  00041c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001508  00000000  00000000  000456d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013c8  00000000  00000000  00046be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035f2d  00000000  00000000  00047fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d3fd  00000000  00000000  0007ded5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153912  00000000  00000000  0009b2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001eebe4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d00  00000000  00000000  001eec34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f074 	.word	0x0800f074

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800f074 	.word	0x0800f074

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <Control_Init>:
/**
 * @ brief Include all the initial function
 * @ retval None
 * */
void Control_Init()
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b0ab      	sub	sp, #172	; 0xac
 8000684:	af28      	add	r7, sp, #160	; 0xa0
	Hardware_Info_Init();
 8000686:	f000 faf7 	bl	8000c78 <Hardware_Info_Init>
	Control_Timer_Init();
 800068a:	f000 fac5 	bl	8000c18 <Control_Timer_Init>
	Motor_Driver_Init(&WheelA, M1_PHASE_Pin, M1_PHASE_GPIO_port, M1_Encoder_timer, M1_Encoder_timerchannel, M1_Encoder_dir, M1_PWM_timer, M1_PWM_timerchannel);
	Motor_Driver_Init(&WheelB, M2_PHASE_Pin, M2_PHASE_GPIO_port, M2_Encoder_timer, M2_Encoder_timerchannel, M2_Encoder_dir, M2_PWM_timer, M2_PWM_timerchannel);
	Motor_Driver_Init(&WheelC, M3_PHASE_Pin, M3_PHASE_GPIO_port, M3_Encoder_timer, M3_Encoder_timerchannel, M3_Encoder_dir, M3_PWM_timer, M3_PWM_timerchannel);
#endif
#ifdef G2_18V17
	Motor_Driver_Init(&WheelA, M1_DIR_Pin, M1_DIR_GPIO_port, M1_Encoder_timer, M1_Encoder_timerchannel, M1_Encoder_dir, M1_PWM_timer, M1_PWM_timerchannel);
 800068e:	4cb4      	ldr	r4, [pc, #720]	; (8000960 <Control_Init+0x2e0>)
 8000690:	2300      	movs	r3, #0
 8000692:	9327      	str	r3, [sp, #156]	; 0x9c
 8000694:	4ab3      	ldr	r2, [pc, #716]	; (8000964 <Control_Init+0x2e4>)
 8000696:	ab14      	add	r3, sp, #80	; 0x50
 8000698:	4611      	mov	r1, r2
 800069a:	224c      	movs	r2, #76	; 0x4c
 800069c:	4618      	mov	r0, r3
 800069e:	f00e fb51 	bl	800ed44 <memcpy>
 80006a2:	2301      	movs	r3, #1
 80006a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80006a6:	2304      	movs	r3, #4
 80006a8:	9312      	str	r3, [sp, #72]	; 0x48
 80006aa:	4668      	mov	r0, sp
 80006ac:	1d23      	adds	r3, r4, #4
 80006ae:	2248      	movs	r2, #72	; 0x48
 80006b0:	4619      	mov	r1, r3
 80006b2:	f00e fb47 	bl	800ed44 <memcpy>
 80006b6:	6823      	ldr	r3, [r4, #0]
 80006b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006bc:	49aa      	ldr	r1, [pc, #680]	; (8000968 <Control_Init+0x2e8>)
 80006be:	48ab      	ldr	r0, [pc, #684]	; (800096c <Control_Init+0x2ec>)
 80006c0:	f000 fa75 	bl	8000bae <Motor_Driver_Init>
	Motor_Driver_Init(&WheelB, M2_DIR_Pin, M2_DIR_GPIO_port, M2_Encoder_timer, M2_Encoder_timerchannel, M2_Encoder_dir, M2_PWM_timer, M2_PWM_timerchannel);
 80006c4:	4caa      	ldr	r4, [pc, #680]	; (8000970 <Control_Init+0x2f0>)
 80006c6:	2304      	movs	r3, #4
 80006c8:	9327      	str	r3, [sp, #156]	; 0x9c
 80006ca:	4aa6      	ldr	r2, [pc, #664]	; (8000964 <Control_Init+0x2e4>)
 80006cc:	ab14      	add	r3, sp, #80	; 0x50
 80006ce:	4611      	mov	r1, r2
 80006d0:	224c      	movs	r2, #76	; 0x4c
 80006d2:	4618      	mov	r0, r3
 80006d4:	f00e fb36 	bl	800ed44 <memcpy>
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295
 80006dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80006de:	2304      	movs	r3, #4
 80006e0:	9312      	str	r3, [sp, #72]	; 0x48
 80006e2:	4668      	mov	r0, sp
 80006e4:	1d23      	adds	r3, r4, #4
 80006e6:	2248      	movs	r2, #72	; 0x48
 80006e8:	4619      	mov	r1, r3
 80006ea:	f00e fb2b 	bl	800ed44 <memcpy>
 80006ee:	6823      	ldr	r3, [r4, #0]
 80006f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006f4:	499f      	ldr	r1, [pc, #636]	; (8000974 <Control_Init+0x2f4>)
 80006f6:	48a0      	ldr	r0, [pc, #640]	; (8000978 <Control_Init+0x2f8>)
 80006f8:	f000 fa59 	bl	8000bae <Motor_Driver_Init>
	Motor_Driver_Init(&WheelC, M3_DIR_Pin, M3_DIR_GPIO_port, M3_Encoder_timer, M3_Encoder_timerchannel, M3_Encoder_dir, M3_PWM_timer, M3_PWM_timerchannel);
 80006fc:	4c9f      	ldr	r4, [pc, #636]	; (800097c <Control_Init+0x2fc>)
 80006fe:	2300      	movs	r3, #0
 8000700:	9327      	str	r3, [sp, #156]	; 0x9c
 8000702:	4a9f      	ldr	r2, [pc, #636]	; (8000980 <Control_Init+0x300>)
 8000704:	ab14      	add	r3, sp, #80	; 0x50
 8000706:	4611      	mov	r1, r2
 8000708:	224c      	movs	r2, #76	; 0x4c
 800070a:	4618      	mov	r0, r3
 800070c:	f00e fb1a 	bl	800ed44 <memcpy>
 8000710:	2301      	movs	r3, #1
 8000712:	9313      	str	r3, [sp, #76]	; 0x4c
 8000714:	2304      	movs	r3, #4
 8000716:	9312      	str	r3, [sp, #72]	; 0x48
 8000718:	4668      	mov	r0, sp
 800071a:	1d23      	adds	r3, r4, #4
 800071c:	2248      	movs	r2, #72	; 0x48
 800071e:	4619      	mov	r1, r3
 8000720:	f00e fb10 	bl	800ed44 <memcpy>
 8000724:	6823      	ldr	r3, [r4, #0]
 8000726:	2208      	movs	r2, #8
 8000728:	4996      	ldr	r1, [pc, #600]	; (8000984 <Control_Init+0x304>)
 800072a:	4897      	ldr	r0, [pc, #604]	; (8000988 <Control_Init+0x308>)
 800072c:	f000 fa3f 	bl	8000bae <Motor_Driver_Init>
	Motor_Driver_Init(&WheelD, M4_DIR_Pin, M4_DIR_GPIO_port, M4_Encoder_timer, M4_Encoder_timerchannel, M4_Encoder_dir, M4_PWM_timer, M4_PWM_timerchannel);
 8000730:	4c96      	ldr	r4, [pc, #600]	; (800098c <Control_Init+0x30c>)
 8000732:	2304      	movs	r3, #4
 8000734:	9327      	str	r3, [sp, #156]	; 0x9c
 8000736:	4a92      	ldr	r2, [pc, #584]	; (8000980 <Control_Init+0x300>)
 8000738:	ab14      	add	r3, sp, #80	; 0x50
 800073a:	4611      	mov	r1, r2
 800073c:	224c      	movs	r2, #76	; 0x4c
 800073e:	4618      	mov	r0, r3
 8000740:	f00e fb00 	bl	800ed44 <memcpy>
 8000744:	f04f 33ff 	mov.w	r3, #4294967295
 8000748:	9313      	str	r3, [sp, #76]	; 0x4c
 800074a:	2304      	movs	r3, #4
 800074c:	9312      	str	r3, [sp, #72]	; 0x48
 800074e:	4668      	mov	r0, sp
 8000750:	1d23      	adds	r3, r4, #4
 8000752:	2248      	movs	r2, #72	; 0x48
 8000754:	4619      	mov	r1, r3
 8000756:	f00e faf5 	bl	800ed44 <memcpy>
 800075a:	6823      	ldr	r3, [r4, #0]
 800075c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000760:	498b      	ldr	r1, [pc, #556]	; (8000990 <Control_Init+0x310>)
 8000762:	488c      	ldr	r0, [pc, #560]	; (8000994 <Control_Init+0x314>)
 8000764:	f000 fa23 	bl	8000bae <Motor_Driver_Init>
#endif

	Pid_Param_Init(&WheelA, M1_KP, M1_KI, M1_KD);
 8000768:	ed9f 2b71 	vldr	d2, [pc, #452]	; 8000930 <Control_Init+0x2b0>
 800076c:	ed9f 1b70 	vldr	d1, [pc, #448]	; 8000930 <Control_Init+0x2b0>
 8000770:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8000774:	487d      	ldr	r0, [pc, #500]	; (800096c <Control_Init+0x2ec>)
 8000776:	f000 f9fb 	bl	8000b70 <Pid_Param_Init>
	Pid_Param_Init(&WheelB, M2_KP, M2_KI, M2_KD);
 800077a:	ed9f 2b6d 	vldr	d2, [pc, #436]	; 8000930 <Control_Init+0x2b0>
 800077e:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 8000938 <Control_Init+0x2b8>
 8000782:	ed9f 0b6f 	vldr	d0, [pc, #444]	; 8000940 <Control_Init+0x2c0>
 8000786:	487c      	ldr	r0, [pc, #496]	; (8000978 <Control_Init+0x2f8>)
 8000788:	f000 f9f2 	bl	8000b70 <Pid_Param_Init>
	Pid_Param_Init(&WheelC, M3_KP, M3_KI, M3_KD);
 800078c:	ed9f 2b68 	vldr	d2, [pc, #416]	; 8000930 <Control_Init+0x2b0>
 8000790:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8000930 <Control_Init+0x2b0>
 8000794:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8000798:	487b      	ldr	r0, [pc, #492]	; (8000988 <Control_Init+0x308>)
 800079a:	f000 f9e9 	bl	8000b70 <Pid_Param_Init>
	Pid_Param_Init(&WheelD, M4_KP, M4_KI, M4_KD);
 800079e:	ed9f 2b64 	vldr	d2, [pc, #400]	; 8000930 <Control_Init+0x2b0>
 80007a2:	ed9f 1b69 	vldr	d1, [pc, #420]	; 8000948 <Control_Init+0x2c8>
 80007a6:	ed9f 0b6a 	vldr	d0, [pc, #424]	; 8000950 <Control_Init+0x2d0>
 80007aa:	487a      	ldr	r0, [pc, #488]	; (8000994 <Control_Init+0x314>)
 80007ac:	f000 f9e0 	bl	8000b70 <Pid_Param_Init>

	i = 0;
 80007b0:	4b79      	ldr	r3, [pc, #484]	; (8000998 <Control_Init+0x318>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
	limit_integral = 0.6;
 80007b6:	4979      	ldr	r1, [pc, #484]	; (800099c <Control_Init+0x31c>)
 80007b8:	a367      	add	r3, pc, #412	; (adr r3, 8000958 <Control_Init+0x2d8>)
 80007ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007be:	e9c1 2300 	strd	r2, r3, [r1]
	pwm_arr = M1_PWM_timer.Init.Period;
 80007c2:	4b68      	ldr	r3, [pc, #416]	; (8000964 <Control_Init+0x2e4>)
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	ee07 3a90 	vmov	s15, r3
 80007ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007ce:	4b74      	ldr	r3, [pc, #464]	; (80009a0 <Control_Init+0x320>)
 80007d0:	ed83 7b00 	vstr	d7, [r3]

	// PCLK1_freq, APB1 timer frequency
	int32_t PCLK1_freq = HAL_RCC_GetPCLK1Freq();
 80007d4:	f008 feb2 	bl	800953c <HAL_RCC_GetPCLK1Freq>
 80007d8:	4603      	mov	r3, r0
 80007da:	607b      	str	r3, [r7, #4]
//	if((RCC->CFGR & RCC_CFGR_PPRE1) != 0)
//	{
//		PCLK1_freq *=2;
//	}
	if((RCC->CFGR & RCC_D2CFGR_D2PPRE1) != 0)
 80007dc:	4b71      	ldr	r3, [pc, #452]	; (80009a4 <Control_Init+0x324>)
 80007de:	691b      	ldr	r3, [r3, #16]
 80007e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d002      	beq.n	80007ee <Control_Init+0x16e>
	{
		PCLK1_freq *=2;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	607b      	str	r3, [r7, #4]
	}

	int32_t timer_interrupt_freq = (double)PCLK1_freq / (Encoder_Interrupt_timer.Init.Prescaler + 1) / Encoder_Interrupt_timer.Init.Period;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	ee07 3a90 	vmov	s15, r3
 80007f4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007f8:	4b6b      	ldr	r3, [pc, #428]	; (80009a8 <Control_Init+0x328>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	3301      	adds	r3, #1
 80007fe:	ee07 3a90 	vmov	s15, r3
 8000802:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000806:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800080a:	4b67      	ldr	r3, [pc, #412]	; (80009a8 <Control_Init+0x328>)
 800080c:	68db      	ldr	r3, [r3, #12]
 800080e:	ee07 3a90 	vmov	s15, r3
 8000812:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000816:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800081a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800081e:	ee17 3a90 	vmov	r3, s15
 8000822:	603b      	str	r3, [r7, #0]
	control_period = (double)(1 / (double)timer_interrupt_freq);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	ee07 3a90 	vmov	s15, r3
 800082a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800082e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000832:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000836:	4b5d      	ldr	r3, [pc, #372]	; (80009ac <Control_Init+0x32c>)
 8000838:	ed83 7b00 	vstr	d7, [r3]

	WheelA.integral = 0.0;
 800083c:	494b      	ldr	r1, [pc, #300]	; (800096c <Control_Init+0x2ec>)
 800083e:	f04f 0200 	mov.w	r2, #0
 8000842:	f04f 0300 	mov.w	r3, #0
 8000846:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	WheelB.integral = 0.0;
 800084a:	494b      	ldr	r1, [pc, #300]	; (8000978 <Control_Init+0x2f8>)
 800084c:	f04f 0200 	mov.w	r2, #0
 8000850:	f04f 0300 	mov.w	r3, #0
 8000854:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	WheelC.integral = 0.0;
 8000858:	494b      	ldr	r1, [pc, #300]	; (8000988 <Control_Init+0x308>)
 800085a:	f04f 0200 	mov.w	r2, #0
 800085e:	f04f 0300 	mov.w	r3, #0
 8000862:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	WheelD.integral = 0.0;
 8000866:	494b      	ldr	r1, [pc, #300]	; (8000994 <Control_Init+0x314>)
 8000868:	f04f 0200 	mov.w	r2, #0
 800086c:	f04f 0300 	mov.w	r3, #0
 8000870:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	WheelA.goal = 0.0;
 8000874:	493d      	ldr	r1, [pc, #244]	; (800096c <Control_Init+0x2ec>)
 8000876:	f04f 0200 	mov.w	r2, #0
 800087a:	f04f 0300 	mov.w	r3, #0
 800087e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	WheelB.goal = 0.0;
 8000882:	493d      	ldr	r1, [pc, #244]	; (8000978 <Control_Init+0x2f8>)
 8000884:	f04f 0200 	mov.w	r2, #0
 8000888:	f04f 0300 	mov.w	r3, #0
 800088c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	WheelC.goal = 0.0;
 8000890:	493d      	ldr	r1, [pc, #244]	; (8000988 <Control_Init+0x308>)
 8000892:	f04f 0200 	mov.w	r2, #0
 8000896:	f04f 0300 	mov.w	r3, #0
 800089a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	WheelD.goal = 0.0;
 800089e:	493d      	ldr	r1, [pc, #244]	; (8000994 <Control_Init+0x314>)
 80008a0:	f04f 0200 	mov.w	r2, #0
 80008a4:	f04f 0300 	mov.w	r3, #0
 80008a8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	// stop chassis
	HAL_GPIO_WritePin(WheelA.DIR_pin_type, WheelA.DIR_pin_Num, GPIO_PIN_RESET);
 80008ac:	4b2f      	ldr	r3, [pc, #188]	; (800096c <Control_Init+0x2ec>)
 80008ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b0:	4a2e      	ldr	r2, [pc, #184]	; (800096c <Control_Init+0x2ec>)
 80008b2:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 80008b6:	2200      	movs	r2, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f007 feb1 	bl	8008620 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelA.pwm_timer), WheelA.pwm_timer_channel, 0);
 80008be:	4b2b      	ldr	r3, [pc, #172]	; (800096c <Control_Init+0x2ec>)
 80008c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d105      	bne.n	80008d4 <Control_Init+0x254>
 80008c8:	4b28      	ldr	r3, [pc, #160]	; (800096c <Control_Init+0x2ec>)
 80008ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80008ce:	2200      	movs	r2, #0
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
 80008d2:	e072      	b.n	80009ba <Control_Init+0x33a>
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <Control_Init+0x2ec>)
 80008d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d105      	bne.n	80008ea <Control_Init+0x26a>
 80008de:	4b23      	ldr	r3, [pc, #140]	; (800096c <Control_Init+0x2ec>)
 80008e0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80008e4:	2300      	movs	r3, #0
 80008e6:	6393      	str	r3, [r2, #56]	; 0x38
 80008e8:	e067      	b.n	80009ba <Control_Init+0x33a>
 80008ea:	4b20      	ldr	r3, [pc, #128]	; (800096c <Control_Init+0x2ec>)
 80008ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008f0:	2b08      	cmp	r3, #8
 80008f2:	d105      	bne.n	8000900 <Control_Init+0x280>
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <Control_Init+0x2ec>)
 80008f6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80008fa:	2300      	movs	r3, #0
 80008fc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008fe:	e05c      	b.n	80009ba <Control_Init+0x33a>
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <Control_Init+0x2ec>)
 8000902:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000906:	2b0c      	cmp	r3, #12
 8000908:	d105      	bne.n	8000916 <Control_Init+0x296>
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <Control_Init+0x2ec>)
 800090c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000910:	2300      	movs	r3, #0
 8000912:	6413      	str	r3, [r2, #64]	; 0x40
 8000914:	e051      	b.n	80009ba <Control_Init+0x33a>
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <Control_Init+0x2ec>)
 8000918:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800091c:	2b10      	cmp	r3, #16
 800091e:	d147      	bne.n	80009b0 <Control_Init+0x330>
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <Control_Init+0x2ec>)
 8000922:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000926:	2300      	movs	r3, #0
 8000928:	6593      	str	r3, [r2, #88]	; 0x58
 800092a:	e046      	b.n	80009ba <Control_Init+0x33a>
 800092c:	f3af 8000 	nop.w
	...
 8000938:	c24a5f41 	.word	0xc24a5f41
 800093c:	4022505d 	.word	0x4022505d
 8000940:	e485b74b 	.word	0xe485b74b
 8000944:	3fcb93ed 	.word	0x3fcb93ed
 8000948:	ebf65dc0 	.word	0xebf65dc0
 800094c:	4023cf4e 	.word	0x4023cf4e
 8000950:	11ba3ca7 	.word	0x11ba3ca7
 8000954:	3fdc1516 	.word	0x3fdc1516
 8000958:	33333333 	.word	0x33333333
 800095c:	3fe33333 	.word	0x3fe33333
 8000960:	240016dc 	.word	0x240016dc
 8000964:	2400180c 	.word	0x2400180c
 8000968:	58020c00 	.word	0x58020c00
 800096c:	240000f0 	.word	0x240000f0
 8000970:	240017c0 	.word	0x240017c0
 8000974:	58020400 	.word	0x58020400
 8000978:	24000200 	.word	0x24000200
 800097c:	24001728 	.word	0x24001728
 8000980:	24001858 	.word	0x24001858
 8000984:	58021000 	.word	0x58021000
 8000988:	24000310 	.word	0x24000310
 800098c:	24001774 	.word	0x24001774
 8000990:	58020800 	.word	0x58020800
 8000994:	24000420 	.word	0x24000420
 8000998:	24000530 	.word	0x24000530
 800099c:	240000d8 	.word	0x240000d8
 80009a0:	240000e0 	.word	0x240000e0
 80009a4:	58024400 	.word	0x58024400
 80009a8:	240018a4 	.word	0x240018a4
 80009ac:	240000e8 	.word	0x240000e8
 80009b0:	4b6b      	ldr	r3, [pc, #428]	; (8000b60 <Control_Init+0x4e0>)
 80009b2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80009b6:	2300      	movs	r3, #0
 80009b8:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_GPIO_WritePin(WheelB.DIR_pin_type, WheelB.DIR_pin_Num, GPIO_PIN_RESET);
 80009ba:	4b6a      	ldr	r3, [pc, #424]	; (8000b64 <Control_Init+0x4e4>)
 80009bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009be:	4a69      	ldr	r2, [pc, #420]	; (8000b64 <Control_Init+0x4e4>)
 80009c0:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 80009c4:	2200      	movs	r2, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f007 fe2a 	bl	8008620 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelB.pwm_timer), WheelB.pwm_timer_channel, 0);
 80009cc:	4b65      	ldr	r3, [pc, #404]	; (8000b64 <Control_Init+0x4e4>)
 80009ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d105      	bne.n	80009e2 <Control_Init+0x362>
 80009d6:	4b63      	ldr	r3, [pc, #396]	; (8000b64 <Control_Init+0x4e4>)
 80009d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80009dc:	2200      	movs	r2, #0
 80009de:	635a      	str	r2, [r3, #52]	; 0x34
 80009e0:	e030      	b.n	8000a44 <Control_Init+0x3c4>
 80009e2:	4b60      	ldr	r3, [pc, #384]	; (8000b64 <Control_Init+0x4e4>)
 80009e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009e8:	2b04      	cmp	r3, #4
 80009ea:	d105      	bne.n	80009f8 <Control_Init+0x378>
 80009ec:	4b5d      	ldr	r3, [pc, #372]	; (8000b64 <Control_Init+0x4e4>)
 80009ee:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80009f2:	2300      	movs	r3, #0
 80009f4:	6393      	str	r3, [r2, #56]	; 0x38
 80009f6:	e025      	b.n	8000a44 <Control_Init+0x3c4>
 80009f8:	4b5a      	ldr	r3, [pc, #360]	; (8000b64 <Control_Init+0x4e4>)
 80009fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009fe:	2b08      	cmp	r3, #8
 8000a00:	d105      	bne.n	8000a0e <Control_Init+0x38e>
 8000a02:	4b58      	ldr	r3, [pc, #352]	; (8000b64 <Control_Init+0x4e4>)
 8000a04:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a08:	2300      	movs	r3, #0
 8000a0a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000a0c:	e01a      	b.n	8000a44 <Control_Init+0x3c4>
 8000a0e:	4b55      	ldr	r3, [pc, #340]	; (8000b64 <Control_Init+0x4e4>)
 8000a10:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a14:	2b0c      	cmp	r3, #12
 8000a16:	d105      	bne.n	8000a24 <Control_Init+0x3a4>
 8000a18:	4b52      	ldr	r3, [pc, #328]	; (8000b64 <Control_Init+0x4e4>)
 8000a1a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a1e:	2300      	movs	r3, #0
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	e00f      	b.n	8000a44 <Control_Init+0x3c4>
 8000a24:	4b4f      	ldr	r3, [pc, #316]	; (8000b64 <Control_Init+0x4e4>)
 8000a26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a2a:	2b10      	cmp	r3, #16
 8000a2c:	d105      	bne.n	8000a3a <Control_Init+0x3ba>
 8000a2e:	4b4d      	ldr	r3, [pc, #308]	; (8000b64 <Control_Init+0x4e4>)
 8000a30:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a34:	2300      	movs	r3, #0
 8000a36:	6593      	str	r3, [r2, #88]	; 0x58
 8000a38:	e004      	b.n	8000a44 <Control_Init+0x3c4>
 8000a3a:	4b4a      	ldr	r3, [pc, #296]	; (8000b64 <Control_Init+0x4e4>)
 8000a3c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a40:	2300      	movs	r3, #0
 8000a42:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_GPIO_WritePin(WheelC.DIR_pin_type, WheelC.DIR_pin_Num, GPIO_PIN_RESET);
 8000a44:	4b48      	ldr	r3, [pc, #288]	; (8000b68 <Control_Init+0x4e8>)
 8000a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a48:	4a47      	ldr	r2, [pc, #284]	; (8000b68 <Control_Init+0x4e8>)
 8000a4a:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8000a4e:	2200      	movs	r2, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f007 fde5 	bl	8008620 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelC.pwm_timer), WheelC.pwm_timer_channel, 0);
 8000a56:	4b44      	ldr	r3, [pc, #272]	; (8000b68 <Control_Init+0x4e8>)
 8000a58:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d105      	bne.n	8000a6c <Control_Init+0x3ec>
 8000a60:	4b41      	ldr	r3, [pc, #260]	; (8000b68 <Control_Init+0x4e8>)
 8000a62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000a66:	2200      	movs	r2, #0
 8000a68:	635a      	str	r2, [r3, #52]	; 0x34
 8000a6a:	e030      	b.n	8000ace <Control_Init+0x44e>
 8000a6c:	4b3e      	ldr	r3, [pc, #248]	; (8000b68 <Control_Init+0x4e8>)
 8000a6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a72:	2b04      	cmp	r3, #4
 8000a74:	d105      	bne.n	8000a82 <Control_Init+0x402>
 8000a76:	4b3c      	ldr	r3, [pc, #240]	; (8000b68 <Control_Init+0x4e8>)
 8000a78:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	6393      	str	r3, [r2, #56]	; 0x38
 8000a80:	e025      	b.n	8000ace <Control_Init+0x44e>
 8000a82:	4b39      	ldr	r3, [pc, #228]	; (8000b68 <Control_Init+0x4e8>)
 8000a84:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a88:	2b08      	cmp	r3, #8
 8000a8a:	d105      	bne.n	8000a98 <Control_Init+0x418>
 8000a8c:	4b36      	ldr	r3, [pc, #216]	; (8000b68 <Control_Init+0x4e8>)
 8000a8e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a92:	2300      	movs	r3, #0
 8000a94:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000a96:	e01a      	b.n	8000ace <Control_Init+0x44e>
 8000a98:	4b33      	ldr	r3, [pc, #204]	; (8000b68 <Control_Init+0x4e8>)
 8000a9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a9e:	2b0c      	cmp	r3, #12
 8000aa0:	d105      	bne.n	8000aae <Control_Init+0x42e>
 8000aa2:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <Control_Init+0x4e8>)
 8000aa4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000aac:	e00f      	b.n	8000ace <Control_Init+0x44e>
 8000aae:	4b2e      	ldr	r3, [pc, #184]	; (8000b68 <Control_Init+0x4e8>)
 8000ab0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ab4:	2b10      	cmp	r3, #16
 8000ab6:	d105      	bne.n	8000ac4 <Control_Init+0x444>
 8000ab8:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <Control_Init+0x4e8>)
 8000aba:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000abe:	2300      	movs	r3, #0
 8000ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac2:	e004      	b.n	8000ace <Control_Init+0x44e>
 8000ac4:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <Control_Init+0x4e8>)
 8000ac6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000aca:	2300      	movs	r3, #0
 8000acc:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_GPIO_WritePin(WheelD.DIR_pin_type, WheelD.DIR_pin_Num, GPIO_PIN_RESET);
 8000ace:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <Control_Init+0x4ec>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad2:	4a26      	ldr	r2, [pc, #152]	; (8000b6c <Control_Init+0x4ec>)
 8000ad4:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f007 fda0 	bl	8008620 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <Control_Init+0x4ec>)
 8000ae2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d105      	bne.n	8000af6 <Control_Init+0x476>
 8000aea:	4b20      	ldr	r3, [pc, #128]	; (8000b6c <Control_Init+0x4ec>)
 8000aec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000af0:	2200      	movs	r2, #0
 8000af2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000af4:	e030      	b.n	8000b58 <Control_Init+0x4d8>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000af6:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <Control_Init+0x4ec>)
 8000af8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000afc:	2b04      	cmp	r3, #4
 8000afe:	d105      	bne.n	8000b0c <Control_Init+0x48c>
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <Control_Init+0x4ec>)
 8000b02:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b06:	2300      	movs	r3, #0
 8000b08:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b0a:	e025      	b.n	8000b58 <Control_Init+0x4d8>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <Control_Init+0x4ec>)
 8000b0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000b12:	2b08      	cmp	r3, #8
 8000b14:	d105      	bne.n	8000b22 <Control_Init+0x4a2>
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <Control_Init+0x4ec>)
 8000b18:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000b20:	e01a      	b.n	8000b58 <Control_Init+0x4d8>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <Control_Init+0x4ec>)
 8000b24:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000b28:	2b0c      	cmp	r3, #12
 8000b2a:	d105      	bne.n	8000b38 <Control_Init+0x4b8>
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <Control_Init+0x4ec>)
 8000b2e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b32:	2300      	movs	r3, #0
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b36:	e00f      	b.n	8000b58 <Control_Init+0x4d8>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <Control_Init+0x4ec>)
 8000b3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000b3e:	2b10      	cmp	r3, #16
 8000b40:	d105      	bne.n	8000b4e <Control_Init+0x4ce>
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <Control_Init+0x4ec>)
 8000b44:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b48:	2300      	movs	r3, #0
 8000b4a:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000b4c:	e004      	b.n	8000b58 <Control_Init+0x4d8>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <Control_Init+0x4ec>)
 8000b50:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b54:	2300      	movs	r3, #0
 8000b56:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd90      	pop	{r4, r7, pc}
 8000b60:	240000f0 	.word	0x240000f0
 8000b64:	24000200 	.word	0x24000200
 8000b68:	24000310 	.word	0x24000310
 8000b6c:	24000420 	.word	0x24000420

08000b70 <Pid_Param_Init>:
/**
 * @ brief assign the pid gain value into the PID_Controll object
 * @ retval None
 * */
void Pid_Param_Init(PID_Control *Wheel_, double kp, double ki, double kd)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b089      	sub	sp, #36	; 0x24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	61f8      	str	r0, [r7, #28]
 8000b78:	ed87 0b04 	vstr	d0, [r7, #16]
 8000b7c:	ed87 1b02 	vstr	d1, [r7, #8]
 8000b80:	ed87 2b00 	vstr	d2, [r7]
	Wheel_->Kp = kp;
 8000b84:	69f9      	ldr	r1, [r7, #28]
 8000b86:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b8a:	e9c1 2300 	strd	r2, r3, [r1]
	Wheel_->Ki = ki;
 8000b8e:	69f9      	ldr	r1, [r7, #28]
 8000b90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b94:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Wheel_->Kd = kd;
 8000b98:	69f9      	ldr	r1, [r7, #28]
 8000b9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b9e:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8000ba2:	bf00      	nop
 8000ba4:	3724      	adds	r7, #36	; 0x24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <Motor_Driver_Init>:
#ifdef G2_18V17
void Motor_Driver_Init(PID_Control *Wheel_,
		GPIO_TypeDef *DIR_pin_type, uint16_t DIR_pin_num_,
		TIM_HandleTypeDef encoder_timer_, uint32_t encoder_timer_channel_, int encoder_dir_,
		TIM_HandleTypeDef pwm_timer_, uint32_t pwm_timer_channel_)
{
 8000bae:	b082      	sub	sp, #8
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	61fb      	str	r3, [r7, #28]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	80fb      	strh	r3, [r7, #6]
	Wheel_->DIR_pin_type = DIR_pin_type;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	661a      	str	r2, [r3, #96]	; 0x60
	Wheel_->DIR_pin_Num = DIR_pin_num_;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	88fa      	ldrh	r2, [r7, #6]
 8000bca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	Wheel_->encoder_timer = encoder_timer_;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	3368      	adds	r3, #104	; 0x68
 8000bd2:	f107 011c 	add.w	r1, r7, #28
 8000bd6:	224c      	movs	r2, #76	; 0x4c
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f00e f8b3 	bl	800ed44 <memcpy>
	Wheel_->encoder_timer_channel = encoder_timer_channel_;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000be2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	Wheel_->encoder_dir = encoder_dir_;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000bea:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	Wheel_->pwm_timer = pwm_timer_;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	33bc      	adds	r3, #188	; 0xbc
 8000bf2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000bf6:	224c      	movs	r2, #76	; 0x4c
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f00e f8a3 	bl	800ed44 <memcpy>
	Wheel_->pwm_timer_channel = pwm_timer_channel_;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000c04:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c12:	b002      	add	sp, #8
 8000c14:	4770      	bx	lr
	...

08000c18 <Control_Timer_Init>:
 * @ brief initialize the timers that encoder and pwm used
 * @ all the definition in the function are in "control.h"
 * @ retval None
 * */
void Control_Timer_Init()
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&M1_Encoder_timer, M1_Encoder_timerchannel);
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	4810      	ldr	r0, [pc, #64]	; (8000c60 <Control_Timer_Init+0x48>)
 8000c20:	f00a fd72 	bl	800b708 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M1_PWM_timer, M1_PWM_timerchannel);
 8000c24:	2100      	movs	r1, #0
 8000c26:	480f      	ldr	r0, [pc, #60]	; (8000c64 <Control_Timer_Init+0x4c>)
 8000c28:	f00a fbac 	bl	800b384 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M2_Encoder_timer, M2_Encoder_timerchannel);
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	480e      	ldr	r0, [pc, #56]	; (8000c68 <Control_Timer_Init+0x50>)
 8000c30:	f00a fd6a 	bl	800b708 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M2_PWM_timer, M2_PWM_timerchannel);
 8000c34:	2104      	movs	r1, #4
 8000c36:	480b      	ldr	r0, [pc, #44]	; (8000c64 <Control_Timer_Init+0x4c>)
 8000c38:	f00a fba4 	bl	800b384 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M3_Encoder_timer, M3_Encoder_timerchannel);
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	480b      	ldr	r0, [pc, #44]	; (8000c6c <Control_Timer_Init+0x54>)
 8000c40:	f00a fd62 	bl	800b708 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M3_PWM_timer, M3_PWM_timerchannel);
 8000c44:	2100      	movs	r1, #0
 8000c46:	480a      	ldr	r0, [pc, #40]	; (8000c70 <Control_Timer_Init+0x58>)
 8000c48:	f00a fb9c 	bl	800b384 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M4_Encoder_timer, M4_Encoder_timerchannel);
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	4809      	ldr	r0, [pc, #36]	; (8000c74 <Control_Timer_Init+0x5c>)
 8000c50:	f00a fd5a 	bl	800b708 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M4_PWM_timer, M4_PWM_timerchannel);
 8000c54:	2104      	movs	r1, #4
 8000c56:	4806      	ldr	r0, [pc, #24]	; (8000c70 <Control_Timer_Init+0x58>)
 8000c58:	f00a fb94 	bl	800b384 <HAL_TIM_PWM_Start>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	240016dc 	.word	0x240016dc
 8000c64:	2400180c 	.word	0x2400180c
 8000c68:	240017c0 	.word	0x240017c0
 8000c6c:	24001728 	.word	0x24001728
 8000c70:	24001858 	.word	0x24001858
 8000c74:	24001774 	.word	0x24001774

08000c78 <Hardware_Info_Init>:
/**
 * @ brief assign the hardware value for motor and chassis radius error
 * @ retval None
 * */
void Hardware_Info_Init()
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
	radius_error_a = 1.0;
 8000c7c:	4911      	ldr	r1, [pc, #68]	; (8000cc4 <Hardware_Info_Init+0x4c>)
 8000c7e:	f04f 0200 	mov.w	r2, #0
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <Hardware_Info_Init+0x50>)
 8000c84:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_b = 1.0;
 8000c88:	4910      	ldr	r1, [pc, #64]	; (8000ccc <Hardware_Info_Init+0x54>)
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <Hardware_Info_Init+0x50>)
 8000c90:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_c = 1.0;
 8000c94:	490e      	ldr	r1, [pc, #56]	; (8000cd0 <Hardware_Info_Init+0x58>)
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <Hardware_Info_Init+0x50>)
 8000c9c:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_d = 1.0;
 8000ca0:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <Hardware_Info_Init+0x5c>)
 8000ca2:	f04f 0200 	mov.w	r2, #0
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <Hardware_Info_Init+0x50>)
 8000ca8:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_chassis = 1.0;
 8000cac:	490a      	ldr	r1, [pc, #40]	; (8000cd8 <Hardware_Info_Init+0x60>)
 8000cae:	f04f 0200 	mov.w	r2, #0
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <Hardware_Info_Init+0x50>)
 8000cb4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	24000098 	.word	0x24000098
 8000cc8:	3ff00000 	.word	0x3ff00000
 8000ccc:	240000a0 	.word	0x240000a0
 8000cd0:	240000a8 	.word	0x240000a8
 8000cd4:	240000b0 	.word	0x240000b0
 8000cd8:	240000b8 	.word	0x240000b8
 8000cdc:	00000000 	.word	0x00000000

08000ce0 <PID_Controller>:
 * @ brief PID control for the motor
 * @ param Wheel_ the object declare for each motor (WheelA, WheelB, WheelC)
 * @ retval None
 * */
void PID_Controller(PID_Control *Wheel_)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	Wheel_->CountNum = __HAL_TIM_GetCounter(&Wheel_->encoder_timer)* Wheel_->encoder_dir;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	fb12 f303 	smulbb	r3, r2, r3
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	b21a      	sxth	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	831a      	strh	r2, [r3, #24]
	Wheel_->rps = (double)Wheel_->CountNum / ((double)4 * encoder_resolution * speed_reduction_ratio * control_period);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000d0a:	ee07 3a90 	vmov	s15, r3
 8000d0e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000d12:	4bad      	ldr	r3, [pc, #692]	; (8000fc8 <PID_Controller+0x2e8>)
 8000d14:	ed93 7b00 	vldr	d7, [r3]
 8000d18:	ed9f 6ba9 	vldr	d6, [pc, #676]	; 8000fc0 <PID_Controller+0x2e0>
 8000d1c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d20:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	ed83 7b08 	vstr	d7, [r3, #32]
	__HAL_TIM_SetCounter(&Wheel_->encoder_timer ,0);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
//		{
//			sssss[i] = Wheel_->rps;
//			i++;
//		}

	Wheel_->err = Wheel_->goal - Wheel_->rps;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	ed93 7b08 	vldr	d7, [r3, #32]
 8000d3e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	Wheel_->propotional = (double)Wheel_->err * Wheel_->Kp;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	ed93 7b00 	vldr	d7, [r3]
 8000d54:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	Wheel_->integral += (double)Wheel_->err * Wheel_->Ki * control_period;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	ed93 7b02 	vldr	d7, [r3, #8]
 8000d70:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000d74:	4b94      	ldr	r3, [pc, #592]	; (8000fc8 <PID_Controller+0x2e8>)
 8000d76:	ed93 7b00 	vldr	d7, [r3]
 8000d7a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d7e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	Wheel_->integral = (Wheel_->integral > limit_integral)? limit_integral : Wheel_->integral;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000d8e:	4b8f      	ldr	r3, [pc, #572]	; (8000fcc <PID_Controller+0x2ec>)
 8000d90:	ed93 7b00 	vldr	d7, [r3]
 8000d94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9c:	dd03      	ble.n	8000da6 <PID_Controller+0xc6>
 8000d9e:	4b8b      	ldr	r3, [pc, #556]	; (8000fcc <PID_Controller+0x2ec>)
 8000da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da4:	e002      	b.n	8000dac <PID_Controller+0xcc>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	Wheel_->integral = (Wheel_->integral < (double)(-1) * limit_integral)? (double)(-1) * limit_integral : Wheel_->integral;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000db8:	4b84      	ldr	r3, [pc, #528]	; (8000fcc <PID_Controller+0x2ec>)
 8000dba:	ed93 7b00 	vldr	d7, [r3]
 8000dbe:	eeb1 7b47 	vneg.f64	d7, d7
 8000dc2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dca:	d505      	bpl.n	8000dd8 <PID_Controller+0xf8>
 8000dcc:	4b7f      	ldr	r3, [pc, #508]	; (8000fcc <PID_Controller+0x2ec>)
 8000dce:	ed93 7b00 	vldr	d7, [r3]
 8000dd2:	eeb1 7b47 	vneg.f64	d7, d7
 8000dd6:	e002      	b.n	8000dde <PID_Controller+0xfe>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	Wheel_->differential = (double) Wheel_->Kd * (-1) * (Wheel_->rps - Wheel_->rps_before) / control_period;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	ed93 7b04 	vldr	d7, [r3, #16]
 8000dea:	eeb1 6b47 	vneg.f64	d6, d7
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	ed93 5b08 	vldr	d5, [r3, #32]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8000dfa:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000dfe:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000e02:	4b71      	ldr	r3, [pc, #452]	; (8000fc8 <PID_Controller+0x2e8>)
 8000e04:	ed93 6b00 	vldr	d6, [r3]
 8000e08:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50


	Wheel_->duty = Wheel_->propotional + Wheel_->integral + Wheel_->differential;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000e1e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8000e28:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	Wheel_->duty = (Wheel_->duty > 1)? 1 : Wheel_->duty;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000e38:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e44:	dd03      	ble.n	8000e4e <PID_Controller+0x16e>
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	4b61      	ldr	r3, [pc, #388]	; (8000fd0 <PID_Controller+0x2f0>)
 8000e4c:	e002      	b.n	8000e54 <PID_Controller+0x174>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	Wheel_->duty = (Wheel_->duty < -1)? -1 : Wheel_->duty;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000e60:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000e64:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6c:	d503      	bpl.n	8000e76 <PID_Controller+0x196>
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	4b58      	ldr	r3, [pc, #352]	; (8000fd4 <PID_Controller+0x2f4>)
 8000e74:	e002      	b.n	8000e7c <PID_Controller+0x19c>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		HAL_GPIO_WritePin(Wheel_->PHASE_pin_type, Wheel_->PHASE_pin_Num, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
	}
#endif
#ifdef G2_18V17
	if(Wheel_->duty >= 0)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000e88:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e90:	f2c0 80a4 	blt.w	8000fdc <PID_Controller+0x2fc>
	{
		HAL_GPIO_WritePin(Wheel_->DIR_pin_type, Wheel_->DIR_pin_Num, GPIO_PIN_RESET);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f007 fbbd 	bl	8008620 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d112      	bne.n	8000ed6 <PID_Controller+0x1f6>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000eb6:	4b48      	ldr	r3, [pc, #288]	; (8000fd8 <PID_Controller+0x2f8>)
 8000eb8:	ed93 7b00 	vldr	d7, [r3]
 8000ebc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ec0:	eeb0 7bc7 	vabs.f64	d7, d7
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000eca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ece:	ee17 2a90 	vmov	r2, s15
 8000ed2:	635a      	str	r2, [r3, #52]	; 0x34
 8000ed4:	e115      	b.n	8001102 <PID_Controller+0x422>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000edc:	2b04      	cmp	r3, #4
 8000ede:	d112      	bne.n	8000f06 <PID_Controller+0x226>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000ee6:	4b3c      	ldr	r3, [pc, #240]	; (8000fd8 <PID_Controller+0x2f8>)
 8000ee8:	ed93 7b00 	vldr	d7, [r3]
 8000eec:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ef0:	eeb0 7bc7 	vabs.f64	d7, d7
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000efa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000efe:	ee17 3a90 	vmov	r3, s15
 8000f02:	6393      	str	r3, [r2, #56]	; 0x38
 8000f04:	e0fd      	b.n	8001102 <PID_Controller+0x422>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f0c:	2b08      	cmp	r3, #8
 8000f0e:	d112      	bne.n	8000f36 <PID_Controller+0x256>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f16:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <PID_Controller+0x2f8>)
 8000f18:	ed93 7b00 	vldr	d7, [r3]
 8000f1c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f20:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000f2a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f2e:	ee17 3a90 	vmov	r3, s15
 8000f32:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000f34:	e0e5      	b.n	8001102 <PID_Controller+0x422>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f3c:	2b0c      	cmp	r3, #12
 8000f3e:	d112      	bne.n	8000f66 <PID_Controller+0x286>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f46:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <PID_Controller+0x2f8>)
 8000f48:	ed93 7b00 	vldr	d7, [r3]
 8000f4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f50:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000f5a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f5e:	ee17 3a90 	vmov	r3, s15
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	e0cd      	b.n	8001102 <PID_Controller+0x422>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f6c:	2b10      	cmp	r3, #16
 8000f6e:	d112      	bne.n	8000f96 <PID_Controller+0x2b6>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <PID_Controller+0x2f8>)
 8000f78:	ed93 7b00 	vldr	d7, [r3]
 8000f7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f80:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000f8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f8e:	ee17 3a90 	vmov	r3, s15
 8000f92:	6593      	str	r3, [r2, #88]	; 0x58
 8000f94:	e0b5      	b.n	8001102 <PID_Controller+0x422>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <PID_Controller+0x2f8>)
 8000f9e:	ed93 7b00 	vldr	d7, [r3]
 8000fa2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000fa6:	eeb0 7bc7 	vabs.f64	d7, d7
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000fb0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fb4:	ee17 3a90 	vmov	r3, s15
 8000fb8:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000fba:	e0a2      	b.n	8001102 <PID_Controller+0x422>
 8000fbc:	f3af 8000 	nop.w
 8000fc0:	33333333 	.word	0x33333333
 8000fc4:	40ae6333 	.word	0x40ae6333
 8000fc8:	240000e8 	.word	0x240000e8
 8000fcc:	240000d8 	.word	0x240000d8
 8000fd0:	3ff00000 	.word	0x3ff00000
 8000fd4:	bff00000 	.word	0xbff00000
 8000fd8:	240000e0 	.word	0x240000e0
	}
	else
	{
		HAL_GPIO_WritePin(Wheel_->DIR_pin_type, Wheel_->DIR_pin_Num, GPIO_PIN_SET);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f007 fb19 	bl	8008620 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d112      	bne.n	800101e <PID_Controller+0x33e>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000ffe:	4b46      	ldr	r3, [pc, #280]	; (8001118 <PID_Controller+0x438>)
 8001000:	ed93 7b00 	vldr	d7, [r3]
 8001004:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001008:	eeb0 7bc7 	vabs.f64	d7, d7
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001012:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001016:	ee17 2a90 	vmov	r2, s15
 800101a:	635a      	str	r2, [r3, #52]	; 0x34
 800101c:	e071      	b.n	8001102 <PID_Controller+0x422>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001024:	2b04      	cmp	r3, #4
 8001026:	d112      	bne.n	800104e <PID_Controller+0x36e>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800102e:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <PID_Controller+0x438>)
 8001030:	ed93 7b00 	vldr	d7, [r3]
 8001034:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001038:	eeb0 7bc7 	vabs.f64	d7, d7
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001042:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001046:	ee17 3a90 	vmov	r3, s15
 800104a:	6393      	str	r3, [r2, #56]	; 0x38
 800104c:	e059      	b.n	8001102 <PID_Controller+0x422>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001054:	2b08      	cmp	r3, #8
 8001056:	d112      	bne.n	800107e <PID_Controller+0x39e>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800105e:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <PID_Controller+0x438>)
 8001060:	ed93 7b00 	vldr	d7, [r3]
 8001064:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001068:	eeb0 7bc7 	vabs.f64	d7, d7
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001072:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001076:	ee17 3a90 	vmov	r3, s15
 800107a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800107c:	e041      	b.n	8001102 <PID_Controller+0x422>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001084:	2b0c      	cmp	r3, #12
 8001086:	d112      	bne.n	80010ae <PID_Controller+0x3ce>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800108e:	4b22      	ldr	r3, [pc, #136]	; (8001118 <PID_Controller+0x438>)
 8001090:	ed93 7b00 	vldr	d7, [r3]
 8001094:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001098:	eeb0 7bc7 	vabs.f64	d7, d7
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80010a2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010a6:	ee17 3a90 	vmov	r3, s15
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
 80010ac:	e029      	b.n	8001102 <PID_Controller+0x422>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010b4:	2b10      	cmp	r3, #16
 80010b6:	d112      	bne.n	80010de <PID_Controller+0x3fe>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <PID_Controller+0x438>)
 80010c0:	ed93 7b00 	vldr	d7, [r3]
 80010c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010c8:	eeb0 7bc7 	vabs.f64	d7, d7
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80010d2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010d6:	ee17 3a90 	vmov	r3, s15
 80010da:	6593      	str	r3, [r2, #88]	; 0x58
 80010dc:	e011      	b.n	8001102 <PID_Controller+0x422>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <PID_Controller+0x438>)
 80010e6:	ed93 7b00 	vldr	d7, [r3]
 80010ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010ee:	eeb0 7bc7 	vabs.f64	d7, d7
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80010f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010fc:	ee17 3a90 	vmov	r3, s15
 8001100:	65d3      	str	r3, [r2, #92]	; 0x5c
	}
#endif

	Wheel_->rps_before = Wheel_->rps;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	240000e0 	.word	0x240000e0

0800111c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_DMA_Init+0x4c>)
 8001124:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001128:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <MX_DMA_Init+0x4c>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <MX_DMA_Init+0x4c>)
 8001134:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	200b      	movs	r0, #11
 8001146:	f003 ff8e 	bl	8005066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800114a:	200b      	movs	r0, #11
 800114c:	f003 ffa5 	bl	800509a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	200c      	movs	r0, #12
 8001156:	f003 ff86 	bl	8005066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800115a:	200c      	movs	r0, #12
 800115c:	f003 ff9d 	bl	800509a <HAL_NVIC_EnableIRQ>

}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	58024400 	.word	0x58024400

0800116c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08c      	sub	sp, #48	; 0x30
 8001170:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001182:	4b58      	ldr	r3, [pc, #352]	; (80012e4 <MX_GPIO_Init+0x178>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001188:	4a56      	ldr	r2, [pc, #344]	; (80012e4 <MX_GPIO_Init+0x178>)
 800118a:	f043 0310 	orr.w	r3, r3, #16
 800118e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001192:	4b54      	ldr	r3, [pc, #336]	; (80012e4 <MX_GPIO_Init+0x178>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001198:	f003 0310 	and.w	r3, r3, #16
 800119c:	61bb      	str	r3, [r7, #24]
 800119e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a0:	4b50      	ldr	r3, [pc, #320]	; (80012e4 <MX_GPIO_Init+0x178>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a6:	4a4f      	ldr	r2, [pc, #316]	; (80012e4 <MX_GPIO_Init+0x178>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b0:	4b4c      	ldr	r3, [pc, #304]	; (80012e4 <MX_GPIO_Init+0x178>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011be:	4b49      	ldr	r3, [pc, #292]	; (80012e4 <MX_GPIO_Init+0x178>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c4:	4a47      	ldr	r2, [pc, #284]	; (80012e4 <MX_GPIO_Init+0x178>)
 80011c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ce:	4b45      	ldr	r3, [pc, #276]	; (80012e4 <MX_GPIO_Init+0x178>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	4b41      	ldr	r3, [pc, #260]	; (80012e4 <MX_GPIO_Init+0x178>)
 80011de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e2:	4a40      	ldr	r2, [pc, #256]	; (80012e4 <MX_GPIO_Init+0x178>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ec:	4b3d      	ldr	r3, [pc, #244]	; (80012e4 <MX_GPIO_Init+0x178>)
 80011ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <MX_GPIO_Init+0x178>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001200:	4a38      	ldr	r2, [pc, #224]	; (80012e4 <MX_GPIO_Init+0x178>)
 8001202:	f043 0302 	orr.w	r3, r3, #2
 8001206:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800120a:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <MX_GPIO_Init+0x178>)
 800120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001218:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <MX_GPIO_Init+0x178>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121e:	4a31      	ldr	r2, [pc, #196]	; (80012e4 <MX_GPIO_Init+0x178>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001228:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <MX_GPIO_Init+0x178>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2108      	movs	r1, #8
 800123a:	482b      	ldr	r0, [pc, #172]	; (80012e8 <MX_GPIO_Init+0x17c>)
 800123c:	f007 f9f0 	bl	8008620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001246:	4829      	ldr	r0, [pc, #164]	; (80012ec <MX_GPIO_Init+0x180>)
 8001248:	f007 f9ea 	bl	8008620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001252:	4827      	ldr	r0, [pc, #156]	; (80012f0 <MX_GPIO_Init+0x184>)
 8001254:	f007 f9e4 	bl	8008620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800125e:	4825      	ldr	r0, [pc, #148]	; (80012f4 <MX_GPIO_Init+0x188>)
 8001260:	f007 f9de 	bl	8008620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001264:	2308      	movs	r3, #8
 8001266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4619      	mov	r1, r3
 800127a:	481b      	ldr	r0, [pc, #108]	; (80012e8 <MX_GPIO_Init+0x17c>)
 800127c:	f006 ff26 	bl	80080cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	4619      	mov	r1, r3
 8001298:	4814      	ldr	r0, [pc, #80]	; (80012ec <MX_GPIO_Init+0x180>)
 800129a:	f006 ff17 	bl	80080cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800129e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	480e      	ldr	r0, [pc, #56]	; (80012f0 <MX_GPIO_Init+0x184>)
 80012b8:	f006 ff08 	bl	80080cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MX_GPIO_Init+0x188>)
 80012d6:	f006 fef9 	bl	80080cc <HAL_GPIO_Init>

}
 80012da:	bf00      	nop
 80012dc:	3730      	adds	r7, #48	; 0x30
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	58024400 	.word	0x58024400
 80012e8:	58021000 	.word	0x58021000
 80012ec:	58020800 	.word	0x58020800
 80012f0:	58020400 	.word	0x58020400
 80012f4:	58020c00 	.word	0x58020c00

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fc:	f003 fd22 	bl	8004d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001300:	f000 f82c 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001304:	f7ff ff32 	bl	800116c <MX_GPIO_Init>
  MX_DMA_Init();
 8001308:	f7ff ff08 	bl	800111c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800130c:	f003 fb9e 	bl	8004a4c <MX_USART1_UART_Init>
  MX_TIM12_Init();
 8001310:	f003 f862 	bl	80043d8 <MX_TIM12_Init>
  MX_TIM15_Init();
 8001314:	f003 f8c6 	bl	80044a4 <MX_TIM15_Init>
  MX_TIM2_Init();
 8001318:	f002 ff08 	bl	800412c <MX_TIM2_Init>
  MX_TIM3_Init();
 800131c:	f002 ff5a 	bl	80041d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001320:	f002 ffae 	bl	8004280 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001324:	f003 f802 	bl	800432c <MX_TIM5_Init>
  MX_TIM23_Init();
 8001328:	f003 f94e 	bl	80045c8 <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800132c:	2104      	movs	r1, #4
 800132e:	4808      	ldr	r0, [pc, #32]	; (8001350 <main+0x58>)
 8001330:	f00a f9ea 	bl	800b708 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&Encoder_Interrupt_timer);
 8001334:	4807      	ldr	r0, [pc, #28]	; (8001354 <main+0x5c>)
 8001336:	f009 ff47 	bl	800b1c8 <HAL_TIM_Base_Start_IT>
  Control_Init();
 800133a:	f7ff f9a1 	bl	8000680 <Control_Init>
  Rosserial_Init();
 800133e:	f001 febd 	bl	80030bc <Rosserial_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//  	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
//  	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 3000);
  	a = __HAL_TIM_GetCounter(&htim2);
 8001342:	4b03      	ldr	r3, [pc, #12]	; (8001350 <main+0x58>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	b21a      	sxth	r2, r3
 800134a:	4b03      	ldr	r3, [pc, #12]	; (8001358 <main+0x60>)
 800134c:	801a      	strh	r2, [r3, #0]
 800134e:	e7f8      	b.n	8001342 <main+0x4a>
 8001350:	240016dc 	.word	0x240016dc
 8001354:	240018a4 	.word	0x240018a4
 8001358:	24000534 	.word	0x24000534

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b09c      	sub	sp, #112	; 0x70
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	224c      	movs	r2, #76	; 0x4c
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f00d fcf8 	bl	800ed60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2220      	movs	r2, #32
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f00d fcf2 	bl	800ed60 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800137c:	2002      	movs	r0, #2
 800137e:	f007 f969 	bl	8008654 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <SystemClock_Config+0xd8>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	4a2a      	ldr	r2, [pc, #168]	; (8001434 <SystemClock_Config+0xd8>)
 800138c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001390:	6193      	str	r3, [r2, #24]
 8001392:	4b28      	ldr	r3, [pc, #160]	; (8001434 <SystemClock_Config+0xd8>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800139e:	bf00      	nop
 80013a0:	4b24      	ldr	r3, [pc, #144]	; (8001434 <SystemClock_Config+0xd8>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013ac:	d1f8      	bne.n	80013a0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ae:	2301      	movs	r3, #1
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b8:	2302      	movs	r3, #2
 80013ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013bc:	2302      	movs	r3, #2
 80013be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013c0:	2304      	movs	r3, #4
 80013c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013c4:	23a8      	movs	r3, #168	; 0xa8
 80013c6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013cc:	2304      	movs	r3, #4
 80013ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80013d4:	2304      	movs	r3, #4
 80013d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013d8:	2300      	movs	r3, #0
 80013da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e4:	4618      	mov	r0, r3
 80013e6:	f007 f96f 	bl	80086c8 <HAL_RCC_OscConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013f0:	f000 f868 	bl	80014c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f4:	233f      	movs	r3, #63	; 0x3f
 80013f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f8:	2303      	movs	r3, #3
 80013fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001400:	2308      	movs	r3, #8
 8001402:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001404:	2340      	movs	r3, #64	; 0x40
 8001406:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001408:	2340      	movs	r3, #64	; 0x40
 800140a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800140c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001410:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001412:	2340      	movs	r3, #64	; 0x40
 8001414:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2102      	movs	r1, #2
 800141a:	4618      	mov	r0, r3
 800141c:	f007 fd2e 	bl	8008e7c <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001426:	f000 f84d 	bl	80014c4 <Error_Handler>
  }
}
 800142a:	bf00      	nop
 800142c:	3770      	adds	r7, #112	; 0x70
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	58024800 	.word	0x58024800

08001438 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == Encoder_Interrupt_timer.Instance)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d102      	bne.n	8001452 <HAL_TIM_PeriodElapsedCallback+0x1a>
//		}
//		Forward_Kinematics(linearvelocity_x, linearvelocity_y, angularvelocity);
//		PID_Controller(&WheelA);
//		PID_Controller(&WheelB);
//		PID_Controller(&WheelC);
		PID_Controller(&WheelD);
 800144c:	4804      	ldr	r0, [pc, #16]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800144e:	f7ff fc47 	bl	8000ce0 <PID_Controller>
	}
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	240018a4 	.word	0x240018a4
 8001460:	24000420 	.word	0x24000420

08001464 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a11      	ldr	r2, [pc, #68]	; (80014b4 <HAL_UART_ErrorCallback+0x50>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d11b      	bne.n	80014ac <HAL_UART_ErrorCallback+0x48>
	{
		linearvelocity_x = 0;
 8001474:	4910      	ldr	r1, [pc, #64]	; (80014b8 <HAL_UART_ErrorCallback+0x54>)
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	e9c1 2300 	strd	r2, r3, [r1]
		linearvelocity_y = 0;
 8001482:	490e      	ldr	r1, [pc, #56]	; (80014bc <HAL_UART_ErrorCallback+0x58>)
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	e9c1 2300 	strd	r2, r3, [r1]
		angularvelocity = 0;
 8001490:	490b      	ldr	r1, [pc, #44]	; (80014c0 <HAL_UART_ErrorCallback+0x5c>)
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_UART_DeInit(&huart1);
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <HAL_UART_ErrorCallback+0x50>)
 80014a0:	f00b fafe 	bl	800caa0 <HAL_UART_DeInit>
		MX_USART1_UART_Init();
 80014a4:	f003 fad2 	bl	8004a4c <MX_USART1_UART_Init>
		Rosserial_GetHardware();
 80014a8:	f001 fe18 	bl	80030dc <Rosserial_GetHardware>
	}
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	240018f0 	.word	0x240018f0
 80014b8:	240000c0 	.word	0x240000c0
 80014bc:	240000c8 	.word	0x240000c8
 80014c0:	240000d0 	.word	0x240000d0

080014c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
}
 80014ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014cc:	e7fe      	b.n	80014cc <Error_Handler+0x8>

080014ce <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	4a04      	ldr	r2, [pc, #16]	; (800150c <_ZN3ros3MsgC1Ev+0x1c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	0800f328 	.word	0x0800f328

08001510 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
      data()
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ffe8 	bl	80014f0 <_ZN3ros3MsgC1Ev>
 8001520:	4a06      	ldr	r2, [pc, #24]	; (800153c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3304      	adds	r3, #4
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ffcf 	bl	80014ce <_ZN3ros4TimeC1Ev>
    {
    }
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	0800f310 	.word	0x0800f310

08001540 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6859      	ldr	r1, [r3, #4]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	4413      	add	r3, r2
 8001558:	b2ca      	uxtb	r2, r1
 800155a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	0a19      	lsrs	r1, r3, #8
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3301      	adds	r3, #1
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	4413      	add	r3, r2
 800156a:	b2ca      	uxtb	r2, r1
 800156c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	0c19      	lsrs	r1, r3, #16
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3302      	adds	r3, #2
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	4413      	add	r3, r2
 800157c:	b2ca      	uxtb	r2, r1
 800157e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	0e19      	lsrs	r1, r3, #24
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3303      	adds	r3, #3
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	4413      	add	r3, r2
 800158e:	b2ca      	uxtb	r2, r1
 8001590:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3304      	adds	r3, #4
 8001596:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6899      	ldr	r1, [r3, #8]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	4413      	add	r3, r2
 80015a2:	b2ca      	uxtb	r2, r1
 80015a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	0a19      	lsrs	r1, r3, #8
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3301      	adds	r3, #1
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	b2ca      	uxtb	r2, r1
 80015b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	0c19      	lsrs	r1, r3, #16
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3302      	adds	r3, #2
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	4413      	add	r3, r2
 80015c6:	b2ca      	uxtb	r2, r1
 80015c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	0e19      	lsrs	r1, r3, #24
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3303      	adds	r3, #3
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	b2ca      	uxtb	r2, r1
 80015da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	3304      	adds	r3, #4
 80015e0:	60fb      	str	r3, [r7, #12]
      return offset;
 80015e2:	68fb      	ldr	r3, [r7, #12]
    }
 80015e4:	4618      	mov	r0, r3
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	4413      	add	r3, r2
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	3301      	adds	r3, #1
 8001614:	6839      	ldr	r1, [r7, #0]
 8001616:	440b      	add	r3, r1
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3302      	adds	r3, #2
 800162a:	6839      	ldr	r1, [r7, #0]
 800162c:	440b      	add	r3, r1
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	041b      	lsls	r3, r3, #16
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3303      	adds	r3, #3
 8001640:	6839      	ldr	r1, [r7, #0]
 8001642:	440b      	add	r3, r1
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	061b      	lsls	r3, r3, #24
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3304      	adds	r3, #4
 8001652:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	4413      	add	r3, r2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	3301      	adds	r3, #1
 800166a:	6839      	ldr	r1, [r7, #0]
 800166c:	440b      	add	r3, r1
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3302      	adds	r3, #2
 8001680:	6839      	ldr	r1, [r7, #0]
 8001682:	440b      	add	r3, r1
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	3303      	adds	r3, #3
 8001696:	6839      	ldr	r1, [r7, #0]
 8001698:	440b      	add	r3, r1
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	061b      	lsls	r3, r3, #24
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3304      	adds	r3, #4
 80016a8:	60fb      	str	r3, [r7, #12]
     return offset;
 80016aa:	68fb      	ldr	r3, [r7, #12]
    }
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	0800f08c 	.word	0x0800f08c

080016d4 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	0800f09c 	.word	0x0800f09c

080016f0 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fef8 	bl	80014f0 <_ZN3ros3MsgC1Ev>
 8001700:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	809a      	strh	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a09      	ldr	r2, [pc, #36]	; (8001734 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a06      	ldr	r2, [pc, #24]	; (8001734 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	615a      	str	r2, [r3, #20]
    {
    }
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	0800f2f8 	.word	0x0800f2f8
 8001734:	0800f0c0 	.word	0x0800f0c0

08001738 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	8899      	ldrh	r1, [r3, #4]
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	4413      	add	r3, r2
 8001750:	b2ca      	uxtb	r2, r1
 8001752:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	889b      	ldrh	r3, [r3, #4]
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	b299      	uxth	r1, r3
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	3301      	adds	r3, #1
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	4413      	add	r3, r2
 8001764:	b2ca      	uxtb	r2, r1
 8001766:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	3302      	adds	r3, #2
 800176c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fdcc 	bl	8000310 <strlen>
 8001778:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	4413      	add	r3, r2
 8001780:	69b9      	ldr	r1, [r7, #24]
 8001782:	4618      	mov	r0, r3
 8001784:	f001 fcb8 	bl	80030f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	3304      	adds	r3, #4
 800178c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	18d0      	adds	r0, r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4619      	mov	r1, r3
 800179c:	f00d fad2 	bl	800ed44 <memcpy>
      offset += length_topic_name;
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	4413      	add	r3, r2
 80017a6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fdaf 	bl	8000310 <strlen>
 80017b2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	4413      	add	r3, r2
 80017ba:	6979      	ldr	r1, [r7, #20]
 80017bc:	4618      	mov	r0, r3
 80017be:	f001 fc9b 	bl	80030f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	18d0      	adds	r0, r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f00d fab5 	bl	800ed44 <memcpy>
      offset += length_message_type;
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	4413      	add	r3, r2
 80017e0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fd92 	bl	8000310 <strlen>
 80017ec:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	6939      	ldr	r1, [r7, #16]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f001 fc7e 	bl	80030f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	3304      	adds	r3, #4
 8001800:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	18d0      	adds	r0, r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4619      	mov	r1, r3
 8001810:	f00d fa98 	bl	800ed44 <memcpy>
      offset += length_md5sum;
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4413      	add	r3, r2
 800181a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001822:	68f9      	ldr	r1, [r7, #12]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	4413      	add	r3, r2
 800182a:	b2ca      	uxtb	r2, r1
 800182c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	0a19      	lsrs	r1, r3, #8
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3301      	adds	r3, #1
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	4413      	add	r3, r2
 800183a:	b2ca      	uxtb	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	0c19      	lsrs	r1, r3, #16
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3302      	adds	r3, #2
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	4413      	add	r3, r2
 800184a:	b2ca      	uxtb	r2, r1
 800184c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	0e19      	lsrs	r1, r3, #24
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3303      	adds	r3, #3
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	4413      	add	r3, r2
 800185a:	b2ca      	uxtb	r2, r1
 800185c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	61fb      	str	r3, [r7, #28]
      return offset;
 8001864:	69fb      	ldr	r3, [r7, #28]
    }
 8001866:	4618      	mov	r0, r3
 8001868:	3720      	adds	r7, #32
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800186e:	b580      	push	{r7, lr}
 8001870:	b08a      	sub	sp, #40	; 0x28
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	4413      	add	r3, r2
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b29a      	uxth	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	889b      	ldrh	r3, [r3, #4]
 800188e:	b21a      	sxth	r2, r3
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	3301      	adds	r3, #1
 8001894:	6839      	ldr	r1, [r7, #0]
 8001896:	440b      	add	r3, r1
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	b21b      	sxth	r3, r3
 800189e:	4313      	orrs	r3, r2
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	3302      	adds	r3, #2
 80018ac:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	441a      	add	r2, r3
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4611      	mov	r1, r2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f001 fc3a 	bl	8003134 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	3304      	adds	r3, #4
 80018c4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	4413      	add	r3, r2
 80018d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d20c      	bcs.n	80018f0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	441a      	add	r2, r3
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	3b01      	subs	r3, #1
 80018e0:	6839      	ldr	r1, [r7, #0]
 80018e2:	440b      	add	r3, r1
 80018e4:	7812      	ldrb	r2, [r2, #0]
 80018e6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	3301      	adds	r3, #1
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
 80018ee:	e7ec      	b.n	80018ca <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	4413      	add	r3, r2
 80018f6:	3b01      	subs	r3, #1
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	3b01      	subs	r3, #1
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	441a      	add	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	4413      	add	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	441a      	add	r2, r3
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f001 fc07 	bl	8003134 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	3304      	adds	r3, #4
 800192a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	623b      	str	r3, [r7, #32]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4413      	add	r3, r2
 8001936:	6a3a      	ldr	r2, [r7, #32]
 8001938:	429a      	cmp	r2, r3
 800193a:	d20c      	bcs.n	8001956 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	441a      	add	r2, r3
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	3b01      	subs	r3, #1
 8001946:	6839      	ldr	r1, [r7, #0]
 8001948:	440b      	add	r3, r1
 800194a:	7812      	ldrb	r2, [r2, #0]
 800194c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	3301      	adds	r3, #1
 8001952:	623b      	str	r3, [r7, #32]
 8001954:	e7ec      	b.n	8001930 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4413      	add	r3, r2
 800195c:	3b01      	subs	r3, #1
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	4413      	add	r3, r2
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	3b01      	subs	r3, #1
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	441a      	add	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4413      	add	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	441a      	add	r2, r3
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4611      	mov	r1, r2
 8001986:	4618      	mov	r0, r3
 8001988:	f001 fbd4 	bl	8003134 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	3304      	adds	r3, #4
 8001990:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4413      	add	r3, r2
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d20c      	bcs.n	80019bc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	441a      	add	r2, r3
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	6839      	ldr	r1, [r7, #0]
 80019ae:	440b      	add	r3, r1
 80019b0:	7812      	ldrb	r2, [r2, #0]
 80019b2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	3301      	adds	r3, #1
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	e7ec      	b.n	8001996 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4413      	add	r3, r2
 80019c2:	3b01      	subs	r3, #1
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	441a      	add	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4413      	add	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	6839      	ldr	r1, [r7, #0]
 80019ea:	440a      	add	r2, r1
 80019ec:	7812      	ldrb	r2, [r2, #0]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	3301      	adds	r3, #1
 80019f8:	6839      	ldr	r1, [r7, #0]
 80019fa:	440b      	add	r3, r1
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	021b      	lsls	r3, r3, #8
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	3302      	adds	r3, #2
 8001a0a:	6839      	ldr	r1, [r7, #0]
 8001a0c:	440b      	add	r3, r1
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	041b      	lsls	r3, r3, #16
 8001a12:	4313      	orrs	r3, r2
 8001a14:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	3303      	adds	r3, #3
 8001a1c:	6839      	ldr	r1, [r7, #0]
 8001a1e:	440b      	add	r3, r1
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	061b      	lsls	r3, r3, #24
 8001a24:	4313      	orrs	r3, r2
 8001a26:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	3304      	adds	r3, #4
 8001a32:	61bb      	str	r3, [r7, #24]
     return offset;
 8001a34:	69bb      	ldr	r3, [r7, #24]
    }
 8001a36:	4618      	mov	r0, r3
 8001a38:	3728      	adds	r7, #40	; 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	0800f0c4 	.word	0x0800f0c4

08001a5c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	0800f0e0 	.word	0x0800f0e0

08001a78 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fd34 	bl	80014f0 <_ZN3ros3MsgC1Ev>
 8001a88:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	711a      	strb	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001a98:	609a      	str	r2, [r3, #8]
    {
    }
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	0800f2e0 	.word	0x0800f2e0
 8001aa8:	0800f0c0 	.word	0x0800f0c0

08001aac <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	7912      	ldrb	r2, [r2, #4]
 8001ac4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fc1d 	bl	8000310 <strlen>
 8001ad6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	4413      	add	r3, r2
 8001ade:	68b9      	ldr	r1, [r7, #8]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f001 fb09 	bl	80030f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	18d0      	adds	r0, r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	4619      	mov	r1, r3
 8001afa:	f00d f923 	bl	800ed44 <memcpy>
      offset += length_msg;
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
      return offset;
 8001b06:	68fb      	ldr	r3, [r7, #12]
    }
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	781a      	ldrb	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	441a      	add	r2, r3
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f001 faf9 	bl	8003134 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	3304      	adds	r3, #4
 8001b46:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4413      	add	r3, r2
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d20c      	bcs.n	8001b72 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	441a      	add	r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	6839      	ldr	r1, [r7, #0]
 8001b64:	440b      	add	r3, r1
 8001b66:	7812      	ldrb	r2, [r2, #0]
 8001b68:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	e7ec      	b.n	8001b4c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4413      	add	r3, r2
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	441a      	add	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
     return offset;
 8001b96:	693b      	ldr	r3, [r7, #16]
    }
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	0800f104 	.word	0x0800f104

08001bbc <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	0800f118 	.word	0x0800f118

08001bd8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fc84 	bl	80014f0 <_ZN3ros3MsgC1Ev>
 8001be8:	4a0c      	ldr	r2, [pc, #48]	; (8001c1c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	619a      	str	r2, [r3, #24]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	61da      	str	r2, [r3, #28]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	0800f2c8 	.word	0x0800f2c8

08001c20 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6859      	ldr	r1, [r3, #4]
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	b2ca      	uxtb	r2, r1
 8001c3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	0a19      	lsrs	r1, r3, #8
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	3301      	adds	r3, #1
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	4413      	add	r3, r2
 8001c4a:	b2ca      	uxtb	r2, r1
 8001c4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	0c19      	lsrs	r1, r3, #16
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	3302      	adds	r3, #2
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	b2ca      	uxtb	r2, r1
 8001c5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	0e19      	lsrs	r1, r3, #24
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	3303      	adds	r3, #3
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	b2ca      	uxtb	r2, r1
 8001c70:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	3304      	adds	r3, #4
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	6a3a      	ldr	r2, [r7, #32]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d22b      	bcs.n	8001cde <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001c94:	6939      	ldr	r1, [r7, #16]
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	b2ca      	uxtb	r2, r1
 8001c9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	0a19      	lsrs	r1, r3, #8
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	b2ca      	uxtb	r2, r1
 8001cae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	0c19      	lsrs	r1, r3, #16
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	b2ca      	uxtb	r2, r1
 8001cbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	0e19      	lsrs	r1, r3, #24
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	3303      	adds	r3, #3
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	b2ca      	uxtb	r2, r1
 8001cce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	e7ce      	b.n	8001c7c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6919      	ldr	r1, [r3, #16]
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b2ca      	uxtb	r2, r1
 8001cea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	0a19      	lsrs	r1, r3, #8
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b2ca      	uxtb	r2, r1
 8001cfc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	0c19      	lsrs	r1, r3, #16
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	3302      	adds	r3, #2
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b2ca      	uxtb	r2, r1
 8001d0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	0e19      	lsrs	r1, r3, #24
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	3303      	adds	r3, #3
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b2ca      	uxtb	r2, r1
 8001d20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	3304      	adds	r3, #4
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d22b      	bcs.n	8001d8e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	699a      	ldr	r2, [r3, #24]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001d44:	68f9      	ldr	r1, [r7, #12]
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	b2ca      	uxtb	r2, r1
 8001d4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	0a19      	lsrs	r1, r3, #8
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	3301      	adds	r3, #1
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	b2ca      	uxtb	r2, r1
 8001d5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	0c19      	lsrs	r1, r3, #16
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	3302      	adds	r3, #2
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	b2ca      	uxtb	r2, r1
 8001d6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	0e19      	lsrs	r1, r3, #24
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	3303      	adds	r3, #3
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	b2ca      	uxtb	r2, r1
 8001d7e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	3304      	adds	r3, #4
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	e7ce      	b.n	8001d2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69d9      	ldr	r1, [r3, #28]
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	b2ca      	uxtb	r2, r1
 8001d9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	0a19      	lsrs	r1, r3, #8
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	3301      	adds	r3, #1
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	b2ca      	uxtb	r2, r1
 8001dac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	0c19      	lsrs	r1, r3, #16
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	3302      	adds	r3, #2
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	b2ca      	uxtb	r2, r1
 8001dbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	0e19      	lsrs	r1, r3, #24
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	3303      	adds	r3, #3
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	b2ca      	uxtb	r2, r1
 8001dd0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61bb      	str	r3, [r7, #24]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d228      	bcs.n	8001e38 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fa8c 	bl	8000310 <strlen>
 8001df8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	6979      	ldr	r1, [r7, #20]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f001 f978 	bl	80030f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	18d0      	adds	r0, r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	4619      	mov	r1, r3
 8001e24:	f00c ff8e 	bl	800ed44 <memcpy>
      offset += length_stringsi;
 8001e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	3301      	adds	r3, #1
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	e7d1      	b.n	8001ddc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3728      	adds	r7, #40	; 0x28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b08e      	sub	sp, #56	; 0x38
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	4413      	add	r3, r2
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	4413      	add	r3, r2
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	6a3a      	ldr	r2, [r7, #32]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6e:	3302      	adds	r3, #2
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	041b      	lsls	r3, r3, #16
 8001e78:	6a3a      	ldr	r2, [r7, #32]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e80:	3303      	adds	r3, #3
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	4413      	add	r3, r2
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	061b      	lsls	r3, r3, #24
 8001e8a:	6a3a      	ldr	r2, [r7, #32]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e92:	3304      	adds	r3, #4
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	6a3a      	ldr	r2, [r7, #32]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d90a      	bls.n	8001eb6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4610      	mov	r0, r2
 8001eac:	f00c ff60 	bl	800ed70 <realloc>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a3a      	ldr	r2, [r7, #32]
 8001eba:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d236      	bcs.n	8001f38 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ed2:	6839      	ldr	r1, [r7, #0]
 8001ed4:	440a      	add	r2, r1
 8001ed6:	7812      	ldrb	r2, [r2, #0]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	6839      	ldr	r1, [r7, #0]
 8001ee4:	440b      	add	r3, r1
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	4313      	orrs	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	6839      	ldr	r1, [r7, #0]
 8001ef6:	440b      	add	r3, r1
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	041b      	lsls	r3, r3, #16
 8001efc:	4313      	orrs	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f04:	3303      	adds	r3, #3
 8001f06:	6839      	ldr	r1, [r7, #0]
 8001f08:	440b      	add	r3, r1
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	061b      	lsls	r3, r3, #24
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	3208      	adds	r2, #8
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f32:	3301      	adds	r3, #1
 8001f34:	633b      	str	r3, [r7, #48]	; 0x30
 8001f36:	e7c3      	b.n	8001ec0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f44:	3301      	adds	r3, #1
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	4413      	add	r3, r2
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f56:	3302      	adds	r3, #2
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	041b      	lsls	r3, r3, #16
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f68:	3303      	adds	r3, #3
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	061b      	lsls	r3, r3, #24
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d90a      	bls.n	8001f9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699a      	ldr	r2, [r3, #24]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4619      	mov	r1, r3
 8001f92:	4610      	mov	r0, r2
 8001f94:	f00c feec 	bl	800ed70 <realloc>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d236      	bcs.n	8002020 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fba:	6839      	ldr	r1, [r7, #0]
 8001fbc:	440a      	add	r2, r1
 8001fbe:	7812      	ldrb	r2, [r2, #0]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc8:	3301      	adds	r3, #1
 8001fca:	6839      	ldr	r1, [r7, #0]
 8001fcc:	440b      	add	r3, r1
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fda:	3302      	adds	r3, #2
 8001fdc:	6839      	ldr	r1, [r7, #0]
 8001fde:	440b      	add	r3, r1
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	041b      	lsls	r3, r3, #16
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fec:	3303      	adds	r3, #3
 8001fee:	6839      	ldr	r1, [r7, #0]
 8001ff0:	440b      	add	r3, r1
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	061b      	lsls	r3, r3, #24
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002002:	3304      	adds	r3, #4
 8002004:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699a      	ldr	r2, [r3, #24]
 800200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	3214      	adds	r2, #20
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201a:	3301      	adds	r3, #1
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800201e:	e7c3      	b.n	8001fa8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	4413      	add	r3, r2
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800202a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202c:	3301      	adds	r3, #1
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	4413      	add	r3, r2
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800203c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203e:	3302      	adds	r3, #2
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	4413      	add	r3, r2
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	041b      	lsls	r3, r3, #16
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800204e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002050:	3303      	adds	r3, #3
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	4413      	add	r3, r2
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	061b      	lsls	r3, r3, #24
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002062:	3304      	adds	r3, #4
 8002064:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	429a      	cmp	r2, r3
 800206e:	d90a      	bls.n	8002086 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4619      	mov	r1, r3
 800207a:	4610      	mov	r0, r2
 800207c:	f00c fe78 	bl	800ed70 <realloc>
 8002080:	4602      	mov	r2, r0
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800208c:	2300      	movs	r3, #0
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002096:	429a      	cmp	r2, r3
 8002098:	d23f      	bcs.n	800211a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800209a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	441a      	add	r2, r3
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f001 f844 	bl	8003134 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ae:	3304      	adds	r3, #4
 80020b0:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80020b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
 80020b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4413      	add	r3, r2
 80020bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020be:	429a      	cmp	r2, r3
 80020c0:	d20c      	bcs.n	80020dc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	441a      	add	r2, r3
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	3b01      	subs	r3, #1
 80020cc:	6839      	ldr	r1, [r7, #0]
 80020ce:	440b      	add	r3, r1
 80020d0:	7812      	ldrb	r2, [r2, #0]
 80020d2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	3301      	adds	r3, #1
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
 80020da:	e7ec      	b.n	80020b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80020dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4413      	add	r3, r2
 80020e2:	3b01      	subs	r3, #1
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80020ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ee:	3b01      	subs	r3, #1
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	441a      	add	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80020f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4413      	add	r3, r2
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	3220      	adds	r2, #32
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002114:	3301      	adds	r3, #1
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
 8002118:	e7ba      	b.n	8002090 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800211a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800211c:	4618      	mov	r0, r3
 800211e:	3738      	adds	r7, #56	; 0x38
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	0800f21c 	.word	0x0800f21c

08002140 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	0800f13c 	.word	0x0800f13c

0800215c <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
  }
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a4b      	ldr	r2, [pc, #300]	; (80022b4 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d077      	beq.n	800227c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a48      	ldr	r2, [pc, #288]	; (80022b8 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d06f      	beq.n	800227c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a45      	ldr	r2, [pc, #276]	; (80022bc <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d067      	beq.n	800227c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a42      	ldr	r2, [pc, #264]	; (80022c0 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d05f      	beq.n	800227c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a3f      	ldr	r2, [pc, #252]	; (80022c4 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d057      	beq.n	800227c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a3c      	ldr	r2, [pc, #240]	; (80022c8 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d04f      	beq.n	800227c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a39      	ldr	r2, [pc, #228]	; (80022cc <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d047      	beq.n	800227c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a36      	ldr	r2, [pc, #216]	; (80022d0 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d03f      	beq.n	800227c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a33      	ldr	r2, [pc, #204]	; (80022d4 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d037      	beq.n	800227c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a30      	ldr	r2, [pc, #192]	; (80022d8 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d02f      	beq.n	800227c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a2d      	ldr	r2, [pc, #180]	; (80022dc <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d027      	beq.n	800227c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a2a      	ldr	r2, [pc, #168]	; (80022e0 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d01f      	beq.n	800227c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a27      	ldr	r2, [pc, #156]	; (80022e4 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d017      	beq.n	800227c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a24      	ldr	r2, [pc, #144]	; (80022e8 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d00f      	beq.n	800227c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a21      	ldr	r2, [pc, #132]	; (80022ec <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d007      	beq.n	800227c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1e      	ldr	r2, [pc, #120]	; (80022f0 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d10a      	bne.n	8002292 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800228c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002290:	e009      	b.n	80022a6 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80022a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022a6:	4618      	mov	r0, r3
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40020010 	.word	0x40020010
 80022b8:	40020028 	.word	0x40020028
 80022bc:	40020040 	.word	0x40020040
 80022c0:	40020058 	.word	0x40020058
 80022c4:	40020070 	.word	0x40020070
 80022c8:	40020088 	.word	0x40020088
 80022cc:	400200a0 	.word	0x400200a0
 80022d0:	400200b8 	.word	0x400200b8
 80022d4:	40020410 	.word	0x40020410
 80022d8:	40020428 	.word	0x40020428
 80022dc:	40020440 	.word	0x40020440
 80022e0:	40020458 	.word	0x40020458
 80022e4:	40020470 	.word	0x40020470
 80022e8:	40020488 	.word	0x40020488
 80022ec:	400204a0 	.word	0x400204a0
 80022f0:	400204b8 	.word	0x400204b8

080022f4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <_ZN13STM32HardwareC1Ev+0x34>)
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    }
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	240018f0 	.word	0x240018f0

0800232c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f804 	bl	8002342 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
    	HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6858      	ldr	r0, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3308      	adds	r3, #8
 8002352:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002356:	4619      	mov	r1, r3
 8002358:	f00a fc62 	bl	800cc20 <HAL_UART_Receive_DMA>
    }
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800236c:	f04f 33ff 	mov.w	r3, #4294967295
 8002370:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f8d3 4408 	ldr.w	r4, [r3, #1032]	; 0x408
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff fefb 	bl	8002174 <_ZN13STM32Hardware10getRdmaIndEv>
 800237e:	4603      	mov	r3, r0
 8002380:	429c      	cmp	r4, r3
 8002382:	bf14      	ite	ne
 8002384:	2301      	movne	r3, #1
 8002386:	2300      	moveq	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d012      	beq.n	80023b4 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002394:	1c59      	adds	r1, r3, #1
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	7a1b      	ldrb	r3, [r3, #8]
 80023a2:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80023aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
      }
      return c;
 80023b4:	68fb      	ldr	r3, [r7, #12]
    }
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd90      	pop	{r4, r7, pc}
	...

080023c0 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	d108      	bne.n	80023e6 <_ZN13STM32Hardware5flushEv+0x26>
 80023d4:	4b28      	ldr	r3, [pc, #160]	; (8002478 <_ZN13STM32Hardware5flushEv+0xb8>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	f083 0301 	eor.w	r3, r3, #1
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <_ZN13STM32Hardware5flushEv+0x26>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <_ZN13STM32Hardware5flushEv+0x28>
 80023e6:	2300      	movs	r3, #0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d040      	beq.n	800246e <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80023ec:	4b22      	ldr	r3, [pc, #136]	; (8002478 <_ZN13STM32Hardware5flushEv+0xb8>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80023fe:	429a      	cmp	r2, r3
 8002400:	d032      	beq.n	8002468 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800240e:	429a      	cmp	r2, r3
 8002410:	d20a      	bcs.n	8002428 <_ZN13STM32Hardware5flushEv+0x68>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002418:	b29a      	uxth	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8002420:	b29b      	uxth	r3, r3
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	b29b      	uxth	r3, r3
 8002426:	e006      	b.n	8002436 <_ZN13STM32Hardware5flushEv+0x76>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800242e:	b29b      	uxth	r3, r3
 8002430:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002434:	b29b      	uxth	r3, r3
 8002436:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6858      	ldr	r0, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8002442:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	3304      	adds	r3, #4
 800244c:	89fa      	ldrh	r2, [r7, #14]
 800244e:	4619      	mov	r1, r3
 8002450:	f00a fb66 	bl	800cb20 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 800245a:	89fb      	ldrh	r3, [r7, #14]
 800245c:	4413      	add	r3, r2
 800245e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
        }
        mutex = false;
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <_ZN13STM32Hardware5flushEv+0xb8>)
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]
      }
    }
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	24000536 	.word	0x24000536

0800247c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
      int n = length;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002492:	bfa8      	it	ge
 8002494:	f44f 6380 	movge.w	r3, #1024	; 0x400
 8002498:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80024a0:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	4293      	cmp	r3, r2
 80024a8:	bf28      	it	cs
 80024aa:	4613      	movcs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80024b4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	3304      	adds	r3, #4
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f00c fc3e 	bl	800ed44 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	4413      	add	r3, r2
 80024d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c

      if(n != n_tail){
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d00b      	beq.n	80024fc <_ZN13STM32Hardware5writeEPhi+0x80>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	18d1      	adds	r1, r2, r3
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	f00c fc24 	bl	800ed44 <memcpy>
      }

      flush();
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f7ff ff5f 	bl	80023c0 <_ZN13STM32Hardware5flushEv>
    }
 8002502:	bf00      	nop
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	f002 fc9d 	bl	8004e50 <HAL_GetTick>
 8002516:	4603      	mov	r3, r0
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe ffe0 	bl	80014f0 <_ZN3ros3MsgC1Ev>
 8002530:	4a0e      	ldr	r2, [pc, #56]	; (800256c <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	0800f284 	.word	0x0800f284

08002570 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002570:	b480      	push	{r7}
 8002572:	b08b      	sub	sp, #44	; 0x2c
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002584:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002588:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800258c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800258e:	6838      	ldr	r0, [r7, #0]
 8002590:	4401      	add	r1, r0
 8002592:	b2d3      	uxtb	r3, r2
 8002594:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002596:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	0a02      	lsrs	r2, r0, #8
 80025a4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80025a8:	0a0b      	lsrs	r3, r1, #8
 80025aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ac:	3101      	adds	r1, #1
 80025ae:	6838      	ldr	r0, [r7, #0]
 80025b0:	4401      	add	r1, r0
 80025b2:	b2d3      	uxtb	r3, r2
 80025b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80025b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	0c02      	lsrs	r2, r0, #16
 80025c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80025c8:	0c0b      	lsrs	r3, r1, #16
 80025ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025cc:	3102      	adds	r1, #2
 80025ce:	6838      	ldr	r0, [r7, #0]
 80025d0:	4401      	add	r1, r0
 80025d2:	b2d3      	uxtb	r3, r2
 80025d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80025d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	0e02      	lsrs	r2, r0, #24
 80025e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025e8:	0e0b      	lsrs	r3, r1, #24
 80025ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ec:	3103      	adds	r1, #3
 80025ee:	6838      	ldr	r0, [r7, #0]
 80025f0:	4401      	add	r1, r0
 80025f2:	b2d3      	uxtb	r3, r2
 80025f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80025f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	000a      	movs	r2, r1
 8002604:	2300      	movs	r3, #0
 8002606:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002608:	3104      	adds	r1, #4
 800260a:	6838      	ldr	r0, [r7, #0]
 800260c:	4401      	add	r1, r0
 800260e:	b2d3      	uxtb	r3, r2
 8002610:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002612:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	0a0a      	lsrs	r2, r1, #8
 8002620:	2300      	movs	r3, #0
 8002622:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002624:	3105      	adds	r1, #5
 8002626:	6838      	ldr	r0, [r7, #0]
 8002628:	4401      	add	r1, r0
 800262a:	b2d3      	uxtb	r3, r2
 800262c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800262e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	0c0a      	lsrs	r2, r1, #16
 800263c:	2300      	movs	r3, #0
 800263e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002640:	3106      	adds	r1, #6
 8002642:	6838      	ldr	r0, [r7, #0]
 8002644:	4401      	add	r1, r0
 8002646:	b2d3      	uxtb	r3, r2
 8002648:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800264a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	0e0a      	lsrs	r2, r1, #24
 8002658:	2300      	movs	r3, #0
 800265a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800265c:	3107      	adds	r1, #7
 800265e:	6838      	ldr	r0, [r7, #0]
 8002660:	4401      	add	r1, r0
 8002662:	b2d3      	uxtb	r3, r2
 8002664:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	3308      	adds	r3, #8
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002672:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002676:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800267a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800267c:	6838      	ldr	r0, [r7, #0]
 800267e:	4401      	add	r1, r0
 8002680:	b2d3      	uxtb	r3, r2
 8002682:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002684:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	0a02      	lsrs	r2, r0, #8
 8002692:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002696:	0a0b      	lsrs	r3, r1, #8
 8002698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800269a:	3101      	adds	r1, #1
 800269c:	6838      	ldr	r0, [r7, #0]
 800269e:	4401      	add	r1, r0
 80026a0:	b2d3      	uxtb	r3, r2
 80026a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80026a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	0c02      	lsrs	r2, r0, #16
 80026b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026b6:	0c0b      	lsrs	r3, r1, #16
 80026b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ba:	3102      	adds	r1, #2
 80026bc:	6838      	ldr	r0, [r7, #0]
 80026be:	4401      	add	r1, r0
 80026c0:	b2d3      	uxtb	r3, r2
 80026c2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80026c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	0e02      	lsrs	r2, r0, #24
 80026d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026d6:	0e0b      	lsrs	r3, r1, #24
 80026d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026da:	3103      	adds	r1, #3
 80026dc:	6838      	ldr	r0, [r7, #0]
 80026de:	4401      	add	r1, r0
 80026e0:	b2d3      	uxtb	r3, r2
 80026e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80026e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	000a      	movs	r2, r1
 80026f2:	2300      	movs	r3, #0
 80026f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f6:	3104      	adds	r1, #4
 80026f8:	6838      	ldr	r0, [r7, #0]
 80026fa:	4401      	add	r1, r0
 80026fc:	b2d3      	uxtb	r3, r2
 80026fe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002700:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	0a0a      	lsrs	r2, r1, #8
 800270e:	2300      	movs	r3, #0
 8002710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002712:	3105      	adds	r1, #5
 8002714:	6838      	ldr	r0, [r7, #0]
 8002716:	4401      	add	r1, r0
 8002718:	b2d3      	uxtb	r3, r2
 800271a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800271c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	0c0a      	lsrs	r2, r1, #16
 800272a:	2300      	movs	r3, #0
 800272c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800272e:	3106      	adds	r1, #6
 8002730:	6838      	ldr	r0, [r7, #0]
 8002732:	4401      	add	r1, r0
 8002734:	b2d3      	uxtb	r3, r2
 8002736:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002738:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	0e0a      	lsrs	r2, r1, #24
 8002746:	2300      	movs	r3, #0
 8002748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800274a:	3107      	adds	r1, #7
 800274c:	6838      	ldr	r0, [r7, #0]
 800274e:	4401      	add	r1, r0
 8002750:	b2d3      	uxtb	r3, r2
 8002752:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	3308      	adds	r3, #8
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002760:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002764:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800276a:	6838      	ldr	r0, [r7, #0]
 800276c:	4401      	add	r1, r0
 800276e:	b2d3      	uxtb	r3, r2
 8002770:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002772:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	0a02      	lsrs	r2, r0, #8
 8002780:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002784:	0a0b      	lsrs	r3, r1, #8
 8002786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002788:	3101      	adds	r1, #1
 800278a:	6838      	ldr	r0, [r7, #0]
 800278c:	4401      	add	r1, r0
 800278e:	b2d3      	uxtb	r3, r2
 8002790:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	0c02      	lsrs	r2, r0, #16
 80027a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80027a4:	0c0b      	lsrs	r3, r1, #16
 80027a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a8:	3102      	adds	r1, #2
 80027aa:	6838      	ldr	r0, [r7, #0]
 80027ac:	4401      	add	r1, r0
 80027ae:	b2d3      	uxtb	r3, r2
 80027b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80027b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	0e02      	lsrs	r2, r0, #24
 80027c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80027c4:	0e0b      	lsrs	r3, r1, #24
 80027c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c8:	3103      	adds	r1, #3
 80027ca:	6838      	ldr	r0, [r7, #0]
 80027cc:	4401      	add	r1, r0
 80027ce:	b2d3      	uxtb	r3, r2
 80027d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80027d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	000a      	movs	r2, r1
 80027e0:	2300      	movs	r3, #0
 80027e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e4:	3104      	adds	r1, #4
 80027e6:	6838      	ldr	r0, [r7, #0]
 80027e8:	4401      	add	r1, r0
 80027ea:	b2d3      	uxtb	r3, r2
 80027ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80027ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	0a0a      	lsrs	r2, r1, #8
 80027fc:	2300      	movs	r3, #0
 80027fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002800:	3105      	adds	r1, #5
 8002802:	6838      	ldr	r0, [r7, #0]
 8002804:	4401      	add	r1, r0
 8002806:	b2d3      	uxtb	r3, r2
 8002808:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800280a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	0c0a      	lsrs	r2, r1, #16
 8002818:	2300      	movs	r3, #0
 800281a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800281c:	3106      	adds	r1, #6
 800281e:	6838      	ldr	r0, [r7, #0]
 8002820:	4401      	add	r1, r0
 8002822:	b2d3      	uxtb	r3, r2
 8002824:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002826:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	0e0a      	lsrs	r2, r1, #24
 8002834:	2300      	movs	r3, #0
 8002836:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002838:	3107      	adds	r1, #7
 800283a:	6838      	ldr	r0, [r7, #0]
 800283c:	4401      	add	r1, r0
 800283e:	b2d3      	uxtb	r3, r2
 8002840:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	3308      	adds	r3, #8
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800284a:	4618      	mov	r0, r3
 800284c:	372c      	adds	r7, #44	; 0x2c
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002856:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800285a:	b0eb      	sub	sp, #428	; 0x1ac
 800285c:	af00      	add	r7, sp, #0
 800285e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002862:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002878:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800287c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002880:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002884:	4413      	add	r3, r2
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2200      	movs	r2, #0
 800288c:	461c      	mov	r4, r3
 800288e:	4615      	mov	r5, r2
 8002890:	ea40 0804 	orr.w	r8, r0, r4
 8002894:	ea41 0905 	orr.w	r9, r1, r5
 8002898:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800289c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80028a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028aa:	4413      	add	r3, r2
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2200      	movs	r2, #0
 80028b2:	469a      	mov	sl, r3
 80028b4:	4693      	mov	fp, r2
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80028c2:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80028c6:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80028ca:	ea40 0402 	orr.w	r4, r0, r2
 80028ce:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80028d2:	430b      	orrs	r3, r1
 80028d4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80028d8:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80028dc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80028e0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80028e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028e8:	1c9a      	adds	r2, r3, #2
 80028ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028ee:	4413      	add	r3, r2
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2200      	movs	r2, #0
 80028f6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80028fa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800290a:	464c      	mov	r4, r9
 800290c:	0423      	lsls	r3, r4, #16
 800290e:	4644      	mov	r4, r8
 8002910:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002914:	4644      	mov	r4, r8
 8002916:	0422      	lsls	r2, r4, #16
 8002918:	ea40 0402 	orr.w	r4, r0, r2
 800291c:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002920:	430b      	orrs	r3, r1
 8002922:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002926:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800292a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800292e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002932:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002936:	1cda      	adds	r2, r3, #3
 8002938:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800293c:	4413      	add	r3, r2
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2200      	movs	r2, #0
 8002944:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002948:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800294c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002950:	4623      	mov	r3, r4
 8002952:	0a1b      	lsrs	r3, r3, #8
 8002954:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002958:	4623      	mov	r3, r4
 800295a:	061b      	lsls	r3, r3, #24
 800295c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002960:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002964:	4623      	mov	r3, r4
 8002966:	4303      	orrs	r3, r0
 8002968:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800296c:	462b      	mov	r3, r5
 800296e:	430b      	orrs	r3, r1
 8002970:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002974:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002978:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800297c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002980:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002984:	1d1a      	adds	r2, r3, #4
 8002986:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800298a:	4413      	add	r3, r2
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2200      	movs	r2, #0
 8002992:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002996:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80029a6:	0023      	movs	r3, r4
 80029a8:	2200      	movs	r2, #0
 80029aa:	ea40 0402 	orr.w	r4, r0, r2
 80029ae:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80029b2:	430b      	orrs	r3, r1
 80029b4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80029b8:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80029bc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80029c0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029c8:	1d5a      	adds	r2, r3, #5
 80029ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029ce:	4413      	add	r3, r2
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2200      	movs	r2, #0
 80029d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80029da:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80029ea:	0223      	lsls	r3, r4, #8
 80029ec:	2200      	movs	r2, #0
 80029ee:	ea40 0402 	orr.w	r4, r0, r2
 80029f2:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80029f6:	430b      	orrs	r3, r1
 80029f8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80029fc:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002a00:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002a04:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a0c:	1d9a      	adds	r2, r3, #6
 8002a0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a12:	4413      	add	r3, r2
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002a1e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002a2e:	0423      	lsls	r3, r4, #16
 8002a30:	2200      	movs	r2, #0
 8002a32:	ea40 0402 	orr.w	r4, r0, r2
 8002a36:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002a40:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002a44:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002a48:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a4c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a50:	1dda      	adds	r2, r3, #7
 8002a52:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a56:	4413      	add	r3, r2
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002a62:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002a72:	0623      	lsls	r3, r4, #24
 8002a74:	2200      	movs	r2, #0
 8002a76:	ea40 0402 	orr.w	r4, r0, r2
 8002a7a:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a84:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002a88:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002a8c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a90:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002a94:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002a98:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a9c:	3308      	adds	r3, #8
 8002a9e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	f04f 0300 	mov.w	r3, #0
 8002aaa:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002aae:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ab2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002ab6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002aba:	4413      	add	r3, r2
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002ac6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002aca:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002ace:	4623      	mov	r3, r4
 8002ad0:	4303      	orrs	r3, r0
 8002ad2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002ad6:	462b      	mov	r3, r5
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ade:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002ae2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ae6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002aea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002af4:	4413      	add	r3, r2
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2200      	movs	r2, #0
 8002afc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002b00:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002b10:	464c      	mov	r4, r9
 8002b12:	0223      	lsls	r3, r4, #8
 8002b14:	4644      	mov	r4, r8
 8002b16:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002b1a:	4644      	mov	r4, r8
 8002b1c:	0222      	lsls	r2, r4, #8
 8002b1e:	ea40 0402 	orr.w	r4, r0, r2
 8002b22:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002b26:	430b      	orrs	r3, r1
 8002b28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002b2c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002b30:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b34:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b38:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b3c:	1c9a      	adds	r2, r3, #2
 8002b3e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b42:	4413      	add	r3, r2
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002b5e:	464c      	mov	r4, r9
 8002b60:	0423      	lsls	r3, r4, #16
 8002b62:	4644      	mov	r4, r8
 8002b64:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002b68:	4644      	mov	r4, r8
 8002b6a:	0422      	lsls	r2, r4, #16
 8002b6c:	ea40 0402 	orr.w	r4, r0, r2
 8002b70:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002b74:	430b      	orrs	r3, r1
 8002b76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b7a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002b7e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b82:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b86:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b8a:	1cda      	adds	r2, r3, #3
 8002b8c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b90:	4413      	add	r3, r2
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2200      	movs	r2, #0
 8002b98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b9c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ba0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002ba4:	4623      	mov	r3, r4
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002bac:	4623      	mov	r3, r4
 8002bae:	061b      	lsls	r3, r3, #24
 8002bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bb4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002bb8:	4623      	mov	r3, r4
 8002bba:	4303      	orrs	r3, r0
 8002bbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bc0:	462b      	mov	r3, r5
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bc8:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002bcc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002bd0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002bd4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bd8:	1d1a      	adds	r2, r3, #4
 8002bda:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bde:	4413      	add	r3, r2
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2200      	movs	r2, #0
 8002be6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bea:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002bfa:	0023      	movs	r3, r4
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	ea40 0402 	orr.w	r4, r0, r2
 8002c02:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002c06:	430b      	orrs	r3, r1
 8002c08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002c0c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002c10:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002c14:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c1c:	1d5a      	adds	r2, r3, #5
 8002c1e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c22:	4413      	add	r3, r2
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c2e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002c3e:	0223      	lsls	r3, r4, #8
 8002c40:	2200      	movs	r2, #0
 8002c42:	ea40 0402 	orr.w	r4, r0, r2
 8002c46:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002c4a:	430b      	orrs	r3, r1
 8002c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c50:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002c54:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002c58:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c5c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c60:	1d9a      	adds	r2, r3, #6
 8002c62:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c66:	4413      	add	r3, r2
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002c82:	0423      	lsls	r3, r4, #16
 8002c84:	2200      	movs	r2, #0
 8002c86:	ea40 0402 	orr.w	r4, r0, r2
 8002c8a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002c8e:	430b      	orrs	r3, r1
 8002c90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c94:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002c98:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002c9c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ca0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ca4:	1dda      	adds	r2, r3, #7
 8002ca6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002caa:	4413      	add	r3, r2
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002cc6:	0623      	lsls	r3, r4, #24
 8002cc8:	2200      	movs	r2, #0
 8002cca:	ea40 0402 	orr.w	r4, r0, r2
 8002cce:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002cd8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002cdc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002ce0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ce4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002ce8:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002cec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d02:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d06:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002d0a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d0e:	4413      	add	r3, r2
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2200      	movs	r2, #0
 8002d16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d1a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002d1e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002d22:	4623      	mov	r3, r4
 8002d24:	4303      	orrs	r3, r0
 8002d26:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d28:	462b      	mov	r3, r5
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d2e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002d32:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d36:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d3a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d44:	4413      	add	r3, r2
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	673b      	str	r3, [r7, #112]	; 0x70
 8002d4e:	677a      	str	r2, [r7, #116]	; 0x74
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d5c:	464c      	mov	r4, r9
 8002d5e:	0223      	lsls	r3, r4, #8
 8002d60:	4644      	mov	r4, r8
 8002d62:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d66:	4644      	mov	r4, r8
 8002d68:	0222      	lsls	r2, r4, #8
 8002d6a:	ea40 0402 	orr.w	r4, r0, r2
 8002d6e:	66bc      	str	r4, [r7, #104]	; 0x68
 8002d70:	430b      	orrs	r3, r1
 8002d72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d74:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002d78:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d7c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d80:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d84:	1c9a      	adds	r2, r3, #2
 8002d86:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d8a:	4413      	add	r3, r2
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2200      	movs	r2, #0
 8002d92:	663b      	str	r3, [r7, #96]	; 0x60
 8002d94:	667a      	str	r2, [r7, #100]	; 0x64
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002da2:	464c      	mov	r4, r9
 8002da4:	0423      	lsls	r3, r4, #16
 8002da6:	4644      	mov	r4, r8
 8002da8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002dac:	4644      	mov	r4, r8
 8002dae:	0422      	lsls	r2, r4, #16
 8002db0:	ea40 0402 	orr.w	r4, r0, r2
 8002db4:	65bc      	str	r4, [r7, #88]	; 0x58
 8002db6:	430b      	orrs	r3, r1
 8002db8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dba:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002dbe:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002dc2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002dc6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dca:	1cda      	adds	r2, r3, #3
 8002dcc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dd0:	4413      	add	r3, r2
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	653b      	str	r3, [r7, #80]	; 0x50
 8002dda:	657a      	str	r2, [r7, #84]	; 0x54
 8002ddc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002de0:	4623      	mov	r3, r4
 8002de2:	0a1b      	lsrs	r3, r3, #8
 8002de4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de6:	4623      	mov	r3, r4
 8002de8:	061b      	lsls	r3, r3, #24
 8002dea:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dec:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002df0:	4623      	mov	r3, r4
 8002df2:	4303      	orrs	r3, r0
 8002df4:	643b      	str	r3, [r7, #64]	; 0x40
 8002df6:	462b      	mov	r3, r5
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8002dfc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002e00:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002e04:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e0c:	1d1a      	adds	r2, r3, #4
 8002e0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e12:	4413      	add	r3, r2
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2200      	movs	r2, #0
 8002e1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002e28:	0023      	movs	r3, r4
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	ea40 0402 	orr.w	r4, r0, r2
 8002e30:	633c      	str	r4, [r7, #48]	; 0x30
 8002e32:	430b      	orrs	r3, r1
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34
 8002e36:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002e3a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002e3e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e42:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e46:	1d5a      	adds	r2, r3, #5
 8002e48:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e4c:	4413      	add	r3, r2
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2200      	movs	r2, #0
 8002e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002e62:	0223      	lsls	r3, r4, #8
 8002e64:	2200      	movs	r2, #0
 8002e66:	ea40 0402 	orr.w	r4, r0, r2
 8002e6a:	623c      	str	r4, [r7, #32]
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e70:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002e74:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002e78:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e7c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e80:	3306      	adds	r3, #6
 8002e82:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002e86:	4413      	add	r3, r2
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	61bb      	str	r3, [r7, #24]
 8002e90:	61fa      	str	r2, [r7, #28]
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	69bc      	ldr	r4, [r7, #24]
 8002e9c:	0423      	lsls	r3, r4, #16
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	ea40 0402 	orr.w	r4, r0, r2
 8002ea4:	613c      	str	r4, [r7, #16]
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002eae:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002eb2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002eb6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002eba:	3307      	adds	r3, #7
 8002ebc:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002ec0:	4413      	add	r3, r2
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	60fa      	str	r2, [r7, #12]
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	68bc      	ldr	r4, [r7, #8]
 8002ed6:	0623      	lsls	r3, r4, #24
 8002ed8:	2200      	movs	r2, #0
 8002eda:	ea40 0402 	orr.w	r4, r0, r2
 8002ede:	603c      	str	r4, [r7, #0]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002ee8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002eec:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002ef0:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002ef4:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002ef8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002efc:	3308      	adds	r3, #8
 8002efe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002f02:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002f06:	4618      	mov	r0, r3
 8002f08:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f12:	4770      	bx	lr

08002f14 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	4b03      	ldr	r3, [pc, #12]	; (8002f2c <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	0800f160 	.word	0x0800f160

08002f30 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	0800f178 	.word	0x0800f178

08002f4c <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe faca 	bl	80014f0 <_ZN3ros3MsgC1Ev>
 8002f5c:	4a08      	ldr	r2, [pc, #32]	; (8002f80 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3308      	adds	r3, #8
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fada 	bl	8002520 <_ZN13geometry_msgs7Vector3C1Ev>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3328      	adds	r3, #40	; 0x28
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fad5 	bl	8002520 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	0800f26c 	.word	0x0800f26c

08002f84 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f103 0008 	add.w	r0, r3, #8
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	f7ff fae6 	bl	8002570 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4413      	add	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f7ff fad9 	bl	8002570 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
      return offset;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
    }
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f103 0008 	add.w	r0, r3, #8
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	4413      	add	r3, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	f7ff fc33 	bl	8002856 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	4413      	add	r3, r2
 8003004:	4619      	mov	r1, r3
 8003006:	f7ff fc26 	bl	8002856 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800300a:	4602      	mov	r2, r0
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4413      	add	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
     return offset;
 8003012:	68fb      	ldr	r3, [r7, #12]
    }
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	4b03      	ldr	r3, [pc, #12]	; (8003034 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003026:	4618      	mov	r0, r3
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	0800f19c 	.word	0x0800f19c

08003038 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	4b03      	ldr	r3, [pc, #12]	; (8003050 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	0800f1b0 	.word	0x0800f1b0

08003054 <_Z12vel_callbackRKN13geometry_msgs5TwistE>:
#include <ros.h>
#include <rosserial.h>
#include "geometry_msgs/TwistWithCovariance.h"

void vel_callback(const geometry_msgs::Twist &msg)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	linearvelocity_x = msg.linear.x;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003062:	490a      	ldr	r1, [pc, #40]	; (800308c <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 8003064:	e9c1 2300 	strd	r2, r3, [r1]
	linearvelocity_y = msg.linear.y;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800306e:	4908      	ldr	r1, [pc, #32]	; (8003090 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x3c>)
 8003070:	e9c1 2300 	strd	r2, r3, [r1]
	angularvelocity = msg.angular.z;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800307a:	4906      	ldr	r1, [pc, #24]	; (8003094 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x40>)
 800307c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	240000c0 	.word	0x240000c0
 8003090:	240000c8 	.word	0x240000c8
 8003094:	240000d0 	.word	0x240000d0

08003098 <HAL_UART_TxCpltCallback>:
//----------------------------definition of ros----------------------------
ros::NodeHandle nh;
ros::Subscriber<geometry_msgs::Twist> vel_sub("/cmd_vel", vel_callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 80030a0:	4805      	ldr	r0, [pc, #20]	; (80030b8 <HAL_UART_TxCpltCallback+0x20>)
 80030a2:	f000 f947 	bl	8003334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 80030a6:	4603      	mov	r3, r0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f989 	bl	80023c0 <_ZN13STM32Hardware5flushEv>
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	24000538 	.word	0x24000538

080030bc <Rosserial_Init>:

void Rosserial_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
    nh.initNode();
 80030c0:	4804      	ldr	r0, [pc, #16]	; (80030d4 <Rosserial_Init+0x18>)
 80030c2:	f000 f943 	bl	800334c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
    nh.subscribe(vel_sub);
 80030c6:	4904      	ldr	r1, [pc, #16]	; (80030d8 <Rosserial_Init+0x1c>)
 80030c8:	4802      	ldr	r0, [pc, #8]	; (80030d4 <Rosserial_Init+0x18>)
 80030ca:	f000 f968 	bl	800339e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	24000538 	.word	0x24000538
 80030d8:	24001678 	.word	0x24001678

080030dc <Rosserial_GetHardware>:
{
		return nh.config_state();
}

void Rosserial_GetHardware(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
		nh.getHardware()->init();
 80030e0:	4804      	ldr	r0, [pc, #16]	; (80030f4 <Rosserial_GetHardware+0x18>)
 80030e2:	f000 f927 	bl	8003334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 80030e6:	4603      	mov	r3, r0
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff f91f 	bl	800232c <_ZN13STM32Hardware4initEv>
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	24000538 	.word	0x24000538

080030f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d80d      	bhi.n	8003128 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	fa22 f103 	lsr.w	r1, r2, r3
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4413      	add	r3, r2
 800311c:	b2ca      	uxtb	r2, r1
 800311e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	3301      	adds	r3, #1
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	e7ee      	b.n	8003106 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d811      	bhi.n	8003172 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6839      	ldr	r1, [r7, #0]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	440a      	add	r2, r1
 8003158:	7812      	ldrb	r2, [r2, #0]
 800315a:	4611      	mov	r1, r2
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	00d2      	lsls	r2, r2, #3
 8003160:	fa01 f202 	lsl.w	r2, r1, r2
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	3301      	adds	r3, #1
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	e7ea      	b.n	8003148 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003172:	bf00      	nop
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	4a04      	ldr	r2, [pc, #16]	; (800319c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	0800f2b4 	.word	0x0800f2b4

080031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff ffe8 	bl	8003180 <_ZN3ros15NodeHandleBase_C1Ev>
 80031b0:	4a45      	ldr	r2, [pc, #276]	; (80032c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x128>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3304      	adds	r3, #4
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff f89a 	bl	80022f4 <_ZN13STM32HardwareC1Ev>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	f241 1318 	movw	r3, #4376	; 0x1118
 80031d2:	4413      	add	r3, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fe fcff 	bl	8001bd8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2b18      	cmp	r3, #24
 80031e2:	d80a      	bhi.n	80031fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5a>
      publishers[i] = 0;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 80031ec:	2100      	movs	r1, #0
 80031ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	3301      	adds	r3, #1
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	e7f1      	b.n	80031de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	2b18      	cmp	r3, #24
 8003202:	d80b      	bhi.n	800321c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7c>
      subscribers[i] = 0;
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f203 4322 	addw	r3, r3, #1058	; 0x422
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	2200      	movs	r2, #0
 8003212:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	3301      	adds	r3, #1
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	e7f0      	b.n	80031fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5e>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003226:	d20a      	bcs.n	800323e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9e>
      message_in[i] = 0;
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	f603 0328 	addw	r3, r3, #2088	; 0x828
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3301      	adds	r3, #1
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	e7f0      	b.n	8003220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003248:	d20a      	bcs.n	8003260 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xc0>
      message_out[i] = 0;
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4413      	add	r3, r2
 8003250:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	3301      	adds	r3, #1
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	e7f0      	b.n	8003242 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa2>

    req_param_resp.ints_length = 0;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003266:	461a      	mov	r2, r3
 8003268:	2300      	movs	r3, #0
 800326a:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    req_param_resp.ints = NULL;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003274:	461a      	mov	r2, r3
 8003276:	2300      	movs	r3, #0
 8003278:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    req_param_resp.floats_length = 0;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003282:	461a      	mov	r2, r3
 8003284:	2300      	movs	r3, #0
 8003286:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    req_param_resp.floats = NULL;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003290:	461a      	mov	r2, r3
 8003292:	2300      	movs	r3, #0
 8003294:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
    req_param_resp.ints_length = 0;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800329e:	461a      	mov	r2, r3
 80032a0:	2300      	movs	r3, #0
 80032a2:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    req_param_resp.ints = NULL;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ac:	461a      	mov	r2, r3
 80032ae:	2300      	movs	r3, #0
 80032b0:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

    spin_timeout_ = 0;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  }
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	0800f258 	.word	0x0800f258

080032cc <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	0800f29c 	.word	0x0800f29c

080032ec <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ffe5 	bl	80032cc <_ZN3ros11Subscriber_C1Ev>
 8003302:	4a0b      	ldr	r2, [pc, #44]	; (8003330 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	3310      	adds	r3, #16
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fe1d 	bl	8002f4c <_ZN13geometry_msgs5TwistC1Ev>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	659a      	str	r2, [r3, #88]	; 0x58
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	609a      	str	r2, [r3, #8]
  };
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	0800f240 	.word	0x0800f240

08003334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:

  Hardware* getHardware()
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
  }
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe ffe7 	bl	800232c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003364:	461a      	mov	r2, r3
 8003366:	2300      	movs	r3, #0
 8003368:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    bytes_ = 0;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003372:	461a      	mov	r2, r3
 8003374:	2300      	movs	r3, #0
 8003376:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    index_ = 0;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003380:	461a      	mov	r2, r3
 8003382:	2300      	movs	r3, #0
 8003384:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    topic_ = 0;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800338e:	461a      	mov	r2, r3
 8003390:	2300      	movs	r3, #0
 8003392:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
  };
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b18      	cmp	r3, #24
 80033b0:	dc1b      	bgt.n	80033ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f203 4322 	addw	r3, r3, #1058	; 0x422
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10e      	bne.n	80033e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f203 4322 	addw	r3, r3, #1058	; 0x422
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	605a      	str	r2, [r3, #4]
        return true;
 80033de:	2301      	movs	r3, #1
 80033e0:	e004      	b.n	80033ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3301      	adds	r3, #1
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	e7e0      	b.n	80033ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 80033ea:	2300      	movs	r3, #0
  }
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3304      	adds	r3, #4
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff f880 	bl	800250a <_ZN13STM32Hardware4timeEv>
 800340a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003412:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800341e:	4293      	cmp	r3, r2
 8003420:	d905      	bls.n	800342e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    if (mode_ != MODE_FIRST_FF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00e      	beq.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003442:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	429a      	cmp	r2, r3
 800344a:	d906      	bls.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003452:	461a      	mov	r2, r3
 8003454:	2300      	movs	r3, #0
 8003456:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      if (spin_timeout_ > 0)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8003460:	2b00      	cmp	r3, #0
 8003462:	d014      	beq.n	800348e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3304      	adds	r3, #4
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff f84e 	bl	800250a <_ZN13STM32Hardware4timeEv>
 800346e:	4602      	mov	r2, r0
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1ad2      	subs	r2, r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800347a:	429a      	cmp	r2, r3
 800347c:	bf8c      	ite	hi
 800347e:	2301      	movhi	r3, #1
 8003480:	2300      	movls	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 8003488:	f06f 0301 	mvn.w	r3, #1
 800348c:	e221      	b.n	80038d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      int data = hardware_.read();
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	4618      	mov	r0, r3
 8003494:	f7fe ff66 	bl	8002364 <_ZN13STM32Hardware4readEv>
 8003498:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f2c0 81fa 	blt.w	8003896 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x49e>
      checksum_ += data;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034a8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	4413      	add	r3, r2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034b6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034c4:	2b07      	cmp	r3, #7
 80034c6:	d12b      	bne.n	8003520 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x128>
        message_in[index_++] = data;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ce:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80034da:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	b2d1      	uxtb	r1, r2
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	460a      	mov	r2, r1
 80034e8:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
        bytes_--;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034f6:	3b01      	subs	r3, #1
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003508:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1a4      	bne.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003516:	461a      	mov	r2, r3
 8003518:	2308      	movs	r3, #8
 800351a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800351e:	e79c      	b.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d130      	bne.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x198>
        if (data == 0xff)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2bff      	cmp	r3, #255	; 0xff
 8003532:	d112      	bne.n	800355a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800353a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800353e:	3301      	adds	r3, #1
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003546:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	3314      	adds	r3, #20
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003554:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
 8003558:	e77f      	b.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3304      	adds	r3, #4
 800355e:	4618      	mov	r0, r3
 8003560:	f7fe ffd3 	bl	800250a <_ZN13STM32Hardware4timeEv>
 8003564:	4602      	mov	r2, r0
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f241 3288 	movw	r2, #5000	; 0x1388
 800356e:	4293      	cmp	r3, r2
 8003570:	bf8c      	ite	hi
 8003572:	2301      	movhi	r3, #1
 8003574:	2300      	movls	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	f43f af6e 	beq.w	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
          return SPIN_TIMEOUT;
 800358a:	f06f 0301 	mvn.w	r3, #1
 800358e:	e1a0      	b.n	80038d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800359a:	2b01      	cmp	r3, #1
 800359c:	d121      	bne.n	80035e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ea>
        if (data == PROTOCOL_VER)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2bfe      	cmp	r3, #254	; 0xfe
 80035a2:	d10b      	bne.n	80035bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1c4>
          mode_++;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035ae:	3301      	adds	r3, #1
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035ba:	e74e      	b.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c2:	461a      	mov	r2, r3
 80035c4:	2300      	movs	r3, #0
 80035c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
          if (configured_ == false)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f47f af40 	bne.w	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f97d 	bl	80038da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 80035e0:	e73b      	b.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d120      	bne.n	8003632 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23a>
        bytes_ = data;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f6:	461a      	mov	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        index_ = 0;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003604:	461a      	mov	r2, r3
 8003606:	2300      	movs	r3, #0
 8003608:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
        mode_++;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003616:	3301      	adds	r3, #1
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800361e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        checksum_ = data;               /* first byte for calculating size checksum */
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003628:	461a      	mov	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8003630:	e713      	b.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800363c:	2b03      	cmp	r3, #3
 800363e:	d118      	bne.n	8003672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27a>
        bytes_ += data << 8;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003646:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	021b      	lsls	r3, r3, #8
 800364e:	4413      	add	r3, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003656:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003664:	3301      	adds	r3, #1
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800366c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003670:	e6f3      	b.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800367c:	2b04      	cmp	r3, #4
 800367e:	d11f      	bne.n	80036c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c8>
        if ((checksum_ % 256) == 255)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003686:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800368a:	425a      	negs	r2, r3
 800368c:	b2db      	uxtb	r3, r3
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	bf58      	it	pl
 8003692:	4253      	negpl	r3, r2
 8003694:	2bff      	cmp	r3, #255	; 0xff
 8003696:	d10b      	bne.n	80036b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b8>
          mode_++;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800369e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036a2:	3301      	adds	r3, #1
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80036ae:	e6d4      	b.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b6:	461a      	mov	r2, r3
 80036b8:	2300      	movs	r3, #0
 80036ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80036be:	e6cc      	b.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036ca:	2b05      	cmp	r3, #5
 80036cc:	d119      	bne.n	8003702 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30a>
        topic_ = data;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d4:	461a      	mov	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036e6:	3301      	adds	r3, #1
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        checksum_ = data;               /* first byte included in checksum */
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f8:	461a      	mov	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8003700:	e6ab      	b.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800370c:	2b06      	cmp	r3, #6
 800370e:	d123      	bne.n	8003758 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x360>
        topic_ += data << 8;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003716:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	4413      	add	r3, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003726:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_ = MODE_MESSAGE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003730:	461a      	mov	r2, r3
 8003732:	2307      	movs	r3, #7
 8003734:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003742:	2b00      	cmp	r3, #0
 8003744:	f47f ae89 	bne.w	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800374e:	461a      	mov	r2, r3
 8003750:	2308      	movs	r3, #8
 8003752:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003756:	e680      	b.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800375e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003762:	2b08      	cmp	r3, #8
 8003764:	f47f ae79 	bne.w	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800376e:	461a      	mov	r2, r3
 8003770:	2300      	movs	r3, #0
 8003772:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if ((checksum_ % 256) == 255)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800377c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003780:	425a      	negs	r2, r3
 8003782:	b2db      	uxtb	r3, r3
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	bf58      	it	pl
 8003788:	4253      	negpl	r3, r2
 800378a:	2bff      	cmp	r3, #255	; 0xff
 800378c:	f47f ae65 	bne.w	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003796:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d116      	bne.n	80037cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d4>
            requestSyncTime();
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f89b 	bl	80038da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f8b6 	bl	8003916 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b0:	461a      	mov	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            last_sync_receive_time = c_time;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037be:	461a      	mov	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            return SPIN_ERR;
 80037c6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ca:	e082      	b.n	80038d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
          else if (topic_ == TopicInfo::ID_TIME)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80037d6:	2b0a      	cmp	r3, #10
 80037d8:	d107      	bne.n	80037ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f2>
            syncTime(message_in);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f603 0328 	addw	r3, r3, #2088	; 0x828
 80037e0:	4619      	mov	r1, r3
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f97a 	bl	8003adc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 80037e8:	e637      	b.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80037f4:	2b06      	cmp	r3, #6
 80037f6:	d111      	bne.n	800381c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
            req_param_resp.deserialize(message_in);
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	f241 1318 	movw	r3, #4376	; 0x1118
 80037fe:	4413      	add	r3, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	f602 0228 	addw	r2, r2, #2088	; 0x828
 8003806:	4611      	mov	r1, r2
 8003808:	4618      	mov	r0, r3
 800380a:	f7fe fb1a 	bl	8001e42 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800381a:	e61e      	b.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003822:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003826:	2b0b      	cmp	r3, #11
 8003828:	d106      	bne.n	8003838 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x440>
            configured_ = false;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8003836:	e610      	b.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800383e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003842:	3b64      	subs	r3, #100	; 0x64
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	f203 4322 	addw	r3, r3, #1058	; 0x422
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f43f ae02 	beq.w	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800385c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003860:	3b64      	subs	r3, #100	; 0x64
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	6858      	ldr	r0, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003874:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003878:	3b64      	subs	r3, #100	; 0x64
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	f602 0228 	addw	r2, r2, #2088	; 0x828
 8003890:	4611      	mov	r1, r2
 8003892:	4798      	blx	r3
    while (true)
 8003894:	e5e1      	b.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 8003896:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800389e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d014      	beq.n	80038d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d909      	bls.n	80038d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
      requestSyncTime();
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f80c 	bl	80038da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c8:	461a      	mov	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    return SPIN_OK;
 80038d0:	2300      	movs	r3, #0
  }
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 80038da:	b580      	push	{r7, lr}
 80038dc:	b086      	sub	sp, #24
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80038e2:	f107 030c 	add.w	r3, r7, #12
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd fe12 	bl	8001510 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f107 020c 	add.w	r2, r7, #12
 80038f6:	210a      	movs	r1, #10
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4798      	blx	r3
    rt_time = hardware_.time();
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3304      	adds	r3, #4
 8003900:	4618      	mov	r0, r3
 8003902:	f7fe fe02 	bl	800250a <_ZN13STM32Hardware4timeEv>
 8003906:	4602      	mov	r2, r0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
  }
 800390e:	bf00      	nop
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003916:	b590      	push	{r4, r7, lr}
 8003918:	b08b      	sub	sp, #44	; 0x2c
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800391e:	f107 030c 	add.w	r3, r7, #12
 8003922:	4618      	mov	r0, r3
 8003924:	f7fd fee4 	bl	80016f0 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003928:	2300      	movs	r3, #0
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	2b18      	cmp	r3, #24
 8003930:	dc5b      	bgt.n	80039ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003936:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 800393a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d04f      	beq.n	80039e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003946:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 800394a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	b29b      	uxth	r3, r3
 8003952:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003958:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 800395c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003968:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 800396c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003970:	6859      	ldr	r1, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003976:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 800397a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3308      	adds	r3, #8
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4608      	mov	r0, r1
 8003988:	4798      	blx	r3
 800398a:	4603      	mov	r3, r0
 800398c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003992:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a0:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 80039a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4608      	mov	r0, r1
 80039b2:	4798      	blx	r3
 80039b4:	4603      	mov	r3, r0
 80039b6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80039b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039bc:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681c      	ldr	r4, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c8:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 80039cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fe fbc3 	bl	800215c <_ZN3ros9Publisher15getEndpointTypeEv>
 80039d6:	4601      	mov	r1, r0
 80039d8:	f107 030c 	add.w	r3, r7, #12
 80039dc:	461a      	mov	r2, r3
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	3301      	adds	r3, #1
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
 80039e8:	e7a0      	b.n	800392c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80039ea:	2300      	movs	r3, #0
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	2b18      	cmp	r3, #24
 80039f2:	dc68      	bgt.n	8003ac6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	f203 4322 	addw	r3, r3, #1058	; 0x422
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d05b      	beq.n	8003abe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	6859      	ldr	r1, [r3, #4]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3308      	adds	r3, #8
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4608      	mov	r0, r1
 8003a50:	4798      	blx	r3
 8003a52:	4603      	mov	r3, r0
 8003a54:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	330c      	adds	r3, #12
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4608      	mov	r0, r1
 8003a7a:	4798      	blx	r3
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a84:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681c      	ldr	r4, [r3, #0]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	6859      	ldr	r1, [r3, #4]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4608      	mov	r0, r1
 8003ab0:	4798      	blx	r3
 8003ab2:	4601      	mov	r1, r0
 8003ab4:	f107 030c 	add.w	r3, r7, #12
 8003ab8:	461a      	mov	r2, r3
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac4:	e793      	b.n	80039ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
  }
 8003ad2:	bf00      	nop
 8003ad4:	372c      	adds	r7, #44	; 0x2c
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd90      	pop	{r4, r7, pc}
	...

08003adc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003ae6:	f107 0308 	add.w	r3, r7, #8
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fd fd10 	bl	8001510 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3304      	adds	r3, #4
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fe fd08 	bl	800250a <_ZN13STM32Hardware4timeEv>
 8003afa:	4602      	mov	r2, r0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003b06:	f107 0308 	add.w	r3, r7, #8
 8003b0a:	6839      	ldr	r1, [r7, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fd fd6f 	bl	80015f0 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	4916      	ldr	r1, [pc, #88]	; (8003b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003b18:	fba1 1303 	umull	r1, r3, r1, r3
 8003b1c:	099b      	lsrs	r3, r3, #6
 8003b1e:	4413      	add	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003b22:	6939      	ldr	r1, [r7, #16]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003b28:	fba3 0302 	umull	r0, r3, r3, r2
 8003b2c:	099b      	lsrs	r3, r3, #6
 8003b2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b32:	fb00 f303 	mul.w	r3, r0, r3
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	4a0e      	ldr	r2, [pc, #56]	; (8003b74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 8003b3a:	fb02 f303 	mul.w	r3, r2, r3
 8003b3e:	440b      	add	r3, r1
 8003b40:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003b42:	f107 0308 	add.w	r3, r7, #8
 8003b46:	3304      	adds	r3, #4
 8003b48:	4619      	mov	r1, r3
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f8aa 	bl	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fe fcd8 	bl	800250a <_ZN13STM32Hardware4timeEv>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b62:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
 8003b66:	bf00      	nop
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	10624dd3 	.word	0x10624dd3
 8003b74:	000f4240 	.word	0x000f4240

08003b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b63      	cmp	r3, #99	; 0x63
 8003b88:	dd0b      	ble.n	8003ba2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b90:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8003b94:	f083 0301 	eor.w	r3, r3, #1
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e079      	b.n	8003c96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	f602 4228 	addw	r2, r2, #3112	; 0xc28
 8003bae:	3207      	adds	r2, #7
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
 8003bb6:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	22ff      	movs	r2, #255	; 0xff
 8003bbc:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[1] = PROTOCOL_VER;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	22fe      	movs	r2, #254	; 0xfe
 8003bc4:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	0a1b      	lsrs	r3, r3, #8
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f883 2c2b 	strb.w	r2, [r3, #3115]	; 0xc2b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 2c2a 	ldrb.w	r2, [r3, #3114]	; 0xc2a
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 3c2b 	ldrb.w	r3, [r3, #3115]	; 0xc2b
 8003bee:	4413      	add	r3, r2
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f883 2c2c 	strb.w	r2, [r3, #3116]	; 0xc2c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f883 2c2d 	strb.w	r2, [r3, #3117]	; 0xc2d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	b21b      	sxth	r3, r3
 8003c0a:	121b      	asrs	r3, r3, #8
 8003c0c:	b21b      	sxth	r3, r3
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f883 2c2e 	strb.w	r2, [r3, #3118]	; 0xc2e

    /* calculate checksum */
    int chk = 0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003c1a:	2305      	movs	r3, #5
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	3306      	adds	r3, #6
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	dc0d      	bgt.n	8003c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	4413      	add	r3, r2
 8003c3a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	e7ec      	b.n	8003c1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	3307      	adds	r3, #7
 8003c48:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	425a      	negs	r2, r3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	bf58      	it	pl
 8003c54:	4253      	negpl	r3, r2
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	1c59      	adds	r1, r3, #1
 8003c5c:	6179      	str	r1, [r7, #20]
 8003c5e:	43d2      	mvns	r2, r2
 8003c60:	b2d1      	uxtb	r1, r2
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4413      	add	r3, r2
 8003c66:	460a      	mov	r2, r1
 8003c68:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28

    if (l <= OUTPUT_SIZE)
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c72:	dc0a      	bgt.n	8003c8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x112>
    {
      hardware_.write(message_out, l);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	1d18      	adds	r0, r3, #4
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4619      	mov	r1, r3
 8003c82:	f7fe fbfb 	bl	800247c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	e005      	b.n	8003c96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003c8a:	4905      	ldr	r1, [pc, #20]	; (8003ca0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x128>)
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f849 	bl	8003d24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8003c92:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003c96:	4618      	mov	r0, r3
 8003c98:	3720      	adds	r7, #32
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	0800f1d4 	.word	0x0800f1d4

08003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe fc29 	bl	800250a <_ZN13STM32Hardware4timeEv>
 8003cb8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4915      	ldr	r1, [pc, #84]	; (8003d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003cc2:	fba1 1303 	umull	r1, r3, r1, r3
 8003cc6:	099b      	lsrs	r3, r3, #6
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	1e5a      	subs	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6859      	ldr	r1, [r3, #4]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003cda:	fba3 0302 	umull	r0, r3, r3, r2
 8003cde:	099b      	lsrs	r3, r3, #6
 8003ce0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ce4:	fb00 f303 	mul.w	r3, r0, r3
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	4a0c      	ldr	r2, [pc, #48]	; (8003d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 8003cec:	fb02 f303 	mul.w	r3, r2, r3
 8003cf0:	1aca      	subs	r2, r1, r3
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 8003cf4:	4413      	add	r3, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	f8c2 3820 	str.w	r3, [r2, #2080]	; 0x820
    normalizeSecNSec(sec_offset, nsec_offset);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f603 021c 	addw	r2, r3, #2076	; 0x81c
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	f7fc fc8a 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	10624dd3 	.word	0x10624dd3
 8003d1c:	000f4240 	.word	0x000f4240
 8003d20:	3b9aca00 	.word	0x3b9aca00

08003d24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	2103      	movs	r1, #3
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f804 	bl	8003d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8003d38:	bf00      	nop
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	607a      	str	r2, [r7, #4]
 8003d4c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003d4e:	f107 0314 	add.w	r3, r7, #20
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fd fe90 	bl	8001a78 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003d58:	7afb      	ldrb	r3, [r7, #11]
 8003d5a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f107 0214 	add.w	r2, r7, #20
 8003d6a:	2107      	movs	r1, #7
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	4798      	blx	r3
  }
 8003d70:	bf00      	nop
 8003d72:	3720      	adds	r7, #32
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <_Z41__static_initialization_and_destruction_0ii>:
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d10d      	bne.n	8003da4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d108      	bne.n	8003da4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 8003d92:	4806      	ldr	r0, [pc, #24]	; (8003dac <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003d94:	f7ff fa04 	bl	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> vel_sub("/cmd_vel", vel_callback);
 8003d98:	2301      	movs	r3, #1
 8003d9a:	4a05      	ldr	r2, [pc, #20]	; (8003db0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003d9c:	4905      	ldr	r1, [pc, #20]	; (8003db4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003d9e:	4806      	ldr	r0, [pc, #24]	; (8003db8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003da0:	f7ff faa4 	bl	80032ec <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	24000538 	.word	0x24000538
 8003db0:	08003055 	.word	0x08003055
 8003db4:	0800f210 	.word	0x0800f210
 8003db8:	24001678 	.word	0x24001678

08003dbc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3310      	adds	r3, #16
 8003dca:	6839      	ldr	r1, [r7, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff f8ff 	bl	8002fd0 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	3210      	adds	r2, #16
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4798      	blx	r3
  }
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3310      	adds	r3, #16
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff f906 	bl	800301c <_ZN13geometry_msgs5Twist7getTypeEv>
 8003e10:	4603      	mov	r3, r0
  }
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3310      	adds	r3, #16
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff f906 	bl	8003038 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003e2c:	4603      	mov	r3, r0
  }
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
    return configured_;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e44:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
  };
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <_GLOBAL__sub_I__Z12vel_callbackRKN13geometry_msgs5TwistE>:
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	f7ff ff8b 	bl	8003d78 <_Z41__static_initialization_and_destruction_0ii>
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <HAL_MspInit+0x30>)
 8003e6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e70:	4a08      	ldr	r2, [pc, #32]	; (8003e94 <HAL_MspInit+0x30>)
 8003e72:	f043 0302 	orr.w	r3, r3, #2
 8003e76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_MspInit+0x30>)
 8003e7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	607b      	str	r3, [r7, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	58024400 	.word	0x58024400

08003e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e9c:	e7fe      	b.n	8003e9c <NMI_Handler+0x4>

08003e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ea2:	e7fe      	b.n	8003ea2 <HardFault_Handler+0x4>

08003ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ea8:	e7fe      	b.n	8003ea8 <MemManage_Handler+0x4>

08003eaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eae:	e7fe      	b.n	8003eae <BusFault_Handler+0x4>

08003eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003eb4:	e7fe      	b.n	8003eb4 <UsageFault_Handler+0x4>

08003eb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ed6:	bf00      	nop
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ee4:	f000 ffa0 	bl	8004e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ee8:	bf00      	nop
 8003eea:	bd80      	pop	{r7, pc}

08003eec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003ef0:	4802      	ldr	r0, [pc, #8]	; (8003efc <DMA1_Stream0_IRQHandler+0x10>)
 8003ef2:	f002 fdd9 	bl	8006aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	24001984 	.word	0x24001984

08003f00 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003f04:	4802      	ldr	r0, [pc, #8]	; (8003f10 <DMA1_Stream1_IRQHandler+0x10>)
 8003f06:	f002 fdcf 	bl	8006aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	240019fc 	.word	0x240019fc

08003f14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f18:	4802      	ldr	r0, [pc, #8]	; (8003f24 <TIM2_IRQHandler+0x10>)
 8003f1a:	f007 fc83 	bl	800b824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	240016dc 	.word	0x240016dc

08003f28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f2c:	4802      	ldr	r0, [pc, #8]	; (8003f38 <TIM3_IRQHandler+0x10>)
 8003f2e:	f007 fc79 	bl	800b824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f32:	bf00      	nop
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	24001728 	.word	0x24001728

08003f3c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f40:	4802      	ldr	r0, [pc, #8]	; (8003f4c <TIM4_IRQHandler+0x10>)
 8003f42:	f007 fc6f 	bl	800b824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	24001774 	.word	0x24001774

08003f50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f54:	4802      	ldr	r0, [pc, #8]	; (8003f60 <USART1_IRQHandler+0x10>)
 8003f56:	f008 feaf 	bl	800ccb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	240018f0 	.word	0x240018f0

08003f64 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003f68:	4802      	ldr	r0, [pc, #8]	; (8003f74 <TIM5_IRQHandler+0x10>)
 8003f6a:	f007 fc5b 	bl	800b824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003f6e:	bf00      	nop
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	240017c0 	.word	0x240017c0

08003f78 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8003f7c:	4802      	ldr	r0, [pc, #8]	; (8003f88 <TIM23_IRQHandler+0x10>)
 8003f7e:	f007 fc51 	bl	800b824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8003f82:	bf00      	nop
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	240018a4 	.word	0x240018a4

08003f8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  return 1;
 8003f90:	2301      	movs	r3, #1
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <_kill>:

int _kill(int pid, int sig)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fa6:	f00a fea3 	bl	800ecf0 <__errno>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2216      	movs	r2, #22
 8003fae:	601a      	str	r2, [r3, #0]
  return -1;
 8003fb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <_exit>:

void _exit (int status)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff ffe7 	bl	8003f9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fce:	e7fe      	b.n	8003fce <_exit+0x12>

08003fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fd8:	4a14      	ldr	r2, [pc, #80]	; (800402c <_sbrk+0x5c>)
 8003fda:	4b15      	ldr	r3, [pc, #84]	; (8004030 <_sbrk+0x60>)
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fe4:	4b13      	ldr	r3, [pc, #76]	; (8004034 <_sbrk+0x64>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fec:	4b11      	ldr	r3, [pc, #68]	; (8004034 <_sbrk+0x64>)
 8003fee:	4a12      	ldr	r2, [pc, #72]	; (8004038 <_sbrk+0x68>)
 8003ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ff2:	4b10      	ldr	r3, [pc, #64]	; (8004034 <_sbrk+0x64>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d207      	bcs.n	8004010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004000:	f00a fe76 	bl	800ecf0 <__errno>
 8004004:	4603      	mov	r3, r0
 8004006:	220c      	movs	r2, #12
 8004008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800400a:	f04f 33ff 	mov.w	r3, #4294967295
 800400e:	e009      	b.n	8004024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004010:	4b08      	ldr	r3, [pc, #32]	; (8004034 <_sbrk+0x64>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004016:	4b07      	ldr	r3, [pc, #28]	; (8004034 <_sbrk+0x64>)
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4413      	add	r3, r2
 800401e:	4a05      	ldr	r2, [pc, #20]	; (8004034 <_sbrk+0x64>)
 8004020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004022:	68fb      	ldr	r3, [r7, #12]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	24050000 	.word	0x24050000
 8004030:	00000400 	.word	0x00000400
 8004034:	240016d8 	.word	0x240016d8
 8004038:	24001a88 	.word	0x24001a88

0800403c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004040:	4b32      	ldr	r3, [pc, #200]	; (800410c <SystemInit+0xd0>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004046:	4a31      	ldr	r2, [pc, #196]	; (800410c <SystemInit+0xd0>)
 8004048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800404c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004050:	4b2f      	ldr	r3, [pc, #188]	; (8004110 <SystemInit+0xd4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	2b06      	cmp	r3, #6
 800405a:	d807      	bhi.n	800406c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800405c:	4b2c      	ldr	r3, [pc, #176]	; (8004110 <SystemInit+0xd4>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f023 030f 	bic.w	r3, r3, #15
 8004064:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <SystemInit+0xd4>)
 8004066:	f043 0307 	orr.w	r3, r3, #7
 800406a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800406c:	4b29      	ldr	r3, [pc, #164]	; (8004114 <SystemInit+0xd8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a28      	ldr	r2, [pc, #160]	; (8004114 <SystemInit+0xd8>)
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004078:	4b26      	ldr	r3, [pc, #152]	; (8004114 <SystemInit+0xd8>)
 800407a:	2200      	movs	r2, #0
 800407c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800407e:	4b25      	ldr	r3, [pc, #148]	; (8004114 <SystemInit+0xd8>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	4924      	ldr	r1, [pc, #144]	; (8004114 <SystemInit+0xd8>)
 8004084:	4b24      	ldr	r3, [pc, #144]	; (8004118 <SystemInit+0xdc>)
 8004086:	4013      	ands	r3, r2
 8004088:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800408a:	4b21      	ldr	r3, [pc, #132]	; (8004110 <SystemInit+0xd4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004096:	4b1e      	ldr	r3, [pc, #120]	; (8004110 <SystemInit+0xd4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 030f 	bic.w	r3, r3, #15
 800409e:	4a1c      	ldr	r2, [pc, #112]	; (8004110 <SystemInit+0xd4>)
 80040a0:	f043 0307 	orr.w	r3, r3, #7
 80040a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80040a6:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <SystemInit+0xd8>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80040ac:	4b19      	ldr	r3, [pc, #100]	; (8004114 <SystemInit+0xd8>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80040b2:	4b18      	ldr	r3, [pc, #96]	; (8004114 <SystemInit+0xd8>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80040b8:	4b16      	ldr	r3, [pc, #88]	; (8004114 <SystemInit+0xd8>)
 80040ba:	4a18      	ldr	r2, [pc, #96]	; (800411c <SystemInit+0xe0>)
 80040bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80040be:	4b15      	ldr	r3, [pc, #84]	; (8004114 <SystemInit+0xd8>)
 80040c0:	4a17      	ldr	r2, [pc, #92]	; (8004120 <SystemInit+0xe4>)
 80040c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80040c4:	4b13      	ldr	r3, [pc, #76]	; (8004114 <SystemInit+0xd8>)
 80040c6:	4a17      	ldr	r2, [pc, #92]	; (8004124 <SystemInit+0xe8>)
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80040ca:	4b12      	ldr	r3, [pc, #72]	; (8004114 <SystemInit+0xd8>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80040d0:	4b10      	ldr	r3, [pc, #64]	; (8004114 <SystemInit+0xd8>)
 80040d2:	4a14      	ldr	r2, [pc, #80]	; (8004124 <SystemInit+0xe8>)
 80040d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80040d6:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <SystemInit+0xd8>)
 80040d8:	2200      	movs	r2, #0
 80040da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80040dc:	4b0d      	ldr	r3, [pc, #52]	; (8004114 <SystemInit+0xd8>)
 80040de:	4a11      	ldr	r2, [pc, #68]	; (8004124 <SystemInit+0xe8>)
 80040e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80040e2:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <SystemInit+0xd8>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80040e8:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <SystemInit+0xd8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a09      	ldr	r2, [pc, #36]	; (8004114 <SystemInit+0xd8>)
 80040ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80040f4:	4b07      	ldr	r3, [pc, #28]	; (8004114 <SystemInit+0xd8>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80040fa:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <SystemInit+0xec>)
 80040fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004100:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004102:	bf00      	nop
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	e000ed00 	.word	0xe000ed00
 8004110:	52002000 	.word	0x52002000
 8004114:	58024400 	.word	0x58024400
 8004118:	eaf6ed7f 	.word	0xeaf6ed7f
 800411c:	02020200 	.word	0x02020200
 8004120:	01ff0000 	.word	0x01ff0000
 8004124:	01010280 	.word	0x01010280
 8004128:	52004000 	.word	0x52004000

0800412c <MX_TIM2_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim23;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08c      	sub	sp, #48	; 0x30
 8004130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004132:	f107 030c 	add.w	r3, r7, #12
 8004136:	2224      	movs	r2, #36	; 0x24
 8004138:	2100      	movs	r1, #0
 800413a:	4618      	mov	r0, r3
 800413c:	f00a fe10 	bl	800ed60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004140:	463b      	mov	r3, r7
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	605a      	str	r2, [r3, #4]
 8004148:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800414a:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <MX_TIM2_Init+0xa4>)
 800414c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004150:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004152:	4b1f      	ldr	r3, [pc, #124]	; (80041d0 <MX_TIM2_Init+0xa4>)
 8004154:	2200      	movs	r2, #0
 8004156:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004158:	4b1d      	ldr	r3, [pc, #116]	; (80041d0 <MX_TIM2_Init+0xa4>)
 800415a:	2200      	movs	r2, #0
 800415c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800415e:	4b1c      	ldr	r3, [pc, #112]	; (80041d0 <MX_TIM2_Init+0xa4>)
 8004160:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004164:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004166:	4b1a      	ldr	r3, [pc, #104]	; (80041d0 <MX_TIM2_Init+0xa4>)
 8004168:	2200      	movs	r2, #0
 800416a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800416c:	4b18      	ldr	r3, [pc, #96]	; (80041d0 <MX_TIM2_Init+0xa4>)
 800416e:	2200      	movs	r2, #0
 8004170:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004172:	2303      	movs	r3, #3
 8004174:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004176:	2300      	movs	r3, #0
 8004178:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800417a:	2301      	movs	r3, #1
 800417c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800417e:	2300      	movs	r3, #0
 8004180:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004182:	2300      	movs	r3, #0
 8004184:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004186:	2300      	movs	r3, #0
 8004188:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800418a:	2301      	movs	r3, #1
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800418e:	2300      	movs	r3, #0
 8004190:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004196:	f107 030c 	add.w	r3, r7, #12
 800419a:	4619      	mov	r1, r3
 800419c:	480c      	ldr	r0, [pc, #48]	; (80041d0 <MX_TIM2_Init+0xa4>)
 800419e:	f007 fa0d 	bl	800b5bc <HAL_TIM_Encoder_Init>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80041a8:	f7fd f98c 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ac:	2300      	movs	r3, #0
 80041ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041b4:	463b      	mov	r3, r7
 80041b6:	4619      	mov	r1, r3
 80041b8:	4805      	ldr	r0, [pc, #20]	; (80041d0 <MX_TIM2_Init+0xa4>)
 80041ba:	f008 fac7 	bl	800c74c <HAL_TIMEx_MasterConfigSynchronization>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80041c4:	f7fd f97e 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80041c8:	bf00      	nop
 80041ca:	3730      	adds	r7, #48	; 0x30
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	240016dc 	.word	0x240016dc

080041d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08c      	sub	sp, #48	; 0x30
 80041d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80041da:	f107 030c 	add.w	r3, r7, #12
 80041de:	2224      	movs	r2, #36	; 0x24
 80041e0:	2100      	movs	r1, #0
 80041e2:	4618      	mov	r0, r3
 80041e4:	f00a fdbc 	bl	800ed60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041e8:	463b      	mov	r3, r7
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	605a      	str	r2, [r3, #4]
 80041f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80041f2:	4b21      	ldr	r3, [pc, #132]	; (8004278 <MX_TIM3_Init+0xa4>)
 80041f4:	4a21      	ldr	r2, [pc, #132]	; (800427c <MX_TIM3_Init+0xa8>)
 80041f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80041f8:	4b1f      	ldr	r3, [pc, #124]	; (8004278 <MX_TIM3_Init+0xa4>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041fe:	4b1e      	ldr	r3, [pc, #120]	; (8004278 <MX_TIM3_Init+0xa4>)
 8004200:	2200      	movs	r2, #0
 8004202:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004204:	4b1c      	ldr	r3, [pc, #112]	; (8004278 <MX_TIM3_Init+0xa4>)
 8004206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800420a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800420c:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <MX_TIM3_Init+0xa4>)
 800420e:	2200      	movs	r2, #0
 8004210:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004212:	4b19      	ldr	r3, [pc, #100]	; (8004278 <MX_TIM3_Init+0xa4>)
 8004214:	2200      	movs	r2, #0
 8004216:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004218:	2303      	movs	r3, #3
 800421a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004220:	2301      	movs	r3, #1
 8004222:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004224:	2300      	movs	r3, #0
 8004226:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800422c:	2300      	movs	r3, #0
 800422e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004230:	2301      	movs	r3, #1
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004234:	2300      	movs	r3, #0
 8004236:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800423c:	f107 030c 	add.w	r3, r7, #12
 8004240:	4619      	mov	r1, r3
 8004242:	480d      	ldr	r0, [pc, #52]	; (8004278 <MX_TIM3_Init+0xa4>)
 8004244:	f007 f9ba 	bl	800b5bc <HAL_TIM_Encoder_Init>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800424e:	f7fd f939 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004252:	2300      	movs	r3, #0
 8004254:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004256:	2300      	movs	r3, #0
 8004258:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800425a:	463b      	mov	r3, r7
 800425c:	4619      	mov	r1, r3
 800425e:	4806      	ldr	r0, [pc, #24]	; (8004278 <MX_TIM3_Init+0xa4>)
 8004260:	f008 fa74 	bl	800c74c <HAL_TIMEx_MasterConfigSynchronization>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800426a:	f7fd f92b 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800426e:	bf00      	nop
 8004270:	3730      	adds	r7, #48	; 0x30
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	24001728 	.word	0x24001728
 800427c:	40000400 	.word	0x40000400

08004280 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08c      	sub	sp, #48	; 0x30
 8004284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004286:	f107 030c 	add.w	r3, r7, #12
 800428a:	2224      	movs	r2, #36	; 0x24
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f00a fd66 	bl	800ed60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004294:	463b      	mov	r3, r7
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	605a      	str	r2, [r3, #4]
 800429c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800429e:	4b21      	ldr	r3, [pc, #132]	; (8004324 <MX_TIM4_Init+0xa4>)
 80042a0:	4a21      	ldr	r2, [pc, #132]	; (8004328 <MX_TIM4_Init+0xa8>)
 80042a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80042a4:	4b1f      	ldr	r3, [pc, #124]	; (8004324 <MX_TIM4_Init+0xa4>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042aa:	4b1e      	ldr	r3, [pc, #120]	; (8004324 <MX_TIM4_Init+0xa4>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80042b0:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <MX_TIM4_Init+0xa4>)
 80042b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042b8:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <MX_TIM4_Init+0xa4>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042be:	4b19      	ldr	r3, [pc, #100]	; (8004324 <MX_TIM4_Init+0xa4>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80042c4:	2303      	movs	r3, #3
 80042c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80042c8:	2300      	movs	r3, #0
 80042ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80042cc:	2301      	movs	r3, #1
 80042ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80042d8:	2300      	movs	r3, #0
 80042da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80042dc:	2301      	movs	r3, #1
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80042e0:	2300      	movs	r3, #0
 80042e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80042e8:	f107 030c 	add.w	r3, r7, #12
 80042ec:	4619      	mov	r1, r3
 80042ee:	480d      	ldr	r0, [pc, #52]	; (8004324 <MX_TIM4_Init+0xa4>)
 80042f0:	f007 f964 	bl	800b5bc <HAL_TIM_Encoder_Init>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80042fa:	f7fd f8e3 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042fe:	2300      	movs	r3, #0
 8004300:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004302:	2300      	movs	r3, #0
 8004304:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004306:	463b      	mov	r3, r7
 8004308:	4619      	mov	r1, r3
 800430a:	4806      	ldr	r0, [pc, #24]	; (8004324 <MX_TIM4_Init+0xa4>)
 800430c:	f008 fa1e 	bl	800c74c <HAL_TIMEx_MasterConfigSynchronization>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8004316:	f7fd f8d5 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800431a:	bf00      	nop
 800431c:	3730      	adds	r7, #48	; 0x30
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	24001774 	.word	0x24001774
 8004328:	40000800 	.word	0x40000800

0800432c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08c      	sub	sp, #48	; 0x30
 8004330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004332:	f107 030c 	add.w	r3, r7, #12
 8004336:	2224      	movs	r2, #36	; 0x24
 8004338:	2100      	movs	r1, #0
 800433a:	4618      	mov	r0, r3
 800433c:	f00a fd10 	bl	800ed60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004340:	463b      	mov	r3, r7
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	605a      	str	r2, [r3, #4]
 8004348:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800434a:	4b21      	ldr	r3, [pc, #132]	; (80043d0 <MX_TIM5_Init+0xa4>)
 800434c:	4a21      	ldr	r2, [pc, #132]	; (80043d4 <MX_TIM5_Init+0xa8>)
 800434e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004350:	4b1f      	ldr	r3, [pc, #124]	; (80043d0 <MX_TIM5_Init+0xa4>)
 8004352:	2200      	movs	r2, #0
 8004354:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004356:	4b1e      	ldr	r3, [pc, #120]	; (80043d0 <MX_TIM5_Init+0xa4>)
 8004358:	2200      	movs	r2, #0
 800435a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800435c:	4b1c      	ldr	r3, [pc, #112]	; (80043d0 <MX_TIM5_Init+0xa4>)
 800435e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004362:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004364:	4b1a      	ldr	r3, [pc, #104]	; (80043d0 <MX_TIM5_Init+0xa4>)
 8004366:	2200      	movs	r2, #0
 8004368:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800436a:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <MX_TIM5_Init+0xa4>)
 800436c:	2200      	movs	r2, #0
 800436e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004370:	2303      	movs	r3, #3
 8004372:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004374:	2300      	movs	r3, #0
 8004376:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004378:	2301      	movs	r3, #1
 800437a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800437c:	2300      	movs	r3, #0
 800437e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004380:	2300      	movs	r3, #0
 8004382:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004384:	2300      	movs	r3, #0
 8004386:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004388:	2301      	movs	r3, #1
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800438c:	2300      	movs	r3, #0
 800438e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8004394:	f107 030c 	add.w	r3, r7, #12
 8004398:	4619      	mov	r1, r3
 800439a:	480d      	ldr	r0, [pc, #52]	; (80043d0 <MX_TIM5_Init+0xa4>)
 800439c:	f007 f90e 	bl	800b5bc <HAL_TIM_Encoder_Init>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80043a6:	f7fd f88d 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043aa:	2300      	movs	r3, #0
 80043ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80043b2:	463b      	mov	r3, r7
 80043b4:	4619      	mov	r1, r3
 80043b6:	4806      	ldr	r0, [pc, #24]	; (80043d0 <MX_TIM5_Init+0xa4>)
 80043b8:	f008 f9c8 	bl	800c74c <HAL_TIMEx_MasterConfigSynchronization>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80043c2:	f7fd f87f 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80043c6:	bf00      	nop
 80043c8:	3730      	adds	r7, #48	; 0x30
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	240017c0 	.word	0x240017c0
 80043d4:	40000c00 	.word	0x40000c00

080043d8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08a      	sub	sp, #40	; 0x28
 80043dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043de:	f107 031c 	add.w	r3, r7, #28
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	605a      	str	r2, [r3, #4]
 80043e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043ea:	463b      	mov	r3, r7
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	605a      	str	r2, [r3, #4]
 80043f2:	609a      	str	r2, [r3, #8]
 80043f4:	60da      	str	r2, [r3, #12]
 80043f6:	611a      	str	r2, [r3, #16]
 80043f8:	615a      	str	r2, [r3, #20]
 80043fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80043fc:	4b27      	ldr	r3, [pc, #156]	; (800449c <MX_TIM12_Init+0xc4>)
 80043fe:	4a28      	ldr	r2, [pc, #160]	; (80044a0 <MX_TIM12_Init+0xc8>)
 8004400:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8004402:	4b26      	ldr	r3, [pc, #152]	; (800449c <MX_TIM12_Init+0xc4>)
 8004404:	2200      	movs	r2, #0
 8004406:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004408:	4b24      	ldr	r3, [pc, #144]	; (800449c <MX_TIM12_Init+0xc4>)
 800440a:	2200      	movs	r2, #0
 800440c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 3000;
 800440e:	4b23      	ldr	r3, [pc, #140]	; (800449c <MX_TIM12_Init+0xc4>)
 8004410:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004414:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004416:	4b21      	ldr	r3, [pc, #132]	; (800449c <MX_TIM12_Init+0xc4>)
 8004418:	2200      	movs	r2, #0
 800441a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800441c:	4b1f      	ldr	r3, [pc, #124]	; (800449c <MX_TIM12_Init+0xc4>)
 800441e:	2200      	movs	r2, #0
 8004420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004422:	481e      	ldr	r0, [pc, #120]	; (800449c <MX_TIM12_Init+0xc4>)
 8004424:	f006 ff56 	bl	800b2d4 <HAL_TIM_PWM_Init>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 800442e:	f7fd f849 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004436:	2300      	movs	r3, #0
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 800443a:	f107 031c 	add.w	r3, r7, #28
 800443e:	4619      	mov	r1, r3
 8004440:	4816      	ldr	r0, [pc, #88]	; (800449c <MX_TIM12_Init+0xc4>)
 8004442:	f008 f983 	bl	800c74c <HAL_TIMEx_MasterConfigSynchronization>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800444c:	f7fd f83a 	bl	80014c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004450:	2360      	movs	r3, #96	; 0x60
 8004452:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004458:	2300      	movs	r3, #0
 800445a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800445c:	2300      	movs	r3, #0
 800445e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004460:	463b      	mov	r3, r7
 8004462:	2200      	movs	r2, #0
 8004464:	4619      	mov	r1, r3
 8004466:	480d      	ldr	r0, [pc, #52]	; (800449c <MX_TIM12_Init+0xc4>)
 8004468:	f007 fafc 	bl	800ba64 <HAL_TIM_PWM_ConfigChannel>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 8004472:	f7fd f827 	bl	80014c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004476:	463b      	mov	r3, r7
 8004478:	2204      	movs	r2, #4
 800447a:	4619      	mov	r1, r3
 800447c:	4807      	ldr	r0, [pc, #28]	; (800449c <MX_TIM12_Init+0xc4>)
 800447e:	f007 faf1 	bl	800ba64 <HAL_TIM_PWM_ConfigChannel>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <MX_TIM12_Init+0xb4>
  {
    Error_Handler();
 8004488:	f7fd f81c 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800448c:	4803      	ldr	r0, [pc, #12]	; (800449c <MX_TIM12_Init+0xc4>)
 800448e:	f000 fa79 	bl	8004984 <HAL_TIM_MspPostInit>

}
 8004492:	bf00      	nop
 8004494:	3728      	adds	r7, #40	; 0x28
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	2400180c 	.word	0x2400180c
 80044a0:	40001800 	.word	0x40001800

080044a4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b098      	sub	sp, #96	; 0x60
 80044a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	605a      	str	r2, [r3, #4]
 80044b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	605a      	str	r2, [r3, #4]
 80044c0:	609a      	str	r2, [r3, #8]
 80044c2:	60da      	str	r2, [r3, #12]
 80044c4:	611a      	str	r2, [r3, #16]
 80044c6:	615a      	str	r2, [r3, #20]
 80044c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80044ca:	1d3b      	adds	r3, r7, #4
 80044cc:	2234      	movs	r2, #52	; 0x34
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f00a fc45 	bl	800ed60 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80044d6:	4b3a      	ldr	r3, [pc, #232]	; (80045c0 <MX_TIM15_Init+0x11c>)
 80044d8:	4a3a      	ldr	r2, [pc, #232]	; (80045c4 <MX_TIM15_Init+0x120>)
 80044da:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80044dc:	4b38      	ldr	r3, [pc, #224]	; (80045c0 <MX_TIM15_Init+0x11c>)
 80044de:	2200      	movs	r2, #0
 80044e0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044e2:	4b37      	ldr	r3, [pc, #220]	; (80045c0 <MX_TIM15_Init+0x11c>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3000;
 80044e8:	4b35      	ldr	r3, [pc, #212]	; (80045c0 <MX_TIM15_Init+0x11c>)
 80044ea:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80044ee:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044f0:	4b33      	ldr	r3, [pc, #204]	; (80045c0 <MX_TIM15_Init+0x11c>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80044f6:	4b32      	ldr	r3, [pc, #200]	; (80045c0 <MX_TIM15_Init+0x11c>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044fc:	4b30      	ldr	r3, [pc, #192]	; (80045c0 <MX_TIM15_Init+0x11c>)
 80044fe:	2200      	movs	r2, #0
 8004500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004502:	482f      	ldr	r0, [pc, #188]	; (80045c0 <MX_TIM15_Init+0x11c>)
 8004504:	f006 fee6 	bl	800b2d4 <HAL_TIM_PWM_Init>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800450e:	f7fc ffd9 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004512:	2300      	movs	r3, #0
 8004514:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004516:	2300      	movs	r3, #0
 8004518:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800451a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800451e:	4619      	mov	r1, r3
 8004520:	4827      	ldr	r0, [pc, #156]	; (80045c0 <MX_TIM15_Init+0x11c>)
 8004522:	f008 f913 	bl	800c74c <HAL_TIMEx_MasterConfigSynchronization>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800452c:	f7fc ffca 	bl	80014c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004530:	2360      	movs	r3, #96	; 0x60
 8004532:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004538:	2300      	movs	r3, #0
 800453a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800453c:	2300      	movs	r3, #0
 800453e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004540:	2300      	movs	r3, #0
 8004542:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004544:	2300      	movs	r3, #0
 8004546:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004548:	2300      	movs	r3, #0
 800454a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800454c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004550:	2200      	movs	r2, #0
 8004552:	4619      	mov	r1, r3
 8004554:	481a      	ldr	r0, [pc, #104]	; (80045c0 <MX_TIM15_Init+0x11c>)
 8004556:	f007 fa85 	bl	800ba64 <HAL_TIM_PWM_ConfigChannel>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8004560:	f7fc ffb0 	bl	80014c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004564:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004568:	2204      	movs	r2, #4
 800456a:	4619      	mov	r1, r3
 800456c:	4814      	ldr	r0, [pc, #80]	; (80045c0 <MX_TIM15_Init+0x11c>)
 800456e:	f007 fa79 	bl	800ba64 <HAL_TIM_PWM_ConfigChannel>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8004578:	f7fc ffa4 	bl	80014c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800457c:	2300      	movs	r3, #0
 800457e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004580:	2300      	movs	r3, #0
 8004582:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004594:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800459a:	2300      	movs	r3, #0
 800459c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800459e:	1d3b      	adds	r3, r7, #4
 80045a0:	4619      	mov	r1, r3
 80045a2:	4807      	ldr	r0, [pc, #28]	; (80045c0 <MX_TIM15_Init+0x11c>)
 80045a4:	f008 f96e 	bl	800c884 <HAL_TIMEx_ConfigBreakDeadTime>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80045ae:	f7fc ff89 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80045b2:	4803      	ldr	r0, [pc, #12]	; (80045c0 <MX_TIM15_Init+0x11c>)
 80045b4:	f000 f9e6 	bl	8004984 <HAL_TIM_MspPostInit>

}
 80045b8:	bf00      	nop
 80045ba:	3760      	adds	r7, #96	; 0x60
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	24001858 	.word	0x24001858
 80045c4:	40014000 	.word	0x40014000

080045c8 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045ce:	f107 0310 	add.w	r3, r7, #16
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	605a      	str	r2, [r3, #4]
 80045d8:	609a      	str	r2, [r3, #8]
 80045da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045dc:	1d3b      	adds	r3, r7, #4
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	605a      	str	r2, [r3, #4]
 80045e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80045e6:	4b1d      	ldr	r3, [pc, #116]	; (800465c <MX_TIM23_Init+0x94>)
 80045e8:	4a1d      	ldr	r2, [pc, #116]	; (8004660 <MX_TIM23_Init+0x98>)
 80045ea:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 13;
 80045ec:	4b1b      	ldr	r3, [pc, #108]	; (800465c <MX_TIM23_Init+0x94>)
 80045ee:	220d      	movs	r2, #13
 80045f0:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045f2:	4b1a      	ldr	r3, [pc, #104]	; (800465c <MX_TIM23_Init+0x94>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 11999;
 80045f8:	4b18      	ldr	r3, [pc, #96]	; (800465c <MX_TIM23_Init+0x94>)
 80045fa:	f642 62df 	movw	r2, #11999	; 0x2edf
 80045fe:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004600:	4b16      	ldr	r3, [pc, #88]	; (800465c <MX_TIM23_Init+0x94>)
 8004602:	2200      	movs	r2, #0
 8004604:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004606:	4b15      	ldr	r3, [pc, #84]	; (800465c <MX_TIM23_Init+0x94>)
 8004608:	2200      	movs	r2, #0
 800460a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 800460c:	4813      	ldr	r0, [pc, #76]	; (800465c <MX_TIM23_Init+0x94>)
 800460e:	f006 fd83 	bl	800b118 <HAL_TIM_Base_Init>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <MX_TIM23_Init+0x54>
  {
    Error_Handler();
 8004618:	f7fc ff54 	bl	80014c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800461c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004620:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8004622:	f107 0310 	add.w	r3, r7, #16
 8004626:	4619      	mov	r1, r3
 8004628:	480c      	ldr	r0, [pc, #48]	; (800465c <MX_TIM23_Init+0x94>)
 800462a:	f007 fb2f 	bl	800bc8c <HAL_TIM_ConfigClockSource>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <MX_TIM23_Init+0x70>
  {
    Error_Handler();
 8004634:	f7fc ff46 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004638:	2300      	movs	r3, #0
 800463a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8004640:	1d3b      	adds	r3, r7, #4
 8004642:	4619      	mov	r1, r3
 8004644:	4805      	ldr	r0, [pc, #20]	; (800465c <MX_TIM23_Init+0x94>)
 8004646:	f008 f881 	bl	800c74c <HAL_TIMEx_MasterConfigSynchronization>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <MX_TIM23_Init+0x8c>
  {
    Error_Handler();
 8004650:	f7fc ff38 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8004654:	bf00      	nop
 8004656:	3720      	adds	r7, #32
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	240018a4 	.word	0x240018a4
 8004660:	4000e000 	.word	0x4000e000

08004664 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b090      	sub	sp, #64	; 0x40
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800466c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	605a      	str	r2, [r3, #4]
 8004676:	609a      	str	r2, [r3, #8]
 8004678:	60da      	str	r2, [r3, #12]
 800467a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004684:	d156      	bne.n	8004734 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004686:	4b87      	ldr	r3, [pc, #540]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800468c:	4a85      	ldr	r2, [pc, #532]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004696:	4b83      	ldr	r3, [pc, #524]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046a4:	4b7f      	ldr	r3, [pc, #508]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 80046a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046aa:	4a7e      	ldr	r2, [pc, #504]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046b4:	4b7b      	ldr	r3, [pc, #492]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 80046b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046c2:	4b78      	ldr	r3, [pc, #480]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 80046c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046c8:	4a76      	ldr	r2, [pc, #472]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 80046ca:	f043 0302 	orr.w	r3, r3, #2
 80046ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046d2:	4b74      	ldr	r3, [pc, #464]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 80046d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	623b      	str	r3, [r7, #32]
 80046de:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80046e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e6:	2302      	movs	r3, #2
 80046e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ee:	2300      	movs	r3, #0
 80046f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80046f2:	2301      	movs	r3, #1
 80046f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046fa:	4619      	mov	r1, r3
 80046fc:	486a      	ldr	r0, [pc, #424]	; (80048a8 <HAL_TIM_Encoder_MspInit+0x244>)
 80046fe:	f003 fce5 	bl	80080cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004702:	2308      	movs	r3, #8
 8004704:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004706:	2302      	movs	r3, #2
 8004708:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470a:	2300      	movs	r3, #0
 800470c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800470e:	2300      	movs	r3, #0
 8004710:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004712:	2301      	movs	r3, #1
 8004714:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800471a:	4619      	mov	r1, r3
 800471c:	4863      	ldr	r0, [pc, #396]	; (80048ac <HAL_TIM_Encoder_MspInit+0x248>)
 800471e:	f003 fcd5 	bl	80080cc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004722:	2200      	movs	r2, #0
 8004724:	2100      	movs	r1, #0
 8004726:	201c      	movs	r0, #28
 8004728:	f000 fc9d 	bl	8005066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800472c:	201c      	movs	r0, #28
 800472e:	f000 fcb4 	bl	800509a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004732:	e0b3      	b.n	800489c <HAL_TIM_Encoder_MspInit+0x238>
  else if(tim_encoderHandle->Instance==TIM3)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a5d      	ldr	r2, [pc, #372]	; (80048b0 <HAL_TIM_Encoder_MspInit+0x24c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d136      	bne.n	80047ac <HAL_TIM_Encoder_MspInit+0x148>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800473e:	4b59      	ldr	r3, [pc, #356]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004744:	4a57      	ldr	r2, [pc, #348]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004746:	f043 0302 	orr.w	r3, r3, #2
 800474a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800474e:	4b55      	ldr	r3, [pc, #340]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800475c:	4b51      	ldr	r3, [pc, #324]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 800475e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004762:	4a50      	ldr	r2, [pc, #320]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004764:	f043 0302 	orr.w	r3, r3, #2
 8004768:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800476c:	4b4d      	ldr	r3, [pc, #308]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 800476e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	61bb      	str	r3, [r7, #24]
 8004778:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800477a:	2330      	movs	r3, #48	; 0x30
 800477c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477e:	2302      	movs	r3, #2
 8004780:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004782:	2300      	movs	r3, #0
 8004784:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004786:	2300      	movs	r3, #0
 8004788:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800478a:	2302      	movs	r3, #2
 800478c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800478e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004792:	4619      	mov	r1, r3
 8004794:	4845      	ldr	r0, [pc, #276]	; (80048ac <HAL_TIM_Encoder_MspInit+0x248>)
 8004796:	f003 fc99 	bl	80080cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800479a:	2200      	movs	r2, #0
 800479c:	2100      	movs	r1, #0
 800479e:	201d      	movs	r0, #29
 80047a0:	f000 fc61 	bl	8005066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80047a4:	201d      	movs	r0, #29
 80047a6:	f000 fc78 	bl	800509a <HAL_NVIC_EnableIRQ>
}
 80047aa:	e077      	b.n	800489c <HAL_TIM_Encoder_MspInit+0x238>
  else if(tim_encoderHandle->Instance==TIM4)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a40      	ldr	r2, [pc, #256]	; (80048b4 <HAL_TIM_Encoder_MspInit+0x250>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d137      	bne.n	8004826 <HAL_TIM_Encoder_MspInit+0x1c2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80047b6:	4b3b      	ldr	r3, [pc, #236]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 80047b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047bc:	4a39      	ldr	r2, [pc, #228]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 80047be:	f043 0304 	orr.w	r3, r3, #4
 80047c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80047c6:	4b37      	ldr	r3, [pc, #220]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 80047c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80047d4:	4b33      	ldr	r3, [pc, #204]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 80047d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047da:	4a32      	ldr	r2, [pc, #200]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 80047dc:	f043 0308 	orr.w	r3, r3, #8
 80047e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047e4:	4b2f      	ldr	r3, [pc, #188]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 80047e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80047f2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80047f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f8:	2302      	movs	r3, #2
 80047fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004800:	2300      	movs	r3, #0
 8004802:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004804:	2302      	movs	r3, #2
 8004806:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004808:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800480c:	4619      	mov	r1, r3
 800480e:	482a      	ldr	r0, [pc, #168]	; (80048b8 <HAL_TIM_Encoder_MspInit+0x254>)
 8004810:	f003 fc5c 	bl	80080cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004814:	2200      	movs	r2, #0
 8004816:	2100      	movs	r1, #0
 8004818:	201e      	movs	r0, #30
 800481a:	f000 fc24 	bl	8005066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800481e:	201e      	movs	r0, #30
 8004820:	f000 fc3b 	bl	800509a <HAL_NVIC_EnableIRQ>
}
 8004824:	e03a      	b.n	800489c <HAL_TIM_Encoder_MspInit+0x238>
  else if(tim_encoderHandle->Instance==TIM5)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a24      	ldr	r2, [pc, #144]	; (80048bc <HAL_TIM_Encoder_MspInit+0x258>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d135      	bne.n	800489c <HAL_TIM_Encoder_MspInit+0x238>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004830:	4b1c      	ldr	r3, [pc, #112]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004832:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004836:	4a1b      	ldr	r2, [pc, #108]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004838:	f043 0308 	orr.w	r3, r3, #8
 800483c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004840:	4b18      	ldr	r3, [pc, #96]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004842:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800484e:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004854:	4a13      	ldr	r2, [pc, #76]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800485e:	4b11      	ldr	r3, [pc, #68]	; (80048a4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800486c:	2303      	movs	r3, #3
 800486e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004870:	2302      	movs	r3, #2
 8004872:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004874:	2300      	movs	r3, #0
 8004876:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004878:	2300      	movs	r3, #0
 800487a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800487c:	2302      	movs	r3, #2
 800487e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004884:	4619      	mov	r1, r3
 8004886:	4808      	ldr	r0, [pc, #32]	; (80048a8 <HAL_TIM_Encoder_MspInit+0x244>)
 8004888:	f003 fc20 	bl	80080cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800488c:	2200      	movs	r2, #0
 800488e:	2100      	movs	r1, #0
 8004890:	2032      	movs	r0, #50	; 0x32
 8004892:	f000 fbe8 	bl	8005066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004896:	2032      	movs	r0, #50	; 0x32
 8004898:	f000 fbff 	bl	800509a <HAL_NVIC_EnableIRQ>
}
 800489c:	bf00      	nop
 800489e:	3740      	adds	r7, #64	; 0x40
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	58024400 	.word	0x58024400
 80048a8:	58020000 	.word	0x58020000
 80048ac:	58020400 	.word	0x58020400
 80048b0:	40000400 	.word	0x40000400
 80048b4:	40000800 	.word	0x40000800
 80048b8:	58020c00 	.word	0x58020c00
 80048bc:	40000c00 	.word	0x40000c00

080048c0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a16      	ldr	r2, [pc, #88]	; (8004928 <HAL_TIM_PWM_MspInit+0x68>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d10f      	bne.n	80048f2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80048d2:	4b16      	ldr	r3, [pc, #88]	; (800492c <HAL_TIM_PWM_MspInit+0x6c>)
 80048d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048d8:	4a14      	ldr	r2, [pc, #80]	; (800492c <HAL_TIM_PWM_MspInit+0x6c>)
 80048da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80048e2:	4b12      	ldr	r3, [pc, #72]	; (800492c <HAL_TIM_PWM_MspInit+0x6c>)
 80048e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80048f0:	e013      	b.n	800491a <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM15)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a0e      	ldr	r2, [pc, #56]	; (8004930 <HAL_TIM_PWM_MspInit+0x70>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d10e      	bne.n	800491a <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <HAL_TIM_PWM_MspInit+0x6c>)
 80048fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004902:	4a0a      	ldr	r2, [pc, #40]	; (800492c <HAL_TIM_PWM_MspInit+0x6c>)
 8004904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004908:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800490c:	4b07      	ldr	r3, [pc, #28]	; (800492c <HAL_TIM_PWM_MspInit+0x6c>)
 800490e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004916:	60bb      	str	r3, [r7, #8]
 8004918:	68bb      	ldr	r3, [r7, #8]
}
 800491a:	bf00      	nop
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40001800 	.word	0x40001800
 800492c:	58024400 	.word	0x58024400
 8004930:	40014000 	.word	0x40014000

08004934 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM23)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a0e      	ldr	r2, [pc, #56]	; (800497c <HAL_TIM_Base_MspInit+0x48>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d116      	bne.n	8004974 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* TIM23 clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 8004946:	4b0e      	ldr	r3, [pc, #56]	; (8004980 <HAL_TIM_Base_MspInit+0x4c>)
 8004948:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800494c:	4a0c      	ldr	r2, [pc, #48]	; (8004980 <HAL_TIM_Base_MspInit+0x4c>)
 800494e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004952:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004956:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <HAL_TIM_Base_MspInit+0x4c>)
 8004958:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800495c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	68fb      	ldr	r3, [r7, #12]

    /* TIM23 interrupt Init */
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8004964:	2200      	movs	r2, #0
 8004966:	2100      	movs	r1, #0
 8004968:	20a1      	movs	r0, #161	; 0xa1
 800496a:	f000 fb7c 	bl	8005066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 800496e:	20a1      	movs	r0, #161	; 0xa1
 8004970:	f000 fb93 	bl	800509a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }
}
 8004974:	bf00      	nop
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	4000e000 	.word	0x4000e000
 8004980:	58024400 	.word	0x58024400

08004984 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b08a      	sub	sp, #40	; 0x28
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800498c:	f107 0314 	add.w	r3, r7, #20
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	605a      	str	r2, [r3, #4]
 8004996:	609a      	str	r2, [r3, #8]
 8004998:	60da      	str	r2, [r3, #12]
 800499a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a25      	ldr	r2, [pc, #148]	; (8004a38 <HAL_TIM_MspPostInit+0xb4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d120      	bne.n	80049e8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049a6:	4b25      	ldr	r3, [pc, #148]	; (8004a3c <HAL_TIM_MspPostInit+0xb8>)
 80049a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049ac:	4a23      	ldr	r2, [pc, #140]	; (8004a3c <HAL_TIM_MspPostInit+0xb8>)
 80049ae:	f043 0302 	orr.w	r3, r3, #2
 80049b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049b6:	4b21      	ldr	r3, [pc, #132]	; (8004a3c <HAL_TIM_MspPostInit+0xb8>)
 80049b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80049c4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80049c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ca:	2302      	movs	r3, #2
 80049cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049d2:	2300      	movs	r3, #0
 80049d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80049d6:	2302      	movs	r3, #2
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049da:	f107 0314 	add.w	r3, r7, #20
 80049de:	4619      	mov	r1, r3
 80049e0:	4817      	ldr	r0, [pc, #92]	; (8004a40 <HAL_TIM_MspPostInit+0xbc>)
 80049e2:	f003 fb73 	bl	80080cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80049e6:	e023      	b.n	8004a30 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM15)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a15      	ldr	r2, [pc, #84]	; (8004a44 <HAL_TIM_MspPostInit+0xc0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d11e      	bne.n	8004a30 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80049f2:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <HAL_TIM_MspPostInit+0xb8>)
 80049f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049f8:	4a10      	ldr	r2, [pc, #64]	; (8004a3c <HAL_TIM_MspPostInit+0xb8>)
 80049fa:	f043 0310 	orr.w	r3, r3, #16
 80049fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a02:	4b0e      	ldr	r3, [pc, #56]	; (8004a3c <HAL_TIM_MspPostInit+0xb8>)
 8004a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004a10:	2360      	movs	r3, #96	; 0x60
 8004a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a14:	2302      	movs	r3, #2
 8004a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004a20:	2304      	movs	r3, #4
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a24:	f107 0314 	add.w	r3, r7, #20
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4807      	ldr	r0, [pc, #28]	; (8004a48 <HAL_TIM_MspPostInit+0xc4>)
 8004a2c:	f003 fb4e 	bl	80080cc <HAL_GPIO_Init>
}
 8004a30:	bf00      	nop
 8004a32:	3728      	adds	r7, #40	; 0x28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40001800 	.word	0x40001800
 8004a3c:	58024400 	.word	0x58024400
 8004a40:	58020400 	.word	0x58020400
 8004a44:	40014000 	.word	0x40014000
 8004a48:	58021000 	.word	0x58021000

08004a4c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004a50:	4b22      	ldr	r3, [pc, #136]	; (8004adc <MX_USART1_UART_Init+0x90>)
 8004a52:	4a23      	ldr	r2, [pc, #140]	; (8004ae0 <MX_USART1_UART_Init+0x94>)
 8004a54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004a56:	4b21      	ldr	r3, [pc, #132]	; (8004adc <MX_USART1_UART_Init+0x90>)
 8004a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a5e:	4b1f      	ldr	r3, [pc, #124]	; (8004adc <MX_USART1_UART_Init+0x90>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004a64:	4b1d      	ldr	r3, [pc, #116]	; (8004adc <MX_USART1_UART_Init+0x90>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004a6a:	4b1c      	ldr	r3, [pc, #112]	; (8004adc <MX_USART1_UART_Init+0x90>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004a70:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <MX_USART1_UART_Init+0x90>)
 8004a72:	220c      	movs	r2, #12
 8004a74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a76:	4b19      	ldr	r3, [pc, #100]	; (8004adc <MX_USART1_UART_Init+0x90>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a7c:	4b17      	ldr	r3, [pc, #92]	; (8004adc <MX_USART1_UART_Init+0x90>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a82:	4b16      	ldr	r3, [pc, #88]	; (8004adc <MX_USART1_UART_Init+0x90>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004a88:	4b14      	ldr	r3, [pc, #80]	; (8004adc <MX_USART1_UART_Init+0x90>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a8e:	4b13      	ldr	r3, [pc, #76]	; (8004adc <MX_USART1_UART_Init+0x90>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a94:	4811      	ldr	r0, [pc, #68]	; (8004adc <MX_USART1_UART_Init+0x90>)
 8004a96:	f007 ffb3 	bl	800ca00 <HAL_UART_Init>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004aa0:	f7fc fd10 	bl	80014c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	480d      	ldr	r0, [pc, #52]	; (8004adc <MX_USART1_UART_Init+0x90>)
 8004aa8:	f00a f83c 	bl	800eb24 <HAL_UARTEx_SetTxFifoThreshold>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004ab2:	f7fc fd07 	bl	80014c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	4808      	ldr	r0, [pc, #32]	; (8004adc <MX_USART1_UART_Init+0x90>)
 8004aba:	f00a f871 	bl	800eba0 <HAL_UARTEx_SetRxFifoThreshold>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004ac4:	f7fc fcfe 	bl	80014c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004ac8:	4804      	ldr	r0, [pc, #16]	; (8004adc <MX_USART1_UART_Init+0x90>)
 8004aca:	f009 fff2 	bl	800eab2 <HAL_UARTEx_DisableFifoMode>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004ad4:	f7fc fcf6 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ad8:	bf00      	nop
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	240018f0 	.word	0x240018f0
 8004ae0:	40011000 	.word	0x40011000

08004ae4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b0b8      	sub	sp, #224	; 0xe0
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	605a      	str	r2, [r3, #4]
 8004af6:	609a      	str	r2, [r3, #8]
 8004af8:	60da      	str	r2, [r3, #12]
 8004afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004afc:	f107 0310 	add.w	r3, r7, #16
 8004b00:	22b8      	movs	r2, #184	; 0xb8
 8004b02:	2100      	movs	r1, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	f00a f92b 	bl	800ed60 <memset>
  if(uartHandle->Instance==USART1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a5a      	ldr	r2, [pc, #360]	; (8004c78 <HAL_UART_MspInit+0x194>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	f040 80ad 	bne.w	8004c70 <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004b16:	f04f 0201 	mov.w	r2, #1
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004b22:	2300      	movs	r3, #0
 8004b24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b28:	f107 0310 	add.w	r3, r7, #16
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f004 fd31 	bl	8009594 <HAL_RCCEx_PeriphCLKConfig>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8004b38:	f7fc fcc4 	bl	80014c4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b3c:	4b4f      	ldr	r3, [pc, #316]	; (8004c7c <HAL_UART_MspInit+0x198>)
 8004b3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b42:	4a4e      	ldr	r2, [pc, #312]	; (8004c7c <HAL_UART_MspInit+0x198>)
 8004b44:	f043 0310 	orr.w	r3, r3, #16
 8004b48:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004b4c:	4b4b      	ldr	r3, [pc, #300]	; (8004c7c <HAL_UART_MspInit+0x198>)
 8004b4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b52:	f003 0310 	and.w	r3, r3, #16
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b5a:	4b48      	ldr	r3, [pc, #288]	; (8004c7c <HAL_UART_MspInit+0x198>)
 8004b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b60:	4a46      	ldr	r2, [pc, #280]	; (8004c7c <HAL_UART_MspInit+0x198>)
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b6a:	4b44      	ldr	r3, [pc, #272]	; (8004c7c <HAL_UART_MspInit+0x198>)
 8004b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004b78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004b7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b80:	2302      	movs	r3, #2
 8004b82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b92:	2307      	movs	r3, #7
 8004b94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4838      	ldr	r0, [pc, #224]	; (8004c80 <HAL_UART_MspInit+0x19c>)
 8004ba0:	f003 fa94 	bl	80080cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8004ba4:	4b37      	ldr	r3, [pc, #220]	; (8004c84 <HAL_UART_MspInit+0x1a0>)
 8004ba6:	4a38      	ldr	r2, [pc, #224]	; (8004c88 <HAL_UART_MspInit+0x1a4>)
 8004ba8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004baa:	4b36      	ldr	r3, [pc, #216]	; (8004c84 <HAL_UART_MspInit+0x1a0>)
 8004bac:	2229      	movs	r2, #41	; 0x29
 8004bae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bb0:	4b34      	ldr	r3, [pc, #208]	; (8004c84 <HAL_UART_MspInit+0x1a0>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bb6:	4b33      	ldr	r3, [pc, #204]	; (8004c84 <HAL_UART_MspInit+0x1a0>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bbc:	4b31      	ldr	r3, [pc, #196]	; (8004c84 <HAL_UART_MspInit+0x1a0>)
 8004bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bc2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bc4:	4b2f      	ldr	r3, [pc, #188]	; (8004c84 <HAL_UART_MspInit+0x1a0>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bca:	4b2e      	ldr	r3, [pc, #184]	; (8004c84 <HAL_UART_MspInit+0x1a0>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004bd0:	4b2c      	ldr	r3, [pc, #176]	; (8004c84 <HAL_UART_MspInit+0x1a0>)
 8004bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bd6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004bd8:	4b2a      	ldr	r3, [pc, #168]	; (8004c84 <HAL_UART_MspInit+0x1a0>)
 8004bda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bde:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004be0:	4b28      	ldr	r3, [pc, #160]	; (8004c84 <HAL_UART_MspInit+0x1a0>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004be6:	4827      	ldr	r0, [pc, #156]	; (8004c84 <HAL_UART_MspInit+0x1a0>)
 8004be8:	f000 fa80 	bl	80050ec <HAL_DMA_Init>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8004bf2:	f7fc fc67 	bl	80014c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a22      	ldr	r2, [pc, #136]	; (8004c84 <HAL_UART_MspInit+0x1a0>)
 8004bfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004bfe:	4a21      	ldr	r2, [pc, #132]	; (8004c84 <HAL_UART_MspInit+0x1a0>)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8004c04:	4b21      	ldr	r3, [pc, #132]	; (8004c8c <HAL_UART_MspInit+0x1a8>)
 8004c06:	4a22      	ldr	r2, [pc, #136]	; (8004c90 <HAL_UART_MspInit+0x1ac>)
 8004c08:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004c0a:	4b20      	ldr	r3, [pc, #128]	; (8004c8c <HAL_UART_MspInit+0x1a8>)
 8004c0c:	222a      	movs	r2, #42	; 0x2a
 8004c0e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c10:	4b1e      	ldr	r3, [pc, #120]	; (8004c8c <HAL_UART_MspInit+0x1a8>)
 8004c12:	2240      	movs	r2, #64	; 0x40
 8004c14:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c16:	4b1d      	ldr	r3, [pc, #116]	; (8004c8c <HAL_UART_MspInit+0x1a8>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c1c:	4b1b      	ldr	r3, [pc, #108]	; (8004c8c <HAL_UART_MspInit+0x1a8>)
 8004c1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c22:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c24:	4b19      	ldr	r3, [pc, #100]	; (8004c8c <HAL_UART_MspInit+0x1a8>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c2a:	4b18      	ldr	r3, [pc, #96]	; (8004c8c <HAL_UART_MspInit+0x1a8>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004c30:	4b16      	ldr	r3, [pc, #88]	; (8004c8c <HAL_UART_MspInit+0x1a8>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004c36:	4b15      	ldr	r3, [pc, #84]	; (8004c8c <HAL_UART_MspInit+0x1a8>)
 8004c38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c3c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c3e:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <HAL_UART_MspInit+0x1a8>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004c44:	4811      	ldr	r0, [pc, #68]	; (8004c8c <HAL_UART_MspInit+0x1a8>)
 8004c46:	f000 fa51 	bl	80050ec <HAL_DMA_Init>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8004c50:	f7fc fc38 	bl	80014c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a0d      	ldr	r2, [pc, #52]	; (8004c8c <HAL_UART_MspInit+0x1a8>)
 8004c58:	67da      	str	r2, [r3, #124]	; 0x7c
 8004c5a:	4a0c      	ldr	r2, [pc, #48]	; (8004c8c <HAL_UART_MspInit+0x1a8>)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004c60:	2200      	movs	r2, #0
 8004c62:	2100      	movs	r1, #0
 8004c64:	2025      	movs	r0, #37	; 0x25
 8004c66:	f000 f9fe 	bl	8005066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004c6a:	2025      	movs	r0, #37	; 0x25
 8004c6c:	f000 fa15 	bl	800509a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004c70:	bf00      	nop
 8004c72:	37e0      	adds	r7, #224	; 0xe0
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40011000 	.word	0x40011000
 8004c7c:	58024400 	.word	0x58024400
 8004c80:	58020000 	.word	0x58020000
 8004c84:	24001984 	.word	0x24001984
 8004c88:	40020010 	.word	0x40020010
 8004c8c:	240019fc 	.word	0x240019fc
 8004c90:	40020028 	.word	0x40020028

08004c94 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a10      	ldr	r2, [pc, #64]	; (8004ce4 <HAL_UART_MspDeInit+0x50>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d11a      	bne.n	8004cdc <HAL_UART_MspDeInit+0x48>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8004ca6:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <HAL_UART_MspDeInit+0x54>)
 8004ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cac:	4a0e      	ldr	r2, [pc, #56]	; (8004ce8 <HAL_UART_MspDeInit+0x54>)
 8004cae:	f023 0310 	bic.w	r3, r3, #16
 8004cb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8004cb6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004cba:	480c      	ldr	r0, [pc, #48]	; (8004cec <HAL_UART_MspDeInit+0x58>)
 8004cbc:	f003 fbae 	bl	800841c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fd6a 	bl	80057a0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fd65 	bl	80057a0 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8004cd6:	2025      	movs	r0, #37	; 0x25
 8004cd8:	f000 f9ed 	bl	80050b6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8004cdc:	bf00      	nop
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40011000 	.word	0x40011000
 8004ce8:	58024400 	.word	0x58024400
 8004cec:	58020000 	.word	0x58020000

08004cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004cf4:	f7ff f9a2 	bl	800403c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004cf8:	480c      	ldr	r0, [pc, #48]	; (8004d2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004cfa:	490d      	ldr	r1, [pc, #52]	; (8004d30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004cfc:	4a0d      	ldr	r2, [pc, #52]	; (8004d34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d00:	e002      	b.n	8004d08 <LoopCopyDataInit>

08004d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d06:	3304      	adds	r3, #4

08004d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d0c:	d3f9      	bcc.n	8004d02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d0e:	4a0a      	ldr	r2, [pc, #40]	; (8004d38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004d10:	4c0a      	ldr	r4, [pc, #40]	; (8004d3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d14:	e001      	b.n	8004d1a <LoopFillZerobss>

08004d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d18:	3204      	adds	r2, #4

08004d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d1c:	d3fb      	bcc.n	8004d16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004d1e:	f009 ffed 	bl	800ecfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d22:	f7fc fae9 	bl	80012f8 <main>
  bx  lr
 8004d26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004d28:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004d2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004d30:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8004d34:	0800f38c 	.word	0x0800f38c
  ldr r2, =_sbss
 8004d38:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8004d3c:	24001a88 	.word	0x24001a88

08004d40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d40:	e7fe      	b.n	8004d40 <ADC3_IRQHandler>
	...

08004d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d4a:	2003      	movs	r0, #3
 8004d4c:	f000 f980 	bl	8005050 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d50:	f004 fa4a 	bl	80091e8 <HAL_RCC_GetSysClockFreq>
 8004d54:	4602      	mov	r2, r0
 8004d56:	4b15      	ldr	r3, [pc, #84]	; (8004dac <HAL_Init+0x68>)
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	0a1b      	lsrs	r3, r3, #8
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	4913      	ldr	r1, [pc, #76]	; (8004db0 <HAL_Init+0x6c>)
 8004d62:	5ccb      	ldrb	r3, [r1, r3]
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d6e:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <HAL_Init+0x68>)
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	4a0e      	ldr	r2, [pc, #56]	; (8004db0 <HAL_Init+0x6c>)
 8004d78:	5cd3      	ldrb	r3, [r2, r3]
 8004d7a:	f003 031f 	and.w	r3, r3, #31
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
 8004d84:	4a0b      	ldr	r2, [pc, #44]	; (8004db4 <HAL_Init+0x70>)
 8004d86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d88:	4a0b      	ldr	r2, [pc, #44]	; (8004db8 <HAL_Init+0x74>)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d8e:	2000      	movs	r0, #0
 8004d90:	f000 f814 	bl	8004dbc <HAL_InitTick>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e002      	b.n	8004da4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004d9e:	f7ff f861 	bl	8003e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	58024400 	.word	0x58024400
 8004db0:	0800f338 	.word	0x0800f338
 8004db4:	24000004 	.word	0x24000004
 8004db8:	24000000 	.word	0x24000000

08004dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004dc4:	4b15      	ldr	r3, [pc, #84]	; (8004e1c <HAL_InitTick+0x60>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e021      	b.n	8004e14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004dd0:	4b13      	ldr	r3, [pc, #76]	; (8004e20 <HAL_InitTick+0x64>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <HAL_InitTick+0x60>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8004de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 f973 	bl	80050d2 <HAL_SYSTICK_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e00e      	b.n	8004e14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b0f      	cmp	r3, #15
 8004dfa:	d80a      	bhi.n	8004e12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	f04f 30ff 	mov.w	r0, #4294967295
 8004e04:	f000 f92f 	bl	8005066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e08:	4a06      	ldr	r2, [pc, #24]	; (8004e24 <HAL_InitTick+0x68>)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	e000      	b.n	8004e14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	2400000c 	.word	0x2400000c
 8004e20:	24000000 	.word	0x24000000
 8004e24:	24000008 	.word	0x24000008

08004e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <HAL_IncTick+0x20>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <HAL_IncTick+0x24>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4413      	add	r3, r2
 8004e38:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <HAL_IncTick+0x24>)
 8004e3a:	6013      	str	r3, [r2, #0]
}
 8004e3c:	bf00      	nop
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	2400000c 	.word	0x2400000c
 8004e4c:	24001a74 	.word	0x24001a74

08004e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  return uwTick;
 8004e54:	4b03      	ldr	r3, [pc, #12]	; (8004e64 <HAL_GetTick+0x14>)
 8004e56:	681b      	ldr	r3, [r3, #0]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	24001a74 	.word	0x24001a74

08004e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e84:	4013      	ands	r3, r2
 8004e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e90:	4b06      	ldr	r3, [pc, #24]	; (8004eac <__NVIC_SetPriorityGrouping+0x44>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e96:	4a04      	ldr	r2, [pc, #16]	; (8004ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	60d3      	str	r3, [r2, #12]
}
 8004e9c:	bf00      	nop
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	e000ed00 	.word	0xe000ed00
 8004eac:	05fa0000 	.word	0x05fa0000

08004eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004eb4:	4b04      	ldr	r3, [pc, #16]	; (8004ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	0a1b      	lsrs	r3, r3, #8
 8004eba:	f003 0307 	and.w	r3, r3, #7
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	e000ed00 	.word	0xe000ed00

08004ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	db0b      	blt.n	8004ef6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ede:	88fb      	ldrh	r3, [r7, #6]
 8004ee0:	f003 021f 	and.w	r2, r3, #31
 8004ee4:	4907      	ldr	r1, [pc, #28]	; (8004f04 <__NVIC_EnableIRQ+0x38>)
 8004ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	2001      	movs	r0, #1
 8004eee:	fa00 f202 	lsl.w	r2, r0, r2
 8004ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	e000e100 	.word	0xe000e100

08004f08 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	db12      	blt.n	8004f40 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f1a:	88fb      	ldrh	r3, [r7, #6]
 8004f1c:	f003 021f 	and.w	r2, r3, #31
 8004f20:	490a      	ldr	r1, [pc, #40]	; (8004f4c <__NVIC_DisableIRQ+0x44>)
 8004f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	2001      	movs	r0, #1
 8004f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f2e:	3320      	adds	r3, #32
 8004f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004f34:	f3bf 8f4f 	dsb	sy
}
 8004f38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f3a:	f3bf 8f6f 	isb	sy
}
 8004f3e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	e000e100 	.word	0xe000e100

08004f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	6039      	str	r1, [r7, #0]
 8004f5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	db0a      	blt.n	8004f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	490c      	ldr	r1, [pc, #48]	; (8004f9c <__NVIC_SetPriority+0x4c>)
 8004f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f6e:	0112      	lsls	r2, r2, #4
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	440b      	add	r3, r1
 8004f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f78:	e00a      	b.n	8004f90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	4908      	ldr	r1, [pc, #32]	; (8004fa0 <__NVIC_SetPriority+0x50>)
 8004f80:	88fb      	ldrh	r3, [r7, #6]
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	3b04      	subs	r3, #4
 8004f88:	0112      	lsls	r2, r2, #4
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	761a      	strb	r2, [r3, #24]
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	e000e100 	.word	0xe000e100
 8004fa0:	e000ed00 	.word	0xe000ed00

08004fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b089      	sub	sp, #36	; 0x24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f1c3 0307 	rsb	r3, r3, #7
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	bf28      	it	cs
 8004fc2:	2304      	movcs	r3, #4
 8004fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	3304      	adds	r3, #4
 8004fca:	2b06      	cmp	r3, #6
 8004fcc:	d902      	bls.n	8004fd4 <NVIC_EncodePriority+0x30>
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	3b03      	subs	r3, #3
 8004fd2:	e000      	b.n	8004fd6 <NVIC_EncodePriority+0x32>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	43da      	mvns	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	401a      	ands	r2, r3
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fec:	f04f 31ff 	mov.w	r1, #4294967295
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff6:	43d9      	mvns	r1, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ffc:	4313      	orrs	r3, r2
         );
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3724      	adds	r7, #36	; 0x24
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3b01      	subs	r3, #1
 8005018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800501c:	d301      	bcc.n	8005022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800501e:	2301      	movs	r3, #1
 8005020:	e00f      	b.n	8005042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005022:	4a0a      	ldr	r2, [pc, #40]	; (800504c <SysTick_Config+0x40>)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3b01      	subs	r3, #1
 8005028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800502a:	210f      	movs	r1, #15
 800502c:	f04f 30ff 	mov.w	r0, #4294967295
 8005030:	f7ff ff8e 	bl	8004f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005034:	4b05      	ldr	r3, [pc, #20]	; (800504c <SysTick_Config+0x40>)
 8005036:	2200      	movs	r2, #0
 8005038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800503a:	4b04      	ldr	r3, [pc, #16]	; (800504c <SysTick_Config+0x40>)
 800503c:	2207      	movs	r2, #7
 800503e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	e000e010 	.word	0xe000e010

08005050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff ff05 	bl	8004e68 <__NVIC_SetPriorityGrouping>
}
 800505e:	bf00      	nop
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b086      	sub	sp, #24
 800506a:	af00      	add	r7, sp, #0
 800506c:	4603      	mov	r3, r0
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	607a      	str	r2, [r7, #4]
 8005072:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005074:	f7ff ff1c 	bl	8004eb0 <__NVIC_GetPriorityGrouping>
 8005078:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	6978      	ldr	r0, [r7, #20]
 8005080:	f7ff ff90 	bl	8004fa4 <NVIC_EncodePriority>
 8005084:	4602      	mov	r2, r0
 8005086:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800508a:	4611      	mov	r1, r2
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff ff5f 	bl	8004f50 <__NVIC_SetPriority>
}
 8005092:	bf00      	nop
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	4603      	mov	r3, r0
 80050a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff ff0f 	bl	8004ecc <__NVIC_EnableIRQ>
}
 80050ae:	bf00      	nop
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	4603      	mov	r3, r0
 80050be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80050c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7ff ff1f 	bl	8004f08 <__NVIC_DisableIRQ>
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff ff96 	bl	800500c <SysTick_Config>
 80050e0:	4603      	mov	r3, r0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80050f4:	f7ff feac 	bl	8004e50 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e314      	b.n	800572e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a66      	ldr	r2, [pc, #408]	; (80052a4 <HAL_DMA_Init+0x1b8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d04a      	beq.n	80051a4 <HAL_DMA_Init+0xb8>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a65      	ldr	r2, [pc, #404]	; (80052a8 <HAL_DMA_Init+0x1bc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d045      	beq.n	80051a4 <HAL_DMA_Init+0xb8>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a63      	ldr	r2, [pc, #396]	; (80052ac <HAL_DMA_Init+0x1c0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d040      	beq.n	80051a4 <HAL_DMA_Init+0xb8>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a62      	ldr	r2, [pc, #392]	; (80052b0 <HAL_DMA_Init+0x1c4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d03b      	beq.n	80051a4 <HAL_DMA_Init+0xb8>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a60      	ldr	r2, [pc, #384]	; (80052b4 <HAL_DMA_Init+0x1c8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d036      	beq.n	80051a4 <HAL_DMA_Init+0xb8>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a5f      	ldr	r2, [pc, #380]	; (80052b8 <HAL_DMA_Init+0x1cc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d031      	beq.n	80051a4 <HAL_DMA_Init+0xb8>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a5d      	ldr	r2, [pc, #372]	; (80052bc <HAL_DMA_Init+0x1d0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d02c      	beq.n	80051a4 <HAL_DMA_Init+0xb8>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a5c      	ldr	r2, [pc, #368]	; (80052c0 <HAL_DMA_Init+0x1d4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d027      	beq.n	80051a4 <HAL_DMA_Init+0xb8>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a5a      	ldr	r2, [pc, #360]	; (80052c4 <HAL_DMA_Init+0x1d8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d022      	beq.n	80051a4 <HAL_DMA_Init+0xb8>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a59      	ldr	r2, [pc, #356]	; (80052c8 <HAL_DMA_Init+0x1dc>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d01d      	beq.n	80051a4 <HAL_DMA_Init+0xb8>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a57      	ldr	r2, [pc, #348]	; (80052cc <HAL_DMA_Init+0x1e0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d018      	beq.n	80051a4 <HAL_DMA_Init+0xb8>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a56      	ldr	r2, [pc, #344]	; (80052d0 <HAL_DMA_Init+0x1e4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d013      	beq.n	80051a4 <HAL_DMA_Init+0xb8>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a54      	ldr	r2, [pc, #336]	; (80052d4 <HAL_DMA_Init+0x1e8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00e      	beq.n	80051a4 <HAL_DMA_Init+0xb8>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a53      	ldr	r2, [pc, #332]	; (80052d8 <HAL_DMA_Init+0x1ec>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d009      	beq.n	80051a4 <HAL_DMA_Init+0xb8>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a51      	ldr	r2, [pc, #324]	; (80052dc <HAL_DMA_Init+0x1f0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d004      	beq.n	80051a4 <HAL_DMA_Init+0xb8>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a50      	ldr	r2, [pc, #320]	; (80052e0 <HAL_DMA_Init+0x1f4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d101      	bne.n	80051a8 <HAL_DMA_Init+0xbc>
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <HAL_DMA_Init+0xbe>
 80051a8:	2300      	movs	r3, #0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 813c 	beq.w	8005428 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a37      	ldr	r2, [pc, #220]	; (80052a4 <HAL_DMA_Init+0x1b8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d04a      	beq.n	8005260 <HAL_DMA_Init+0x174>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a36      	ldr	r2, [pc, #216]	; (80052a8 <HAL_DMA_Init+0x1bc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d045      	beq.n	8005260 <HAL_DMA_Init+0x174>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a34      	ldr	r2, [pc, #208]	; (80052ac <HAL_DMA_Init+0x1c0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d040      	beq.n	8005260 <HAL_DMA_Init+0x174>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a33      	ldr	r2, [pc, #204]	; (80052b0 <HAL_DMA_Init+0x1c4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d03b      	beq.n	8005260 <HAL_DMA_Init+0x174>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a31      	ldr	r2, [pc, #196]	; (80052b4 <HAL_DMA_Init+0x1c8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d036      	beq.n	8005260 <HAL_DMA_Init+0x174>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a30      	ldr	r2, [pc, #192]	; (80052b8 <HAL_DMA_Init+0x1cc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d031      	beq.n	8005260 <HAL_DMA_Init+0x174>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a2e      	ldr	r2, [pc, #184]	; (80052bc <HAL_DMA_Init+0x1d0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d02c      	beq.n	8005260 <HAL_DMA_Init+0x174>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a2d      	ldr	r2, [pc, #180]	; (80052c0 <HAL_DMA_Init+0x1d4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d027      	beq.n	8005260 <HAL_DMA_Init+0x174>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a2b      	ldr	r2, [pc, #172]	; (80052c4 <HAL_DMA_Init+0x1d8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d022      	beq.n	8005260 <HAL_DMA_Init+0x174>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a2a      	ldr	r2, [pc, #168]	; (80052c8 <HAL_DMA_Init+0x1dc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d01d      	beq.n	8005260 <HAL_DMA_Init+0x174>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a28      	ldr	r2, [pc, #160]	; (80052cc <HAL_DMA_Init+0x1e0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d018      	beq.n	8005260 <HAL_DMA_Init+0x174>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a27      	ldr	r2, [pc, #156]	; (80052d0 <HAL_DMA_Init+0x1e4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d013      	beq.n	8005260 <HAL_DMA_Init+0x174>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a25      	ldr	r2, [pc, #148]	; (80052d4 <HAL_DMA_Init+0x1e8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d00e      	beq.n	8005260 <HAL_DMA_Init+0x174>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a24      	ldr	r2, [pc, #144]	; (80052d8 <HAL_DMA_Init+0x1ec>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d009      	beq.n	8005260 <HAL_DMA_Init+0x174>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a22      	ldr	r2, [pc, #136]	; (80052dc <HAL_DMA_Init+0x1f0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d004      	beq.n	8005260 <HAL_DMA_Init+0x174>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a21      	ldr	r2, [pc, #132]	; (80052e0 <HAL_DMA_Init+0x1f4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d108      	bne.n	8005272 <HAL_DMA_Init+0x186>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0201 	bic.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e007      	b.n	8005282 <HAL_DMA_Init+0x196>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0201 	bic.w	r2, r2, #1
 8005280:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005282:	e02f      	b.n	80052e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005284:	f7ff fde4 	bl	8004e50 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b05      	cmp	r3, #5
 8005290:	d928      	bls.n	80052e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2220      	movs	r2, #32
 8005296:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2203      	movs	r2, #3
 800529c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e244      	b.n	800572e <HAL_DMA_Init+0x642>
 80052a4:	40020010 	.word	0x40020010
 80052a8:	40020028 	.word	0x40020028
 80052ac:	40020040 	.word	0x40020040
 80052b0:	40020058 	.word	0x40020058
 80052b4:	40020070 	.word	0x40020070
 80052b8:	40020088 	.word	0x40020088
 80052bc:	400200a0 	.word	0x400200a0
 80052c0:	400200b8 	.word	0x400200b8
 80052c4:	40020410 	.word	0x40020410
 80052c8:	40020428 	.word	0x40020428
 80052cc:	40020440 	.word	0x40020440
 80052d0:	40020458 	.word	0x40020458
 80052d4:	40020470 	.word	0x40020470
 80052d8:	40020488 	.word	0x40020488
 80052dc:	400204a0 	.word	0x400204a0
 80052e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1c8      	bne.n	8005284 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4b84      	ldr	r3, [pc, #528]	; (8005510 <HAL_DMA_Init+0x424>)
 80052fe:	4013      	ands	r3, r2
 8005300:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800530a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005316:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005322:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	2b04      	cmp	r3, #4
 8005336:	d107      	bne.n	8005348 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	4313      	orrs	r3, r2
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b28      	cmp	r3, #40	; 0x28
 800534e:	d903      	bls.n	8005358 <HAL_DMA_Init+0x26c>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b2e      	cmp	r3, #46	; 0x2e
 8005356:	d91f      	bls.n	8005398 <HAL_DMA_Init+0x2ac>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2b3e      	cmp	r3, #62	; 0x3e
 800535e:	d903      	bls.n	8005368 <HAL_DMA_Init+0x27c>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b42      	cmp	r3, #66	; 0x42
 8005366:	d917      	bls.n	8005398 <HAL_DMA_Init+0x2ac>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b46      	cmp	r3, #70	; 0x46
 800536e:	d903      	bls.n	8005378 <HAL_DMA_Init+0x28c>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b48      	cmp	r3, #72	; 0x48
 8005376:	d90f      	bls.n	8005398 <HAL_DMA_Init+0x2ac>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b4e      	cmp	r3, #78	; 0x4e
 800537e:	d903      	bls.n	8005388 <HAL_DMA_Init+0x29c>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	2b52      	cmp	r3, #82	; 0x52
 8005386:	d907      	bls.n	8005398 <HAL_DMA_Init+0x2ac>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b73      	cmp	r3, #115	; 0x73
 800538e:	d905      	bls.n	800539c <HAL_DMA_Init+0x2b0>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	2b77      	cmp	r3, #119	; 0x77
 8005396:	d801      	bhi.n	800539c <HAL_DMA_Init+0x2b0>
 8005398:	2301      	movs	r3, #1
 800539a:	e000      	b.n	800539e <HAL_DMA_Init+0x2b2>
 800539c:	2300      	movs	r3, #0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053a8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f023 0307 	bic.w	r3, r3, #7
 80053c0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d117      	bne.n	8005404 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00e      	beq.n	8005404 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f002 fce6 	bl	8007db8 <DMA_CheckFifoParam>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d008      	beq.n	8005404 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2240      	movs	r2, #64	; 0x40
 80053f6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e194      	b.n	800572e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f002 fc21 	bl	8007c54 <DMA_CalcBaseAndBitshift>
 8005412:	4603      	mov	r3, r0
 8005414:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541a:	f003 031f 	and.w	r3, r3, #31
 800541e:	223f      	movs	r2, #63	; 0x3f
 8005420:	409a      	lsls	r2, r3
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	609a      	str	r2, [r3, #8]
 8005426:	e0ca      	b.n	80055be <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a39      	ldr	r2, [pc, #228]	; (8005514 <HAL_DMA_Init+0x428>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d022      	beq.n	8005478 <HAL_DMA_Init+0x38c>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a38      	ldr	r2, [pc, #224]	; (8005518 <HAL_DMA_Init+0x42c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d01d      	beq.n	8005478 <HAL_DMA_Init+0x38c>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a36      	ldr	r2, [pc, #216]	; (800551c <HAL_DMA_Init+0x430>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d018      	beq.n	8005478 <HAL_DMA_Init+0x38c>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a35      	ldr	r2, [pc, #212]	; (8005520 <HAL_DMA_Init+0x434>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d013      	beq.n	8005478 <HAL_DMA_Init+0x38c>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a33      	ldr	r2, [pc, #204]	; (8005524 <HAL_DMA_Init+0x438>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00e      	beq.n	8005478 <HAL_DMA_Init+0x38c>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a32      	ldr	r2, [pc, #200]	; (8005528 <HAL_DMA_Init+0x43c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d009      	beq.n	8005478 <HAL_DMA_Init+0x38c>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a30      	ldr	r2, [pc, #192]	; (800552c <HAL_DMA_Init+0x440>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d004      	beq.n	8005478 <HAL_DMA_Init+0x38c>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a2f      	ldr	r2, [pc, #188]	; (8005530 <HAL_DMA_Init+0x444>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d101      	bne.n	800547c <HAL_DMA_Init+0x390>
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <HAL_DMA_Init+0x392>
 800547c:	2300      	movs	r3, #0
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 8094 	beq.w	80055ac <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a22      	ldr	r2, [pc, #136]	; (8005514 <HAL_DMA_Init+0x428>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d021      	beq.n	80054d2 <HAL_DMA_Init+0x3e6>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a21      	ldr	r2, [pc, #132]	; (8005518 <HAL_DMA_Init+0x42c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d01c      	beq.n	80054d2 <HAL_DMA_Init+0x3e6>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a1f      	ldr	r2, [pc, #124]	; (800551c <HAL_DMA_Init+0x430>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d017      	beq.n	80054d2 <HAL_DMA_Init+0x3e6>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a1e      	ldr	r2, [pc, #120]	; (8005520 <HAL_DMA_Init+0x434>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d012      	beq.n	80054d2 <HAL_DMA_Init+0x3e6>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1c      	ldr	r2, [pc, #112]	; (8005524 <HAL_DMA_Init+0x438>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00d      	beq.n	80054d2 <HAL_DMA_Init+0x3e6>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1b      	ldr	r2, [pc, #108]	; (8005528 <HAL_DMA_Init+0x43c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d008      	beq.n	80054d2 <HAL_DMA_Init+0x3e6>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a19      	ldr	r2, [pc, #100]	; (800552c <HAL_DMA_Init+0x440>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d003      	beq.n	80054d2 <HAL_DMA_Init+0x3e6>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a18      	ldr	r2, [pc, #96]	; (8005530 <HAL_DMA_Init+0x444>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4b11      	ldr	r3, [pc, #68]	; (8005534 <HAL_DMA_Init+0x448>)
 80054f0:	4013      	ands	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	2b40      	cmp	r3, #64	; 0x40
 80054fa:	d01d      	beq.n	8005538 <HAL_DMA_Init+0x44c>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b80      	cmp	r3, #128	; 0x80
 8005502:	d102      	bne.n	800550a <HAL_DMA_Init+0x41e>
 8005504:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005508:	e017      	b.n	800553a <HAL_DMA_Init+0x44e>
 800550a:	2300      	movs	r3, #0
 800550c:	e015      	b.n	800553a <HAL_DMA_Init+0x44e>
 800550e:	bf00      	nop
 8005510:	fe10803f 	.word	0xfe10803f
 8005514:	58025408 	.word	0x58025408
 8005518:	5802541c 	.word	0x5802541c
 800551c:	58025430 	.word	0x58025430
 8005520:	58025444 	.word	0x58025444
 8005524:	58025458 	.word	0x58025458
 8005528:	5802546c 	.word	0x5802546c
 800552c:	58025480 	.word	0x58025480
 8005530:	58025494 	.word	0x58025494
 8005534:	fffe000f 	.word	0xfffe000f
 8005538:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	68d2      	ldr	r2, [r2, #12]
 800553e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005540:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005548:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005550:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005558:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005560:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005568:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4313      	orrs	r3, r2
 800556e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	461a      	mov	r2, r3
 800557e:	4b6e      	ldr	r3, [pc, #440]	; (8005738 <HAL_DMA_Init+0x64c>)
 8005580:	4413      	add	r3, r2
 8005582:	4a6e      	ldr	r2, [pc, #440]	; (800573c <HAL_DMA_Init+0x650>)
 8005584:	fba2 2303 	umull	r2, r3, r2, r3
 8005588:	091b      	lsrs	r3, r3, #4
 800558a:	009a      	lsls	r2, r3, #2
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f002 fb5f 	bl	8007c54 <DMA_CalcBaseAndBitshift>
 8005596:	4603      	mov	r3, r0
 8005598:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800559e:	f003 031f 	and.w	r3, r3, #31
 80055a2:	2201      	movs	r2, #1
 80055a4:	409a      	lsls	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	605a      	str	r2, [r3, #4]
 80055aa:	e008      	b.n	80055be <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2240      	movs	r2, #64	; 0x40
 80055b0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2203      	movs	r2, #3
 80055b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e0b7      	b.n	800572e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a5f      	ldr	r2, [pc, #380]	; (8005740 <HAL_DMA_Init+0x654>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d072      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a5d      	ldr	r2, [pc, #372]	; (8005744 <HAL_DMA_Init+0x658>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d06d      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a5c      	ldr	r2, [pc, #368]	; (8005748 <HAL_DMA_Init+0x65c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d068      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a5a      	ldr	r2, [pc, #360]	; (800574c <HAL_DMA_Init+0x660>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d063      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a59      	ldr	r2, [pc, #356]	; (8005750 <HAL_DMA_Init+0x664>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d05e      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a57      	ldr	r2, [pc, #348]	; (8005754 <HAL_DMA_Init+0x668>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d059      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a56      	ldr	r2, [pc, #344]	; (8005758 <HAL_DMA_Init+0x66c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d054      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a54      	ldr	r2, [pc, #336]	; (800575c <HAL_DMA_Init+0x670>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d04f      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a53      	ldr	r2, [pc, #332]	; (8005760 <HAL_DMA_Init+0x674>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d04a      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a51      	ldr	r2, [pc, #324]	; (8005764 <HAL_DMA_Init+0x678>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d045      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a50      	ldr	r2, [pc, #320]	; (8005768 <HAL_DMA_Init+0x67c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d040      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a4e      	ldr	r2, [pc, #312]	; (800576c <HAL_DMA_Init+0x680>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d03b      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a4d      	ldr	r2, [pc, #308]	; (8005770 <HAL_DMA_Init+0x684>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d036      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a4b      	ldr	r2, [pc, #300]	; (8005774 <HAL_DMA_Init+0x688>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d031      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a4a      	ldr	r2, [pc, #296]	; (8005778 <HAL_DMA_Init+0x68c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d02c      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a48      	ldr	r2, [pc, #288]	; (800577c <HAL_DMA_Init+0x690>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d027      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a47      	ldr	r2, [pc, #284]	; (8005780 <HAL_DMA_Init+0x694>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d022      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a45      	ldr	r2, [pc, #276]	; (8005784 <HAL_DMA_Init+0x698>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01d      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a44      	ldr	r2, [pc, #272]	; (8005788 <HAL_DMA_Init+0x69c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d018      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a42      	ldr	r2, [pc, #264]	; (800578c <HAL_DMA_Init+0x6a0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d013      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a41      	ldr	r2, [pc, #260]	; (8005790 <HAL_DMA_Init+0x6a4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00e      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a3f      	ldr	r2, [pc, #252]	; (8005794 <HAL_DMA_Init+0x6a8>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d009      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a3e      	ldr	r2, [pc, #248]	; (8005798 <HAL_DMA_Init+0x6ac>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d004      	beq.n	80056ae <HAL_DMA_Init+0x5c2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a3c      	ldr	r2, [pc, #240]	; (800579c <HAL_DMA_Init+0x6b0>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d101      	bne.n	80056b2 <HAL_DMA_Init+0x5c6>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <HAL_DMA_Init+0x5c8>
 80056b2:	2300      	movs	r3, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d032      	beq.n	800571e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f002 fbf9 	bl	8007eb0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	2b80      	cmp	r3, #128	; 0x80
 80056c4:	d102      	bne.n	80056cc <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80056e0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d010      	beq.n	800570c <HAL_DMA_Init+0x620>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2b08      	cmp	r3, #8
 80056f0:	d80c      	bhi.n	800570c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f002 fc76 	bl	8007fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005708:	605a      	str	r2, [r3, #4]
 800570a:	e008      	b.n	800571e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3718      	adds	r7, #24
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	a7fdabf8 	.word	0xa7fdabf8
 800573c:	cccccccd 	.word	0xcccccccd
 8005740:	40020010 	.word	0x40020010
 8005744:	40020028 	.word	0x40020028
 8005748:	40020040 	.word	0x40020040
 800574c:	40020058 	.word	0x40020058
 8005750:	40020070 	.word	0x40020070
 8005754:	40020088 	.word	0x40020088
 8005758:	400200a0 	.word	0x400200a0
 800575c:	400200b8 	.word	0x400200b8
 8005760:	40020410 	.word	0x40020410
 8005764:	40020428 	.word	0x40020428
 8005768:	40020440 	.word	0x40020440
 800576c:	40020458 	.word	0x40020458
 8005770:	40020470 	.word	0x40020470
 8005774:	40020488 	.word	0x40020488
 8005778:	400204a0 	.word	0x400204a0
 800577c:	400204b8 	.word	0x400204b8
 8005780:	58025408 	.word	0x58025408
 8005784:	5802541c 	.word	0x5802541c
 8005788:	58025430 	.word	0x58025430
 800578c:	58025444 	.word	0x58025444
 8005790:	58025458 	.word	0x58025458
 8005794:	5802546c 	.word	0x5802546c
 8005798:	58025480 	.word	0x58025480
 800579c:	58025494 	.word	0x58025494

080057a0 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e1a8      	b.n	8005b04 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a82      	ldr	r2, [pc, #520]	; (80059c0 <HAL_DMA_DeInit+0x220>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d04a      	beq.n	8005852 <HAL_DMA_DeInit+0xb2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a80      	ldr	r2, [pc, #512]	; (80059c4 <HAL_DMA_DeInit+0x224>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d045      	beq.n	8005852 <HAL_DMA_DeInit+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a7f      	ldr	r2, [pc, #508]	; (80059c8 <HAL_DMA_DeInit+0x228>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d040      	beq.n	8005852 <HAL_DMA_DeInit+0xb2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a7d      	ldr	r2, [pc, #500]	; (80059cc <HAL_DMA_DeInit+0x22c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d03b      	beq.n	8005852 <HAL_DMA_DeInit+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a7c      	ldr	r2, [pc, #496]	; (80059d0 <HAL_DMA_DeInit+0x230>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d036      	beq.n	8005852 <HAL_DMA_DeInit+0xb2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a7a      	ldr	r2, [pc, #488]	; (80059d4 <HAL_DMA_DeInit+0x234>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d031      	beq.n	8005852 <HAL_DMA_DeInit+0xb2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a79      	ldr	r2, [pc, #484]	; (80059d8 <HAL_DMA_DeInit+0x238>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d02c      	beq.n	8005852 <HAL_DMA_DeInit+0xb2>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a77      	ldr	r2, [pc, #476]	; (80059dc <HAL_DMA_DeInit+0x23c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d027      	beq.n	8005852 <HAL_DMA_DeInit+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a76      	ldr	r2, [pc, #472]	; (80059e0 <HAL_DMA_DeInit+0x240>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d022      	beq.n	8005852 <HAL_DMA_DeInit+0xb2>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a74      	ldr	r2, [pc, #464]	; (80059e4 <HAL_DMA_DeInit+0x244>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d01d      	beq.n	8005852 <HAL_DMA_DeInit+0xb2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a73      	ldr	r2, [pc, #460]	; (80059e8 <HAL_DMA_DeInit+0x248>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d018      	beq.n	8005852 <HAL_DMA_DeInit+0xb2>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a71      	ldr	r2, [pc, #452]	; (80059ec <HAL_DMA_DeInit+0x24c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d013      	beq.n	8005852 <HAL_DMA_DeInit+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a70      	ldr	r2, [pc, #448]	; (80059f0 <HAL_DMA_DeInit+0x250>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00e      	beq.n	8005852 <HAL_DMA_DeInit+0xb2>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a6e      	ldr	r2, [pc, #440]	; (80059f4 <HAL_DMA_DeInit+0x254>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d009      	beq.n	8005852 <HAL_DMA_DeInit+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a6d      	ldr	r2, [pc, #436]	; (80059f8 <HAL_DMA_DeInit+0x258>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d004      	beq.n	8005852 <HAL_DMA_DeInit+0xb2>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a6b      	ldr	r2, [pc, #428]	; (80059fc <HAL_DMA_DeInit+0x25c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d108      	bne.n	8005864 <HAL_DMA_DeInit+0xc4>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0201 	bic.w	r2, r2, #1
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	e007      	b.n	8005874 <HAL_DMA_DeInit+0xd4>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0201 	bic.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a51      	ldr	r2, [pc, #324]	; (80059c0 <HAL_DMA_DeInit+0x220>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d04a      	beq.n	8005914 <HAL_DMA_DeInit+0x174>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a50      	ldr	r2, [pc, #320]	; (80059c4 <HAL_DMA_DeInit+0x224>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d045      	beq.n	8005914 <HAL_DMA_DeInit+0x174>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a4e      	ldr	r2, [pc, #312]	; (80059c8 <HAL_DMA_DeInit+0x228>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d040      	beq.n	8005914 <HAL_DMA_DeInit+0x174>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a4d      	ldr	r2, [pc, #308]	; (80059cc <HAL_DMA_DeInit+0x22c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d03b      	beq.n	8005914 <HAL_DMA_DeInit+0x174>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a4b      	ldr	r2, [pc, #300]	; (80059d0 <HAL_DMA_DeInit+0x230>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d036      	beq.n	8005914 <HAL_DMA_DeInit+0x174>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a4a      	ldr	r2, [pc, #296]	; (80059d4 <HAL_DMA_DeInit+0x234>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d031      	beq.n	8005914 <HAL_DMA_DeInit+0x174>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a48      	ldr	r2, [pc, #288]	; (80059d8 <HAL_DMA_DeInit+0x238>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d02c      	beq.n	8005914 <HAL_DMA_DeInit+0x174>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a47      	ldr	r2, [pc, #284]	; (80059dc <HAL_DMA_DeInit+0x23c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d027      	beq.n	8005914 <HAL_DMA_DeInit+0x174>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a45      	ldr	r2, [pc, #276]	; (80059e0 <HAL_DMA_DeInit+0x240>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d022      	beq.n	8005914 <HAL_DMA_DeInit+0x174>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a44      	ldr	r2, [pc, #272]	; (80059e4 <HAL_DMA_DeInit+0x244>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d01d      	beq.n	8005914 <HAL_DMA_DeInit+0x174>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a42      	ldr	r2, [pc, #264]	; (80059e8 <HAL_DMA_DeInit+0x248>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d018      	beq.n	8005914 <HAL_DMA_DeInit+0x174>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a41      	ldr	r2, [pc, #260]	; (80059ec <HAL_DMA_DeInit+0x24c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d013      	beq.n	8005914 <HAL_DMA_DeInit+0x174>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a3f      	ldr	r2, [pc, #252]	; (80059f0 <HAL_DMA_DeInit+0x250>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00e      	beq.n	8005914 <HAL_DMA_DeInit+0x174>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a3e      	ldr	r2, [pc, #248]	; (80059f4 <HAL_DMA_DeInit+0x254>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d009      	beq.n	8005914 <HAL_DMA_DeInit+0x174>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a3c      	ldr	r2, [pc, #240]	; (80059f8 <HAL_DMA_DeInit+0x258>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d004      	beq.n	8005914 <HAL_DMA_DeInit+0x174>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a3b      	ldr	r2, [pc, #236]	; (80059fc <HAL_DMA_DeInit+0x25c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d101      	bne.n	8005918 <HAL_DMA_DeInit+0x178>
 8005914:	2301      	movs	r3, #1
 8005916:	e000      	b.n	800591a <HAL_DMA_DeInit+0x17a>
 8005918:	2300      	movs	r3, #0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d025      	beq.n	800596a <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2200      	movs	r2, #0
 800592c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2200      	movs	r2, #0
 8005934:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2200      	movs	r2, #0
 800593c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2200      	movs	r2, #0
 8005944:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2221      	movs	r2, #33	; 0x21
 800594c:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f002 f980 	bl	8007c54 <DMA_CalcBaseAndBitshift>
 8005954:	4603      	mov	r3, r0
 8005956:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	223f      	movs	r2, #63	; 0x3f
 8005962:	409a      	lsls	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	609a      	str	r2, [r3, #8]
 8005968:	e081      	b.n	8005a6e <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a24      	ldr	r2, [pc, #144]	; (8005a00 <HAL_DMA_DeInit+0x260>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d022      	beq.n	80059ba <HAL_DMA_DeInit+0x21a>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a22      	ldr	r2, [pc, #136]	; (8005a04 <HAL_DMA_DeInit+0x264>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d01d      	beq.n	80059ba <HAL_DMA_DeInit+0x21a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a21      	ldr	r2, [pc, #132]	; (8005a08 <HAL_DMA_DeInit+0x268>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d018      	beq.n	80059ba <HAL_DMA_DeInit+0x21a>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1f      	ldr	r2, [pc, #124]	; (8005a0c <HAL_DMA_DeInit+0x26c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <HAL_DMA_DeInit+0x21a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1e      	ldr	r2, [pc, #120]	; (8005a10 <HAL_DMA_DeInit+0x270>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00e      	beq.n	80059ba <HAL_DMA_DeInit+0x21a>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1c      	ldr	r2, [pc, #112]	; (8005a14 <HAL_DMA_DeInit+0x274>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d009      	beq.n	80059ba <HAL_DMA_DeInit+0x21a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a1b      	ldr	r2, [pc, #108]	; (8005a18 <HAL_DMA_DeInit+0x278>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d004      	beq.n	80059ba <HAL_DMA_DeInit+0x21a>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a19      	ldr	r2, [pc, #100]	; (8005a1c <HAL_DMA_DeInit+0x27c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d132      	bne.n	8005a20 <HAL_DMA_DeInit+0x280>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e031      	b.n	8005a22 <HAL_DMA_DeInit+0x282>
 80059be:	bf00      	nop
 80059c0:	40020010 	.word	0x40020010
 80059c4:	40020028 	.word	0x40020028
 80059c8:	40020040 	.word	0x40020040
 80059cc:	40020058 	.word	0x40020058
 80059d0:	40020070 	.word	0x40020070
 80059d4:	40020088 	.word	0x40020088
 80059d8:	400200a0 	.word	0x400200a0
 80059dc:	400200b8 	.word	0x400200b8
 80059e0:	40020410 	.word	0x40020410
 80059e4:	40020428 	.word	0x40020428
 80059e8:	40020440 	.word	0x40020440
 80059ec:	40020458 	.word	0x40020458
 80059f0:	40020470 	.word	0x40020470
 80059f4:	40020488 	.word	0x40020488
 80059f8:	400204a0 	.word	0x400204a0
 80059fc:	400204b8 	.word	0x400204b8
 8005a00:	58025408 	.word	0x58025408
 8005a04:	5802541c 	.word	0x5802541c
 8005a08:	58025430 	.word	0x58025430
 8005a0c:	58025444 	.word	0x58025444
 8005a10:	58025458 	.word	0x58025458
 8005a14:	5802546c 	.word	0x5802546c
 8005a18:	58025480 	.word	0x58025480
 8005a1c:	58025494 	.word	0x58025494
 8005a20:	2300      	movs	r3, #0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d021      	beq.n	8005a6a <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2200      	movs	r2, #0
 8005a34:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2200      	movs	r2, #0
 8005a44:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f002 f900 	bl	8007c54 <DMA_CalcBaseAndBitshift>
 8005a54:	4603      	mov	r3, r0
 8005a56:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a5c:	f003 031f 	and.w	r3, r3, #31
 8005a60:	2201      	movs	r2, #1
 8005a62:	409a      	lsls	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	605a      	str	r2, [r3, #4]
 8005a68:	e001      	b.n	8005a6e <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e04a      	b.n	8005b04 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f002 fa1e 	bl	8007eb0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a8c:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00f      	beq.n	8005ab6 <HAL_DMA_DeInit+0x316>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d80b      	bhi.n	8005ab6 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f002 faa0 	bl	8007fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ab4:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e226      	b.n	8005f76 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d101      	bne.n	8005b36 <HAL_DMA_Start_IT+0x2a>
 8005b32:	2302      	movs	r3, #2
 8005b34:	e21f      	b.n	8005f76 <HAL_DMA_Start_IT+0x46a>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	f040 820a 	bne.w	8005f60 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a68      	ldr	r2, [pc, #416]	; (8005d00 <HAL_DMA_Start_IT+0x1f4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d04a      	beq.n	8005bfa <HAL_DMA_Start_IT+0xee>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a66      	ldr	r2, [pc, #408]	; (8005d04 <HAL_DMA_Start_IT+0x1f8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d045      	beq.n	8005bfa <HAL_DMA_Start_IT+0xee>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a65      	ldr	r2, [pc, #404]	; (8005d08 <HAL_DMA_Start_IT+0x1fc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d040      	beq.n	8005bfa <HAL_DMA_Start_IT+0xee>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a63      	ldr	r2, [pc, #396]	; (8005d0c <HAL_DMA_Start_IT+0x200>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d03b      	beq.n	8005bfa <HAL_DMA_Start_IT+0xee>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a62      	ldr	r2, [pc, #392]	; (8005d10 <HAL_DMA_Start_IT+0x204>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d036      	beq.n	8005bfa <HAL_DMA_Start_IT+0xee>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a60      	ldr	r2, [pc, #384]	; (8005d14 <HAL_DMA_Start_IT+0x208>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d031      	beq.n	8005bfa <HAL_DMA_Start_IT+0xee>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a5f      	ldr	r2, [pc, #380]	; (8005d18 <HAL_DMA_Start_IT+0x20c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d02c      	beq.n	8005bfa <HAL_DMA_Start_IT+0xee>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a5d      	ldr	r2, [pc, #372]	; (8005d1c <HAL_DMA_Start_IT+0x210>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d027      	beq.n	8005bfa <HAL_DMA_Start_IT+0xee>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a5c      	ldr	r2, [pc, #368]	; (8005d20 <HAL_DMA_Start_IT+0x214>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d022      	beq.n	8005bfa <HAL_DMA_Start_IT+0xee>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a5a      	ldr	r2, [pc, #360]	; (8005d24 <HAL_DMA_Start_IT+0x218>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d01d      	beq.n	8005bfa <HAL_DMA_Start_IT+0xee>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a59      	ldr	r2, [pc, #356]	; (8005d28 <HAL_DMA_Start_IT+0x21c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d018      	beq.n	8005bfa <HAL_DMA_Start_IT+0xee>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a57      	ldr	r2, [pc, #348]	; (8005d2c <HAL_DMA_Start_IT+0x220>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d013      	beq.n	8005bfa <HAL_DMA_Start_IT+0xee>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a56      	ldr	r2, [pc, #344]	; (8005d30 <HAL_DMA_Start_IT+0x224>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00e      	beq.n	8005bfa <HAL_DMA_Start_IT+0xee>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a54      	ldr	r2, [pc, #336]	; (8005d34 <HAL_DMA_Start_IT+0x228>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d009      	beq.n	8005bfa <HAL_DMA_Start_IT+0xee>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a53      	ldr	r2, [pc, #332]	; (8005d38 <HAL_DMA_Start_IT+0x22c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d004      	beq.n	8005bfa <HAL_DMA_Start_IT+0xee>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a51      	ldr	r2, [pc, #324]	; (8005d3c <HAL_DMA_Start_IT+0x230>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d108      	bne.n	8005c0c <HAL_DMA_Start_IT+0x100>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0201 	bic.w	r2, r2, #1
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	e007      	b.n	8005c1c <HAL_DMA_Start_IT+0x110>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 0201 	bic.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f001 fe6a 	bl	80078fc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a34      	ldr	r2, [pc, #208]	; (8005d00 <HAL_DMA_Start_IT+0x1f4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d04a      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x1bc>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a33      	ldr	r2, [pc, #204]	; (8005d04 <HAL_DMA_Start_IT+0x1f8>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d045      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x1bc>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a31      	ldr	r2, [pc, #196]	; (8005d08 <HAL_DMA_Start_IT+0x1fc>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d040      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x1bc>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a30      	ldr	r2, [pc, #192]	; (8005d0c <HAL_DMA_Start_IT+0x200>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d03b      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x1bc>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a2e      	ldr	r2, [pc, #184]	; (8005d10 <HAL_DMA_Start_IT+0x204>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d036      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x1bc>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a2d      	ldr	r2, [pc, #180]	; (8005d14 <HAL_DMA_Start_IT+0x208>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d031      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x1bc>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a2b      	ldr	r2, [pc, #172]	; (8005d18 <HAL_DMA_Start_IT+0x20c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d02c      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x1bc>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a2a      	ldr	r2, [pc, #168]	; (8005d1c <HAL_DMA_Start_IT+0x210>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d027      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x1bc>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a28      	ldr	r2, [pc, #160]	; (8005d20 <HAL_DMA_Start_IT+0x214>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d022      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x1bc>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a27      	ldr	r2, [pc, #156]	; (8005d24 <HAL_DMA_Start_IT+0x218>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d01d      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x1bc>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a25      	ldr	r2, [pc, #148]	; (8005d28 <HAL_DMA_Start_IT+0x21c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d018      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x1bc>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a24      	ldr	r2, [pc, #144]	; (8005d2c <HAL_DMA_Start_IT+0x220>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d013      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x1bc>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a22      	ldr	r2, [pc, #136]	; (8005d30 <HAL_DMA_Start_IT+0x224>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00e      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x1bc>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a21      	ldr	r2, [pc, #132]	; (8005d34 <HAL_DMA_Start_IT+0x228>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d009      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x1bc>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1f      	ldr	r2, [pc, #124]	; (8005d38 <HAL_DMA_Start_IT+0x22c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d004      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x1bc>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1e      	ldr	r2, [pc, #120]	; (8005d3c <HAL_DMA_Start_IT+0x230>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d101      	bne.n	8005ccc <HAL_DMA_Start_IT+0x1c0>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <HAL_DMA_Start_IT+0x1c2>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d036      	beq.n	8005d40 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f023 021e 	bic.w	r2, r3, #30
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0216 	orr.w	r2, r2, #22
 8005ce4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d03e      	beq.n	8005d6c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0208 	orr.w	r2, r2, #8
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	e035      	b.n	8005d6c <HAL_DMA_Start_IT+0x260>
 8005d00:	40020010 	.word	0x40020010
 8005d04:	40020028 	.word	0x40020028
 8005d08:	40020040 	.word	0x40020040
 8005d0c:	40020058 	.word	0x40020058
 8005d10:	40020070 	.word	0x40020070
 8005d14:	40020088 	.word	0x40020088
 8005d18:	400200a0 	.word	0x400200a0
 8005d1c:	400200b8 	.word	0x400200b8
 8005d20:	40020410 	.word	0x40020410
 8005d24:	40020428 	.word	0x40020428
 8005d28:	40020440 	.word	0x40020440
 8005d2c:	40020458 	.word	0x40020458
 8005d30:	40020470 	.word	0x40020470
 8005d34:	40020488 	.word	0x40020488
 8005d38:	400204a0 	.word	0x400204a0
 8005d3c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f023 020e 	bic.w	r2, r3, #14
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 020a 	orr.w	r2, r2, #10
 8005d52:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d007      	beq.n	8005d6c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0204 	orr.w	r2, r2, #4
 8005d6a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a83      	ldr	r2, [pc, #524]	; (8005f80 <HAL_DMA_Start_IT+0x474>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d072      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a82      	ldr	r2, [pc, #520]	; (8005f84 <HAL_DMA_Start_IT+0x478>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d06d      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a80      	ldr	r2, [pc, #512]	; (8005f88 <HAL_DMA_Start_IT+0x47c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d068      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a7f      	ldr	r2, [pc, #508]	; (8005f8c <HAL_DMA_Start_IT+0x480>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d063      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a7d      	ldr	r2, [pc, #500]	; (8005f90 <HAL_DMA_Start_IT+0x484>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d05e      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a7c      	ldr	r2, [pc, #496]	; (8005f94 <HAL_DMA_Start_IT+0x488>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d059      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a7a      	ldr	r2, [pc, #488]	; (8005f98 <HAL_DMA_Start_IT+0x48c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d054      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a79      	ldr	r2, [pc, #484]	; (8005f9c <HAL_DMA_Start_IT+0x490>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d04f      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a77      	ldr	r2, [pc, #476]	; (8005fa0 <HAL_DMA_Start_IT+0x494>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d04a      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a76      	ldr	r2, [pc, #472]	; (8005fa4 <HAL_DMA_Start_IT+0x498>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d045      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a74      	ldr	r2, [pc, #464]	; (8005fa8 <HAL_DMA_Start_IT+0x49c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d040      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a73      	ldr	r2, [pc, #460]	; (8005fac <HAL_DMA_Start_IT+0x4a0>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d03b      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a71      	ldr	r2, [pc, #452]	; (8005fb0 <HAL_DMA_Start_IT+0x4a4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d036      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a70      	ldr	r2, [pc, #448]	; (8005fb4 <HAL_DMA_Start_IT+0x4a8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d031      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a6e      	ldr	r2, [pc, #440]	; (8005fb8 <HAL_DMA_Start_IT+0x4ac>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d02c      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a6d      	ldr	r2, [pc, #436]	; (8005fbc <HAL_DMA_Start_IT+0x4b0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d027      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a6b      	ldr	r2, [pc, #428]	; (8005fc0 <HAL_DMA_Start_IT+0x4b4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d022      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a6a      	ldr	r2, [pc, #424]	; (8005fc4 <HAL_DMA_Start_IT+0x4b8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d01d      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a68      	ldr	r2, [pc, #416]	; (8005fc8 <HAL_DMA_Start_IT+0x4bc>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d018      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a67      	ldr	r2, [pc, #412]	; (8005fcc <HAL_DMA_Start_IT+0x4c0>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d013      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a65      	ldr	r2, [pc, #404]	; (8005fd0 <HAL_DMA_Start_IT+0x4c4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d00e      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a64      	ldr	r2, [pc, #400]	; (8005fd4 <HAL_DMA_Start_IT+0x4c8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d009      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a62      	ldr	r2, [pc, #392]	; (8005fd8 <HAL_DMA_Start_IT+0x4cc>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d004      	beq.n	8005e5c <HAL_DMA_Start_IT+0x350>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a61      	ldr	r2, [pc, #388]	; (8005fdc <HAL_DMA_Start_IT+0x4d0>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d101      	bne.n	8005e60 <HAL_DMA_Start_IT+0x354>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e000      	b.n	8005e62 <HAL_DMA_Start_IT+0x356>
 8005e60:	2300      	movs	r3, #0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d01a      	beq.n	8005e9c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d007      	beq.n	8005e84 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e82:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d007      	beq.n	8005e9c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e9a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a37      	ldr	r2, [pc, #220]	; (8005f80 <HAL_DMA_Start_IT+0x474>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d04a      	beq.n	8005f3c <HAL_DMA_Start_IT+0x430>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a36      	ldr	r2, [pc, #216]	; (8005f84 <HAL_DMA_Start_IT+0x478>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d045      	beq.n	8005f3c <HAL_DMA_Start_IT+0x430>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a34      	ldr	r2, [pc, #208]	; (8005f88 <HAL_DMA_Start_IT+0x47c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d040      	beq.n	8005f3c <HAL_DMA_Start_IT+0x430>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a33      	ldr	r2, [pc, #204]	; (8005f8c <HAL_DMA_Start_IT+0x480>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d03b      	beq.n	8005f3c <HAL_DMA_Start_IT+0x430>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a31      	ldr	r2, [pc, #196]	; (8005f90 <HAL_DMA_Start_IT+0x484>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d036      	beq.n	8005f3c <HAL_DMA_Start_IT+0x430>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a30      	ldr	r2, [pc, #192]	; (8005f94 <HAL_DMA_Start_IT+0x488>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d031      	beq.n	8005f3c <HAL_DMA_Start_IT+0x430>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a2e      	ldr	r2, [pc, #184]	; (8005f98 <HAL_DMA_Start_IT+0x48c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d02c      	beq.n	8005f3c <HAL_DMA_Start_IT+0x430>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a2d      	ldr	r2, [pc, #180]	; (8005f9c <HAL_DMA_Start_IT+0x490>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d027      	beq.n	8005f3c <HAL_DMA_Start_IT+0x430>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a2b      	ldr	r2, [pc, #172]	; (8005fa0 <HAL_DMA_Start_IT+0x494>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d022      	beq.n	8005f3c <HAL_DMA_Start_IT+0x430>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a2a      	ldr	r2, [pc, #168]	; (8005fa4 <HAL_DMA_Start_IT+0x498>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d01d      	beq.n	8005f3c <HAL_DMA_Start_IT+0x430>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a28      	ldr	r2, [pc, #160]	; (8005fa8 <HAL_DMA_Start_IT+0x49c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d018      	beq.n	8005f3c <HAL_DMA_Start_IT+0x430>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a27      	ldr	r2, [pc, #156]	; (8005fac <HAL_DMA_Start_IT+0x4a0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d013      	beq.n	8005f3c <HAL_DMA_Start_IT+0x430>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a25      	ldr	r2, [pc, #148]	; (8005fb0 <HAL_DMA_Start_IT+0x4a4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00e      	beq.n	8005f3c <HAL_DMA_Start_IT+0x430>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a24      	ldr	r2, [pc, #144]	; (8005fb4 <HAL_DMA_Start_IT+0x4a8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d009      	beq.n	8005f3c <HAL_DMA_Start_IT+0x430>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a22      	ldr	r2, [pc, #136]	; (8005fb8 <HAL_DMA_Start_IT+0x4ac>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d004      	beq.n	8005f3c <HAL_DMA_Start_IT+0x430>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a21      	ldr	r2, [pc, #132]	; (8005fbc <HAL_DMA_Start_IT+0x4b0>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d108      	bne.n	8005f4e <HAL_DMA_Start_IT+0x442>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	e012      	b.n	8005f74 <HAL_DMA_Start_IT+0x468>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f042 0201 	orr.w	r2, r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	e009      	b.n	8005f74 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	40020010 	.word	0x40020010
 8005f84:	40020028 	.word	0x40020028
 8005f88:	40020040 	.word	0x40020040
 8005f8c:	40020058 	.word	0x40020058
 8005f90:	40020070 	.word	0x40020070
 8005f94:	40020088 	.word	0x40020088
 8005f98:	400200a0 	.word	0x400200a0
 8005f9c:	400200b8 	.word	0x400200b8
 8005fa0:	40020410 	.word	0x40020410
 8005fa4:	40020428 	.word	0x40020428
 8005fa8:	40020440 	.word	0x40020440
 8005fac:	40020458 	.word	0x40020458
 8005fb0:	40020470 	.word	0x40020470
 8005fb4:	40020488 	.word	0x40020488
 8005fb8:	400204a0 	.word	0x400204a0
 8005fbc:	400204b8 	.word	0x400204b8
 8005fc0:	58025408 	.word	0x58025408
 8005fc4:	5802541c 	.word	0x5802541c
 8005fc8:	58025430 	.word	0x58025430
 8005fcc:	58025444 	.word	0x58025444
 8005fd0:	58025458 	.word	0x58025458
 8005fd4:	5802546c 	.word	0x5802546c
 8005fd8:	58025480 	.word	0x58025480
 8005fdc:	58025494 	.word	0x58025494

08005fe0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005fe8:	f7fe ff32 	bl	8004e50 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e2dc      	b.n	80065b2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d008      	beq.n	8006016 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2280      	movs	r2, #128	; 0x80
 8006008:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e2cd      	b.n	80065b2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a76      	ldr	r2, [pc, #472]	; (80061f4 <HAL_DMA_Abort+0x214>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d04a      	beq.n	80060b6 <HAL_DMA_Abort+0xd6>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a74      	ldr	r2, [pc, #464]	; (80061f8 <HAL_DMA_Abort+0x218>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d045      	beq.n	80060b6 <HAL_DMA_Abort+0xd6>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a73      	ldr	r2, [pc, #460]	; (80061fc <HAL_DMA_Abort+0x21c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d040      	beq.n	80060b6 <HAL_DMA_Abort+0xd6>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a71      	ldr	r2, [pc, #452]	; (8006200 <HAL_DMA_Abort+0x220>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d03b      	beq.n	80060b6 <HAL_DMA_Abort+0xd6>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a70      	ldr	r2, [pc, #448]	; (8006204 <HAL_DMA_Abort+0x224>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d036      	beq.n	80060b6 <HAL_DMA_Abort+0xd6>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a6e      	ldr	r2, [pc, #440]	; (8006208 <HAL_DMA_Abort+0x228>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d031      	beq.n	80060b6 <HAL_DMA_Abort+0xd6>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a6d      	ldr	r2, [pc, #436]	; (800620c <HAL_DMA_Abort+0x22c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d02c      	beq.n	80060b6 <HAL_DMA_Abort+0xd6>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a6b      	ldr	r2, [pc, #428]	; (8006210 <HAL_DMA_Abort+0x230>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d027      	beq.n	80060b6 <HAL_DMA_Abort+0xd6>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a6a      	ldr	r2, [pc, #424]	; (8006214 <HAL_DMA_Abort+0x234>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d022      	beq.n	80060b6 <HAL_DMA_Abort+0xd6>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a68      	ldr	r2, [pc, #416]	; (8006218 <HAL_DMA_Abort+0x238>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d01d      	beq.n	80060b6 <HAL_DMA_Abort+0xd6>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a67      	ldr	r2, [pc, #412]	; (800621c <HAL_DMA_Abort+0x23c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d018      	beq.n	80060b6 <HAL_DMA_Abort+0xd6>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a65      	ldr	r2, [pc, #404]	; (8006220 <HAL_DMA_Abort+0x240>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d013      	beq.n	80060b6 <HAL_DMA_Abort+0xd6>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a64      	ldr	r2, [pc, #400]	; (8006224 <HAL_DMA_Abort+0x244>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d00e      	beq.n	80060b6 <HAL_DMA_Abort+0xd6>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a62      	ldr	r2, [pc, #392]	; (8006228 <HAL_DMA_Abort+0x248>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d009      	beq.n	80060b6 <HAL_DMA_Abort+0xd6>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a61      	ldr	r2, [pc, #388]	; (800622c <HAL_DMA_Abort+0x24c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d004      	beq.n	80060b6 <HAL_DMA_Abort+0xd6>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a5f      	ldr	r2, [pc, #380]	; (8006230 <HAL_DMA_Abort+0x250>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d101      	bne.n	80060ba <HAL_DMA_Abort+0xda>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <HAL_DMA_Abort+0xdc>
 80060ba:	2300      	movs	r3, #0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d013      	beq.n	80060e8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 021e 	bic.w	r2, r2, #30
 80060ce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695a      	ldr	r2, [r3, #20]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060de:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	617b      	str	r3, [r7, #20]
 80060e6:	e00a      	b.n	80060fe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 020e 	bic.w	r2, r2, #14
 80060f6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a3c      	ldr	r2, [pc, #240]	; (80061f4 <HAL_DMA_Abort+0x214>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d072      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a3a      	ldr	r2, [pc, #232]	; (80061f8 <HAL_DMA_Abort+0x218>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d06d      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a39      	ldr	r2, [pc, #228]	; (80061fc <HAL_DMA_Abort+0x21c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d068      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a37      	ldr	r2, [pc, #220]	; (8006200 <HAL_DMA_Abort+0x220>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d063      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a36      	ldr	r2, [pc, #216]	; (8006204 <HAL_DMA_Abort+0x224>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d05e      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a34      	ldr	r2, [pc, #208]	; (8006208 <HAL_DMA_Abort+0x228>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d059      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a33      	ldr	r2, [pc, #204]	; (800620c <HAL_DMA_Abort+0x22c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d054      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a31      	ldr	r2, [pc, #196]	; (8006210 <HAL_DMA_Abort+0x230>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d04f      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a30      	ldr	r2, [pc, #192]	; (8006214 <HAL_DMA_Abort+0x234>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d04a      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a2e      	ldr	r2, [pc, #184]	; (8006218 <HAL_DMA_Abort+0x238>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d045      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a2d      	ldr	r2, [pc, #180]	; (800621c <HAL_DMA_Abort+0x23c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d040      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a2b      	ldr	r2, [pc, #172]	; (8006220 <HAL_DMA_Abort+0x240>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d03b      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a2a      	ldr	r2, [pc, #168]	; (8006224 <HAL_DMA_Abort+0x244>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d036      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a28      	ldr	r2, [pc, #160]	; (8006228 <HAL_DMA_Abort+0x248>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d031      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a27      	ldr	r2, [pc, #156]	; (800622c <HAL_DMA_Abort+0x24c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d02c      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a25      	ldr	r2, [pc, #148]	; (8006230 <HAL_DMA_Abort+0x250>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d027      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a24      	ldr	r2, [pc, #144]	; (8006234 <HAL_DMA_Abort+0x254>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d022      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a22      	ldr	r2, [pc, #136]	; (8006238 <HAL_DMA_Abort+0x258>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d01d      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a21      	ldr	r2, [pc, #132]	; (800623c <HAL_DMA_Abort+0x25c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d018      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1f      	ldr	r2, [pc, #124]	; (8006240 <HAL_DMA_Abort+0x260>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d013      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a1e      	ldr	r2, [pc, #120]	; (8006244 <HAL_DMA_Abort+0x264>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d00e      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a1c      	ldr	r2, [pc, #112]	; (8006248 <HAL_DMA_Abort+0x268>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d009      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a1b      	ldr	r2, [pc, #108]	; (800624c <HAL_DMA_Abort+0x26c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d004      	beq.n	80061ee <HAL_DMA_Abort+0x20e>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a19      	ldr	r2, [pc, #100]	; (8006250 <HAL_DMA_Abort+0x270>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d132      	bne.n	8006254 <HAL_DMA_Abort+0x274>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e031      	b.n	8006256 <HAL_DMA_Abort+0x276>
 80061f2:	bf00      	nop
 80061f4:	40020010 	.word	0x40020010
 80061f8:	40020028 	.word	0x40020028
 80061fc:	40020040 	.word	0x40020040
 8006200:	40020058 	.word	0x40020058
 8006204:	40020070 	.word	0x40020070
 8006208:	40020088 	.word	0x40020088
 800620c:	400200a0 	.word	0x400200a0
 8006210:	400200b8 	.word	0x400200b8
 8006214:	40020410 	.word	0x40020410
 8006218:	40020428 	.word	0x40020428
 800621c:	40020440 	.word	0x40020440
 8006220:	40020458 	.word	0x40020458
 8006224:	40020470 	.word	0x40020470
 8006228:	40020488 	.word	0x40020488
 800622c:	400204a0 	.word	0x400204a0
 8006230:	400204b8 	.word	0x400204b8
 8006234:	58025408 	.word	0x58025408
 8006238:	5802541c 	.word	0x5802541c
 800623c:	58025430 	.word	0x58025430
 8006240:	58025444 	.word	0x58025444
 8006244:	58025458 	.word	0x58025458
 8006248:	5802546c 	.word	0x5802546c
 800624c:	58025480 	.word	0x58025480
 8006250:	58025494 	.word	0x58025494
 8006254:	2300      	movs	r3, #0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006268:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a6d      	ldr	r2, [pc, #436]	; (8006424 <HAL_DMA_Abort+0x444>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d04a      	beq.n	800630a <HAL_DMA_Abort+0x32a>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a6b      	ldr	r2, [pc, #428]	; (8006428 <HAL_DMA_Abort+0x448>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d045      	beq.n	800630a <HAL_DMA_Abort+0x32a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a6a      	ldr	r2, [pc, #424]	; (800642c <HAL_DMA_Abort+0x44c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d040      	beq.n	800630a <HAL_DMA_Abort+0x32a>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a68      	ldr	r2, [pc, #416]	; (8006430 <HAL_DMA_Abort+0x450>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d03b      	beq.n	800630a <HAL_DMA_Abort+0x32a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a67      	ldr	r2, [pc, #412]	; (8006434 <HAL_DMA_Abort+0x454>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d036      	beq.n	800630a <HAL_DMA_Abort+0x32a>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a65      	ldr	r2, [pc, #404]	; (8006438 <HAL_DMA_Abort+0x458>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d031      	beq.n	800630a <HAL_DMA_Abort+0x32a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a64      	ldr	r2, [pc, #400]	; (800643c <HAL_DMA_Abort+0x45c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d02c      	beq.n	800630a <HAL_DMA_Abort+0x32a>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a62      	ldr	r2, [pc, #392]	; (8006440 <HAL_DMA_Abort+0x460>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d027      	beq.n	800630a <HAL_DMA_Abort+0x32a>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a61      	ldr	r2, [pc, #388]	; (8006444 <HAL_DMA_Abort+0x464>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d022      	beq.n	800630a <HAL_DMA_Abort+0x32a>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a5f      	ldr	r2, [pc, #380]	; (8006448 <HAL_DMA_Abort+0x468>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d01d      	beq.n	800630a <HAL_DMA_Abort+0x32a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a5e      	ldr	r2, [pc, #376]	; (800644c <HAL_DMA_Abort+0x46c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d018      	beq.n	800630a <HAL_DMA_Abort+0x32a>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a5c      	ldr	r2, [pc, #368]	; (8006450 <HAL_DMA_Abort+0x470>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d013      	beq.n	800630a <HAL_DMA_Abort+0x32a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a5b      	ldr	r2, [pc, #364]	; (8006454 <HAL_DMA_Abort+0x474>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00e      	beq.n	800630a <HAL_DMA_Abort+0x32a>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a59      	ldr	r2, [pc, #356]	; (8006458 <HAL_DMA_Abort+0x478>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d009      	beq.n	800630a <HAL_DMA_Abort+0x32a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a58      	ldr	r2, [pc, #352]	; (800645c <HAL_DMA_Abort+0x47c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d004      	beq.n	800630a <HAL_DMA_Abort+0x32a>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a56      	ldr	r2, [pc, #344]	; (8006460 <HAL_DMA_Abort+0x480>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d108      	bne.n	800631c <HAL_DMA_Abort+0x33c>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0201 	bic.w	r2, r2, #1
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	e007      	b.n	800632c <HAL_DMA_Abort+0x34c>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0201 	bic.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800632c:	e013      	b.n	8006356 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800632e:	f7fe fd8f 	bl	8004e50 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b05      	cmp	r3, #5
 800633a:	d90c      	bls.n	8006356 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2203      	movs	r2, #3
 8006346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e12d      	b.n	80065b2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e5      	bne.n	800632e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a2f      	ldr	r2, [pc, #188]	; (8006424 <HAL_DMA_Abort+0x444>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d04a      	beq.n	8006402 <HAL_DMA_Abort+0x422>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a2d      	ldr	r2, [pc, #180]	; (8006428 <HAL_DMA_Abort+0x448>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d045      	beq.n	8006402 <HAL_DMA_Abort+0x422>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a2c      	ldr	r2, [pc, #176]	; (800642c <HAL_DMA_Abort+0x44c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d040      	beq.n	8006402 <HAL_DMA_Abort+0x422>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a2a      	ldr	r2, [pc, #168]	; (8006430 <HAL_DMA_Abort+0x450>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d03b      	beq.n	8006402 <HAL_DMA_Abort+0x422>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a29      	ldr	r2, [pc, #164]	; (8006434 <HAL_DMA_Abort+0x454>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d036      	beq.n	8006402 <HAL_DMA_Abort+0x422>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a27      	ldr	r2, [pc, #156]	; (8006438 <HAL_DMA_Abort+0x458>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d031      	beq.n	8006402 <HAL_DMA_Abort+0x422>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a26      	ldr	r2, [pc, #152]	; (800643c <HAL_DMA_Abort+0x45c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d02c      	beq.n	8006402 <HAL_DMA_Abort+0x422>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a24      	ldr	r2, [pc, #144]	; (8006440 <HAL_DMA_Abort+0x460>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d027      	beq.n	8006402 <HAL_DMA_Abort+0x422>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a23      	ldr	r2, [pc, #140]	; (8006444 <HAL_DMA_Abort+0x464>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d022      	beq.n	8006402 <HAL_DMA_Abort+0x422>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a21      	ldr	r2, [pc, #132]	; (8006448 <HAL_DMA_Abort+0x468>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d01d      	beq.n	8006402 <HAL_DMA_Abort+0x422>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a20      	ldr	r2, [pc, #128]	; (800644c <HAL_DMA_Abort+0x46c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d018      	beq.n	8006402 <HAL_DMA_Abort+0x422>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a1e      	ldr	r2, [pc, #120]	; (8006450 <HAL_DMA_Abort+0x470>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d013      	beq.n	8006402 <HAL_DMA_Abort+0x422>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a1d      	ldr	r2, [pc, #116]	; (8006454 <HAL_DMA_Abort+0x474>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d00e      	beq.n	8006402 <HAL_DMA_Abort+0x422>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a1b      	ldr	r2, [pc, #108]	; (8006458 <HAL_DMA_Abort+0x478>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d009      	beq.n	8006402 <HAL_DMA_Abort+0x422>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a1a      	ldr	r2, [pc, #104]	; (800645c <HAL_DMA_Abort+0x47c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d004      	beq.n	8006402 <HAL_DMA_Abort+0x422>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a18      	ldr	r2, [pc, #96]	; (8006460 <HAL_DMA_Abort+0x480>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d101      	bne.n	8006406 <HAL_DMA_Abort+0x426>
 8006402:	2301      	movs	r3, #1
 8006404:	e000      	b.n	8006408 <HAL_DMA_Abort+0x428>
 8006406:	2300      	movs	r3, #0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d02b      	beq.n	8006464 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006410:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006416:	f003 031f 	and.w	r3, r3, #31
 800641a:	223f      	movs	r2, #63	; 0x3f
 800641c:	409a      	lsls	r2, r3
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	609a      	str	r2, [r3, #8]
 8006422:	e02a      	b.n	800647a <HAL_DMA_Abort+0x49a>
 8006424:	40020010 	.word	0x40020010
 8006428:	40020028 	.word	0x40020028
 800642c:	40020040 	.word	0x40020040
 8006430:	40020058 	.word	0x40020058
 8006434:	40020070 	.word	0x40020070
 8006438:	40020088 	.word	0x40020088
 800643c:	400200a0 	.word	0x400200a0
 8006440:	400200b8 	.word	0x400200b8
 8006444:	40020410 	.word	0x40020410
 8006448:	40020428 	.word	0x40020428
 800644c:	40020440 	.word	0x40020440
 8006450:	40020458 	.word	0x40020458
 8006454:	40020470 	.word	0x40020470
 8006458:	40020488 	.word	0x40020488
 800645c:	400204a0 	.word	0x400204a0
 8006460:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006468:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800646e:	f003 031f 	and.w	r3, r3, #31
 8006472:	2201      	movs	r2, #1
 8006474:	409a      	lsls	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a4f      	ldr	r2, [pc, #316]	; (80065bc <HAL_DMA_Abort+0x5dc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d072      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a4d      	ldr	r2, [pc, #308]	; (80065c0 <HAL_DMA_Abort+0x5e0>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d06d      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a4c      	ldr	r2, [pc, #304]	; (80065c4 <HAL_DMA_Abort+0x5e4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d068      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a4a      	ldr	r2, [pc, #296]	; (80065c8 <HAL_DMA_Abort+0x5e8>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d063      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a49      	ldr	r2, [pc, #292]	; (80065cc <HAL_DMA_Abort+0x5ec>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d05e      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a47      	ldr	r2, [pc, #284]	; (80065d0 <HAL_DMA_Abort+0x5f0>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d059      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a46      	ldr	r2, [pc, #280]	; (80065d4 <HAL_DMA_Abort+0x5f4>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d054      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a44      	ldr	r2, [pc, #272]	; (80065d8 <HAL_DMA_Abort+0x5f8>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d04f      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a43      	ldr	r2, [pc, #268]	; (80065dc <HAL_DMA_Abort+0x5fc>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d04a      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a41      	ldr	r2, [pc, #260]	; (80065e0 <HAL_DMA_Abort+0x600>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d045      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a40      	ldr	r2, [pc, #256]	; (80065e4 <HAL_DMA_Abort+0x604>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d040      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a3e      	ldr	r2, [pc, #248]	; (80065e8 <HAL_DMA_Abort+0x608>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d03b      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a3d      	ldr	r2, [pc, #244]	; (80065ec <HAL_DMA_Abort+0x60c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d036      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a3b      	ldr	r2, [pc, #236]	; (80065f0 <HAL_DMA_Abort+0x610>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d031      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a3a      	ldr	r2, [pc, #232]	; (80065f4 <HAL_DMA_Abort+0x614>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d02c      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a38      	ldr	r2, [pc, #224]	; (80065f8 <HAL_DMA_Abort+0x618>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d027      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a37      	ldr	r2, [pc, #220]	; (80065fc <HAL_DMA_Abort+0x61c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d022      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a35      	ldr	r2, [pc, #212]	; (8006600 <HAL_DMA_Abort+0x620>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d01d      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a34      	ldr	r2, [pc, #208]	; (8006604 <HAL_DMA_Abort+0x624>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d018      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a32      	ldr	r2, [pc, #200]	; (8006608 <HAL_DMA_Abort+0x628>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d013      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a31      	ldr	r2, [pc, #196]	; (800660c <HAL_DMA_Abort+0x62c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00e      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a2f      	ldr	r2, [pc, #188]	; (8006610 <HAL_DMA_Abort+0x630>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d009      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a2e      	ldr	r2, [pc, #184]	; (8006614 <HAL_DMA_Abort+0x634>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d004      	beq.n	800656a <HAL_DMA_Abort+0x58a>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a2c      	ldr	r2, [pc, #176]	; (8006618 <HAL_DMA_Abort+0x638>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d101      	bne.n	800656e <HAL_DMA_Abort+0x58e>
 800656a:	2301      	movs	r3, #1
 800656c:	e000      	b.n	8006570 <HAL_DMA_Abort+0x590>
 800656e:	2300      	movs	r3, #0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d015      	beq.n	80065a0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800657c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00c      	beq.n	80065a0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006590:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006594:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800659e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	40020010 	.word	0x40020010
 80065c0:	40020028 	.word	0x40020028
 80065c4:	40020040 	.word	0x40020040
 80065c8:	40020058 	.word	0x40020058
 80065cc:	40020070 	.word	0x40020070
 80065d0:	40020088 	.word	0x40020088
 80065d4:	400200a0 	.word	0x400200a0
 80065d8:	400200b8 	.word	0x400200b8
 80065dc:	40020410 	.word	0x40020410
 80065e0:	40020428 	.word	0x40020428
 80065e4:	40020440 	.word	0x40020440
 80065e8:	40020458 	.word	0x40020458
 80065ec:	40020470 	.word	0x40020470
 80065f0:	40020488 	.word	0x40020488
 80065f4:	400204a0 	.word	0x400204a0
 80065f8:	400204b8 	.word	0x400204b8
 80065fc:	58025408 	.word	0x58025408
 8006600:	5802541c 	.word	0x5802541c
 8006604:	58025430 	.word	0x58025430
 8006608:	58025444 	.word	0x58025444
 800660c:	58025458 	.word	0x58025458
 8006610:	5802546c 	.word	0x5802546c
 8006614:	58025480 	.word	0x58025480
 8006618:	58025494 	.word	0x58025494

0800661c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e237      	b.n	8006a9e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d004      	beq.n	8006644 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2280      	movs	r2, #128	; 0x80
 800663e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e22c      	b.n	8006a9e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a5c      	ldr	r2, [pc, #368]	; (80067bc <HAL_DMA_Abort_IT+0x1a0>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d04a      	beq.n	80066e4 <HAL_DMA_Abort_IT+0xc8>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a5b      	ldr	r2, [pc, #364]	; (80067c0 <HAL_DMA_Abort_IT+0x1a4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d045      	beq.n	80066e4 <HAL_DMA_Abort_IT+0xc8>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a59      	ldr	r2, [pc, #356]	; (80067c4 <HAL_DMA_Abort_IT+0x1a8>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d040      	beq.n	80066e4 <HAL_DMA_Abort_IT+0xc8>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a58      	ldr	r2, [pc, #352]	; (80067c8 <HAL_DMA_Abort_IT+0x1ac>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d03b      	beq.n	80066e4 <HAL_DMA_Abort_IT+0xc8>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a56      	ldr	r2, [pc, #344]	; (80067cc <HAL_DMA_Abort_IT+0x1b0>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d036      	beq.n	80066e4 <HAL_DMA_Abort_IT+0xc8>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a55      	ldr	r2, [pc, #340]	; (80067d0 <HAL_DMA_Abort_IT+0x1b4>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d031      	beq.n	80066e4 <HAL_DMA_Abort_IT+0xc8>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a53      	ldr	r2, [pc, #332]	; (80067d4 <HAL_DMA_Abort_IT+0x1b8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d02c      	beq.n	80066e4 <HAL_DMA_Abort_IT+0xc8>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a52      	ldr	r2, [pc, #328]	; (80067d8 <HAL_DMA_Abort_IT+0x1bc>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d027      	beq.n	80066e4 <HAL_DMA_Abort_IT+0xc8>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a50      	ldr	r2, [pc, #320]	; (80067dc <HAL_DMA_Abort_IT+0x1c0>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d022      	beq.n	80066e4 <HAL_DMA_Abort_IT+0xc8>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a4f      	ldr	r2, [pc, #316]	; (80067e0 <HAL_DMA_Abort_IT+0x1c4>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d01d      	beq.n	80066e4 <HAL_DMA_Abort_IT+0xc8>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a4d      	ldr	r2, [pc, #308]	; (80067e4 <HAL_DMA_Abort_IT+0x1c8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d018      	beq.n	80066e4 <HAL_DMA_Abort_IT+0xc8>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a4c      	ldr	r2, [pc, #304]	; (80067e8 <HAL_DMA_Abort_IT+0x1cc>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d013      	beq.n	80066e4 <HAL_DMA_Abort_IT+0xc8>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a4a      	ldr	r2, [pc, #296]	; (80067ec <HAL_DMA_Abort_IT+0x1d0>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d00e      	beq.n	80066e4 <HAL_DMA_Abort_IT+0xc8>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a49      	ldr	r2, [pc, #292]	; (80067f0 <HAL_DMA_Abort_IT+0x1d4>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d009      	beq.n	80066e4 <HAL_DMA_Abort_IT+0xc8>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a47      	ldr	r2, [pc, #284]	; (80067f4 <HAL_DMA_Abort_IT+0x1d8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d004      	beq.n	80066e4 <HAL_DMA_Abort_IT+0xc8>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a46      	ldr	r2, [pc, #280]	; (80067f8 <HAL_DMA_Abort_IT+0x1dc>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d101      	bne.n	80066e8 <HAL_DMA_Abort_IT+0xcc>
 80066e4:	2301      	movs	r3, #1
 80066e6:	e000      	b.n	80066ea <HAL_DMA_Abort_IT+0xce>
 80066e8:	2300      	movs	r3, #0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 8086 	beq.w	80067fc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2204      	movs	r2, #4
 80066f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a2f      	ldr	r2, [pc, #188]	; (80067bc <HAL_DMA_Abort_IT+0x1a0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d04a      	beq.n	8006798 <HAL_DMA_Abort_IT+0x17c>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a2e      	ldr	r2, [pc, #184]	; (80067c0 <HAL_DMA_Abort_IT+0x1a4>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d045      	beq.n	8006798 <HAL_DMA_Abort_IT+0x17c>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a2c      	ldr	r2, [pc, #176]	; (80067c4 <HAL_DMA_Abort_IT+0x1a8>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d040      	beq.n	8006798 <HAL_DMA_Abort_IT+0x17c>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a2b      	ldr	r2, [pc, #172]	; (80067c8 <HAL_DMA_Abort_IT+0x1ac>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d03b      	beq.n	8006798 <HAL_DMA_Abort_IT+0x17c>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a29      	ldr	r2, [pc, #164]	; (80067cc <HAL_DMA_Abort_IT+0x1b0>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d036      	beq.n	8006798 <HAL_DMA_Abort_IT+0x17c>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a28      	ldr	r2, [pc, #160]	; (80067d0 <HAL_DMA_Abort_IT+0x1b4>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d031      	beq.n	8006798 <HAL_DMA_Abort_IT+0x17c>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a26      	ldr	r2, [pc, #152]	; (80067d4 <HAL_DMA_Abort_IT+0x1b8>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d02c      	beq.n	8006798 <HAL_DMA_Abort_IT+0x17c>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a25      	ldr	r2, [pc, #148]	; (80067d8 <HAL_DMA_Abort_IT+0x1bc>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d027      	beq.n	8006798 <HAL_DMA_Abort_IT+0x17c>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a23      	ldr	r2, [pc, #140]	; (80067dc <HAL_DMA_Abort_IT+0x1c0>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d022      	beq.n	8006798 <HAL_DMA_Abort_IT+0x17c>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a22      	ldr	r2, [pc, #136]	; (80067e0 <HAL_DMA_Abort_IT+0x1c4>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d01d      	beq.n	8006798 <HAL_DMA_Abort_IT+0x17c>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a20      	ldr	r2, [pc, #128]	; (80067e4 <HAL_DMA_Abort_IT+0x1c8>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d018      	beq.n	8006798 <HAL_DMA_Abort_IT+0x17c>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a1f      	ldr	r2, [pc, #124]	; (80067e8 <HAL_DMA_Abort_IT+0x1cc>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d013      	beq.n	8006798 <HAL_DMA_Abort_IT+0x17c>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a1d      	ldr	r2, [pc, #116]	; (80067ec <HAL_DMA_Abort_IT+0x1d0>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00e      	beq.n	8006798 <HAL_DMA_Abort_IT+0x17c>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a1c      	ldr	r2, [pc, #112]	; (80067f0 <HAL_DMA_Abort_IT+0x1d4>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d009      	beq.n	8006798 <HAL_DMA_Abort_IT+0x17c>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a1a      	ldr	r2, [pc, #104]	; (80067f4 <HAL_DMA_Abort_IT+0x1d8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d004      	beq.n	8006798 <HAL_DMA_Abort_IT+0x17c>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a19      	ldr	r2, [pc, #100]	; (80067f8 <HAL_DMA_Abort_IT+0x1dc>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d108      	bne.n	80067aa <HAL_DMA_Abort_IT+0x18e>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0201 	bic.w	r2, r2, #1
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	e178      	b.n	8006a9c <HAL_DMA_Abort_IT+0x480>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0201 	bic.w	r2, r2, #1
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	e16f      	b.n	8006a9c <HAL_DMA_Abort_IT+0x480>
 80067bc:	40020010 	.word	0x40020010
 80067c0:	40020028 	.word	0x40020028
 80067c4:	40020040 	.word	0x40020040
 80067c8:	40020058 	.word	0x40020058
 80067cc:	40020070 	.word	0x40020070
 80067d0:	40020088 	.word	0x40020088
 80067d4:	400200a0 	.word	0x400200a0
 80067d8:	400200b8 	.word	0x400200b8
 80067dc:	40020410 	.word	0x40020410
 80067e0:	40020428 	.word	0x40020428
 80067e4:	40020440 	.word	0x40020440
 80067e8:	40020458 	.word	0x40020458
 80067ec:	40020470 	.word	0x40020470
 80067f0:	40020488 	.word	0x40020488
 80067f4:	400204a0 	.word	0x400204a0
 80067f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 020e 	bic.w	r2, r2, #14
 800680a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a6c      	ldr	r2, [pc, #432]	; (80069c4 <HAL_DMA_Abort_IT+0x3a8>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d04a      	beq.n	80068ac <HAL_DMA_Abort_IT+0x290>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a6b      	ldr	r2, [pc, #428]	; (80069c8 <HAL_DMA_Abort_IT+0x3ac>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d045      	beq.n	80068ac <HAL_DMA_Abort_IT+0x290>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a69      	ldr	r2, [pc, #420]	; (80069cc <HAL_DMA_Abort_IT+0x3b0>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d040      	beq.n	80068ac <HAL_DMA_Abort_IT+0x290>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a68      	ldr	r2, [pc, #416]	; (80069d0 <HAL_DMA_Abort_IT+0x3b4>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d03b      	beq.n	80068ac <HAL_DMA_Abort_IT+0x290>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a66      	ldr	r2, [pc, #408]	; (80069d4 <HAL_DMA_Abort_IT+0x3b8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d036      	beq.n	80068ac <HAL_DMA_Abort_IT+0x290>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a65      	ldr	r2, [pc, #404]	; (80069d8 <HAL_DMA_Abort_IT+0x3bc>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d031      	beq.n	80068ac <HAL_DMA_Abort_IT+0x290>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a63      	ldr	r2, [pc, #396]	; (80069dc <HAL_DMA_Abort_IT+0x3c0>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d02c      	beq.n	80068ac <HAL_DMA_Abort_IT+0x290>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a62      	ldr	r2, [pc, #392]	; (80069e0 <HAL_DMA_Abort_IT+0x3c4>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d027      	beq.n	80068ac <HAL_DMA_Abort_IT+0x290>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a60      	ldr	r2, [pc, #384]	; (80069e4 <HAL_DMA_Abort_IT+0x3c8>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d022      	beq.n	80068ac <HAL_DMA_Abort_IT+0x290>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a5f      	ldr	r2, [pc, #380]	; (80069e8 <HAL_DMA_Abort_IT+0x3cc>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d01d      	beq.n	80068ac <HAL_DMA_Abort_IT+0x290>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a5d      	ldr	r2, [pc, #372]	; (80069ec <HAL_DMA_Abort_IT+0x3d0>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d018      	beq.n	80068ac <HAL_DMA_Abort_IT+0x290>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a5c      	ldr	r2, [pc, #368]	; (80069f0 <HAL_DMA_Abort_IT+0x3d4>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d013      	beq.n	80068ac <HAL_DMA_Abort_IT+0x290>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a5a      	ldr	r2, [pc, #360]	; (80069f4 <HAL_DMA_Abort_IT+0x3d8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00e      	beq.n	80068ac <HAL_DMA_Abort_IT+0x290>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a59      	ldr	r2, [pc, #356]	; (80069f8 <HAL_DMA_Abort_IT+0x3dc>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d009      	beq.n	80068ac <HAL_DMA_Abort_IT+0x290>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a57      	ldr	r2, [pc, #348]	; (80069fc <HAL_DMA_Abort_IT+0x3e0>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d004      	beq.n	80068ac <HAL_DMA_Abort_IT+0x290>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a56      	ldr	r2, [pc, #344]	; (8006a00 <HAL_DMA_Abort_IT+0x3e4>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d108      	bne.n	80068be <HAL_DMA_Abort_IT+0x2a2>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0201 	bic.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	e007      	b.n	80068ce <HAL_DMA_Abort_IT+0x2b2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0201 	bic.w	r2, r2, #1
 80068cc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a3c      	ldr	r2, [pc, #240]	; (80069c4 <HAL_DMA_Abort_IT+0x3a8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d072      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a3a      	ldr	r2, [pc, #232]	; (80069c8 <HAL_DMA_Abort_IT+0x3ac>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d06d      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a39      	ldr	r2, [pc, #228]	; (80069cc <HAL_DMA_Abort_IT+0x3b0>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d068      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a37      	ldr	r2, [pc, #220]	; (80069d0 <HAL_DMA_Abort_IT+0x3b4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d063      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a36      	ldr	r2, [pc, #216]	; (80069d4 <HAL_DMA_Abort_IT+0x3b8>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d05e      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a34      	ldr	r2, [pc, #208]	; (80069d8 <HAL_DMA_Abort_IT+0x3bc>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d059      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a33      	ldr	r2, [pc, #204]	; (80069dc <HAL_DMA_Abort_IT+0x3c0>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d054      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a31      	ldr	r2, [pc, #196]	; (80069e0 <HAL_DMA_Abort_IT+0x3c4>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d04f      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a30      	ldr	r2, [pc, #192]	; (80069e4 <HAL_DMA_Abort_IT+0x3c8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d04a      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a2e      	ldr	r2, [pc, #184]	; (80069e8 <HAL_DMA_Abort_IT+0x3cc>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d045      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a2d      	ldr	r2, [pc, #180]	; (80069ec <HAL_DMA_Abort_IT+0x3d0>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d040      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a2b      	ldr	r2, [pc, #172]	; (80069f0 <HAL_DMA_Abort_IT+0x3d4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d03b      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a2a      	ldr	r2, [pc, #168]	; (80069f4 <HAL_DMA_Abort_IT+0x3d8>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d036      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a28      	ldr	r2, [pc, #160]	; (80069f8 <HAL_DMA_Abort_IT+0x3dc>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d031      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a27      	ldr	r2, [pc, #156]	; (80069fc <HAL_DMA_Abort_IT+0x3e0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d02c      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a25      	ldr	r2, [pc, #148]	; (8006a00 <HAL_DMA_Abort_IT+0x3e4>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d027      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a24      	ldr	r2, [pc, #144]	; (8006a04 <HAL_DMA_Abort_IT+0x3e8>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d022      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a22      	ldr	r2, [pc, #136]	; (8006a08 <HAL_DMA_Abort_IT+0x3ec>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d01d      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a21      	ldr	r2, [pc, #132]	; (8006a0c <HAL_DMA_Abort_IT+0x3f0>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d018      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a1f      	ldr	r2, [pc, #124]	; (8006a10 <HAL_DMA_Abort_IT+0x3f4>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d013      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a1e      	ldr	r2, [pc, #120]	; (8006a14 <HAL_DMA_Abort_IT+0x3f8>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d00e      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a1c      	ldr	r2, [pc, #112]	; (8006a18 <HAL_DMA_Abort_IT+0x3fc>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d009      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a1b      	ldr	r2, [pc, #108]	; (8006a1c <HAL_DMA_Abort_IT+0x400>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d004      	beq.n	80069be <HAL_DMA_Abort_IT+0x3a2>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a19      	ldr	r2, [pc, #100]	; (8006a20 <HAL_DMA_Abort_IT+0x404>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d132      	bne.n	8006a24 <HAL_DMA_Abort_IT+0x408>
 80069be:	2301      	movs	r3, #1
 80069c0:	e031      	b.n	8006a26 <HAL_DMA_Abort_IT+0x40a>
 80069c2:	bf00      	nop
 80069c4:	40020010 	.word	0x40020010
 80069c8:	40020028 	.word	0x40020028
 80069cc:	40020040 	.word	0x40020040
 80069d0:	40020058 	.word	0x40020058
 80069d4:	40020070 	.word	0x40020070
 80069d8:	40020088 	.word	0x40020088
 80069dc:	400200a0 	.word	0x400200a0
 80069e0:	400200b8 	.word	0x400200b8
 80069e4:	40020410 	.word	0x40020410
 80069e8:	40020428 	.word	0x40020428
 80069ec:	40020440 	.word	0x40020440
 80069f0:	40020458 	.word	0x40020458
 80069f4:	40020470 	.word	0x40020470
 80069f8:	40020488 	.word	0x40020488
 80069fc:	400204a0 	.word	0x400204a0
 8006a00:	400204b8 	.word	0x400204b8
 8006a04:	58025408 	.word	0x58025408
 8006a08:	5802541c 	.word	0x5802541c
 8006a0c:	58025430 	.word	0x58025430
 8006a10:	58025444 	.word	0x58025444
 8006a14:	58025458 	.word	0x58025458
 8006a18:	5802546c 	.word	0x5802546c
 8006a1c:	58025480 	.word	0x58025480
 8006a20:	58025494 	.word	0x58025494
 8006a24:	2300      	movs	r3, #0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d028      	beq.n	8006a7c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a38:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a44:	f003 031f 	and.w	r3, r3, #31
 8006a48:	2201      	movs	r2, #1
 8006a4a:	409a      	lsls	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a58:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00c      	beq.n	8006a7c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a70:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a7a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop

08006aa8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08a      	sub	sp, #40	; 0x28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006ab4:	4b67      	ldr	r3, [pc, #412]	; (8006c54 <HAL_DMA_IRQHandler+0x1ac>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a67      	ldr	r2, [pc, #412]	; (8006c58 <HAL_DMA_IRQHandler+0x1b0>)
 8006aba:	fba2 2303 	umull	r2, r3, r2, r3
 8006abe:	0a9b      	lsrs	r3, r3, #10
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006acc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a5f      	ldr	r2, [pc, #380]	; (8006c5c <HAL_DMA_IRQHandler+0x1b4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d04a      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xd2>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a5d      	ldr	r2, [pc, #372]	; (8006c60 <HAL_DMA_IRQHandler+0x1b8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d045      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xd2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a5c      	ldr	r2, [pc, #368]	; (8006c64 <HAL_DMA_IRQHandler+0x1bc>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d040      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xd2>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a5a      	ldr	r2, [pc, #360]	; (8006c68 <HAL_DMA_IRQHandler+0x1c0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d03b      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xd2>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a59      	ldr	r2, [pc, #356]	; (8006c6c <HAL_DMA_IRQHandler+0x1c4>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d036      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xd2>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a57      	ldr	r2, [pc, #348]	; (8006c70 <HAL_DMA_IRQHandler+0x1c8>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d031      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xd2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a56      	ldr	r2, [pc, #344]	; (8006c74 <HAL_DMA_IRQHandler+0x1cc>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d02c      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xd2>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a54      	ldr	r2, [pc, #336]	; (8006c78 <HAL_DMA_IRQHandler+0x1d0>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d027      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xd2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a53      	ldr	r2, [pc, #332]	; (8006c7c <HAL_DMA_IRQHandler+0x1d4>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d022      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xd2>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a51      	ldr	r2, [pc, #324]	; (8006c80 <HAL_DMA_IRQHandler+0x1d8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d01d      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xd2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a50      	ldr	r2, [pc, #320]	; (8006c84 <HAL_DMA_IRQHandler+0x1dc>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d018      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xd2>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a4e      	ldr	r2, [pc, #312]	; (8006c88 <HAL_DMA_IRQHandler+0x1e0>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d013      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xd2>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a4d      	ldr	r2, [pc, #308]	; (8006c8c <HAL_DMA_IRQHandler+0x1e4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d00e      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xd2>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a4b      	ldr	r2, [pc, #300]	; (8006c90 <HAL_DMA_IRQHandler+0x1e8>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d009      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xd2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a4a      	ldr	r2, [pc, #296]	; (8006c94 <HAL_DMA_IRQHandler+0x1ec>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d004      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xd2>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a48      	ldr	r2, [pc, #288]	; (8006c98 <HAL_DMA_IRQHandler+0x1f0>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d101      	bne.n	8006b7e <HAL_DMA_IRQHandler+0xd6>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e000      	b.n	8006b80 <HAL_DMA_IRQHandler+0xd8>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 842b 	beq.w	80073dc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b8a:	f003 031f 	and.w	r3, r3, #31
 8006b8e:	2208      	movs	r2, #8
 8006b90:	409a      	lsls	r2, r3
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	4013      	ands	r3, r2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f000 80a2 	beq.w	8006ce0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a2e      	ldr	r2, [pc, #184]	; (8006c5c <HAL_DMA_IRQHandler+0x1b4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d04a      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x194>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a2d      	ldr	r2, [pc, #180]	; (8006c60 <HAL_DMA_IRQHandler+0x1b8>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d045      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x194>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a2b      	ldr	r2, [pc, #172]	; (8006c64 <HAL_DMA_IRQHandler+0x1bc>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d040      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x194>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a2a      	ldr	r2, [pc, #168]	; (8006c68 <HAL_DMA_IRQHandler+0x1c0>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d03b      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x194>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a28      	ldr	r2, [pc, #160]	; (8006c6c <HAL_DMA_IRQHandler+0x1c4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d036      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x194>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a27      	ldr	r2, [pc, #156]	; (8006c70 <HAL_DMA_IRQHandler+0x1c8>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d031      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x194>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a25      	ldr	r2, [pc, #148]	; (8006c74 <HAL_DMA_IRQHandler+0x1cc>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d02c      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x194>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a24      	ldr	r2, [pc, #144]	; (8006c78 <HAL_DMA_IRQHandler+0x1d0>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d027      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x194>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a22      	ldr	r2, [pc, #136]	; (8006c7c <HAL_DMA_IRQHandler+0x1d4>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d022      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x194>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a21      	ldr	r2, [pc, #132]	; (8006c80 <HAL_DMA_IRQHandler+0x1d8>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d01d      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x194>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a1f      	ldr	r2, [pc, #124]	; (8006c84 <HAL_DMA_IRQHandler+0x1dc>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d018      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x194>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a1e      	ldr	r2, [pc, #120]	; (8006c88 <HAL_DMA_IRQHandler+0x1e0>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d013      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x194>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a1c      	ldr	r2, [pc, #112]	; (8006c8c <HAL_DMA_IRQHandler+0x1e4>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00e      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x194>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a1b      	ldr	r2, [pc, #108]	; (8006c90 <HAL_DMA_IRQHandler+0x1e8>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d009      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x194>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a19      	ldr	r2, [pc, #100]	; (8006c94 <HAL_DMA_IRQHandler+0x1ec>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d004      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x194>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a18      	ldr	r2, [pc, #96]	; (8006c98 <HAL_DMA_IRQHandler+0x1f0>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d12f      	bne.n	8006c9c <HAL_DMA_IRQHandler+0x1f4>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0304 	and.w	r3, r3, #4
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	bf14      	ite	ne
 8006c4a:	2301      	movne	r3, #1
 8006c4c:	2300      	moveq	r3, #0
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	e02e      	b.n	8006cb0 <HAL_DMA_IRQHandler+0x208>
 8006c52:	bf00      	nop
 8006c54:	24000000 	.word	0x24000000
 8006c58:	1b4e81b5 	.word	0x1b4e81b5
 8006c5c:	40020010 	.word	0x40020010
 8006c60:	40020028 	.word	0x40020028
 8006c64:	40020040 	.word	0x40020040
 8006c68:	40020058 	.word	0x40020058
 8006c6c:	40020070 	.word	0x40020070
 8006c70:	40020088 	.word	0x40020088
 8006c74:	400200a0 	.word	0x400200a0
 8006c78:	400200b8 	.word	0x400200b8
 8006c7c:	40020410 	.word	0x40020410
 8006c80:	40020428 	.word	0x40020428
 8006c84:	40020440 	.word	0x40020440
 8006c88:	40020458 	.word	0x40020458
 8006c8c:	40020470 	.word	0x40020470
 8006c90:	40020488 	.word	0x40020488
 8006c94:	400204a0 	.word	0x400204a0
 8006c98:	400204b8 	.word	0x400204b8
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0308 	and.w	r3, r3, #8
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	bf14      	ite	ne
 8006caa:	2301      	movne	r3, #1
 8006cac:	2300      	moveq	r3, #0
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d015      	beq.n	8006ce0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0204 	bic.w	r2, r2, #4
 8006cc2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc8:	f003 031f 	and.w	r3, r3, #31
 8006ccc:	2208      	movs	r2, #8
 8006cce:	409a      	lsls	r2, r3
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd8:	f043 0201 	orr.w	r2, r3, #1
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce4:	f003 031f 	and.w	r3, r3, #31
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	fa22 f303 	lsr.w	r3, r2, r3
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d06e      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a69      	ldr	r2, [pc, #420]	; (8006ea0 <HAL_DMA_IRQHandler+0x3f8>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d04a      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x2ee>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a67      	ldr	r2, [pc, #412]	; (8006ea4 <HAL_DMA_IRQHandler+0x3fc>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d045      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x2ee>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a66      	ldr	r2, [pc, #408]	; (8006ea8 <HAL_DMA_IRQHandler+0x400>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d040      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x2ee>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a64      	ldr	r2, [pc, #400]	; (8006eac <HAL_DMA_IRQHandler+0x404>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d03b      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x2ee>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a63      	ldr	r2, [pc, #396]	; (8006eb0 <HAL_DMA_IRQHandler+0x408>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d036      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x2ee>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a61      	ldr	r2, [pc, #388]	; (8006eb4 <HAL_DMA_IRQHandler+0x40c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d031      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x2ee>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a60      	ldr	r2, [pc, #384]	; (8006eb8 <HAL_DMA_IRQHandler+0x410>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d02c      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x2ee>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a5e      	ldr	r2, [pc, #376]	; (8006ebc <HAL_DMA_IRQHandler+0x414>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d027      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x2ee>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a5d      	ldr	r2, [pc, #372]	; (8006ec0 <HAL_DMA_IRQHandler+0x418>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d022      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x2ee>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a5b      	ldr	r2, [pc, #364]	; (8006ec4 <HAL_DMA_IRQHandler+0x41c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d01d      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x2ee>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a5a      	ldr	r2, [pc, #360]	; (8006ec8 <HAL_DMA_IRQHandler+0x420>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d018      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x2ee>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a58      	ldr	r2, [pc, #352]	; (8006ecc <HAL_DMA_IRQHandler+0x424>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d013      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x2ee>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a57      	ldr	r2, [pc, #348]	; (8006ed0 <HAL_DMA_IRQHandler+0x428>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00e      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x2ee>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a55      	ldr	r2, [pc, #340]	; (8006ed4 <HAL_DMA_IRQHandler+0x42c>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d009      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x2ee>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a54      	ldr	r2, [pc, #336]	; (8006ed8 <HAL_DMA_IRQHandler+0x430>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d004      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x2ee>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a52      	ldr	r2, [pc, #328]	; (8006edc <HAL_DMA_IRQHandler+0x434>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d10a      	bne.n	8006dac <HAL_DMA_IRQHandler+0x304>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	bf14      	ite	ne
 8006da4:	2301      	movne	r3, #1
 8006da6:	2300      	moveq	r3, #0
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	e003      	b.n	8006db4 <HAL_DMA_IRQHandler+0x30c>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2300      	movs	r3, #0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00d      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dbc:	f003 031f 	and.w	r3, r3, #31
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	409a      	lsls	r2, r3
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dcc:	f043 0202 	orr.w	r2, r3, #2
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd8:	f003 031f 	and.w	r3, r3, #31
 8006ddc:	2204      	movs	r2, #4
 8006dde:	409a      	lsls	r2, r3
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	4013      	ands	r3, r2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 808f 	beq.w	8006f08 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a2c      	ldr	r2, [pc, #176]	; (8006ea0 <HAL_DMA_IRQHandler+0x3f8>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d04a      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x3e2>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a2a      	ldr	r2, [pc, #168]	; (8006ea4 <HAL_DMA_IRQHandler+0x3fc>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d045      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x3e2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a29      	ldr	r2, [pc, #164]	; (8006ea8 <HAL_DMA_IRQHandler+0x400>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d040      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x3e2>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a27      	ldr	r2, [pc, #156]	; (8006eac <HAL_DMA_IRQHandler+0x404>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d03b      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x3e2>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a26      	ldr	r2, [pc, #152]	; (8006eb0 <HAL_DMA_IRQHandler+0x408>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d036      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x3e2>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a24      	ldr	r2, [pc, #144]	; (8006eb4 <HAL_DMA_IRQHandler+0x40c>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d031      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x3e2>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a23      	ldr	r2, [pc, #140]	; (8006eb8 <HAL_DMA_IRQHandler+0x410>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d02c      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x3e2>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a21      	ldr	r2, [pc, #132]	; (8006ebc <HAL_DMA_IRQHandler+0x414>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d027      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x3e2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a20      	ldr	r2, [pc, #128]	; (8006ec0 <HAL_DMA_IRQHandler+0x418>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d022      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x3e2>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a1e      	ldr	r2, [pc, #120]	; (8006ec4 <HAL_DMA_IRQHandler+0x41c>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d01d      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x3e2>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a1d      	ldr	r2, [pc, #116]	; (8006ec8 <HAL_DMA_IRQHandler+0x420>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d018      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x3e2>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a1b      	ldr	r2, [pc, #108]	; (8006ecc <HAL_DMA_IRQHandler+0x424>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d013      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x3e2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a1a      	ldr	r2, [pc, #104]	; (8006ed0 <HAL_DMA_IRQHandler+0x428>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00e      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x3e2>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a18      	ldr	r2, [pc, #96]	; (8006ed4 <HAL_DMA_IRQHandler+0x42c>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d009      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x3e2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a17      	ldr	r2, [pc, #92]	; (8006ed8 <HAL_DMA_IRQHandler+0x430>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d004      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x3e2>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a15      	ldr	r2, [pc, #84]	; (8006edc <HAL_DMA_IRQHandler+0x434>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d12a      	bne.n	8006ee0 <HAL_DMA_IRQHandler+0x438>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bf14      	ite	ne
 8006e98:	2301      	movne	r3, #1
 8006e9a:	2300      	moveq	r3, #0
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	e023      	b.n	8006ee8 <HAL_DMA_IRQHandler+0x440>
 8006ea0:	40020010 	.word	0x40020010
 8006ea4:	40020028 	.word	0x40020028
 8006ea8:	40020040 	.word	0x40020040
 8006eac:	40020058 	.word	0x40020058
 8006eb0:	40020070 	.word	0x40020070
 8006eb4:	40020088 	.word	0x40020088
 8006eb8:	400200a0 	.word	0x400200a0
 8006ebc:	400200b8 	.word	0x400200b8
 8006ec0:	40020410 	.word	0x40020410
 8006ec4:	40020428 	.word	0x40020428
 8006ec8:	40020440 	.word	0x40020440
 8006ecc:	40020458 	.word	0x40020458
 8006ed0:	40020470 	.word	0x40020470
 8006ed4:	40020488 	.word	0x40020488
 8006ed8:	400204a0 	.word	0x400204a0
 8006edc:	400204b8 	.word	0x400204b8
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00d      	beq.n	8006f08 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef0:	f003 031f 	and.w	r3, r3, #31
 8006ef4:	2204      	movs	r2, #4
 8006ef6:	409a      	lsls	r2, r3
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f00:	f043 0204 	orr.w	r2, r3, #4
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f0c:	f003 031f 	and.w	r3, r3, #31
 8006f10:	2210      	movs	r2, #16
 8006f12:	409a      	lsls	r2, r3
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	4013      	ands	r3, r2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 80a6 	beq.w	800706a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a85      	ldr	r2, [pc, #532]	; (8007138 <HAL_DMA_IRQHandler+0x690>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d04a      	beq.n	8006fbe <HAL_DMA_IRQHandler+0x516>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a83      	ldr	r2, [pc, #524]	; (800713c <HAL_DMA_IRQHandler+0x694>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d045      	beq.n	8006fbe <HAL_DMA_IRQHandler+0x516>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a82      	ldr	r2, [pc, #520]	; (8007140 <HAL_DMA_IRQHandler+0x698>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d040      	beq.n	8006fbe <HAL_DMA_IRQHandler+0x516>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a80      	ldr	r2, [pc, #512]	; (8007144 <HAL_DMA_IRQHandler+0x69c>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d03b      	beq.n	8006fbe <HAL_DMA_IRQHandler+0x516>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a7f      	ldr	r2, [pc, #508]	; (8007148 <HAL_DMA_IRQHandler+0x6a0>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d036      	beq.n	8006fbe <HAL_DMA_IRQHandler+0x516>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a7d      	ldr	r2, [pc, #500]	; (800714c <HAL_DMA_IRQHandler+0x6a4>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d031      	beq.n	8006fbe <HAL_DMA_IRQHandler+0x516>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a7c      	ldr	r2, [pc, #496]	; (8007150 <HAL_DMA_IRQHandler+0x6a8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d02c      	beq.n	8006fbe <HAL_DMA_IRQHandler+0x516>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a7a      	ldr	r2, [pc, #488]	; (8007154 <HAL_DMA_IRQHandler+0x6ac>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d027      	beq.n	8006fbe <HAL_DMA_IRQHandler+0x516>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a79      	ldr	r2, [pc, #484]	; (8007158 <HAL_DMA_IRQHandler+0x6b0>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d022      	beq.n	8006fbe <HAL_DMA_IRQHandler+0x516>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a77      	ldr	r2, [pc, #476]	; (800715c <HAL_DMA_IRQHandler+0x6b4>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d01d      	beq.n	8006fbe <HAL_DMA_IRQHandler+0x516>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a76      	ldr	r2, [pc, #472]	; (8007160 <HAL_DMA_IRQHandler+0x6b8>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d018      	beq.n	8006fbe <HAL_DMA_IRQHandler+0x516>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a74      	ldr	r2, [pc, #464]	; (8007164 <HAL_DMA_IRQHandler+0x6bc>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d013      	beq.n	8006fbe <HAL_DMA_IRQHandler+0x516>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a73      	ldr	r2, [pc, #460]	; (8007168 <HAL_DMA_IRQHandler+0x6c0>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d00e      	beq.n	8006fbe <HAL_DMA_IRQHandler+0x516>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a71      	ldr	r2, [pc, #452]	; (800716c <HAL_DMA_IRQHandler+0x6c4>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d009      	beq.n	8006fbe <HAL_DMA_IRQHandler+0x516>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a70      	ldr	r2, [pc, #448]	; (8007170 <HAL_DMA_IRQHandler+0x6c8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d004      	beq.n	8006fbe <HAL_DMA_IRQHandler+0x516>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a6e      	ldr	r2, [pc, #440]	; (8007174 <HAL_DMA_IRQHandler+0x6cc>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d10a      	bne.n	8006fd4 <HAL_DMA_IRQHandler+0x52c>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	bf14      	ite	ne
 8006fcc:	2301      	movne	r3, #1
 8006fce:	2300      	moveq	r3, #0
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	e009      	b.n	8006fe8 <HAL_DMA_IRQHandler+0x540>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0304 	and.w	r3, r3, #4
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	bf14      	ite	ne
 8006fe2:	2301      	movne	r3, #1
 8006fe4:	2300      	moveq	r3, #0
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d03e      	beq.n	800706a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff0:	f003 031f 	and.w	r3, r3, #31
 8006ff4:	2210      	movs	r2, #16
 8006ff6:	409a      	lsls	r2, r3
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d018      	beq.n	800703c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d108      	bne.n	800702a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701c:	2b00      	cmp	r3, #0
 800701e:	d024      	beq.n	800706a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	4798      	blx	r3
 8007028:	e01f      	b.n	800706a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800702e:	2b00      	cmp	r3, #0
 8007030:	d01b      	beq.n	800706a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	4798      	blx	r3
 800703a:	e016      	b.n	800706a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007046:	2b00      	cmp	r3, #0
 8007048:	d107      	bne.n	800705a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0208 	bic.w	r2, r2, #8
 8007058:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800706e:	f003 031f 	and.w	r3, r3, #31
 8007072:	2220      	movs	r2, #32
 8007074:	409a      	lsls	r2, r3
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	4013      	ands	r3, r2
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 8110 	beq.w	80072a0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a2c      	ldr	r2, [pc, #176]	; (8007138 <HAL_DMA_IRQHandler+0x690>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d04a      	beq.n	8007120 <HAL_DMA_IRQHandler+0x678>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a2b      	ldr	r2, [pc, #172]	; (800713c <HAL_DMA_IRQHandler+0x694>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d045      	beq.n	8007120 <HAL_DMA_IRQHandler+0x678>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a29      	ldr	r2, [pc, #164]	; (8007140 <HAL_DMA_IRQHandler+0x698>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d040      	beq.n	8007120 <HAL_DMA_IRQHandler+0x678>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a28      	ldr	r2, [pc, #160]	; (8007144 <HAL_DMA_IRQHandler+0x69c>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d03b      	beq.n	8007120 <HAL_DMA_IRQHandler+0x678>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a26      	ldr	r2, [pc, #152]	; (8007148 <HAL_DMA_IRQHandler+0x6a0>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d036      	beq.n	8007120 <HAL_DMA_IRQHandler+0x678>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a25      	ldr	r2, [pc, #148]	; (800714c <HAL_DMA_IRQHandler+0x6a4>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d031      	beq.n	8007120 <HAL_DMA_IRQHandler+0x678>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a23      	ldr	r2, [pc, #140]	; (8007150 <HAL_DMA_IRQHandler+0x6a8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d02c      	beq.n	8007120 <HAL_DMA_IRQHandler+0x678>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a22      	ldr	r2, [pc, #136]	; (8007154 <HAL_DMA_IRQHandler+0x6ac>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d027      	beq.n	8007120 <HAL_DMA_IRQHandler+0x678>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a20      	ldr	r2, [pc, #128]	; (8007158 <HAL_DMA_IRQHandler+0x6b0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d022      	beq.n	8007120 <HAL_DMA_IRQHandler+0x678>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a1f      	ldr	r2, [pc, #124]	; (800715c <HAL_DMA_IRQHandler+0x6b4>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d01d      	beq.n	8007120 <HAL_DMA_IRQHandler+0x678>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a1d      	ldr	r2, [pc, #116]	; (8007160 <HAL_DMA_IRQHandler+0x6b8>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d018      	beq.n	8007120 <HAL_DMA_IRQHandler+0x678>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a1c      	ldr	r2, [pc, #112]	; (8007164 <HAL_DMA_IRQHandler+0x6bc>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d013      	beq.n	8007120 <HAL_DMA_IRQHandler+0x678>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a1a      	ldr	r2, [pc, #104]	; (8007168 <HAL_DMA_IRQHandler+0x6c0>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d00e      	beq.n	8007120 <HAL_DMA_IRQHandler+0x678>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a19      	ldr	r2, [pc, #100]	; (800716c <HAL_DMA_IRQHandler+0x6c4>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d009      	beq.n	8007120 <HAL_DMA_IRQHandler+0x678>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a17      	ldr	r2, [pc, #92]	; (8007170 <HAL_DMA_IRQHandler+0x6c8>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d004      	beq.n	8007120 <HAL_DMA_IRQHandler+0x678>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a16      	ldr	r2, [pc, #88]	; (8007174 <HAL_DMA_IRQHandler+0x6cc>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d12b      	bne.n	8007178 <HAL_DMA_IRQHandler+0x6d0>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0310 	and.w	r3, r3, #16
 800712a:	2b00      	cmp	r3, #0
 800712c:	bf14      	ite	ne
 800712e:	2301      	movne	r3, #1
 8007130:	2300      	moveq	r3, #0
 8007132:	b2db      	uxtb	r3, r3
 8007134:	e02a      	b.n	800718c <HAL_DMA_IRQHandler+0x6e4>
 8007136:	bf00      	nop
 8007138:	40020010 	.word	0x40020010
 800713c:	40020028 	.word	0x40020028
 8007140:	40020040 	.word	0x40020040
 8007144:	40020058 	.word	0x40020058
 8007148:	40020070 	.word	0x40020070
 800714c:	40020088 	.word	0x40020088
 8007150:	400200a0 	.word	0x400200a0
 8007154:	400200b8 	.word	0x400200b8
 8007158:	40020410 	.word	0x40020410
 800715c:	40020428 	.word	0x40020428
 8007160:	40020440 	.word	0x40020440
 8007164:	40020458 	.word	0x40020458
 8007168:	40020470 	.word	0x40020470
 800716c:	40020488 	.word	0x40020488
 8007170:	400204a0 	.word	0x400204a0
 8007174:	400204b8 	.word	0x400204b8
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	bf14      	ite	ne
 8007186:	2301      	movne	r3, #1
 8007188:	2300      	moveq	r3, #0
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 8087 	beq.w	80072a0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007196:	f003 031f 	and.w	r3, r3, #31
 800719a:	2220      	movs	r2, #32
 800719c:	409a      	lsls	r2, r3
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d139      	bne.n	8007222 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0216 	bic.w	r2, r2, #22
 80071bc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	695a      	ldr	r2, [r3, #20]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071cc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d103      	bne.n	80071de <HAL_DMA_IRQHandler+0x736>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d007      	beq.n	80071ee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0208 	bic.w	r2, r2, #8
 80071ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f2:	f003 031f 	and.w	r3, r3, #31
 80071f6:	223f      	movs	r2, #63	; 0x3f
 80071f8:	409a      	lsls	r2, r3
 80071fa:	6a3b      	ldr	r3, [r7, #32]
 80071fc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 834a 	beq.w	80078ac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	4798      	blx	r3
          }
          return;
 8007220:	e344      	b.n	80078ac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d018      	beq.n	8007262 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d108      	bne.n	8007250 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007242:	2b00      	cmp	r3, #0
 8007244:	d02c      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	4798      	blx	r3
 800724e:	e027      	b.n	80072a0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007254:	2b00      	cmp	r3, #0
 8007256:	d023      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	4798      	blx	r3
 8007260:	e01e      	b.n	80072a0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10f      	bne.n	8007290 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 0210 	bic.w	r2, r2, #16
 800727e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 8306 	beq.w	80078b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 8088 	beq.w	80073c8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2204      	movs	r2, #4
 80072bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a7a      	ldr	r2, [pc, #488]	; (80074b0 <HAL_DMA_IRQHandler+0xa08>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d04a      	beq.n	8007360 <HAL_DMA_IRQHandler+0x8b8>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a79      	ldr	r2, [pc, #484]	; (80074b4 <HAL_DMA_IRQHandler+0xa0c>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d045      	beq.n	8007360 <HAL_DMA_IRQHandler+0x8b8>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a77      	ldr	r2, [pc, #476]	; (80074b8 <HAL_DMA_IRQHandler+0xa10>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d040      	beq.n	8007360 <HAL_DMA_IRQHandler+0x8b8>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a76      	ldr	r2, [pc, #472]	; (80074bc <HAL_DMA_IRQHandler+0xa14>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d03b      	beq.n	8007360 <HAL_DMA_IRQHandler+0x8b8>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a74      	ldr	r2, [pc, #464]	; (80074c0 <HAL_DMA_IRQHandler+0xa18>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d036      	beq.n	8007360 <HAL_DMA_IRQHandler+0x8b8>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a73      	ldr	r2, [pc, #460]	; (80074c4 <HAL_DMA_IRQHandler+0xa1c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d031      	beq.n	8007360 <HAL_DMA_IRQHandler+0x8b8>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a71      	ldr	r2, [pc, #452]	; (80074c8 <HAL_DMA_IRQHandler+0xa20>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d02c      	beq.n	8007360 <HAL_DMA_IRQHandler+0x8b8>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a70      	ldr	r2, [pc, #448]	; (80074cc <HAL_DMA_IRQHandler+0xa24>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d027      	beq.n	8007360 <HAL_DMA_IRQHandler+0x8b8>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a6e      	ldr	r2, [pc, #440]	; (80074d0 <HAL_DMA_IRQHandler+0xa28>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d022      	beq.n	8007360 <HAL_DMA_IRQHandler+0x8b8>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a6d      	ldr	r2, [pc, #436]	; (80074d4 <HAL_DMA_IRQHandler+0xa2c>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d01d      	beq.n	8007360 <HAL_DMA_IRQHandler+0x8b8>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a6b      	ldr	r2, [pc, #428]	; (80074d8 <HAL_DMA_IRQHandler+0xa30>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d018      	beq.n	8007360 <HAL_DMA_IRQHandler+0x8b8>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a6a      	ldr	r2, [pc, #424]	; (80074dc <HAL_DMA_IRQHandler+0xa34>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d013      	beq.n	8007360 <HAL_DMA_IRQHandler+0x8b8>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a68      	ldr	r2, [pc, #416]	; (80074e0 <HAL_DMA_IRQHandler+0xa38>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d00e      	beq.n	8007360 <HAL_DMA_IRQHandler+0x8b8>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a67      	ldr	r2, [pc, #412]	; (80074e4 <HAL_DMA_IRQHandler+0xa3c>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d009      	beq.n	8007360 <HAL_DMA_IRQHandler+0x8b8>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a65      	ldr	r2, [pc, #404]	; (80074e8 <HAL_DMA_IRQHandler+0xa40>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d004      	beq.n	8007360 <HAL_DMA_IRQHandler+0x8b8>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a64      	ldr	r2, [pc, #400]	; (80074ec <HAL_DMA_IRQHandler+0xa44>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d108      	bne.n	8007372 <HAL_DMA_IRQHandler+0x8ca>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 0201 	bic.w	r2, r2, #1
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	e007      	b.n	8007382 <HAL_DMA_IRQHandler+0x8da>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 0201 	bic.w	r2, r2, #1
 8007380:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	3301      	adds	r3, #1
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738a:	429a      	cmp	r2, r3
 800738c:	d307      	bcc.n	800739e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1f2      	bne.n	8007382 <HAL_DMA_IRQHandler+0x8da>
 800739c:	e000      	b.n	80073a0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800739e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d004      	beq.n	80073b8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2203      	movs	r2, #3
 80073b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80073b6:	e003      	b.n	80073c0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 8272 	beq.w	80078b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	4798      	blx	r3
 80073da:	e26c      	b.n	80078b6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a43      	ldr	r2, [pc, #268]	; (80074f0 <HAL_DMA_IRQHandler+0xa48>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d022      	beq.n	800742c <HAL_DMA_IRQHandler+0x984>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a42      	ldr	r2, [pc, #264]	; (80074f4 <HAL_DMA_IRQHandler+0xa4c>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d01d      	beq.n	800742c <HAL_DMA_IRQHandler+0x984>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a40      	ldr	r2, [pc, #256]	; (80074f8 <HAL_DMA_IRQHandler+0xa50>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d018      	beq.n	800742c <HAL_DMA_IRQHandler+0x984>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a3f      	ldr	r2, [pc, #252]	; (80074fc <HAL_DMA_IRQHandler+0xa54>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d013      	beq.n	800742c <HAL_DMA_IRQHandler+0x984>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a3d      	ldr	r2, [pc, #244]	; (8007500 <HAL_DMA_IRQHandler+0xa58>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d00e      	beq.n	800742c <HAL_DMA_IRQHandler+0x984>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a3c      	ldr	r2, [pc, #240]	; (8007504 <HAL_DMA_IRQHandler+0xa5c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d009      	beq.n	800742c <HAL_DMA_IRQHandler+0x984>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a3a      	ldr	r2, [pc, #232]	; (8007508 <HAL_DMA_IRQHandler+0xa60>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d004      	beq.n	800742c <HAL_DMA_IRQHandler+0x984>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a39      	ldr	r2, [pc, #228]	; (800750c <HAL_DMA_IRQHandler+0xa64>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d101      	bne.n	8007430 <HAL_DMA_IRQHandler+0x988>
 800742c:	2301      	movs	r3, #1
 800742e:	e000      	b.n	8007432 <HAL_DMA_IRQHandler+0x98a>
 8007430:	2300      	movs	r3, #0
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 823f 	beq.w	80078b6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007444:	f003 031f 	and.w	r3, r3, #31
 8007448:	2204      	movs	r2, #4
 800744a:	409a      	lsls	r2, r3
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	4013      	ands	r3, r2
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 80cd 	beq.w	80075f0 <HAL_DMA_IRQHandler+0xb48>
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 80c7 	beq.w	80075f0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007466:	f003 031f 	and.w	r3, r3, #31
 800746a:	2204      	movs	r2, #4
 800746c:	409a      	lsls	r2, r3
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d049      	beq.n	8007510 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d109      	bne.n	800749a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 8210 	beq.w	80078b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007498:	e20a      	b.n	80078b0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 8206 	beq.w	80078b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074ac:	e200      	b.n	80078b0 <HAL_DMA_IRQHandler+0xe08>
 80074ae:	bf00      	nop
 80074b0:	40020010 	.word	0x40020010
 80074b4:	40020028 	.word	0x40020028
 80074b8:	40020040 	.word	0x40020040
 80074bc:	40020058 	.word	0x40020058
 80074c0:	40020070 	.word	0x40020070
 80074c4:	40020088 	.word	0x40020088
 80074c8:	400200a0 	.word	0x400200a0
 80074cc:	400200b8 	.word	0x400200b8
 80074d0:	40020410 	.word	0x40020410
 80074d4:	40020428 	.word	0x40020428
 80074d8:	40020440 	.word	0x40020440
 80074dc:	40020458 	.word	0x40020458
 80074e0:	40020470 	.word	0x40020470
 80074e4:	40020488 	.word	0x40020488
 80074e8:	400204a0 	.word	0x400204a0
 80074ec:	400204b8 	.word	0x400204b8
 80074f0:	58025408 	.word	0x58025408
 80074f4:	5802541c 	.word	0x5802541c
 80074f8:	58025430 	.word	0x58025430
 80074fc:	58025444 	.word	0x58025444
 8007500:	58025458 	.word	0x58025458
 8007504:	5802546c 	.word	0x5802546c
 8007508:	58025480 	.word	0x58025480
 800750c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f003 0320 	and.w	r3, r3, #32
 8007516:	2b00      	cmp	r3, #0
 8007518:	d160      	bne.n	80075dc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a7f      	ldr	r2, [pc, #508]	; (800771c <HAL_DMA_IRQHandler+0xc74>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d04a      	beq.n	80075ba <HAL_DMA_IRQHandler+0xb12>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a7d      	ldr	r2, [pc, #500]	; (8007720 <HAL_DMA_IRQHandler+0xc78>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d045      	beq.n	80075ba <HAL_DMA_IRQHandler+0xb12>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a7c      	ldr	r2, [pc, #496]	; (8007724 <HAL_DMA_IRQHandler+0xc7c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d040      	beq.n	80075ba <HAL_DMA_IRQHandler+0xb12>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a7a      	ldr	r2, [pc, #488]	; (8007728 <HAL_DMA_IRQHandler+0xc80>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d03b      	beq.n	80075ba <HAL_DMA_IRQHandler+0xb12>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a79      	ldr	r2, [pc, #484]	; (800772c <HAL_DMA_IRQHandler+0xc84>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d036      	beq.n	80075ba <HAL_DMA_IRQHandler+0xb12>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a77      	ldr	r2, [pc, #476]	; (8007730 <HAL_DMA_IRQHandler+0xc88>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d031      	beq.n	80075ba <HAL_DMA_IRQHandler+0xb12>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a76      	ldr	r2, [pc, #472]	; (8007734 <HAL_DMA_IRQHandler+0xc8c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d02c      	beq.n	80075ba <HAL_DMA_IRQHandler+0xb12>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a74      	ldr	r2, [pc, #464]	; (8007738 <HAL_DMA_IRQHandler+0xc90>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d027      	beq.n	80075ba <HAL_DMA_IRQHandler+0xb12>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a73      	ldr	r2, [pc, #460]	; (800773c <HAL_DMA_IRQHandler+0xc94>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d022      	beq.n	80075ba <HAL_DMA_IRQHandler+0xb12>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a71      	ldr	r2, [pc, #452]	; (8007740 <HAL_DMA_IRQHandler+0xc98>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d01d      	beq.n	80075ba <HAL_DMA_IRQHandler+0xb12>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a70      	ldr	r2, [pc, #448]	; (8007744 <HAL_DMA_IRQHandler+0xc9c>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d018      	beq.n	80075ba <HAL_DMA_IRQHandler+0xb12>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a6e      	ldr	r2, [pc, #440]	; (8007748 <HAL_DMA_IRQHandler+0xca0>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d013      	beq.n	80075ba <HAL_DMA_IRQHandler+0xb12>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a6d      	ldr	r2, [pc, #436]	; (800774c <HAL_DMA_IRQHandler+0xca4>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00e      	beq.n	80075ba <HAL_DMA_IRQHandler+0xb12>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a6b      	ldr	r2, [pc, #428]	; (8007750 <HAL_DMA_IRQHandler+0xca8>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d009      	beq.n	80075ba <HAL_DMA_IRQHandler+0xb12>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a6a      	ldr	r2, [pc, #424]	; (8007754 <HAL_DMA_IRQHandler+0xcac>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d004      	beq.n	80075ba <HAL_DMA_IRQHandler+0xb12>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a68      	ldr	r2, [pc, #416]	; (8007758 <HAL_DMA_IRQHandler+0xcb0>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d108      	bne.n	80075cc <HAL_DMA_IRQHandler+0xb24>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 0208 	bic.w	r2, r2, #8
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	e007      	b.n	80075dc <HAL_DMA_IRQHandler+0xb34>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0204 	bic.w	r2, r2, #4
 80075da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 8165 	beq.w	80078b0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075ee:	e15f      	b.n	80078b0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075f4:	f003 031f 	and.w	r3, r3, #31
 80075f8:	2202      	movs	r2, #2
 80075fa:	409a      	lsls	r2, r3
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	4013      	ands	r3, r2
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 80c5 	beq.w	8007790 <HAL_DMA_IRQHandler+0xce8>
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 80bf 	beq.w	8007790 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007616:	f003 031f 	and.w	r3, r3, #31
 800761a:	2202      	movs	r2, #2
 800761c:	409a      	lsls	r2, r3
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d018      	beq.n	800765e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d109      	bne.n	800764a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 813a 	beq.w	80078b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007648:	e134      	b.n	80078b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 8130 	beq.w	80078b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800765c:	e12a      	b.n	80078b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	f003 0320 	and.w	r3, r3, #32
 8007664:	2b00      	cmp	r3, #0
 8007666:	f040 8089 	bne.w	800777c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a2b      	ldr	r2, [pc, #172]	; (800771c <HAL_DMA_IRQHandler+0xc74>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d04a      	beq.n	800770a <HAL_DMA_IRQHandler+0xc62>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a29      	ldr	r2, [pc, #164]	; (8007720 <HAL_DMA_IRQHandler+0xc78>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d045      	beq.n	800770a <HAL_DMA_IRQHandler+0xc62>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a28      	ldr	r2, [pc, #160]	; (8007724 <HAL_DMA_IRQHandler+0xc7c>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d040      	beq.n	800770a <HAL_DMA_IRQHandler+0xc62>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a26      	ldr	r2, [pc, #152]	; (8007728 <HAL_DMA_IRQHandler+0xc80>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d03b      	beq.n	800770a <HAL_DMA_IRQHandler+0xc62>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a25      	ldr	r2, [pc, #148]	; (800772c <HAL_DMA_IRQHandler+0xc84>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d036      	beq.n	800770a <HAL_DMA_IRQHandler+0xc62>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a23      	ldr	r2, [pc, #140]	; (8007730 <HAL_DMA_IRQHandler+0xc88>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d031      	beq.n	800770a <HAL_DMA_IRQHandler+0xc62>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a22      	ldr	r2, [pc, #136]	; (8007734 <HAL_DMA_IRQHandler+0xc8c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d02c      	beq.n	800770a <HAL_DMA_IRQHandler+0xc62>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a20      	ldr	r2, [pc, #128]	; (8007738 <HAL_DMA_IRQHandler+0xc90>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d027      	beq.n	800770a <HAL_DMA_IRQHandler+0xc62>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a1f      	ldr	r2, [pc, #124]	; (800773c <HAL_DMA_IRQHandler+0xc94>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d022      	beq.n	800770a <HAL_DMA_IRQHandler+0xc62>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a1d      	ldr	r2, [pc, #116]	; (8007740 <HAL_DMA_IRQHandler+0xc98>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d01d      	beq.n	800770a <HAL_DMA_IRQHandler+0xc62>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a1c      	ldr	r2, [pc, #112]	; (8007744 <HAL_DMA_IRQHandler+0xc9c>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d018      	beq.n	800770a <HAL_DMA_IRQHandler+0xc62>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a1a      	ldr	r2, [pc, #104]	; (8007748 <HAL_DMA_IRQHandler+0xca0>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d013      	beq.n	800770a <HAL_DMA_IRQHandler+0xc62>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a19      	ldr	r2, [pc, #100]	; (800774c <HAL_DMA_IRQHandler+0xca4>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d00e      	beq.n	800770a <HAL_DMA_IRQHandler+0xc62>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a17      	ldr	r2, [pc, #92]	; (8007750 <HAL_DMA_IRQHandler+0xca8>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d009      	beq.n	800770a <HAL_DMA_IRQHandler+0xc62>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a16      	ldr	r2, [pc, #88]	; (8007754 <HAL_DMA_IRQHandler+0xcac>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d004      	beq.n	800770a <HAL_DMA_IRQHandler+0xc62>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a14      	ldr	r2, [pc, #80]	; (8007758 <HAL_DMA_IRQHandler+0xcb0>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d128      	bne.n	800775c <HAL_DMA_IRQHandler+0xcb4>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 0214 	bic.w	r2, r2, #20
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	e027      	b.n	800776c <HAL_DMA_IRQHandler+0xcc4>
 800771c:	40020010 	.word	0x40020010
 8007720:	40020028 	.word	0x40020028
 8007724:	40020040 	.word	0x40020040
 8007728:	40020058 	.word	0x40020058
 800772c:	40020070 	.word	0x40020070
 8007730:	40020088 	.word	0x40020088
 8007734:	400200a0 	.word	0x400200a0
 8007738:	400200b8 	.word	0x400200b8
 800773c:	40020410 	.word	0x40020410
 8007740:	40020428 	.word	0x40020428
 8007744:	40020440 	.word	0x40020440
 8007748:	40020458 	.word	0x40020458
 800774c:	40020470 	.word	0x40020470
 8007750:	40020488 	.word	0x40020488
 8007754:	400204a0 	.word	0x400204a0
 8007758:	400204b8 	.word	0x400204b8
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 020a 	bic.w	r2, r2, #10
 800776a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 8097 	beq.w	80078b4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800778e:	e091      	b.n	80078b4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007794:	f003 031f 	and.w	r3, r3, #31
 8007798:	2208      	movs	r2, #8
 800779a:	409a      	lsls	r2, r3
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	4013      	ands	r3, r2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 8088 	beq.w	80078b6 <HAL_DMA_IRQHandler+0xe0e>
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f003 0308 	and.w	r3, r3, #8
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 8082 	beq.w	80078b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a41      	ldr	r2, [pc, #260]	; (80078bc <HAL_DMA_IRQHandler+0xe14>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d04a      	beq.n	8007852 <HAL_DMA_IRQHandler+0xdaa>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a3f      	ldr	r2, [pc, #252]	; (80078c0 <HAL_DMA_IRQHandler+0xe18>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d045      	beq.n	8007852 <HAL_DMA_IRQHandler+0xdaa>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a3e      	ldr	r2, [pc, #248]	; (80078c4 <HAL_DMA_IRQHandler+0xe1c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d040      	beq.n	8007852 <HAL_DMA_IRQHandler+0xdaa>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a3c      	ldr	r2, [pc, #240]	; (80078c8 <HAL_DMA_IRQHandler+0xe20>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d03b      	beq.n	8007852 <HAL_DMA_IRQHandler+0xdaa>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a3b      	ldr	r2, [pc, #236]	; (80078cc <HAL_DMA_IRQHandler+0xe24>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d036      	beq.n	8007852 <HAL_DMA_IRQHandler+0xdaa>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a39      	ldr	r2, [pc, #228]	; (80078d0 <HAL_DMA_IRQHandler+0xe28>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d031      	beq.n	8007852 <HAL_DMA_IRQHandler+0xdaa>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a38      	ldr	r2, [pc, #224]	; (80078d4 <HAL_DMA_IRQHandler+0xe2c>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d02c      	beq.n	8007852 <HAL_DMA_IRQHandler+0xdaa>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a36      	ldr	r2, [pc, #216]	; (80078d8 <HAL_DMA_IRQHandler+0xe30>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d027      	beq.n	8007852 <HAL_DMA_IRQHandler+0xdaa>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a35      	ldr	r2, [pc, #212]	; (80078dc <HAL_DMA_IRQHandler+0xe34>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d022      	beq.n	8007852 <HAL_DMA_IRQHandler+0xdaa>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a33      	ldr	r2, [pc, #204]	; (80078e0 <HAL_DMA_IRQHandler+0xe38>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d01d      	beq.n	8007852 <HAL_DMA_IRQHandler+0xdaa>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a32      	ldr	r2, [pc, #200]	; (80078e4 <HAL_DMA_IRQHandler+0xe3c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d018      	beq.n	8007852 <HAL_DMA_IRQHandler+0xdaa>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a30      	ldr	r2, [pc, #192]	; (80078e8 <HAL_DMA_IRQHandler+0xe40>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d013      	beq.n	8007852 <HAL_DMA_IRQHandler+0xdaa>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a2f      	ldr	r2, [pc, #188]	; (80078ec <HAL_DMA_IRQHandler+0xe44>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d00e      	beq.n	8007852 <HAL_DMA_IRQHandler+0xdaa>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a2d      	ldr	r2, [pc, #180]	; (80078f0 <HAL_DMA_IRQHandler+0xe48>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d009      	beq.n	8007852 <HAL_DMA_IRQHandler+0xdaa>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a2c      	ldr	r2, [pc, #176]	; (80078f4 <HAL_DMA_IRQHandler+0xe4c>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d004      	beq.n	8007852 <HAL_DMA_IRQHandler+0xdaa>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a2a      	ldr	r2, [pc, #168]	; (80078f8 <HAL_DMA_IRQHandler+0xe50>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d108      	bne.n	8007864 <HAL_DMA_IRQHandler+0xdbc>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 021c 	bic.w	r2, r2, #28
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	e007      	b.n	8007874 <HAL_DMA_IRQHandler+0xdcc>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f022 020e 	bic.w	r2, r2, #14
 8007872:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007878:	f003 031f 	and.w	r3, r3, #31
 800787c:	2201      	movs	r2, #1
 800787e:	409a      	lsls	r2, r3
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d009      	beq.n	80078b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4798      	blx	r3
 80078aa:	e004      	b.n	80078b6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80078ac:	bf00      	nop
 80078ae:	e002      	b.n	80078b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078b0:	bf00      	nop
 80078b2:	e000      	b.n	80078b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078b4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80078b6:	3728      	adds	r7, #40	; 0x28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	40020010 	.word	0x40020010
 80078c0:	40020028 	.word	0x40020028
 80078c4:	40020040 	.word	0x40020040
 80078c8:	40020058 	.word	0x40020058
 80078cc:	40020070 	.word	0x40020070
 80078d0:	40020088 	.word	0x40020088
 80078d4:	400200a0 	.word	0x400200a0
 80078d8:	400200b8 	.word	0x400200b8
 80078dc:	40020410 	.word	0x40020410
 80078e0:	40020428 	.word	0x40020428
 80078e4:	40020440 	.word	0x40020440
 80078e8:	40020458 	.word	0x40020458
 80078ec:	40020470 	.word	0x40020470
 80078f0:	40020488 	.word	0x40020488
 80078f4:	400204a0 	.word	0x400204a0
 80078f8:	400204b8 	.word	0x400204b8

080078fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800790e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007914:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a7f      	ldr	r2, [pc, #508]	; (8007b18 <DMA_SetConfig+0x21c>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d072      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a7d      	ldr	r2, [pc, #500]	; (8007b1c <DMA_SetConfig+0x220>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d06d      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a7c      	ldr	r2, [pc, #496]	; (8007b20 <DMA_SetConfig+0x224>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d068      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a7a      	ldr	r2, [pc, #488]	; (8007b24 <DMA_SetConfig+0x228>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d063      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a79      	ldr	r2, [pc, #484]	; (8007b28 <DMA_SetConfig+0x22c>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d05e      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a77      	ldr	r2, [pc, #476]	; (8007b2c <DMA_SetConfig+0x230>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d059      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a76      	ldr	r2, [pc, #472]	; (8007b30 <DMA_SetConfig+0x234>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d054      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a74      	ldr	r2, [pc, #464]	; (8007b34 <DMA_SetConfig+0x238>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d04f      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a73      	ldr	r2, [pc, #460]	; (8007b38 <DMA_SetConfig+0x23c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d04a      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a71      	ldr	r2, [pc, #452]	; (8007b3c <DMA_SetConfig+0x240>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d045      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a70      	ldr	r2, [pc, #448]	; (8007b40 <DMA_SetConfig+0x244>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d040      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a6e      	ldr	r2, [pc, #440]	; (8007b44 <DMA_SetConfig+0x248>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d03b      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a6d      	ldr	r2, [pc, #436]	; (8007b48 <DMA_SetConfig+0x24c>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d036      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a6b      	ldr	r2, [pc, #428]	; (8007b4c <DMA_SetConfig+0x250>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d031      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a6a      	ldr	r2, [pc, #424]	; (8007b50 <DMA_SetConfig+0x254>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d02c      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a68      	ldr	r2, [pc, #416]	; (8007b54 <DMA_SetConfig+0x258>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d027      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a67      	ldr	r2, [pc, #412]	; (8007b58 <DMA_SetConfig+0x25c>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d022      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a65      	ldr	r2, [pc, #404]	; (8007b5c <DMA_SetConfig+0x260>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d01d      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a64      	ldr	r2, [pc, #400]	; (8007b60 <DMA_SetConfig+0x264>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d018      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a62      	ldr	r2, [pc, #392]	; (8007b64 <DMA_SetConfig+0x268>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d013      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a61      	ldr	r2, [pc, #388]	; (8007b68 <DMA_SetConfig+0x26c>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d00e      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a5f      	ldr	r2, [pc, #380]	; (8007b6c <DMA_SetConfig+0x270>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d009      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a5e      	ldr	r2, [pc, #376]	; (8007b70 <DMA_SetConfig+0x274>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d004      	beq.n	8007a06 <DMA_SetConfig+0x10a>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a5c      	ldr	r2, [pc, #368]	; (8007b74 <DMA_SetConfig+0x278>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d101      	bne.n	8007a0a <DMA_SetConfig+0x10e>
 8007a06:	2301      	movs	r3, #1
 8007a08:	e000      	b.n	8007a0c <DMA_SetConfig+0x110>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00d      	beq.n	8007a2c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a18:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d004      	beq.n	8007a2c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007a2a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a39      	ldr	r2, [pc, #228]	; (8007b18 <DMA_SetConfig+0x21c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d04a      	beq.n	8007acc <DMA_SetConfig+0x1d0>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a38      	ldr	r2, [pc, #224]	; (8007b1c <DMA_SetConfig+0x220>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d045      	beq.n	8007acc <DMA_SetConfig+0x1d0>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a36      	ldr	r2, [pc, #216]	; (8007b20 <DMA_SetConfig+0x224>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d040      	beq.n	8007acc <DMA_SetConfig+0x1d0>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a35      	ldr	r2, [pc, #212]	; (8007b24 <DMA_SetConfig+0x228>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d03b      	beq.n	8007acc <DMA_SetConfig+0x1d0>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a33      	ldr	r2, [pc, #204]	; (8007b28 <DMA_SetConfig+0x22c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d036      	beq.n	8007acc <DMA_SetConfig+0x1d0>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a32      	ldr	r2, [pc, #200]	; (8007b2c <DMA_SetConfig+0x230>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d031      	beq.n	8007acc <DMA_SetConfig+0x1d0>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a30      	ldr	r2, [pc, #192]	; (8007b30 <DMA_SetConfig+0x234>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d02c      	beq.n	8007acc <DMA_SetConfig+0x1d0>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a2f      	ldr	r2, [pc, #188]	; (8007b34 <DMA_SetConfig+0x238>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d027      	beq.n	8007acc <DMA_SetConfig+0x1d0>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a2d      	ldr	r2, [pc, #180]	; (8007b38 <DMA_SetConfig+0x23c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d022      	beq.n	8007acc <DMA_SetConfig+0x1d0>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a2c      	ldr	r2, [pc, #176]	; (8007b3c <DMA_SetConfig+0x240>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d01d      	beq.n	8007acc <DMA_SetConfig+0x1d0>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a2a      	ldr	r2, [pc, #168]	; (8007b40 <DMA_SetConfig+0x244>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d018      	beq.n	8007acc <DMA_SetConfig+0x1d0>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a29      	ldr	r2, [pc, #164]	; (8007b44 <DMA_SetConfig+0x248>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d013      	beq.n	8007acc <DMA_SetConfig+0x1d0>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a27      	ldr	r2, [pc, #156]	; (8007b48 <DMA_SetConfig+0x24c>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d00e      	beq.n	8007acc <DMA_SetConfig+0x1d0>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a26      	ldr	r2, [pc, #152]	; (8007b4c <DMA_SetConfig+0x250>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d009      	beq.n	8007acc <DMA_SetConfig+0x1d0>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a24      	ldr	r2, [pc, #144]	; (8007b50 <DMA_SetConfig+0x254>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d004      	beq.n	8007acc <DMA_SetConfig+0x1d0>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a23      	ldr	r2, [pc, #140]	; (8007b54 <DMA_SetConfig+0x258>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d101      	bne.n	8007ad0 <DMA_SetConfig+0x1d4>
 8007acc:	2301      	movs	r3, #1
 8007ace:	e000      	b.n	8007ad2 <DMA_SetConfig+0x1d6>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d059      	beq.n	8007b8a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ada:	f003 031f 	and.w	r3, r3, #31
 8007ade:	223f      	movs	r2, #63	; 0x3f
 8007ae0:	409a      	lsls	r2, r3
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007af4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	2b40      	cmp	r3, #64	; 0x40
 8007b04:	d138      	bne.n	8007b78 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007b16:	e086      	b.n	8007c26 <DMA_SetConfig+0x32a>
 8007b18:	40020010 	.word	0x40020010
 8007b1c:	40020028 	.word	0x40020028
 8007b20:	40020040 	.word	0x40020040
 8007b24:	40020058 	.word	0x40020058
 8007b28:	40020070 	.word	0x40020070
 8007b2c:	40020088 	.word	0x40020088
 8007b30:	400200a0 	.word	0x400200a0
 8007b34:	400200b8 	.word	0x400200b8
 8007b38:	40020410 	.word	0x40020410
 8007b3c:	40020428 	.word	0x40020428
 8007b40:	40020440 	.word	0x40020440
 8007b44:	40020458 	.word	0x40020458
 8007b48:	40020470 	.word	0x40020470
 8007b4c:	40020488 	.word	0x40020488
 8007b50:	400204a0 	.word	0x400204a0
 8007b54:	400204b8 	.word	0x400204b8
 8007b58:	58025408 	.word	0x58025408
 8007b5c:	5802541c 	.word	0x5802541c
 8007b60:	58025430 	.word	0x58025430
 8007b64:	58025444 	.word	0x58025444
 8007b68:	58025458 	.word	0x58025458
 8007b6c:	5802546c 	.word	0x5802546c
 8007b70:	58025480 	.word	0x58025480
 8007b74:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	60da      	str	r2, [r3, #12]
}
 8007b88:	e04d      	b.n	8007c26 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a29      	ldr	r2, [pc, #164]	; (8007c34 <DMA_SetConfig+0x338>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d022      	beq.n	8007bda <DMA_SetConfig+0x2de>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a27      	ldr	r2, [pc, #156]	; (8007c38 <DMA_SetConfig+0x33c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d01d      	beq.n	8007bda <DMA_SetConfig+0x2de>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a26      	ldr	r2, [pc, #152]	; (8007c3c <DMA_SetConfig+0x340>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d018      	beq.n	8007bda <DMA_SetConfig+0x2de>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a24      	ldr	r2, [pc, #144]	; (8007c40 <DMA_SetConfig+0x344>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d013      	beq.n	8007bda <DMA_SetConfig+0x2de>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a23      	ldr	r2, [pc, #140]	; (8007c44 <DMA_SetConfig+0x348>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d00e      	beq.n	8007bda <DMA_SetConfig+0x2de>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a21      	ldr	r2, [pc, #132]	; (8007c48 <DMA_SetConfig+0x34c>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d009      	beq.n	8007bda <DMA_SetConfig+0x2de>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a20      	ldr	r2, [pc, #128]	; (8007c4c <DMA_SetConfig+0x350>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d004      	beq.n	8007bda <DMA_SetConfig+0x2de>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a1e      	ldr	r2, [pc, #120]	; (8007c50 <DMA_SetConfig+0x354>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d101      	bne.n	8007bde <DMA_SetConfig+0x2e2>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e000      	b.n	8007be0 <DMA_SetConfig+0x2e4>
 8007bde:	2300      	movs	r3, #0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d020      	beq.n	8007c26 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be8:	f003 031f 	and.w	r3, r3, #31
 8007bec:	2201      	movs	r2, #1
 8007bee:	409a      	lsls	r2, r3
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	2b40      	cmp	r3, #64	; 0x40
 8007c02:	d108      	bne.n	8007c16 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	60da      	str	r2, [r3, #12]
}
 8007c14:	e007      	b.n	8007c26 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	60da      	str	r2, [r3, #12]
}
 8007c26:	bf00      	nop
 8007c28:	371c      	adds	r7, #28
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	58025408 	.word	0x58025408
 8007c38:	5802541c 	.word	0x5802541c
 8007c3c:	58025430 	.word	0x58025430
 8007c40:	58025444 	.word	0x58025444
 8007c44:	58025458 	.word	0x58025458
 8007c48:	5802546c 	.word	0x5802546c
 8007c4c:	58025480 	.word	0x58025480
 8007c50:	58025494 	.word	0x58025494

08007c54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a42      	ldr	r2, [pc, #264]	; (8007d6c <DMA_CalcBaseAndBitshift+0x118>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d04a      	beq.n	8007cfc <DMA_CalcBaseAndBitshift+0xa8>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a41      	ldr	r2, [pc, #260]	; (8007d70 <DMA_CalcBaseAndBitshift+0x11c>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d045      	beq.n	8007cfc <DMA_CalcBaseAndBitshift+0xa8>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a3f      	ldr	r2, [pc, #252]	; (8007d74 <DMA_CalcBaseAndBitshift+0x120>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d040      	beq.n	8007cfc <DMA_CalcBaseAndBitshift+0xa8>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a3e      	ldr	r2, [pc, #248]	; (8007d78 <DMA_CalcBaseAndBitshift+0x124>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d03b      	beq.n	8007cfc <DMA_CalcBaseAndBitshift+0xa8>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a3c      	ldr	r2, [pc, #240]	; (8007d7c <DMA_CalcBaseAndBitshift+0x128>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d036      	beq.n	8007cfc <DMA_CalcBaseAndBitshift+0xa8>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a3b      	ldr	r2, [pc, #236]	; (8007d80 <DMA_CalcBaseAndBitshift+0x12c>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d031      	beq.n	8007cfc <DMA_CalcBaseAndBitshift+0xa8>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a39      	ldr	r2, [pc, #228]	; (8007d84 <DMA_CalcBaseAndBitshift+0x130>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d02c      	beq.n	8007cfc <DMA_CalcBaseAndBitshift+0xa8>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a38      	ldr	r2, [pc, #224]	; (8007d88 <DMA_CalcBaseAndBitshift+0x134>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d027      	beq.n	8007cfc <DMA_CalcBaseAndBitshift+0xa8>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a36      	ldr	r2, [pc, #216]	; (8007d8c <DMA_CalcBaseAndBitshift+0x138>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d022      	beq.n	8007cfc <DMA_CalcBaseAndBitshift+0xa8>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a35      	ldr	r2, [pc, #212]	; (8007d90 <DMA_CalcBaseAndBitshift+0x13c>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d01d      	beq.n	8007cfc <DMA_CalcBaseAndBitshift+0xa8>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a33      	ldr	r2, [pc, #204]	; (8007d94 <DMA_CalcBaseAndBitshift+0x140>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d018      	beq.n	8007cfc <DMA_CalcBaseAndBitshift+0xa8>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a32      	ldr	r2, [pc, #200]	; (8007d98 <DMA_CalcBaseAndBitshift+0x144>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d013      	beq.n	8007cfc <DMA_CalcBaseAndBitshift+0xa8>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a30      	ldr	r2, [pc, #192]	; (8007d9c <DMA_CalcBaseAndBitshift+0x148>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d00e      	beq.n	8007cfc <DMA_CalcBaseAndBitshift+0xa8>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a2f      	ldr	r2, [pc, #188]	; (8007da0 <DMA_CalcBaseAndBitshift+0x14c>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d009      	beq.n	8007cfc <DMA_CalcBaseAndBitshift+0xa8>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a2d      	ldr	r2, [pc, #180]	; (8007da4 <DMA_CalcBaseAndBitshift+0x150>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d004      	beq.n	8007cfc <DMA_CalcBaseAndBitshift+0xa8>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a2c      	ldr	r2, [pc, #176]	; (8007da8 <DMA_CalcBaseAndBitshift+0x154>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d101      	bne.n	8007d00 <DMA_CalcBaseAndBitshift+0xac>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e000      	b.n	8007d02 <DMA_CalcBaseAndBitshift+0xae>
 8007d00:	2300      	movs	r3, #0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d024      	beq.n	8007d50 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	3b10      	subs	r3, #16
 8007d0e:	4a27      	ldr	r2, [pc, #156]	; (8007dac <DMA_CalcBaseAndBitshift+0x158>)
 8007d10:	fba2 2303 	umull	r2, r3, r2, r3
 8007d14:	091b      	lsrs	r3, r3, #4
 8007d16:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f003 0307 	and.w	r3, r3, #7
 8007d1e:	4a24      	ldr	r2, [pc, #144]	; (8007db0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007d20:	5cd3      	ldrb	r3, [r2, r3]
 8007d22:	461a      	mov	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b03      	cmp	r3, #3
 8007d2c:	d908      	bls.n	8007d40 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	4b1f      	ldr	r3, [pc, #124]	; (8007db4 <DMA_CalcBaseAndBitshift+0x160>)
 8007d36:	4013      	ands	r3, r2
 8007d38:	1d1a      	adds	r2, r3, #4
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	659a      	str	r2, [r3, #88]	; 0x58
 8007d3e:	e00d      	b.n	8007d5c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	461a      	mov	r2, r3
 8007d46:	4b1b      	ldr	r3, [pc, #108]	; (8007db4 <DMA_CalcBaseAndBitshift+0x160>)
 8007d48:	4013      	ands	r3, r2
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	6593      	str	r3, [r2, #88]	; 0x58
 8007d4e:	e005      	b.n	8007d5c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	40020010 	.word	0x40020010
 8007d70:	40020028 	.word	0x40020028
 8007d74:	40020040 	.word	0x40020040
 8007d78:	40020058 	.word	0x40020058
 8007d7c:	40020070 	.word	0x40020070
 8007d80:	40020088 	.word	0x40020088
 8007d84:	400200a0 	.word	0x400200a0
 8007d88:	400200b8 	.word	0x400200b8
 8007d8c:	40020410 	.word	0x40020410
 8007d90:	40020428 	.word	0x40020428
 8007d94:	40020440 	.word	0x40020440
 8007d98:	40020458 	.word	0x40020458
 8007d9c:	40020470 	.word	0x40020470
 8007da0:	40020488 	.word	0x40020488
 8007da4:	400204a0 	.word	0x400204a0
 8007da8:	400204b8 	.word	0x400204b8
 8007dac:	aaaaaaab 	.word	0xaaaaaaab
 8007db0:	0800f348 	.word	0x0800f348
 8007db4:	fffffc00 	.word	0xfffffc00

08007db8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d120      	bne.n	8007e0e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd0:	2b03      	cmp	r3, #3
 8007dd2:	d858      	bhi.n	8007e86 <DMA_CheckFifoParam+0xce>
 8007dd4:	a201      	add	r2, pc, #4	; (adr r2, 8007ddc <DMA_CheckFifoParam+0x24>)
 8007dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dda:	bf00      	nop
 8007ddc:	08007ded 	.word	0x08007ded
 8007de0:	08007dff 	.word	0x08007dff
 8007de4:	08007ded 	.word	0x08007ded
 8007de8:	08007e87 	.word	0x08007e87
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d048      	beq.n	8007e8a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007dfc:	e045      	b.n	8007e8a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e06:	d142      	bne.n	8007e8e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e0c:	e03f      	b.n	8007e8e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e16:	d123      	bne.n	8007e60 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d838      	bhi.n	8007e92 <DMA_CheckFifoParam+0xda>
 8007e20:	a201      	add	r2, pc, #4	; (adr r2, 8007e28 <DMA_CheckFifoParam+0x70>)
 8007e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e26:	bf00      	nop
 8007e28:	08007e39 	.word	0x08007e39
 8007e2c:	08007e3f 	.word	0x08007e3f
 8007e30:	08007e39 	.word	0x08007e39
 8007e34:	08007e51 	.word	0x08007e51
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	73fb      	strb	r3, [r7, #15]
        break;
 8007e3c:	e030      	b.n	8007ea0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d025      	beq.n	8007e96 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e4e:	e022      	b.n	8007e96 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e58:	d11f      	bne.n	8007e9a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e5e:	e01c      	b.n	8007e9a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d902      	bls.n	8007e6e <DMA_CheckFifoParam+0xb6>
 8007e68:	2b03      	cmp	r3, #3
 8007e6a:	d003      	beq.n	8007e74 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007e6c:	e018      	b.n	8007ea0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	73fb      	strb	r3, [r7, #15]
        break;
 8007e72:	e015      	b.n	8007ea0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00e      	beq.n	8007e9e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	73fb      	strb	r3, [r7, #15]
    break;
 8007e84:	e00b      	b.n	8007e9e <DMA_CheckFifoParam+0xe6>
        break;
 8007e86:	bf00      	nop
 8007e88:	e00a      	b.n	8007ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8007e8a:	bf00      	nop
 8007e8c:	e008      	b.n	8007ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8007e8e:	bf00      	nop
 8007e90:	e006      	b.n	8007ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8007e92:	bf00      	nop
 8007e94:	e004      	b.n	8007ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8007e96:	bf00      	nop
 8007e98:	e002      	b.n	8007ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8007e9a:	bf00      	nop
 8007e9c:	e000      	b.n	8007ea0 <DMA_CheckFifoParam+0xe8>
    break;
 8007e9e:	bf00      	nop
    }
  }

  return status;
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop

08007eb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a38      	ldr	r2, [pc, #224]	; (8007fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d022      	beq.n	8007f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a36      	ldr	r2, [pc, #216]	; (8007fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d01d      	beq.n	8007f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a35      	ldr	r2, [pc, #212]	; (8007fac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d018      	beq.n	8007f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a33      	ldr	r2, [pc, #204]	; (8007fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d013      	beq.n	8007f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a32      	ldr	r2, [pc, #200]	; (8007fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d00e      	beq.n	8007f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a30      	ldr	r2, [pc, #192]	; (8007fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d009      	beq.n	8007f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a2f      	ldr	r2, [pc, #188]	; (8007fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d004      	beq.n	8007f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a2d      	ldr	r2, [pc, #180]	; (8007fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d101      	bne.n	8007f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e000      	b.n	8007f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007f12:	2300      	movs	r3, #0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d01a      	beq.n	8007f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	3b08      	subs	r3, #8
 8007f20:	4a28      	ldr	r2, [pc, #160]	; (8007fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007f22:	fba2 2303 	umull	r2, r3, r2, r3
 8007f26:	091b      	lsrs	r3, r3, #4
 8007f28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	4b26      	ldr	r3, [pc, #152]	; (8007fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	461a      	mov	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a24      	ldr	r2, [pc, #144]	; (8007fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007f3c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f003 031f 	and.w	r3, r3, #31
 8007f44:	2201      	movs	r2, #1
 8007f46:	409a      	lsls	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007f4c:	e024      	b.n	8007f98 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	3b10      	subs	r3, #16
 8007f56:	4a1e      	ldr	r2, [pc, #120]	; (8007fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007f58:	fba2 2303 	umull	r2, r3, r2, r3
 8007f5c:	091b      	lsrs	r3, r3, #4
 8007f5e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	4a1c      	ldr	r2, [pc, #112]	; (8007fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d806      	bhi.n	8007f76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	4a1b      	ldr	r2, [pc, #108]	; (8007fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d902      	bls.n	8007f76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	3308      	adds	r3, #8
 8007f74:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	4b18      	ldr	r3, [pc, #96]	; (8007fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007f7a:	4413      	add	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	461a      	mov	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a16      	ldr	r2, [pc, #88]	; (8007fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007f88:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f003 031f 	and.w	r3, r3, #31
 8007f90:	2201      	movs	r2, #1
 8007f92:	409a      	lsls	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007f98:	bf00      	nop
 8007f9a:	3714      	adds	r7, #20
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	58025408 	.word	0x58025408
 8007fa8:	5802541c 	.word	0x5802541c
 8007fac:	58025430 	.word	0x58025430
 8007fb0:	58025444 	.word	0x58025444
 8007fb4:	58025458 	.word	0x58025458
 8007fb8:	5802546c 	.word	0x5802546c
 8007fbc:	58025480 	.word	0x58025480
 8007fc0:	58025494 	.word	0x58025494
 8007fc4:	cccccccd 	.word	0xcccccccd
 8007fc8:	16009600 	.word	0x16009600
 8007fcc:	58025880 	.word	0x58025880
 8007fd0:	aaaaaaab 	.word	0xaaaaaaab
 8007fd4:	400204b8 	.word	0x400204b8
 8007fd8:	4002040f 	.word	0x4002040f
 8007fdc:	10008200 	.word	0x10008200
 8007fe0:	40020880 	.word	0x40020880

08007fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d04a      	beq.n	8008090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2b08      	cmp	r3, #8
 8007ffe:	d847      	bhi.n	8008090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a25      	ldr	r2, [pc, #148]	; (800809c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d022      	beq.n	8008050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a24      	ldr	r2, [pc, #144]	; (80080a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d01d      	beq.n	8008050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a22      	ldr	r2, [pc, #136]	; (80080a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d018      	beq.n	8008050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a21      	ldr	r2, [pc, #132]	; (80080a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d013      	beq.n	8008050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a1f      	ldr	r2, [pc, #124]	; (80080ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d00e      	beq.n	8008050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a1e      	ldr	r2, [pc, #120]	; (80080b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d009      	beq.n	8008050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a1c      	ldr	r2, [pc, #112]	; (80080b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d004      	beq.n	8008050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a1b      	ldr	r2, [pc, #108]	; (80080b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d101      	bne.n	8008054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008050:	2301      	movs	r3, #1
 8008052:	e000      	b.n	8008056 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008054:	2300      	movs	r3, #0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	4b17      	ldr	r3, [pc, #92]	; (80080bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800805e:	4413      	add	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	461a      	mov	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a15      	ldr	r2, [pc, #84]	; (80080c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800806c:	671a      	str	r2, [r3, #112]	; 0x70
 800806e:	e009      	b.n	8008084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	4b14      	ldr	r3, [pc, #80]	; (80080c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008074:	4413      	add	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	461a      	mov	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a11      	ldr	r2, [pc, #68]	; (80080c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008082:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	3b01      	subs	r3, #1
 8008088:	2201      	movs	r2, #1
 800808a:	409a      	lsls	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008090:	bf00      	nop
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	58025408 	.word	0x58025408
 80080a0:	5802541c 	.word	0x5802541c
 80080a4:	58025430 	.word	0x58025430
 80080a8:	58025444 	.word	0x58025444
 80080ac:	58025458 	.word	0x58025458
 80080b0:	5802546c 	.word	0x5802546c
 80080b4:	58025480 	.word	0x58025480
 80080b8:	58025494 	.word	0x58025494
 80080bc:	1600963f 	.word	0x1600963f
 80080c0:	58025940 	.word	0x58025940
 80080c4:	1000823f 	.word	0x1000823f
 80080c8:	40020940 	.word	0x40020940

080080cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b089      	sub	sp, #36	; 0x24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80080da:	4b86      	ldr	r3, [pc, #536]	; (80082f4 <HAL_GPIO_Init+0x228>)
 80080dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80080de:	e18c      	b.n	80083fa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	2101      	movs	r1, #1
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	fa01 f303 	lsl.w	r3, r1, r3
 80080ec:	4013      	ands	r3, r2
 80080ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 817e 	beq.w	80083f4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f003 0303 	and.w	r3, r3, #3
 8008100:	2b01      	cmp	r3, #1
 8008102:	d005      	beq.n	8008110 <HAL_GPIO_Init+0x44>
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	f003 0303 	and.w	r3, r3, #3
 800810c:	2b02      	cmp	r3, #2
 800810e:	d130      	bne.n	8008172 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	005b      	lsls	r3, r3, #1
 800811a:	2203      	movs	r2, #3
 800811c:	fa02 f303 	lsl.w	r3, r2, r3
 8008120:	43db      	mvns	r3, r3
 8008122:	69ba      	ldr	r2, [r7, #24]
 8008124:	4013      	ands	r3, r2
 8008126:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	68da      	ldr	r2, [r3, #12]
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	005b      	lsls	r3, r3, #1
 8008130:	fa02 f303 	lsl.w	r3, r2, r3
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	4313      	orrs	r3, r2
 8008138:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	69ba      	ldr	r2, [r7, #24]
 800813e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008146:	2201      	movs	r2, #1
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	fa02 f303 	lsl.w	r3, r2, r3
 800814e:	43db      	mvns	r3, r3
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	4013      	ands	r3, r2
 8008154:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	091b      	lsrs	r3, r3, #4
 800815c:	f003 0201 	and.w	r2, r3, #1
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	fa02 f303 	lsl.w	r3, r2, r3
 8008166:	69ba      	ldr	r2, [r7, #24]
 8008168:	4313      	orrs	r3, r2
 800816a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f003 0303 	and.w	r3, r3, #3
 800817a:	2b03      	cmp	r3, #3
 800817c:	d017      	beq.n	80081ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	2203      	movs	r2, #3
 800818a:	fa02 f303 	lsl.w	r3, r2, r3
 800818e:	43db      	mvns	r3, r3
 8008190:	69ba      	ldr	r2, [r7, #24]
 8008192:	4013      	ands	r3, r2
 8008194:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	689a      	ldr	r2, [r3, #8]
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	005b      	lsls	r3, r3, #1
 800819e:	fa02 f303 	lsl.w	r3, r2, r3
 80081a2:	69ba      	ldr	r2, [r7, #24]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	69ba      	ldr	r2, [r7, #24]
 80081ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d123      	bne.n	8008202 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	08da      	lsrs	r2, r3, #3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	3208      	adds	r2, #8
 80081c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	f003 0307 	and.w	r3, r3, #7
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	220f      	movs	r2, #15
 80081d2:	fa02 f303 	lsl.w	r3, r2, r3
 80081d6:	43db      	mvns	r3, r3
 80081d8:	69ba      	ldr	r2, [r7, #24]
 80081da:	4013      	ands	r3, r2
 80081dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	691a      	ldr	r2, [r3, #16]
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	f003 0307 	and.w	r3, r3, #7
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	fa02 f303 	lsl.w	r3, r2, r3
 80081ee:	69ba      	ldr	r2, [r7, #24]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	08da      	lsrs	r2, r3, #3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	3208      	adds	r2, #8
 80081fc:	69b9      	ldr	r1, [r7, #24]
 80081fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	005b      	lsls	r3, r3, #1
 800820c:	2203      	movs	r2, #3
 800820e:	fa02 f303 	lsl.w	r3, r2, r3
 8008212:	43db      	mvns	r3, r3
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	4013      	ands	r3, r2
 8008218:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f003 0203 	and.w	r2, r3, #3
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	005b      	lsls	r3, r3, #1
 8008226:	fa02 f303 	lsl.w	r3, r2, r3
 800822a:	69ba      	ldr	r2, [r7, #24]
 800822c:	4313      	orrs	r3, r2
 800822e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 80d8 	beq.w	80083f4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008244:	4b2c      	ldr	r3, [pc, #176]	; (80082f8 <HAL_GPIO_Init+0x22c>)
 8008246:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800824a:	4a2b      	ldr	r2, [pc, #172]	; (80082f8 <HAL_GPIO_Init+0x22c>)
 800824c:	f043 0302 	orr.w	r3, r3, #2
 8008250:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008254:	4b28      	ldr	r3, [pc, #160]	; (80082f8 <HAL_GPIO_Init+0x22c>)
 8008256:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800825a:	f003 0302 	and.w	r3, r3, #2
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008262:	4a26      	ldr	r2, [pc, #152]	; (80082fc <HAL_GPIO_Init+0x230>)
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	089b      	lsrs	r3, r3, #2
 8008268:	3302      	adds	r3, #2
 800826a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800826e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	f003 0303 	and.w	r3, r3, #3
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	220f      	movs	r2, #15
 800827a:	fa02 f303 	lsl.w	r3, r2, r3
 800827e:	43db      	mvns	r3, r3
 8008280:	69ba      	ldr	r2, [r7, #24]
 8008282:	4013      	ands	r3, r2
 8008284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a1d      	ldr	r2, [pc, #116]	; (8008300 <HAL_GPIO_Init+0x234>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d04a      	beq.n	8008324 <HAL_GPIO_Init+0x258>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a1c      	ldr	r2, [pc, #112]	; (8008304 <HAL_GPIO_Init+0x238>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d02b      	beq.n	80082ee <HAL_GPIO_Init+0x222>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a1b      	ldr	r2, [pc, #108]	; (8008308 <HAL_GPIO_Init+0x23c>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d025      	beq.n	80082ea <HAL_GPIO_Init+0x21e>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a1a      	ldr	r2, [pc, #104]	; (800830c <HAL_GPIO_Init+0x240>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d01f      	beq.n	80082e6 <HAL_GPIO_Init+0x21a>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a19      	ldr	r2, [pc, #100]	; (8008310 <HAL_GPIO_Init+0x244>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d019      	beq.n	80082e2 <HAL_GPIO_Init+0x216>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a18      	ldr	r2, [pc, #96]	; (8008314 <HAL_GPIO_Init+0x248>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d013      	beq.n	80082de <HAL_GPIO_Init+0x212>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a17      	ldr	r2, [pc, #92]	; (8008318 <HAL_GPIO_Init+0x24c>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d00d      	beq.n	80082da <HAL_GPIO_Init+0x20e>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a16      	ldr	r2, [pc, #88]	; (800831c <HAL_GPIO_Init+0x250>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d007      	beq.n	80082d6 <HAL_GPIO_Init+0x20a>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a15      	ldr	r2, [pc, #84]	; (8008320 <HAL_GPIO_Init+0x254>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d101      	bne.n	80082d2 <HAL_GPIO_Init+0x206>
 80082ce:	2309      	movs	r3, #9
 80082d0:	e029      	b.n	8008326 <HAL_GPIO_Init+0x25a>
 80082d2:	230a      	movs	r3, #10
 80082d4:	e027      	b.n	8008326 <HAL_GPIO_Init+0x25a>
 80082d6:	2307      	movs	r3, #7
 80082d8:	e025      	b.n	8008326 <HAL_GPIO_Init+0x25a>
 80082da:	2306      	movs	r3, #6
 80082dc:	e023      	b.n	8008326 <HAL_GPIO_Init+0x25a>
 80082de:	2305      	movs	r3, #5
 80082e0:	e021      	b.n	8008326 <HAL_GPIO_Init+0x25a>
 80082e2:	2304      	movs	r3, #4
 80082e4:	e01f      	b.n	8008326 <HAL_GPIO_Init+0x25a>
 80082e6:	2303      	movs	r3, #3
 80082e8:	e01d      	b.n	8008326 <HAL_GPIO_Init+0x25a>
 80082ea:	2302      	movs	r3, #2
 80082ec:	e01b      	b.n	8008326 <HAL_GPIO_Init+0x25a>
 80082ee:	2301      	movs	r3, #1
 80082f0:	e019      	b.n	8008326 <HAL_GPIO_Init+0x25a>
 80082f2:	bf00      	nop
 80082f4:	58000080 	.word	0x58000080
 80082f8:	58024400 	.word	0x58024400
 80082fc:	58000400 	.word	0x58000400
 8008300:	58020000 	.word	0x58020000
 8008304:	58020400 	.word	0x58020400
 8008308:	58020800 	.word	0x58020800
 800830c:	58020c00 	.word	0x58020c00
 8008310:	58021000 	.word	0x58021000
 8008314:	58021400 	.word	0x58021400
 8008318:	58021800 	.word	0x58021800
 800831c:	58021c00 	.word	0x58021c00
 8008320:	58022400 	.word	0x58022400
 8008324:	2300      	movs	r3, #0
 8008326:	69fa      	ldr	r2, [r7, #28]
 8008328:	f002 0203 	and.w	r2, r2, #3
 800832c:	0092      	lsls	r2, r2, #2
 800832e:	4093      	lsls	r3, r2
 8008330:	69ba      	ldr	r2, [r7, #24]
 8008332:	4313      	orrs	r3, r2
 8008334:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008336:	4938      	ldr	r1, [pc, #224]	; (8008418 <HAL_GPIO_Init+0x34c>)
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	089b      	lsrs	r3, r3, #2
 800833c:	3302      	adds	r3, #2
 800833e:	69ba      	ldr	r2, [r7, #24]
 8008340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	43db      	mvns	r3, r3
 8008350:	69ba      	ldr	r2, [r7, #24]
 8008352:	4013      	ands	r3, r2
 8008354:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008362:	69ba      	ldr	r2, [r7, #24]
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	4313      	orrs	r3, r2
 8008368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800836a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	43db      	mvns	r3, r3
 800837e:	69ba      	ldr	r2, [r7, #24]
 8008380:	4013      	ands	r3, r2
 8008382:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d003      	beq.n	8008398 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008390:	69ba      	ldr	r2, [r7, #24]
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	4313      	orrs	r3, r2
 8008396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008398:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	43db      	mvns	r3, r3
 80083aa:	69ba      	ldr	r2, [r7, #24]
 80083ac:	4013      	ands	r3, r2
 80083ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d003      	beq.n	80083c4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80083bc:	69ba      	ldr	r2, [r7, #24]
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	69ba      	ldr	r2, [r7, #24]
 80083c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	43db      	mvns	r3, r3
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	4013      	ands	r3, r2
 80083d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80083e6:	69ba      	ldr	r2, [r7, #24]
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	69ba      	ldr	r2, [r7, #24]
 80083f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	3301      	adds	r3, #1
 80083f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	fa22 f303 	lsr.w	r3, r2, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	f47f ae6b 	bne.w	80080e0 <HAL_GPIO_Init+0x14>
  }
}
 800840a:	bf00      	nop
 800840c:	bf00      	nop
 800840e:	3724      	adds	r7, #36	; 0x24
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr
 8008418:	58000400 	.word	0x58000400

0800841c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008426:	2300      	movs	r3, #0
 8008428:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800842a:	4b72      	ldr	r3, [pc, #456]	; (80085f4 <HAL_GPIO_DeInit+0x1d8>)
 800842c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800842e:	e0d3      	b.n	80085d8 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008430:	2201      	movs	r2, #1
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	fa02 f303 	lsl.w	r3, r2, r3
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	4013      	ands	r3, r2
 800843c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 80c6 	beq.w	80085d2 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008446:	4a6c      	ldr	r2, [pc, #432]	; (80085f8 <HAL_GPIO_DeInit+0x1dc>)
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	089b      	lsrs	r3, r3, #2
 800844c:	3302      	adds	r3, #2
 800844e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008452:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	f003 0303 	and.w	r3, r3, #3
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	220f      	movs	r2, #15
 800845e:	fa02 f303 	lsl.w	r3, r2, r3
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	4013      	ands	r3, r2
 8008466:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a64      	ldr	r2, [pc, #400]	; (80085fc <HAL_GPIO_DeInit+0x1e0>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d031      	beq.n	80084d4 <HAL_GPIO_DeInit+0xb8>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a63      	ldr	r2, [pc, #396]	; (8008600 <HAL_GPIO_DeInit+0x1e4>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d02b      	beq.n	80084d0 <HAL_GPIO_DeInit+0xb4>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a62      	ldr	r2, [pc, #392]	; (8008604 <HAL_GPIO_DeInit+0x1e8>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d025      	beq.n	80084cc <HAL_GPIO_DeInit+0xb0>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a61      	ldr	r2, [pc, #388]	; (8008608 <HAL_GPIO_DeInit+0x1ec>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d01f      	beq.n	80084c8 <HAL_GPIO_DeInit+0xac>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a60      	ldr	r2, [pc, #384]	; (800860c <HAL_GPIO_DeInit+0x1f0>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d019      	beq.n	80084c4 <HAL_GPIO_DeInit+0xa8>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a5f      	ldr	r2, [pc, #380]	; (8008610 <HAL_GPIO_DeInit+0x1f4>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d013      	beq.n	80084c0 <HAL_GPIO_DeInit+0xa4>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a5e      	ldr	r2, [pc, #376]	; (8008614 <HAL_GPIO_DeInit+0x1f8>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d00d      	beq.n	80084bc <HAL_GPIO_DeInit+0xa0>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a5d      	ldr	r2, [pc, #372]	; (8008618 <HAL_GPIO_DeInit+0x1fc>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d007      	beq.n	80084b8 <HAL_GPIO_DeInit+0x9c>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a5c      	ldr	r2, [pc, #368]	; (800861c <HAL_GPIO_DeInit+0x200>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d101      	bne.n	80084b4 <HAL_GPIO_DeInit+0x98>
 80084b0:	2309      	movs	r3, #9
 80084b2:	e010      	b.n	80084d6 <HAL_GPIO_DeInit+0xba>
 80084b4:	230a      	movs	r3, #10
 80084b6:	e00e      	b.n	80084d6 <HAL_GPIO_DeInit+0xba>
 80084b8:	2307      	movs	r3, #7
 80084ba:	e00c      	b.n	80084d6 <HAL_GPIO_DeInit+0xba>
 80084bc:	2306      	movs	r3, #6
 80084be:	e00a      	b.n	80084d6 <HAL_GPIO_DeInit+0xba>
 80084c0:	2305      	movs	r3, #5
 80084c2:	e008      	b.n	80084d6 <HAL_GPIO_DeInit+0xba>
 80084c4:	2304      	movs	r3, #4
 80084c6:	e006      	b.n	80084d6 <HAL_GPIO_DeInit+0xba>
 80084c8:	2303      	movs	r3, #3
 80084ca:	e004      	b.n	80084d6 <HAL_GPIO_DeInit+0xba>
 80084cc:	2302      	movs	r3, #2
 80084ce:	e002      	b.n	80084d6 <HAL_GPIO_DeInit+0xba>
 80084d0:	2301      	movs	r3, #1
 80084d2:	e000      	b.n	80084d6 <HAL_GPIO_DeInit+0xba>
 80084d4:	2300      	movs	r3, #0
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	f002 0203 	and.w	r2, r2, #3
 80084dc:	0092      	lsls	r2, r2, #2
 80084de:	4093      	lsls	r3, r2
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d136      	bne.n	8008554 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	43db      	mvns	r3, r3
 80084ee:	401a      	ands	r2, r3
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	685a      	ldr	r2, [r3, #4]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	43db      	mvns	r3, r3
 80084fc:	401a      	ands	r2, r3
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008506:	685a      	ldr	r2, [r3, #4]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	43db      	mvns	r3, r3
 800850c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008510:	4013      	ands	r3, r2
 8008512:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	43db      	mvns	r3, r3
 800851e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008522:	4013      	ands	r3, r2
 8008524:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f003 0303 	and.w	r3, r3, #3
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	220f      	movs	r2, #15
 8008530:	fa02 f303 	lsl.w	r3, r2, r3
 8008534:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008536:	4a30      	ldr	r2, [pc, #192]	; (80085f8 <HAL_GPIO_DeInit+0x1dc>)
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	089b      	lsrs	r3, r3, #2
 800853c:	3302      	adds	r3, #2
 800853e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	43da      	mvns	r2, r3
 8008546:	482c      	ldr	r0, [pc, #176]	; (80085f8 <HAL_GPIO_DeInit+0x1dc>)
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	089b      	lsrs	r3, r3, #2
 800854c:	400a      	ands	r2, r1
 800854e:	3302      	adds	r3, #2
 8008550:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	005b      	lsls	r3, r3, #1
 800855c:	2103      	movs	r1, #3
 800855e:	fa01 f303 	lsl.w	r3, r1, r3
 8008562:	431a      	orrs	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	08da      	lsrs	r2, r3, #3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	3208      	adds	r2, #8
 8008570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	f003 0307 	and.w	r3, r3, #7
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	220f      	movs	r2, #15
 800857e:	fa02 f303 	lsl.w	r3, r2, r3
 8008582:	43db      	mvns	r3, r3
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	08d2      	lsrs	r2, r2, #3
 8008588:	4019      	ands	r1, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	3208      	adds	r2, #8
 800858e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68da      	ldr	r2, [r3, #12]
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	2103      	movs	r1, #3
 800859c:	fa01 f303 	lsl.w	r3, r1, r3
 80085a0:	43db      	mvns	r3, r3
 80085a2:	401a      	ands	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	2101      	movs	r1, #1
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	fa01 f303 	lsl.w	r3, r1, r3
 80085b4:	43db      	mvns	r3, r3
 80085b6:	401a      	ands	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	689a      	ldr	r2, [r3, #8]
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	005b      	lsls	r3, r3, #1
 80085c4:	2103      	movs	r1, #3
 80085c6:	fa01 f303 	lsl.w	r3, r1, r3
 80085ca:	43db      	mvns	r3, r3
 80085cc:	401a      	ands	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	3301      	adds	r3, #1
 80085d6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	fa22 f303 	lsr.w	r3, r2, r3
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f47f af25 	bne.w	8008430 <HAL_GPIO_DeInit+0x14>
  }
}
 80085e6:	bf00      	nop
 80085e8:	bf00      	nop
 80085ea:	371c      	adds	r7, #28
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	58000080 	.word	0x58000080
 80085f8:	58000400 	.word	0x58000400
 80085fc:	58020000 	.word	0x58020000
 8008600:	58020400 	.word	0x58020400
 8008604:	58020800 	.word	0x58020800
 8008608:	58020c00 	.word	0x58020c00
 800860c:	58021000 	.word	0x58021000
 8008610:	58021400 	.word	0x58021400
 8008614:	58021800 	.word	0x58021800
 8008618:	58021c00 	.word	0x58021c00
 800861c:	58022400 	.word	0x58022400

08008620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	807b      	strh	r3, [r7, #2]
 800862c:	4613      	mov	r3, r2
 800862e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008630:	787b      	ldrb	r3, [r7, #1]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008636:	887a      	ldrh	r2, [r7, #2]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800863c:	e003      	b.n	8008646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800863e:	887b      	ldrh	r3, [r7, #2]
 8008640:	041a      	lsls	r2, r3, #16
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	619a      	str	r2, [r3, #24]
}
 8008646:	bf00      	nop
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
	...

08008654 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800865c:	4b19      	ldr	r3, [pc, #100]	; (80086c4 <HAL_PWREx_ConfigSupply+0x70>)
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	f003 0304 	and.w	r3, r3, #4
 8008664:	2b04      	cmp	r3, #4
 8008666:	d00a      	beq.n	800867e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008668:	4b16      	ldr	r3, [pc, #88]	; (80086c4 <HAL_PWREx_ConfigSupply+0x70>)
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	f003 0307 	and.w	r3, r3, #7
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	429a      	cmp	r2, r3
 8008674:	d001      	beq.n	800867a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	e01f      	b.n	80086ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	e01d      	b.n	80086ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800867e:	4b11      	ldr	r3, [pc, #68]	; (80086c4 <HAL_PWREx_ConfigSupply+0x70>)
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	f023 0207 	bic.w	r2, r3, #7
 8008686:	490f      	ldr	r1, [pc, #60]	; (80086c4 <HAL_PWREx_ConfigSupply+0x70>)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4313      	orrs	r3, r2
 800868c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800868e:	f7fc fbdf 	bl	8004e50 <HAL_GetTick>
 8008692:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008694:	e009      	b.n	80086aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008696:	f7fc fbdb 	bl	8004e50 <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086a4:	d901      	bls.n	80086aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e007      	b.n	80086ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80086aa:	4b06      	ldr	r3, [pc, #24]	; (80086c4 <HAL_PWREx_ConfigSupply+0x70>)
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086b6:	d1ee      	bne.n	8008696 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	58024800 	.word	0x58024800

080086c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b08c      	sub	sp, #48	; 0x30
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d101      	bne.n	80086da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e3c8      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 8087 	beq.w	80087f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086e8:	4b88      	ldr	r3, [pc, #544]	; (800890c <HAL_RCC_OscConfig+0x244>)
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086f2:	4b86      	ldr	r3, [pc, #536]	; (800890c <HAL_RCC_OscConfig+0x244>)
 80086f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80086f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fa:	2b10      	cmp	r3, #16
 80086fc:	d007      	beq.n	800870e <HAL_RCC_OscConfig+0x46>
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008700:	2b18      	cmp	r3, #24
 8008702:	d110      	bne.n	8008726 <HAL_RCC_OscConfig+0x5e>
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	f003 0303 	and.w	r3, r3, #3
 800870a:	2b02      	cmp	r3, #2
 800870c:	d10b      	bne.n	8008726 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800870e:	4b7f      	ldr	r3, [pc, #508]	; (800890c <HAL_RCC_OscConfig+0x244>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d06c      	beq.n	80087f4 <HAL_RCC_OscConfig+0x12c>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d168      	bne.n	80087f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e3a2      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800872e:	d106      	bne.n	800873e <HAL_RCC_OscConfig+0x76>
 8008730:	4b76      	ldr	r3, [pc, #472]	; (800890c <HAL_RCC_OscConfig+0x244>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a75      	ldr	r2, [pc, #468]	; (800890c <HAL_RCC_OscConfig+0x244>)
 8008736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800873a:	6013      	str	r3, [r2, #0]
 800873c:	e02e      	b.n	800879c <HAL_RCC_OscConfig+0xd4>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10c      	bne.n	8008760 <HAL_RCC_OscConfig+0x98>
 8008746:	4b71      	ldr	r3, [pc, #452]	; (800890c <HAL_RCC_OscConfig+0x244>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a70      	ldr	r2, [pc, #448]	; (800890c <HAL_RCC_OscConfig+0x244>)
 800874c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	4b6e      	ldr	r3, [pc, #440]	; (800890c <HAL_RCC_OscConfig+0x244>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a6d      	ldr	r2, [pc, #436]	; (800890c <HAL_RCC_OscConfig+0x244>)
 8008758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800875c:	6013      	str	r3, [r2, #0]
 800875e:	e01d      	b.n	800879c <HAL_RCC_OscConfig+0xd4>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008768:	d10c      	bne.n	8008784 <HAL_RCC_OscConfig+0xbc>
 800876a:	4b68      	ldr	r3, [pc, #416]	; (800890c <HAL_RCC_OscConfig+0x244>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a67      	ldr	r2, [pc, #412]	; (800890c <HAL_RCC_OscConfig+0x244>)
 8008770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	4b65      	ldr	r3, [pc, #404]	; (800890c <HAL_RCC_OscConfig+0x244>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a64      	ldr	r2, [pc, #400]	; (800890c <HAL_RCC_OscConfig+0x244>)
 800877c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008780:	6013      	str	r3, [r2, #0]
 8008782:	e00b      	b.n	800879c <HAL_RCC_OscConfig+0xd4>
 8008784:	4b61      	ldr	r3, [pc, #388]	; (800890c <HAL_RCC_OscConfig+0x244>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a60      	ldr	r2, [pc, #384]	; (800890c <HAL_RCC_OscConfig+0x244>)
 800878a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800878e:	6013      	str	r3, [r2, #0]
 8008790:	4b5e      	ldr	r3, [pc, #376]	; (800890c <HAL_RCC_OscConfig+0x244>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a5d      	ldr	r2, [pc, #372]	; (800890c <HAL_RCC_OscConfig+0x244>)
 8008796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800879a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d013      	beq.n	80087cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a4:	f7fc fb54 	bl	8004e50 <HAL_GetTick>
 80087a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087aa:	e008      	b.n	80087be <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087ac:	f7fc fb50 	bl	8004e50 <HAL_GetTick>
 80087b0:	4602      	mov	r2, r0
 80087b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	2b64      	cmp	r3, #100	; 0x64
 80087b8:	d901      	bls.n	80087be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e356      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087be:	4b53      	ldr	r3, [pc, #332]	; (800890c <HAL_RCC_OscConfig+0x244>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d0f0      	beq.n	80087ac <HAL_RCC_OscConfig+0xe4>
 80087ca:	e014      	b.n	80087f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087cc:	f7fc fb40 	bl	8004e50 <HAL_GetTick>
 80087d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80087d2:	e008      	b.n	80087e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087d4:	f7fc fb3c 	bl	8004e50 <HAL_GetTick>
 80087d8:	4602      	mov	r2, r0
 80087da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	2b64      	cmp	r3, #100	; 0x64
 80087e0:	d901      	bls.n	80087e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e342      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80087e6:	4b49      	ldr	r3, [pc, #292]	; (800890c <HAL_RCC_OscConfig+0x244>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1f0      	bne.n	80087d4 <HAL_RCC_OscConfig+0x10c>
 80087f2:	e000      	b.n	80087f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0302 	and.w	r3, r3, #2
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 808c 	beq.w	800891c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008804:	4b41      	ldr	r3, [pc, #260]	; (800890c <HAL_RCC_OscConfig+0x244>)
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800880c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800880e:	4b3f      	ldr	r3, [pc, #252]	; (800890c <HAL_RCC_OscConfig+0x244>)
 8008810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008812:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d007      	beq.n	800882a <HAL_RCC_OscConfig+0x162>
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	2b18      	cmp	r3, #24
 800881e:	d137      	bne.n	8008890 <HAL_RCC_OscConfig+0x1c8>
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	f003 0303 	and.w	r3, r3, #3
 8008826:	2b00      	cmp	r3, #0
 8008828:	d132      	bne.n	8008890 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800882a:	4b38      	ldr	r3, [pc, #224]	; (800890c <HAL_RCC_OscConfig+0x244>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0304 	and.w	r3, r3, #4
 8008832:	2b00      	cmp	r3, #0
 8008834:	d005      	beq.n	8008842 <HAL_RCC_OscConfig+0x17a>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e314      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008842:	4b32      	ldr	r3, [pc, #200]	; (800890c <HAL_RCC_OscConfig+0x244>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f023 0219 	bic.w	r2, r3, #25
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	492f      	ldr	r1, [pc, #188]	; (800890c <HAL_RCC_OscConfig+0x244>)
 8008850:	4313      	orrs	r3, r2
 8008852:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008854:	f7fc fafc 	bl	8004e50 <HAL_GetTick>
 8008858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800885a:	e008      	b.n	800886e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800885c:	f7fc faf8 	bl	8004e50 <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	2b02      	cmp	r3, #2
 8008868:	d901      	bls.n	800886e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e2fe      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800886e:	4b27      	ldr	r3, [pc, #156]	; (800890c <HAL_RCC_OscConfig+0x244>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 0304 	and.w	r3, r3, #4
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0f0      	beq.n	800885c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800887a:	4b24      	ldr	r3, [pc, #144]	; (800890c <HAL_RCC_OscConfig+0x244>)
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	061b      	lsls	r3, r3, #24
 8008888:	4920      	ldr	r1, [pc, #128]	; (800890c <HAL_RCC_OscConfig+0x244>)
 800888a:	4313      	orrs	r3, r2
 800888c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800888e:	e045      	b.n	800891c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d026      	beq.n	80088e6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008898:	4b1c      	ldr	r3, [pc, #112]	; (800890c <HAL_RCC_OscConfig+0x244>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f023 0219 	bic.w	r2, r3, #25
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	4919      	ldr	r1, [pc, #100]	; (800890c <HAL_RCC_OscConfig+0x244>)
 80088a6:	4313      	orrs	r3, r2
 80088a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088aa:	f7fc fad1 	bl	8004e50 <HAL_GetTick>
 80088ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088b0:	e008      	b.n	80088c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088b2:	f7fc facd 	bl	8004e50 <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d901      	bls.n	80088c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e2d3      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088c4:	4b11      	ldr	r3, [pc, #68]	; (800890c <HAL_RCC_OscConfig+0x244>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 0304 	and.w	r3, r3, #4
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d0f0      	beq.n	80088b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088d0:	4b0e      	ldr	r3, [pc, #56]	; (800890c <HAL_RCC_OscConfig+0x244>)
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	061b      	lsls	r3, r3, #24
 80088de:	490b      	ldr	r1, [pc, #44]	; (800890c <HAL_RCC_OscConfig+0x244>)
 80088e0:	4313      	orrs	r3, r2
 80088e2:	604b      	str	r3, [r1, #4]
 80088e4:	e01a      	b.n	800891c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088e6:	4b09      	ldr	r3, [pc, #36]	; (800890c <HAL_RCC_OscConfig+0x244>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a08      	ldr	r2, [pc, #32]	; (800890c <HAL_RCC_OscConfig+0x244>)
 80088ec:	f023 0301 	bic.w	r3, r3, #1
 80088f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088f2:	f7fc faad 	bl	8004e50 <HAL_GetTick>
 80088f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80088f8:	e00a      	b.n	8008910 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088fa:	f7fc faa9 	bl	8004e50 <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	2b02      	cmp	r3, #2
 8008906:	d903      	bls.n	8008910 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	e2af      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
 800890c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008910:	4b96      	ldr	r3, [pc, #600]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0304 	and.w	r3, r3, #4
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1ee      	bne.n	80088fa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0310 	and.w	r3, r3, #16
 8008924:	2b00      	cmp	r3, #0
 8008926:	d06a      	beq.n	80089fe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008928:	4b90      	ldr	r3, [pc, #576]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008930:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008932:	4b8e      	ldr	r3, [pc, #568]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008936:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	2b08      	cmp	r3, #8
 800893c:	d007      	beq.n	800894e <HAL_RCC_OscConfig+0x286>
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	2b18      	cmp	r3, #24
 8008942:	d11b      	bne.n	800897c <HAL_RCC_OscConfig+0x2b4>
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	f003 0303 	and.w	r3, r3, #3
 800894a:	2b01      	cmp	r3, #1
 800894c:	d116      	bne.n	800897c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800894e:	4b87      	ldr	r3, [pc, #540]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008956:	2b00      	cmp	r3, #0
 8008958:	d005      	beq.n	8008966 <HAL_RCC_OscConfig+0x29e>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	69db      	ldr	r3, [r3, #28]
 800895e:	2b80      	cmp	r3, #128	; 0x80
 8008960:	d001      	beq.n	8008966 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e282      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008966:	4b81      	ldr	r3, [pc, #516]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a1b      	ldr	r3, [r3, #32]
 8008972:	061b      	lsls	r3, r3, #24
 8008974:	497d      	ldr	r1, [pc, #500]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008976:	4313      	orrs	r3, r2
 8008978:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800897a:	e040      	b.n	80089fe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	69db      	ldr	r3, [r3, #28]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d023      	beq.n	80089cc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008984:	4b79      	ldr	r3, [pc, #484]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a78      	ldr	r2, [pc, #480]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 800898a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800898e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008990:	f7fc fa5e 	bl	8004e50 <HAL_GetTick>
 8008994:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008996:	e008      	b.n	80089aa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008998:	f7fc fa5a 	bl	8004e50 <HAL_GetTick>
 800899c:	4602      	mov	r2, r0
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d901      	bls.n	80089aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e260      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089aa:	4b70      	ldr	r3, [pc, #448]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0f0      	beq.n	8008998 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089b6:	4b6d      	ldr	r3, [pc, #436]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	061b      	lsls	r3, r3, #24
 80089c4:	4969      	ldr	r1, [pc, #420]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 80089c6:	4313      	orrs	r3, r2
 80089c8:	60cb      	str	r3, [r1, #12]
 80089ca:	e018      	b.n	80089fe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80089cc:	4b67      	ldr	r3, [pc, #412]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a66      	ldr	r2, [pc, #408]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 80089d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d8:	f7fc fa3a 	bl	8004e50 <HAL_GetTick>
 80089dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80089de:	e008      	b.n	80089f2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80089e0:	f7fc fa36 	bl	8004e50 <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d901      	bls.n	80089f2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e23c      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80089f2:	4b5e      	ldr	r3, [pc, #376]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1f0      	bne.n	80089e0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0308 	and.w	r3, r3, #8
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d036      	beq.n	8008a78 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d019      	beq.n	8008a46 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a12:	4b56      	ldr	r3, [pc, #344]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a16:	4a55      	ldr	r2, [pc, #340]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008a18:	f043 0301 	orr.w	r3, r3, #1
 8008a1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a1e:	f7fc fa17 	bl	8004e50 <HAL_GetTick>
 8008a22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a24:	e008      	b.n	8008a38 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a26:	f7fc fa13 	bl	8004e50 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d901      	bls.n	8008a38 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e219      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a38:	4b4c      	ldr	r3, [pc, #304]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a3c:	f003 0302 	and.w	r3, r3, #2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d0f0      	beq.n	8008a26 <HAL_RCC_OscConfig+0x35e>
 8008a44:	e018      	b.n	8008a78 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a46:	4b49      	ldr	r3, [pc, #292]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a4a:	4a48      	ldr	r2, [pc, #288]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008a4c:	f023 0301 	bic.w	r3, r3, #1
 8008a50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a52:	f7fc f9fd 	bl	8004e50 <HAL_GetTick>
 8008a56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a58:	e008      	b.n	8008a6c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a5a:	f7fc f9f9 	bl	8004e50 <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d901      	bls.n	8008a6c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e1ff      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a6c:	4b3f      	ldr	r3, [pc, #252]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a70:	f003 0302 	and.w	r3, r3, #2
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1f0      	bne.n	8008a5a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0320 	and.w	r3, r3, #32
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d036      	beq.n	8008af2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d019      	beq.n	8008ac0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a8c:	4b37      	ldr	r3, [pc, #220]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a36      	ldr	r2, [pc, #216]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008a92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008a98:	f7fc f9da 	bl	8004e50 <HAL_GetTick>
 8008a9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a9e:	e008      	b.n	8008ab2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008aa0:	f7fc f9d6 	bl	8004e50 <HAL_GetTick>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d901      	bls.n	8008ab2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e1dc      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ab2:	4b2e      	ldr	r3, [pc, #184]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d0f0      	beq.n	8008aa0 <HAL_RCC_OscConfig+0x3d8>
 8008abe:	e018      	b.n	8008af2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ac0:	4b2a      	ldr	r3, [pc, #168]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a29      	ldr	r2, [pc, #164]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008ac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008aca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008acc:	f7fc f9c0 	bl	8004e50 <HAL_GetTick>
 8008ad0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ad2:	e008      	b.n	8008ae6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ad4:	f7fc f9bc 	bl	8004e50 <HAL_GetTick>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d901      	bls.n	8008ae6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e1c2      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ae6:	4b21      	ldr	r3, [pc, #132]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1f0      	bne.n	8008ad4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0304 	and.w	r3, r3, #4
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 8086 	beq.w	8008c0c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008b00:	4b1b      	ldr	r3, [pc, #108]	; (8008b70 <HAL_RCC_OscConfig+0x4a8>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a1a      	ldr	r2, [pc, #104]	; (8008b70 <HAL_RCC_OscConfig+0x4a8>)
 8008b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b0c:	f7fc f9a0 	bl	8004e50 <HAL_GetTick>
 8008b10:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b12:	e008      	b.n	8008b26 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b14:	f7fc f99c 	bl	8004e50 <HAL_GetTick>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	2b64      	cmp	r3, #100	; 0x64
 8008b20:	d901      	bls.n	8008b26 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008b22:	2303      	movs	r3, #3
 8008b24:	e1a2      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b26:	4b12      	ldr	r3, [pc, #72]	; (8008b70 <HAL_RCC_OscConfig+0x4a8>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d0f0      	beq.n	8008b14 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d106      	bne.n	8008b48 <HAL_RCC_OscConfig+0x480>
 8008b3a:	4b0c      	ldr	r3, [pc, #48]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b3e:	4a0b      	ldr	r2, [pc, #44]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008b40:	f043 0301 	orr.w	r3, r3, #1
 8008b44:	6713      	str	r3, [r2, #112]	; 0x70
 8008b46:	e032      	b.n	8008bae <HAL_RCC_OscConfig+0x4e6>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d111      	bne.n	8008b74 <HAL_RCC_OscConfig+0x4ac>
 8008b50:	4b06      	ldr	r3, [pc, #24]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b54:	4a05      	ldr	r2, [pc, #20]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008b56:	f023 0301 	bic.w	r3, r3, #1
 8008b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8008b5c:	4b03      	ldr	r3, [pc, #12]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b60:	4a02      	ldr	r2, [pc, #8]	; (8008b6c <HAL_RCC_OscConfig+0x4a4>)
 8008b62:	f023 0304 	bic.w	r3, r3, #4
 8008b66:	6713      	str	r3, [r2, #112]	; 0x70
 8008b68:	e021      	b.n	8008bae <HAL_RCC_OscConfig+0x4e6>
 8008b6a:	bf00      	nop
 8008b6c:	58024400 	.word	0x58024400
 8008b70:	58024800 	.word	0x58024800
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	2b05      	cmp	r3, #5
 8008b7a:	d10c      	bne.n	8008b96 <HAL_RCC_OscConfig+0x4ce>
 8008b7c:	4b83      	ldr	r3, [pc, #524]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b80:	4a82      	ldr	r2, [pc, #520]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008b82:	f043 0304 	orr.w	r3, r3, #4
 8008b86:	6713      	str	r3, [r2, #112]	; 0x70
 8008b88:	4b80      	ldr	r3, [pc, #512]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b8c:	4a7f      	ldr	r2, [pc, #508]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008b8e:	f043 0301 	orr.w	r3, r3, #1
 8008b92:	6713      	str	r3, [r2, #112]	; 0x70
 8008b94:	e00b      	b.n	8008bae <HAL_RCC_OscConfig+0x4e6>
 8008b96:	4b7d      	ldr	r3, [pc, #500]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b9a:	4a7c      	ldr	r2, [pc, #496]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008b9c:	f023 0301 	bic.w	r3, r3, #1
 8008ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8008ba2:	4b7a      	ldr	r3, [pc, #488]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba6:	4a79      	ldr	r2, [pc, #484]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008ba8:	f023 0304 	bic.w	r3, r3, #4
 8008bac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d015      	beq.n	8008be2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bb6:	f7fc f94b 	bl	8004e50 <HAL_GetTick>
 8008bba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bbc:	e00a      	b.n	8008bd4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bbe:	f7fc f947 	bl	8004e50 <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d901      	bls.n	8008bd4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e14b      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bd4:	4b6d      	ldr	r3, [pc, #436]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd8:	f003 0302 	and.w	r3, r3, #2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d0ee      	beq.n	8008bbe <HAL_RCC_OscConfig+0x4f6>
 8008be0:	e014      	b.n	8008c0c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008be2:	f7fc f935 	bl	8004e50 <HAL_GetTick>
 8008be6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008be8:	e00a      	b.n	8008c00 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bea:	f7fc f931 	bl	8004e50 <HAL_GetTick>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d901      	bls.n	8008c00 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	e135      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c00:	4b62      	ldr	r3, [pc, #392]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c04:	f003 0302 	and.w	r3, r3, #2
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1ee      	bne.n	8008bea <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 812a 	beq.w	8008e6a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008c16:	4b5d      	ldr	r3, [pc, #372]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c1e:	2b18      	cmp	r3, #24
 8008c20:	f000 80ba 	beq.w	8008d98 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	f040 8095 	bne.w	8008d58 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c2e:	4b57      	ldr	r3, [pc, #348]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a56      	ldr	r2, [pc, #344]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008c34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c3a:	f7fc f909 	bl	8004e50 <HAL_GetTick>
 8008c3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c40:	e008      	b.n	8008c54 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c42:	f7fc f905 	bl	8004e50 <HAL_GetTick>
 8008c46:	4602      	mov	r2, r0
 8008c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d901      	bls.n	8008c54 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e10b      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c54:	4b4d      	ldr	r3, [pc, #308]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1f0      	bne.n	8008c42 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c60:	4b4a      	ldr	r3, [pc, #296]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008c62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c64:	4b4a      	ldr	r3, [pc, #296]	; (8008d90 <HAL_RCC_OscConfig+0x6c8>)
 8008c66:	4013      	ands	r3, r2
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008c70:	0112      	lsls	r2, r2, #4
 8008c72:	430a      	orrs	r2, r1
 8008c74:	4945      	ldr	r1, [pc, #276]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	628b      	str	r3, [r1, #40]	; 0x28
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	025b      	lsls	r3, r3, #9
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	431a      	orrs	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c94:	3b01      	subs	r3, #1
 8008c96:	041b      	lsls	r3, r3, #16
 8008c98:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c9c:	431a      	orrs	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	061b      	lsls	r3, r3, #24
 8008ca6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008caa:	4938      	ldr	r1, [pc, #224]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008cac:	4313      	orrs	r3, r2
 8008cae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008cb0:	4b36      	ldr	r3, [pc, #216]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb4:	4a35      	ldr	r2, [pc, #212]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008cb6:	f023 0301 	bic.w	r3, r3, #1
 8008cba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008cbc:	4b33      	ldr	r3, [pc, #204]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cc0:	4b34      	ldr	r3, [pc, #208]	; (8008d94 <HAL_RCC_OscConfig+0x6cc>)
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008cc8:	00d2      	lsls	r2, r2, #3
 8008cca:	4930      	ldr	r1, [pc, #192]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008cd0:	4b2e      	ldr	r3, [pc, #184]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd4:	f023 020c 	bic.w	r2, r3, #12
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cdc:	492b      	ldr	r1, [pc, #172]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008ce2:	4b2a      	ldr	r3, [pc, #168]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce6:	f023 0202 	bic.w	r2, r3, #2
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cee:	4927      	ldr	r1, [pc, #156]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008cf4:	4b25      	ldr	r3, [pc, #148]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf8:	4a24      	ldr	r2, [pc, #144]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d00:	4b22      	ldr	r3, [pc, #136]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	4a21      	ldr	r2, [pc, #132]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008d0c:	4b1f      	ldr	r3, [pc, #124]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d10:	4a1e      	ldr	r2, [pc, #120]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008d12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008d18:	4b1c      	ldr	r3, [pc, #112]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1c:	4a1b      	ldr	r2, [pc, #108]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008d1e:	f043 0301 	orr.w	r3, r3, #1
 8008d22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d24:	4b19      	ldr	r3, [pc, #100]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a18      	ldr	r2, [pc, #96]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d30:	f7fc f88e 	bl	8004e50 <HAL_GetTick>
 8008d34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d36:	e008      	b.n	8008d4a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d38:	f7fc f88a 	bl	8004e50 <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d901      	bls.n	8008d4a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e090      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d4a:	4b10      	ldr	r3, [pc, #64]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0f0      	beq.n	8008d38 <HAL_RCC_OscConfig+0x670>
 8008d56:	e088      	b.n	8008e6a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d58:	4b0c      	ldr	r3, [pc, #48]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a0b      	ldr	r2, [pc, #44]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008d5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d64:	f7fc f874 	bl	8004e50 <HAL_GetTick>
 8008d68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d6a:	e008      	b.n	8008d7e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d6c:	f7fc f870 	bl	8004e50 <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d901      	bls.n	8008d7e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e076      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d7e:	4b03      	ldr	r3, [pc, #12]	; (8008d8c <HAL_RCC_OscConfig+0x6c4>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f0      	bne.n	8008d6c <HAL_RCC_OscConfig+0x6a4>
 8008d8a:	e06e      	b.n	8008e6a <HAL_RCC_OscConfig+0x7a2>
 8008d8c:	58024400 	.word	0x58024400
 8008d90:	fffffc0c 	.word	0xfffffc0c
 8008d94:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008d98:	4b36      	ldr	r3, [pc, #216]	; (8008e74 <HAL_RCC_OscConfig+0x7ac>)
 8008d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008d9e:	4b35      	ldr	r3, [pc, #212]	; (8008e74 <HAL_RCC_OscConfig+0x7ac>)
 8008da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d031      	beq.n	8008e10 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	f003 0203 	and.w	r2, r3, #3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d12a      	bne.n	8008e10 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	091b      	lsrs	r3, r3, #4
 8008dbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d122      	bne.n	8008e10 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d11a      	bne.n	8008e10 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	0a5b      	lsrs	r3, r3, #9
 8008dde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d111      	bne.n	8008e10 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	0c1b      	lsrs	r3, r3, #16
 8008df0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d108      	bne.n	8008e10 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	0e1b      	lsrs	r3, r3, #24
 8008e02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d001      	beq.n	8008e14 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e02b      	b.n	8008e6c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008e14:	4b17      	ldr	r3, [pc, #92]	; (8008e74 <HAL_RCC_OscConfig+0x7ac>)
 8008e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e18:	08db      	lsrs	r3, r3, #3
 8008e1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e1e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d01f      	beq.n	8008e6a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008e2a:	4b12      	ldr	r3, [pc, #72]	; (8008e74 <HAL_RCC_OscConfig+0x7ac>)
 8008e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2e:	4a11      	ldr	r2, [pc, #68]	; (8008e74 <HAL_RCC_OscConfig+0x7ac>)
 8008e30:	f023 0301 	bic.w	r3, r3, #1
 8008e34:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008e36:	f7fc f80b 	bl	8004e50 <HAL_GetTick>
 8008e3a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008e3c:	bf00      	nop
 8008e3e:	f7fc f807 	bl	8004e50 <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d0f9      	beq.n	8008e3e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e4a:	4b0a      	ldr	r3, [pc, #40]	; (8008e74 <HAL_RCC_OscConfig+0x7ac>)
 8008e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e4e:	4b0a      	ldr	r3, [pc, #40]	; (8008e78 <HAL_RCC_OscConfig+0x7b0>)
 8008e50:	4013      	ands	r3, r2
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e56:	00d2      	lsls	r2, r2, #3
 8008e58:	4906      	ldr	r1, [pc, #24]	; (8008e74 <HAL_RCC_OscConfig+0x7ac>)
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008e5e:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <HAL_RCC_OscConfig+0x7ac>)
 8008e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e62:	4a04      	ldr	r2, [pc, #16]	; (8008e74 <HAL_RCC_OscConfig+0x7ac>)
 8008e64:	f043 0301 	orr.w	r3, r3, #1
 8008e68:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3730      	adds	r7, #48	; 0x30
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	58024400 	.word	0x58024400
 8008e78:	ffff0007 	.word	0xffff0007

08008e7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e19c      	b.n	80091ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e90:	4b8a      	ldr	r3, [pc, #552]	; (80090bc <HAL_RCC_ClockConfig+0x240>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 030f 	and.w	r3, r3, #15
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d910      	bls.n	8008ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e9e:	4b87      	ldr	r3, [pc, #540]	; (80090bc <HAL_RCC_ClockConfig+0x240>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f023 020f 	bic.w	r2, r3, #15
 8008ea6:	4985      	ldr	r1, [pc, #532]	; (80090bc <HAL_RCC_ClockConfig+0x240>)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eae:	4b83      	ldr	r3, [pc, #524]	; (80090bc <HAL_RCC_ClockConfig+0x240>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 030f 	and.w	r3, r3, #15
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d001      	beq.n	8008ec0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e184      	b.n	80091ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 0304 	and.w	r3, r3, #4
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d010      	beq.n	8008eee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	691a      	ldr	r2, [r3, #16]
 8008ed0:	4b7b      	ldr	r3, [pc, #492]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d908      	bls.n	8008eee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008edc:	4b78      	ldr	r3, [pc, #480]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	4975      	ldr	r1, [pc, #468]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008eea:	4313      	orrs	r3, r2
 8008eec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0308 	and.w	r3, r3, #8
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d010      	beq.n	8008f1c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	695a      	ldr	r2, [r3, #20]
 8008efe:	4b70      	ldr	r3, [pc, #448]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d908      	bls.n	8008f1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f0a:	4b6d      	ldr	r3, [pc, #436]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	496a      	ldr	r1, [pc, #424]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 0310 	and.w	r3, r3, #16
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d010      	beq.n	8008f4a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	699a      	ldr	r2, [r3, #24]
 8008f2c:	4b64      	ldr	r3, [pc, #400]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008f2e:	69db      	ldr	r3, [r3, #28]
 8008f30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d908      	bls.n	8008f4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f38:	4b61      	ldr	r3, [pc, #388]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008f3a:	69db      	ldr	r3, [r3, #28]
 8008f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	699b      	ldr	r3, [r3, #24]
 8008f44:	495e      	ldr	r1, [pc, #376]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008f46:	4313      	orrs	r3, r2
 8008f48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 0320 	and.w	r3, r3, #32
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d010      	beq.n	8008f78 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	69da      	ldr	r2, [r3, #28]
 8008f5a:	4b59      	ldr	r3, [pc, #356]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008f5c:	6a1b      	ldr	r3, [r3, #32]
 8008f5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d908      	bls.n	8008f78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008f66:	4b56      	ldr	r3, [pc, #344]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	69db      	ldr	r3, [r3, #28]
 8008f72:	4953      	ldr	r1, [pc, #332]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008f74:	4313      	orrs	r3, r2
 8008f76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 0302 	and.w	r3, r3, #2
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d010      	beq.n	8008fa6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68da      	ldr	r2, [r3, #12]
 8008f88:	4b4d      	ldr	r3, [pc, #308]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	f003 030f 	and.w	r3, r3, #15
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d908      	bls.n	8008fa6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f94:	4b4a      	ldr	r3, [pc, #296]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	f023 020f 	bic.w	r2, r3, #15
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	4947      	ldr	r1, [pc, #284]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f003 0301 	and.w	r3, r3, #1
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d055      	beq.n	800905e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008fb2:	4b43      	ldr	r3, [pc, #268]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	4940      	ldr	r1, [pc, #256]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d107      	bne.n	8008fdc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008fcc:	4b3c      	ldr	r3, [pc, #240]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d121      	bne.n	800901c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e0f6      	b.n	80091ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	d107      	bne.n	8008ff4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008fe4:	4b36      	ldr	r3, [pc, #216]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d115      	bne.n	800901c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e0ea      	b.n	80091ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d107      	bne.n	800900c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ffc:	4b30      	ldr	r3, [pc, #192]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009004:	2b00      	cmp	r3, #0
 8009006:	d109      	bne.n	800901c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	e0de      	b.n	80091ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800900c:	4b2c      	ldr	r3, [pc, #176]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0304 	and.w	r3, r3, #4
 8009014:	2b00      	cmp	r3, #0
 8009016:	d101      	bne.n	800901c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e0d6      	b.n	80091ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800901c:	4b28      	ldr	r3, [pc, #160]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	f023 0207 	bic.w	r2, r3, #7
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	4925      	ldr	r1, [pc, #148]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 800902a:	4313      	orrs	r3, r2
 800902c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800902e:	f7fb ff0f 	bl	8004e50 <HAL_GetTick>
 8009032:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009034:	e00a      	b.n	800904c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009036:	f7fb ff0b 	bl	8004e50 <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	f241 3288 	movw	r2, #5000	; 0x1388
 8009044:	4293      	cmp	r3, r2
 8009046:	d901      	bls.n	800904c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e0be      	b.n	80091ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800904c:	4b1c      	ldr	r3, [pc, #112]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	00db      	lsls	r3, r3, #3
 800905a:	429a      	cmp	r2, r3
 800905c:	d1eb      	bne.n	8009036 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0302 	and.w	r3, r3, #2
 8009066:	2b00      	cmp	r3, #0
 8009068:	d010      	beq.n	800908c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68da      	ldr	r2, [r3, #12]
 800906e:	4b14      	ldr	r3, [pc, #80]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	f003 030f 	and.w	r3, r3, #15
 8009076:	429a      	cmp	r2, r3
 8009078:	d208      	bcs.n	800908c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800907a:	4b11      	ldr	r3, [pc, #68]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	f023 020f 	bic.w	r2, r3, #15
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	490e      	ldr	r1, [pc, #56]	; (80090c0 <HAL_RCC_ClockConfig+0x244>)
 8009088:	4313      	orrs	r3, r2
 800908a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800908c:	4b0b      	ldr	r3, [pc, #44]	; (80090bc <HAL_RCC_ClockConfig+0x240>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 030f 	and.w	r3, r3, #15
 8009094:	683a      	ldr	r2, [r7, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d214      	bcs.n	80090c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800909a:	4b08      	ldr	r3, [pc, #32]	; (80090bc <HAL_RCC_ClockConfig+0x240>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f023 020f 	bic.w	r2, r3, #15
 80090a2:	4906      	ldr	r1, [pc, #24]	; (80090bc <HAL_RCC_ClockConfig+0x240>)
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090aa:	4b04      	ldr	r3, [pc, #16]	; (80090bc <HAL_RCC_ClockConfig+0x240>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 030f 	and.w	r3, r3, #15
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d005      	beq.n	80090c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e086      	b.n	80091ca <HAL_RCC_ClockConfig+0x34e>
 80090bc:	52002000 	.word	0x52002000
 80090c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d010      	beq.n	80090f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	691a      	ldr	r2, [r3, #16]
 80090d4:	4b3f      	ldr	r3, [pc, #252]	; (80091d4 <HAL_RCC_ClockConfig+0x358>)
 80090d6:	699b      	ldr	r3, [r3, #24]
 80090d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090dc:	429a      	cmp	r2, r3
 80090de:	d208      	bcs.n	80090f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80090e0:	4b3c      	ldr	r3, [pc, #240]	; (80091d4 <HAL_RCC_ClockConfig+0x358>)
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	4939      	ldr	r1, [pc, #228]	; (80091d4 <HAL_RCC_ClockConfig+0x358>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0308 	and.w	r3, r3, #8
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d010      	beq.n	8009120 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	695a      	ldr	r2, [r3, #20]
 8009102:	4b34      	ldr	r3, [pc, #208]	; (80091d4 <HAL_RCC_ClockConfig+0x358>)
 8009104:	69db      	ldr	r3, [r3, #28]
 8009106:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800910a:	429a      	cmp	r2, r3
 800910c:	d208      	bcs.n	8009120 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800910e:	4b31      	ldr	r3, [pc, #196]	; (80091d4 <HAL_RCC_ClockConfig+0x358>)
 8009110:	69db      	ldr	r3, [r3, #28]
 8009112:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	492e      	ldr	r1, [pc, #184]	; (80091d4 <HAL_RCC_ClockConfig+0x358>)
 800911c:	4313      	orrs	r3, r2
 800911e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0310 	and.w	r3, r3, #16
 8009128:	2b00      	cmp	r3, #0
 800912a:	d010      	beq.n	800914e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	699a      	ldr	r2, [r3, #24]
 8009130:	4b28      	ldr	r3, [pc, #160]	; (80091d4 <HAL_RCC_ClockConfig+0x358>)
 8009132:	69db      	ldr	r3, [r3, #28]
 8009134:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009138:	429a      	cmp	r2, r3
 800913a:	d208      	bcs.n	800914e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800913c:	4b25      	ldr	r3, [pc, #148]	; (80091d4 <HAL_RCC_ClockConfig+0x358>)
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	4922      	ldr	r1, [pc, #136]	; (80091d4 <HAL_RCC_ClockConfig+0x358>)
 800914a:	4313      	orrs	r3, r2
 800914c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 0320 	and.w	r3, r3, #32
 8009156:	2b00      	cmp	r3, #0
 8009158:	d010      	beq.n	800917c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	69da      	ldr	r2, [r3, #28]
 800915e:	4b1d      	ldr	r3, [pc, #116]	; (80091d4 <HAL_RCC_ClockConfig+0x358>)
 8009160:	6a1b      	ldr	r3, [r3, #32]
 8009162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009166:	429a      	cmp	r2, r3
 8009168:	d208      	bcs.n	800917c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800916a:	4b1a      	ldr	r3, [pc, #104]	; (80091d4 <HAL_RCC_ClockConfig+0x358>)
 800916c:	6a1b      	ldr	r3, [r3, #32]
 800916e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	69db      	ldr	r3, [r3, #28]
 8009176:	4917      	ldr	r1, [pc, #92]	; (80091d4 <HAL_RCC_ClockConfig+0x358>)
 8009178:	4313      	orrs	r3, r2
 800917a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800917c:	f000 f834 	bl	80091e8 <HAL_RCC_GetSysClockFreq>
 8009180:	4602      	mov	r2, r0
 8009182:	4b14      	ldr	r3, [pc, #80]	; (80091d4 <HAL_RCC_ClockConfig+0x358>)
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	0a1b      	lsrs	r3, r3, #8
 8009188:	f003 030f 	and.w	r3, r3, #15
 800918c:	4912      	ldr	r1, [pc, #72]	; (80091d8 <HAL_RCC_ClockConfig+0x35c>)
 800918e:	5ccb      	ldrb	r3, [r1, r3]
 8009190:	f003 031f 	and.w	r3, r3, #31
 8009194:	fa22 f303 	lsr.w	r3, r2, r3
 8009198:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800919a:	4b0e      	ldr	r3, [pc, #56]	; (80091d4 <HAL_RCC_ClockConfig+0x358>)
 800919c:	699b      	ldr	r3, [r3, #24]
 800919e:	f003 030f 	and.w	r3, r3, #15
 80091a2:	4a0d      	ldr	r2, [pc, #52]	; (80091d8 <HAL_RCC_ClockConfig+0x35c>)
 80091a4:	5cd3      	ldrb	r3, [r2, r3]
 80091a6:	f003 031f 	and.w	r3, r3, #31
 80091aa:	693a      	ldr	r2, [r7, #16]
 80091ac:	fa22 f303 	lsr.w	r3, r2, r3
 80091b0:	4a0a      	ldr	r2, [pc, #40]	; (80091dc <HAL_RCC_ClockConfig+0x360>)
 80091b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80091b4:	4a0a      	ldr	r2, [pc, #40]	; (80091e0 <HAL_RCC_ClockConfig+0x364>)
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80091ba:	4b0a      	ldr	r3, [pc, #40]	; (80091e4 <HAL_RCC_ClockConfig+0x368>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fb fdfc 	bl	8004dbc <HAL_InitTick>
 80091c4:	4603      	mov	r3, r0
 80091c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3718      	adds	r7, #24
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	58024400 	.word	0x58024400
 80091d8:	0800f338 	.word	0x0800f338
 80091dc:	24000004 	.word	0x24000004
 80091e0:	24000000 	.word	0x24000000
 80091e4:	24000008 	.word	0x24000008

080091e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b089      	sub	sp, #36	; 0x24
 80091ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091ee:	4bb3      	ldr	r3, [pc, #716]	; (80094bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091f6:	2b18      	cmp	r3, #24
 80091f8:	f200 8155 	bhi.w	80094a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80091fc:	a201      	add	r2, pc, #4	; (adr r2, 8009204 <HAL_RCC_GetSysClockFreq+0x1c>)
 80091fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009202:	bf00      	nop
 8009204:	08009269 	.word	0x08009269
 8009208:	080094a7 	.word	0x080094a7
 800920c:	080094a7 	.word	0x080094a7
 8009210:	080094a7 	.word	0x080094a7
 8009214:	080094a7 	.word	0x080094a7
 8009218:	080094a7 	.word	0x080094a7
 800921c:	080094a7 	.word	0x080094a7
 8009220:	080094a7 	.word	0x080094a7
 8009224:	0800928f 	.word	0x0800928f
 8009228:	080094a7 	.word	0x080094a7
 800922c:	080094a7 	.word	0x080094a7
 8009230:	080094a7 	.word	0x080094a7
 8009234:	080094a7 	.word	0x080094a7
 8009238:	080094a7 	.word	0x080094a7
 800923c:	080094a7 	.word	0x080094a7
 8009240:	080094a7 	.word	0x080094a7
 8009244:	08009295 	.word	0x08009295
 8009248:	080094a7 	.word	0x080094a7
 800924c:	080094a7 	.word	0x080094a7
 8009250:	080094a7 	.word	0x080094a7
 8009254:	080094a7 	.word	0x080094a7
 8009258:	080094a7 	.word	0x080094a7
 800925c:	080094a7 	.word	0x080094a7
 8009260:	080094a7 	.word	0x080094a7
 8009264:	0800929b 	.word	0x0800929b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009268:	4b94      	ldr	r3, [pc, #592]	; (80094bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0320 	and.w	r3, r3, #32
 8009270:	2b00      	cmp	r3, #0
 8009272:	d009      	beq.n	8009288 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009274:	4b91      	ldr	r3, [pc, #580]	; (80094bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	08db      	lsrs	r3, r3, #3
 800927a:	f003 0303 	and.w	r3, r3, #3
 800927e:	4a90      	ldr	r2, [pc, #576]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009280:	fa22 f303 	lsr.w	r3, r2, r3
 8009284:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009286:	e111      	b.n	80094ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009288:	4b8d      	ldr	r3, [pc, #564]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800928a:	61bb      	str	r3, [r7, #24]
      break;
 800928c:	e10e      	b.n	80094ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800928e:	4b8d      	ldr	r3, [pc, #564]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009290:	61bb      	str	r3, [r7, #24]
      break;
 8009292:	e10b      	b.n	80094ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009294:	4b8c      	ldr	r3, [pc, #560]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009296:	61bb      	str	r3, [r7, #24]
      break;
 8009298:	e108      	b.n	80094ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800929a:	4b88      	ldr	r3, [pc, #544]	; (80094bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800929c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929e:	f003 0303 	and.w	r3, r3, #3
 80092a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80092a4:	4b85      	ldr	r3, [pc, #532]	; (80094bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a8:	091b      	lsrs	r3, r3, #4
 80092aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80092b0:	4b82      	ldr	r3, [pc, #520]	; (80094bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80092ba:	4b80      	ldr	r3, [pc, #512]	; (80094bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092be:	08db      	lsrs	r3, r3, #3
 80092c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	fb02 f303 	mul.w	r3, r2, r3
 80092ca:	ee07 3a90 	vmov	s15, r3
 80092ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 80e1 	beq.w	80094a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	f000 8083 	beq.w	80093ec <HAL_RCC_GetSysClockFreq+0x204>
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	f200 80a1 	bhi.w	8009430 <HAL_RCC_GetSysClockFreq+0x248>
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d003      	beq.n	80092fc <HAL_RCC_GetSysClockFreq+0x114>
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d056      	beq.n	80093a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80092fa:	e099      	b.n	8009430 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092fc:	4b6f      	ldr	r3, [pc, #444]	; (80094bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 0320 	and.w	r3, r3, #32
 8009304:	2b00      	cmp	r3, #0
 8009306:	d02d      	beq.n	8009364 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009308:	4b6c      	ldr	r3, [pc, #432]	; (80094bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	08db      	lsrs	r3, r3, #3
 800930e:	f003 0303 	and.w	r3, r3, #3
 8009312:	4a6b      	ldr	r2, [pc, #428]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009314:	fa22 f303 	lsr.w	r3, r2, r3
 8009318:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	ee07 3a90 	vmov	s15, r3
 8009320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	ee07 3a90 	vmov	s15, r3
 800932a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800932e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009332:	4b62      	ldr	r3, [pc, #392]	; (80094bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800933a:	ee07 3a90 	vmov	s15, r3
 800933e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009342:	ed97 6a02 	vldr	s12, [r7, #8]
 8009346:	eddf 5a61 	vldr	s11, [pc, #388]	; 80094cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800934a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800934e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800935a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800935e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009362:	e087      	b.n	8009474 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	ee07 3a90 	vmov	s15, r3
 800936a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800936e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80094d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009376:	4b51      	ldr	r3, [pc, #324]	; (80094bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800937a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800937e:	ee07 3a90 	vmov	s15, r3
 8009382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009386:	ed97 6a02 	vldr	s12, [r7, #8]
 800938a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80094cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800938e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800939a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800939e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80093a6:	e065      	b.n	8009474 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	ee07 3a90 	vmov	s15, r3
 80093ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80094d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80093b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ba:	4b40      	ldr	r3, [pc, #256]	; (80094bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c2:	ee07 3a90 	vmov	s15, r3
 80093c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80093ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80094cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80093d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80093ea:	e043      	b.n	8009474 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	ee07 3a90 	vmov	s15, r3
 80093f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80094d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80093fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093fe:	4b2f      	ldr	r3, [pc, #188]	; (80094bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009406:	ee07 3a90 	vmov	s15, r3
 800940a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800940e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009412:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80094cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800941a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800941e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800942a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800942e:	e021      	b.n	8009474 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	ee07 3a90 	vmov	s15, r3
 8009436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80094d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800943e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009442:	4b1e      	ldr	r3, [pc, #120]	; (80094bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800944a:	ee07 3a90 	vmov	s15, r3
 800944e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009452:	ed97 6a02 	vldr	s12, [r7, #8]
 8009456:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80094cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800945a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800945e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800946a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800946e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009472:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009474:	4b11      	ldr	r3, [pc, #68]	; (80094bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009478:	0a5b      	lsrs	r3, r3, #9
 800947a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800947e:	3301      	adds	r3, #1
 8009480:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	ee07 3a90 	vmov	s15, r3
 8009488:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800948c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009498:	ee17 3a90 	vmov	r3, s15
 800949c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800949e:	e005      	b.n	80094ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80094a0:	2300      	movs	r3, #0
 80094a2:	61bb      	str	r3, [r7, #24]
      break;
 80094a4:	e002      	b.n	80094ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80094a6:	4b07      	ldr	r3, [pc, #28]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094a8:	61bb      	str	r3, [r7, #24]
      break;
 80094aa:	bf00      	nop
  }

  return sysclockfreq;
 80094ac:	69bb      	ldr	r3, [r7, #24]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3724      	adds	r7, #36	; 0x24
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	58024400 	.word	0x58024400
 80094c0:	03d09000 	.word	0x03d09000
 80094c4:	003d0900 	.word	0x003d0900
 80094c8:	007a1200 	.word	0x007a1200
 80094cc:	46000000 	.word	0x46000000
 80094d0:	4c742400 	.word	0x4c742400
 80094d4:	4a742400 	.word	0x4a742400
 80094d8:	4af42400 	.word	0x4af42400

080094dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80094e2:	f7ff fe81 	bl	80091e8 <HAL_RCC_GetSysClockFreq>
 80094e6:	4602      	mov	r2, r0
 80094e8:	4b10      	ldr	r3, [pc, #64]	; (800952c <HAL_RCC_GetHCLKFreq+0x50>)
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	0a1b      	lsrs	r3, r3, #8
 80094ee:	f003 030f 	and.w	r3, r3, #15
 80094f2:	490f      	ldr	r1, [pc, #60]	; (8009530 <HAL_RCC_GetHCLKFreq+0x54>)
 80094f4:	5ccb      	ldrb	r3, [r1, r3]
 80094f6:	f003 031f 	and.w	r3, r3, #31
 80094fa:	fa22 f303 	lsr.w	r3, r2, r3
 80094fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009500:	4b0a      	ldr	r3, [pc, #40]	; (800952c <HAL_RCC_GetHCLKFreq+0x50>)
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	f003 030f 	and.w	r3, r3, #15
 8009508:	4a09      	ldr	r2, [pc, #36]	; (8009530 <HAL_RCC_GetHCLKFreq+0x54>)
 800950a:	5cd3      	ldrb	r3, [r2, r3]
 800950c:	f003 031f 	and.w	r3, r3, #31
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	fa22 f303 	lsr.w	r3, r2, r3
 8009516:	4a07      	ldr	r2, [pc, #28]	; (8009534 <HAL_RCC_GetHCLKFreq+0x58>)
 8009518:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800951a:	4a07      	ldr	r2, [pc, #28]	; (8009538 <HAL_RCC_GetHCLKFreq+0x5c>)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009520:	4b04      	ldr	r3, [pc, #16]	; (8009534 <HAL_RCC_GetHCLKFreq+0x58>)
 8009522:	681b      	ldr	r3, [r3, #0]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	58024400 	.word	0x58024400
 8009530:	0800f338 	.word	0x0800f338
 8009534:	24000004 	.word	0x24000004
 8009538:	24000000 	.word	0x24000000

0800953c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009540:	f7ff ffcc 	bl	80094dc <HAL_RCC_GetHCLKFreq>
 8009544:	4602      	mov	r2, r0
 8009546:	4b06      	ldr	r3, [pc, #24]	; (8009560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009548:	69db      	ldr	r3, [r3, #28]
 800954a:	091b      	lsrs	r3, r3, #4
 800954c:	f003 0307 	and.w	r3, r3, #7
 8009550:	4904      	ldr	r1, [pc, #16]	; (8009564 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009552:	5ccb      	ldrb	r3, [r1, r3]
 8009554:	f003 031f 	and.w	r3, r3, #31
 8009558:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800955c:	4618      	mov	r0, r3
 800955e:	bd80      	pop	{r7, pc}
 8009560:	58024400 	.word	0x58024400
 8009564:	0800f338 	.word	0x0800f338

08009568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800956c:	f7ff ffb6 	bl	80094dc <HAL_RCC_GetHCLKFreq>
 8009570:	4602      	mov	r2, r0
 8009572:	4b06      	ldr	r3, [pc, #24]	; (800958c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009574:	69db      	ldr	r3, [r3, #28]
 8009576:	0a1b      	lsrs	r3, r3, #8
 8009578:	f003 0307 	and.w	r3, r3, #7
 800957c:	4904      	ldr	r1, [pc, #16]	; (8009590 <HAL_RCC_GetPCLK2Freq+0x28>)
 800957e:	5ccb      	ldrb	r3, [r1, r3]
 8009580:	f003 031f 	and.w	r3, r3, #31
 8009584:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009588:	4618      	mov	r0, r3
 800958a:	bd80      	pop	{r7, pc}
 800958c:	58024400 	.word	0x58024400
 8009590:	0800f338 	.word	0x0800f338

08009594 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009598:	b0c6      	sub	sp, #280	; 0x118
 800959a:	af00      	add	r7, sp, #0
 800959c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80095a0:	2300      	movs	r3, #0
 80095a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80095a6:	2300      	movs	r3, #0
 80095a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80095ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80095b8:	2500      	movs	r5, #0
 80095ba:	ea54 0305 	orrs.w	r3, r4, r5
 80095be:	d049      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80095c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095ca:	d02f      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80095cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095d0:	d828      	bhi.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80095d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095d6:	d01a      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80095d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095dc:	d822      	bhi.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d003      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80095e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095e6:	d007      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80095e8:	e01c      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095ea:	4bab      	ldr	r3, [pc, #684]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80095ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ee:	4aaa      	ldr	r2, [pc, #680]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80095f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80095f6:	e01a      	b.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80095f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095fc:	3308      	adds	r3, #8
 80095fe:	2102      	movs	r1, #2
 8009600:	4618      	mov	r0, r3
 8009602:	f001 fc25 	bl	800ae50 <RCCEx_PLL2_Config>
 8009606:	4603      	mov	r3, r0
 8009608:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800960c:	e00f      	b.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800960e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009612:	3328      	adds	r3, #40	; 0x28
 8009614:	2102      	movs	r1, #2
 8009616:	4618      	mov	r0, r3
 8009618:	f001 fccc 	bl	800afb4 <RCCEx_PLL3_Config>
 800961c:	4603      	mov	r3, r0
 800961e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009622:	e004      	b.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800962a:	e000      	b.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800962c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800962e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10a      	bne.n	800964c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009636:	4b98      	ldr	r3, [pc, #608]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800963a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800963e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009644:	4a94      	ldr	r2, [pc, #592]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009646:	430b      	orrs	r3, r1
 8009648:	6513      	str	r3, [r2, #80]	; 0x50
 800964a:	e003      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800964c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009650:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009660:	f04f 0900 	mov.w	r9, #0
 8009664:	ea58 0309 	orrs.w	r3, r8, r9
 8009668:	d047      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800966a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800966e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009670:	2b04      	cmp	r3, #4
 8009672:	d82a      	bhi.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009674:	a201      	add	r2, pc, #4	; (adr r2, 800967c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967a:	bf00      	nop
 800967c:	08009691 	.word	0x08009691
 8009680:	0800969f 	.word	0x0800969f
 8009684:	080096b5 	.word	0x080096b5
 8009688:	080096d3 	.word	0x080096d3
 800968c:	080096d3 	.word	0x080096d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009690:	4b81      	ldr	r3, [pc, #516]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009694:	4a80      	ldr	r2, [pc, #512]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800969a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800969c:	e01a      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800969e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096a2:	3308      	adds	r3, #8
 80096a4:	2100      	movs	r1, #0
 80096a6:	4618      	mov	r0, r3
 80096a8:	f001 fbd2 	bl	800ae50 <RCCEx_PLL2_Config>
 80096ac:	4603      	mov	r3, r0
 80096ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096b2:	e00f      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80096b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096b8:	3328      	adds	r3, #40	; 0x28
 80096ba:	2100      	movs	r1, #0
 80096bc:	4618      	mov	r0, r3
 80096be:	f001 fc79 	bl	800afb4 <RCCEx_PLL3_Config>
 80096c2:	4603      	mov	r3, r0
 80096c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096c8:	e004      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80096d0:	e000      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80096d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10a      	bne.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80096dc:	4b6e      	ldr	r3, [pc, #440]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096e0:	f023 0107 	bic.w	r1, r3, #7
 80096e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ea:	4a6b      	ldr	r2, [pc, #428]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096ec:	430b      	orrs	r3, r1
 80096ee:	6513      	str	r3, [r2, #80]	; 0x50
 80096f0:	e003      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80096fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009702:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8009706:	f04f 0b00 	mov.w	fp, #0
 800970a:	ea5a 030b 	orrs.w	r3, sl, fp
 800970e:	d05b      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009714:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009718:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800971c:	d03b      	beq.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800971e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009722:	d834      	bhi.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009724:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009728:	d037      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800972a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800972e:	d82e      	bhi.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009730:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009734:	d033      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009736:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800973a:	d828      	bhi.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800973c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009740:	d01a      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009746:	d822      	bhi.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009748:	2b00      	cmp	r3, #0
 800974a:	d003      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800974c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009750:	d007      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009752:	e01c      	b.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009754:	4b50      	ldr	r3, [pc, #320]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009758:	4a4f      	ldr	r2, [pc, #316]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800975a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800975e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009760:	e01e      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009766:	3308      	adds	r3, #8
 8009768:	2100      	movs	r1, #0
 800976a:	4618      	mov	r0, r3
 800976c:	f001 fb70 	bl	800ae50 <RCCEx_PLL2_Config>
 8009770:	4603      	mov	r3, r0
 8009772:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009776:	e013      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800977c:	3328      	adds	r3, #40	; 0x28
 800977e:	2100      	movs	r1, #0
 8009780:	4618      	mov	r0, r3
 8009782:	f001 fc17 	bl	800afb4 <RCCEx_PLL3_Config>
 8009786:	4603      	mov	r3, r0
 8009788:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800978c:	e008      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009794:	e004      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009796:	bf00      	nop
 8009798:	e002      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800979a:	bf00      	nop
 800979c:	e000      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800979e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10b      	bne.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80097a8:	4b3b      	ldr	r3, [pc, #236]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80097aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ac:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80097b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80097b8:	4a37      	ldr	r2, [pc, #220]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80097ba:	430b      	orrs	r3, r1
 80097bc:	6593      	str	r3, [r2, #88]	; 0x58
 80097be:	e003      	b.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80097c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80097c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80097d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80097d8:	2300      	movs	r3, #0
 80097da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80097de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80097e2:	460b      	mov	r3, r1
 80097e4:	4313      	orrs	r3, r2
 80097e6:	d05d      	beq.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80097e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80097f0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80097f4:	d03b      	beq.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80097f6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80097fa:	d834      	bhi.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80097fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009800:	d037      	beq.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009802:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009806:	d82e      	bhi.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009808:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800980c:	d033      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800980e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009812:	d828      	bhi.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009814:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009818:	d01a      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800981a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800981e:	d822      	bhi.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009820:	2b00      	cmp	r3, #0
 8009822:	d003      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009828:	d007      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800982a:	e01c      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800982c:	4b1a      	ldr	r3, [pc, #104]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800982e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009830:	4a19      	ldr	r2, [pc, #100]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009836:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009838:	e01e      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800983a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800983e:	3308      	adds	r3, #8
 8009840:	2100      	movs	r1, #0
 8009842:	4618      	mov	r0, r3
 8009844:	f001 fb04 	bl	800ae50 <RCCEx_PLL2_Config>
 8009848:	4603      	mov	r3, r0
 800984a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800984e:	e013      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009854:	3328      	adds	r3, #40	; 0x28
 8009856:	2100      	movs	r1, #0
 8009858:	4618      	mov	r0, r3
 800985a:	f001 fbab 	bl	800afb4 <RCCEx_PLL3_Config>
 800985e:	4603      	mov	r3, r0
 8009860:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009864:	e008      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800986c:	e004      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800986e:	bf00      	nop
 8009870:	e002      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009872:	bf00      	nop
 8009874:	e000      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009878:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10d      	bne.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009880:	4b05      	ldr	r3, [pc, #20]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009884:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800988c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009890:	4a01      	ldr	r2, [pc, #4]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009892:	430b      	orrs	r3, r1
 8009894:	6593      	str	r3, [r2, #88]	; 0x58
 8009896:	e005      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009898:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800989c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80098a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80098a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ac:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80098b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80098b4:	2300      	movs	r3, #0
 80098b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80098ba:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80098be:	460b      	mov	r3, r1
 80098c0:	4313      	orrs	r3, r2
 80098c2:	d03a      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80098c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ca:	2b30      	cmp	r3, #48	; 0x30
 80098cc:	d01f      	beq.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80098ce:	2b30      	cmp	r3, #48	; 0x30
 80098d0:	d819      	bhi.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80098d2:	2b20      	cmp	r3, #32
 80098d4:	d00c      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80098d6:	2b20      	cmp	r3, #32
 80098d8:	d815      	bhi.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d019      	beq.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80098de:	2b10      	cmp	r3, #16
 80098e0:	d111      	bne.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098e2:	4baa      	ldr	r3, [pc, #680]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e6:	4aa9      	ldr	r2, [pc, #676]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80098ee:	e011      	b.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80098f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098f4:	3308      	adds	r3, #8
 80098f6:	2102      	movs	r1, #2
 80098f8:	4618      	mov	r0, r3
 80098fa:	f001 faa9 	bl	800ae50 <RCCEx_PLL2_Config>
 80098fe:	4603      	mov	r3, r0
 8009900:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009904:	e006      	b.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800990c:	e002      	b.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800990e:	bf00      	nop
 8009910:	e000      	b.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009914:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009918:	2b00      	cmp	r3, #0
 800991a:	d10a      	bne.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800991c:	4b9b      	ldr	r3, [pc, #620]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800991e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009920:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800992a:	4a98      	ldr	r2, [pc, #608]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800992c:	430b      	orrs	r3, r1
 800992e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009930:	e003      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009932:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009936:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800993a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800993e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009942:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009946:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800994a:	2300      	movs	r3, #0
 800994c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009950:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009954:	460b      	mov	r3, r1
 8009956:	4313      	orrs	r3, r2
 8009958:	d051      	beq.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800995a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800995e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009964:	d035      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800996a:	d82e      	bhi.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 800996c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009970:	d031      	beq.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009972:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009976:	d828      	bhi.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800997c:	d01a      	beq.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800997e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009982:	d822      	bhi.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009984:	2b00      	cmp	r3, #0
 8009986:	d003      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800998c:	d007      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800998e:	e01c      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009990:	4b7e      	ldr	r3, [pc, #504]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009994:	4a7d      	ldr	r2, [pc, #500]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800999a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800999c:	e01c      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800999e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099a2:	3308      	adds	r3, #8
 80099a4:	2100      	movs	r1, #0
 80099a6:	4618      	mov	r0, r3
 80099a8:	f001 fa52 	bl	800ae50 <RCCEx_PLL2_Config>
 80099ac:	4603      	mov	r3, r0
 80099ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80099b2:	e011      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099b8:	3328      	adds	r3, #40	; 0x28
 80099ba:	2100      	movs	r1, #0
 80099bc:	4618      	mov	r0, r3
 80099be:	f001 faf9 	bl	800afb4 <RCCEx_PLL3_Config>
 80099c2:	4603      	mov	r3, r0
 80099c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80099c8:	e006      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80099d0:	e002      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80099d2:	bf00      	nop
 80099d4:	e000      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80099d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10a      	bne.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80099e0:	4b6a      	ldr	r3, [pc, #424]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099e4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80099e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099ee:	4a67      	ldr	r2, [pc, #412]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099f0:	430b      	orrs	r3, r1
 80099f2:	6513      	str	r3, [r2, #80]	; 0x50
 80099f4:	e003      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80099fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a06:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009a0a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a14:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009a18:	460b      	mov	r3, r1
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	d053      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a28:	d033      	beq.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009a2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a2e:	d82c      	bhi.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009a30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a34:	d02f      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009a36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a3a:	d826      	bhi.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009a3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a40:	d02b      	beq.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009a42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a46:	d820      	bhi.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a4c:	d012      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009a4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a52:	d81a      	bhi.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d022      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a5c:	d115      	bne.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a62:	3308      	adds	r3, #8
 8009a64:	2101      	movs	r1, #1
 8009a66:	4618      	mov	r0, r3
 8009a68:	f001 f9f2 	bl	800ae50 <RCCEx_PLL2_Config>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009a72:	e015      	b.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a78:	3328      	adds	r3, #40	; 0x28
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f001 fa99 	bl	800afb4 <RCCEx_PLL3_Config>
 8009a82:	4603      	mov	r3, r0
 8009a84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009a88:	e00a      	b.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009a90:	e006      	b.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009a92:	bf00      	nop
 8009a94:	e004      	b.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009a96:	bf00      	nop
 8009a98:	e002      	b.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009a9a:	bf00      	nop
 8009a9c:	e000      	b.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10a      	bne.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009aa8:	4b38      	ldr	r3, [pc, #224]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ab6:	4a35      	ldr	r2, [pc, #212]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009ab8:	430b      	orrs	r3, r1
 8009aba:	6513      	str	r3, [r2, #80]	; 0x50
 8009abc:	e003      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009abe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ac2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009adc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	d058      	beq.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009af2:	d033      	beq.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009af8:	d82c      	bhi.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009afe:	d02f      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b04:	d826      	bhi.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b0a:	d02b      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009b0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b10:	d820      	bhi.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b16:	d012      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b1c:	d81a      	bhi.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d022      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009b22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b26:	d115      	bne.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b2c:	3308      	adds	r3, #8
 8009b2e:	2101      	movs	r1, #1
 8009b30:	4618      	mov	r0, r3
 8009b32:	f001 f98d 	bl	800ae50 <RCCEx_PLL2_Config>
 8009b36:	4603      	mov	r3, r0
 8009b38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009b3c:	e015      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b42:	3328      	adds	r3, #40	; 0x28
 8009b44:	2101      	movs	r1, #1
 8009b46:	4618      	mov	r0, r3
 8009b48:	f001 fa34 	bl	800afb4 <RCCEx_PLL3_Config>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009b52:	e00a      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009b5a:	e006      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009b5c:	bf00      	nop
 8009b5e:	e004      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009b60:	bf00      	nop
 8009b62:	e002      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009b64:	bf00      	nop
 8009b66:	e000      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10e      	bne.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009b72:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b76:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b82:	4a02      	ldr	r2, [pc, #8]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b84:	430b      	orrs	r3, r1
 8009b86:	6593      	str	r3, [r2, #88]	; 0x58
 8009b88:	e006      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009b8a:	bf00      	nop
 8009b8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ba8:	2300      	movs	r3, #0
 8009baa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009bae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	d037      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bc2:	d00e      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bc8:	d816      	bhi.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d018      	beq.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009bce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bd2:	d111      	bne.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bd4:	4bc4      	ldr	r3, [pc, #784]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd8:	4ac3      	ldr	r2, [pc, #780]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009be0:	e00f      	b.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009be6:	3308      	adds	r3, #8
 8009be8:	2101      	movs	r1, #1
 8009bea:	4618      	mov	r0, r3
 8009bec:	f001 f930 	bl	800ae50 <RCCEx_PLL2_Config>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009bf6:	e004      	b.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009bfe:	e000      	b.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10a      	bne.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c0a:	4bb7      	ldr	r3, [pc, #732]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c0e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c18:	4ab3      	ldr	r2, [pc, #716]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c1a:	430b      	orrs	r3, r1
 8009c1c:	6513      	str	r3, [r2, #80]	; 0x50
 8009c1e:	e003      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c30:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009c34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c38:	2300      	movs	r3, #0
 8009c3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c3e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009c42:	460b      	mov	r3, r1
 8009c44:	4313      	orrs	r3, r2
 8009c46:	d039      	beq.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c4e:	2b03      	cmp	r3, #3
 8009c50:	d81c      	bhi.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009c52:	a201      	add	r2, pc, #4	; (adr r2, 8009c58 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c58:	08009c95 	.word	0x08009c95
 8009c5c:	08009c69 	.word	0x08009c69
 8009c60:	08009c77 	.word	0x08009c77
 8009c64:	08009c95 	.word	0x08009c95
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c68:	4b9f      	ldr	r3, [pc, #636]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6c:	4a9e      	ldr	r2, [pc, #632]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009c74:	e00f      	b.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c7a:	3308      	adds	r3, #8
 8009c7c:	2102      	movs	r1, #2
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f001 f8e6 	bl	800ae50 <RCCEx_PLL2_Config>
 8009c84:	4603      	mov	r3, r0
 8009c86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009c8a:	e004      	b.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009c92:	e000      	b.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10a      	bne.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009c9e:	4b92      	ldr	r3, [pc, #584]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ca2:	f023 0103 	bic.w	r1, r3, #3
 8009ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cac:	4a8e      	ldr	r2, [pc, #568]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cae:	430b      	orrs	r3, r1
 8009cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009cb2:	e003      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009cb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009cd2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	f000 8099 	beq.w	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009cde:	4b83      	ldr	r3, [pc, #524]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a82      	ldr	r2, [pc, #520]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ce8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009cea:	f7fb f8b1 	bl	8004e50 <HAL_GetTick>
 8009cee:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cf2:	e00b      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cf4:	f7fb f8ac 	bl	8004e50 <HAL_GetTick>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	2b64      	cmp	r3, #100	; 0x64
 8009d02:	d903      	bls.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009d04:	2303      	movs	r3, #3
 8009d06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009d0a:	e005      	b.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d0c:	4b77      	ldr	r3, [pc, #476]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d0ed      	beq.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009d18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d173      	bne.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009d20:	4b71      	ldr	r3, [pc, #452]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d2c:	4053      	eors	r3, r2
 8009d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d015      	beq.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d36:	4b6c      	ldr	r3, [pc, #432]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d42:	4b69      	ldr	r3, [pc, #420]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d46:	4a68      	ldr	r2, [pc, #416]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d4c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d4e:	4b66      	ldr	r3, [pc, #408]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d52:	4a65      	ldr	r2, [pc, #404]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d58:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009d5a:	4a63      	ldr	r2, [pc, #396]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d60:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d6e:	d118      	bne.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d70:	f7fb f86e 	bl	8004e50 <HAL_GetTick>
 8009d74:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d78:	e00d      	b.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d7a:	f7fb f869 	bl	8004e50 <HAL_GetTick>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d84:	1ad2      	subs	r2, r2, r3
 8009d86:	f241 3388 	movw	r3, #5000	; 0x1388
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d903      	bls.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8009d94:	e005      	b.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d96:	4b54      	ldr	r3, [pc, #336]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d9a:	f003 0302 	and.w	r3, r3, #2
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d0eb      	beq.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009da2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d129      	bne.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dba:	d10e      	bne.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009dbc:	4b4a      	ldr	r3, [pc, #296]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009dcc:	091a      	lsrs	r2, r3, #4
 8009dce:	4b48      	ldr	r3, [pc, #288]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	4a45      	ldr	r2, [pc, #276]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dd4:	430b      	orrs	r3, r1
 8009dd6:	6113      	str	r3, [r2, #16]
 8009dd8:	e005      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009dda:	4b43      	ldr	r3, [pc, #268]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	4a42      	ldr	r2, [pc, #264]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009de0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009de4:	6113      	str	r3, [r2, #16]
 8009de6:	4b40      	ldr	r3, [pc, #256]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009de8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009df6:	4a3c      	ldr	r2, [pc, #240]	; (8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009df8:	430b      	orrs	r3, r1
 8009dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8009dfc:	e008      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009dfe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8009e06:	e003      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e18:	f002 0301 	and.w	r3, r2, #1
 8009e1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e20:	2300      	movs	r3, #0
 8009e22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009e26:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	f000 808f 	beq.w	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e38:	2b28      	cmp	r3, #40	; 0x28
 8009e3a:	d871      	bhi.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009e3c:	a201      	add	r2, pc, #4	; (adr r2, 8009e44 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e42:	bf00      	nop
 8009e44:	08009f29 	.word	0x08009f29
 8009e48:	08009f21 	.word	0x08009f21
 8009e4c:	08009f21 	.word	0x08009f21
 8009e50:	08009f21 	.word	0x08009f21
 8009e54:	08009f21 	.word	0x08009f21
 8009e58:	08009f21 	.word	0x08009f21
 8009e5c:	08009f21 	.word	0x08009f21
 8009e60:	08009f21 	.word	0x08009f21
 8009e64:	08009ef5 	.word	0x08009ef5
 8009e68:	08009f21 	.word	0x08009f21
 8009e6c:	08009f21 	.word	0x08009f21
 8009e70:	08009f21 	.word	0x08009f21
 8009e74:	08009f21 	.word	0x08009f21
 8009e78:	08009f21 	.word	0x08009f21
 8009e7c:	08009f21 	.word	0x08009f21
 8009e80:	08009f21 	.word	0x08009f21
 8009e84:	08009f0b 	.word	0x08009f0b
 8009e88:	08009f21 	.word	0x08009f21
 8009e8c:	08009f21 	.word	0x08009f21
 8009e90:	08009f21 	.word	0x08009f21
 8009e94:	08009f21 	.word	0x08009f21
 8009e98:	08009f21 	.word	0x08009f21
 8009e9c:	08009f21 	.word	0x08009f21
 8009ea0:	08009f21 	.word	0x08009f21
 8009ea4:	08009f29 	.word	0x08009f29
 8009ea8:	08009f21 	.word	0x08009f21
 8009eac:	08009f21 	.word	0x08009f21
 8009eb0:	08009f21 	.word	0x08009f21
 8009eb4:	08009f21 	.word	0x08009f21
 8009eb8:	08009f21 	.word	0x08009f21
 8009ebc:	08009f21 	.word	0x08009f21
 8009ec0:	08009f21 	.word	0x08009f21
 8009ec4:	08009f29 	.word	0x08009f29
 8009ec8:	08009f21 	.word	0x08009f21
 8009ecc:	08009f21 	.word	0x08009f21
 8009ed0:	08009f21 	.word	0x08009f21
 8009ed4:	08009f21 	.word	0x08009f21
 8009ed8:	08009f21 	.word	0x08009f21
 8009edc:	08009f21 	.word	0x08009f21
 8009ee0:	08009f21 	.word	0x08009f21
 8009ee4:	08009f29 	.word	0x08009f29
 8009ee8:	58024400 	.word	0x58024400
 8009eec:	58024800 	.word	0x58024800
 8009ef0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ef8:	3308      	adds	r3, #8
 8009efa:	2101      	movs	r1, #1
 8009efc:	4618      	mov	r0, r3
 8009efe:	f000 ffa7 	bl	800ae50 <RCCEx_PLL2_Config>
 8009f02:	4603      	mov	r3, r0
 8009f04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009f08:	e00f      	b.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f0e:	3328      	adds	r3, #40	; 0x28
 8009f10:	2101      	movs	r1, #1
 8009f12:	4618      	mov	r0, r3
 8009f14:	f001 f84e 	bl	800afb4 <RCCEx_PLL3_Config>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009f1e:	e004      	b.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009f26:	e000      	b.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10a      	bne.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009f32:	4bbf      	ldr	r3, [pc, #764]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f36:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f40:	4abb      	ldr	r2, [pc, #748]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f42:	430b      	orrs	r3, r1
 8009f44:	6553      	str	r3, [r2, #84]	; 0x54
 8009f46:	e003      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f58:	f002 0302 	and.w	r3, r2, #2
 8009f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f60:	2300      	movs	r3, #0
 8009f62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	d041      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f76:	2b05      	cmp	r3, #5
 8009f78:	d824      	bhi.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009f7a:	a201      	add	r2, pc, #4	; (adr r2, 8009f80 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f80:	08009fcd 	.word	0x08009fcd
 8009f84:	08009f99 	.word	0x08009f99
 8009f88:	08009faf 	.word	0x08009faf
 8009f8c:	08009fcd 	.word	0x08009fcd
 8009f90:	08009fcd 	.word	0x08009fcd
 8009f94:	08009fcd 	.word	0x08009fcd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f9c:	3308      	adds	r3, #8
 8009f9e:	2101      	movs	r1, #1
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f000 ff55 	bl	800ae50 <RCCEx_PLL2_Config>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009fac:	e00f      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fb2:	3328      	adds	r3, #40	; 0x28
 8009fb4:	2101      	movs	r1, #1
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f000 fffc 	bl	800afb4 <RCCEx_PLL3_Config>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009fc2:	e004      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009fca:	e000      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10a      	bne.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009fd6:	4b96      	ldr	r3, [pc, #600]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fda:	f023 0107 	bic.w	r1, r3, #7
 8009fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fe4:	4a92      	ldr	r2, [pc, #584]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009fe6:	430b      	orrs	r3, r1
 8009fe8:	6553      	str	r3, [r2, #84]	; 0x54
 8009fea:	e003      	b.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ff0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	f002 0304 	and.w	r3, r2, #4
 800a000:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a004:	2300      	movs	r3, #0
 800a006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a00a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a00e:	460b      	mov	r3, r1
 800a010:	4313      	orrs	r3, r2
 800a012:	d044      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a01c:	2b05      	cmp	r3, #5
 800a01e:	d825      	bhi.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a020:	a201      	add	r2, pc, #4	; (adr r2, 800a028 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a026:	bf00      	nop
 800a028:	0800a075 	.word	0x0800a075
 800a02c:	0800a041 	.word	0x0800a041
 800a030:	0800a057 	.word	0x0800a057
 800a034:	0800a075 	.word	0x0800a075
 800a038:	0800a075 	.word	0x0800a075
 800a03c:	0800a075 	.word	0x0800a075
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a044:	3308      	adds	r3, #8
 800a046:	2101      	movs	r1, #1
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 ff01 	bl	800ae50 <RCCEx_PLL2_Config>
 800a04e:	4603      	mov	r3, r0
 800a050:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a054:	e00f      	b.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a05a:	3328      	adds	r3, #40	; 0x28
 800a05c:	2101      	movs	r1, #1
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 ffa8 	bl	800afb4 <RCCEx_PLL3_Config>
 800a064:	4603      	mov	r3, r0
 800a066:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a06a:	e004      	b.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a072:	e000      	b.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a074:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a076:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d10b      	bne.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a07e:	4b6c      	ldr	r3, [pc, #432]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a082:	f023 0107 	bic.w	r1, r3, #7
 800a086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a08a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a08e:	4a68      	ldr	r2, [pc, #416]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a090:	430b      	orrs	r3, r1
 800a092:	6593      	str	r3, [r2, #88]	; 0x58
 800a094:	e003      	b.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a096:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a09a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a09e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a6:	f002 0320 	and.w	r3, r2, #32
 800a0aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a0b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	d055      	beq.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0ca:	d033      	beq.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a0cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0d0:	d82c      	bhi.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a0d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0d6:	d02f      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a0d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0dc:	d826      	bhi.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a0de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0e2:	d02b      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a0e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0e8:	d820      	bhi.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a0ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0ee:	d012      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a0f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0f4:	d81a      	bhi.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d022      	beq.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a0fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0fe:	d115      	bne.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a104:	3308      	adds	r3, #8
 800a106:	2100      	movs	r1, #0
 800a108:	4618      	mov	r0, r3
 800a10a:	f000 fea1 	bl	800ae50 <RCCEx_PLL2_Config>
 800a10e:	4603      	mov	r3, r0
 800a110:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a114:	e015      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a11a:	3328      	adds	r3, #40	; 0x28
 800a11c:	2102      	movs	r1, #2
 800a11e:	4618      	mov	r0, r3
 800a120:	f000 ff48 	bl	800afb4 <RCCEx_PLL3_Config>
 800a124:	4603      	mov	r3, r0
 800a126:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a12a:	e00a      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a132:	e006      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a134:	bf00      	nop
 800a136:	e004      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a138:	bf00      	nop
 800a13a:	e002      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a13c:	bf00      	nop
 800a13e:	e000      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a140:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a142:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10b      	bne.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a14a:	4b39      	ldr	r3, [pc, #228]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a14e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a15a:	4a35      	ldr	r2, [pc, #212]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a15c:	430b      	orrs	r3, r1
 800a15e:	6553      	str	r3, [r2, #84]	; 0x54
 800a160:	e003      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a162:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a166:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a172:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a176:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a17a:	2300      	movs	r3, #0
 800a17c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a180:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a184:	460b      	mov	r3, r1
 800a186:	4313      	orrs	r3, r2
 800a188:	d058      	beq.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a18a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a18e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a192:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a196:	d033      	beq.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a198:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a19c:	d82c      	bhi.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a19e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1a2:	d02f      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a1a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1a8:	d826      	bhi.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a1aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1ae:	d02b      	beq.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a1b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1b4:	d820      	bhi.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a1b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1ba:	d012      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a1bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1c0:	d81a      	bhi.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d022      	beq.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a1c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1ca:	d115      	bne.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1d0:	3308      	adds	r3, #8
 800a1d2:	2100      	movs	r1, #0
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f000 fe3b 	bl	800ae50 <RCCEx_PLL2_Config>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a1e0:	e015      	b.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1e6:	3328      	adds	r3, #40	; 0x28
 800a1e8:	2102      	movs	r1, #2
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f000 fee2 	bl	800afb4 <RCCEx_PLL3_Config>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a1f6:	e00a      	b.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a1fe:	e006      	b.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a200:	bf00      	nop
 800a202:	e004      	b.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a204:	bf00      	nop
 800a206:	e002      	b.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a208:	bf00      	nop
 800a20a:	e000      	b.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a20c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a20e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a212:	2b00      	cmp	r3, #0
 800a214:	d10e      	bne.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a216:	4b06      	ldr	r3, [pc, #24]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a21a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a21e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a222:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a226:	4a02      	ldr	r2, [pc, #8]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a228:	430b      	orrs	r3, r1
 800a22a:	6593      	str	r3, [r2, #88]	; 0x58
 800a22c:	e006      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a22e:	bf00      	nop
 800a230:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a234:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a238:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a244:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a248:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a24c:	2300      	movs	r3, #0
 800a24e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a252:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a256:	460b      	mov	r3, r1
 800a258:	4313      	orrs	r3, r2
 800a25a:	d055      	beq.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a25c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a260:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a264:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a268:	d033      	beq.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a26a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a26e:	d82c      	bhi.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a274:	d02f      	beq.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a27a:	d826      	bhi.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a27c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a280:	d02b      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a282:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a286:	d820      	bhi.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a288:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a28c:	d012      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a28e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a292:	d81a      	bhi.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a294:	2b00      	cmp	r3, #0
 800a296:	d022      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a29c:	d115      	bne.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2a2:	3308      	adds	r3, #8
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 fdd2 	bl	800ae50 <RCCEx_PLL2_Config>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a2b2:	e015      	b.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2b8:	3328      	adds	r3, #40	; 0x28
 800a2ba:	2102      	movs	r1, #2
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f000 fe79 	bl	800afb4 <RCCEx_PLL3_Config>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a2c8:	e00a      	b.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a2d0:	e006      	b.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a2d2:	bf00      	nop
 800a2d4:	e004      	b.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a2d6:	bf00      	nop
 800a2d8:	e002      	b.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a2da:	bf00      	nop
 800a2dc:	e000      	b.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a2de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10b      	bne.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a2e8:	4ba0      	ldr	r3, [pc, #640]	; (800a56c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a2ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ec:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a2f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a2f8:	4a9c      	ldr	r2, [pc, #624]	; (800a56c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a2fa:	430b      	orrs	r3, r1
 800a2fc:	6593      	str	r3, [r2, #88]	; 0x58
 800a2fe:	e003      	b.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a300:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a304:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a310:	f002 0308 	and.w	r3, r2, #8
 800a314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a318:	2300      	movs	r3, #0
 800a31a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a31e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a322:	460b      	mov	r3, r1
 800a324:	4313      	orrs	r3, r2
 800a326:	d01e      	beq.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a32c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a334:	d10c      	bne.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a33a:	3328      	adds	r3, #40	; 0x28
 800a33c:	2102      	movs	r1, #2
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 fe38 	bl	800afb4 <RCCEx_PLL3_Config>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d002      	beq.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a350:	4b86      	ldr	r3, [pc, #536]	; (800a56c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a354:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a35c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a360:	4a82      	ldr	r2, [pc, #520]	; (800a56c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a362:	430b      	orrs	r3, r1
 800a364:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36e:	f002 0310 	and.w	r3, r2, #16
 800a372:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a376:	2300      	movs	r3, #0
 800a378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a37c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a380:	460b      	mov	r3, r1
 800a382:	4313      	orrs	r3, r2
 800a384:	d01e      	beq.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a38a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a38e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a392:	d10c      	bne.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a398:	3328      	adds	r3, #40	; 0x28
 800a39a:	2102      	movs	r1, #2
 800a39c:	4618      	mov	r0, r3
 800a39e:	f000 fe09 	bl	800afb4 <RCCEx_PLL3_Config>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d002      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a3ae:	4b6f      	ldr	r3, [pc, #444]	; (800a56c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a3b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3be:	4a6b      	ldr	r2, [pc, #428]	; (800a56c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3c0:	430b      	orrs	r3, r1
 800a3c2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a3d0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a3d6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a3da:	460b      	mov	r3, r1
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	d03e      	beq.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a3e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a3e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3ec:	d022      	beq.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a3ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3f2:	d81b      	bhi.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d003      	beq.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a3f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3fc:	d00b      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a3fe:	e015      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a404:	3308      	adds	r3, #8
 800a406:	2100      	movs	r1, #0
 800a408:	4618      	mov	r0, r3
 800a40a:	f000 fd21 	bl	800ae50 <RCCEx_PLL2_Config>
 800a40e:	4603      	mov	r3, r0
 800a410:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a414:	e00f      	b.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a41a:	3328      	adds	r3, #40	; 0x28
 800a41c:	2102      	movs	r1, #2
 800a41e:	4618      	mov	r0, r3
 800a420:	f000 fdc8 	bl	800afb4 <RCCEx_PLL3_Config>
 800a424:	4603      	mov	r3, r0
 800a426:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a42a:	e004      	b.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a432:	e000      	b.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a434:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a436:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d10b      	bne.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a43e:	4b4b      	ldr	r3, [pc, #300]	; (800a56c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a442:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a44a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a44e:	4a47      	ldr	r2, [pc, #284]	; (800a56c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a450:	430b      	orrs	r3, r1
 800a452:	6593      	str	r3, [r2, #88]	; 0x58
 800a454:	e003      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a456:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a45a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a466:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a46a:	673b      	str	r3, [r7, #112]	; 0x70
 800a46c:	2300      	movs	r3, #0
 800a46e:	677b      	str	r3, [r7, #116]	; 0x74
 800a470:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a474:	460b      	mov	r3, r1
 800a476:	4313      	orrs	r3, r2
 800a478:	d03b      	beq.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a47e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a482:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a486:	d01f      	beq.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a488:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a48c:	d818      	bhi.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a48e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a492:	d003      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a494:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a498:	d007      	beq.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a49a:	e011      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a49c:	4b33      	ldr	r3, [pc, #204]	; (800a56c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a0:	4a32      	ldr	r2, [pc, #200]	; (800a56c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a4a8:	e00f      	b.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a4aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ae:	3328      	adds	r3, #40	; 0x28
 800a4b0:	2101      	movs	r1, #1
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f000 fd7e 	bl	800afb4 <RCCEx_PLL3_Config>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a4be:	e004      	b.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a4c6:	e000      	b.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a4c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d10b      	bne.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a4d2:	4b26      	ldr	r3, [pc, #152]	; (800a56c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a4da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4e2:	4a22      	ldr	r2, [pc, #136]	; (800a56c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4e4:	430b      	orrs	r3, r1
 800a4e6:	6553      	str	r3, [r2, #84]	; 0x54
 800a4e8:	e003      	b.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a4f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a4fe:	66bb      	str	r3, [r7, #104]	; 0x68
 800a500:	2300      	movs	r3, #0
 800a502:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a504:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a508:	460b      	mov	r3, r1
 800a50a:	4313      	orrs	r3, r2
 800a50c:	d034      	beq.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a50e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a514:	2b00      	cmp	r3, #0
 800a516:	d003      	beq.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a51c:	d007      	beq.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a51e:	e011      	b.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a520:	4b12      	ldr	r3, [pc, #72]	; (800a56c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a524:	4a11      	ldr	r2, [pc, #68]	; (800a56c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a52a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a52c:	e00e      	b.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a52e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a532:	3308      	adds	r3, #8
 800a534:	2102      	movs	r1, #2
 800a536:	4618      	mov	r0, r3
 800a538:	f000 fc8a 	bl	800ae50 <RCCEx_PLL2_Config>
 800a53c:	4603      	mov	r3, r0
 800a53e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a542:	e003      	b.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a54a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a54c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a550:	2b00      	cmp	r3, #0
 800a552:	d10d      	bne.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a554:	4b05      	ldr	r3, [pc, #20]	; (800a56c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a558:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a55c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a562:	4a02      	ldr	r2, [pc, #8]	; (800a56c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a564:	430b      	orrs	r3, r1
 800a566:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a568:	e006      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a56a:	bf00      	nop
 800a56c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a570:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a574:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a580:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a584:	663b      	str	r3, [r7, #96]	; 0x60
 800a586:	2300      	movs	r3, #0
 800a588:	667b      	str	r3, [r7, #100]	; 0x64
 800a58a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a58e:	460b      	mov	r3, r1
 800a590:	4313      	orrs	r3, r2
 800a592:	d00c      	beq.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a598:	3328      	adds	r3, #40	; 0x28
 800a59a:	2102      	movs	r1, #2
 800a59c:	4618      	mov	r0, r3
 800a59e:	f000 fd09 	bl	800afb4 <RCCEx_PLL3_Config>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d002      	beq.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a5ba:	65bb      	str	r3, [r7, #88]	; 0x58
 800a5bc:	2300      	movs	r3, #0
 800a5be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5c0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	d036      	beq.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a5ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5d4:	d018      	beq.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a5d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5da:	d811      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a5dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5e0:	d014      	beq.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a5e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5e6:	d80b      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d011      	beq.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a5ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5f0:	d106      	bne.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5f2:	4bb7      	ldr	r3, [pc, #732]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f6:	4ab6      	ldr	r2, [pc, #728]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a5f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a5fe:	e008      	b.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a606:	e004      	b.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a608:	bf00      	nop
 800a60a:	e002      	b.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a60c:	bf00      	nop
 800a60e:	e000      	b.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a610:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a612:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10a      	bne.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a61a:	4bad      	ldr	r3, [pc, #692]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a61c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a61e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a628:	4aa9      	ldr	r2, [pc, #676]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a62a:	430b      	orrs	r3, r1
 800a62c:	6553      	str	r3, [r2, #84]	; 0x54
 800a62e:	e003      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a630:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a634:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a640:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a644:	653b      	str	r3, [r7, #80]	; 0x50
 800a646:	2300      	movs	r3, #0
 800a648:	657b      	str	r3, [r7, #84]	; 0x54
 800a64a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a64e:	460b      	mov	r3, r1
 800a650:	4313      	orrs	r3, r2
 800a652:	d009      	beq.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a654:	4b9e      	ldr	r3, [pc, #632]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a658:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a662:	4a9b      	ldr	r2, [pc, #620]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a664:	430b      	orrs	r3, r1
 800a666:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a670:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a674:	64bb      	str	r3, [r7, #72]	; 0x48
 800a676:	2300      	movs	r3, #0
 800a678:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a67a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a67e:	460b      	mov	r3, r1
 800a680:	4313      	orrs	r3, r2
 800a682:	d009      	beq.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a684:	4b92      	ldr	r3, [pc, #584]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a688:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a68c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a690:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a692:	4a8f      	ldr	r2, [pc, #572]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a694:	430b      	orrs	r3, r1
 800a696:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a6a4:	643b      	str	r3, [r7, #64]	; 0x40
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	647b      	str	r3, [r7, #68]	; 0x44
 800a6aa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	d00e      	beq.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a6b4:	4b86      	ldr	r3, [pc, #536]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	4a85      	ldr	r2, [pc, #532]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a6be:	6113      	str	r3, [r2, #16]
 800a6c0:	4b83      	ldr	r3, [pc, #524]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6c2:	6919      	ldr	r1, [r3, #16]
 800a6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a6cc:	4a80      	ldr	r2, [pc, #512]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6ce:	430b      	orrs	r3, r1
 800a6d0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6da:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a6de:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6e4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	d009      	beq.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a6ee:	4b78      	ldr	r3, [pc, #480]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6f2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6fc:	4a74      	ldr	r2, [pc, #464]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6fe:	430b      	orrs	r3, r1
 800a700:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a70e:	633b      	str	r3, [r7, #48]	; 0x30
 800a710:	2300      	movs	r3, #0
 800a712:	637b      	str	r3, [r7, #52]	; 0x34
 800a714:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a718:	460b      	mov	r3, r1
 800a71a:	4313      	orrs	r3, r2
 800a71c:	d00a      	beq.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a71e:	4b6c      	ldr	r3, [pc, #432]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a722:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a72a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a72e:	4a68      	ldr	r2, [pc, #416]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a730:	430b      	orrs	r3, r1
 800a732:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73c:	2100      	movs	r1, #0
 800a73e:	62b9      	str	r1, [r7, #40]	; 0x28
 800a740:	f003 0301 	and.w	r3, r3, #1
 800a744:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a746:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a74a:	460b      	mov	r3, r1
 800a74c:	4313      	orrs	r3, r2
 800a74e:	d011      	beq.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a754:	3308      	adds	r3, #8
 800a756:	2100      	movs	r1, #0
 800a758:	4618      	mov	r0, r3
 800a75a:	f000 fb79 	bl	800ae50 <RCCEx_PLL2_Config>
 800a75e:	4603      	mov	r3, r0
 800a760:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a764:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d003      	beq.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a76c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a770:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77c:	2100      	movs	r1, #0
 800a77e:	6239      	str	r1, [r7, #32]
 800a780:	f003 0302 	and.w	r3, r3, #2
 800a784:	627b      	str	r3, [r7, #36]	; 0x24
 800a786:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a78a:	460b      	mov	r3, r1
 800a78c:	4313      	orrs	r3, r2
 800a78e:	d011      	beq.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a794:	3308      	adds	r3, #8
 800a796:	2101      	movs	r1, #1
 800a798:	4618      	mov	r0, r3
 800a79a:	f000 fb59 	bl	800ae50 <RCCEx_PLL2_Config>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a7a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d003      	beq.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a7b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7bc:	2100      	movs	r1, #0
 800a7be:	61b9      	str	r1, [r7, #24]
 800a7c0:	f003 0304 	and.w	r3, r3, #4
 800a7c4:	61fb      	str	r3, [r7, #28]
 800a7c6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	d011      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a7d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7d4:	3308      	adds	r3, #8
 800a7d6:	2102      	movs	r1, #2
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f000 fb39 	bl	800ae50 <RCCEx_PLL2_Config>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a7e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d003      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	6139      	str	r1, [r7, #16]
 800a800:	f003 0308 	and.w	r3, r3, #8
 800a804:	617b      	str	r3, [r7, #20]
 800a806:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a80a:	460b      	mov	r3, r1
 800a80c:	4313      	orrs	r3, r2
 800a80e:	d011      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a814:	3328      	adds	r3, #40	; 0x28
 800a816:	2100      	movs	r1, #0
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 fbcb 	bl	800afb4 <RCCEx_PLL3_Config>
 800a81e:	4603      	mov	r3, r0
 800a820:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800a824:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a82c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a830:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83c:	2100      	movs	r1, #0
 800a83e:	60b9      	str	r1, [r7, #8]
 800a840:	f003 0310 	and.w	r3, r3, #16
 800a844:	60fb      	str	r3, [r7, #12]
 800a846:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a84a:	460b      	mov	r3, r1
 800a84c:	4313      	orrs	r3, r2
 800a84e:	d011      	beq.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a854:	3328      	adds	r3, #40	; 0x28
 800a856:	2101      	movs	r1, #1
 800a858:	4618      	mov	r0, r3
 800a85a:	f000 fbab 	bl	800afb4 <RCCEx_PLL3_Config>
 800a85e:	4603      	mov	r3, r0
 800a860:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a864:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d003      	beq.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a86c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a870:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87c:	2100      	movs	r1, #0
 800a87e:	6039      	str	r1, [r7, #0]
 800a880:	f003 0320 	and.w	r3, r3, #32
 800a884:	607b      	str	r3, [r7, #4]
 800a886:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a88a:	460b      	mov	r3, r1
 800a88c:	4313      	orrs	r3, r2
 800a88e:	d011      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a894:	3328      	adds	r3, #40	; 0x28
 800a896:	2102      	movs	r1, #2
 800a898:	4618      	mov	r0, r3
 800a89a:	f000 fb8b 	bl	800afb4 <RCCEx_PLL3_Config>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a8a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d003      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800a8b4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	e000      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8ce:	bf00      	nop
 800a8d0:	58024400 	.word	0x58024400

0800a8d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a8d8:	f7fe fe00 	bl	80094dc <HAL_RCC_GetHCLKFreq>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	4b06      	ldr	r3, [pc, #24]	; (800a8f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a8e0:	6a1b      	ldr	r3, [r3, #32]
 800a8e2:	091b      	lsrs	r3, r3, #4
 800a8e4:	f003 0307 	and.w	r3, r3, #7
 800a8e8:	4904      	ldr	r1, [pc, #16]	; (800a8fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a8ea:	5ccb      	ldrb	r3, [r1, r3]
 800a8ec:	f003 031f 	and.w	r3, r3, #31
 800a8f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	58024400 	.word	0x58024400
 800a8fc:	0800f338 	.word	0x0800f338

0800a900 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a900:	b480      	push	{r7}
 800a902:	b089      	sub	sp, #36	; 0x24
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a908:	4ba1      	ldr	r3, [pc, #644]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a90c:	f003 0303 	and.w	r3, r3, #3
 800a910:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a912:	4b9f      	ldr	r3, [pc, #636]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a916:	0b1b      	lsrs	r3, r3, #12
 800a918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a91c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a91e:	4b9c      	ldr	r3, [pc, #624]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a922:	091b      	lsrs	r3, r3, #4
 800a924:	f003 0301 	and.w	r3, r3, #1
 800a928:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a92a:	4b99      	ldr	r3, [pc, #612]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a92c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a92e:	08db      	lsrs	r3, r3, #3
 800a930:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	fb02 f303 	mul.w	r3, r2, r3
 800a93a:	ee07 3a90 	vmov	s15, r3
 800a93e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a942:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f000 8111 	beq.w	800ab70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	2b02      	cmp	r3, #2
 800a952:	f000 8083 	beq.w	800aa5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	2b02      	cmp	r3, #2
 800a95a:	f200 80a1 	bhi.w	800aaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d003      	beq.n	800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	2b01      	cmp	r3, #1
 800a968:	d056      	beq.n	800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a96a:	e099      	b.n	800aaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a96c:	4b88      	ldr	r3, [pc, #544]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 0320 	and.w	r3, r3, #32
 800a974:	2b00      	cmp	r3, #0
 800a976:	d02d      	beq.n	800a9d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a978:	4b85      	ldr	r3, [pc, #532]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	08db      	lsrs	r3, r3, #3
 800a97e:	f003 0303 	and.w	r3, r3, #3
 800a982:	4a84      	ldr	r2, [pc, #528]	; (800ab94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a984:	fa22 f303 	lsr.w	r3, r2, r3
 800a988:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	ee07 3a90 	vmov	s15, r3
 800a990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	ee07 3a90 	vmov	s15, r3
 800a99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a99e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9a2:	4b7b      	ldr	r3, [pc, #492]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9aa:	ee07 3a90 	vmov	s15, r3
 800a9ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a9d2:	e087      	b.n	800aae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	ee07 3a90 	vmov	s15, r3
 800a9da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ab9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a9e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9e6:	4b6a      	ldr	r3, [pc, #424]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ee:	ee07 3a90 	vmov	s15, r3
 800a9f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa16:	e065      	b.n	800aae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	ee07 3a90 	vmov	s15, r3
 800aa1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa2a:	4b59      	ldr	r3, [pc, #356]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa32:	ee07 3a90 	vmov	s15, r3
 800aa36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa5a:	e043      	b.n	800aae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	ee07 3a90 	vmov	s15, r3
 800aa62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800aba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aa6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa6e:	4b48      	ldr	r3, [pc, #288]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa76:	ee07 3a90 	vmov	s15, r3
 800aa7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa82:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa9e:	e021      	b.n	800aae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	ee07 3a90 	vmov	s15, r3
 800aaa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaaa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aaae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aab2:	4b37      	ldr	r3, [pc, #220]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaba:	ee07 3a90 	vmov	s15, r3
 800aabe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aac2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aac6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aada:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aae2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aae4:	4b2a      	ldr	r3, [pc, #168]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae8:	0a5b      	lsrs	r3, r3, #9
 800aaea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaee:	ee07 3a90 	vmov	s15, r3
 800aaf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aafa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aafe:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab0a:	ee17 2a90 	vmov	r2, s15
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ab12:	4b1f      	ldr	r3, [pc, #124]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab16:	0c1b      	lsrs	r3, r3, #16
 800ab18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab1c:	ee07 3a90 	vmov	s15, r3
 800ab20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab38:	ee17 2a90 	vmov	r2, s15
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ab40:	4b13      	ldr	r3, [pc, #76]	; (800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab44:	0e1b      	lsrs	r3, r3, #24
 800ab46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab66:	ee17 2a90 	vmov	r2, s15
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ab6e:	e008      	b.n	800ab82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	609a      	str	r2, [r3, #8]
}
 800ab82:	bf00      	nop
 800ab84:	3724      	adds	r7, #36	; 0x24
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	58024400 	.word	0x58024400
 800ab94:	03d09000 	.word	0x03d09000
 800ab98:	46000000 	.word	0x46000000
 800ab9c:	4c742400 	.word	0x4c742400
 800aba0:	4a742400 	.word	0x4a742400
 800aba4:	4af42400 	.word	0x4af42400

0800aba8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b089      	sub	sp, #36	; 0x24
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abb0:	4ba1      	ldr	r3, [pc, #644]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb4:	f003 0303 	and.w	r3, r3, #3
 800abb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800abba:	4b9f      	ldr	r3, [pc, #636]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abbe:	0d1b      	lsrs	r3, r3, #20
 800abc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800abc6:	4b9c      	ldr	r3, [pc, #624]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abca:	0a1b      	lsrs	r3, r3, #8
 800abcc:	f003 0301 	and.w	r3, r3, #1
 800abd0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800abd2:	4b99      	ldr	r3, [pc, #612]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abd6:	08db      	lsrs	r3, r3, #3
 800abd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	fb02 f303 	mul.w	r3, r2, r3
 800abe2:	ee07 3a90 	vmov	s15, r3
 800abe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f000 8111 	beq.w	800ae18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	2b02      	cmp	r3, #2
 800abfa:	f000 8083 	beq.w	800ad04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	f200 80a1 	bhi.w	800ad48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d003      	beq.n	800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d056      	beq.n	800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ac12:	e099      	b.n	800ad48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac14:	4b88      	ldr	r3, [pc, #544]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 0320 	and.w	r3, r3, #32
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d02d      	beq.n	800ac7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac20:	4b85      	ldr	r3, [pc, #532]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	08db      	lsrs	r3, r3, #3
 800ac26:	f003 0303 	and.w	r3, r3, #3
 800ac2a:	4a84      	ldr	r2, [pc, #528]	; (800ae3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ac2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac30:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	ee07 3a90 	vmov	s15, r3
 800ac38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	ee07 3a90 	vmov	s15, r3
 800ac42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac4a:	4b7b      	ldr	r3, [pc, #492]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac52:	ee07 3a90 	vmov	s15, r3
 800ac56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac7a:	e087      	b.n	800ad8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	ee07 3a90 	vmov	s15, r3
 800ac82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ae44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ac8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac8e:	4b6a      	ldr	r3, [pc, #424]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac96:	ee07 3a90 	vmov	s15, r3
 800ac9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aca2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acbe:	e065      	b.n	800ad8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	ee07 3a90 	vmov	s15, r3
 800acc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800acce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acd2:	4b59      	ldr	r3, [pc, #356]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acda:	ee07 3a90 	vmov	s15, r3
 800acde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ace2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ace6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad02:	e043      	b.n	800ad8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	ee07 3a90 	vmov	s15, r3
 800ad0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ae4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ad12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad16:	4b48      	ldr	r3, [pc, #288]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad1e:	ee07 3a90 	vmov	s15, r3
 800ad22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad46:	e021      	b.n	800ad8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	ee07 3a90 	vmov	s15, r3
 800ad4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad5a:	4b37      	ldr	r3, [pc, #220]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad62:	ee07 3a90 	vmov	s15, r3
 800ad66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ad8c:	4b2a      	ldr	r3, [pc, #168]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad90:	0a5b      	lsrs	r3, r3, #9
 800ad92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad96:	ee07 3a90 	vmov	s15, r3
 800ad9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ada2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ada6:	edd7 6a07 	vldr	s13, [r7, #28]
 800adaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adb2:	ee17 2a90 	vmov	r2, s15
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800adba:	4b1f      	ldr	r3, [pc, #124]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adbe:	0c1b      	lsrs	r3, r3, #16
 800adc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adc4:	ee07 3a90 	vmov	s15, r3
 800adc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800add0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800add4:	edd7 6a07 	vldr	s13, [r7, #28]
 800add8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800addc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ade0:	ee17 2a90 	vmov	r2, s15
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ade8:	4b13      	ldr	r3, [pc, #76]	; (800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adec:	0e1b      	lsrs	r3, r3, #24
 800adee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adf2:	ee07 3a90 	vmov	s15, r3
 800adf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae02:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae0e:	ee17 2a90 	vmov	r2, s15
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae16:	e008      	b.n	800ae2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2200      	movs	r2, #0
 800ae22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	609a      	str	r2, [r3, #8]
}
 800ae2a:	bf00      	nop
 800ae2c:	3724      	adds	r7, #36	; 0x24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	58024400 	.word	0x58024400
 800ae3c:	03d09000 	.word	0x03d09000
 800ae40:	46000000 	.word	0x46000000
 800ae44:	4c742400 	.word	0x4c742400
 800ae48:	4a742400 	.word	0x4a742400
 800ae4c:	4af42400 	.word	0x4af42400

0800ae50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ae5e:	4b53      	ldr	r3, [pc, #332]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800ae60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae62:	f003 0303 	and.w	r3, r3, #3
 800ae66:	2b03      	cmp	r3, #3
 800ae68:	d101      	bne.n	800ae6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e099      	b.n	800afa2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ae6e:	4b4f      	ldr	r3, [pc, #316]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a4e      	ldr	r2, [pc, #312]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800ae74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ae78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae7a:	f7f9 ffe9 	bl	8004e50 <HAL_GetTick>
 800ae7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae80:	e008      	b.n	800ae94 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ae82:	f7f9 ffe5 	bl	8004e50 <HAL_GetTick>
 800ae86:	4602      	mov	r2, r0
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	1ad3      	subs	r3, r2, r3
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d901      	bls.n	800ae94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e086      	b.n	800afa2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae94:	4b45      	ldr	r3, [pc, #276]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d1f0      	bne.n	800ae82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aea0:	4b42      	ldr	r3, [pc, #264]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800aea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	031b      	lsls	r3, r3, #12
 800aeae:	493f      	ldr	r1, [pc, #252]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	628b      	str	r3, [r1, #40]	; 0x28
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	3b01      	subs	r3, #1
 800aec4:	025b      	lsls	r3, r3, #9
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	431a      	orrs	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	3b01      	subs	r3, #1
 800aed0:	041b      	lsls	r3, r3, #16
 800aed2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aed6:	431a      	orrs	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	691b      	ldr	r3, [r3, #16]
 800aedc:	3b01      	subs	r3, #1
 800aede:	061b      	lsls	r3, r3, #24
 800aee0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aee4:	4931      	ldr	r1, [pc, #196]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800aee6:	4313      	orrs	r3, r2
 800aee8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aeea:	4b30      	ldr	r3, [pc, #192]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800aeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	492d      	ldr	r1, [pc, #180]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800aef8:	4313      	orrs	r3, r2
 800aefa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800aefc:	4b2b      	ldr	r3, [pc, #172]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800aefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af00:	f023 0220 	bic.w	r2, r3, #32
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	699b      	ldr	r3, [r3, #24]
 800af08:	4928      	ldr	r1, [pc, #160]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af0a:	4313      	orrs	r3, r2
 800af0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800af0e:	4b27      	ldr	r3, [pc, #156]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af12:	4a26      	ldr	r2, [pc, #152]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af14:	f023 0310 	bic.w	r3, r3, #16
 800af18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800af1a:	4b24      	ldr	r3, [pc, #144]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af1e:	4b24      	ldr	r3, [pc, #144]	; (800afb0 <RCCEx_PLL2_Config+0x160>)
 800af20:	4013      	ands	r3, r2
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	69d2      	ldr	r2, [r2, #28]
 800af26:	00d2      	lsls	r2, r2, #3
 800af28:	4920      	ldr	r1, [pc, #128]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af2a:	4313      	orrs	r3, r2
 800af2c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800af2e:	4b1f      	ldr	r3, [pc, #124]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af32:	4a1e      	ldr	r2, [pc, #120]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af34:	f043 0310 	orr.w	r3, r3, #16
 800af38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d106      	bne.n	800af4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800af40:	4b1a      	ldr	r3, [pc, #104]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af44:	4a19      	ldr	r2, [pc, #100]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af4c:	e00f      	b.n	800af6e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d106      	bne.n	800af62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800af54:	4b15      	ldr	r3, [pc, #84]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af58:	4a14      	ldr	r2, [pc, #80]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af60:	e005      	b.n	800af6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800af62:	4b12      	ldr	r3, [pc, #72]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af66:	4a11      	ldr	r2, [pc, #68]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800af6e:	4b0f      	ldr	r3, [pc, #60]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a0e      	ldr	r2, [pc, #56]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af7a:	f7f9 ff69 	bl	8004e50 <HAL_GetTick>
 800af7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af80:	e008      	b.n	800af94 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800af82:	f7f9 ff65 	bl	8004e50 <HAL_GetTick>
 800af86:	4602      	mov	r2, r0
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d901      	bls.n	800af94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af90:	2303      	movs	r3, #3
 800af92:	e006      	b.n	800afa2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af94:	4b05      	ldr	r3, [pc, #20]	; (800afac <RCCEx_PLL2_Config+0x15c>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d0f0      	beq.n	800af82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800afa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	58024400 	.word	0x58024400
 800afb0:	ffff0007 	.word	0xffff0007

0800afb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800afc2:	4b53      	ldr	r3, [pc, #332]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800afc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc6:	f003 0303 	and.w	r3, r3, #3
 800afca:	2b03      	cmp	r3, #3
 800afcc:	d101      	bne.n	800afd2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e099      	b.n	800b106 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800afd2:	4b4f      	ldr	r3, [pc, #316]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a4e      	ldr	r2, [pc, #312]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800afd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afde:	f7f9 ff37 	bl	8004e50 <HAL_GetTick>
 800afe2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800afe4:	e008      	b.n	800aff8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800afe6:	f7f9 ff33 	bl	8004e50 <HAL_GetTick>
 800afea:	4602      	mov	r2, r0
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	2b02      	cmp	r3, #2
 800aff2:	d901      	bls.n	800aff8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aff4:	2303      	movs	r3, #3
 800aff6:	e086      	b.n	800b106 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aff8:	4b45      	ldr	r3, [pc, #276]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1f0      	bne.n	800afe6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b004:	4b42      	ldr	r3, [pc, #264]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b008:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	051b      	lsls	r3, r3, #20
 800b012:	493f      	ldr	r1, [pc, #252]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b014:	4313      	orrs	r3, r2
 800b016:	628b      	str	r3, [r1, #40]	; 0x28
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	3b01      	subs	r3, #1
 800b01e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	3b01      	subs	r3, #1
 800b028:	025b      	lsls	r3, r3, #9
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	431a      	orrs	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	3b01      	subs	r3, #1
 800b034:	041b      	lsls	r3, r3, #16
 800b036:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b03a:	431a      	orrs	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	3b01      	subs	r3, #1
 800b042:	061b      	lsls	r3, r3, #24
 800b044:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b048:	4931      	ldr	r1, [pc, #196]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b04a:	4313      	orrs	r3, r2
 800b04c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b04e:	4b30      	ldr	r3, [pc, #192]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b052:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	695b      	ldr	r3, [r3, #20]
 800b05a:	492d      	ldr	r1, [pc, #180]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b05c:	4313      	orrs	r3, r2
 800b05e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b060:	4b2b      	ldr	r3, [pc, #172]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b064:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	699b      	ldr	r3, [r3, #24]
 800b06c:	4928      	ldr	r1, [pc, #160]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b06e:	4313      	orrs	r3, r2
 800b070:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b072:	4b27      	ldr	r3, [pc, #156]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b076:	4a26      	ldr	r2, [pc, #152]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b07c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b07e:	4b24      	ldr	r3, [pc, #144]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b082:	4b24      	ldr	r3, [pc, #144]	; (800b114 <RCCEx_PLL3_Config+0x160>)
 800b084:	4013      	ands	r3, r2
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	69d2      	ldr	r2, [r2, #28]
 800b08a:	00d2      	lsls	r2, r2, #3
 800b08c:	4920      	ldr	r1, [pc, #128]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b08e:	4313      	orrs	r3, r2
 800b090:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b092:	4b1f      	ldr	r3, [pc, #124]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b096:	4a1e      	ldr	r2, [pc, #120]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b09c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d106      	bne.n	800b0b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b0a4:	4b1a      	ldr	r3, [pc, #104]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a8:	4a19      	ldr	r2, [pc, #100]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b0aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b0ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0b0:	e00f      	b.n	800b0d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d106      	bne.n	800b0c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b0b8:	4b15      	ldr	r3, [pc, #84]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0bc:	4a14      	ldr	r2, [pc, #80]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b0be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b0c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0c4:	e005      	b.n	800b0d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b0c6:	4b12      	ldr	r3, [pc, #72]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ca:	4a11      	ldr	r2, [pc, #68]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b0cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b0d2:	4b0f      	ldr	r3, [pc, #60]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a0e      	ldr	r2, [pc, #56]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b0d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0de:	f7f9 feb7 	bl	8004e50 <HAL_GetTick>
 800b0e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b0e4:	e008      	b.n	800b0f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b0e6:	f7f9 feb3 	bl	8004e50 <HAL_GetTick>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	2b02      	cmp	r3, #2
 800b0f2:	d901      	bls.n	800b0f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b0f4:	2303      	movs	r3, #3
 800b0f6:	e006      	b.n	800b106 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b0f8:	4b05      	ldr	r3, [pc, #20]	; (800b110 <RCCEx_PLL3_Config+0x15c>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b100:	2b00      	cmp	r3, #0
 800b102:	d0f0      	beq.n	800b0e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b104:	7bfb      	ldrb	r3, [r7, #15]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	58024400 	.word	0x58024400
 800b114:	ffff0007 	.word	0xffff0007

0800b118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d101      	bne.n	800b12a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b126:	2301      	movs	r3, #1
 800b128:	e049      	b.n	800b1be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b130:	b2db      	uxtb	r3, r3
 800b132:	2b00      	cmp	r3, #0
 800b134:	d106      	bne.n	800b144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f7f9 fbf8 	bl	8004934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2202      	movs	r2, #2
 800b148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	3304      	adds	r3, #4
 800b154:	4619      	mov	r1, r3
 800b156:	4610      	mov	r0, r2
 800b158:	f000 feb8 	bl	800becc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
	...

0800b1c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d001      	beq.n	800b1e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e05e      	b.n	800b29e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2202      	movs	r2, #2
 800b1e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	68da      	ldr	r2, [r3, #12]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f042 0201 	orr.w	r2, r2, #1
 800b1f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a2b      	ldr	r2, [pc, #172]	; (800b2ac <HAL_TIM_Base_Start_IT+0xe4>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d02c      	beq.n	800b25c <HAL_TIM_Base_Start_IT+0x94>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b20a:	d027      	beq.n	800b25c <HAL_TIM_Base_Start_IT+0x94>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a27      	ldr	r2, [pc, #156]	; (800b2b0 <HAL_TIM_Base_Start_IT+0xe8>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d022      	beq.n	800b25c <HAL_TIM_Base_Start_IT+0x94>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a26      	ldr	r2, [pc, #152]	; (800b2b4 <HAL_TIM_Base_Start_IT+0xec>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d01d      	beq.n	800b25c <HAL_TIM_Base_Start_IT+0x94>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a24      	ldr	r2, [pc, #144]	; (800b2b8 <HAL_TIM_Base_Start_IT+0xf0>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d018      	beq.n	800b25c <HAL_TIM_Base_Start_IT+0x94>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a23      	ldr	r2, [pc, #140]	; (800b2bc <HAL_TIM_Base_Start_IT+0xf4>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d013      	beq.n	800b25c <HAL_TIM_Base_Start_IT+0x94>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a21      	ldr	r2, [pc, #132]	; (800b2c0 <HAL_TIM_Base_Start_IT+0xf8>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d00e      	beq.n	800b25c <HAL_TIM_Base_Start_IT+0x94>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a20      	ldr	r2, [pc, #128]	; (800b2c4 <HAL_TIM_Base_Start_IT+0xfc>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d009      	beq.n	800b25c <HAL_TIM_Base_Start_IT+0x94>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a1e      	ldr	r2, [pc, #120]	; (800b2c8 <HAL_TIM_Base_Start_IT+0x100>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d004      	beq.n	800b25c <HAL_TIM_Base_Start_IT+0x94>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a1d      	ldr	r2, [pc, #116]	; (800b2cc <HAL_TIM_Base_Start_IT+0x104>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d115      	bne.n	800b288 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	689a      	ldr	r2, [r3, #8]
 800b262:	4b1b      	ldr	r3, [pc, #108]	; (800b2d0 <HAL_TIM_Base_Start_IT+0x108>)
 800b264:	4013      	ands	r3, r2
 800b266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2b06      	cmp	r3, #6
 800b26c:	d015      	beq.n	800b29a <HAL_TIM_Base_Start_IT+0xd2>
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b274:	d011      	beq.n	800b29a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f042 0201 	orr.w	r2, r2, #1
 800b284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b286:	e008      	b.n	800b29a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f042 0201 	orr.w	r2, r2, #1
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	e000      	b.n	800b29c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b29a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3714      	adds	r7, #20
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	40010000 	.word	0x40010000
 800b2b0:	40000400 	.word	0x40000400
 800b2b4:	40000800 	.word	0x40000800
 800b2b8:	40000c00 	.word	0x40000c00
 800b2bc:	40010400 	.word	0x40010400
 800b2c0:	40001800 	.word	0x40001800
 800b2c4:	40014000 	.word	0x40014000
 800b2c8:	4000e000 	.word	0x4000e000
 800b2cc:	4000e400 	.word	0x4000e400
 800b2d0:	00010007 	.word	0x00010007

0800b2d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d101      	bne.n	800b2e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e049      	b.n	800b37a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d106      	bne.n	800b300 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f7f9 fae0 	bl	80048c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2202      	movs	r2, #2
 800b304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	3304      	adds	r3, #4
 800b310:	4619      	mov	r1, r3
 800b312:	4610      	mov	r0, r2
 800b314:	f000 fdda 	bl	800becc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2201      	movs	r2, #1
 800b354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3708      	adds	r7, #8
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
	...

0800b384 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d109      	bne.n	800b3a8 <HAL_TIM_PWM_Start+0x24>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	bf14      	ite	ne
 800b3a0:	2301      	movne	r3, #1
 800b3a2:	2300      	moveq	r3, #0
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	e03c      	b.n	800b422 <HAL_TIM_PWM_Start+0x9e>
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	2b04      	cmp	r3, #4
 800b3ac:	d109      	bne.n	800b3c2 <HAL_TIM_PWM_Start+0x3e>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	bf14      	ite	ne
 800b3ba:	2301      	movne	r3, #1
 800b3bc:	2300      	moveq	r3, #0
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	e02f      	b.n	800b422 <HAL_TIM_PWM_Start+0x9e>
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	2b08      	cmp	r3, #8
 800b3c6:	d109      	bne.n	800b3dc <HAL_TIM_PWM_Start+0x58>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	bf14      	ite	ne
 800b3d4:	2301      	movne	r3, #1
 800b3d6:	2300      	moveq	r3, #0
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	e022      	b.n	800b422 <HAL_TIM_PWM_Start+0x9e>
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	2b0c      	cmp	r3, #12
 800b3e0:	d109      	bne.n	800b3f6 <HAL_TIM_PWM_Start+0x72>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	bf14      	ite	ne
 800b3ee:	2301      	movne	r3, #1
 800b3f0:	2300      	moveq	r3, #0
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	e015      	b.n	800b422 <HAL_TIM_PWM_Start+0x9e>
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	2b10      	cmp	r3, #16
 800b3fa:	d109      	bne.n	800b410 <HAL_TIM_PWM_Start+0x8c>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b402:	b2db      	uxtb	r3, r3
 800b404:	2b01      	cmp	r3, #1
 800b406:	bf14      	ite	ne
 800b408:	2301      	movne	r3, #1
 800b40a:	2300      	moveq	r3, #0
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	e008      	b.n	800b422 <HAL_TIM_PWM_Start+0x9e>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b416:	b2db      	uxtb	r3, r3
 800b418:	2b01      	cmp	r3, #1
 800b41a:	bf14      	ite	ne
 800b41c:	2301      	movne	r3, #1
 800b41e:	2300      	moveq	r3, #0
 800b420:	b2db      	uxtb	r3, r3
 800b422:	2b00      	cmp	r3, #0
 800b424:	d001      	beq.n	800b42a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	e0ab      	b.n	800b582 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d104      	bne.n	800b43a <HAL_TIM_PWM_Start+0xb6>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2202      	movs	r2, #2
 800b434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b438:	e023      	b.n	800b482 <HAL_TIM_PWM_Start+0xfe>
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	2b04      	cmp	r3, #4
 800b43e:	d104      	bne.n	800b44a <HAL_TIM_PWM_Start+0xc6>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2202      	movs	r2, #2
 800b444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b448:	e01b      	b.n	800b482 <HAL_TIM_PWM_Start+0xfe>
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	2b08      	cmp	r3, #8
 800b44e:	d104      	bne.n	800b45a <HAL_TIM_PWM_Start+0xd6>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2202      	movs	r2, #2
 800b454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b458:	e013      	b.n	800b482 <HAL_TIM_PWM_Start+0xfe>
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	2b0c      	cmp	r3, #12
 800b45e:	d104      	bne.n	800b46a <HAL_TIM_PWM_Start+0xe6>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2202      	movs	r2, #2
 800b464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b468:	e00b      	b.n	800b482 <HAL_TIM_PWM_Start+0xfe>
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	2b10      	cmp	r3, #16
 800b46e:	d104      	bne.n	800b47a <HAL_TIM_PWM_Start+0xf6>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2202      	movs	r2, #2
 800b474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b478:	e003      	b.n	800b482 <HAL_TIM_PWM_Start+0xfe>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2202      	movs	r2, #2
 800b47e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2201      	movs	r2, #1
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	4618      	mov	r0, r3
 800b48c:	f001 f938 	bl	800c700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a3d      	ldr	r2, [pc, #244]	; (800b58c <HAL_TIM_PWM_Start+0x208>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d013      	beq.n	800b4c2 <HAL_TIM_PWM_Start+0x13e>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a3c      	ldr	r2, [pc, #240]	; (800b590 <HAL_TIM_PWM_Start+0x20c>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d00e      	beq.n	800b4c2 <HAL_TIM_PWM_Start+0x13e>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a3a      	ldr	r2, [pc, #232]	; (800b594 <HAL_TIM_PWM_Start+0x210>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d009      	beq.n	800b4c2 <HAL_TIM_PWM_Start+0x13e>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a39      	ldr	r2, [pc, #228]	; (800b598 <HAL_TIM_PWM_Start+0x214>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d004      	beq.n	800b4c2 <HAL_TIM_PWM_Start+0x13e>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a37      	ldr	r2, [pc, #220]	; (800b59c <HAL_TIM_PWM_Start+0x218>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d101      	bne.n	800b4c6 <HAL_TIM_PWM_Start+0x142>
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e000      	b.n	800b4c8 <HAL_TIM_PWM_Start+0x144>
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d007      	beq.n	800b4dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a2a      	ldr	r2, [pc, #168]	; (800b58c <HAL_TIM_PWM_Start+0x208>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d02c      	beq.n	800b540 <HAL_TIM_PWM_Start+0x1bc>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4ee:	d027      	beq.n	800b540 <HAL_TIM_PWM_Start+0x1bc>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a2a      	ldr	r2, [pc, #168]	; (800b5a0 <HAL_TIM_PWM_Start+0x21c>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d022      	beq.n	800b540 <HAL_TIM_PWM_Start+0x1bc>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a29      	ldr	r2, [pc, #164]	; (800b5a4 <HAL_TIM_PWM_Start+0x220>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d01d      	beq.n	800b540 <HAL_TIM_PWM_Start+0x1bc>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a27      	ldr	r2, [pc, #156]	; (800b5a8 <HAL_TIM_PWM_Start+0x224>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d018      	beq.n	800b540 <HAL_TIM_PWM_Start+0x1bc>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a1f      	ldr	r2, [pc, #124]	; (800b590 <HAL_TIM_PWM_Start+0x20c>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d013      	beq.n	800b540 <HAL_TIM_PWM_Start+0x1bc>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a23      	ldr	r2, [pc, #140]	; (800b5ac <HAL_TIM_PWM_Start+0x228>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d00e      	beq.n	800b540 <HAL_TIM_PWM_Start+0x1bc>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a1b      	ldr	r2, [pc, #108]	; (800b594 <HAL_TIM_PWM_Start+0x210>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d009      	beq.n	800b540 <HAL_TIM_PWM_Start+0x1bc>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a1f      	ldr	r2, [pc, #124]	; (800b5b0 <HAL_TIM_PWM_Start+0x22c>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d004      	beq.n	800b540 <HAL_TIM_PWM_Start+0x1bc>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a1e      	ldr	r2, [pc, #120]	; (800b5b4 <HAL_TIM_PWM_Start+0x230>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d115      	bne.n	800b56c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	689a      	ldr	r2, [r3, #8]
 800b546:	4b1c      	ldr	r3, [pc, #112]	; (800b5b8 <HAL_TIM_PWM_Start+0x234>)
 800b548:	4013      	ands	r3, r2
 800b54a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2b06      	cmp	r3, #6
 800b550:	d015      	beq.n	800b57e <HAL_TIM_PWM_Start+0x1fa>
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b558:	d011      	beq.n	800b57e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f042 0201 	orr.w	r2, r2, #1
 800b568:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b56a:	e008      	b.n	800b57e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f042 0201 	orr.w	r2, r2, #1
 800b57a:	601a      	str	r2, [r3, #0]
 800b57c:	e000      	b.n	800b580 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b57e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	40010000 	.word	0x40010000
 800b590:	40010400 	.word	0x40010400
 800b594:	40014000 	.word	0x40014000
 800b598:	40014400 	.word	0x40014400
 800b59c:	40014800 	.word	0x40014800
 800b5a0:	40000400 	.word	0x40000400
 800b5a4:	40000800 	.word	0x40000800
 800b5a8:	40000c00 	.word	0x40000c00
 800b5ac:	40001800 	.word	0x40001800
 800b5b0:	4000e000 	.word	0x4000e000
 800b5b4:	4000e400 	.word	0x4000e400
 800b5b8:	00010007 	.word	0x00010007

0800b5bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d101      	bne.n	800b5d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e08f      	b.n	800b6f0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d106      	bne.n	800b5ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f7f9 f83d 	bl	8004664 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2202      	movs	r2, #2
 800b5ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	6899      	ldr	r1, [r3, #8]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	4b3e      	ldr	r3, [pc, #248]	; (800b6f8 <HAL_TIM_Encoder_Init+0x13c>)
 800b5fe:	400b      	ands	r3, r1
 800b600:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	3304      	adds	r3, #4
 800b60a:	4619      	mov	r1, r3
 800b60c:	4610      	mov	r0, r2
 800b60e:	f000 fc5d 	bl	800becc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	699b      	ldr	r3, [r3, #24]
 800b620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	6a1b      	ldr	r3, [r3, #32]
 800b628:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	697a      	ldr	r2, [r7, #20]
 800b630:	4313      	orrs	r3, r2
 800b632:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b634:	693a      	ldr	r2, [r7, #16]
 800b636:	4b31      	ldr	r3, [pc, #196]	; (800b6fc <HAL_TIM_Encoder_Init+0x140>)
 800b638:	4013      	ands	r3, r2
 800b63a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	689a      	ldr	r2, [r3, #8]
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	699b      	ldr	r3, [r3, #24]
 800b644:	021b      	lsls	r3, r3, #8
 800b646:	4313      	orrs	r3, r2
 800b648:	693a      	ldr	r2, [r7, #16]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b64e:	693a      	ldr	r2, [r7, #16]
 800b650:	4b2b      	ldr	r3, [pc, #172]	; (800b700 <HAL_TIM_Encoder_Init+0x144>)
 800b652:	4013      	ands	r3, r2
 800b654:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b656:	693a      	ldr	r2, [r7, #16]
 800b658:	4b2a      	ldr	r3, [pc, #168]	; (800b704 <HAL_TIM_Encoder_Init+0x148>)
 800b65a:	4013      	ands	r3, r2
 800b65c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	68da      	ldr	r2, [r3, #12]
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	69db      	ldr	r3, [r3, #28]
 800b666:	021b      	lsls	r3, r3, #8
 800b668:	4313      	orrs	r3, r2
 800b66a:	693a      	ldr	r2, [r7, #16]
 800b66c:	4313      	orrs	r3, r2
 800b66e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	691b      	ldr	r3, [r3, #16]
 800b674:	011a      	lsls	r2, r3, #4
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	6a1b      	ldr	r3, [r3, #32]
 800b67a:	031b      	lsls	r3, r3, #12
 800b67c:	4313      	orrs	r3, r2
 800b67e:	693a      	ldr	r2, [r7, #16]
 800b680:	4313      	orrs	r3, r2
 800b682:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b68a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b692:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	685a      	ldr	r2, [r3, #4]
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	695b      	ldr	r3, [r3, #20]
 800b69c:	011b      	lsls	r3, r3, #4
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	697a      	ldr	r2, [r7, #20]
 800b6ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	693a      	ldr	r2, [r7, #16]
 800b6b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6ee:	2300      	movs	r3, #0
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3718      	adds	r7, #24
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	fffebff8 	.word	0xfffebff8
 800b6fc:	fffffcfc 	.word	0xfffffcfc
 800b700:	fffff3f3 	.word	0xfffff3f3
 800b704:	ffff0f0f 	.word	0xffff0f0f

0800b708 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b718:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b720:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b728:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b730:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d110      	bne.n	800b75a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b738:	7bfb      	ldrb	r3, [r7, #15]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d102      	bne.n	800b744 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b73e:	7b7b      	ldrb	r3, [r7, #13]
 800b740:	2b01      	cmp	r3, #1
 800b742:	d001      	beq.n	800b748 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b744:	2301      	movs	r3, #1
 800b746:	e069      	b.n	800b81c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2202      	movs	r2, #2
 800b74c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2202      	movs	r2, #2
 800b754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b758:	e031      	b.n	800b7be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	2b04      	cmp	r3, #4
 800b75e:	d110      	bne.n	800b782 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b760:	7bbb      	ldrb	r3, [r7, #14]
 800b762:	2b01      	cmp	r3, #1
 800b764:	d102      	bne.n	800b76c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b766:	7b3b      	ldrb	r3, [r7, #12]
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d001      	beq.n	800b770 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	e055      	b.n	800b81c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2202      	movs	r2, #2
 800b774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2202      	movs	r2, #2
 800b77c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b780:	e01d      	b.n	800b7be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b782:	7bfb      	ldrb	r3, [r7, #15]
 800b784:	2b01      	cmp	r3, #1
 800b786:	d108      	bne.n	800b79a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b788:	7bbb      	ldrb	r3, [r7, #14]
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d105      	bne.n	800b79a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b78e:	7b7b      	ldrb	r3, [r7, #13]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d102      	bne.n	800b79a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b794:	7b3b      	ldrb	r3, [r7, #12]
 800b796:	2b01      	cmp	r3, #1
 800b798:	d001      	beq.n	800b79e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b79a:	2301      	movs	r3, #1
 800b79c:	e03e      	b.n	800b81c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2202      	movs	r2, #2
 800b7a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2202      	movs	r2, #2
 800b7aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2202      	movs	r2, #2
 800b7b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2202      	movs	r2, #2
 800b7ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d003      	beq.n	800b7cc <HAL_TIM_Encoder_Start+0xc4>
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	2b04      	cmp	r3, #4
 800b7c8:	d008      	beq.n	800b7dc <HAL_TIM_Encoder_Start+0xd4>
 800b7ca:	e00f      	b.n	800b7ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f000 ff93 	bl	800c700 <TIM_CCxChannelCmd>
      break;
 800b7da:	e016      	b.n	800b80a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	2104      	movs	r1, #4
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f000 ff8b 	bl	800c700 <TIM_CCxChannelCmd>
      break;
 800b7ea:	e00e      	b.n	800b80a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f000 ff83 	bl	800c700 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2201      	movs	r2, #1
 800b800:	2104      	movs	r1, #4
 800b802:	4618      	mov	r0, r3
 800b804:	f000 ff7c 	bl	800c700 <TIM_CCxChannelCmd>
      break;
 800b808:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f042 0201 	orr.w	r2, r2, #1
 800b818:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3710      	adds	r7, #16
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b082      	sub	sp, #8
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	691b      	ldr	r3, [r3, #16]
 800b832:	f003 0302 	and.w	r3, r3, #2
 800b836:	2b02      	cmp	r3, #2
 800b838:	d122      	bne.n	800b880 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	f003 0302 	and.w	r3, r3, #2
 800b844:	2b02      	cmp	r3, #2
 800b846:	d11b      	bne.n	800b880 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f06f 0202 	mvn.w	r2, #2
 800b850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2201      	movs	r2, #1
 800b856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	699b      	ldr	r3, [r3, #24]
 800b85e:	f003 0303 	and.w	r3, r3, #3
 800b862:	2b00      	cmp	r3, #0
 800b864:	d003      	beq.n	800b86e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fb12 	bl	800be90 <HAL_TIM_IC_CaptureCallback>
 800b86c:	e005      	b.n	800b87a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 fb04 	bl	800be7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 fb15 	bl	800bea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	f003 0304 	and.w	r3, r3, #4
 800b88a:	2b04      	cmp	r3, #4
 800b88c:	d122      	bne.n	800b8d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	f003 0304 	and.w	r3, r3, #4
 800b898:	2b04      	cmp	r3, #4
 800b89a:	d11b      	bne.n	800b8d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f06f 0204 	mvn.w	r2, #4
 800b8a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2202      	movs	r2, #2
 800b8aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	699b      	ldr	r3, [r3, #24]
 800b8b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d003      	beq.n	800b8c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 fae8 	bl	800be90 <HAL_TIM_IC_CaptureCallback>
 800b8c0:	e005      	b.n	800b8ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fada 	bl	800be7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 faeb 	bl	800bea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	f003 0308 	and.w	r3, r3, #8
 800b8de:	2b08      	cmp	r3, #8
 800b8e0:	d122      	bne.n	800b928 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	f003 0308 	and.w	r3, r3, #8
 800b8ec:	2b08      	cmp	r3, #8
 800b8ee:	d11b      	bne.n	800b928 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f06f 0208 	mvn.w	r2, #8
 800b8f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2204      	movs	r2, #4
 800b8fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	69db      	ldr	r3, [r3, #28]
 800b906:	f003 0303 	and.w	r3, r3, #3
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d003      	beq.n	800b916 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 fabe 	bl	800be90 <HAL_TIM_IC_CaptureCallback>
 800b914:	e005      	b.n	800b922 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 fab0 	bl	800be7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fac1 	bl	800bea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	f003 0310 	and.w	r3, r3, #16
 800b932:	2b10      	cmp	r3, #16
 800b934:	d122      	bne.n	800b97c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	f003 0310 	and.w	r3, r3, #16
 800b940:	2b10      	cmp	r3, #16
 800b942:	d11b      	bne.n	800b97c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f06f 0210 	mvn.w	r2, #16
 800b94c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2208      	movs	r2, #8
 800b952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	69db      	ldr	r3, [r3, #28]
 800b95a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d003      	beq.n	800b96a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fa94 	bl	800be90 <HAL_TIM_IC_CaptureCallback>
 800b968:	e005      	b.n	800b976 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fa86 	bl	800be7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 fa97 	bl	800bea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	691b      	ldr	r3, [r3, #16]
 800b982:	f003 0301 	and.w	r3, r3, #1
 800b986:	2b01      	cmp	r3, #1
 800b988:	d10e      	bne.n	800b9a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	f003 0301 	and.w	r3, r3, #1
 800b994:	2b01      	cmp	r3, #1
 800b996:	d107      	bne.n	800b9a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f06f 0201 	mvn.w	r2, #1
 800b9a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f7f5 fd48 	bl	8001438 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	691b      	ldr	r3, [r3, #16]
 800b9ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9b2:	2b80      	cmp	r3, #128	; 0x80
 800b9b4:	d10e      	bne.n	800b9d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9c0:	2b80      	cmp	r3, #128	; 0x80
 800b9c2:	d107      	bne.n	800b9d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b9cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f001 f802 	bl	800c9d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	691b      	ldr	r3, [r3, #16]
 800b9da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9e2:	d10e      	bne.n	800ba02 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9ee:	2b80      	cmp	r3, #128	; 0x80
 800b9f0:	d107      	bne.n	800ba02 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b9fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fff5 	bl	800c9ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	691b      	ldr	r3, [r3, #16]
 800ba08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba0c:	2b40      	cmp	r3, #64	; 0x40
 800ba0e:	d10e      	bne.n	800ba2e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba1a:	2b40      	cmp	r3, #64	; 0x40
 800ba1c:	d107      	bne.n	800ba2e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ba26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 fa45 	bl	800beb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	691b      	ldr	r3, [r3, #16]
 800ba34:	f003 0320 	and.w	r3, r3, #32
 800ba38:	2b20      	cmp	r3, #32
 800ba3a:	d10e      	bne.n	800ba5a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	68db      	ldr	r3, [r3, #12]
 800ba42:	f003 0320 	and.w	r3, r3, #32
 800ba46:	2b20      	cmp	r3, #32
 800ba48:	d107      	bne.n	800ba5a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f06f 0220 	mvn.w	r2, #32
 800ba52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 ffb5 	bl	800c9c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba5a:	bf00      	nop
 800ba5c:	3708      	adds	r7, #8
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
	...

0800ba64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba70:	2300      	movs	r3, #0
 800ba72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d101      	bne.n	800ba82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ba7e:	2302      	movs	r3, #2
 800ba80:	e0ff      	b.n	800bc82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2201      	movs	r2, #1
 800ba86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2b14      	cmp	r3, #20
 800ba8e:	f200 80f0 	bhi.w	800bc72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ba92:	a201      	add	r2, pc, #4	; (adr r2, 800ba98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ba94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba98:	0800baed 	.word	0x0800baed
 800ba9c:	0800bc73 	.word	0x0800bc73
 800baa0:	0800bc73 	.word	0x0800bc73
 800baa4:	0800bc73 	.word	0x0800bc73
 800baa8:	0800bb2d 	.word	0x0800bb2d
 800baac:	0800bc73 	.word	0x0800bc73
 800bab0:	0800bc73 	.word	0x0800bc73
 800bab4:	0800bc73 	.word	0x0800bc73
 800bab8:	0800bb6f 	.word	0x0800bb6f
 800babc:	0800bc73 	.word	0x0800bc73
 800bac0:	0800bc73 	.word	0x0800bc73
 800bac4:	0800bc73 	.word	0x0800bc73
 800bac8:	0800bbaf 	.word	0x0800bbaf
 800bacc:	0800bc73 	.word	0x0800bc73
 800bad0:	0800bc73 	.word	0x0800bc73
 800bad4:	0800bc73 	.word	0x0800bc73
 800bad8:	0800bbf1 	.word	0x0800bbf1
 800badc:	0800bc73 	.word	0x0800bc73
 800bae0:	0800bc73 	.word	0x0800bc73
 800bae4:	0800bc73 	.word	0x0800bc73
 800bae8:	0800bc31 	.word	0x0800bc31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	68b9      	ldr	r1, [r7, #8]
 800baf2:	4618      	mov	r0, r3
 800baf4:	f000 fa90 	bl	800c018 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	699a      	ldr	r2, [r3, #24]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f042 0208 	orr.w	r2, r2, #8
 800bb06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	699a      	ldr	r2, [r3, #24]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f022 0204 	bic.w	r2, r2, #4
 800bb16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	6999      	ldr	r1, [r3, #24]
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	691a      	ldr	r2, [r3, #16]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	430a      	orrs	r2, r1
 800bb28:	619a      	str	r2, [r3, #24]
      break;
 800bb2a:	e0a5      	b.n	800bc78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68b9      	ldr	r1, [r7, #8]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f000 fb00 	bl	800c138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	699a      	ldr	r2, [r3, #24]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	699a      	ldr	r2, [r3, #24]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	6999      	ldr	r1, [r3, #24]
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	691b      	ldr	r3, [r3, #16]
 800bb62:	021a      	lsls	r2, r3, #8
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	430a      	orrs	r2, r1
 800bb6a:	619a      	str	r2, [r3, #24]
      break;
 800bb6c:	e084      	b.n	800bc78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	68b9      	ldr	r1, [r7, #8]
 800bb74:	4618      	mov	r0, r3
 800bb76:	f000 fb69 	bl	800c24c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	69da      	ldr	r2, [r3, #28]
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f042 0208 	orr.w	r2, r2, #8
 800bb88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	69da      	ldr	r2, [r3, #28]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f022 0204 	bic.w	r2, r2, #4
 800bb98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	69d9      	ldr	r1, [r3, #28]
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	691a      	ldr	r2, [r3, #16]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	430a      	orrs	r2, r1
 800bbaa:	61da      	str	r2, [r3, #28]
      break;
 800bbac:	e064      	b.n	800bc78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	68b9      	ldr	r1, [r7, #8]
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f000 fbd1 	bl	800c35c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	69da      	ldr	r2, [r3, #28]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	69da      	ldr	r2, [r3, #28]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	69d9      	ldr	r1, [r3, #28]
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	691b      	ldr	r3, [r3, #16]
 800bbe4:	021a      	lsls	r2, r3, #8
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	430a      	orrs	r2, r1
 800bbec:	61da      	str	r2, [r3, #28]
      break;
 800bbee:	e043      	b.n	800bc78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	68b9      	ldr	r1, [r7, #8]
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f000 fc1a 	bl	800c430 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f042 0208 	orr.w	r2, r2, #8
 800bc0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f022 0204 	bic.w	r2, r2, #4
 800bc1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	691a      	ldr	r2, [r3, #16]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	430a      	orrs	r2, r1
 800bc2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bc2e:	e023      	b.n	800bc78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	68b9      	ldr	r1, [r7, #8]
 800bc36:	4618      	mov	r0, r3
 800bc38:	f000 fc5e 	bl	800c4f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	691b      	ldr	r3, [r3, #16]
 800bc66:	021a      	lsls	r2, r3, #8
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	430a      	orrs	r2, r1
 800bc6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bc70:	e002      	b.n	800bc78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bc72:	2301      	movs	r3, #1
 800bc74:	75fb      	strb	r3, [r7, #23]
      break;
 800bc76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bc80:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3718      	adds	r7, #24
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop

0800bc8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc96:	2300      	movs	r3, #0
 800bc98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d101      	bne.n	800bca8 <HAL_TIM_ConfigClockSource+0x1c>
 800bca4:	2302      	movs	r3, #2
 800bca6:	e0dc      	b.n	800be62 <HAL_TIM_ConfigClockSource+0x1d6>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2202      	movs	r2, #2
 800bcb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bcc0:	68ba      	ldr	r2, [r7, #8]
 800bcc2:	4b6a      	ldr	r3, [pc, #424]	; (800be6c <HAL_TIM_ConfigClockSource+0x1e0>)
 800bcc4:	4013      	ands	r3, r2
 800bcc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bcce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	68ba      	ldr	r2, [r7, #8]
 800bcd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a64      	ldr	r2, [pc, #400]	; (800be70 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	f000 80a9 	beq.w	800be36 <HAL_TIM_ConfigClockSource+0x1aa>
 800bce4:	4a62      	ldr	r2, [pc, #392]	; (800be70 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	f200 80ae 	bhi.w	800be48 <HAL_TIM_ConfigClockSource+0x1bc>
 800bcec:	4a61      	ldr	r2, [pc, #388]	; (800be74 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	f000 80a1 	beq.w	800be36 <HAL_TIM_ConfigClockSource+0x1aa>
 800bcf4:	4a5f      	ldr	r2, [pc, #380]	; (800be74 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	f200 80a6 	bhi.w	800be48 <HAL_TIM_ConfigClockSource+0x1bc>
 800bcfc:	4a5e      	ldr	r2, [pc, #376]	; (800be78 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	f000 8099 	beq.w	800be36 <HAL_TIM_ConfigClockSource+0x1aa>
 800bd04:	4a5c      	ldr	r2, [pc, #368]	; (800be78 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	f200 809e 	bhi.w	800be48 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bd10:	f000 8091 	beq.w	800be36 <HAL_TIM_ConfigClockSource+0x1aa>
 800bd14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bd18:	f200 8096 	bhi.w	800be48 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd20:	f000 8089 	beq.w	800be36 <HAL_TIM_ConfigClockSource+0x1aa>
 800bd24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd28:	f200 808e 	bhi.w	800be48 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd30:	d03e      	beq.n	800bdb0 <HAL_TIM_ConfigClockSource+0x124>
 800bd32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd36:	f200 8087 	bhi.w	800be48 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd3e:	f000 8086 	beq.w	800be4e <HAL_TIM_ConfigClockSource+0x1c2>
 800bd42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd46:	d87f      	bhi.n	800be48 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd48:	2b70      	cmp	r3, #112	; 0x70
 800bd4a:	d01a      	beq.n	800bd82 <HAL_TIM_ConfigClockSource+0xf6>
 800bd4c:	2b70      	cmp	r3, #112	; 0x70
 800bd4e:	d87b      	bhi.n	800be48 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd50:	2b60      	cmp	r3, #96	; 0x60
 800bd52:	d050      	beq.n	800bdf6 <HAL_TIM_ConfigClockSource+0x16a>
 800bd54:	2b60      	cmp	r3, #96	; 0x60
 800bd56:	d877      	bhi.n	800be48 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd58:	2b50      	cmp	r3, #80	; 0x50
 800bd5a:	d03c      	beq.n	800bdd6 <HAL_TIM_ConfigClockSource+0x14a>
 800bd5c:	2b50      	cmp	r3, #80	; 0x50
 800bd5e:	d873      	bhi.n	800be48 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd60:	2b40      	cmp	r3, #64	; 0x40
 800bd62:	d058      	beq.n	800be16 <HAL_TIM_ConfigClockSource+0x18a>
 800bd64:	2b40      	cmp	r3, #64	; 0x40
 800bd66:	d86f      	bhi.n	800be48 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd68:	2b30      	cmp	r3, #48	; 0x30
 800bd6a:	d064      	beq.n	800be36 <HAL_TIM_ConfigClockSource+0x1aa>
 800bd6c:	2b30      	cmp	r3, #48	; 0x30
 800bd6e:	d86b      	bhi.n	800be48 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd70:	2b20      	cmp	r3, #32
 800bd72:	d060      	beq.n	800be36 <HAL_TIM_ConfigClockSource+0x1aa>
 800bd74:	2b20      	cmp	r3, #32
 800bd76:	d867      	bhi.n	800be48 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d05c      	beq.n	800be36 <HAL_TIM_ConfigClockSource+0x1aa>
 800bd7c:	2b10      	cmp	r3, #16
 800bd7e:	d05a      	beq.n	800be36 <HAL_TIM_ConfigClockSource+0x1aa>
 800bd80:	e062      	b.n	800be48 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6818      	ldr	r0, [r3, #0]
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	6899      	ldr	r1, [r3, #8]
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	685a      	ldr	r2, [r3, #4]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	f000 fc95 	bl	800c6c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bda4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	68ba      	ldr	r2, [r7, #8]
 800bdac:	609a      	str	r2, [r3, #8]
      break;
 800bdae:	e04f      	b.n	800be50 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6818      	ldr	r0, [r3, #0]
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	6899      	ldr	r1, [r3, #8]
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	685a      	ldr	r2, [r3, #4]
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	f000 fc7e 	bl	800c6c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	689a      	ldr	r2, [r3, #8]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bdd2:	609a      	str	r2, [r3, #8]
      break;
 800bdd4:	e03c      	b.n	800be50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6818      	ldr	r0, [r3, #0]
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	6859      	ldr	r1, [r3, #4]
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	461a      	mov	r2, r3
 800bde4:	f000 fbee 	bl	800c5c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2150      	movs	r1, #80	; 0x50
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f000 fc48 	bl	800c684 <TIM_ITRx_SetConfig>
      break;
 800bdf4:	e02c      	b.n	800be50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6818      	ldr	r0, [r3, #0]
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	6859      	ldr	r1, [r3, #4]
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	461a      	mov	r2, r3
 800be04:	f000 fc0d 	bl	800c622 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2160      	movs	r1, #96	; 0x60
 800be0e:	4618      	mov	r0, r3
 800be10:	f000 fc38 	bl	800c684 <TIM_ITRx_SetConfig>
      break;
 800be14:	e01c      	b.n	800be50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6818      	ldr	r0, [r3, #0]
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	6859      	ldr	r1, [r3, #4]
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	461a      	mov	r2, r3
 800be24:	f000 fbce 	bl	800c5c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2140      	movs	r1, #64	; 0x40
 800be2e:	4618      	mov	r0, r3
 800be30:	f000 fc28 	bl	800c684 <TIM_ITRx_SetConfig>
      break;
 800be34:	e00c      	b.n	800be50 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4619      	mov	r1, r3
 800be40:	4610      	mov	r0, r2
 800be42:	f000 fc1f 	bl	800c684 <TIM_ITRx_SetConfig>
      break;
 800be46:	e003      	b.n	800be50 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800be48:	2301      	movs	r3, #1
 800be4a:	73fb      	strb	r3, [r7, #15]
      break;
 800be4c:	e000      	b.n	800be50 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800be4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2201      	movs	r2, #1
 800be54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2200      	movs	r2, #0
 800be5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be60:	7bfb      	ldrb	r3, [r7, #15]
}
 800be62:	4618      	mov	r0, r3
 800be64:	3710      	adds	r7, #16
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	ffceff88 	.word	0xffceff88
 800be70:	00100040 	.word	0x00100040
 800be74:	00100030 	.word	0x00100030
 800be78:	00100020 	.word	0x00100020

0800be7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be98:	bf00      	nop
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800beac:	bf00      	nop
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bec0:	bf00      	nop
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800becc:	b480      	push	{r7}
 800bece:	b085      	sub	sp, #20
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4a44      	ldr	r2, [pc, #272]	; (800bff0 <TIM_Base_SetConfig+0x124>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d013      	beq.n	800bf0c <TIM_Base_SetConfig+0x40>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beea:	d00f      	beq.n	800bf0c <TIM_Base_SetConfig+0x40>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4a41      	ldr	r2, [pc, #260]	; (800bff4 <TIM_Base_SetConfig+0x128>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d00b      	beq.n	800bf0c <TIM_Base_SetConfig+0x40>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4a40      	ldr	r2, [pc, #256]	; (800bff8 <TIM_Base_SetConfig+0x12c>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d007      	beq.n	800bf0c <TIM_Base_SetConfig+0x40>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4a3f      	ldr	r2, [pc, #252]	; (800bffc <TIM_Base_SetConfig+0x130>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d003      	beq.n	800bf0c <TIM_Base_SetConfig+0x40>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4a3e      	ldr	r2, [pc, #248]	; (800c000 <TIM_Base_SetConfig+0x134>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d108      	bne.n	800bf1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4a33      	ldr	r2, [pc, #204]	; (800bff0 <TIM_Base_SetConfig+0x124>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d027      	beq.n	800bf76 <TIM_Base_SetConfig+0xaa>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf2c:	d023      	beq.n	800bf76 <TIM_Base_SetConfig+0xaa>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4a30      	ldr	r2, [pc, #192]	; (800bff4 <TIM_Base_SetConfig+0x128>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d01f      	beq.n	800bf76 <TIM_Base_SetConfig+0xaa>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4a2f      	ldr	r2, [pc, #188]	; (800bff8 <TIM_Base_SetConfig+0x12c>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d01b      	beq.n	800bf76 <TIM_Base_SetConfig+0xaa>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4a2e      	ldr	r2, [pc, #184]	; (800bffc <TIM_Base_SetConfig+0x130>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d017      	beq.n	800bf76 <TIM_Base_SetConfig+0xaa>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4a2d      	ldr	r2, [pc, #180]	; (800c000 <TIM_Base_SetConfig+0x134>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d013      	beq.n	800bf76 <TIM_Base_SetConfig+0xaa>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4a2c      	ldr	r2, [pc, #176]	; (800c004 <TIM_Base_SetConfig+0x138>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d00f      	beq.n	800bf76 <TIM_Base_SetConfig+0xaa>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	4a2b      	ldr	r2, [pc, #172]	; (800c008 <TIM_Base_SetConfig+0x13c>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d00b      	beq.n	800bf76 <TIM_Base_SetConfig+0xaa>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4a2a      	ldr	r2, [pc, #168]	; (800c00c <TIM_Base_SetConfig+0x140>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d007      	beq.n	800bf76 <TIM_Base_SetConfig+0xaa>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	4a29      	ldr	r2, [pc, #164]	; (800c010 <TIM_Base_SetConfig+0x144>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d003      	beq.n	800bf76 <TIM_Base_SetConfig+0xaa>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	4a28      	ldr	r2, [pc, #160]	; (800c014 <TIM_Base_SetConfig+0x148>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d108      	bne.n	800bf88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	695b      	ldr	r3, [r3, #20]
 800bf92:	4313      	orrs	r3, r2
 800bf94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	689a      	ldr	r2, [r3, #8]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	681a      	ldr	r2, [r3, #0]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	4a10      	ldr	r2, [pc, #64]	; (800bff0 <TIM_Base_SetConfig+0x124>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d00f      	beq.n	800bfd4 <TIM_Base_SetConfig+0x108>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	4a12      	ldr	r2, [pc, #72]	; (800c000 <TIM_Base_SetConfig+0x134>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d00b      	beq.n	800bfd4 <TIM_Base_SetConfig+0x108>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	4a11      	ldr	r2, [pc, #68]	; (800c004 <TIM_Base_SetConfig+0x138>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d007      	beq.n	800bfd4 <TIM_Base_SetConfig+0x108>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4a10      	ldr	r2, [pc, #64]	; (800c008 <TIM_Base_SetConfig+0x13c>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d003      	beq.n	800bfd4 <TIM_Base_SetConfig+0x108>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4a0f      	ldr	r2, [pc, #60]	; (800c00c <TIM_Base_SetConfig+0x140>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d103      	bne.n	800bfdc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	691a      	ldr	r2, [r3, #16]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	615a      	str	r2, [r3, #20]
}
 800bfe2:	bf00      	nop
 800bfe4:	3714      	adds	r7, #20
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	40010000 	.word	0x40010000
 800bff4:	40000400 	.word	0x40000400
 800bff8:	40000800 	.word	0x40000800
 800bffc:	40000c00 	.word	0x40000c00
 800c000:	40010400 	.word	0x40010400
 800c004:	40014000 	.word	0x40014000
 800c008:	40014400 	.word	0x40014400
 800c00c:	40014800 	.word	0x40014800
 800c010:	4000e000 	.word	0x4000e000
 800c014:	4000e400 	.word	0x4000e400

0800c018 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c018:	b480      	push	{r7}
 800c01a:	b087      	sub	sp, #28
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a1b      	ldr	r3, [r3, #32]
 800c026:	f023 0201 	bic.w	r2, r3, #1
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6a1b      	ldr	r3, [r3, #32]
 800c032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	699b      	ldr	r3, [r3, #24]
 800c03e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c040:	68fa      	ldr	r2, [r7, #12]
 800c042:	4b37      	ldr	r3, [pc, #220]	; (800c120 <TIM_OC1_SetConfig+0x108>)
 800c044:	4013      	ands	r3, r2
 800c046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f023 0303 	bic.w	r3, r3, #3
 800c04e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	68fa      	ldr	r2, [r7, #12]
 800c056:	4313      	orrs	r3, r2
 800c058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	f023 0302 	bic.w	r3, r3, #2
 800c060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	689b      	ldr	r3, [r3, #8]
 800c066:	697a      	ldr	r2, [r7, #20]
 800c068:	4313      	orrs	r3, r2
 800c06a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4a2d      	ldr	r2, [pc, #180]	; (800c124 <TIM_OC1_SetConfig+0x10c>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d00f      	beq.n	800c094 <TIM_OC1_SetConfig+0x7c>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4a2c      	ldr	r2, [pc, #176]	; (800c128 <TIM_OC1_SetConfig+0x110>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d00b      	beq.n	800c094 <TIM_OC1_SetConfig+0x7c>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4a2b      	ldr	r2, [pc, #172]	; (800c12c <TIM_OC1_SetConfig+0x114>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d007      	beq.n	800c094 <TIM_OC1_SetConfig+0x7c>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	4a2a      	ldr	r2, [pc, #168]	; (800c130 <TIM_OC1_SetConfig+0x118>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d003      	beq.n	800c094 <TIM_OC1_SetConfig+0x7c>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	4a29      	ldr	r2, [pc, #164]	; (800c134 <TIM_OC1_SetConfig+0x11c>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d10c      	bne.n	800c0ae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	f023 0308 	bic.w	r3, r3, #8
 800c09a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	697a      	ldr	r2, [r7, #20]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	f023 0304 	bic.w	r3, r3, #4
 800c0ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4a1c      	ldr	r2, [pc, #112]	; (800c124 <TIM_OC1_SetConfig+0x10c>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d00f      	beq.n	800c0d6 <TIM_OC1_SetConfig+0xbe>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4a1b      	ldr	r2, [pc, #108]	; (800c128 <TIM_OC1_SetConfig+0x110>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d00b      	beq.n	800c0d6 <TIM_OC1_SetConfig+0xbe>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	4a1a      	ldr	r2, [pc, #104]	; (800c12c <TIM_OC1_SetConfig+0x114>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d007      	beq.n	800c0d6 <TIM_OC1_SetConfig+0xbe>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4a19      	ldr	r2, [pc, #100]	; (800c130 <TIM_OC1_SetConfig+0x118>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d003      	beq.n	800c0d6 <TIM_OC1_SetConfig+0xbe>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4a18      	ldr	r2, [pc, #96]	; (800c134 <TIM_OC1_SetConfig+0x11c>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d111      	bne.n	800c0fa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c0e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	695b      	ldr	r3, [r3, #20]
 800c0ea:	693a      	ldr	r2, [r7, #16]
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	699b      	ldr	r3, [r3, #24]
 800c0f4:	693a      	ldr	r2, [r7, #16]
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	693a      	ldr	r2, [r7, #16]
 800c0fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	685a      	ldr	r2, [r3, #4]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	697a      	ldr	r2, [r7, #20]
 800c112:	621a      	str	r2, [r3, #32]
}
 800c114:	bf00      	nop
 800c116:	371c      	adds	r7, #28
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr
 800c120:	fffeff8f 	.word	0xfffeff8f
 800c124:	40010000 	.word	0x40010000
 800c128:	40010400 	.word	0x40010400
 800c12c:	40014000 	.word	0x40014000
 800c130:	40014400 	.word	0x40014400
 800c134:	40014800 	.word	0x40014800

0800c138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c138:	b480      	push	{r7}
 800c13a:	b087      	sub	sp, #28
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a1b      	ldr	r3, [r3, #32]
 800c146:	f023 0210 	bic.w	r2, r3, #16
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6a1b      	ldr	r3, [r3, #32]
 800c152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	699b      	ldr	r3, [r3, #24]
 800c15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c160:	68fa      	ldr	r2, [r7, #12]
 800c162:	4b34      	ldr	r3, [pc, #208]	; (800c234 <TIM_OC2_SetConfig+0xfc>)
 800c164:	4013      	ands	r3, r2
 800c166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c16e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	021b      	lsls	r3, r3, #8
 800c176:	68fa      	ldr	r2, [r7, #12]
 800c178:	4313      	orrs	r3, r2
 800c17a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	f023 0320 	bic.w	r3, r3, #32
 800c182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	011b      	lsls	r3, r3, #4
 800c18a:	697a      	ldr	r2, [r7, #20]
 800c18c:	4313      	orrs	r3, r2
 800c18e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4a29      	ldr	r2, [pc, #164]	; (800c238 <TIM_OC2_SetConfig+0x100>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d003      	beq.n	800c1a0 <TIM_OC2_SetConfig+0x68>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4a28      	ldr	r2, [pc, #160]	; (800c23c <TIM_OC2_SetConfig+0x104>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d10d      	bne.n	800c1bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	011b      	lsls	r3, r3, #4
 800c1ae:	697a      	ldr	r2, [r7, #20]
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4a1e      	ldr	r2, [pc, #120]	; (800c238 <TIM_OC2_SetConfig+0x100>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d00f      	beq.n	800c1e4 <TIM_OC2_SetConfig+0xac>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a1d      	ldr	r2, [pc, #116]	; (800c23c <TIM_OC2_SetConfig+0x104>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d00b      	beq.n	800c1e4 <TIM_OC2_SetConfig+0xac>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a1c      	ldr	r2, [pc, #112]	; (800c240 <TIM_OC2_SetConfig+0x108>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d007      	beq.n	800c1e4 <TIM_OC2_SetConfig+0xac>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a1b      	ldr	r2, [pc, #108]	; (800c244 <TIM_OC2_SetConfig+0x10c>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d003      	beq.n	800c1e4 <TIM_OC2_SetConfig+0xac>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a1a      	ldr	r2, [pc, #104]	; (800c248 <TIM_OC2_SetConfig+0x110>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d113      	bne.n	800c20c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c1ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c1f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	695b      	ldr	r3, [r3, #20]
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	693a      	ldr	r2, [r7, #16]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	699b      	ldr	r3, [r3, #24]
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	693a      	ldr	r2, [r7, #16]
 800c208:	4313      	orrs	r3, r2
 800c20a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	693a      	ldr	r2, [r7, #16]
 800c210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	685a      	ldr	r2, [r3, #4]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	697a      	ldr	r2, [r7, #20]
 800c224:	621a      	str	r2, [r3, #32]
}
 800c226:	bf00      	nop
 800c228:	371c      	adds	r7, #28
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr
 800c232:	bf00      	nop
 800c234:	feff8fff 	.word	0xfeff8fff
 800c238:	40010000 	.word	0x40010000
 800c23c:	40010400 	.word	0x40010400
 800c240:	40014000 	.word	0x40014000
 800c244:	40014400 	.word	0x40014400
 800c248:	40014800 	.word	0x40014800

0800c24c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b087      	sub	sp, #28
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a1b      	ldr	r3, [r3, #32]
 800c25a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6a1b      	ldr	r3, [r3, #32]
 800c266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	69db      	ldr	r3, [r3, #28]
 800c272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	4b33      	ldr	r3, [pc, #204]	; (800c344 <TIM_OC3_SetConfig+0xf8>)
 800c278:	4013      	ands	r3, r2
 800c27a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f023 0303 	bic.w	r3, r3, #3
 800c282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	4313      	orrs	r3, r2
 800c28c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	021b      	lsls	r3, r3, #8
 800c29c:	697a      	ldr	r2, [r7, #20]
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a28      	ldr	r2, [pc, #160]	; (800c348 <TIM_OC3_SetConfig+0xfc>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d003      	beq.n	800c2b2 <TIM_OC3_SetConfig+0x66>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a27      	ldr	r2, [pc, #156]	; (800c34c <TIM_OC3_SetConfig+0x100>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d10d      	bne.n	800c2ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c2b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	021b      	lsls	r3, r3, #8
 800c2c0:	697a      	ldr	r2, [r7, #20]
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c2cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4a1d      	ldr	r2, [pc, #116]	; (800c348 <TIM_OC3_SetConfig+0xfc>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d00f      	beq.n	800c2f6 <TIM_OC3_SetConfig+0xaa>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4a1c      	ldr	r2, [pc, #112]	; (800c34c <TIM_OC3_SetConfig+0x100>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d00b      	beq.n	800c2f6 <TIM_OC3_SetConfig+0xaa>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4a1b      	ldr	r2, [pc, #108]	; (800c350 <TIM_OC3_SetConfig+0x104>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d007      	beq.n	800c2f6 <TIM_OC3_SetConfig+0xaa>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	4a1a      	ldr	r2, [pc, #104]	; (800c354 <TIM_OC3_SetConfig+0x108>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d003      	beq.n	800c2f6 <TIM_OC3_SetConfig+0xaa>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4a19      	ldr	r2, [pc, #100]	; (800c358 <TIM_OC3_SetConfig+0x10c>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d113      	bne.n	800c31e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	695b      	ldr	r3, [r3, #20]
 800c30a:	011b      	lsls	r3, r3, #4
 800c30c:	693a      	ldr	r2, [r7, #16]
 800c30e:	4313      	orrs	r3, r2
 800c310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	699b      	ldr	r3, [r3, #24]
 800c316:	011b      	lsls	r3, r3, #4
 800c318:	693a      	ldr	r2, [r7, #16]
 800c31a:	4313      	orrs	r3, r2
 800c31c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	693a      	ldr	r2, [r7, #16]
 800c322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	68fa      	ldr	r2, [r7, #12]
 800c328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	685a      	ldr	r2, [r3, #4]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	697a      	ldr	r2, [r7, #20]
 800c336:	621a      	str	r2, [r3, #32]
}
 800c338:	bf00      	nop
 800c33a:	371c      	adds	r7, #28
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr
 800c344:	fffeff8f 	.word	0xfffeff8f
 800c348:	40010000 	.word	0x40010000
 800c34c:	40010400 	.word	0x40010400
 800c350:	40014000 	.word	0x40014000
 800c354:	40014400 	.word	0x40014400
 800c358:	40014800 	.word	0x40014800

0800c35c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b087      	sub	sp, #28
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a1b      	ldr	r3, [r3, #32]
 800c36a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6a1b      	ldr	r3, [r3, #32]
 800c376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	69db      	ldr	r3, [r3, #28]
 800c382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	4b24      	ldr	r3, [pc, #144]	; (800c418 <TIM_OC4_SetConfig+0xbc>)
 800c388:	4013      	ands	r3, r2
 800c38a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	021b      	lsls	r3, r3, #8
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	4313      	orrs	r3, r2
 800c39e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c3a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	031b      	lsls	r3, r3, #12
 800c3ae:	693a      	ldr	r2, [r7, #16]
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	4a19      	ldr	r2, [pc, #100]	; (800c41c <TIM_OC4_SetConfig+0xc0>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d00f      	beq.n	800c3dc <TIM_OC4_SetConfig+0x80>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4a18      	ldr	r2, [pc, #96]	; (800c420 <TIM_OC4_SetConfig+0xc4>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d00b      	beq.n	800c3dc <TIM_OC4_SetConfig+0x80>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	4a17      	ldr	r2, [pc, #92]	; (800c424 <TIM_OC4_SetConfig+0xc8>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d007      	beq.n	800c3dc <TIM_OC4_SetConfig+0x80>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4a16      	ldr	r2, [pc, #88]	; (800c428 <TIM_OC4_SetConfig+0xcc>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d003      	beq.n	800c3dc <TIM_OC4_SetConfig+0x80>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4a15      	ldr	r2, [pc, #84]	; (800c42c <TIM_OC4_SetConfig+0xd0>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d109      	bne.n	800c3f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c3e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	695b      	ldr	r3, [r3, #20]
 800c3e8:	019b      	lsls	r3, r3, #6
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	697a      	ldr	r2, [r7, #20]
 800c3f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	685a      	ldr	r2, [r3, #4]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	693a      	ldr	r2, [r7, #16]
 800c408:	621a      	str	r2, [r3, #32]
}
 800c40a:	bf00      	nop
 800c40c:	371c      	adds	r7, #28
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr
 800c416:	bf00      	nop
 800c418:	feff8fff 	.word	0xfeff8fff
 800c41c:	40010000 	.word	0x40010000
 800c420:	40010400 	.word	0x40010400
 800c424:	40014000 	.word	0x40014000
 800c428:	40014400 	.word	0x40014400
 800c42c:	40014800 	.word	0x40014800

0800c430 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c430:	b480      	push	{r7}
 800c432:	b087      	sub	sp, #28
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a1b      	ldr	r3, [r3, #32]
 800c43e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6a1b      	ldr	r3, [r3, #32]
 800c44a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c458:	68fa      	ldr	r2, [r7, #12]
 800c45a:	4b21      	ldr	r3, [pc, #132]	; (800c4e0 <TIM_OC5_SetConfig+0xb0>)
 800c45c:	4013      	ands	r3, r2
 800c45e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	4313      	orrs	r3, r2
 800c468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c470:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	689b      	ldr	r3, [r3, #8]
 800c476:	041b      	lsls	r3, r3, #16
 800c478:	693a      	ldr	r2, [r7, #16]
 800c47a:	4313      	orrs	r3, r2
 800c47c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a18      	ldr	r2, [pc, #96]	; (800c4e4 <TIM_OC5_SetConfig+0xb4>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d00f      	beq.n	800c4a6 <TIM_OC5_SetConfig+0x76>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4a17      	ldr	r2, [pc, #92]	; (800c4e8 <TIM_OC5_SetConfig+0xb8>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d00b      	beq.n	800c4a6 <TIM_OC5_SetConfig+0x76>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a16      	ldr	r2, [pc, #88]	; (800c4ec <TIM_OC5_SetConfig+0xbc>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d007      	beq.n	800c4a6 <TIM_OC5_SetConfig+0x76>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	4a15      	ldr	r2, [pc, #84]	; (800c4f0 <TIM_OC5_SetConfig+0xc0>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d003      	beq.n	800c4a6 <TIM_OC5_SetConfig+0x76>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4a14      	ldr	r2, [pc, #80]	; (800c4f4 <TIM_OC5_SetConfig+0xc4>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d109      	bne.n	800c4ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	695b      	ldr	r3, [r3, #20]
 800c4b2:	021b      	lsls	r3, r3, #8
 800c4b4:	697a      	ldr	r2, [r7, #20]
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	697a      	ldr	r2, [r7, #20]
 800c4be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	68fa      	ldr	r2, [r7, #12]
 800c4c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	685a      	ldr	r2, [r3, #4]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	693a      	ldr	r2, [r7, #16]
 800c4d2:	621a      	str	r2, [r3, #32]
}
 800c4d4:	bf00      	nop
 800c4d6:	371c      	adds	r7, #28
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr
 800c4e0:	fffeff8f 	.word	0xfffeff8f
 800c4e4:	40010000 	.word	0x40010000
 800c4e8:	40010400 	.word	0x40010400
 800c4ec:	40014000 	.word	0x40014000
 800c4f0:	40014400 	.word	0x40014400
 800c4f4:	40014800 	.word	0x40014800

0800c4f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b087      	sub	sp, #28
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6a1b      	ldr	r3, [r3, #32]
 800c506:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6a1b      	ldr	r3, [r3, #32]
 800c512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c520:	68fa      	ldr	r2, [r7, #12]
 800c522:	4b22      	ldr	r3, [pc, #136]	; (800c5ac <TIM_OC6_SetConfig+0xb4>)
 800c524:	4013      	ands	r3, r2
 800c526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	021b      	lsls	r3, r3, #8
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	4313      	orrs	r3, r2
 800c532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c53a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	051b      	lsls	r3, r3, #20
 800c542:	693a      	ldr	r2, [r7, #16]
 800c544:	4313      	orrs	r3, r2
 800c546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	4a19      	ldr	r2, [pc, #100]	; (800c5b0 <TIM_OC6_SetConfig+0xb8>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d00f      	beq.n	800c570 <TIM_OC6_SetConfig+0x78>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	4a18      	ldr	r2, [pc, #96]	; (800c5b4 <TIM_OC6_SetConfig+0xbc>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d00b      	beq.n	800c570 <TIM_OC6_SetConfig+0x78>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	4a17      	ldr	r2, [pc, #92]	; (800c5b8 <TIM_OC6_SetConfig+0xc0>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d007      	beq.n	800c570 <TIM_OC6_SetConfig+0x78>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	4a16      	ldr	r2, [pc, #88]	; (800c5bc <TIM_OC6_SetConfig+0xc4>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d003      	beq.n	800c570 <TIM_OC6_SetConfig+0x78>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	4a15      	ldr	r2, [pc, #84]	; (800c5c0 <TIM_OC6_SetConfig+0xc8>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d109      	bne.n	800c584 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c576:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	695b      	ldr	r3, [r3, #20]
 800c57c:	029b      	lsls	r3, r3, #10
 800c57e:	697a      	ldr	r2, [r7, #20]
 800c580:	4313      	orrs	r3, r2
 800c582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	697a      	ldr	r2, [r7, #20]
 800c588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	68fa      	ldr	r2, [r7, #12]
 800c58e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	685a      	ldr	r2, [r3, #4]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	693a      	ldr	r2, [r7, #16]
 800c59c:	621a      	str	r2, [r3, #32]
}
 800c59e:	bf00      	nop
 800c5a0:	371c      	adds	r7, #28
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr
 800c5aa:	bf00      	nop
 800c5ac:	feff8fff 	.word	0xfeff8fff
 800c5b0:	40010000 	.word	0x40010000
 800c5b4:	40010400 	.word	0x40010400
 800c5b8:	40014000 	.word	0x40014000
 800c5bc:	40014400 	.word	0x40014400
 800c5c0:	40014800 	.word	0x40014800

0800c5c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b087      	sub	sp, #28
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	6a1b      	ldr	r3, [r3, #32]
 800c5d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6a1b      	ldr	r3, [r3, #32]
 800c5da:	f023 0201 	bic.w	r2, r3, #1
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	699b      	ldr	r3, [r3, #24]
 800c5e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c5ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	011b      	lsls	r3, r3, #4
 800c5f4:	693a      	ldr	r2, [r7, #16]
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	f023 030a 	bic.w	r3, r3, #10
 800c600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c602:	697a      	ldr	r2, [r7, #20]
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	4313      	orrs	r3, r2
 800c608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	693a      	ldr	r2, [r7, #16]
 800c60e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	697a      	ldr	r2, [r7, #20]
 800c614:	621a      	str	r2, [r3, #32]
}
 800c616:	bf00      	nop
 800c618:	371c      	adds	r7, #28
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr

0800c622 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c622:	b480      	push	{r7}
 800c624:	b087      	sub	sp, #28
 800c626:	af00      	add	r7, sp, #0
 800c628:	60f8      	str	r0, [r7, #12]
 800c62a:	60b9      	str	r1, [r7, #8]
 800c62c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	6a1b      	ldr	r3, [r3, #32]
 800c632:	f023 0210 	bic.w	r2, r3, #16
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	699b      	ldr	r3, [r3, #24]
 800c63e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6a1b      	ldr	r3, [r3, #32]
 800c644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c64c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	031b      	lsls	r3, r3, #12
 800c652:	697a      	ldr	r2, [r7, #20]
 800c654:	4313      	orrs	r3, r2
 800c656:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c65e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	011b      	lsls	r3, r3, #4
 800c664:	693a      	ldr	r2, [r7, #16]
 800c666:	4313      	orrs	r3, r2
 800c668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	697a      	ldr	r2, [r7, #20]
 800c66e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	693a      	ldr	r2, [r7, #16]
 800c674:	621a      	str	r2, [r3, #32]
}
 800c676:	bf00      	nop
 800c678:	371c      	adds	r7, #28
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr
	...

0800c684 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	4b09      	ldr	r3, [pc, #36]	; (800c6bc <TIM_ITRx_SetConfig+0x38>)
 800c698:	4013      	ands	r3, r2
 800c69a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c69c:	683a      	ldr	r2, [r7, #0]
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	f043 0307 	orr.w	r3, r3, #7
 800c6a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	68fa      	ldr	r2, [r7, #12]
 800c6ac:	609a      	str	r2, [r3, #8]
}
 800c6ae:	bf00      	nop
 800c6b0:	3714      	adds	r7, #20
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop
 800c6bc:	ffcfff8f 	.word	0xffcfff8f

0800c6c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b087      	sub	sp, #28
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	60b9      	str	r1, [r7, #8]
 800c6ca:	607a      	str	r2, [r7, #4]
 800c6cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c6da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	021a      	lsls	r2, r3, #8
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	431a      	orrs	r2, r3
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	697a      	ldr	r2, [r7, #20]
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	697a      	ldr	r2, [r7, #20]
 800c6f2:	609a      	str	r2, [r3, #8]
}
 800c6f4:	bf00      	nop
 800c6f6:	371c      	adds	r7, #28
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c700:	b480      	push	{r7}
 800c702:	b087      	sub	sp, #28
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	60b9      	str	r1, [r7, #8]
 800c70a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	f003 031f 	and.w	r3, r3, #31
 800c712:	2201      	movs	r2, #1
 800c714:	fa02 f303 	lsl.w	r3, r2, r3
 800c718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	6a1a      	ldr	r2, [r3, #32]
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	43db      	mvns	r3, r3
 800c722:	401a      	ands	r2, r3
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6a1a      	ldr	r2, [r3, #32]
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	f003 031f 	and.w	r3, r3, #31
 800c732:	6879      	ldr	r1, [r7, #4]
 800c734:	fa01 f303 	lsl.w	r3, r1, r3
 800c738:	431a      	orrs	r2, r3
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	621a      	str	r2, [r3, #32]
}
 800c73e:	bf00      	nop
 800c740:	371c      	adds	r7, #28
 800c742:	46bd      	mov	sp, r7
 800c744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c748:	4770      	bx	lr
	...

0800c74c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b085      	sub	sp, #20
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d101      	bne.n	800c764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c760:	2302      	movs	r3, #2
 800c762:	e077      	b.n	800c854 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2202      	movs	r2, #2
 800c770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a35      	ldr	r2, [pc, #212]	; (800c860 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d004      	beq.n	800c798 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4a34      	ldr	r2, [pc, #208]	; (800c864 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d108      	bne.n	800c7aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c79e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	68fa      	ldr	r2, [r7, #12]
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	68fa      	ldr	r2, [r7, #12]
 800c7c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4a25      	ldr	r2, [pc, #148]	; (800c860 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d02c      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7d6:	d027      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a22      	ldr	r2, [pc, #136]	; (800c868 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d022      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4a21      	ldr	r2, [pc, #132]	; (800c86c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d01d      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a1f      	ldr	r2, [pc, #124]	; (800c870 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d018      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a1a      	ldr	r2, [pc, #104]	; (800c864 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d013      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a1b      	ldr	r2, [pc, #108]	; (800c874 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d00e      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a1a      	ldr	r2, [pc, #104]	; (800c878 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d009      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a18      	ldr	r2, [pc, #96]	; (800c87c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d004      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a17      	ldr	r2, [pc, #92]	; (800c880 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d10c      	bne.n	800c842 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c82e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	68ba      	ldr	r2, [r7, #8]
 800c836:	4313      	orrs	r3, r2
 800c838:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	68ba      	ldr	r2, [r7, #8]
 800c840:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2201      	movs	r2, #1
 800c846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c852:	2300      	movs	r3, #0
}
 800c854:	4618      	mov	r0, r3
 800c856:	3714      	adds	r7, #20
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr
 800c860:	40010000 	.word	0x40010000
 800c864:	40010400 	.word	0x40010400
 800c868:	40000400 	.word	0x40000400
 800c86c:	40000800 	.word	0x40000800
 800c870:	40000c00 	.word	0x40000c00
 800c874:	40001800 	.word	0x40001800
 800c878:	40014000 	.word	0x40014000
 800c87c:	4000e000 	.word	0x4000e000
 800c880:	4000e400 	.word	0x4000e400

0800c884 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c88e:	2300      	movs	r3, #0
 800c890:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d101      	bne.n	800c8a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c89c:	2302      	movs	r3, #2
 800c89e:	e087      	b.n	800c9b0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	691b      	ldr	r3, [r3, #16]
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	695b      	ldr	r3, [r3, #20]
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c906:	4313      	orrs	r3, r2
 800c908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	699b      	ldr	r3, [r3, #24]
 800c914:	041b      	lsls	r3, r3, #16
 800c916:	4313      	orrs	r3, r2
 800c918:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a27      	ldr	r2, [pc, #156]	; (800c9bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d004      	beq.n	800c92e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a25      	ldr	r2, [pc, #148]	; (800c9c0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d106      	bne.n	800c93c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	69db      	ldr	r3, [r3, #28]
 800c938:	4313      	orrs	r3, r2
 800c93a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a1e      	ldr	r2, [pc, #120]	; (800c9bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d004      	beq.n	800c950 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a1d      	ldr	r2, [pc, #116]	; (800c9c0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d126      	bne.n	800c99e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c95a:	051b      	lsls	r3, r3, #20
 800c95c:	4313      	orrs	r3, r2
 800c95e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	6a1b      	ldr	r3, [r3, #32]
 800c96a:	4313      	orrs	r3, r2
 800c96c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c978:	4313      	orrs	r3, r2
 800c97a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a0e      	ldr	r2, [pc, #56]	; (800c9bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d004      	beq.n	800c990 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4a0d      	ldr	r2, [pc, #52]	; (800c9c0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d106      	bne.n	800c99e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c99a:	4313      	orrs	r3, r2
 800c99c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9ae:	2300      	movs	r3, #0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3714      	adds	r7, #20
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr
 800c9bc:	40010000 	.word	0x40010000
 800c9c0:	40010400 	.word	0x40010400

0800c9c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c9cc:	bf00      	nop
 800c9ce:	370c      	adds	r7, #12
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c9e0:	bf00      	nop
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c9f4:	bf00      	nop
 800c9f6:	370c      	adds	r7, #12
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d101      	bne.n	800ca12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca0e:	2301      	movs	r3, #1
 800ca10:	e042      	b.n	800ca98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d106      	bne.n	800ca2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f7f8 f85d 	bl	8004ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2224      	movs	r2, #36	; 0x24
 800ca2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f022 0201 	bic.w	r2, r2, #1
 800ca40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 fd1c 	bl	800d480 <UART_SetConfig>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d101      	bne.n	800ca52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e022      	b.n	800ca98 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d002      	beq.n	800ca60 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f001 fb7c 	bl	800e158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	685a      	ldr	r2, [r3, #4]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ca6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	689a      	ldr	r2, [r3, #8]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ca7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f042 0201 	orr.w	r2, r2, #1
 800ca8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f001 fc03 	bl	800e29c <UART_CheckIdleState>
 800ca96:	4603      	mov	r3, r0
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b082      	sub	sp, #8
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d101      	bne.n	800cab2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800caae:	2301      	movs	r3, #1
 800cab0:	e031      	b.n	800cb16 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2224      	movs	r2, #36	; 0x24
 800cab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	681a      	ldr	r2, [r3, #0]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f022 0201 	bic.w	r2, r2, #1
 800cac8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	2200      	movs	r2, #0
 800cad0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	2200      	movs	r2, #0
 800cad8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2200      	movs	r2, #0
 800cae0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f7f8 f8d6 	bl	8004c94 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2200      	movs	r2, #0
 800caec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2200      	movs	r2, #0
 800cafc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cb14:	2300      	movs	r3, #0
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3708      	adds	r7, #8
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
	...

0800cb20 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b08a      	sub	sp, #40	; 0x28
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	4613      	mov	r3, r2
 800cb2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb34:	2b20      	cmp	r3, #32
 800cb36:	d167      	bne.n	800cc08 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d002      	beq.n	800cb44 <HAL_UART_Transmit_DMA+0x24>
 800cb3e:	88fb      	ldrh	r3, [r7, #6]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d101      	bne.n	800cb48 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800cb44:	2301      	movs	r3, #1
 800cb46:	e060      	b.n	800cc0a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	68ba      	ldr	r2, [r7, #8]
 800cb4c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	88fa      	ldrh	r2, [r7, #6]
 800cb52:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	88fa      	ldrh	r2, [r7, #6]
 800cb5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2200      	movs	r2, #0
 800cb62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2221      	movs	r2, #33	; 0x21
 800cb6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d028      	beq.n	800cbc8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb7a:	4a26      	ldr	r2, [pc, #152]	; (800cc14 <HAL_UART_Transmit_DMA+0xf4>)
 800cb7c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb82:	4a25      	ldr	r2, [pc, #148]	; (800cc18 <HAL_UART_Transmit_DMA+0xf8>)
 800cb84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb8a:	4a24      	ldr	r2, [pc, #144]	; (800cc1c <HAL_UART_Transmit_DMA+0xfc>)
 800cb8c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb92:	2200      	movs	r2, #0
 800cb94:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb9e:	4619      	mov	r1, r3
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	3328      	adds	r3, #40	; 0x28
 800cba6:	461a      	mov	r2, r3
 800cba8:	88fb      	ldrh	r3, [r7, #6]
 800cbaa:	f7f8 ffaf 	bl	8005b0c <HAL_DMA_Start_IT>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d009      	beq.n	800cbc8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2210      	movs	r2, #16
 800cbb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2220      	movs	r2, #32
 800cbc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e020      	b.n	800cc0a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2240      	movs	r2, #64	; 0x40
 800cbce:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	3308      	adds	r3, #8
 800cbd6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	e853 3f00 	ldrex	r3, [r3]
 800cbde:	613b      	str	r3, [r7, #16]
   return(result);
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbe6:	627b      	str	r3, [r7, #36]	; 0x24
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	3308      	adds	r3, #8
 800cbee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbf0:	623a      	str	r2, [r7, #32]
 800cbf2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbf4:	69f9      	ldr	r1, [r7, #28]
 800cbf6:	6a3a      	ldr	r2, [r7, #32]
 800cbf8:	e841 2300 	strex	r3, r2, [r1]
 800cbfc:	61bb      	str	r3, [r7, #24]
   return(result);
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d1e5      	bne.n	800cbd0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800cc04:	2300      	movs	r3, #0
 800cc06:	e000      	b.n	800cc0a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800cc08:	2302      	movs	r3, #2
  }
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3728      	adds	r7, #40	; 0x28
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	0800e75d 	.word	0x0800e75d
 800cc18:	0800e7f3 	.word	0x0800e7f3
 800cc1c:	0800e975 	.word	0x0800e975

0800cc20 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b08a      	sub	sp, #40	; 0x28
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc34:	2b20      	cmp	r3, #32
 800cc36:	d137      	bne.n	800cca8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d002      	beq.n	800cc44 <HAL_UART_Receive_DMA+0x24>
 800cc3e:	88fb      	ldrh	r3, [r7, #6]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d101      	bne.n	800cc48 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cc44:	2301      	movs	r3, #1
 800cc46:	e030      	b.n	800ccaa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a18      	ldr	r2, [pc, #96]	; (800ccb4 <HAL_UART_Receive_DMA+0x94>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d01f      	beq.n	800cc98 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d018      	beq.n	800cc98 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	e853 3f00 	ldrex	r3, [r3]
 800cc72:	613b      	str	r3, [r7, #16]
   return(result);
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cc7a:	627b      	str	r3, [r7, #36]	; 0x24
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	461a      	mov	r2, r3
 800cc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc84:	623b      	str	r3, [r7, #32]
 800cc86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc88:	69f9      	ldr	r1, [r7, #28]
 800cc8a:	6a3a      	ldr	r2, [r7, #32]
 800cc8c:	e841 2300 	strex	r3, r2, [r1]
 800cc90:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc92:	69bb      	ldr	r3, [r7, #24]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d1e6      	bne.n	800cc66 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cc98:	88fb      	ldrh	r3, [r7, #6]
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	68b9      	ldr	r1, [r7, #8]
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	f001 fc0e 	bl	800e4c0 <UART_Start_Receive_DMA>
 800cca4:	4603      	mov	r3, r0
 800cca6:	e000      	b.n	800ccaa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cca8:	2302      	movs	r3, #2
  }
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3728      	adds	r7, #40	; 0x28
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}
 800ccb2:	bf00      	nop
 800ccb4:	58000c00 	.word	0x58000c00

0800ccb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b0ba      	sub	sp, #232	; 0xe8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	69db      	ldr	r3, [r3, #28]
 800ccc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ccde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cce2:	f640 030f 	movw	r3, #2063	; 0x80f
 800cce6:	4013      	ands	r3, r2
 800cce8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ccec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d11b      	bne.n	800cd2c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ccf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccf8:	f003 0320 	and.w	r3, r3, #32
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d015      	beq.n	800cd2c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd04:	f003 0320 	and.w	r3, r3, #32
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d105      	bne.n	800cd18 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cd0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d009      	beq.n	800cd2c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f000 8377 	beq.w	800d410 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	4798      	blx	r3
      }
      return;
 800cd2a:	e371      	b.n	800d410 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cd2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	f000 8123 	beq.w	800cf7c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cd36:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cd3a:	4b8d      	ldr	r3, [pc, #564]	; (800cf70 <HAL_UART_IRQHandler+0x2b8>)
 800cd3c:	4013      	ands	r3, r2
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d106      	bne.n	800cd50 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cd42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cd46:	4b8b      	ldr	r3, [pc, #556]	; (800cf74 <HAL_UART_IRQHandler+0x2bc>)
 800cd48:	4013      	ands	r3, r2
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	f000 8116 	beq.w	800cf7c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cd50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd54:	f003 0301 	and.w	r3, r3, #1
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d011      	beq.n	800cd80 <HAL_UART_IRQHandler+0xc8>
 800cd5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d00b      	beq.n	800cd80 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd76:	f043 0201 	orr.w	r2, r3, #1
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd84:	f003 0302 	and.w	r3, r3, #2
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d011      	beq.n	800cdb0 <HAL_UART_IRQHandler+0xf8>
 800cd8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd90:	f003 0301 	and.w	r3, r3, #1
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d00b      	beq.n	800cdb0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2202      	movs	r2, #2
 800cd9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cda6:	f043 0204 	orr.w	r2, r3, #4
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cdb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdb4:	f003 0304 	and.w	r3, r3, #4
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d011      	beq.n	800cde0 <HAL_UART_IRQHandler+0x128>
 800cdbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cdc0:	f003 0301 	and.w	r3, r3, #1
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d00b      	beq.n	800cde0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2204      	movs	r2, #4
 800cdce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdd6:	f043 0202 	orr.w	r2, r3, #2
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cde0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cde4:	f003 0308 	and.w	r3, r3, #8
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d017      	beq.n	800ce1c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cdec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cdf0:	f003 0320 	and.w	r3, r3, #32
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d105      	bne.n	800ce04 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cdf8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cdfc:	4b5c      	ldr	r3, [pc, #368]	; (800cf70 <HAL_UART_IRQHandler+0x2b8>)
 800cdfe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d00b      	beq.n	800ce1c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2208      	movs	r2, #8
 800ce0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce12:	f043 0208 	orr.w	r2, r3, #8
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ce1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d012      	beq.n	800ce4e <HAL_UART_IRQHandler+0x196>
 800ce28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d00c      	beq.n	800ce4e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce44:	f043 0220 	orr.w	r2, r3, #32
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f000 82dd 	beq.w	800d414 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ce5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce5e:	f003 0320 	and.w	r3, r3, #32
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d013      	beq.n	800ce8e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ce66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce6a:	f003 0320 	and.w	r3, r3, #32
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d105      	bne.n	800ce7e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ce72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d007      	beq.n	800ce8e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d003      	beq.n	800ce8e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	689b      	ldr	r3, [r3, #8]
 800ce9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cea2:	2b40      	cmp	r3, #64	; 0x40
 800cea4:	d005      	beq.n	800ceb2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ceaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d054      	beq.n	800cf5c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f001 fbec 	bl	800e690 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	689b      	ldr	r3, [r3, #8]
 800cebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cec2:	2b40      	cmp	r3, #64	; 0x40
 800cec4:	d146      	bne.n	800cf54 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	3308      	adds	r3, #8
 800cecc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ced0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ced4:	e853 3f00 	ldrex	r3, [r3]
 800ced8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cedc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	3308      	adds	r3, #8
 800ceee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cef2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cefa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cefe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cf02:	e841 2300 	strex	r3, r2, [r1]
 800cf06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cf0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d1d9      	bne.n	800cec6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d017      	beq.n	800cf4c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf22:	4a15      	ldr	r2, [pc, #84]	; (800cf78 <HAL_UART_IRQHandler+0x2c0>)
 800cf24:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7f9 fb75 	bl	800661c <HAL_DMA_Abort_IT>
 800cf32:	4603      	mov	r3, r0
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d019      	beq.n	800cf6c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800cf46:	4610      	mov	r0, r2
 800cf48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf4a:	e00f      	b.n	800cf6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f7f4 fa89 	bl	8001464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf52:	e00b      	b.n	800cf6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f7f4 fa85 	bl	8001464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf5a:	e007      	b.n	800cf6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f7f4 fa81 	bl	8001464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2200      	movs	r2, #0
 800cf66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800cf6a:	e253      	b.n	800d414 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf6c:	bf00      	nop
    return;
 800cf6e:	e251      	b.n	800d414 <HAL_UART_IRQHandler+0x75c>
 800cf70:	10000001 	.word	0x10000001
 800cf74:	04000120 	.word	0x04000120
 800cf78:	0800e9f5 	.word	0x0800e9f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	f040 81e7 	bne.w	800d354 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cf86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf8a:	f003 0310 	and.w	r3, r3, #16
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	f000 81e0 	beq.w	800d354 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cf94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf98:	f003 0310 	and.w	r3, r3, #16
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	f000 81d9 	beq.w	800d354 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2210      	movs	r2, #16
 800cfa8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	689b      	ldr	r3, [r3, #8]
 800cfb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfb4:	2b40      	cmp	r3, #64	; 0x40
 800cfb6:	f040 8151 	bne.w	800d25c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4a96      	ldr	r2, [pc, #600]	; (800d21c <HAL_UART_IRQHandler+0x564>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d068      	beq.n	800d09a <HAL_UART_IRQHandler+0x3e2>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4a93      	ldr	r2, [pc, #588]	; (800d220 <HAL_UART_IRQHandler+0x568>)
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d061      	beq.n	800d09a <HAL_UART_IRQHandler+0x3e2>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a91      	ldr	r2, [pc, #580]	; (800d224 <HAL_UART_IRQHandler+0x56c>)
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d05a      	beq.n	800d09a <HAL_UART_IRQHandler+0x3e2>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a8e      	ldr	r2, [pc, #568]	; (800d228 <HAL_UART_IRQHandler+0x570>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d053      	beq.n	800d09a <HAL_UART_IRQHandler+0x3e2>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4a8c      	ldr	r2, [pc, #560]	; (800d22c <HAL_UART_IRQHandler+0x574>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d04c      	beq.n	800d09a <HAL_UART_IRQHandler+0x3e2>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a89      	ldr	r2, [pc, #548]	; (800d230 <HAL_UART_IRQHandler+0x578>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d045      	beq.n	800d09a <HAL_UART_IRQHandler+0x3e2>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	4a87      	ldr	r2, [pc, #540]	; (800d234 <HAL_UART_IRQHandler+0x57c>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d03e      	beq.n	800d09a <HAL_UART_IRQHandler+0x3e2>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a84      	ldr	r2, [pc, #528]	; (800d238 <HAL_UART_IRQHandler+0x580>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d037      	beq.n	800d09a <HAL_UART_IRQHandler+0x3e2>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4a82      	ldr	r2, [pc, #520]	; (800d23c <HAL_UART_IRQHandler+0x584>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d030      	beq.n	800d09a <HAL_UART_IRQHandler+0x3e2>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4a7f      	ldr	r2, [pc, #508]	; (800d240 <HAL_UART_IRQHandler+0x588>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d029      	beq.n	800d09a <HAL_UART_IRQHandler+0x3e2>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	4a7d      	ldr	r2, [pc, #500]	; (800d244 <HAL_UART_IRQHandler+0x58c>)
 800d050:	4293      	cmp	r3, r2
 800d052:	d022      	beq.n	800d09a <HAL_UART_IRQHandler+0x3e2>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a7a      	ldr	r2, [pc, #488]	; (800d248 <HAL_UART_IRQHandler+0x590>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d01b      	beq.n	800d09a <HAL_UART_IRQHandler+0x3e2>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a78      	ldr	r2, [pc, #480]	; (800d24c <HAL_UART_IRQHandler+0x594>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d014      	beq.n	800d09a <HAL_UART_IRQHandler+0x3e2>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a75      	ldr	r2, [pc, #468]	; (800d250 <HAL_UART_IRQHandler+0x598>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d00d      	beq.n	800d09a <HAL_UART_IRQHandler+0x3e2>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	4a73      	ldr	r2, [pc, #460]	; (800d254 <HAL_UART_IRQHandler+0x59c>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d006      	beq.n	800d09a <HAL_UART_IRQHandler+0x3e2>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a70      	ldr	r2, [pc, #448]	; (800d258 <HAL_UART_IRQHandler+0x5a0>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d106      	bne.n	800d0a8 <HAL_UART_IRQHandler+0x3f0>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	e005      	b.n	800d0b4 <HAL_UART_IRQHandler+0x3fc>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	b29b      	uxth	r3, r3
 800d0b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d0b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	f000 81ab 	beq.w	800d418 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d0c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	f080 81a3 	bcs.w	800d418 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d0d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0e2:	69db      	ldr	r3, [r3, #28]
 800d0e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0e8:	f000 8087 	beq.w	800d1fa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d0f8:	e853 3f00 	ldrex	r3, [r3]
 800d0fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d100:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d108:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	461a      	mov	r2, r3
 800d112:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d116:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d11a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d11e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d122:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d126:	e841 2300 	strex	r3, r2, [r1]
 800d12a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d12e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d132:	2b00      	cmp	r3, #0
 800d134:	d1da      	bne.n	800d0ec <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	3308      	adds	r3, #8
 800d13c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d13e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d140:	e853 3f00 	ldrex	r3, [r3]
 800d144:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d146:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d148:	f023 0301 	bic.w	r3, r3, #1
 800d14c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	3308      	adds	r3, #8
 800d156:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d15a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d15e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d160:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d162:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d166:	e841 2300 	strex	r3, r2, [r1]
 800d16a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d16c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d1e1      	bne.n	800d136 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	3308      	adds	r3, #8
 800d178:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d17c:	e853 3f00 	ldrex	r3, [r3]
 800d180:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d188:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	3308      	adds	r3, #8
 800d192:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d196:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d198:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d19a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d19c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d19e:	e841 2300 	strex	r3, r2, [r1]
 800d1a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d1a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d1e3      	bne.n	800d172 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2220      	movs	r2, #32
 800d1ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1c0:	e853 3f00 	ldrex	r3, [r3]
 800d1c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d1c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1c8:	f023 0310 	bic.w	r3, r3, #16
 800d1cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d1da:	65bb      	str	r3, [r7, #88]	; 0x58
 800d1dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d1e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1e2:	e841 2300 	strex	r3, r2, [r1]
 800d1e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d1e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d1e4      	bne.n	800d1b8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7f8 fef3 	bl	8005fe0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2202      	movs	r2, #2
 800d1fe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	1ad3      	subs	r3, r2, r3
 800d210:	b29b      	uxth	r3, r3
 800d212:	4619      	mov	r1, r3
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 f927 	bl	800d468 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d21a:	e0fd      	b.n	800d418 <HAL_UART_IRQHandler+0x760>
 800d21c:	40020010 	.word	0x40020010
 800d220:	40020028 	.word	0x40020028
 800d224:	40020040 	.word	0x40020040
 800d228:	40020058 	.word	0x40020058
 800d22c:	40020070 	.word	0x40020070
 800d230:	40020088 	.word	0x40020088
 800d234:	400200a0 	.word	0x400200a0
 800d238:	400200b8 	.word	0x400200b8
 800d23c:	40020410 	.word	0x40020410
 800d240:	40020428 	.word	0x40020428
 800d244:	40020440 	.word	0x40020440
 800d248:	40020458 	.word	0x40020458
 800d24c:	40020470 	.word	0x40020470
 800d250:	40020488 	.word	0x40020488
 800d254:	400204a0 	.word	0x400204a0
 800d258:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d268:	b29b      	uxth	r3, r3
 800d26a:	1ad3      	subs	r3, r2, r3
 800d26c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d276:	b29b      	uxth	r3, r3
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f000 80cf 	beq.w	800d41c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d27e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d282:	2b00      	cmp	r3, #0
 800d284:	f000 80ca 	beq.w	800d41c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d290:	e853 3f00 	ldrex	r3, [r3]
 800d294:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d298:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d29c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d2aa:	647b      	str	r3, [r7, #68]	; 0x44
 800d2ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d2b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2b2:	e841 2300 	strex	r3, r2, [r1]
 800d2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d1e4      	bne.n	800d288 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	3308      	adds	r3, #8
 800d2c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c8:	e853 3f00 	ldrex	r3, [r3]
 800d2cc:	623b      	str	r3, [r7, #32]
   return(result);
 800d2ce:	6a3a      	ldr	r2, [r7, #32]
 800d2d0:	4b55      	ldr	r3, [pc, #340]	; (800d428 <HAL_UART_IRQHandler+0x770>)
 800d2d2:	4013      	ands	r3, r2
 800d2d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	3308      	adds	r3, #8
 800d2de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d2e2:	633a      	str	r2, [r7, #48]	; 0x30
 800d2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d2e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2ea:	e841 2300 	strex	r3, r2, [r1]
 800d2ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d1e3      	bne.n	800d2be <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2220      	movs	r2, #32
 800d2fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2200      	movs	r2, #0
 800d302:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2200      	movs	r2, #0
 800d308:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	e853 3f00 	ldrex	r3, [r3]
 800d316:	60fb      	str	r3, [r7, #12]
   return(result);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f023 0310 	bic.w	r3, r3, #16
 800d31e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	461a      	mov	r2, r3
 800d328:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d32c:	61fb      	str	r3, [r7, #28]
 800d32e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d330:	69b9      	ldr	r1, [r7, #24]
 800d332:	69fa      	ldr	r2, [r7, #28]
 800d334:	e841 2300 	strex	r3, r2, [r1]
 800d338:	617b      	str	r3, [r7, #20]
   return(result);
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d1e4      	bne.n	800d30a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2202      	movs	r2, #2
 800d344:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d346:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d34a:	4619      	mov	r1, r3
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 f88b 	bl	800d468 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d352:	e063      	b.n	800d41c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d00e      	beq.n	800d37e <HAL_UART_IRQHandler+0x6c6>
 800d360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d008      	beq.n	800d37e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d374:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f001 fb7d 	bl	800ea76 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d37c:	e051      	b.n	800d422 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d37e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d386:	2b00      	cmp	r3, #0
 800d388:	d014      	beq.n	800d3b4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d38a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d392:	2b00      	cmp	r3, #0
 800d394:	d105      	bne.n	800d3a2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d39a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d008      	beq.n	800d3b4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d03a      	beq.n	800d420 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	4798      	blx	r3
    }
    return;
 800d3b2:	e035      	b.n	800d420 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d3b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d009      	beq.n	800d3d4 <HAL_UART_IRQHandler+0x71c>
 800d3c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d003      	beq.n	800d3d4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f001 fb27 	bl	800ea20 <UART_EndTransmit_IT>
    return;
 800d3d2:	e026      	b.n	800d422 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d3d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d009      	beq.n	800d3f4 <HAL_UART_IRQHandler+0x73c>
 800d3e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d003      	beq.n	800d3f4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f001 fb56 	bl	800ea9e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d3f2:	e016      	b.n	800d422 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d010      	beq.n	800d422 <HAL_UART_IRQHandler+0x76a>
 800d400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d404:	2b00      	cmp	r3, #0
 800d406:	da0c      	bge.n	800d422 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f001 fb3e 	bl	800ea8a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d40e:	e008      	b.n	800d422 <HAL_UART_IRQHandler+0x76a>
      return;
 800d410:	bf00      	nop
 800d412:	e006      	b.n	800d422 <HAL_UART_IRQHandler+0x76a>
    return;
 800d414:	bf00      	nop
 800d416:	e004      	b.n	800d422 <HAL_UART_IRQHandler+0x76a>
      return;
 800d418:	bf00      	nop
 800d41a:	e002      	b.n	800d422 <HAL_UART_IRQHandler+0x76a>
      return;
 800d41c:	bf00      	nop
 800d41e:	e000      	b.n	800d422 <HAL_UART_IRQHandler+0x76a>
    return;
 800d420:	bf00      	nop
  }
}
 800d422:	37e8      	adds	r7, #232	; 0xe8
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}
 800d428:	effffffe 	.word	0xeffffffe

0800d42c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d434:	bf00      	nop
 800d436:	370c      	adds	r7, #12
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr

0800d440 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d448:	bf00      	nop
 800d44a:	370c      	adds	r7, #12
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d454:	b480      	push	{r7}
 800d456:	b083      	sub	sp, #12
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d45c:	bf00      	nop
 800d45e:	370c      	adds	r7, #12
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr

0800d468 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	460b      	mov	r3, r1
 800d472:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d474:	bf00      	nop
 800d476:	370c      	adds	r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d484:	b092      	sub	sp, #72	; 0x48
 800d486:	af00      	add	r7, sp, #0
 800d488:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d48a:	2300      	movs	r3, #0
 800d48c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	689a      	ldr	r2, [r3, #8]
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	691b      	ldr	r3, [r3, #16]
 800d498:	431a      	orrs	r2, r3
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	695b      	ldr	r3, [r3, #20]
 800d49e:	431a      	orrs	r2, r3
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	69db      	ldr	r3, [r3, #28]
 800d4a4:	4313      	orrs	r3, r2
 800d4a6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	681a      	ldr	r2, [r3, #0]
 800d4ae:	4bbe      	ldr	r3, [pc, #760]	; (800d7a8 <UART_SetConfig+0x328>)
 800d4b0:	4013      	ands	r3, r2
 800d4b2:	697a      	ldr	r2, [r7, #20]
 800d4b4:	6812      	ldr	r2, [r2, #0]
 800d4b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4b8:	430b      	orrs	r3, r1
 800d4ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	68da      	ldr	r2, [r3, #12]
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	430a      	orrs	r2, r1
 800d4d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	699b      	ldr	r3, [r3, #24]
 800d4d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	4ab3      	ldr	r2, [pc, #716]	; (800d7ac <UART_SetConfig+0x32c>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d004      	beq.n	800d4ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	6a1b      	ldr	r3, [r3, #32]
 800d4e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	689a      	ldr	r2, [r3, #8]
 800d4f2:	4baf      	ldr	r3, [pc, #700]	; (800d7b0 <UART_SetConfig+0x330>)
 800d4f4:	4013      	ands	r3, r2
 800d4f6:	697a      	ldr	r2, [r7, #20]
 800d4f8:	6812      	ldr	r2, [r2, #0]
 800d4fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4fc:	430b      	orrs	r3, r1
 800d4fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d506:	f023 010f 	bic.w	r1, r3, #15
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	430a      	orrs	r2, r1
 800d514:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4aa6      	ldr	r2, [pc, #664]	; (800d7b4 <UART_SetConfig+0x334>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d177      	bne.n	800d610 <UART_SetConfig+0x190>
 800d520:	4ba5      	ldr	r3, [pc, #660]	; (800d7b8 <UART_SetConfig+0x338>)
 800d522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d524:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d528:	2b28      	cmp	r3, #40	; 0x28
 800d52a:	d86d      	bhi.n	800d608 <UART_SetConfig+0x188>
 800d52c:	a201      	add	r2, pc, #4	; (adr r2, 800d534 <UART_SetConfig+0xb4>)
 800d52e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d532:	bf00      	nop
 800d534:	0800d5d9 	.word	0x0800d5d9
 800d538:	0800d609 	.word	0x0800d609
 800d53c:	0800d609 	.word	0x0800d609
 800d540:	0800d609 	.word	0x0800d609
 800d544:	0800d609 	.word	0x0800d609
 800d548:	0800d609 	.word	0x0800d609
 800d54c:	0800d609 	.word	0x0800d609
 800d550:	0800d609 	.word	0x0800d609
 800d554:	0800d5e1 	.word	0x0800d5e1
 800d558:	0800d609 	.word	0x0800d609
 800d55c:	0800d609 	.word	0x0800d609
 800d560:	0800d609 	.word	0x0800d609
 800d564:	0800d609 	.word	0x0800d609
 800d568:	0800d609 	.word	0x0800d609
 800d56c:	0800d609 	.word	0x0800d609
 800d570:	0800d609 	.word	0x0800d609
 800d574:	0800d5e9 	.word	0x0800d5e9
 800d578:	0800d609 	.word	0x0800d609
 800d57c:	0800d609 	.word	0x0800d609
 800d580:	0800d609 	.word	0x0800d609
 800d584:	0800d609 	.word	0x0800d609
 800d588:	0800d609 	.word	0x0800d609
 800d58c:	0800d609 	.word	0x0800d609
 800d590:	0800d609 	.word	0x0800d609
 800d594:	0800d5f1 	.word	0x0800d5f1
 800d598:	0800d609 	.word	0x0800d609
 800d59c:	0800d609 	.word	0x0800d609
 800d5a0:	0800d609 	.word	0x0800d609
 800d5a4:	0800d609 	.word	0x0800d609
 800d5a8:	0800d609 	.word	0x0800d609
 800d5ac:	0800d609 	.word	0x0800d609
 800d5b0:	0800d609 	.word	0x0800d609
 800d5b4:	0800d5f9 	.word	0x0800d5f9
 800d5b8:	0800d609 	.word	0x0800d609
 800d5bc:	0800d609 	.word	0x0800d609
 800d5c0:	0800d609 	.word	0x0800d609
 800d5c4:	0800d609 	.word	0x0800d609
 800d5c8:	0800d609 	.word	0x0800d609
 800d5cc:	0800d609 	.word	0x0800d609
 800d5d0:	0800d609 	.word	0x0800d609
 800d5d4:	0800d601 	.word	0x0800d601
 800d5d8:	2301      	movs	r3, #1
 800d5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5de:	e326      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d5e0:	2304      	movs	r3, #4
 800d5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5e6:	e322      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d5e8:	2308      	movs	r3, #8
 800d5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ee:	e31e      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d5f0:	2310      	movs	r3, #16
 800d5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5f6:	e31a      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d5f8:	2320      	movs	r3, #32
 800d5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5fe:	e316      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d600:	2340      	movs	r3, #64	; 0x40
 800d602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d606:	e312      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d608:	2380      	movs	r3, #128	; 0x80
 800d60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d60e:	e30e      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4a69      	ldr	r2, [pc, #420]	; (800d7bc <UART_SetConfig+0x33c>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d130      	bne.n	800d67c <UART_SetConfig+0x1fc>
 800d61a:	4b67      	ldr	r3, [pc, #412]	; (800d7b8 <UART_SetConfig+0x338>)
 800d61c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d61e:	f003 0307 	and.w	r3, r3, #7
 800d622:	2b05      	cmp	r3, #5
 800d624:	d826      	bhi.n	800d674 <UART_SetConfig+0x1f4>
 800d626:	a201      	add	r2, pc, #4	; (adr r2, 800d62c <UART_SetConfig+0x1ac>)
 800d628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d62c:	0800d645 	.word	0x0800d645
 800d630:	0800d64d 	.word	0x0800d64d
 800d634:	0800d655 	.word	0x0800d655
 800d638:	0800d65d 	.word	0x0800d65d
 800d63c:	0800d665 	.word	0x0800d665
 800d640:	0800d66d 	.word	0x0800d66d
 800d644:	2300      	movs	r3, #0
 800d646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d64a:	e2f0      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d64c:	2304      	movs	r3, #4
 800d64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d652:	e2ec      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d654:	2308      	movs	r3, #8
 800d656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d65a:	e2e8      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d65c:	2310      	movs	r3, #16
 800d65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d662:	e2e4      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d664:	2320      	movs	r3, #32
 800d666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d66a:	e2e0      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d66c:	2340      	movs	r3, #64	; 0x40
 800d66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d672:	e2dc      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d674:	2380      	movs	r3, #128	; 0x80
 800d676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d67a:	e2d8      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4a4f      	ldr	r2, [pc, #316]	; (800d7c0 <UART_SetConfig+0x340>)
 800d682:	4293      	cmp	r3, r2
 800d684:	d130      	bne.n	800d6e8 <UART_SetConfig+0x268>
 800d686:	4b4c      	ldr	r3, [pc, #304]	; (800d7b8 <UART_SetConfig+0x338>)
 800d688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d68a:	f003 0307 	and.w	r3, r3, #7
 800d68e:	2b05      	cmp	r3, #5
 800d690:	d826      	bhi.n	800d6e0 <UART_SetConfig+0x260>
 800d692:	a201      	add	r2, pc, #4	; (adr r2, 800d698 <UART_SetConfig+0x218>)
 800d694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d698:	0800d6b1 	.word	0x0800d6b1
 800d69c:	0800d6b9 	.word	0x0800d6b9
 800d6a0:	0800d6c1 	.word	0x0800d6c1
 800d6a4:	0800d6c9 	.word	0x0800d6c9
 800d6a8:	0800d6d1 	.word	0x0800d6d1
 800d6ac:	0800d6d9 	.word	0x0800d6d9
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6b6:	e2ba      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d6b8:	2304      	movs	r3, #4
 800d6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6be:	e2b6      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d6c0:	2308      	movs	r3, #8
 800d6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6c6:	e2b2      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d6c8:	2310      	movs	r3, #16
 800d6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ce:	e2ae      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d6d0:	2320      	movs	r3, #32
 800d6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6d6:	e2aa      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d6d8:	2340      	movs	r3, #64	; 0x40
 800d6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6de:	e2a6      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d6e0:	2380      	movs	r3, #128	; 0x80
 800d6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6e6:	e2a2      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4a35      	ldr	r2, [pc, #212]	; (800d7c4 <UART_SetConfig+0x344>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d130      	bne.n	800d754 <UART_SetConfig+0x2d4>
 800d6f2:	4b31      	ldr	r3, [pc, #196]	; (800d7b8 <UART_SetConfig+0x338>)
 800d6f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6f6:	f003 0307 	and.w	r3, r3, #7
 800d6fa:	2b05      	cmp	r3, #5
 800d6fc:	d826      	bhi.n	800d74c <UART_SetConfig+0x2cc>
 800d6fe:	a201      	add	r2, pc, #4	; (adr r2, 800d704 <UART_SetConfig+0x284>)
 800d700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d704:	0800d71d 	.word	0x0800d71d
 800d708:	0800d725 	.word	0x0800d725
 800d70c:	0800d72d 	.word	0x0800d72d
 800d710:	0800d735 	.word	0x0800d735
 800d714:	0800d73d 	.word	0x0800d73d
 800d718:	0800d745 	.word	0x0800d745
 800d71c:	2300      	movs	r3, #0
 800d71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d722:	e284      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d724:	2304      	movs	r3, #4
 800d726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d72a:	e280      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d72c:	2308      	movs	r3, #8
 800d72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d732:	e27c      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d734:	2310      	movs	r3, #16
 800d736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d73a:	e278      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d73c:	2320      	movs	r3, #32
 800d73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d742:	e274      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d744:	2340      	movs	r3, #64	; 0x40
 800d746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d74a:	e270      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d74c:	2380      	movs	r3, #128	; 0x80
 800d74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d752:	e26c      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4a1b      	ldr	r2, [pc, #108]	; (800d7c8 <UART_SetConfig+0x348>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d142      	bne.n	800d7e4 <UART_SetConfig+0x364>
 800d75e:	4b16      	ldr	r3, [pc, #88]	; (800d7b8 <UART_SetConfig+0x338>)
 800d760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d762:	f003 0307 	and.w	r3, r3, #7
 800d766:	2b05      	cmp	r3, #5
 800d768:	d838      	bhi.n	800d7dc <UART_SetConfig+0x35c>
 800d76a:	a201      	add	r2, pc, #4	; (adr r2, 800d770 <UART_SetConfig+0x2f0>)
 800d76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d770:	0800d789 	.word	0x0800d789
 800d774:	0800d791 	.word	0x0800d791
 800d778:	0800d799 	.word	0x0800d799
 800d77c:	0800d7a1 	.word	0x0800d7a1
 800d780:	0800d7cd 	.word	0x0800d7cd
 800d784:	0800d7d5 	.word	0x0800d7d5
 800d788:	2300      	movs	r3, #0
 800d78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d78e:	e24e      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d790:	2304      	movs	r3, #4
 800d792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d796:	e24a      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d798:	2308      	movs	r3, #8
 800d79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79e:	e246      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d7a0:	2310      	movs	r3, #16
 800d7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a6:	e242      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d7a8:	cfff69f3 	.word	0xcfff69f3
 800d7ac:	58000c00 	.word	0x58000c00
 800d7b0:	11fff4ff 	.word	0x11fff4ff
 800d7b4:	40011000 	.word	0x40011000
 800d7b8:	58024400 	.word	0x58024400
 800d7bc:	40004400 	.word	0x40004400
 800d7c0:	40004800 	.word	0x40004800
 800d7c4:	40004c00 	.word	0x40004c00
 800d7c8:	40005000 	.word	0x40005000
 800d7cc:	2320      	movs	r3, #32
 800d7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7d2:	e22c      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d7d4:	2340      	movs	r3, #64	; 0x40
 800d7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7da:	e228      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d7dc:	2380      	movs	r3, #128	; 0x80
 800d7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7e2:	e224      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4ab1      	ldr	r2, [pc, #708]	; (800dab0 <UART_SetConfig+0x630>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d176      	bne.n	800d8dc <UART_SetConfig+0x45c>
 800d7ee:	4bb1      	ldr	r3, [pc, #708]	; (800dab4 <UART_SetConfig+0x634>)
 800d7f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d7f6:	2b28      	cmp	r3, #40	; 0x28
 800d7f8:	d86c      	bhi.n	800d8d4 <UART_SetConfig+0x454>
 800d7fa:	a201      	add	r2, pc, #4	; (adr r2, 800d800 <UART_SetConfig+0x380>)
 800d7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d800:	0800d8a5 	.word	0x0800d8a5
 800d804:	0800d8d5 	.word	0x0800d8d5
 800d808:	0800d8d5 	.word	0x0800d8d5
 800d80c:	0800d8d5 	.word	0x0800d8d5
 800d810:	0800d8d5 	.word	0x0800d8d5
 800d814:	0800d8d5 	.word	0x0800d8d5
 800d818:	0800d8d5 	.word	0x0800d8d5
 800d81c:	0800d8d5 	.word	0x0800d8d5
 800d820:	0800d8ad 	.word	0x0800d8ad
 800d824:	0800d8d5 	.word	0x0800d8d5
 800d828:	0800d8d5 	.word	0x0800d8d5
 800d82c:	0800d8d5 	.word	0x0800d8d5
 800d830:	0800d8d5 	.word	0x0800d8d5
 800d834:	0800d8d5 	.word	0x0800d8d5
 800d838:	0800d8d5 	.word	0x0800d8d5
 800d83c:	0800d8d5 	.word	0x0800d8d5
 800d840:	0800d8b5 	.word	0x0800d8b5
 800d844:	0800d8d5 	.word	0x0800d8d5
 800d848:	0800d8d5 	.word	0x0800d8d5
 800d84c:	0800d8d5 	.word	0x0800d8d5
 800d850:	0800d8d5 	.word	0x0800d8d5
 800d854:	0800d8d5 	.word	0x0800d8d5
 800d858:	0800d8d5 	.word	0x0800d8d5
 800d85c:	0800d8d5 	.word	0x0800d8d5
 800d860:	0800d8bd 	.word	0x0800d8bd
 800d864:	0800d8d5 	.word	0x0800d8d5
 800d868:	0800d8d5 	.word	0x0800d8d5
 800d86c:	0800d8d5 	.word	0x0800d8d5
 800d870:	0800d8d5 	.word	0x0800d8d5
 800d874:	0800d8d5 	.word	0x0800d8d5
 800d878:	0800d8d5 	.word	0x0800d8d5
 800d87c:	0800d8d5 	.word	0x0800d8d5
 800d880:	0800d8c5 	.word	0x0800d8c5
 800d884:	0800d8d5 	.word	0x0800d8d5
 800d888:	0800d8d5 	.word	0x0800d8d5
 800d88c:	0800d8d5 	.word	0x0800d8d5
 800d890:	0800d8d5 	.word	0x0800d8d5
 800d894:	0800d8d5 	.word	0x0800d8d5
 800d898:	0800d8d5 	.word	0x0800d8d5
 800d89c:	0800d8d5 	.word	0x0800d8d5
 800d8a0:	0800d8cd 	.word	0x0800d8cd
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8aa:	e1c0      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d8ac:	2304      	movs	r3, #4
 800d8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8b2:	e1bc      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d8b4:	2308      	movs	r3, #8
 800d8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ba:	e1b8      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d8bc:	2310      	movs	r3, #16
 800d8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8c2:	e1b4      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d8c4:	2320      	movs	r3, #32
 800d8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ca:	e1b0      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d8cc:	2340      	movs	r3, #64	; 0x40
 800d8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8d2:	e1ac      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d8d4:	2380      	movs	r3, #128	; 0x80
 800d8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8da:	e1a8      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a75      	ldr	r2, [pc, #468]	; (800dab8 <UART_SetConfig+0x638>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d130      	bne.n	800d948 <UART_SetConfig+0x4c8>
 800d8e6:	4b73      	ldr	r3, [pc, #460]	; (800dab4 <UART_SetConfig+0x634>)
 800d8e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8ea:	f003 0307 	and.w	r3, r3, #7
 800d8ee:	2b05      	cmp	r3, #5
 800d8f0:	d826      	bhi.n	800d940 <UART_SetConfig+0x4c0>
 800d8f2:	a201      	add	r2, pc, #4	; (adr r2, 800d8f8 <UART_SetConfig+0x478>)
 800d8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f8:	0800d911 	.word	0x0800d911
 800d8fc:	0800d919 	.word	0x0800d919
 800d900:	0800d921 	.word	0x0800d921
 800d904:	0800d929 	.word	0x0800d929
 800d908:	0800d931 	.word	0x0800d931
 800d90c:	0800d939 	.word	0x0800d939
 800d910:	2300      	movs	r3, #0
 800d912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d916:	e18a      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d918:	2304      	movs	r3, #4
 800d91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d91e:	e186      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d920:	2308      	movs	r3, #8
 800d922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d926:	e182      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d928:	2310      	movs	r3, #16
 800d92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d92e:	e17e      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d930:	2320      	movs	r3, #32
 800d932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d936:	e17a      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d938:	2340      	movs	r3, #64	; 0x40
 800d93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d93e:	e176      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d940:	2380      	movs	r3, #128	; 0x80
 800d942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d946:	e172      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a5b      	ldr	r2, [pc, #364]	; (800dabc <UART_SetConfig+0x63c>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d130      	bne.n	800d9b4 <UART_SetConfig+0x534>
 800d952:	4b58      	ldr	r3, [pc, #352]	; (800dab4 <UART_SetConfig+0x634>)
 800d954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d956:	f003 0307 	and.w	r3, r3, #7
 800d95a:	2b05      	cmp	r3, #5
 800d95c:	d826      	bhi.n	800d9ac <UART_SetConfig+0x52c>
 800d95e:	a201      	add	r2, pc, #4	; (adr r2, 800d964 <UART_SetConfig+0x4e4>)
 800d960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d964:	0800d97d 	.word	0x0800d97d
 800d968:	0800d985 	.word	0x0800d985
 800d96c:	0800d98d 	.word	0x0800d98d
 800d970:	0800d995 	.word	0x0800d995
 800d974:	0800d99d 	.word	0x0800d99d
 800d978:	0800d9a5 	.word	0x0800d9a5
 800d97c:	2300      	movs	r3, #0
 800d97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d982:	e154      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d984:	2304      	movs	r3, #4
 800d986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d98a:	e150      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d98c:	2308      	movs	r3, #8
 800d98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d992:	e14c      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d994:	2310      	movs	r3, #16
 800d996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d99a:	e148      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d99c:	2320      	movs	r3, #32
 800d99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9a2:	e144      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d9a4:	2340      	movs	r3, #64	; 0x40
 800d9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9aa:	e140      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d9ac:	2380      	movs	r3, #128	; 0x80
 800d9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9b2:	e13c      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a41      	ldr	r2, [pc, #260]	; (800dac0 <UART_SetConfig+0x640>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	f040 8082 	bne.w	800dac4 <UART_SetConfig+0x644>
 800d9c0:	4b3c      	ldr	r3, [pc, #240]	; (800dab4 <UART_SetConfig+0x634>)
 800d9c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d9c8:	2b28      	cmp	r3, #40	; 0x28
 800d9ca:	d86d      	bhi.n	800daa8 <UART_SetConfig+0x628>
 800d9cc:	a201      	add	r2, pc, #4	; (adr r2, 800d9d4 <UART_SetConfig+0x554>)
 800d9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9d2:	bf00      	nop
 800d9d4:	0800da79 	.word	0x0800da79
 800d9d8:	0800daa9 	.word	0x0800daa9
 800d9dc:	0800daa9 	.word	0x0800daa9
 800d9e0:	0800daa9 	.word	0x0800daa9
 800d9e4:	0800daa9 	.word	0x0800daa9
 800d9e8:	0800daa9 	.word	0x0800daa9
 800d9ec:	0800daa9 	.word	0x0800daa9
 800d9f0:	0800daa9 	.word	0x0800daa9
 800d9f4:	0800da81 	.word	0x0800da81
 800d9f8:	0800daa9 	.word	0x0800daa9
 800d9fc:	0800daa9 	.word	0x0800daa9
 800da00:	0800daa9 	.word	0x0800daa9
 800da04:	0800daa9 	.word	0x0800daa9
 800da08:	0800daa9 	.word	0x0800daa9
 800da0c:	0800daa9 	.word	0x0800daa9
 800da10:	0800daa9 	.word	0x0800daa9
 800da14:	0800da89 	.word	0x0800da89
 800da18:	0800daa9 	.word	0x0800daa9
 800da1c:	0800daa9 	.word	0x0800daa9
 800da20:	0800daa9 	.word	0x0800daa9
 800da24:	0800daa9 	.word	0x0800daa9
 800da28:	0800daa9 	.word	0x0800daa9
 800da2c:	0800daa9 	.word	0x0800daa9
 800da30:	0800daa9 	.word	0x0800daa9
 800da34:	0800da91 	.word	0x0800da91
 800da38:	0800daa9 	.word	0x0800daa9
 800da3c:	0800daa9 	.word	0x0800daa9
 800da40:	0800daa9 	.word	0x0800daa9
 800da44:	0800daa9 	.word	0x0800daa9
 800da48:	0800daa9 	.word	0x0800daa9
 800da4c:	0800daa9 	.word	0x0800daa9
 800da50:	0800daa9 	.word	0x0800daa9
 800da54:	0800da99 	.word	0x0800da99
 800da58:	0800daa9 	.word	0x0800daa9
 800da5c:	0800daa9 	.word	0x0800daa9
 800da60:	0800daa9 	.word	0x0800daa9
 800da64:	0800daa9 	.word	0x0800daa9
 800da68:	0800daa9 	.word	0x0800daa9
 800da6c:	0800daa9 	.word	0x0800daa9
 800da70:	0800daa9 	.word	0x0800daa9
 800da74:	0800daa1 	.word	0x0800daa1
 800da78:	2301      	movs	r3, #1
 800da7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da7e:	e0d6      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800da80:	2304      	movs	r3, #4
 800da82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da86:	e0d2      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800da88:	2308      	movs	r3, #8
 800da8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da8e:	e0ce      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800da90:	2310      	movs	r3, #16
 800da92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da96:	e0ca      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800da98:	2320      	movs	r3, #32
 800da9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da9e:	e0c6      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800daa0:	2340      	movs	r3, #64	; 0x40
 800daa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daa6:	e0c2      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800daa8:	2380      	movs	r3, #128	; 0x80
 800daaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daae:	e0be      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800dab0:	40011400 	.word	0x40011400
 800dab4:	58024400 	.word	0x58024400
 800dab8:	40007800 	.word	0x40007800
 800dabc:	40007c00 	.word	0x40007c00
 800dac0:	40011800 	.word	0x40011800
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4aad      	ldr	r2, [pc, #692]	; (800dd80 <UART_SetConfig+0x900>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d176      	bne.n	800dbbc <UART_SetConfig+0x73c>
 800dace:	4bad      	ldr	r3, [pc, #692]	; (800dd84 <UART_SetConfig+0x904>)
 800dad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dad6:	2b28      	cmp	r3, #40	; 0x28
 800dad8:	d86c      	bhi.n	800dbb4 <UART_SetConfig+0x734>
 800dada:	a201      	add	r2, pc, #4	; (adr r2, 800dae0 <UART_SetConfig+0x660>)
 800dadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae0:	0800db85 	.word	0x0800db85
 800dae4:	0800dbb5 	.word	0x0800dbb5
 800dae8:	0800dbb5 	.word	0x0800dbb5
 800daec:	0800dbb5 	.word	0x0800dbb5
 800daf0:	0800dbb5 	.word	0x0800dbb5
 800daf4:	0800dbb5 	.word	0x0800dbb5
 800daf8:	0800dbb5 	.word	0x0800dbb5
 800dafc:	0800dbb5 	.word	0x0800dbb5
 800db00:	0800db8d 	.word	0x0800db8d
 800db04:	0800dbb5 	.word	0x0800dbb5
 800db08:	0800dbb5 	.word	0x0800dbb5
 800db0c:	0800dbb5 	.word	0x0800dbb5
 800db10:	0800dbb5 	.word	0x0800dbb5
 800db14:	0800dbb5 	.word	0x0800dbb5
 800db18:	0800dbb5 	.word	0x0800dbb5
 800db1c:	0800dbb5 	.word	0x0800dbb5
 800db20:	0800db95 	.word	0x0800db95
 800db24:	0800dbb5 	.word	0x0800dbb5
 800db28:	0800dbb5 	.word	0x0800dbb5
 800db2c:	0800dbb5 	.word	0x0800dbb5
 800db30:	0800dbb5 	.word	0x0800dbb5
 800db34:	0800dbb5 	.word	0x0800dbb5
 800db38:	0800dbb5 	.word	0x0800dbb5
 800db3c:	0800dbb5 	.word	0x0800dbb5
 800db40:	0800db9d 	.word	0x0800db9d
 800db44:	0800dbb5 	.word	0x0800dbb5
 800db48:	0800dbb5 	.word	0x0800dbb5
 800db4c:	0800dbb5 	.word	0x0800dbb5
 800db50:	0800dbb5 	.word	0x0800dbb5
 800db54:	0800dbb5 	.word	0x0800dbb5
 800db58:	0800dbb5 	.word	0x0800dbb5
 800db5c:	0800dbb5 	.word	0x0800dbb5
 800db60:	0800dba5 	.word	0x0800dba5
 800db64:	0800dbb5 	.word	0x0800dbb5
 800db68:	0800dbb5 	.word	0x0800dbb5
 800db6c:	0800dbb5 	.word	0x0800dbb5
 800db70:	0800dbb5 	.word	0x0800dbb5
 800db74:	0800dbb5 	.word	0x0800dbb5
 800db78:	0800dbb5 	.word	0x0800dbb5
 800db7c:	0800dbb5 	.word	0x0800dbb5
 800db80:	0800dbad 	.word	0x0800dbad
 800db84:	2301      	movs	r3, #1
 800db86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db8a:	e050      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800db8c:	2304      	movs	r3, #4
 800db8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db92:	e04c      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800db94:	2308      	movs	r3, #8
 800db96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db9a:	e048      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800db9c:	2310      	movs	r3, #16
 800db9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dba2:	e044      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800dba4:	2320      	movs	r3, #32
 800dba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbaa:	e040      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800dbac:	2340      	movs	r3, #64	; 0x40
 800dbae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbb2:	e03c      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800dbb4:	2380      	movs	r3, #128	; 0x80
 800dbb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbba:	e038      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a71      	ldr	r2, [pc, #452]	; (800dd88 <UART_SetConfig+0x908>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d130      	bne.n	800dc28 <UART_SetConfig+0x7a8>
 800dbc6:	4b6f      	ldr	r3, [pc, #444]	; (800dd84 <UART_SetConfig+0x904>)
 800dbc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbca:	f003 0307 	and.w	r3, r3, #7
 800dbce:	2b05      	cmp	r3, #5
 800dbd0:	d826      	bhi.n	800dc20 <UART_SetConfig+0x7a0>
 800dbd2:	a201      	add	r2, pc, #4	; (adr r2, 800dbd8 <UART_SetConfig+0x758>)
 800dbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd8:	0800dbf1 	.word	0x0800dbf1
 800dbdc:	0800dbf9 	.word	0x0800dbf9
 800dbe0:	0800dc01 	.word	0x0800dc01
 800dbe4:	0800dc09 	.word	0x0800dc09
 800dbe8:	0800dc11 	.word	0x0800dc11
 800dbec:	0800dc19 	.word	0x0800dc19
 800dbf0:	2302      	movs	r3, #2
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf6:	e01a      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800dbf8:	2304      	movs	r3, #4
 800dbfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbfe:	e016      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800dc00:	2308      	movs	r3, #8
 800dc02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc06:	e012      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800dc08:	2310      	movs	r3, #16
 800dc0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc0e:	e00e      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800dc10:	2320      	movs	r3, #32
 800dc12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc16:	e00a      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800dc18:	2340      	movs	r3, #64	; 0x40
 800dc1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc1e:	e006      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800dc20:	2380      	movs	r3, #128	; 0x80
 800dc22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc26:	e002      	b.n	800dc2e <UART_SetConfig+0x7ae>
 800dc28:	2380      	movs	r3, #128	; 0x80
 800dc2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4a55      	ldr	r2, [pc, #340]	; (800dd88 <UART_SetConfig+0x908>)
 800dc34:	4293      	cmp	r3, r2
 800dc36:	f040 80f8 	bne.w	800de2a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dc3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dc3e:	2b20      	cmp	r3, #32
 800dc40:	dc46      	bgt.n	800dcd0 <UART_SetConfig+0x850>
 800dc42:	2b02      	cmp	r3, #2
 800dc44:	db75      	blt.n	800dd32 <UART_SetConfig+0x8b2>
 800dc46:	3b02      	subs	r3, #2
 800dc48:	2b1e      	cmp	r3, #30
 800dc4a:	d872      	bhi.n	800dd32 <UART_SetConfig+0x8b2>
 800dc4c:	a201      	add	r2, pc, #4	; (adr r2, 800dc54 <UART_SetConfig+0x7d4>)
 800dc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc52:	bf00      	nop
 800dc54:	0800dcd7 	.word	0x0800dcd7
 800dc58:	0800dd33 	.word	0x0800dd33
 800dc5c:	0800dcdf 	.word	0x0800dcdf
 800dc60:	0800dd33 	.word	0x0800dd33
 800dc64:	0800dd33 	.word	0x0800dd33
 800dc68:	0800dd33 	.word	0x0800dd33
 800dc6c:	0800dcef 	.word	0x0800dcef
 800dc70:	0800dd33 	.word	0x0800dd33
 800dc74:	0800dd33 	.word	0x0800dd33
 800dc78:	0800dd33 	.word	0x0800dd33
 800dc7c:	0800dd33 	.word	0x0800dd33
 800dc80:	0800dd33 	.word	0x0800dd33
 800dc84:	0800dd33 	.word	0x0800dd33
 800dc88:	0800dd33 	.word	0x0800dd33
 800dc8c:	0800dcff 	.word	0x0800dcff
 800dc90:	0800dd33 	.word	0x0800dd33
 800dc94:	0800dd33 	.word	0x0800dd33
 800dc98:	0800dd33 	.word	0x0800dd33
 800dc9c:	0800dd33 	.word	0x0800dd33
 800dca0:	0800dd33 	.word	0x0800dd33
 800dca4:	0800dd33 	.word	0x0800dd33
 800dca8:	0800dd33 	.word	0x0800dd33
 800dcac:	0800dd33 	.word	0x0800dd33
 800dcb0:	0800dd33 	.word	0x0800dd33
 800dcb4:	0800dd33 	.word	0x0800dd33
 800dcb8:	0800dd33 	.word	0x0800dd33
 800dcbc:	0800dd33 	.word	0x0800dd33
 800dcc0:	0800dd33 	.word	0x0800dd33
 800dcc4:	0800dd33 	.word	0x0800dd33
 800dcc8:	0800dd33 	.word	0x0800dd33
 800dccc:	0800dd25 	.word	0x0800dd25
 800dcd0:	2b40      	cmp	r3, #64	; 0x40
 800dcd2:	d02a      	beq.n	800dd2a <UART_SetConfig+0x8aa>
 800dcd4:	e02d      	b.n	800dd32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dcd6:	f7fc fdfd 	bl	800a8d4 <HAL_RCCEx_GetD3PCLK1Freq>
 800dcda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dcdc:	e02f      	b.n	800dd3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dcde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7fc fe0c 	bl	800a900 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcec:	e027      	b.n	800dd3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dcee:	f107 0318 	add.w	r3, r7, #24
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7fc ff58 	bl	800aba8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dcf8:	69fb      	ldr	r3, [r7, #28]
 800dcfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcfc:	e01f      	b.n	800dd3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dcfe:	4b21      	ldr	r3, [pc, #132]	; (800dd84 <UART_SetConfig+0x904>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f003 0320 	and.w	r3, r3, #32
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d009      	beq.n	800dd1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd0a:	4b1e      	ldr	r3, [pc, #120]	; (800dd84 <UART_SetConfig+0x904>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	08db      	lsrs	r3, r3, #3
 800dd10:	f003 0303 	and.w	r3, r3, #3
 800dd14:	4a1d      	ldr	r2, [pc, #116]	; (800dd8c <UART_SetConfig+0x90c>)
 800dd16:	fa22 f303 	lsr.w	r3, r2, r3
 800dd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd1c:	e00f      	b.n	800dd3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dd1e:	4b1b      	ldr	r3, [pc, #108]	; (800dd8c <UART_SetConfig+0x90c>)
 800dd20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd22:	e00c      	b.n	800dd3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd24:	4b1a      	ldr	r3, [pc, #104]	; (800dd90 <UART_SetConfig+0x910>)
 800dd26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd28:	e009      	b.n	800dd3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd30:	e005      	b.n	800dd3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dd32:	2300      	movs	r3, #0
 800dd34:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dd36:	2301      	movs	r3, #1
 800dd38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dd3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dd3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	f000 81ee 	beq.w	800e122 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd4a:	4a12      	ldr	r2, [pc, #72]	; (800dd94 <UART_SetConfig+0x914>)
 800dd4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd50:	461a      	mov	r2, r3
 800dd52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd54:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd58:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	685a      	ldr	r2, [r3, #4]
 800dd5e:	4613      	mov	r3, r2
 800dd60:	005b      	lsls	r3, r3, #1
 800dd62:	4413      	add	r3, r2
 800dd64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d305      	bcc.n	800dd76 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dd70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd72:	429a      	cmp	r2, r3
 800dd74:	d910      	bls.n	800dd98 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800dd76:	2301      	movs	r3, #1
 800dd78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dd7c:	e1d1      	b.n	800e122 <UART_SetConfig+0xca2>
 800dd7e:	bf00      	nop
 800dd80:	40011c00 	.word	0x40011c00
 800dd84:	58024400 	.word	0x58024400
 800dd88:	58000c00 	.word	0x58000c00
 800dd8c:	03d09000 	.word	0x03d09000
 800dd90:	003d0900 	.word	0x003d0900
 800dd94:	0800f350 	.word	0x0800f350
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	60bb      	str	r3, [r7, #8]
 800dd9e:	60fa      	str	r2, [r7, #12]
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda4:	4ac0      	ldr	r2, [pc, #768]	; (800e0a8 <UART_SetConfig+0xc28>)
 800dda6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	2200      	movs	r2, #0
 800ddae:	603b      	str	r3, [r7, #0]
 800ddb0:	607a      	str	r2, [r7, #4]
 800ddb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ddb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ddba:	f7f2 fab1 	bl	8000320 <__aeabi_uldivmod>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	4610      	mov	r0, r2
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	f04f 0200 	mov.w	r2, #0
 800ddca:	f04f 0300 	mov.w	r3, #0
 800ddce:	020b      	lsls	r3, r1, #8
 800ddd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ddd4:	0202      	lsls	r2, r0, #8
 800ddd6:	6979      	ldr	r1, [r7, #20]
 800ddd8:	6849      	ldr	r1, [r1, #4]
 800ddda:	0849      	lsrs	r1, r1, #1
 800dddc:	2000      	movs	r0, #0
 800ddde:	460c      	mov	r4, r1
 800dde0:	4605      	mov	r5, r0
 800dde2:	eb12 0804 	adds.w	r8, r2, r4
 800dde6:	eb43 0905 	adc.w	r9, r3, r5
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	469a      	mov	sl, r3
 800ddf2:	4693      	mov	fp, r2
 800ddf4:	4652      	mov	r2, sl
 800ddf6:	465b      	mov	r3, fp
 800ddf8:	4640      	mov	r0, r8
 800ddfa:	4649      	mov	r1, r9
 800ddfc:	f7f2 fa90 	bl	8000320 <__aeabi_uldivmod>
 800de00:	4602      	mov	r2, r0
 800de02:	460b      	mov	r3, r1
 800de04:	4613      	mov	r3, r2
 800de06:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800de08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800de0e:	d308      	bcc.n	800de22 <UART_SetConfig+0x9a2>
 800de10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de16:	d204      	bcs.n	800de22 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de1e:	60da      	str	r2, [r3, #12]
 800de20:	e17f      	b.n	800e122 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800de22:	2301      	movs	r3, #1
 800de24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800de28:	e17b      	b.n	800e122 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	69db      	ldr	r3, [r3, #28]
 800de2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de32:	f040 80bd 	bne.w	800dfb0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800de36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800de3a:	2b20      	cmp	r3, #32
 800de3c:	dc48      	bgt.n	800ded0 <UART_SetConfig+0xa50>
 800de3e:	2b00      	cmp	r3, #0
 800de40:	db7b      	blt.n	800df3a <UART_SetConfig+0xaba>
 800de42:	2b20      	cmp	r3, #32
 800de44:	d879      	bhi.n	800df3a <UART_SetConfig+0xaba>
 800de46:	a201      	add	r2, pc, #4	; (adr r2, 800de4c <UART_SetConfig+0x9cc>)
 800de48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de4c:	0800ded7 	.word	0x0800ded7
 800de50:	0800dedf 	.word	0x0800dedf
 800de54:	0800df3b 	.word	0x0800df3b
 800de58:	0800df3b 	.word	0x0800df3b
 800de5c:	0800dee7 	.word	0x0800dee7
 800de60:	0800df3b 	.word	0x0800df3b
 800de64:	0800df3b 	.word	0x0800df3b
 800de68:	0800df3b 	.word	0x0800df3b
 800de6c:	0800def7 	.word	0x0800def7
 800de70:	0800df3b 	.word	0x0800df3b
 800de74:	0800df3b 	.word	0x0800df3b
 800de78:	0800df3b 	.word	0x0800df3b
 800de7c:	0800df3b 	.word	0x0800df3b
 800de80:	0800df3b 	.word	0x0800df3b
 800de84:	0800df3b 	.word	0x0800df3b
 800de88:	0800df3b 	.word	0x0800df3b
 800de8c:	0800df07 	.word	0x0800df07
 800de90:	0800df3b 	.word	0x0800df3b
 800de94:	0800df3b 	.word	0x0800df3b
 800de98:	0800df3b 	.word	0x0800df3b
 800de9c:	0800df3b 	.word	0x0800df3b
 800dea0:	0800df3b 	.word	0x0800df3b
 800dea4:	0800df3b 	.word	0x0800df3b
 800dea8:	0800df3b 	.word	0x0800df3b
 800deac:	0800df3b 	.word	0x0800df3b
 800deb0:	0800df3b 	.word	0x0800df3b
 800deb4:	0800df3b 	.word	0x0800df3b
 800deb8:	0800df3b 	.word	0x0800df3b
 800debc:	0800df3b 	.word	0x0800df3b
 800dec0:	0800df3b 	.word	0x0800df3b
 800dec4:	0800df3b 	.word	0x0800df3b
 800dec8:	0800df3b 	.word	0x0800df3b
 800decc:	0800df2d 	.word	0x0800df2d
 800ded0:	2b40      	cmp	r3, #64	; 0x40
 800ded2:	d02e      	beq.n	800df32 <UART_SetConfig+0xab2>
 800ded4:	e031      	b.n	800df3a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ded6:	f7fb fb31 	bl	800953c <HAL_RCC_GetPCLK1Freq>
 800deda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dedc:	e033      	b.n	800df46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dede:	f7fb fb43 	bl	8009568 <HAL_RCC_GetPCLK2Freq>
 800dee2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dee4:	e02f      	b.n	800df46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800deea:	4618      	mov	r0, r3
 800deec:	f7fc fd08 	bl	800a900 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800def0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800def4:	e027      	b.n	800df46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800def6:	f107 0318 	add.w	r3, r7, #24
 800defa:	4618      	mov	r0, r3
 800defc:	f7fc fe54 	bl	800aba8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df04:	e01f      	b.n	800df46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df06:	4b69      	ldr	r3, [pc, #420]	; (800e0ac <UART_SetConfig+0xc2c>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f003 0320 	and.w	r3, r3, #32
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d009      	beq.n	800df26 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df12:	4b66      	ldr	r3, [pc, #408]	; (800e0ac <UART_SetConfig+0xc2c>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	08db      	lsrs	r3, r3, #3
 800df18:	f003 0303 	and.w	r3, r3, #3
 800df1c:	4a64      	ldr	r2, [pc, #400]	; (800e0b0 <UART_SetConfig+0xc30>)
 800df1e:	fa22 f303 	lsr.w	r3, r2, r3
 800df22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df24:	e00f      	b.n	800df46 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800df26:	4b62      	ldr	r3, [pc, #392]	; (800e0b0 <UART_SetConfig+0xc30>)
 800df28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df2a:	e00c      	b.n	800df46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df2c:	4b61      	ldr	r3, [pc, #388]	; (800e0b4 <UART_SetConfig+0xc34>)
 800df2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df30:	e009      	b.n	800df46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df38:	e005      	b.n	800df46 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800df3a:	2300      	movs	r3, #0
 800df3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800df3e:	2301      	movs	r3, #1
 800df40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800df44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800df46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df48:	2b00      	cmp	r3, #0
 800df4a:	f000 80ea 	beq.w	800e122 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df52:	4a55      	ldr	r2, [pc, #340]	; (800e0a8 <UART_SetConfig+0xc28>)
 800df54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df58:	461a      	mov	r2, r3
 800df5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800df60:	005a      	lsls	r2, r3, #1
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	085b      	lsrs	r3, r3, #1
 800df68:	441a      	add	r2, r3
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800df72:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df76:	2b0f      	cmp	r3, #15
 800df78:	d916      	bls.n	800dfa8 <UART_SetConfig+0xb28>
 800df7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df80:	d212      	bcs.n	800dfa8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800df82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df84:	b29b      	uxth	r3, r3
 800df86:	f023 030f 	bic.w	r3, r3, #15
 800df8a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800df8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8e:	085b      	lsrs	r3, r3, #1
 800df90:	b29b      	uxth	r3, r3
 800df92:	f003 0307 	and.w	r3, r3, #7
 800df96:	b29a      	uxth	r2, r3
 800df98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800df9a:	4313      	orrs	r3, r2
 800df9c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800dfa4:	60da      	str	r2, [r3, #12]
 800dfa6:	e0bc      	b.n	800e122 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dfae:	e0b8      	b.n	800e122 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dfb0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dfb4:	2b20      	cmp	r3, #32
 800dfb6:	dc4b      	bgt.n	800e050 <UART_SetConfig+0xbd0>
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	f2c0 8087 	blt.w	800e0cc <UART_SetConfig+0xc4c>
 800dfbe:	2b20      	cmp	r3, #32
 800dfc0:	f200 8084 	bhi.w	800e0cc <UART_SetConfig+0xc4c>
 800dfc4:	a201      	add	r2, pc, #4	; (adr r2, 800dfcc <UART_SetConfig+0xb4c>)
 800dfc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfca:	bf00      	nop
 800dfcc:	0800e057 	.word	0x0800e057
 800dfd0:	0800e05f 	.word	0x0800e05f
 800dfd4:	0800e0cd 	.word	0x0800e0cd
 800dfd8:	0800e0cd 	.word	0x0800e0cd
 800dfdc:	0800e067 	.word	0x0800e067
 800dfe0:	0800e0cd 	.word	0x0800e0cd
 800dfe4:	0800e0cd 	.word	0x0800e0cd
 800dfe8:	0800e0cd 	.word	0x0800e0cd
 800dfec:	0800e077 	.word	0x0800e077
 800dff0:	0800e0cd 	.word	0x0800e0cd
 800dff4:	0800e0cd 	.word	0x0800e0cd
 800dff8:	0800e0cd 	.word	0x0800e0cd
 800dffc:	0800e0cd 	.word	0x0800e0cd
 800e000:	0800e0cd 	.word	0x0800e0cd
 800e004:	0800e0cd 	.word	0x0800e0cd
 800e008:	0800e0cd 	.word	0x0800e0cd
 800e00c:	0800e087 	.word	0x0800e087
 800e010:	0800e0cd 	.word	0x0800e0cd
 800e014:	0800e0cd 	.word	0x0800e0cd
 800e018:	0800e0cd 	.word	0x0800e0cd
 800e01c:	0800e0cd 	.word	0x0800e0cd
 800e020:	0800e0cd 	.word	0x0800e0cd
 800e024:	0800e0cd 	.word	0x0800e0cd
 800e028:	0800e0cd 	.word	0x0800e0cd
 800e02c:	0800e0cd 	.word	0x0800e0cd
 800e030:	0800e0cd 	.word	0x0800e0cd
 800e034:	0800e0cd 	.word	0x0800e0cd
 800e038:	0800e0cd 	.word	0x0800e0cd
 800e03c:	0800e0cd 	.word	0x0800e0cd
 800e040:	0800e0cd 	.word	0x0800e0cd
 800e044:	0800e0cd 	.word	0x0800e0cd
 800e048:	0800e0cd 	.word	0x0800e0cd
 800e04c:	0800e0bf 	.word	0x0800e0bf
 800e050:	2b40      	cmp	r3, #64	; 0x40
 800e052:	d037      	beq.n	800e0c4 <UART_SetConfig+0xc44>
 800e054:	e03a      	b.n	800e0cc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e056:	f7fb fa71 	bl	800953c <HAL_RCC_GetPCLK1Freq>
 800e05a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e05c:	e03c      	b.n	800e0d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e05e:	f7fb fa83 	bl	8009568 <HAL_RCC_GetPCLK2Freq>
 800e062:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e064:	e038      	b.n	800e0d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fc fc48 	bl	800a900 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e074:	e030      	b.n	800e0d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e076:	f107 0318 	add.w	r3, r7, #24
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fc fd94 	bl	800aba8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e084:	e028      	b.n	800e0d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e086:	4b09      	ldr	r3, [pc, #36]	; (800e0ac <UART_SetConfig+0xc2c>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f003 0320 	and.w	r3, r3, #32
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d012      	beq.n	800e0b8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e092:	4b06      	ldr	r3, [pc, #24]	; (800e0ac <UART_SetConfig+0xc2c>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	08db      	lsrs	r3, r3, #3
 800e098:	f003 0303 	and.w	r3, r3, #3
 800e09c:	4a04      	ldr	r2, [pc, #16]	; (800e0b0 <UART_SetConfig+0xc30>)
 800e09e:	fa22 f303 	lsr.w	r3, r2, r3
 800e0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e0a4:	e018      	b.n	800e0d8 <UART_SetConfig+0xc58>
 800e0a6:	bf00      	nop
 800e0a8:	0800f350 	.word	0x0800f350
 800e0ac:	58024400 	.word	0x58024400
 800e0b0:	03d09000 	.word	0x03d09000
 800e0b4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e0b8:	4b24      	ldr	r3, [pc, #144]	; (800e14c <UART_SetConfig+0xccc>)
 800e0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0bc:	e00c      	b.n	800e0d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e0be:	4b24      	ldr	r3, [pc, #144]	; (800e150 <UART_SetConfig+0xcd0>)
 800e0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0c2:	e009      	b.n	800e0d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e0c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0ca:	e005      	b.n	800e0d8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e0d6:	bf00      	nop
    }

    if (pclk != 0U)
 800e0d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d021      	beq.n	800e122 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e2:	4a1c      	ldr	r2, [pc, #112]	; (800e154 <UART_SetConfig+0xcd4>)
 800e0e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ec:	fbb3 f2f2 	udiv	r2, r3, r2
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	085b      	lsrs	r3, r3, #1
 800e0f6:	441a      	add	r2, r3
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e100:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e104:	2b0f      	cmp	r3, #15
 800e106:	d909      	bls.n	800e11c <UART_SetConfig+0xc9c>
 800e108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e10e:	d205      	bcs.n	800e11c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e112:	b29a      	uxth	r2, r3
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	60da      	str	r2, [r3, #12]
 800e11a:	e002      	b.n	800e122 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e11c:	2301      	movs	r3, #1
 800e11e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	2201      	movs	r2, #1
 800e126:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	2201      	movs	r2, #1
 800e12e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	2200      	movs	r2, #0
 800e136:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	2200      	movs	r2, #0
 800e13c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e13e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e142:	4618      	mov	r0, r3
 800e144:	3748      	adds	r7, #72	; 0x48
 800e146:	46bd      	mov	sp, r7
 800e148:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e14c:	03d09000 	.word	0x03d09000
 800e150:	003d0900 	.word	0x003d0900
 800e154:	0800f350 	.word	0x0800f350

0800e158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e158:	b480      	push	{r7}
 800e15a:	b083      	sub	sp, #12
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e164:	f003 0301 	and.w	r3, r3, #1
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d00a      	beq.n	800e182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	430a      	orrs	r2, r1
 800e180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e186:	f003 0302 	and.w	r3, r3, #2
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d00a      	beq.n	800e1a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	430a      	orrs	r2, r1
 800e1a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1a8:	f003 0304 	and.w	r3, r3, #4
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d00a      	beq.n	800e1c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	430a      	orrs	r2, r1
 800e1c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ca:	f003 0308 	and.w	r3, r3, #8
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d00a      	beq.n	800e1e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	685b      	ldr	r3, [r3, #4]
 800e1d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	430a      	orrs	r2, r1
 800e1e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ec:	f003 0310 	and.w	r3, r3, #16
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d00a      	beq.n	800e20a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	689b      	ldr	r3, [r3, #8]
 800e1fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	430a      	orrs	r2, r1
 800e208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e20e:	f003 0320 	and.w	r3, r3, #32
 800e212:	2b00      	cmp	r3, #0
 800e214:	d00a      	beq.n	800e22c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	689b      	ldr	r3, [r3, #8]
 800e21c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	430a      	orrs	r2, r1
 800e22a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e234:	2b00      	cmp	r3, #0
 800e236:	d01a      	beq.n	800e26e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	685b      	ldr	r3, [r3, #4]
 800e23e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	430a      	orrs	r2, r1
 800e24c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e256:	d10a      	bne.n	800e26e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	430a      	orrs	r2, r1
 800e26c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e276:	2b00      	cmp	r3, #0
 800e278:	d00a      	beq.n	800e290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	430a      	orrs	r2, r1
 800e28e:	605a      	str	r2, [r3, #4]
  }
}
 800e290:	bf00      	nop
 800e292:	370c      	adds	r7, #12
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr

0800e29c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b098      	sub	sp, #96	; 0x60
 800e2a0:	af02      	add	r7, sp, #8
 800e2a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e2ac:	f7f6 fdd0 	bl	8004e50 <HAL_GetTick>
 800e2b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f003 0308 	and.w	r3, r3, #8
 800e2bc:	2b08      	cmp	r3, #8
 800e2be:	d12f      	bne.n	800e320 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e2c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e2c4:	9300      	str	r3, [sp, #0]
 800e2c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 f88e 	bl	800e3f0 <UART_WaitOnFlagUntilTimeout>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d022      	beq.n	800e320 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e2:	e853 3f00 	ldrex	r3, [r3]
 800e2e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2ee:	653b      	str	r3, [r7, #80]	; 0x50
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2f8:	647b      	str	r3, [r7, #68]	; 0x44
 800e2fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e2fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e300:	e841 2300 	strex	r3, r2, [r1]
 800e304:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d1e6      	bne.n	800e2da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2220      	movs	r2, #32
 800e310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2200      	movs	r2, #0
 800e318:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e31c:	2303      	movs	r3, #3
 800e31e:	e063      	b.n	800e3e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f003 0304 	and.w	r3, r3, #4
 800e32a:	2b04      	cmp	r3, #4
 800e32c:	d149      	bne.n	800e3c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e32e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e332:	9300      	str	r3, [sp, #0]
 800e334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e336:	2200      	movs	r2, #0
 800e338:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 f857 	bl	800e3f0 <UART_WaitOnFlagUntilTimeout>
 800e342:	4603      	mov	r3, r0
 800e344:	2b00      	cmp	r3, #0
 800e346:	d03c      	beq.n	800e3c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e350:	e853 3f00 	ldrex	r3, [r3]
 800e354:	623b      	str	r3, [r7, #32]
   return(result);
 800e356:	6a3b      	ldr	r3, [r7, #32]
 800e358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e35c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	461a      	mov	r2, r3
 800e364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e366:	633b      	str	r3, [r7, #48]	; 0x30
 800e368:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e36a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e36c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e36e:	e841 2300 	strex	r3, r2, [r1]
 800e372:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e376:	2b00      	cmp	r3, #0
 800e378:	d1e6      	bne.n	800e348 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	3308      	adds	r3, #8
 800e380:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	e853 3f00 	ldrex	r3, [r3]
 800e388:	60fb      	str	r3, [r7, #12]
   return(result);
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f023 0301 	bic.w	r3, r3, #1
 800e390:	64bb      	str	r3, [r7, #72]	; 0x48
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	3308      	adds	r3, #8
 800e398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e39a:	61fa      	str	r2, [r7, #28]
 800e39c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e39e:	69b9      	ldr	r1, [r7, #24]
 800e3a0:	69fa      	ldr	r2, [r7, #28]
 800e3a2:	e841 2300 	strex	r3, r2, [r1]
 800e3a6:	617b      	str	r3, [r7, #20]
   return(result);
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d1e5      	bne.n	800e37a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2220      	movs	r2, #32
 800e3b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e3be:	2303      	movs	r3, #3
 800e3c0:	e012      	b.n	800e3e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2220      	movs	r2, #32
 800e3c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2220      	movs	r2, #32
 800e3ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e3e6:	2300      	movs	r3, #0
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3758      	adds	r7, #88	; 0x58
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}

0800e3f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b084      	sub	sp, #16
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	60f8      	str	r0, [r7, #12]
 800e3f8:	60b9      	str	r1, [r7, #8]
 800e3fa:	603b      	str	r3, [r7, #0]
 800e3fc:	4613      	mov	r3, r2
 800e3fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e400:	e049      	b.n	800e496 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e402:	69bb      	ldr	r3, [r7, #24]
 800e404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e408:	d045      	beq.n	800e496 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e40a:	f7f6 fd21 	bl	8004e50 <HAL_GetTick>
 800e40e:	4602      	mov	r2, r0
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	1ad3      	subs	r3, r2, r3
 800e414:	69ba      	ldr	r2, [r7, #24]
 800e416:	429a      	cmp	r2, r3
 800e418:	d302      	bcc.n	800e420 <UART_WaitOnFlagUntilTimeout+0x30>
 800e41a:	69bb      	ldr	r3, [r7, #24]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d101      	bne.n	800e424 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e420:	2303      	movs	r3, #3
 800e422:	e048      	b.n	800e4b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f003 0304 	and.w	r3, r3, #4
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d031      	beq.n	800e496 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	69db      	ldr	r3, [r3, #28]
 800e438:	f003 0308 	and.w	r3, r3, #8
 800e43c:	2b08      	cmp	r3, #8
 800e43e:	d110      	bne.n	800e462 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2208      	movs	r2, #8
 800e446:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e448:	68f8      	ldr	r0, [r7, #12]
 800e44a:	f000 f921 	bl	800e690 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2208      	movs	r2, #8
 800e452:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2200      	movs	r2, #0
 800e45a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800e45e:	2301      	movs	r3, #1
 800e460:	e029      	b.n	800e4b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	69db      	ldr	r3, [r3, #28]
 800e468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e46c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e470:	d111      	bne.n	800e496 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e47a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e47c:	68f8      	ldr	r0, [r7, #12]
 800e47e:	f000 f907 	bl	800e690 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2220      	movs	r2, #32
 800e486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2200      	movs	r2, #0
 800e48e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e492:	2303      	movs	r3, #3
 800e494:	e00f      	b.n	800e4b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	69da      	ldr	r2, [r3, #28]
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	4013      	ands	r3, r2
 800e4a0:	68ba      	ldr	r2, [r7, #8]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	bf0c      	ite	eq
 800e4a6:	2301      	moveq	r3, #1
 800e4a8:	2300      	movne	r3, #0
 800e4aa:	b2db      	uxtb	r3, r3
 800e4ac:	461a      	mov	r2, r3
 800e4ae:	79fb      	ldrb	r3, [r7, #7]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d0a6      	beq.n	800e402 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e4b4:	2300      	movs	r3, #0
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3710      	adds	r7, #16
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
	...

0800e4c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b096      	sub	sp, #88	; 0x58
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	60f8      	str	r0, [r7, #12]
 800e4c8:	60b9      	str	r1, [r7, #8]
 800e4ca:	4613      	mov	r3, r2
 800e4cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	68ba      	ldr	r2, [r7, #8]
 800e4d2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	88fa      	ldrh	r2, [r7, #6]
 800e4d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	2222      	movs	r2, #34	; 0x22
 800e4e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d02d      	beq.n	800e552 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4fc:	4a40      	ldr	r2, [pc, #256]	; (800e600 <UART_Start_Receive_DMA+0x140>)
 800e4fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e506:	4a3f      	ldr	r2, [pc, #252]	; (800e604 <UART_Start_Receive_DMA+0x144>)
 800e508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e510:	4a3d      	ldr	r2, [pc, #244]	; (800e608 <UART_Start_Receive_DMA+0x148>)
 800e512:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e51a:	2200      	movs	r2, #0
 800e51c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	3324      	adds	r3, #36	; 0x24
 800e52a:	4619      	mov	r1, r3
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e530:	461a      	mov	r2, r3
 800e532:	88fb      	ldrh	r3, [r7, #6]
 800e534:	f7f7 faea 	bl	8005b0c <HAL_DMA_Start_IT>
 800e538:	4603      	mov	r3, r0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d009      	beq.n	800e552 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2210      	movs	r2, #16
 800e542:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2220      	movs	r2, #32
 800e54a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800e54e:	2301      	movs	r3, #1
 800e550:	e051      	b.n	800e5f6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	691b      	ldr	r3, [r3, #16]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d018      	beq.n	800e58c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e562:	e853 3f00 	ldrex	r3, [r3]
 800e566:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e56e:	657b      	str	r3, [r7, #84]	; 0x54
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	461a      	mov	r2, r3
 800e576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e578:	64bb      	str	r3, [r7, #72]	; 0x48
 800e57a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e57c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e57e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e580:	e841 2300 	strex	r3, r2, [r1]
 800e584:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d1e6      	bne.n	800e55a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	3308      	adds	r3, #8
 800e592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e596:	e853 3f00 	ldrex	r3, [r3]
 800e59a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59e:	f043 0301 	orr.w	r3, r3, #1
 800e5a2:	653b      	str	r3, [r7, #80]	; 0x50
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	3308      	adds	r3, #8
 800e5aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e5ac:	637a      	str	r2, [r7, #52]	; 0x34
 800e5ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e5b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5b4:	e841 2300 	strex	r3, r2, [r1]
 800e5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d1e5      	bne.n	800e58c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	3308      	adds	r3, #8
 800e5c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	e853 3f00 	ldrex	r3, [r3]
 800e5ce:	613b      	str	r3, [r7, #16]
   return(result);
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	3308      	adds	r3, #8
 800e5de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e5e0:	623a      	str	r2, [r7, #32]
 800e5e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5e4:	69f9      	ldr	r1, [r7, #28]
 800e5e6:	6a3a      	ldr	r2, [r7, #32]
 800e5e8:	e841 2300 	strex	r3, r2, [r1]
 800e5ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800e5ee:	69bb      	ldr	r3, [r7, #24]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d1e5      	bne.n	800e5c0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e5f4:	2300      	movs	r3, #0
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3758      	adds	r7, #88	; 0x58
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	0800e80f 	.word	0x0800e80f
 800e604:	0800e937 	.word	0x0800e937
 800e608:	0800e975 	.word	0x0800e975

0800e60c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e60c:	b480      	push	{r7}
 800e60e:	b08f      	sub	sp, #60	; 0x3c
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e61a:	6a3b      	ldr	r3, [r7, #32]
 800e61c:	e853 3f00 	ldrex	r3, [r3]
 800e620:	61fb      	str	r3, [r7, #28]
   return(result);
 800e622:	69fb      	ldr	r3, [r7, #28]
 800e624:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e628:	637b      	str	r3, [r7, #52]	; 0x34
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	461a      	mov	r2, r3
 800e630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e632:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e634:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e636:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e63a:	e841 2300 	strex	r3, r2, [r1]
 800e63e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e642:	2b00      	cmp	r3, #0
 800e644:	d1e6      	bne.n	800e614 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	3308      	adds	r3, #8
 800e64c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	e853 3f00 	ldrex	r3, [r3]
 800e654:	60bb      	str	r3, [r7, #8]
   return(result);
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e65c:	633b      	str	r3, [r7, #48]	; 0x30
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	3308      	adds	r3, #8
 800e664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e666:	61ba      	str	r2, [r7, #24]
 800e668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e66a:	6979      	ldr	r1, [r7, #20]
 800e66c:	69ba      	ldr	r2, [r7, #24]
 800e66e:	e841 2300 	strex	r3, r2, [r1]
 800e672:	613b      	str	r3, [r7, #16]
   return(result);
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d1e5      	bne.n	800e646 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2220      	movs	r2, #32
 800e67e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800e682:	bf00      	nop
 800e684:	373c      	adds	r7, #60	; 0x3c
 800e686:	46bd      	mov	sp, r7
 800e688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68c:	4770      	bx	lr
	...

0800e690 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e690:	b480      	push	{r7}
 800e692:	b095      	sub	sp, #84	; 0x54
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6a0:	e853 3f00 	ldrex	r3, [r3]
 800e6a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e6ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6b6:	643b      	str	r3, [r7, #64]	; 0x40
 800e6b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e6bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e6be:	e841 2300 	strex	r3, r2, [r1]
 800e6c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d1e6      	bne.n	800e698 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	3308      	adds	r3, #8
 800e6d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d2:	6a3b      	ldr	r3, [r7, #32]
 800e6d4:	e853 3f00 	ldrex	r3, [r3]
 800e6d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e6da:	69fa      	ldr	r2, [r7, #28]
 800e6dc:	4b1e      	ldr	r3, [pc, #120]	; (800e758 <UART_EndRxTransfer+0xc8>)
 800e6de:	4013      	ands	r3, r2
 800e6e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	3308      	adds	r3, #8
 800e6e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e6ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e6f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6f2:	e841 2300 	strex	r3, r2, [r1]
 800e6f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d1e5      	bne.n	800e6ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e702:	2b01      	cmp	r3, #1
 800e704:	d118      	bne.n	800e738 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	e853 3f00 	ldrex	r3, [r3]
 800e712:	60bb      	str	r3, [r7, #8]
   return(result);
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	f023 0310 	bic.w	r3, r3, #16
 800e71a:	647b      	str	r3, [r7, #68]	; 0x44
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	461a      	mov	r2, r3
 800e722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e724:	61bb      	str	r3, [r7, #24]
 800e726:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e728:	6979      	ldr	r1, [r7, #20]
 800e72a:	69ba      	ldr	r2, [r7, #24]
 800e72c:	e841 2300 	strex	r3, r2, [r1]
 800e730:	613b      	str	r3, [r7, #16]
   return(result);
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d1e6      	bne.n	800e706 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2220      	movs	r2, #32
 800e73c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2200      	movs	r2, #0
 800e744:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2200      	movs	r2, #0
 800e74a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e74c:	bf00      	nop
 800e74e:	3754      	adds	r7, #84	; 0x54
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr
 800e758:	effffffe 	.word	0xeffffffe

0800e75c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b090      	sub	sp, #64	; 0x40
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e768:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	69db      	ldr	r3, [r3, #28]
 800e76e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e772:	d037      	beq.n	800e7e4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e776:	2200      	movs	r2, #0
 800e778:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e77c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	3308      	adds	r3, #8
 800e782:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e786:	e853 3f00 	ldrex	r3, [r3]
 800e78a:	623b      	str	r3, [r7, #32]
   return(result);
 800e78c:	6a3b      	ldr	r3, [r7, #32]
 800e78e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e792:	63bb      	str	r3, [r7, #56]	; 0x38
 800e794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	3308      	adds	r3, #8
 800e79a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e79c:	633a      	str	r2, [r7, #48]	; 0x30
 800e79e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7a4:	e841 2300 	strex	r3, r2, [r1]
 800e7a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d1e5      	bne.n	800e77c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	e853 3f00 	ldrex	r3, [r3]
 800e7bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7c4:	637b      	str	r3, [r7, #52]	; 0x34
 800e7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ce:	61fb      	str	r3, [r7, #28]
 800e7d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7d2:	69b9      	ldr	r1, [r7, #24]
 800e7d4:	69fa      	ldr	r2, [r7, #28]
 800e7d6:	e841 2300 	strex	r3, r2, [r1]
 800e7da:	617b      	str	r3, [r7, #20]
   return(result);
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d1e6      	bne.n	800e7b0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e7e2:	e002      	b.n	800e7ea <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e7e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e7e6:	f7f4 fc57 	bl	8003098 <HAL_UART_TxCpltCallback>
}
 800e7ea:	bf00      	nop
 800e7ec:	3740      	adds	r7, #64	; 0x40
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b084      	sub	sp, #16
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e800:	68f8      	ldr	r0, [r7, #12]
 800e802:	f7fe fe13 	bl	800d42c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e806:	bf00      	nop
 800e808:	3710      	adds	r7, #16
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}

0800e80e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e80e:	b580      	push	{r7, lr}
 800e810:	b09c      	sub	sp, #112	; 0x70
 800e812:	af00      	add	r7, sp, #0
 800e814:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e81a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	69db      	ldr	r3, [r3, #28]
 800e820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e824:	d071      	beq.n	800e90a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e828:	2200      	movs	r2, #0
 800e82a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e82e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e836:	e853 3f00 	ldrex	r3, [r3]
 800e83a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e83c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e83e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e842:	66bb      	str	r3, [r7, #104]	; 0x68
 800e844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	461a      	mov	r2, r3
 800e84a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e84c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e84e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e850:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e852:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e854:	e841 2300 	strex	r3, r2, [r1]
 800e858:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e85a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d1e6      	bne.n	800e82e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	3308      	adds	r3, #8
 800e866:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e86a:	e853 3f00 	ldrex	r3, [r3]
 800e86e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e872:	f023 0301 	bic.w	r3, r3, #1
 800e876:	667b      	str	r3, [r7, #100]	; 0x64
 800e878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	3308      	adds	r3, #8
 800e87e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e880:	647a      	str	r2, [r7, #68]	; 0x44
 800e882:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e884:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e888:	e841 2300 	strex	r3, r2, [r1]
 800e88c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e88e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e890:	2b00      	cmp	r3, #0
 800e892:	d1e5      	bne.n	800e860 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	3308      	adds	r3, #8
 800e89a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89e:	e853 3f00 	ldrex	r3, [r3]
 800e8a2:	623b      	str	r3, [r7, #32]
   return(result);
 800e8a4:	6a3b      	ldr	r3, [r7, #32]
 800e8a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8aa:	663b      	str	r3, [r7, #96]	; 0x60
 800e8ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	3308      	adds	r3, #8
 800e8b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e8b4:	633a      	str	r2, [r7, #48]	; 0x30
 800e8b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8bc:	e841 2300 	strex	r3, r2, [r1]
 800e8c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d1e5      	bne.n	800e894 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e8c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8ca:	2220      	movs	r2, #32
 800e8cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	d118      	bne.n	800e90a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	e853 3f00 	ldrex	r3, [r3]
 800e8e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	f023 0310 	bic.w	r3, r3, #16
 800e8ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e8ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8f6:	61fb      	str	r3, [r7, #28]
 800e8f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8fa:	69b9      	ldr	r1, [r7, #24]
 800e8fc:	69fa      	ldr	r2, [r7, #28]
 800e8fe:	e841 2300 	strex	r3, r2, [r1]
 800e902:	617b      	str	r3, [r7, #20]
   return(result);
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d1e6      	bne.n	800e8d8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e90a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e90c:	2200      	movs	r2, #0
 800e90e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e914:	2b01      	cmp	r3, #1
 800e916:	d107      	bne.n	800e928 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e91a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e91e:	4619      	mov	r1, r3
 800e920:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e922:	f7fe fda1 	bl	800d468 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e926:	e002      	b.n	800e92e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800e928:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e92a:	f7fe fd89 	bl	800d440 <HAL_UART_RxCpltCallback>
}
 800e92e:	bf00      	nop
 800e930:	3770      	adds	r7, #112	; 0x70
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}

0800e936 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e936:	b580      	push	{r7, lr}
 800e938:	b084      	sub	sp, #16
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e942:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2201      	movs	r2, #1
 800e948:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d109      	bne.n	800e966 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e958:	085b      	lsrs	r3, r3, #1
 800e95a:	b29b      	uxth	r3, r3
 800e95c:	4619      	mov	r1, r3
 800e95e:	68f8      	ldr	r0, [r7, #12]
 800e960:	f7fe fd82 	bl	800d468 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e964:	e002      	b.n	800e96c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e966:	68f8      	ldr	r0, [r7, #12]
 800e968:	f7fe fd74 	bl	800d454 <HAL_UART_RxHalfCpltCallback>
}
 800e96c:	bf00      	nop
 800e96e:	3710      	adds	r7, #16
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b086      	sub	sp, #24
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e980:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e988:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e990:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	689b      	ldr	r3, [r3, #8]
 800e998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e99c:	2b80      	cmp	r3, #128	; 0x80
 800e99e:	d109      	bne.n	800e9b4 <UART_DMAError+0x40>
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	2b21      	cmp	r3, #33	; 0x21
 800e9a4:	d106      	bne.n	800e9b4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e9ae:	6978      	ldr	r0, [r7, #20]
 800e9b0:	f7ff fe2c 	bl	800e60c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	689b      	ldr	r3, [r3, #8]
 800e9ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9be:	2b40      	cmp	r3, #64	; 0x40
 800e9c0:	d109      	bne.n	800e9d6 <UART_DMAError+0x62>
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2b22      	cmp	r3, #34	; 0x22
 800e9c6:	d106      	bne.n	800e9d6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e9d0:	6978      	ldr	r0, [r7, #20]
 800e9d2:	f7ff fe5d 	bl	800e690 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9dc:	f043 0210 	orr.w	r2, r3, #16
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e9e6:	6978      	ldr	r0, [r7, #20]
 800e9e8:	f7f2 fd3c 	bl	8001464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9ec:	bf00      	nop
 800e9ee:	3718      	adds	r7, #24
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}

0800e9f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b084      	sub	sp, #16
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2200      	movs	r2, #0
 800ea06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ea12:	68f8      	ldr	r0, [r7, #12]
 800ea14:	f7f2 fd26 	bl	8001464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea18:	bf00      	nop
 800ea1a:	3710      	adds	r7, #16
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b088      	sub	sp, #32
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	e853 3f00 	ldrex	r3, [r3]
 800ea34:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea3c:	61fb      	str	r3, [r7, #28]
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	461a      	mov	r2, r3
 800ea44:	69fb      	ldr	r3, [r7, #28]
 800ea46:	61bb      	str	r3, [r7, #24]
 800ea48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea4a:	6979      	ldr	r1, [r7, #20]
 800ea4c:	69ba      	ldr	r2, [r7, #24]
 800ea4e:	e841 2300 	strex	r3, r2, [r1]
 800ea52:	613b      	str	r3, [r7, #16]
   return(result);
 800ea54:	693b      	ldr	r3, [r7, #16]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d1e6      	bne.n	800ea28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2220      	movs	r2, #32
 800ea5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2200      	movs	r2, #0
 800ea66:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f7f4 fb15 	bl	8003098 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea6e:	bf00      	nop
 800ea70:	3720      	adds	r7, #32
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}

0800ea76 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ea76:	b480      	push	{r7}
 800ea78:	b083      	sub	sp, #12
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ea7e:	bf00      	nop
 800ea80:	370c      	adds	r7, #12
 800ea82:	46bd      	mov	sp, r7
 800ea84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea88:	4770      	bx	lr

0800ea8a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ea8a:	b480      	push	{r7}
 800ea8c:	b083      	sub	sp, #12
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ea92:	bf00      	nop
 800ea94:	370c      	adds	r7, #12
 800ea96:	46bd      	mov	sp, r7
 800ea98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9c:	4770      	bx	lr

0800ea9e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ea9e:	b480      	push	{r7}
 800eaa0:	b083      	sub	sp, #12
 800eaa2:	af00      	add	r7, sp, #0
 800eaa4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800eaa6:	bf00      	nop
 800eaa8:	370c      	adds	r7, #12
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab0:	4770      	bx	lr

0800eab2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eab2:	b480      	push	{r7}
 800eab4:	b085      	sub	sp, #20
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d101      	bne.n	800eac8 <HAL_UARTEx_DisableFifoMode+0x16>
 800eac4:	2302      	movs	r3, #2
 800eac6:	e027      	b.n	800eb18 <HAL_UARTEx_DisableFifoMode+0x66>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2201      	movs	r2, #1
 800eacc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2224      	movs	r2, #36	; 0x24
 800ead4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	681a      	ldr	r2, [r3, #0]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f022 0201 	bic.w	r2, r2, #1
 800eaee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800eaf6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2200      	movs	r2, #0
 800eafc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	68fa      	ldr	r2, [r7, #12]
 800eb04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2220      	movs	r2, #32
 800eb0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2200      	movs	r2, #0
 800eb12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eb16:	2300      	movs	r3, #0
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3714      	adds	r7, #20
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb22:	4770      	bx	lr

0800eb24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eb34:	2b01      	cmp	r3, #1
 800eb36:	d101      	bne.n	800eb3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eb38:	2302      	movs	r3, #2
 800eb3a:	e02d      	b.n	800eb98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2201      	movs	r2, #1
 800eb40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2224      	movs	r2, #36	; 0x24
 800eb48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	681a      	ldr	r2, [r3, #0]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f022 0201 	bic.w	r2, r2, #1
 800eb62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	689b      	ldr	r3, [r3, #8]
 800eb6a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	683a      	ldr	r2, [r7, #0]
 800eb74:	430a      	orrs	r2, r1
 800eb76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f000 f84f 	bl	800ec1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2220      	movs	r2, #32
 800eb8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2200      	movs	r2, #0
 800eb92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eb96:	2300      	movs	r3, #0
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3710      	adds	r7, #16
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b084      	sub	sp, #16
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	d101      	bne.n	800ebb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ebb4:	2302      	movs	r3, #2
 800ebb6:	e02d      	b.n	800ec14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2224      	movs	r2, #36	; 0x24
 800ebc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f022 0201 	bic.w	r2, r2, #1
 800ebde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	689b      	ldr	r3, [r3, #8]
 800ebe6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	683a      	ldr	r2, [r7, #0]
 800ebf0:	430a      	orrs	r2, r1
 800ebf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f000 f811 	bl	800ec1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	68fa      	ldr	r2, [r7, #12]
 800ec00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2220      	movs	r2, #32
 800ec06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ec12:	2300      	movs	r3, #0
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3710      	adds	r7, #16
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b085      	sub	sp, #20
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d108      	bne.n	800ec3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2201      	movs	r2, #1
 800ec30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2201      	movs	r2, #1
 800ec38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ec3c:	e031      	b.n	800eca2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ec3e:	2310      	movs	r3, #16
 800ec40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ec42:	2310      	movs	r3, #16
 800ec44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	689b      	ldr	r3, [r3, #8]
 800ec4c:	0e5b      	lsrs	r3, r3, #25
 800ec4e:	b2db      	uxtb	r3, r3
 800ec50:	f003 0307 	and.w	r3, r3, #7
 800ec54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	689b      	ldr	r3, [r3, #8]
 800ec5c:	0f5b      	lsrs	r3, r3, #29
 800ec5e:	b2db      	uxtb	r3, r3
 800ec60:	f003 0307 	and.w	r3, r3, #7
 800ec64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec66:	7bbb      	ldrb	r3, [r7, #14]
 800ec68:	7b3a      	ldrb	r2, [r7, #12]
 800ec6a:	4911      	ldr	r1, [pc, #68]	; (800ecb0 <UARTEx_SetNbDataToProcess+0x94>)
 800ec6c:	5c8a      	ldrb	r2, [r1, r2]
 800ec6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ec72:	7b3a      	ldrb	r2, [r7, #12]
 800ec74:	490f      	ldr	r1, [pc, #60]	; (800ecb4 <UARTEx_SetNbDataToProcess+0x98>)
 800ec76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec78:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec7c:	b29a      	uxth	r2, r3
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec84:	7bfb      	ldrb	r3, [r7, #15]
 800ec86:	7b7a      	ldrb	r2, [r7, #13]
 800ec88:	4909      	ldr	r1, [pc, #36]	; (800ecb0 <UARTEx_SetNbDataToProcess+0x94>)
 800ec8a:	5c8a      	ldrb	r2, [r1, r2]
 800ec8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ec90:	7b7a      	ldrb	r2, [r7, #13]
 800ec92:	4908      	ldr	r1, [pc, #32]	; (800ecb4 <UARTEx_SetNbDataToProcess+0x98>)
 800ec94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec96:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800eca2:	bf00      	nop
 800eca4:	3714      	adds	r7, #20
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr
 800ecae:	bf00      	nop
 800ecb0:	0800f368 	.word	0x0800f368
 800ecb4:	0800f370 	.word	0x0800f370

0800ecb8 <__cxa_pure_virtual>:
 800ecb8:	b508      	push	{r3, lr}
 800ecba:	f000 f80d 	bl	800ecd8 <_ZSt9terminatev>

0800ecbe <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ecbe:	b508      	push	{r3, lr}
 800ecc0:	4780      	blx	r0
 800ecc2:	f000 f80e 	bl	800ece2 <abort>
	...

0800ecc8 <_ZSt13get_terminatev>:
 800ecc8:	4b02      	ldr	r3, [pc, #8]	; (800ecd4 <_ZSt13get_terminatev+0xc>)
 800ecca:	6818      	ldr	r0, [r3, #0]
 800eccc:	f3bf 8f5b 	dmb	ish
 800ecd0:	4770      	bx	lr
 800ecd2:	bf00      	nop
 800ecd4:	24000010 	.word	0x24000010

0800ecd8 <_ZSt9terminatev>:
 800ecd8:	b508      	push	{r3, lr}
 800ecda:	f7ff fff5 	bl	800ecc8 <_ZSt13get_terminatev>
 800ecde:	f7ff ffee 	bl	800ecbe <_ZN10__cxxabiv111__terminateEPFvvE>

0800ece2 <abort>:
 800ece2:	b508      	push	{r3, lr}
 800ece4:	2006      	movs	r0, #6
 800ece6:	f000 f873 	bl	800edd0 <raise>
 800ecea:	2001      	movs	r0, #1
 800ecec:	f7f5 f966 	bl	8003fbc <_exit>

0800ecf0 <__errno>:
 800ecf0:	4b01      	ldr	r3, [pc, #4]	; (800ecf8 <__errno+0x8>)
 800ecf2:	6818      	ldr	r0, [r3, #0]
 800ecf4:	4770      	bx	lr
 800ecf6:	bf00      	nop
 800ecf8:	24000014 	.word	0x24000014

0800ecfc <__libc_init_array>:
 800ecfc:	b570      	push	{r4, r5, r6, lr}
 800ecfe:	4d0d      	ldr	r5, [pc, #52]	; (800ed34 <__libc_init_array+0x38>)
 800ed00:	4c0d      	ldr	r4, [pc, #52]	; (800ed38 <__libc_init_array+0x3c>)
 800ed02:	1b64      	subs	r4, r4, r5
 800ed04:	10a4      	asrs	r4, r4, #2
 800ed06:	2600      	movs	r6, #0
 800ed08:	42a6      	cmp	r6, r4
 800ed0a:	d109      	bne.n	800ed20 <__libc_init_array+0x24>
 800ed0c:	4d0b      	ldr	r5, [pc, #44]	; (800ed3c <__libc_init_array+0x40>)
 800ed0e:	4c0c      	ldr	r4, [pc, #48]	; (800ed40 <__libc_init_array+0x44>)
 800ed10:	f000 f9b0 	bl	800f074 <_init>
 800ed14:	1b64      	subs	r4, r4, r5
 800ed16:	10a4      	asrs	r4, r4, #2
 800ed18:	2600      	movs	r6, #0
 800ed1a:	42a6      	cmp	r6, r4
 800ed1c:	d105      	bne.n	800ed2a <__libc_init_array+0x2e>
 800ed1e:	bd70      	pop	{r4, r5, r6, pc}
 800ed20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed24:	4798      	blx	r3
 800ed26:	3601      	adds	r6, #1
 800ed28:	e7ee      	b.n	800ed08 <__libc_init_array+0xc>
 800ed2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed2e:	4798      	blx	r3
 800ed30:	3601      	adds	r6, #1
 800ed32:	e7f2      	b.n	800ed1a <__libc_init_array+0x1e>
 800ed34:	0800f380 	.word	0x0800f380
 800ed38:	0800f380 	.word	0x0800f380
 800ed3c:	0800f380 	.word	0x0800f380
 800ed40:	0800f388 	.word	0x0800f388

0800ed44 <memcpy>:
 800ed44:	440a      	add	r2, r1
 800ed46:	4291      	cmp	r1, r2
 800ed48:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed4c:	d100      	bne.n	800ed50 <memcpy+0xc>
 800ed4e:	4770      	bx	lr
 800ed50:	b510      	push	{r4, lr}
 800ed52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed5a:	4291      	cmp	r1, r2
 800ed5c:	d1f9      	bne.n	800ed52 <memcpy+0xe>
 800ed5e:	bd10      	pop	{r4, pc}

0800ed60 <memset>:
 800ed60:	4402      	add	r2, r0
 800ed62:	4603      	mov	r3, r0
 800ed64:	4293      	cmp	r3, r2
 800ed66:	d100      	bne.n	800ed6a <memset+0xa>
 800ed68:	4770      	bx	lr
 800ed6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ed6e:	e7f9      	b.n	800ed64 <memset+0x4>

0800ed70 <realloc>:
 800ed70:	4b02      	ldr	r3, [pc, #8]	; (800ed7c <realloc+0xc>)
 800ed72:	460a      	mov	r2, r1
 800ed74:	4601      	mov	r1, r0
 800ed76:	6818      	ldr	r0, [r3, #0]
 800ed78:	f000 b8da 	b.w	800ef30 <_realloc_r>
 800ed7c:	24000014 	.word	0x24000014

0800ed80 <_raise_r>:
 800ed80:	291f      	cmp	r1, #31
 800ed82:	b538      	push	{r3, r4, r5, lr}
 800ed84:	4604      	mov	r4, r0
 800ed86:	460d      	mov	r5, r1
 800ed88:	d904      	bls.n	800ed94 <_raise_r+0x14>
 800ed8a:	2316      	movs	r3, #22
 800ed8c:	6003      	str	r3, [r0, #0]
 800ed8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed92:	bd38      	pop	{r3, r4, r5, pc}
 800ed94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ed96:	b112      	cbz	r2, 800ed9e <_raise_r+0x1e>
 800ed98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ed9c:	b94b      	cbnz	r3, 800edb2 <_raise_r+0x32>
 800ed9e:	4620      	mov	r0, r4
 800eda0:	f000 f830 	bl	800ee04 <_getpid_r>
 800eda4:	462a      	mov	r2, r5
 800eda6:	4601      	mov	r1, r0
 800eda8:	4620      	mov	r0, r4
 800edaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edae:	f000 b817 	b.w	800ede0 <_kill_r>
 800edb2:	2b01      	cmp	r3, #1
 800edb4:	d00a      	beq.n	800edcc <_raise_r+0x4c>
 800edb6:	1c59      	adds	r1, r3, #1
 800edb8:	d103      	bne.n	800edc2 <_raise_r+0x42>
 800edba:	2316      	movs	r3, #22
 800edbc:	6003      	str	r3, [r0, #0]
 800edbe:	2001      	movs	r0, #1
 800edc0:	e7e7      	b.n	800ed92 <_raise_r+0x12>
 800edc2:	2400      	movs	r4, #0
 800edc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800edc8:	4628      	mov	r0, r5
 800edca:	4798      	blx	r3
 800edcc:	2000      	movs	r0, #0
 800edce:	e7e0      	b.n	800ed92 <_raise_r+0x12>

0800edd0 <raise>:
 800edd0:	4b02      	ldr	r3, [pc, #8]	; (800eddc <raise+0xc>)
 800edd2:	4601      	mov	r1, r0
 800edd4:	6818      	ldr	r0, [r3, #0]
 800edd6:	f7ff bfd3 	b.w	800ed80 <_raise_r>
 800edda:	bf00      	nop
 800eddc:	24000014 	.word	0x24000014

0800ede0 <_kill_r>:
 800ede0:	b538      	push	{r3, r4, r5, lr}
 800ede2:	4d07      	ldr	r5, [pc, #28]	; (800ee00 <_kill_r+0x20>)
 800ede4:	2300      	movs	r3, #0
 800ede6:	4604      	mov	r4, r0
 800ede8:	4608      	mov	r0, r1
 800edea:	4611      	mov	r1, r2
 800edec:	602b      	str	r3, [r5, #0]
 800edee:	f7f5 f8d5 	bl	8003f9c <_kill>
 800edf2:	1c43      	adds	r3, r0, #1
 800edf4:	d102      	bne.n	800edfc <_kill_r+0x1c>
 800edf6:	682b      	ldr	r3, [r5, #0]
 800edf8:	b103      	cbz	r3, 800edfc <_kill_r+0x1c>
 800edfa:	6023      	str	r3, [r4, #0]
 800edfc:	bd38      	pop	{r3, r4, r5, pc}
 800edfe:	bf00      	nop
 800ee00:	24001a80 	.word	0x24001a80

0800ee04 <_getpid_r>:
 800ee04:	f7f5 b8c2 	b.w	8003f8c <_getpid>

0800ee08 <sbrk_aligned>:
 800ee08:	b570      	push	{r4, r5, r6, lr}
 800ee0a:	4e0e      	ldr	r6, [pc, #56]	; (800ee44 <sbrk_aligned+0x3c>)
 800ee0c:	460c      	mov	r4, r1
 800ee0e:	6831      	ldr	r1, [r6, #0]
 800ee10:	4605      	mov	r5, r0
 800ee12:	b911      	cbnz	r1, 800ee1a <sbrk_aligned+0x12>
 800ee14:	f000 f8bc 	bl	800ef90 <_sbrk_r>
 800ee18:	6030      	str	r0, [r6, #0]
 800ee1a:	4621      	mov	r1, r4
 800ee1c:	4628      	mov	r0, r5
 800ee1e:	f000 f8b7 	bl	800ef90 <_sbrk_r>
 800ee22:	1c43      	adds	r3, r0, #1
 800ee24:	d00a      	beq.n	800ee3c <sbrk_aligned+0x34>
 800ee26:	1cc4      	adds	r4, r0, #3
 800ee28:	f024 0403 	bic.w	r4, r4, #3
 800ee2c:	42a0      	cmp	r0, r4
 800ee2e:	d007      	beq.n	800ee40 <sbrk_aligned+0x38>
 800ee30:	1a21      	subs	r1, r4, r0
 800ee32:	4628      	mov	r0, r5
 800ee34:	f000 f8ac 	bl	800ef90 <_sbrk_r>
 800ee38:	3001      	adds	r0, #1
 800ee3a:	d101      	bne.n	800ee40 <sbrk_aligned+0x38>
 800ee3c:	f04f 34ff 	mov.w	r4, #4294967295
 800ee40:	4620      	mov	r0, r4
 800ee42:	bd70      	pop	{r4, r5, r6, pc}
 800ee44:	24001a7c 	.word	0x24001a7c

0800ee48 <_malloc_r>:
 800ee48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee4c:	1ccd      	adds	r5, r1, #3
 800ee4e:	f025 0503 	bic.w	r5, r5, #3
 800ee52:	3508      	adds	r5, #8
 800ee54:	2d0c      	cmp	r5, #12
 800ee56:	bf38      	it	cc
 800ee58:	250c      	movcc	r5, #12
 800ee5a:	2d00      	cmp	r5, #0
 800ee5c:	4607      	mov	r7, r0
 800ee5e:	db01      	blt.n	800ee64 <_malloc_r+0x1c>
 800ee60:	42a9      	cmp	r1, r5
 800ee62:	d905      	bls.n	800ee70 <_malloc_r+0x28>
 800ee64:	230c      	movs	r3, #12
 800ee66:	603b      	str	r3, [r7, #0]
 800ee68:	2600      	movs	r6, #0
 800ee6a:	4630      	mov	r0, r6
 800ee6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee70:	4e2e      	ldr	r6, [pc, #184]	; (800ef2c <_malloc_r+0xe4>)
 800ee72:	f000 f89d 	bl	800efb0 <__malloc_lock>
 800ee76:	6833      	ldr	r3, [r6, #0]
 800ee78:	461c      	mov	r4, r3
 800ee7a:	bb34      	cbnz	r4, 800eeca <_malloc_r+0x82>
 800ee7c:	4629      	mov	r1, r5
 800ee7e:	4638      	mov	r0, r7
 800ee80:	f7ff ffc2 	bl	800ee08 <sbrk_aligned>
 800ee84:	1c43      	adds	r3, r0, #1
 800ee86:	4604      	mov	r4, r0
 800ee88:	d14d      	bne.n	800ef26 <_malloc_r+0xde>
 800ee8a:	6834      	ldr	r4, [r6, #0]
 800ee8c:	4626      	mov	r6, r4
 800ee8e:	2e00      	cmp	r6, #0
 800ee90:	d140      	bne.n	800ef14 <_malloc_r+0xcc>
 800ee92:	6823      	ldr	r3, [r4, #0]
 800ee94:	4631      	mov	r1, r6
 800ee96:	4638      	mov	r0, r7
 800ee98:	eb04 0803 	add.w	r8, r4, r3
 800ee9c:	f000 f878 	bl	800ef90 <_sbrk_r>
 800eea0:	4580      	cmp	r8, r0
 800eea2:	d13a      	bne.n	800ef1a <_malloc_r+0xd2>
 800eea4:	6821      	ldr	r1, [r4, #0]
 800eea6:	3503      	adds	r5, #3
 800eea8:	1a6d      	subs	r5, r5, r1
 800eeaa:	f025 0503 	bic.w	r5, r5, #3
 800eeae:	3508      	adds	r5, #8
 800eeb0:	2d0c      	cmp	r5, #12
 800eeb2:	bf38      	it	cc
 800eeb4:	250c      	movcc	r5, #12
 800eeb6:	4629      	mov	r1, r5
 800eeb8:	4638      	mov	r0, r7
 800eeba:	f7ff ffa5 	bl	800ee08 <sbrk_aligned>
 800eebe:	3001      	adds	r0, #1
 800eec0:	d02b      	beq.n	800ef1a <_malloc_r+0xd2>
 800eec2:	6823      	ldr	r3, [r4, #0]
 800eec4:	442b      	add	r3, r5
 800eec6:	6023      	str	r3, [r4, #0]
 800eec8:	e00e      	b.n	800eee8 <_malloc_r+0xa0>
 800eeca:	6822      	ldr	r2, [r4, #0]
 800eecc:	1b52      	subs	r2, r2, r5
 800eece:	d41e      	bmi.n	800ef0e <_malloc_r+0xc6>
 800eed0:	2a0b      	cmp	r2, #11
 800eed2:	d916      	bls.n	800ef02 <_malloc_r+0xba>
 800eed4:	1961      	adds	r1, r4, r5
 800eed6:	42a3      	cmp	r3, r4
 800eed8:	6025      	str	r5, [r4, #0]
 800eeda:	bf18      	it	ne
 800eedc:	6059      	strne	r1, [r3, #4]
 800eede:	6863      	ldr	r3, [r4, #4]
 800eee0:	bf08      	it	eq
 800eee2:	6031      	streq	r1, [r6, #0]
 800eee4:	5162      	str	r2, [r4, r5]
 800eee6:	604b      	str	r3, [r1, #4]
 800eee8:	4638      	mov	r0, r7
 800eeea:	f104 060b 	add.w	r6, r4, #11
 800eeee:	f000 f865 	bl	800efbc <__malloc_unlock>
 800eef2:	f026 0607 	bic.w	r6, r6, #7
 800eef6:	1d23      	adds	r3, r4, #4
 800eef8:	1af2      	subs	r2, r6, r3
 800eefa:	d0b6      	beq.n	800ee6a <_malloc_r+0x22>
 800eefc:	1b9b      	subs	r3, r3, r6
 800eefe:	50a3      	str	r3, [r4, r2]
 800ef00:	e7b3      	b.n	800ee6a <_malloc_r+0x22>
 800ef02:	6862      	ldr	r2, [r4, #4]
 800ef04:	42a3      	cmp	r3, r4
 800ef06:	bf0c      	ite	eq
 800ef08:	6032      	streq	r2, [r6, #0]
 800ef0a:	605a      	strne	r2, [r3, #4]
 800ef0c:	e7ec      	b.n	800eee8 <_malloc_r+0xa0>
 800ef0e:	4623      	mov	r3, r4
 800ef10:	6864      	ldr	r4, [r4, #4]
 800ef12:	e7b2      	b.n	800ee7a <_malloc_r+0x32>
 800ef14:	4634      	mov	r4, r6
 800ef16:	6876      	ldr	r6, [r6, #4]
 800ef18:	e7b9      	b.n	800ee8e <_malloc_r+0x46>
 800ef1a:	230c      	movs	r3, #12
 800ef1c:	603b      	str	r3, [r7, #0]
 800ef1e:	4638      	mov	r0, r7
 800ef20:	f000 f84c 	bl	800efbc <__malloc_unlock>
 800ef24:	e7a1      	b.n	800ee6a <_malloc_r+0x22>
 800ef26:	6025      	str	r5, [r4, #0]
 800ef28:	e7de      	b.n	800eee8 <_malloc_r+0xa0>
 800ef2a:	bf00      	nop
 800ef2c:	24001a78 	.word	0x24001a78

0800ef30 <_realloc_r>:
 800ef30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef34:	4680      	mov	r8, r0
 800ef36:	4614      	mov	r4, r2
 800ef38:	460e      	mov	r6, r1
 800ef3a:	b921      	cbnz	r1, 800ef46 <_realloc_r+0x16>
 800ef3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef40:	4611      	mov	r1, r2
 800ef42:	f7ff bf81 	b.w	800ee48 <_malloc_r>
 800ef46:	b92a      	cbnz	r2, 800ef54 <_realloc_r+0x24>
 800ef48:	f000 f83e 	bl	800efc8 <_free_r>
 800ef4c:	4625      	mov	r5, r4
 800ef4e:	4628      	mov	r0, r5
 800ef50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef54:	f000 f884 	bl	800f060 <_malloc_usable_size_r>
 800ef58:	4284      	cmp	r4, r0
 800ef5a:	4607      	mov	r7, r0
 800ef5c:	d802      	bhi.n	800ef64 <_realloc_r+0x34>
 800ef5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ef62:	d812      	bhi.n	800ef8a <_realloc_r+0x5a>
 800ef64:	4621      	mov	r1, r4
 800ef66:	4640      	mov	r0, r8
 800ef68:	f7ff ff6e 	bl	800ee48 <_malloc_r>
 800ef6c:	4605      	mov	r5, r0
 800ef6e:	2800      	cmp	r0, #0
 800ef70:	d0ed      	beq.n	800ef4e <_realloc_r+0x1e>
 800ef72:	42bc      	cmp	r4, r7
 800ef74:	4622      	mov	r2, r4
 800ef76:	4631      	mov	r1, r6
 800ef78:	bf28      	it	cs
 800ef7a:	463a      	movcs	r2, r7
 800ef7c:	f7ff fee2 	bl	800ed44 <memcpy>
 800ef80:	4631      	mov	r1, r6
 800ef82:	4640      	mov	r0, r8
 800ef84:	f000 f820 	bl	800efc8 <_free_r>
 800ef88:	e7e1      	b.n	800ef4e <_realloc_r+0x1e>
 800ef8a:	4635      	mov	r5, r6
 800ef8c:	e7df      	b.n	800ef4e <_realloc_r+0x1e>
	...

0800ef90 <_sbrk_r>:
 800ef90:	b538      	push	{r3, r4, r5, lr}
 800ef92:	4d06      	ldr	r5, [pc, #24]	; (800efac <_sbrk_r+0x1c>)
 800ef94:	2300      	movs	r3, #0
 800ef96:	4604      	mov	r4, r0
 800ef98:	4608      	mov	r0, r1
 800ef9a:	602b      	str	r3, [r5, #0]
 800ef9c:	f7f5 f818 	bl	8003fd0 <_sbrk>
 800efa0:	1c43      	adds	r3, r0, #1
 800efa2:	d102      	bne.n	800efaa <_sbrk_r+0x1a>
 800efa4:	682b      	ldr	r3, [r5, #0]
 800efa6:	b103      	cbz	r3, 800efaa <_sbrk_r+0x1a>
 800efa8:	6023      	str	r3, [r4, #0]
 800efaa:	bd38      	pop	{r3, r4, r5, pc}
 800efac:	24001a80 	.word	0x24001a80

0800efb0 <__malloc_lock>:
 800efb0:	4801      	ldr	r0, [pc, #4]	; (800efb8 <__malloc_lock+0x8>)
 800efb2:	f000 b85d 	b.w	800f070 <__retarget_lock_acquire_recursive>
 800efb6:	bf00      	nop
 800efb8:	24001a84 	.word	0x24001a84

0800efbc <__malloc_unlock>:
 800efbc:	4801      	ldr	r0, [pc, #4]	; (800efc4 <__malloc_unlock+0x8>)
 800efbe:	f000 b858 	b.w	800f072 <__retarget_lock_release_recursive>
 800efc2:	bf00      	nop
 800efc4:	24001a84 	.word	0x24001a84

0800efc8 <_free_r>:
 800efc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800efca:	2900      	cmp	r1, #0
 800efcc:	d044      	beq.n	800f058 <_free_r+0x90>
 800efce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efd2:	9001      	str	r0, [sp, #4]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	f1a1 0404 	sub.w	r4, r1, #4
 800efda:	bfb8      	it	lt
 800efdc:	18e4      	addlt	r4, r4, r3
 800efde:	f7ff ffe7 	bl	800efb0 <__malloc_lock>
 800efe2:	4a1e      	ldr	r2, [pc, #120]	; (800f05c <_free_r+0x94>)
 800efe4:	9801      	ldr	r0, [sp, #4]
 800efe6:	6813      	ldr	r3, [r2, #0]
 800efe8:	b933      	cbnz	r3, 800eff8 <_free_r+0x30>
 800efea:	6063      	str	r3, [r4, #4]
 800efec:	6014      	str	r4, [r2, #0]
 800efee:	b003      	add	sp, #12
 800eff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eff4:	f7ff bfe2 	b.w	800efbc <__malloc_unlock>
 800eff8:	42a3      	cmp	r3, r4
 800effa:	d908      	bls.n	800f00e <_free_r+0x46>
 800effc:	6825      	ldr	r5, [r4, #0]
 800effe:	1961      	adds	r1, r4, r5
 800f000:	428b      	cmp	r3, r1
 800f002:	bf01      	itttt	eq
 800f004:	6819      	ldreq	r1, [r3, #0]
 800f006:	685b      	ldreq	r3, [r3, #4]
 800f008:	1949      	addeq	r1, r1, r5
 800f00a:	6021      	streq	r1, [r4, #0]
 800f00c:	e7ed      	b.n	800efea <_free_r+0x22>
 800f00e:	461a      	mov	r2, r3
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	b10b      	cbz	r3, 800f018 <_free_r+0x50>
 800f014:	42a3      	cmp	r3, r4
 800f016:	d9fa      	bls.n	800f00e <_free_r+0x46>
 800f018:	6811      	ldr	r1, [r2, #0]
 800f01a:	1855      	adds	r5, r2, r1
 800f01c:	42a5      	cmp	r5, r4
 800f01e:	d10b      	bne.n	800f038 <_free_r+0x70>
 800f020:	6824      	ldr	r4, [r4, #0]
 800f022:	4421      	add	r1, r4
 800f024:	1854      	adds	r4, r2, r1
 800f026:	42a3      	cmp	r3, r4
 800f028:	6011      	str	r1, [r2, #0]
 800f02a:	d1e0      	bne.n	800efee <_free_r+0x26>
 800f02c:	681c      	ldr	r4, [r3, #0]
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	6053      	str	r3, [r2, #4]
 800f032:	4421      	add	r1, r4
 800f034:	6011      	str	r1, [r2, #0]
 800f036:	e7da      	b.n	800efee <_free_r+0x26>
 800f038:	d902      	bls.n	800f040 <_free_r+0x78>
 800f03a:	230c      	movs	r3, #12
 800f03c:	6003      	str	r3, [r0, #0]
 800f03e:	e7d6      	b.n	800efee <_free_r+0x26>
 800f040:	6825      	ldr	r5, [r4, #0]
 800f042:	1961      	adds	r1, r4, r5
 800f044:	428b      	cmp	r3, r1
 800f046:	bf04      	itt	eq
 800f048:	6819      	ldreq	r1, [r3, #0]
 800f04a:	685b      	ldreq	r3, [r3, #4]
 800f04c:	6063      	str	r3, [r4, #4]
 800f04e:	bf04      	itt	eq
 800f050:	1949      	addeq	r1, r1, r5
 800f052:	6021      	streq	r1, [r4, #0]
 800f054:	6054      	str	r4, [r2, #4]
 800f056:	e7ca      	b.n	800efee <_free_r+0x26>
 800f058:	b003      	add	sp, #12
 800f05a:	bd30      	pop	{r4, r5, pc}
 800f05c:	24001a78 	.word	0x24001a78

0800f060 <_malloc_usable_size_r>:
 800f060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f064:	1f18      	subs	r0, r3, #4
 800f066:	2b00      	cmp	r3, #0
 800f068:	bfbc      	itt	lt
 800f06a:	580b      	ldrlt	r3, [r1, r0]
 800f06c:	18c0      	addlt	r0, r0, r3
 800f06e:	4770      	bx	lr

0800f070 <__retarget_lock_acquire_recursive>:
 800f070:	4770      	bx	lr

0800f072 <__retarget_lock_release_recursive>:
 800f072:	4770      	bx	lr

0800f074 <_init>:
 800f074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f076:	bf00      	nop
 800f078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f07a:	bc08      	pop	{r3}
 800f07c:	469e      	mov	lr, r3
 800f07e:	4770      	bx	lr

0800f080 <_fini>:
 800f080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f082:	bf00      	nop
 800f084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f086:	bc08      	pop	{r3}
 800f088:	469e      	mov	lr, r3
 800f08a:	4770      	bx	lr
