
PME_AMR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2dc  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800f5ac  0800f5ac  0001f5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f8a4  0800f8a4  0001f8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f8ac  0800f8ac  0001f8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f8b4  0800f8b4  0001f8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800f8b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001a90  24000078  0800f930  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001b08  0800f930  00021b08  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021a41  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003b41  00000000  00000000  00041ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001538  00000000  00000000  00045628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013f8  00000000  00000000  00046b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035f2d  00000000  00000000  00047f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d551  00000000  00000000  0007de85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015397d  00000000  00000000  0009b3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001eed53  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005dd4  00000000  00000000  001eeda4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f594 	.word	0x0800f594

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800f594 	.word	0x0800f594

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <Control_Init>:
/**
 * @ brief Include all the initial function
 * @ retval None
 * */
void Control_Init()
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b0ab      	sub	sp, #172	; 0xac
 8000684:	af28      	add	r7, sp, #160	; 0xa0
	Hardware_Info_Init();
 8000686:	f000 fae9 	bl	8000c5c <Hardware_Info_Init>
	Control_Timer_Init();
 800068a:	f000 fab7 	bl	8000bfc <Control_Timer_Init>
	Motor_Driver_Init(&WheelA, M1_PHASE_Pin, M1_PHASE_GPIO_port, M1_Encoder_timer, M1_Encoder_timerchannel, M1_Encoder_dir, M1_PWM_timer, M1_PWM_timerchannel);
	Motor_Driver_Init(&WheelB, M2_PHASE_Pin, M2_PHASE_GPIO_port, M2_Encoder_timer, M2_Encoder_timerchannel, M2_Encoder_dir, M2_PWM_timer, M2_PWM_timerchannel);
	Motor_Driver_Init(&WheelC, M3_PHASE_Pin, M3_PHASE_GPIO_port, M3_Encoder_timer, M3_Encoder_timerchannel, M3_Encoder_dir, M3_PWM_timer, M3_PWM_timerchannel);
#endif
#ifdef G2_18V17
	Motor_Driver_Init(&WheelA, M1_DIR_Pin, M1_DIR_GPIO_port, M1_Encoder_timer, M1_Encoder_timerchannel, M1_Encoder_dir, M1_PWM_timer, M1_PWM_timerchannel);
 800068e:	4cba      	ldr	r4, [pc, #744]	; (8000978 <Control_Init+0x2f8>)
 8000690:	2300      	movs	r3, #0
 8000692:	9327      	str	r3, [sp, #156]	; 0x9c
 8000694:	4ab9      	ldr	r2, [pc, #740]	; (800097c <Control_Init+0x2fc>)
 8000696:	ab14      	add	r3, sp, #80	; 0x50
 8000698:	4611      	mov	r1, r2
 800069a:	224c      	movs	r2, #76	; 0x4c
 800069c:	4618      	mov	r0, r3
 800069e:	f00e fde1 	bl	800f264 <memcpy>
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80006a8:	2304      	movs	r3, #4
 80006aa:	9312      	str	r3, [sp, #72]	; 0x48
 80006ac:	4668      	mov	r0, sp
 80006ae:	1d23      	adds	r3, r4, #4
 80006b0:	2248      	movs	r2, #72	; 0x48
 80006b2:	4619      	mov	r1, r3
 80006b4:	f00e fdd6 	bl	800f264 <memcpy>
 80006b8:	6823      	ldr	r3, [r4, #0]
 80006ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006be:	49b0      	ldr	r1, [pc, #704]	; (8000980 <Control_Init+0x300>)
 80006c0:	48b0      	ldr	r0, [pc, #704]	; (8000984 <Control_Init+0x304>)
 80006c2:	f000 fa66 	bl	8000b92 <Motor_Driver_Init>
	Motor_Driver_Init(&WheelB, M2_DIR_Pin, M2_DIR_GPIO_port, M2_Encoder_timer, M2_Encoder_timerchannel, M2_Encoder_dir, M2_PWM_timer, M2_PWM_timerchannel);
 80006c6:	4cb0      	ldr	r4, [pc, #704]	; (8000988 <Control_Init+0x308>)
 80006c8:	2304      	movs	r3, #4
 80006ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80006cc:	4aab      	ldr	r2, [pc, #684]	; (800097c <Control_Init+0x2fc>)
 80006ce:	ab14      	add	r3, sp, #80	; 0x50
 80006d0:	4611      	mov	r1, r2
 80006d2:	224c      	movs	r2, #76	; 0x4c
 80006d4:	4618      	mov	r0, r3
 80006d6:	f00e fdc5 	bl	800f264 <memcpy>
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	9313      	str	r3, [sp, #76]	; 0x4c
 80006e0:	2304      	movs	r3, #4
 80006e2:	9312      	str	r3, [sp, #72]	; 0x48
 80006e4:	4668      	mov	r0, sp
 80006e6:	1d23      	adds	r3, r4, #4
 80006e8:	2248      	movs	r2, #72	; 0x48
 80006ea:	4619      	mov	r1, r3
 80006ec:	f00e fdba 	bl	800f264 <memcpy>
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006f6:	49a5      	ldr	r1, [pc, #660]	; (800098c <Control_Init+0x30c>)
 80006f8:	48a5      	ldr	r0, [pc, #660]	; (8000990 <Control_Init+0x310>)
 80006fa:	f000 fa4a 	bl	8000b92 <Motor_Driver_Init>
	Motor_Driver_Init(&WheelC, M3_DIR_Pin, M3_DIR_GPIO_port, M3_Encoder_timer, M3_Encoder_timerchannel, M3_Encoder_dir, M3_PWM_timer, M3_PWM_timerchannel);
 80006fe:	4ca5      	ldr	r4, [pc, #660]	; (8000994 <Control_Init+0x314>)
 8000700:	2300      	movs	r3, #0
 8000702:	9327      	str	r3, [sp, #156]	; 0x9c
 8000704:	4aa4      	ldr	r2, [pc, #656]	; (8000998 <Control_Init+0x318>)
 8000706:	ab14      	add	r3, sp, #80	; 0x50
 8000708:	4611      	mov	r1, r2
 800070a:	224c      	movs	r2, #76	; 0x4c
 800070c:	4618      	mov	r0, r3
 800070e:	f00e fda9 	bl	800f264 <memcpy>
 8000712:	2301      	movs	r3, #1
 8000714:	9313      	str	r3, [sp, #76]	; 0x4c
 8000716:	2304      	movs	r3, #4
 8000718:	9312      	str	r3, [sp, #72]	; 0x48
 800071a:	4668      	mov	r0, sp
 800071c:	1d23      	adds	r3, r4, #4
 800071e:	2248      	movs	r2, #72	; 0x48
 8000720:	4619      	mov	r1, r3
 8000722:	f00e fd9f 	bl	800f264 <memcpy>
 8000726:	6823      	ldr	r3, [r4, #0]
 8000728:	2208      	movs	r2, #8
 800072a:	499c      	ldr	r1, [pc, #624]	; (800099c <Control_Init+0x31c>)
 800072c:	489c      	ldr	r0, [pc, #624]	; (80009a0 <Control_Init+0x320>)
 800072e:	f000 fa30 	bl	8000b92 <Motor_Driver_Init>
	Motor_Driver_Init(&WheelD, M4_DIR_Pin, M4_DIR_GPIO_port, M4_Encoder_timer, M4_Encoder_timerchannel, M4_Encoder_dir, M4_PWM_timer, M4_PWM_timerchannel);
 8000732:	4c9c      	ldr	r4, [pc, #624]	; (80009a4 <Control_Init+0x324>)
 8000734:	2304      	movs	r3, #4
 8000736:	9327      	str	r3, [sp, #156]	; 0x9c
 8000738:	4a97      	ldr	r2, [pc, #604]	; (8000998 <Control_Init+0x318>)
 800073a:	ab14      	add	r3, sp, #80	; 0x50
 800073c:	4611      	mov	r1, r2
 800073e:	224c      	movs	r2, #76	; 0x4c
 8000740:	4618      	mov	r0, r3
 8000742:	f00e fd8f 	bl	800f264 <memcpy>
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	9313      	str	r3, [sp, #76]	; 0x4c
 800074c:	2304      	movs	r3, #4
 800074e:	9312      	str	r3, [sp, #72]	; 0x48
 8000750:	4668      	mov	r0, sp
 8000752:	1d23      	adds	r3, r4, #4
 8000754:	2248      	movs	r2, #72	; 0x48
 8000756:	4619      	mov	r1, r3
 8000758:	f00e fd84 	bl	800f264 <memcpy>
 800075c:	6823      	ldr	r3, [r4, #0]
 800075e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000762:	4991      	ldr	r1, [pc, #580]	; (80009a8 <Control_Init+0x328>)
 8000764:	4891      	ldr	r0, [pc, #580]	; (80009ac <Control_Init+0x32c>)
 8000766:	f000 fa14 	bl	8000b92 <Motor_Driver_Init>
#endif

	Pid_Param_Init(&WheelA, M1_KP, M1_KI, M1_KD);
 800076a:	ed9f 2b79 	vldr	d2, [pc, #484]	; 8000950 <Control_Init+0x2d0>
 800076e:	ed9f 1b7a 	vldr	d1, [pc, #488]	; 8000958 <Control_Init+0x2d8>
 8000772:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 8000960 <Control_Init+0x2e0>
 8000776:	4883      	ldr	r0, [pc, #524]	; (8000984 <Control_Init+0x304>)
 8000778:	f000 f9ec 	bl	8000b54 <Pid_Param_Init>
	Pid_Param_Init(&WheelB, M2_KP, M2_KI, M2_KD);
 800077c:	ed9f 2b74 	vldr	d2, [pc, #464]	; 8000950 <Control_Init+0x2d0>
 8000780:	eeb3 1b0e 	vmov.f64	d1, #62	; 0x41f00000  30.0
 8000784:	eeb2 0b0a 	vmov.f64	d0, #42	; 0x41500000  13.0
 8000788:	4881      	ldr	r0, [pc, #516]	; (8000990 <Control_Init+0x310>)
 800078a:	f000 f9e3 	bl	8000b54 <Pid_Param_Init>
	Pid_Param_Init(&WheelC, M3_KP, M3_KI, M3_KD);
 800078e:	ed9f 2b70 	vldr	d2, [pc, #448]	; 8000950 <Control_Init+0x2d0>
 8000792:	eeb3 1b0e 	vmov.f64	d1, #62	; 0x41f00000  30.0
 8000796:	ed9f 0b74 	vldr	d0, [pc, #464]	; 8000968 <Control_Init+0x2e8>
 800079a:	4881      	ldr	r0, [pc, #516]	; (80009a0 <Control_Init+0x320>)
 800079c:	f000 f9da 	bl	8000b54 <Pid_Param_Init>
	Pid_Param_Init(&WheelD, M4_KP, M4_KI, M4_KD);
 80007a0:	ed9f 2b6b 	vldr	d2, [pc, #428]	; 8000950 <Control_Init+0x2d0>
 80007a4:	ed9f 1b72 	vldr	d1, [pc, #456]	; 8000970 <Control_Init+0x2f0>
 80007a8:	eeb1 0b08 	vmov.f64	d0, #24	; 0x40c00000  6.0
 80007ac:	487f      	ldr	r0, [pc, #508]	; (80009ac <Control_Init+0x32c>)
 80007ae:	f000 f9d1 	bl	8000b54 <Pid_Param_Init>

	i = 0;
 80007b2:	4b7f      	ldr	r3, [pc, #508]	; (80009b0 <Control_Init+0x330>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
	limit_integral = 1.0;
 80007b8:	497e      	ldr	r1, [pc, #504]	; (80009b4 <Control_Init+0x334>)
 80007ba:	f04f 0200 	mov.w	r2, #0
 80007be:	4b7e      	ldr	r3, [pc, #504]	; (80009b8 <Control_Init+0x338>)
 80007c0:	e9c1 2300 	strd	r2, r3, [r1]
	pwm_arr = M1_PWM_timer.Init.Period;
 80007c4:	4b6d      	ldr	r3, [pc, #436]	; (800097c <Control_Init+0x2fc>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	ee07 3a90 	vmov	s15, r3
 80007cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007d0:	4b7a      	ldr	r3, [pc, #488]	; (80009bc <Control_Init+0x33c>)
 80007d2:	ed83 7b00 	vstr	d7, [r3]

	// PCLK1_freq, APB1 timer frequency
	int32_t PCLK1_freq = HAL_RCC_GetPCLK1Freq();
 80007d6:	f009 f941 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 80007da:	4603      	mov	r3, r0
 80007dc:	607b      	str	r3, [r7, #4]
	/*if((RCC->CFGR & RCC_D2CFGR_D2PPRE1) != 0)
	{
		PCLK1_freq *=2;
	}*/

	int32_t timer_interrupt_freq = (double)PCLK1_freq / (Encoder_Interrupt_timer.Init.Prescaler + 1) / (Encoder_Interrupt_timer.Init.Period + 1);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	ee07 3a90 	vmov	s15, r3
 80007e4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007e8:	4b75      	ldr	r3, [pc, #468]	; (80009c0 <Control_Init+0x340>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	3301      	adds	r3, #1
 80007ee:	ee07 3a90 	vmov	s15, r3
 80007f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007f6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80007fa:	4b71      	ldr	r3, [pc, #452]	; (80009c0 <Control_Init+0x340>)
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	3301      	adds	r3, #1
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000808:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800080c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000810:	ee17 3a90 	vmov	r3, s15
 8000814:	603b      	str	r3, [r7, #0]
	control_period = (double)(1 / (double)timer_interrupt_freq);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	ee07 3a90 	vmov	s15, r3
 800081c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000820:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000824:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000828:	4b66      	ldr	r3, [pc, #408]	; (80009c4 <Control_Init+0x344>)
 800082a:	ed83 7b00 	vstr	d7, [r3]

	WheelA.integral = 0.0;
 800082e:	4955      	ldr	r1, [pc, #340]	; (8000984 <Control_Init+0x304>)
 8000830:	f04f 0200 	mov.w	r2, #0
 8000834:	f04f 0300 	mov.w	r3, #0
 8000838:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	WheelB.integral = 0.0;
 800083c:	4954      	ldr	r1, [pc, #336]	; (8000990 <Control_Init+0x310>)
 800083e:	f04f 0200 	mov.w	r2, #0
 8000842:	f04f 0300 	mov.w	r3, #0
 8000846:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	WheelC.integral = 0.0;
 800084a:	4955      	ldr	r1, [pc, #340]	; (80009a0 <Control_Init+0x320>)
 800084c:	f04f 0200 	mov.w	r2, #0
 8000850:	f04f 0300 	mov.w	r3, #0
 8000854:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	WheelD.integral = 0.0;
 8000858:	4954      	ldr	r1, [pc, #336]	; (80009ac <Control_Init+0x32c>)
 800085a:	f04f 0200 	mov.w	r2, #0
 800085e:	f04f 0300 	mov.w	r3, #0
 8000862:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	WheelA.goal = 0.0;
 8000866:	4947      	ldr	r1, [pc, #284]	; (8000984 <Control_Init+0x304>)
 8000868:	f04f 0200 	mov.w	r2, #0
 800086c:	f04f 0300 	mov.w	r3, #0
 8000870:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	WheelB.goal = 0.0;
 8000874:	4946      	ldr	r1, [pc, #280]	; (8000990 <Control_Init+0x310>)
 8000876:	f04f 0200 	mov.w	r2, #0
 800087a:	f04f 0300 	mov.w	r3, #0
 800087e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	WheelC.goal = 0.0;
 8000882:	4947      	ldr	r1, [pc, #284]	; (80009a0 <Control_Init+0x320>)
 8000884:	f04f 0200 	mov.w	r2, #0
 8000888:	f04f 0300 	mov.w	r3, #0
 800088c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	WheelD.goal = 0.0;
 8000890:	4946      	ldr	r1, [pc, #280]	; (80009ac <Control_Init+0x32c>)
 8000892:	f04f 0200 	mov.w	r2, #0
 8000896:	f04f 0300 	mov.w	r3, #0
 800089a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	// stop chassis
	HAL_GPIO_WritePin(WheelA.DIR_pin_type, WheelA.DIR_pin_Num, GPIO_PIN_RESET);
 800089e:	4b39      	ldr	r3, [pc, #228]	; (8000984 <Control_Init+0x304>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a2:	4a38      	ldr	r2, [pc, #224]	; (8000984 <Control_Init+0x304>)
 80008a4:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 80008a8:	2200      	movs	r2, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f008 f948 	bl	8008b40 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelA.pwm_timer), WheelA.pwm_timer_channel, 0);
 80008b0:	4b34      	ldr	r3, [pc, #208]	; (8000984 <Control_Init+0x304>)
 80008b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d105      	bne.n	80008c6 <Control_Init+0x246>
 80008ba:	4b32      	ldr	r3, [pc, #200]	; (8000984 <Control_Init+0x304>)
 80008bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80008c0:	2200      	movs	r2, #0
 80008c2:	635a      	str	r2, [r3, #52]	; 0x34
 80008c4:	e030      	b.n	8000928 <Control_Init+0x2a8>
 80008c6:	4b2f      	ldr	r3, [pc, #188]	; (8000984 <Control_Init+0x304>)
 80008c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008cc:	2b04      	cmp	r3, #4
 80008ce:	d105      	bne.n	80008dc <Control_Init+0x25c>
 80008d0:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <Control_Init+0x304>)
 80008d2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80008d6:	2300      	movs	r3, #0
 80008d8:	6393      	str	r3, [r2, #56]	; 0x38
 80008da:	e025      	b.n	8000928 <Control_Init+0x2a8>
 80008dc:	4b29      	ldr	r3, [pc, #164]	; (8000984 <Control_Init+0x304>)
 80008de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008e2:	2b08      	cmp	r3, #8
 80008e4:	d105      	bne.n	80008f2 <Control_Init+0x272>
 80008e6:	4b27      	ldr	r3, [pc, #156]	; (8000984 <Control_Init+0x304>)
 80008e8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80008ec:	2300      	movs	r3, #0
 80008ee:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008f0:	e01a      	b.n	8000928 <Control_Init+0x2a8>
 80008f2:	4b24      	ldr	r3, [pc, #144]	; (8000984 <Control_Init+0x304>)
 80008f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80008f8:	2b0c      	cmp	r3, #12
 80008fa:	d105      	bne.n	8000908 <Control_Init+0x288>
 80008fc:	4b21      	ldr	r3, [pc, #132]	; (8000984 <Control_Init+0x304>)
 80008fe:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000902:	2300      	movs	r3, #0
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	e00f      	b.n	8000928 <Control_Init+0x2a8>
 8000908:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <Control_Init+0x304>)
 800090a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800090e:	2b10      	cmp	r3, #16
 8000910:	d105      	bne.n	800091e <Control_Init+0x29e>
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <Control_Init+0x304>)
 8000914:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000918:	2300      	movs	r3, #0
 800091a:	6593      	str	r3, [r2, #88]	; 0x58
 800091c:	e004      	b.n	8000928 <Control_Init+0x2a8>
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <Control_Init+0x304>)
 8000920:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000924:	2300      	movs	r3, #0
 8000926:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_GPIO_WritePin(WheelB.DIR_pin_type, WheelB.DIR_pin_Num, GPIO_PIN_RESET);
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <Control_Init+0x310>)
 800092a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092c:	4a18      	ldr	r2, [pc, #96]	; (8000990 <Control_Init+0x310>)
 800092e:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8000932:	2200      	movs	r2, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f008 f903 	bl	8008b40 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelB.pwm_timer), WheelB.pwm_timer_channel, 0);
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <Control_Init+0x310>)
 800093c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000940:	2b00      	cmp	r3, #0
 8000942:	d141      	bne.n	80009c8 <Control_Init+0x348>
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <Control_Init+0x310>)
 8000946:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800094a:	2200      	movs	r2, #0
 800094c:	635a      	str	r2, [r3, #52]	; 0x34
 800094e:	e06c      	b.n	8000a2a <Control_Init+0x3aa>
	...
 800095c:	40518000 	.word	0x40518000
 8000960:	66666666 	.word	0x66666666
 8000964:	40066666 	.word	0x40066666
 8000968:	33333333 	.word	0x33333333
 800096c:	40173333 	.word	0x40173333
 8000970:	00000000 	.word	0x00000000
 8000974:	40490000 	.word	0x40490000
 8000978:	2400175c 	.word	0x2400175c
 800097c:	2400188c 	.word	0x2400188c
 8000980:	58020c00 	.word	0x58020c00
 8000984:	240000f0 	.word	0x240000f0
 8000988:	24001840 	.word	0x24001840
 800098c:	58020400 	.word	0x58020400
 8000990:	24000200 	.word	0x24000200
 8000994:	240017a8 	.word	0x240017a8
 8000998:	240018d8 	.word	0x240018d8
 800099c:	58021000 	.word	0x58021000
 80009a0:	24000310 	.word	0x24000310
 80009a4:	240017f4 	.word	0x240017f4
 80009a8:	58020800 	.word	0x58020800
 80009ac:	24000420 	.word	0x24000420
 80009b0:	24000530 	.word	0x24000530
 80009b4:	240000d8 	.word	0x240000d8
 80009b8:	3ff00000 	.word	0x3ff00000
 80009bc:	240000e0 	.word	0x240000e0
 80009c0:	24001924 	.word	0x24001924
 80009c4:	240000e8 	.word	0x240000e8
 80009c8:	4b5f      	ldr	r3, [pc, #380]	; (8000b48 <Control_Init+0x4c8>)
 80009ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	d105      	bne.n	80009de <Control_Init+0x35e>
 80009d2:	4b5d      	ldr	r3, [pc, #372]	; (8000b48 <Control_Init+0x4c8>)
 80009d4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80009d8:	2300      	movs	r3, #0
 80009da:	6393      	str	r3, [r2, #56]	; 0x38
 80009dc:	e025      	b.n	8000a2a <Control_Init+0x3aa>
 80009de:	4b5a      	ldr	r3, [pc, #360]	; (8000b48 <Control_Init+0x4c8>)
 80009e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009e4:	2b08      	cmp	r3, #8
 80009e6:	d105      	bne.n	80009f4 <Control_Init+0x374>
 80009e8:	4b57      	ldr	r3, [pc, #348]	; (8000b48 <Control_Init+0x4c8>)
 80009ea:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80009ee:	2300      	movs	r3, #0
 80009f0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80009f2:	e01a      	b.n	8000a2a <Control_Init+0x3aa>
 80009f4:	4b54      	ldr	r3, [pc, #336]	; (8000b48 <Control_Init+0x4c8>)
 80009f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009fa:	2b0c      	cmp	r3, #12
 80009fc:	d105      	bne.n	8000a0a <Control_Init+0x38a>
 80009fe:	4b52      	ldr	r3, [pc, #328]	; (8000b48 <Control_Init+0x4c8>)
 8000a00:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a04:	2300      	movs	r3, #0
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
 8000a08:	e00f      	b.n	8000a2a <Control_Init+0x3aa>
 8000a0a:	4b4f      	ldr	r3, [pc, #316]	; (8000b48 <Control_Init+0x4c8>)
 8000a0c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a10:	2b10      	cmp	r3, #16
 8000a12:	d105      	bne.n	8000a20 <Control_Init+0x3a0>
 8000a14:	4b4c      	ldr	r3, [pc, #304]	; (8000b48 <Control_Init+0x4c8>)
 8000a16:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a1e:	e004      	b.n	8000a2a <Control_Init+0x3aa>
 8000a20:	4b49      	ldr	r3, [pc, #292]	; (8000b48 <Control_Init+0x4c8>)
 8000a22:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a26:	2300      	movs	r3, #0
 8000a28:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_GPIO_WritePin(WheelC.DIR_pin_type, WheelC.DIR_pin_Num, GPIO_PIN_RESET);
 8000a2a:	4b48      	ldr	r3, [pc, #288]	; (8000b4c <Control_Init+0x4cc>)
 8000a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2e:	4a47      	ldr	r2, [pc, #284]	; (8000b4c <Control_Init+0x4cc>)
 8000a30:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8000a34:	2200      	movs	r2, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f008 f882 	bl	8008b40 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelC.pwm_timer), WheelC.pwm_timer_channel, 0);
 8000a3c:	4b43      	ldr	r3, [pc, #268]	; (8000b4c <Control_Init+0x4cc>)
 8000a3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d105      	bne.n	8000a52 <Control_Init+0x3d2>
 8000a46:	4b41      	ldr	r3, [pc, #260]	; (8000b4c <Control_Init+0x4cc>)
 8000a48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	635a      	str	r2, [r3, #52]	; 0x34
 8000a50:	e030      	b.n	8000ab4 <Control_Init+0x434>
 8000a52:	4b3e      	ldr	r3, [pc, #248]	; (8000b4c <Control_Init+0x4cc>)
 8000a54:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d105      	bne.n	8000a68 <Control_Init+0x3e8>
 8000a5c:	4b3b      	ldr	r3, [pc, #236]	; (8000b4c <Control_Init+0x4cc>)
 8000a5e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a62:	2300      	movs	r3, #0
 8000a64:	6393      	str	r3, [r2, #56]	; 0x38
 8000a66:	e025      	b.n	8000ab4 <Control_Init+0x434>
 8000a68:	4b38      	ldr	r3, [pc, #224]	; (8000b4c <Control_Init+0x4cc>)
 8000a6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a6e:	2b08      	cmp	r3, #8
 8000a70:	d105      	bne.n	8000a7e <Control_Init+0x3fe>
 8000a72:	4b36      	ldr	r3, [pc, #216]	; (8000b4c <Control_Init+0x4cc>)
 8000a74:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a78:	2300      	movs	r3, #0
 8000a7a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000a7c:	e01a      	b.n	8000ab4 <Control_Init+0x434>
 8000a7e:	4b33      	ldr	r3, [pc, #204]	; (8000b4c <Control_Init+0x4cc>)
 8000a80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a84:	2b0c      	cmp	r3, #12
 8000a86:	d105      	bne.n	8000a94 <Control_Init+0x414>
 8000a88:	4b30      	ldr	r3, [pc, #192]	; (8000b4c <Control_Init+0x4cc>)
 8000a8a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000a8e:	2300      	movs	r3, #0
 8000a90:	6413      	str	r3, [r2, #64]	; 0x40
 8000a92:	e00f      	b.n	8000ab4 <Control_Init+0x434>
 8000a94:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <Control_Init+0x4cc>)
 8000a96:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000a9a:	2b10      	cmp	r3, #16
 8000a9c:	d105      	bne.n	8000aaa <Control_Init+0x42a>
 8000a9e:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <Control_Init+0x4cc>)
 8000aa0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa8:	e004      	b.n	8000ab4 <Control_Init+0x434>
 8000aaa:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <Control_Init+0x4cc>)
 8000aac:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_GPIO_WritePin(WheelD.DIR_pin_type, WheelD.DIR_pin_Num, GPIO_PIN_RESET);
 8000ab4:	4b26      	ldr	r3, [pc, #152]	; (8000b50 <Control_Init+0x4d0>)
 8000ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab8:	4a25      	ldr	r2, [pc, #148]	; (8000b50 <Control_Init+0x4d0>)
 8000aba:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8000abe:	2200      	movs	r2, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f008 f83d 	bl	8008b40 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000ac6:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <Control_Init+0x4d0>)
 8000ac8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d105      	bne.n	8000adc <Control_Init+0x45c>
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <Control_Init+0x4d0>)
 8000ad2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ada:	e030      	b.n	8000b3e <Control_Init+0x4be>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <Control_Init+0x4d0>)
 8000ade:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	d105      	bne.n	8000af2 <Control_Init+0x472>
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <Control_Init+0x4d0>)
 8000ae8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000aec:	2300      	movs	r3, #0
 8000aee:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000af0:	e025      	b.n	8000b3e <Control_Init+0x4be>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <Control_Init+0x4d0>)
 8000af4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000af8:	2b08      	cmp	r3, #8
 8000afa:	d105      	bne.n	8000b08 <Control_Init+0x488>
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <Control_Init+0x4d0>)
 8000afe:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b02:	2300      	movs	r3, #0
 8000b04:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000b06:	e01a      	b.n	8000b3e <Control_Init+0x4be>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <Control_Init+0x4d0>)
 8000b0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000b0e:	2b0c      	cmp	r3, #12
 8000b10:	d105      	bne.n	8000b1e <Control_Init+0x49e>
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <Control_Init+0x4d0>)
 8000b14:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b18:	2300      	movs	r3, #0
 8000b1a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b1c:	e00f      	b.n	8000b3e <Control_Init+0x4be>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <Control_Init+0x4d0>)
 8000b20:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000b24:	2b10      	cmp	r3, #16
 8000b26:	d105      	bne.n	8000b34 <Control_Init+0x4b4>
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <Control_Init+0x4d0>)
 8000b2a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b2e:	2300      	movs	r3, #0
 8000b30:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000b32:	e004      	b.n	8000b3e <Control_Init+0x4be>
	__HAL_TIM_SET_COMPARE(&(WheelD.pwm_timer), WheelD.pwm_timer_channel, 0);
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <Control_Init+0x4d0>)
 8000b36:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd90      	pop	{r4, r7, pc}
 8000b46:	bf00      	nop
 8000b48:	24000200 	.word	0x24000200
 8000b4c:	24000310 	.word	0x24000310
 8000b50:	24000420 	.word	0x24000420

08000b54 <Pid_Param_Init>:
/**
 * @ brief assign the pid gain value into the PID_Controll object
 * @ retval None
 * */
void Pid_Param_Init(PID_Control *Wheel_, double kp, double ki, double kd)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	; 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	61f8      	str	r0, [r7, #28]
 8000b5c:	ed87 0b04 	vstr	d0, [r7, #16]
 8000b60:	ed87 1b02 	vstr	d1, [r7, #8]
 8000b64:	ed87 2b00 	vstr	d2, [r7]
	Wheel_->Kp = kp;
 8000b68:	69f9      	ldr	r1, [r7, #28]
 8000b6a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b6e:	e9c1 2300 	strd	r2, r3, [r1]
	Wheel_->Ki = ki;
 8000b72:	69f9      	ldr	r1, [r7, #28]
 8000b74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b78:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Wheel_->Kd = kd;
 8000b7c:	69f9      	ldr	r1, [r7, #28]
 8000b7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b82:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8000b86:	bf00      	nop
 8000b88:	3724      	adds	r7, #36	; 0x24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <Motor_Driver_Init>:
#ifdef G2_18V17
void Motor_Driver_Init(PID_Control *Wheel_,
		GPIO_TypeDef *DIR_pin_type, uint16_t DIR_pin_num_,
		TIM_HandleTypeDef encoder_timer_, uint32_t encoder_timer_channel_, int encoder_dir_,
		TIM_HandleTypeDef pwm_timer_, uint32_t pwm_timer_channel_)
{
 8000b92:	b082      	sub	sp, #8
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	61fb      	str	r3, [r7, #28]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	80fb      	strh	r3, [r7, #6]
	Wheel_->DIR_pin_type = DIR_pin_type;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	661a      	str	r2, [r3, #96]	; 0x60
	Wheel_->DIR_pin_Num = DIR_pin_num_;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	88fa      	ldrh	r2, [r7, #6]
 8000bae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	Wheel_->encoder_timer = encoder_timer_;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3368      	adds	r3, #104	; 0x68
 8000bb6:	f107 011c 	add.w	r1, r7, #28
 8000bba:	224c      	movs	r2, #76	; 0x4c
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f00e fb51 	bl	800f264 <memcpy>
	Wheel_->encoder_timer_channel = encoder_timer_channel_;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000bc6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	Wheel_->encoder_dir = encoder_dir_;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000bce:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	Wheel_->pwm_timer = pwm_timer_;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	33bc      	adds	r3, #188	; 0xbc
 8000bd6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000bda:	224c      	movs	r2, #76	; 0x4c
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f00e fb41 	bl	800f264 <memcpy>
	Wheel_->pwm_timer_channel = pwm_timer_channel_;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000be8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bf6:	b002      	add	sp, #8
 8000bf8:	4770      	bx	lr
	...

08000bfc <Control_Timer_Init>:
 * @ brief initialize the timers that encoder and pwm used
 * @ all the definition in the function are in "control.h"
 * @ retval None
 * */
void Control_Timer_Init()
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&M1_Encoder_timer, M1_Encoder_timerchannel);
 8000c00:	2104      	movs	r1, #4
 8000c02:	4810      	ldr	r0, [pc, #64]	; (8000c44 <Control_Timer_Init+0x48>)
 8000c04:	f00b f810 	bl	800bc28 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M1_PWM_timer, M1_PWM_timerchannel);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	480f      	ldr	r0, [pc, #60]	; (8000c48 <Control_Timer_Init+0x4c>)
 8000c0c:	f00a fe4a 	bl	800b8a4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M2_Encoder_timer, M2_Encoder_timerchannel);
 8000c10:	2104      	movs	r1, #4
 8000c12:	480e      	ldr	r0, [pc, #56]	; (8000c4c <Control_Timer_Init+0x50>)
 8000c14:	f00b f808 	bl	800bc28 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M2_PWM_timer, M2_PWM_timerchannel);
 8000c18:	2104      	movs	r1, #4
 8000c1a:	480b      	ldr	r0, [pc, #44]	; (8000c48 <Control_Timer_Init+0x4c>)
 8000c1c:	f00a fe42 	bl	800b8a4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M3_Encoder_timer, M3_Encoder_timerchannel);
 8000c20:	2104      	movs	r1, #4
 8000c22:	480b      	ldr	r0, [pc, #44]	; (8000c50 <Control_Timer_Init+0x54>)
 8000c24:	f00b f800 	bl	800bc28 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M3_PWM_timer, M3_PWM_timerchannel);
 8000c28:	2100      	movs	r1, #0
 8000c2a:	480a      	ldr	r0, [pc, #40]	; (8000c54 <Control_Timer_Init+0x58>)
 8000c2c:	f00a fe3a 	bl	800b8a4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M4_Encoder_timer, M4_Encoder_timerchannel);
 8000c30:	2104      	movs	r1, #4
 8000c32:	4809      	ldr	r0, [pc, #36]	; (8000c58 <Control_Timer_Init+0x5c>)
 8000c34:	f00a fff8 	bl	800bc28 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M4_PWM_timer, M4_PWM_timerchannel);
 8000c38:	2104      	movs	r1, #4
 8000c3a:	4806      	ldr	r0, [pc, #24]	; (8000c54 <Control_Timer_Init+0x58>)
 8000c3c:	f00a fe32 	bl	800b8a4 <HAL_TIM_PWM_Start>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	2400175c 	.word	0x2400175c
 8000c48:	2400188c 	.word	0x2400188c
 8000c4c:	24001840 	.word	0x24001840
 8000c50:	240017a8 	.word	0x240017a8
 8000c54:	240018d8 	.word	0x240018d8
 8000c58:	240017f4 	.word	0x240017f4

08000c5c <Hardware_Info_Init>:
/**
 * @ brief assign the hardware value for motor and chassis radius error
 * @ retval None
 * */
void Hardware_Info_Init()
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
	radius_error_a = 1.0;
 8000c60:	4911      	ldr	r1, [pc, #68]	; (8000ca8 <Hardware_Info_Init+0x4c>)
 8000c62:	f04f 0200 	mov.w	r2, #0
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <Hardware_Info_Init+0x50>)
 8000c68:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_b = 1.0;
 8000c6c:	4910      	ldr	r1, [pc, #64]	; (8000cb0 <Hardware_Info_Init+0x54>)
 8000c6e:	f04f 0200 	mov.w	r2, #0
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <Hardware_Info_Init+0x50>)
 8000c74:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_c = 1.0;
 8000c78:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <Hardware_Info_Init+0x58>)
 8000c7a:	f04f 0200 	mov.w	r2, #0
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <Hardware_Info_Init+0x50>)
 8000c80:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_d = 1.0;
 8000c84:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <Hardware_Info_Init+0x5c>)
 8000c86:	f04f 0200 	mov.w	r2, #0
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <Hardware_Info_Init+0x50>)
 8000c8c:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_chassis = 1.0;
 8000c90:	490a      	ldr	r1, [pc, #40]	; (8000cbc <Hardware_Info_Init+0x60>)
 8000c92:	f04f 0200 	mov.w	r2, #0
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <Hardware_Info_Init+0x50>)
 8000c98:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	24000098 	.word	0x24000098
 8000cac:	3ff00000 	.word	0x3ff00000
 8000cb0:	240000a0 	.word	0x240000a0
 8000cb4:	240000a8 	.word	0x240000a8
 8000cb8:	240000b0 	.word	0x240000b0
 8000cbc:	240000b8 	.word	0x240000b8

08000cc0 <PID_Controller>:
 * @ brief PID control for the motor
 * @ param Wheel_ the object declare for each motor (WheelA, WheelB, WheelC)
 * @ retval None
 * */
void PID_Controller(PID_Control *Wheel_)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

	Wheel_->CountNum = __HAL_TIM_GetCounter(&Wheel_->encoder_timer)* Wheel_->encoder_dir;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	fb12 f303 	smulbb	r3, r2, r3
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	b21a      	sxth	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	831a      	strh	r2, [r3, #24]

	if(Wheel_ == &WheelA)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4abe      	ldr	r2, [pc, #760]	; (8000fe0 <PID_Controller+0x320>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d113      	bne.n	8000d14 <PID_Controller+0x54>
	{
		Wheel_->rps = (double)Wheel_->CountNum / ((double)4 * encoder_resolution * 3 * control_period);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000cf2:	ee07 3a90 	vmov	s15, r3
 8000cf6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000cfa:	4bba      	ldr	r3, [pc, #744]	; (8000fe4 <PID_Controller+0x324>)
 8000cfc:	ed93 7b00 	vldr	d7, [r3]
 8000d00:	ed9f 6bb3 	vldr	d6, [pc, #716]	; 8000fd0 <PID_Controller+0x310>
 8000d04:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d08:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	ed83 7b08 	vstr	d7, [r3, #32]
 8000d12:	e012      	b.n	8000d3a <PID_Controller+0x7a>
	}
	else
	{
		Wheel_->rps = (double)Wheel_->CountNum / ((double)4 * encoder_resolution * speed_reduction_ratio * control_period);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000d1a:	ee07 3a90 	vmov	s15, r3
 8000d1e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000d22:	4bb0      	ldr	r3, [pc, #704]	; (8000fe4 <PID_Controller+0x324>)
 8000d24:	ed93 7b00 	vldr	d7, [r3]
 8000d28:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8000fd8 <PID_Controller+0x318>
 8000d2c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d30:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	ed83 7b08 	vstr	d7, [r3, #32]
	}

	__HAL_TIM_SetCounter(&Wheel_->encoder_timer ,0);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24
//	{
//		sssss[i] = Wheel_->rps;
//		i++;
//	}

	Wheel_->err = Wheel_->goal - Wheel_->rps;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	ed93 7b08 	vldr	d7, [r3, #32]
 8000d4e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	Wheel_->propotional = (double)Wheel_->err * Wheel_->Kp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	ed93 7b00 	vldr	d7, [r3]
 8000d64:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	Wheel_->integral += (double)Wheel_->err * Wheel_->Ki * control_period;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	ed93 7b02 	vldr	d7, [r3, #8]
 8000d80:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000d84:	4b97      	ldr	r3, [pc, #604]	; (8000fe4 <PID_Controller+0x324>)
 8000d86:	ed93 7b00 	vldr	d7, [r3]
 8000d8a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d8e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	Wheel_->integral = (Wheel_->integral > limit_integral)? limit_integral : Wheel_->integral;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000d9e:	4b92      	ldr	r3, [pc, #584]	; (8000fe8 <PID_Controller+0x328>)
 8000da0:	ed93 7b00 	vldr	d7, [r3]
 8000da4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dac:	dd03      	ble.n	8000db6 <PID_Controller+0xf6>
 8000dae:	4b8e      	ldr	r3, [pc, #568]	; (8000fe8 <PID_Controller+0x328>)
 8000db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db4:	e002      	b.n	8000dbc <PID_Controller+0xfc>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	Wheel_->integral = (Wheel_->integral < (double)(-1) * limit_integral)? (double)(-1) * limit_integral : Wheel_->integral;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000dc8:	4b87      	ldr	r3, [pc, #540]	; (8000fe8 <PID_Controller+0x328>)
 8000dca:	ed93 7b00 	vldr	d7, [r3]
 8000dce:	eeb1 7b47 	vneg.f64	d7, d7
 8000dd2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dda:	d505      	bpl.n	8000de8 <PID_Controller+0x128>
 8000ddc:	4b82      	ldr	r3, [pc, #520]	; (8000fe8 <PID_Controller+0x328>)
 8000dde:	ed93 7b00 	vldr	d7, [r3]
 8000de2:	eeb1 7b47 	vneg.f64	d7, d7
 8000de6:	e002      	b.n	8000dee <PID_Controller+0x12e>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	Wheel_->differential = (double) Wheel_->Kd * (-1) * (Wheel_->rps - Wheel_->rps_before) / control_period;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	ed93 7b04 	vldr	d7, [r3, #16]
 8000dfa:	eeb1 6b47 	vneg.f64	d6, d7
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	ed93 5b08 	vldr	d5, [r3, #32]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8000e0a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000e0e:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000e12:	4b74      	ldr	r3, [pc, #464]	; (8000fe4 <PID_Controller+0x324>)
 8000e14:	ed93 6b00 	vldr	d6, [r3]
 8000e18:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50


	Wheel_->duty = Wheel_->propotional + Wheel_->integral + Wheel_->differential;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000e2e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8000e38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	Wheel_->duty = (Wheel_->duty > 1)? 1 : Wheel_->duty;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000e48:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e4c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e54:	dd03      	ble.n	8000e5e <PID_Controller+0x19e>
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	4b64      	ldr	r3, [pc, #400]	; (8000fec <PID_Controller+0x32c>)
 8000e5c:	e002      	b.n	8000e64 <PID_Controller+0x1a4>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	Wheel_->duty = (Wheel_->duty < -1)? -1 : Wheel_->duty;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000e70:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000e74:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7c:	d503      	bpl.n	8000e86 <PID_Controller+0x1c6>
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	4b5b      	ldr	r3, [pc, #364]	; (8000ff0 <PID_Controller+0x330>)
 8000e84:	e002      	b.n	8000e8c <PID_Controller+0x1cc>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		HAL_GPIO_WritePin(Wheel_->PHASE_pin_type, Wheel_->PHASE_pin_Num, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
	}
#endif
#ifdef G2_18V17
	if(Wheel_->duty >= 0)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000e98:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea0:	f2c0 80aa 	blt.w	8000ff8 <PID_Controller+0x338>
	{
		HAL_GPIO_WritePin(Wheel_->DIR_pin_type, Wheel_->DIR_pin_Num, GPIO_PIN_RESET);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000eae:	2200      	movs	r2, #0
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f007 fe45 	bl	8008b40 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d112      	bne.n	8000ee6 <PID_Controller+0x226>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000ec6:	4b4b      	ldr	r3, [pc, #300]	; (8000ff4 <PID_Controller+0x334>)
 8000ec8:	ed93 7b00 	vldr	d7, [r3]
 8000ecc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ed0:	eeb0 7bc7 	vabs.f64	d7, d7
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000eda:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ede:	ee17 2a90 	vmov	r2, s15
 8000ee2:	635a      	str	r2, [r3, #52]	; 0x34
 8000ee4:	e11b      	b.n	800111e <PID_Controller+0x45e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d112      	bne.n	8000f16 <PID_Controller+0x256>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000ef6:	4b3f      	ldr	r3, [pc, #252]	; (8000ff4 <PID_Controller+0x334>)
 8000ef8:	ed93 7b00 	vldr	d7, [r3]
 8000efc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f00:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000f0a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f0e:	ee17 3a90 	vmov	r3, s15
 8000f12:	6393      	str	r3, [r2, #56]	; 0x38
 8000f14:	e103      	b.n	800111e <PID_Controller+0x45e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d112      	bne.n	8000f46 <PID_Controller+0x286>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f26:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <PID_Controller+0x334>)
 8000f28:	ed93 7b00 	vldr	d7, [r3]
 8000f2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f30:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000f3a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f3e:	ee17 3a90 	vmov	r3, s15
 8000f42:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000f44:	e0eb      	b.n	800111e <PID_Controller+0x45e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f4c:	2b0c      	cmp	r3, #12
 8000f4e:	d112      	bne.n	8000f76 <PID_Controller+0x2b6>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f56:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <PID_Controller+0x334>)
 8000f58:	ed93 7b00 	vldr	d7, [r3]
 8000f5c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f60:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000f6a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f6e:	ee17 3a90 	vmov	r3, s15
 8000f72:	6413      	str	r3, [r2, #64]	; 0x40
 8000f74:	e0d3      	b.n	800111e <PID_Controller+0x45e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f7c:	2b10      	cmp	r3, #16
 8000f7e:	d112      	bne.n	8000fa6 <PID_Controller+0x2e6>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000f86:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <PID_Controller+0x334>)
 8000f88:	ed93 7b00 	vldr	d7, [r3]
 8000f8c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f90:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000f9a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f9e:	ee17 3a90 	vmov	r3, s15
 8000fa2:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa4:	e0bb      	b.n	800111e <PID_Controller+0x45e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <PID_Controller+0x334>)
 8000fae:	ed93 7b00 	vldr	d7, [r3]
 8000fb2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000fb6:	eeb0 7bc7 	vabs.f64	d7, d7
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000fc0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fc4:	ee17 3a90 	vmov	r3, s15
 8000fc8:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000fca:	e0a8      	b.n	800111e <PID_Controller+0x45e>
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	00000000 	.word	0x00000000
 8000fd4:	40b80000 	.word	0x40b80000
 8000fd8:	00000000 	.word	0x00000000
 8000fdc:	40d20000 	.word	0x40d20000
 8000fe0:	240000f0 	.word	0x240000f0
 8000fe4:	240000e8 	.word	0x240000e8
 8000fe8:	240000d8 	.word	0x240000d8
 8000fec:	3ff00000 	.word	0x3ff00000
 8000ff0:	bff00000 	.word	0xbff00000
 8000ff4:	240000e0 	.word	0x240000e0
	}
	else
	{
		HAL_GPIO_WritePin(Wheel_->DIR_pin_type, Wheel_->DIR_pin_Num, GPIO_PIN_SET);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001002:	2201      	movs	r2, #1
 8001004:	4619      	mov	r1, r3
 8001006:	f007 fd9b 	bl	8008b40 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001010:	2b00      	cmp	r3, #0
 8001012:	d112      	bne.n	800103a <PID_Controller+0x37a>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800101a:	4b46      	ldr	r3, [pc, #280]	; (8001134 <PID_Controller+0x474>)
 800101c:	ed93 7b00 	vldr	d7, [r3]
 8001020:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001024:	eeb0 7bc7 	vabs.f64	d7, d7
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800102e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001032:	ee17 2a90 	vmov	r2, s15
 8001036:	635a      	str	r2, [r3, #52]	; 0x34
 8001038:	e071      	b.n	800111e <PID_Controller+0x45e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001040:	2b04      	cmp	r3, #4
 8001042:	d112      	bne.n	800106a <PID_Controller+0x3aa>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800104a:	4b3a      	ldr	r3, [pc, #232]	; (8001134 <PID_Controller+0x474>)
 800104c:	ed93 7b00 	vldr	d7, [r3]
 8001050:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001054:	eeb0 7bc7 	vabs.f64	d7, d7
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800105e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001062:	ee17 3a90 	vmov	r3, s15
 8001066:	6393      	str	r3, [r2, #56]	; 0x38
 8001068:	e059      	b.n	800111e <PID_Controller+0x45e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001070:	2b08      	cmp	r3, #8
 8001072:	d112      	bne.n	800109a <PID_Controller+0x3da>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800107a:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <PID_Controller+0x474>)
 800107c:	ed93 7b00 	vldr	d7, [r3]
 8001080:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001084:	eeb0 7bc7 	vabs.f64	d7, d7
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800108e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001092:	ee17 3a90 	vmov	r3, s15
 8001096:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001098:	e041      	b.n	800111e <PID_Controller+0x45e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010a0:	2b0c      	cmp	r3, #12
 80010a2:	d112      	bne.n	80010ca <PID_Controller+0x40a>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80010aa:	4b22      	ldr	r3, [pc, #136]	; (8001134 <PID_Controller+0x474>)
 80010ac:	ed93 7b00 	vldr	d7, [r3]
 80010b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010b4:	eeb0 7bc7 	vabs.f64	d7, d7
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80010be:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010c2:	ee17 3a90 	vmov	r3, s15
 80010c6:	6413      	str	r3, [r2, #64]	; 0x40
 80010c8:	e029      	b.n	800111e <PID_Controller+0x45e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010d0:	2b10      	cmp	r3, #16
 80010d2:	d112      	bne.n	80010fa <PID_Controller+0x43a>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <PID_Controller+0x474>)
 80010dc:	ed93 7b00 	vldr	d7, [r3]
 80010e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010e4:	eeb0 7bc7 	vabs.f64	d7, d7
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80010ee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010f2:	ee17 3a90 	vmov	r3, s15
 80010f6:	6593      	str	r3, [r2, #88]	; 0x58
 80010f8:	e011      	b.n	800111e <PID_Controller+0x45e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <PID_Controller+0x474>)
 8001102:	ed93 7b00 	vldr	d7, [r3]
 8001106:	ee26 7b07 	vmul.f64	d7, d6, d7
 800110a:	eeb0 7bc7 	vabs.f64	d7, d7
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001114:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001118:	ee17 3a90 	vmov	r3, s15
 800111c:	65d3      	str	r3, [r2, #92]	; 0x5c
	}
#endif

	Wheel_->rps_before = Wheel_->rps;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	240000e0 	.word	0x240000e0

08001138 <Forward_Kinematics>:
 *       /     \        y(+) ←---
 *      B-------C
 * @ retval None
 * */
void Forward_Kinematics(double x, double y, double w)
{
 8001138:	b480      	push	{r7}
 800113a:	b08f      	sub	sp, #60	; 0x3c
 800113c:	af00      	add	r7, sp, #0
 800113e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001142:	ed87 1b02 	vstr	d1, [r7, #8]
 8001146:	ed87 2b00 	vstr	d2, [r7]
	double omega_a = (y + w * chassis_radius * radius_error_chassis)/(wheel_radius * radius_error_a);
 800114a:	ed97 7b00 	vldr	d7, [r7]
 800114e:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8001270 <Forward_Kinematics+0x138>
 8001152:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001156:	4b4c      	ldr	r3, [pc, #304]	; (8001288 <Forward_Kinematics+0x150>)
 8001158:	ed93 7b00 	vldr	d7, [r3]
 800115c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001160:	ed97 7b02 	vldr	d7, [r7, #8]
 8001164:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001168:	4b48      	ldr	r3, [pc, #288]	; (800128c <Forward_Kinematics+0x154>)
 800116a:	ed93 7b00 	vldr	d7, [r3]
 800116e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8001278 <Forward_Kinematics+0x140>
 8001172:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001176:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800117a:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	double omega_b = (-x + w * chassis_radius * radius_error_chassis)/(wheel_radius * radius_error_b);
 800117e:	ed97 7b00 	vldr	d7, [r7]
 8001182:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8001270 <Forward_Kinematics+0x138>
 8001186:	ee27 6b06 	vmul.f64	d6, d7, d6
 800118a:	4b3f      	ldr	r3, [pc, #252]	; (8001288 <Forward_Kinematics+0x150>)
 800118c:	ed93 7b00 	vldr	d7, [r3]
 8001190:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001194:	ed97 7b04 	vldr	d7, [r7, #16]
 8001198:	ee36 5b47 	vsub.f64	d5, d6, d7
 800119c:	4b3c      	ldr	r3, [pc, #240]	; (8001290 <Forward_Kinematics+0x158>)
 800119e:	ed93 7b00 	vldr	d7, [r3]
 80011a2:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8001278 <Forward_Kinematics+0x140>
 80011a6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011aa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011ae:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	double omega_c = (-y + w * chassis_radius * radius_error_chassis)/(wheel_radius * radius_error_c);
 80011b2:	ed97 7b00 	vldr	d7, [r7]
 80011b6:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8001270 <Forward_Kinematics+0x138>
 80011ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011be:	4b32      	ldr	r3, [pc, #200]	; (8001288 <Forward_Kinematics+0x150>)
 80011c0:	ed93 7b00 	vldr	d7, [r3]
 80011c4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011c8:	ed97 7b02 	vldr	d7, [r7, #8]
 80011cc:	ee36 5b47 	vsub.f64	d5, d6, d7
 80011d0:	4b30      	ldr	r3, [pc, #192]	; (8001294 <Forward_Kinematics+0x15c>)
 80011d2:	ed93 7b00 	vldr	d7, [r3]
 80011d6:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8001278 <Forward_Kinematics+0x140>
 80011da:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011de:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011e2:	ed87 7b08 	vstr	d7, [r7, #32]
	double omega_d = (x + w * chassis_radius * radius_error_chassis)/(wheel_radius * radius_error_d);
 80011e6:	ed97 7b00 	vldr	d7, [r7]
 80011ea:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001270 <Forward_Kinematics+0x138>
 80011ee:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011f2:	4b25      	ldr	r3, [pc, #148]	; (8001288 <Forward_Kinematics+0x150>)
 80011f4:	ed93 7b00 	vldr	d7, [r3]
 80011f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011fc:	ed97 7b04 	vldr	d7, [r7, #16]
 8001200:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001204:	4b24      	ldr	r3, [pc, #144]	; (8001298 <Forward_Kinematics+0x160>)
 8001206:	ed93 7b00 	vldr	d7, [r3]
 800120a:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8001278 <Forward_Kinematics+0x140>
 800120e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001212:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001216:	ed87 7b06 	vstr	d7, [r7, #24]

	WheelA.goal = omega_a / (2 * M_PI);
 800121a:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 800121e:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8001280 <Forward_Kinematics+0x148>
 8001222:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <Forward_Kinematics+0x164>)
 8001228:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	WheelB.goal = omega_b / (2 * M_PI);
 800122c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001230:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8001280 <Forward_Kinematics+0x148>
 8001234:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <Forward_Kinematics+0x168>)
 800123a:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	WheelC.goal = omega_c / (2 * M_PI);
 800123e:	ed97 6b08 	vldr	d6, [r7, #32]
 8001242:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8001280 <Forward_Kinematics+0x148>
 8001246:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <Forward_Kinematics+0x16c>)
 800124c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	WheelD.goal = omega_d / (2 * M_PI);
 8001250:	ed97 6b06 	vldr	d6, [r7, #24]
 8001254:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8001280 <Forward_Kinematics+0x148>
 8001258:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <Forward_Kinematics+0x170>)
 800125e:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
}
 8001262:	bf00      	nop
 8001264:	373c      	adds	r7, #60	; 0x3c
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	33333333 	.word	0x33333333
 8001274:	3fd33333 	.word	0x3fd33333
 8001278:	6c8b4396 	.word	0x6c8b4396
 800127c:	3fa9fbe7 	.word	0x3fa9fbe7
 8001280:	54442d18 	.word	0x54442d18
 8001284:	401921fb 	.word	0x401921fb
 8001288:	240000b8 	.word	0x240000b8
 800128c:	24000098 	.word	0x24000098
 8001290:	240000a0 	.word	0x240000a0
 8001294:	240000a8 	.word	0x240000a8
 8001298:	240000b0 	.word	0x240000b0
 800129c:	240000f0 	.word	0x240000f0
 80012a0:	24000200 	.word	0x24000200
 80012a4:	24000310 	.word	0x24000310
 80012a8:	24000420 	.word	0x24000420
 80012ac:	00000000 	.word	0x00000000

080012b0 <Inverse_Kinematics>:


void Inverse_Kinematics(PID_Control *WheelA_, PID_Control *WheelB_, PID_Control *WheelC_, PID_Control *WheelD_)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b092      	sub	sp, #72	; 0x48
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	603b      	str	r3, [r7, #0]
	double omega_a = WheelA_->rps * (2 * M_PI) * (wheel_radius * radius_error_a);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	ed93 7b08 	vldr	d7, [r3, #32]
 80012c4:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80013e0 <Inverse_Kinematics+0x130>
 80012c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80012cc:	4b4a      	ldr	r3, [pc, #296]	; (80013f8 <Inverse_Kinematics+0x148>)
 80012ce:	ed93 7b00 	vldr	d7, [r3]
 80012d2:	ed9f 5b45 	vldr	d5, [pc, #276]	; 80013e8 <Inverse_Kinematics+0x138>
 80012d6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80012da:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012de:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	double omega_b = WheelB_->rps * (2 * M_PI) * (wheel_radius * radius_error_b);
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	ed93 7b08 	vldr	d7, [r3, #32]
 80012e8:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 80013e0 <Inverse_Kinematics+0x130>
 80012ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80012f0:	4b42      	ldr	r3, [pc, #264]	; (80013fc <Inverse_Kinematics+0x14c>)
 80012f2:	ed93 7b00 	vldr	d7, [r3]
 80012f6:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 80013e8 <Inverse_Kinematics+0x138>
 80012fa:	ee27 7b05 	vmul.f64	d7, d7, d5
 80012fe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001302:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	double omega_c = WheelC_->rps * (2 * M_PI) * (wheel_radius * radius_error_c);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	ed93 7b08 	vldr	d7, [r3, #32]
 800130c:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80013e0 <Inverse_Kinematics+0x130>
 8001310:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001314:	4b3a      	ldr	r3, [pc, #232]	; (8001400 <Inverse_Kinematics+0x150>)
 8001316:	ed93 7b00 	vldr	d7, [r3]
 800131a:	ed9f 5b33 	vldr	d5, [pc, #204]	; 80013e8 <Inverse_Kinematics+0x138>
 800131e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001322:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001326:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	double omega_d = WheelD_->rps * (2 * M_PI) * (wheel_radius * radius_error_d);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	ed93 7b08 	vldr	d7, [r3, #32]
 8001330:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80013e0 <Inverse_Kinematics+0x130>
 8001334:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001338:	4b32      	ldr	r3, [pc, #200]	; (8001404 <Inverse_Kinematics+0x154>)
 800133a:	ed93 7b00 	vldr	d7, [r3]
 800133e:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80013e8 <Inverse_Kinematics+0x138>
 8001342:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001346:	ee26 7b07 	vmul.f64	d7, d6, d7
 800134a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28

	double Vx = (omega_d - omega_b) / 2;
 800134e:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001352:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001356:	ee36 6b47 	vsub.f64	d6, d6, d7
 800135a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800135e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001362:	ed87 7b08 	vstr	d7, [r7, #32]
	double Vy = (omega_a - omega_c) / 2;
 8001366:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 800136a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800136e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001372:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001376:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800137a:	ed87 7b06 	vstr	d7, [r7, #24]
	double Vw = (omega_a + omega_b + omega_c + omega_d) / (4 * chassis_radius * radius_error_chassis);
 800137e:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 8001382:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001386:	ee36 6b07 	vadd.f64	d6, d6, d7
 800138a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800138e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001392:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001396:	ee36 5b07 	vadd.f64	d5, d6, d7
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <Inverse_Kinematics+0x158>)
 800139c:	ed93 7b00 	vldr	d7, [r3]
 80013a0:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80013f0 <Inverse_Kinematics+0x140>
 80013a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013ac:	ed87 7b04 	vstr	d7, [r7, #16]

	odom_vel[0] = Vx;
 80013b0:	4916      	ldr	r1, [pc, #88]	; (800140c <Inverse_Kinematics+0x15c>)
 80013b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013b6:	e9c1 2300 	strd	r2, r3, [r1]
	odom_vel[1] = Vy;
 80013ba:	4914      	ldr	r1, [pc, #80]	; (800140c <Inverse_Kinematics+0x15c>)
 80013bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013c0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	odom_vel[2] = Vw;
 80013c4:	4911      	ldr	r1, [pc, #68]	; (800140c <Inverse_Kinematics+0x15c>)
 80013c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
	odom_store();
 80013ce:	f002 f8a7 	bl	8003520 <odom_store>
}
 80013d2:	bf00      	nop
 80013d4:	3748      	adds	r7, #72	; 0x48
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	f3af 8000 	nop.w
 80013e0:	54442d18 	.word	0x54442d18
 80013e4:	401921fb 	.word	0x401921fb
 80013e8:	6c8b4396 	.word	0x6c8b4396
 80013ec:	3fa9fbe7 	.word	0x3fa9fbe7
 80013f0:	33333333 	.word	0x33333333
 80013f4:	3ff33333 	.word	0x3ff33333
 80013f8:	24000098 	.word	0x24000098
 80013fc:	240000a0 	.word	0x240000a0
 8001400:	240000a8 	.word	0x240000a8
 8001404:	240000b0 	.word	0x240000b0
 8001408:	240000b8 	.word	0x240000b8
 800140c:	24001740 	.word	0x24001740

08001410 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_DMA_Init+0x4c>)
 8001418:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800141c:	4a0f      	ldr	r2, [pc, #60]	; (800145c <MX_DMA_Init+0x4c>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <MX_DMA_Init+0x4c>)
 8001428:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	200b      	movs	r0, #11
 800143a:	f004 f8a4 	bl	8005586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800143e:	200b      	movs	r0, #11
 8001440:	f004 f8bb 	bl	80055ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	200c      	movs	r0, #12
 800144a:	f004 f89c 	bl	8005586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800144e:	200c      	movs	r0, #12
 8001450:	f004 f8b3 	bl	80055ba <HAL_NVIC_EnableIRQ>

}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	58024400 	.word	0x58024400

08001460 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	; 0x30
 8001464:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001476:	4b58      	ldr	r3, [pc, #352]	; (80015d8 <MX_GPIO_Init+0x178>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	4a56      	ldr	r2, [pc, #344]	; (80015d8 <MX_GPIO_Init+0x178>)
 800147e:	f043 0310 	orr.w	r3, r3, #16
 8001482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001486:	4b54      	ldr	r3, [pc, #336]	; (80015d8 <MX_GPIO_Init+0x178>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001494:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <MX_GPIO_Init+0x178>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149a:	4a4f      	ldr	r2, [pc, #316]	; (80015d8 <MX_GPIO_Init+0x178>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a4:	4b4c      	ldr	r3, [pc, #304]	; (80015d8 <MX_GPIO_Init+0x178>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	4b49      	ldr	r3, [pc, #292]	; (80015d8 <MX_GPIO_Init+0x178>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	4a47      	ldr	r2, [pc, #284]	; (80015d8 <MX_GPIO_Init+0x178>)
 80014ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c2:	4b45      	ldr	r3, [pc, #276]	; (80015d8 <MX_GPIO_Init+0x178>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <MX_GPIO_Init+0x178>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	4a40      	ldr	r2, [pc, #256]	; (80015d8 <MX_GPIO_Init+0x178>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e0:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <MX_GPIO_Init+0x178>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	4b3a      	ldr	r3, [pc, #232]	; (80015d8 <MX_GPIO_Init+0x178>)
 80014f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f4:	4a38      	ldr	r2, [pc, #224]	; (80015d8 <MX_GPIO_Init+0x178>)
 80014f6:	f043 0302 	orr.w	r3, r3, #2
 80014fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014fe:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <MX_GPIO_Init+0x178>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150c:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <MX_GPIO_Init+0x178>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001512:	4a31      	ldr	r2, [pc, #196]	; (80015d8 <MX_GPIO_Init+0x178>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151c:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <MX_GPIO_Init+0x178>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2108      	movs	r1, #8
 800152e:	482b      	ldr	r0, [pc, #172]	; (80015dc <MX_GPIO_Init+0x17c>)
 8001530:	f007 fb06 	bl	8008b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153a:	4829      	ldr	r0, [pc, #164]	; (80015e0 <MX_GPIO_Init+0x180>)
 800153c:	f007 fb00 	bl	8008b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001546:	4827      	ldr	r0, [pc, #156]	; (80015e4 <MX_GPIO_Init+0x184>)
 8001548:	f007 fafa 	bl	8008b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001552:	4825      	ldr	r0, [pc, #148]	; (80015e8 <MX_GPIO_Init+0x188>)
 8001554:	f007 faf4 	bl	8008b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001558:	2308      	movs	r3, #8
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	481b      	ldr	r0, [pc, #108]	; (80015dc <MX_GPIO_Init+0x17c>)
 8001570:	f007 f83c 	bl	80085ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	4814      	ldr	r0, [pc, #80]	; (80015e0 <MX_GPIO_Init+0x180>)
 800158e:	f007 f82d 	bl	80085ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2301      	movs	r3, #1
 800159a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	480e      	ldr	r0, [pc, #56]	; (80015e4 <MX_GPIO_Init+0x184>)
 80015ac:	f007 f81e 	bl	80085ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	4807      	ldr	r0, [pc, #28]	; (80015e8 <MX_GPIO_Init+0x188>)
 80015ca:	f007 f80f 	bl	80085ec <HAL_GPIO_Init>

}
 80015ce:	bf00      	nop
 80015d0:	3730      	adds	r7, #48	; 0x30
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	58024400 	.word	0x58024400
 80015dc:	58021000 	.word	0x58021000
 80015e0:	58020800 	.word	0x58020800
 80015e4:	58020400 	.word	0x58020400
 80015e8:	58020c00 	.word	0x58020c00

080015ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f0:	f003 fe38 	bl	8005264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f4:	f000 f826 	bl	8001644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f8:	f7ff ff32 	bl	8001460 <MX_GPIO_Init>
  MX_DMA_Init();
 80015fc:	f7ff ff08 	bl	8001410 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001600:	f003 fcb4 	bl	8004f6c <MX_USART1_UART_Init>
  MX_TIM12_Init();
 8001604:	f003 f978 	bl	80048f8 <MX_TIM12_Init>
  MX_TIM15_Init();
 8001608:	f003 f9dc 	bl	80049c4 <MX_TIM15_Init>
  MX_TIM2_Init();
 800160c:	f003 f81e 	bl	800464c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001610:	f003 f870 	bl	80046f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001614:	f003 f8c4 	bl	80047a0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001618:	f003 f918 	bl	800484c <MX_TIM5_Init>
  MX_TIM23_Init();
 800161c:	f003 fa64 	bl	8004ae8 <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */

//	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
  HAL_TIM_Base_Start_IT(&Encoder_Interrupt_timer);
 8001620:	4806      	ldr	r0, [pc, #24]	; (800163c <main+0x50>)
 8001622:	f00a f861 	bl	800b6e8 <HAL_TIM_Base_Start_IT>
  Control_Init();
 8001626:	f7ff f82b 	bl	8000680 <Control_Init>
  Rosserial_Init();
 800162a:	f001 ff41 	bl	80034b0 <Rosserial_Init>
  odom_count = 0;
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <main+0x54>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
//  	a = __HAL_TIM_GetCounter(&htim2);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	Rosserial_Spin();
 8001634:	f001 ff52 	bl	80034dc <Rosserial_Spin>
 8001638:	e7fc      	b.n	8001634 <main+0x48>
 800163a:	bf00      	nop
 800163c:	24001924 	.word	0x24001924
 8001640:	24000534 	.word	0x24000534

08001644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b09c      	sub	sp, #112	; 0x70
 8001648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164e:	224c      	movs	r2, #76	; 0x4c
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f00d fe14 	bl	800f280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2220      	movs	r2, #32
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f00d fe0e 	bl	800f280 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001664:	2002      	movs	r0, #2
 8001666:	f007 fa85 	bl	8008b74 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800166a:	2300      	movs	r3, #0
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <SystemClock_Config+0xd8>)
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	4a2a      	ldr	r2, [pc, #168]	; (800171c <SystemClock_Config+0xd8>)
 8001674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001678:	6193      	str	r3, [r2, #24]
 800167a:	4b28      	ldr	r3, [pc, #160]	; (800171c <SystemClock_Config+0xd8>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001686:	bf00      	nop
 8001688:	4b24      	ldr	r3, [pc, #144]	; (800171c <SystemClock_Config+0xd8>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001694:	d1f8      	bne.n	8001688 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001696:	2301      	movs	r3, #1
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800169a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a0:	2302      	movs	r3, #2
 80016a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a4:	2302      	movs	r3, #2
 80016a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016a8:	2304      	movs	r3, #4
 80016aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016ac:	23a8      	movs	r3, #168	; 0xa8
 80016ae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80016b0:	2301      	movs	r3, #1
 80016b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016b4:	2304      	movs	r3, #4
 80016b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80016bc:	2304      	movs	r3, #4
 80016be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016cc:	4618      	mov	r0, r3
 80016ce:	f007 fa8b 	bl	8008be8 <HAL_RCC_OscConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016d8:	f000 f8c2 	bl	8001860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016dc:	233f      	movs	r3, #63	; 0x3f
 80016de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e0:	2303      	movs	r3, #3
 80016e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016e8:	2308      	movs	r3, #8
 80016ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016ec:	2340      	movs	r3, #64	; 0x40
 80016ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016f0:	2340      	movs	r3, #64	; 0x40
 80016f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016fa:	2340      	movs	r3, #64	; 0x40
 80016fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2102      	movs	r1, #2
 8001702:	4618      	mov	r0, r3
 8001704:	f007 fe4a 	bl	800939c <HAL_RCC_ClockConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800170e:	f000 f8a7 	bl	8001860 <Error_Handler>
  }
}
 8001712:	bf00      	nop
 8001714:	3770      	adds	r7, #112	; 0x70
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	58024800 	.word	0x58024800

08001720 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	if(htim->Instance == Encoder_Interrupt_timer.Instance)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d14f      	bne.n	80017d4 <HAL_TIM_PeriodElapsedCallback+0xb4>
	{
		odom_count++;
 8001734:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	3301      	adds	r3, #1
 800173a:	4a29      	ldr	r2, [pc, #164]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800173c:	6013      	str	r3, [r2, #0]
		if(odom_count == 5)
 800173e:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b05      	cmp	r3, #5
 8001744:	d104      	bne.n	8001750 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			odom_count = 0;
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
			odom_publish();
 800174c:	f001 ff06 	bl	800355c <odom_publish>
//		WheelA.goal = 0.0;
//		WheelB.goal = 0.0;
//		WheelC.goal = 0.0;
//		WheelD.goal = 0.0;

		Rosserial_Spin();
 8001750:	f001 fec4 	bl	80034dc <Rosserial_Spin>
		if (Rosserial_Checkconfigstate() == false)
 8001754:	f001 fecc 	bl	80034f0 <Rosserial_Checkconfigstate>
 8001758:	4603      	mov	r3, r0
 800175a:	f083 0301 	eor.w	r3, r3, #1
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d014      	beq.n	800178e <HAL_TIM_PeriodElapsedCallback+0x6e>
		{
			linearvelocity_x = 0.0;
 8001764:	491f      	ldr	r1, [pc, #124]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	e9c1 2300 	strd	r2, r3, [r1]
			linearvelocity_y = 0.0;
 8001772:	491d      	ldr	r1, [pc, #116]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	e9c1 2300 	strd	r2, r3, [r1]
			angularvelocity = 0.0;
 8001780:	491a      	ldr	r1, [pc, #104]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9c1 2300 	strd	r2, r3, [r1]
		}
		Forward_Kinematics(linearvelocity_x, linearvelocity_y, angularvelocity);
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001790:	ed93 7b00 	vldr	d7, [r3]
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001796:	ed93 6b00 	vldr	d6, [r3]
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800179c:	ed93 5b00 	vldr	d5, [r3]
 80017a0:	eeb0 2b45 	vmov.f64	d2, d5
 80017a4:	eeb0 1b46 	vmov.f64	d1, d6
 80017a8:	eeb0 0b47 	vmov.f64	d0, d7
 80017ac:	f7ff fcc4 	bl	8001138 <Forward_Kinematics>
		PID_Controller(&WheelA);
 80017b0:	480f      	ldr	r0, [pc, #60]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80017b2:	f7ff fa85 	bl	8000cc0 <PID_Controller>
		PID_Controller(&WheelB);
 80017b6:	480f      	ldr	r0, [pc, #60]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80017b8:	f7ff fa82 	bl	8000cc0 <PID_Controller>
		PID_Controller(&WheelC);
 80017bc:	480e      	ldr	r0, [pc, #56]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80017be:	f7ff fa7f 	bl	8000cc0 <PID_Controller>
		PID_Controller(&WheelD);
 80017c2:	480e      	ldr	r0, [pc, #56]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80017c4:	f7ff fa7c 	bl	8000cc0 <PID_Controller>
		Inverse_Kinematics(&WheelA, &WheelB, &WheelC, &WheelD);
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80017ca:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80017cc:	4909      	ldr	r1, [pc, #36]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80017ce:	4808      	ldr	r0, [pc, #32]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80017d0:	f7ff fd6e 	bl	80012b0 <Inverse_Kinematics>
	}
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	24001924 	.word	0x24001924
 80017e0:	24000534 	.word	0x24000534
 80017e4:	240000c0 	.word	0x240000c0
 80017e8:	240000c8 	.word	0x240000c8
 80017ec:	240000d0 	.word	0x240000d0
 80017f0:	240000f0 	.word	0x240000f0
 80017f4:	24000200 	.word	0x24000200
 80017f8:	24000310 	.word	0x24000310
 80017fc:	24000420 	.word	0x24000420

08001800 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a11      	ldr	r2, [pc, #68]	; (8001850 <HAL_UART_ErrorCallback+0x50>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d11b      	bne.n	8001848 <HAL_UART_ErrorCallback+0x48>
	{
		linearvelocity_x = 0;
 8001810:	4910      	ldr	r1, [pc, #64]	; (8001854 <HAL_UART_ErrorCallback+0x54>)
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	e9c1 2300 	strd	r2, r3, [r1]
		linearvelocity_y = 0;
 800181e:	490e      	ldr	r1, [pc, #56]	; (8001858 <HAL_UART_ErrorCallback+0x58>)
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	e9c1 2300 	strd	r2, r3, [r1]
		angularvelocity = 0;
 800182c:	490b      	ldr	r1, [pc, #44]	; (800185c <HAL_UART_ErrorCallback+0x5c>)
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_UART_DeInit(&huart1);
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <HAL_UART_ErrorCallback+0x50>)
 800183c:	f00b fbc0 	bl	800cfc0 <HAL_UART_DeInit>
		MX_USART1_UART_Init();
 8001840:	f003 fb94 	bl	8004f6c <MX_USART1_UART_Init>
		Rosserial_GetHardware();
 8001844:	f001 fe5e 	bl	8003504 <Rosserial_GetHardware>
	}
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	24001970 	.word	0x24001970
 8001854:	240000c0 	.word	0x240000c0
 8001858:	240000c8 	.word	0x240000c8
 800185c:	240000d0 	.word	0x240000d0

08001860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001868:	e7fe      	b.n	8001868 <Error_Handler+0x8>

0800186a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <_ZN3ros3MsgC1Ev+0x1c>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	0800f854 	.word	0x0800f854

080018ac <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
      data()
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ffe8 	bl	800188c <_ZN3ros3MsgC1Ev>
 80018bc:	4a06      	ldr	r2, [pc, #24]	; (80018d8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3304      	adds	r3, #4
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ffcf 	bl	800186a <_ZN3ros4TimeC1Ev>
    {
    }
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	0800f83c 	.word	0x0800f83c

080018dc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6859      	ldr	r1, [r3, #4]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	b2ca      	uxtb	r2, r1
 80018f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	0a19      	lsrs	r1, r3, #8
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	3301      	adds	r3, #1
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	4413      	add	r3, r2
 8001906:	b2ca      	uxtb	r2, r1
 8001908:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	0c19      	lsrs	r1, r3, #16
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3302      	adds	r3, #2
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	b2ca      	uxtb	r2, r1
 800191a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	0e19      	lsrs	r1, r3, #24
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	3303      	adds	r3, #3
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	4413      	add	r3, r2
 800192a:	b2ca      	uxtb	r2, r1
 800192c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	3304      	adds	r3, #4
 8001932:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6899      	ldr	r1, [r3, #8]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	4413      	add	r3, r2
 800193e:	b2ca      	uxtb	r2, r1
 8001940:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	0a19      	lsrs	r1, r3, #8
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	3301      	adds	r3, #1
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	4413      	add	r3, r2
 8001950:	b2ca      	uxtb	r2, r1
 8001952:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	0c19      	lsrs	r1, r3, #16
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3302      	adds	r3, #2
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	4413      	add	r3, r2
 8001962:	b2ca      	uxtb	r2, r1
 8001964:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	0e19      	lsrs	r1, r3, #24
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3303      	adds	r3, #3
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	4413      	add	r3, r2
 8001974:	b2ca      	uxtb	r2, r1
 8001976:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3304      	adds	r3, #4
 800197c:	60fb      	str	r3, [r7, #12]
      return offset;
 800197e:	68fb      	ldr	r3, [r7, #12]
    }
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3301      	adds	r3, #1
 80019b0:	6839      	ldr	r1, [r7, #0]
 80019b2:	440b      	add	r3, r1
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3302      	adds	r3, #2
 80019c6:	6839      	ldr	r1, [r7, #0]
 80019c8:	440b      	add	r3, r1
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	041b      	lsls	r3, r3, #16
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3303      	adds	r3, #3
 80019dc:	6839      	ldr	r1, [r7, #0]
 80019de:	440b      	add	r3, r1
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	061b      	lsls	r3, r3, #24
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3304      	adds	r3, #4
 80019ee:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	4413      	add	r3, r2
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3301      	adds	r3, #1
 8001a06:	6839      	ldr	r1, [r7, #0]
 8001a08:	440b      	add	r3, r1
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	6839      	ldr	r1, [r7, #0]
 8001a1e:	440b      	add	r3, r1
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	041b      	lsls	r3, r3, #16
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3303      	adds	r3, #3
 8001a32:	6839      	ldr	r1, [r7, #0]
 8001a34:	440b      	add	r3, r1
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	061b      	lsls	r3, r3, #24
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3304      	adds	r3, #4
 8001a44:	60fb      	str	r3, [r7, #12]
     return offset;
 8001a46:	68fb      	ldr	r3, [r7, #12]
    }
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	0800f5ac 	.word	0x0800f5ac

08001a70 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	0800f5bc 	.word	0x0800f5bc

08001a8c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fef8 	bl	800188c <_ZN3ros3MsgC1Ev>
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	809a      	strh	r2, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001ab2:	60da      	str	r2, [r3, #12]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a06      	ldr	r2, [pc, #24]	; (8001ad0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001ab8:	611a      	str	r2, [r3, #16]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	615a      	str	r2, [r3, #20]
    {
    }
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	0800f824 	.word	0x0800f824
 8001ad0:	0800f5e0 	.word	0x0800f5e0

08001ad4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	8899      	ldrh	r1, [r3, #4]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	b2ca      	uxtb	r2, r1
 8001aee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	889b      	ldrh	r3, [r3, #4]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	b299      	uxth	r1, r3
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	3301      	adds	r3, #1
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	b2ca      	uxtb	r2, r1
 8001b02:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	3302      	adds	r3, #2
 8001b08:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fbfe 	bl	8000310 <strlen>
 8001b14:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	69b9      	ldr	r1, [r7, #24]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f001 fd2e 	bl	8003580 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	3304      	adds	r3, #4
 8001b28:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	18d0      	adds	r0, r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4619      	mov	r1, r3
 8001b38:	f00d fb94 	bl	800f264 <memcpy>
      offset += length_topic_name;
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4413      	add	r3, r2
 8001b42:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fbe1 	bl	8000310 <strlen>
 8001b4e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	4413      	add	r3, r2
 8001b56:	6979      	ldr	r1, [r7, #20]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 fd11 	bl	8003580 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3304      	adds	r3, #4
 8001b62:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	18d0      	adds	r0, r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4619      	mov	r1, r3
 8001b72:	f00d fb77 	bl	800f264 <memcpy>
      offset += length_message_type;
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fbc4 	bl	8000310 <strlen>
 8001b88:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	6939      	ldr	r1, [r7, #16]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f001 fcf4 	bl	8003580 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	18d0      	adds	r0, r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4619      	mov	r1, r3
 8001bac:	f00d fb5a 	bl	800f264 <memcpy>
      offset += length_md5sum;
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001bbe:	68f9      	ldr	r1, [r7, #12]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	b2ca      	uxtb	r2, r1
 8001bc8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	0a19      	lsrs	r1, r3, #8
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	b2ca      	uxtb	r2, r1
 8001bd8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	0c19      	lsrs	r1, r3, #16
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3302      	adds	r3, #2
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	4413      	add	r3, r2
 8001be6:	b2ca      	uxtb	r2, r1
 8001be8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	0e19      	lsrs	r1, r3, #24
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3303      	adds	r3, #3
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b2ca      	uxtb	r2, r1
 8001bf8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	61fb      	str	r3, [r7, #28]
      return offset;
 8001c00:	69fb      	ldr	r3, [r7, #28]
    }
 8001c02:	4618      	mov	r0, r3
 8001c04:	3720      	adds	r7, #32
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b08a      	sub	sp, #40	; 0x28
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	889b      	ldrh	r3, [r3, #4]
 8001c2a:	b21a      	sxth	r2, r3
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	6839      	ldr	r1, [r7, #0]
 8001c32:	440b      	add	r3, r1
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	3302      	adds	r3, #2
 8001c48:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	441a      	add	r2, r3
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4611      	mov	r1, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f001 fcb0 	bl	80035bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	3304      	adds	r3, #4
 8001c60:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d20c      	bcs.n	8001c8c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	441a      	add	r2, r3
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	6839      	ldr	r1, [r7, #0]
 8001c7e:	440b      	add	r3, r1
 8001c80:	7812      	ldrb	r2, [r2, #0]
 8001c82:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	3301      	adds	r3, #1
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8a:	e7ec      	b.n	8001c66 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	4413      	add	r3, r2
 8001c92:	3b01      	subs	r3, #1
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	441a      	add	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	4413      	add	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	441a      	add	r2, r3
 8001cb6:	f107 0310 	add.w	r3, r7, #16
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f001 fc7d 	bl	80035bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	623b      	str	r3, [r7, #32]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	6a3a      	ldr	r2, [r7, #32]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d20c      	bcs.n	8001cf2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	441a      	add	r2, r3
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	6839      	ldr	r1, [r7, #0]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	7812      	ldrb	r2, [r2, #0]
 8001ce8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	3301      	adds	r3, #1
 8001cee:	623b      	str	r3, [r7, #32]
 8001cf0:	e7ec      	b.n	8001ccc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	441a      	add	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4413      	add	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	441a      	add	r2, r3
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f001 fc4a 	bl	80035bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	69fa      	ldr	r2, [r7, #28]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d20c      	bcs.n	8001d58 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	441a      	add	r2, r3
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	6839      	ldr	r1, [r7, #0]
 8001d4a:	440b      	add	r3, r1
 8001d4c:	7812      	ldrb	r2, [r2, #0]
 8001d4e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	3301      	adds	r3, #1
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	e7ec      	b.n	8001d32 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	441a      	add	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4413      	add	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	6839      	ldr	r1, [r7, #0]
 8001d86:	440a      	add	r2, r1
 8001d88:	7812      	ldrb	r2, [r2, #0]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	3301      	adds	r3, #1
 8001d94:	6839      	ldr	r1, [r7, #0]
 8001d96:	440b      	add	r3, r1
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	021b      	lsls	r3, r3, #8
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	3302      	adds	r3, #2
 8001da6:	6839      	ldr	r1, [r7, #0]
 8001da8:	440b      	add	r3, r1
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	041b      	lsls	r3, r3, #16
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	3303      	adds	r3, #3
 8001db8:	6839      	ldr	r1, [r7, #0]
 8001dba:	440b      	add	r3, r1
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	061b      	lsls	r3, r3, #24
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	61bb      	str	r3, [r7, #24]
     return offset;
 8001dd0:	69bb      	ldr	r3, [r7, #24]
    }
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3728      	adds	r7, #40	; 0x28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	0800f5e4 	.word	0x0800f5e4

08001df8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	0800f600 	.word	0x0800f600

08001e14 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fd34 	bl	800188c <_ZN3ros3MsgC1Ev>
 8001e24:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	711a      	strb	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001e34:	609a      	str	r2, [r3, #8]
    {
    }
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	0800f80c 	.word	0x0800f80c
 8001e44:	0800f5e0 	.word	0x0800f5e0

08001e48 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	7912      	ldrb	r2, [r2, #4]
 8001e60:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3301      	adds	r3, #1
 8001e66:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fa4f 	bl	8000310 <strlen>
 8001e72:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	4413      	add	r3, r2
 8001e7a:	68b9      	ldr	r1, [r7, #8]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f001 fb7f 	bl	8003580 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3304      	adds	r3, #4
 8001e86:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	18d0      	adds	r0, r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	4619      	mov	r1, r3
 8001e96:	f00d f9e5 	bl	800f264 <memcpy>
      offset += length_msg;
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
      return offset;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
    }
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	781a      	ldrb	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	441a      	add	r2, r3
 8001ed2:	f107 030c 	add.w	r3, r7, #12
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f001 fb6f 	bl	80035bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4413      	add	r3, r2
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d20c      	bcs.n	8001f0e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	441a      	add	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	6839      	ldr	r1, [r7, #0]
 8001f00:	440b      	add	r3, r1
 8001f02:	7812      	ldrb	r2, [r2, #0]
 8001f04:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	e7ec      	b.n	8001ee8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	3b01      	subs	r3, #1
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	4413      	add	r3, r2
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	441a      	add	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
     return offset;
 8001f32:	693b      	ldr	r3, [r7, #16]
    }
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	0800f624 	.word	0x0800f624

08001f58 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	0800f638 	.word	0x0800f638

08001f74 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fc84 	bl	800188c <_ZN3ros3MsgC1Ev>
 8001f84:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	619a      	str	r2, [r3, #24]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	61da      	str	r2, [r3, #28]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	0800f7f4 	.word	0x0800f7f4

08001fbc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6859      	ldr	r1, [r3, #4]
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	b2ca      	uxtb	r2, r1
 8001fd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	0a19      	lsrs	r1, r3, #8
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	b2ca      	uxtb	r2, r1
 8001fe8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	0c19      	lsrs	r1, r3, #16
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b2ca      	uxtb	r2, r1
 8001ffa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	0e19      	lsrs	r1, r3, #24
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	3303      	adds	r3, #3
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	4413      	add	r3, r2
 800200a:	b2ca      	uxtb	r2, r1
 800200c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	3304      	adds	r3, #4
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	6a3a      	ldr	r2, [r7, #32]
 800201e:	429a      	cmp	r2, r3
 8002020:	d22b      	bcs.n	800207a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002030:	6939      	ldr	r1, [r7, #16]
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	4413      	add	r3, r2
 8002038:	b2ca      	uxtb	r2, r1
 800203a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	0a19      	lsrs	r1, r3, #8
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	3301      	adds	r3, #1
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	4413      	add	r3, r2
 8002048:	b2ca      	uxtb	r2, r1
 800204a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	0c19      	lsrs	r1, r3, #16
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	3302      	adds	r3, #2
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	4413      	add	r3, r2
 8002058:	b2ca      	uxtb	r2, r1
 800205a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	0e19      	lsrs	r1, r3, #24
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	3303      	adds	r3, #3
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	4413      	add	r3, r2
 8002068:	b2ca      	uxtb	r2, r1
 800206a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	3304      	adds	r3, #4
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	3301      	adds	r3, #1
 8002076:	623b      	str	r3, [r7, #32]
 8002078:	e7ce      	b.n	8002018 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6919      	ldr	r1, [r3, #16]
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	4413      	add	r3, r2
 8002084:	b2ca      	uxtb	r2, r1
 8002086:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	0a19      	lsrs	r1, r3, #8
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	3301      	adds	r3, #1
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	4413      	add	r3, r2
 8002096:	b2ca      	uxtb	r2, r1
 8002098:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	0c19      	lsrs	r1, r3, #16
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	3302      	adds	r3, #2
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	b2ca      	uxtb	r2, r1
 80020aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	0e19      	lsrs	r1, r3, #24
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	3303      	adds	r3, #3
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	4413      	add	r3, r2
 80020ba:	b2ca      	uxtb	r2, r1
 80020bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	3304      	adds	r3, #4
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d22b      	bcs.n	800212a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699a      	ldr	r2, [r3, #24]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80020e0:	68f9      	ldr	r1, [r7, #12]
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	b2ca      	uxtb	r2, r1
 80020ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	0a19      	lsrs	r1, r3, #8
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	3301      	adds	r3, #1
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	b2ca      	uxtb	r2, r1
 80020fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	0c19      	lsrs	r1, r3, #16
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	3302      	adds	r3, #2
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	4413      	add	r3, r2
 8002108:	b2ca      	uxtb	r2, r1
 800210a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	0e19      	lsrs	r1, r3, #24
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	3303      	adds	r3, #3
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	4413      	add	r3, r2
 8002118:	b2ca      	uxtb	r2, r1
 800211a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	3304      	adds	r3, #4
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3301      	adds	r3, #1
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	e7ce      	b.n	80020c8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69d9      	ldr	r1, [r3, #28]
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	4413      	add	r3, r2
 8002134:	b2ca      	uxtb	r2, r1
 8002136:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	0a19      	lsrs	r1, r3, #8
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	3301      	adds	r3, #1
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	4413      	add	r3, r2
 8002146:	b2ca      	uxtb	r2, r1
 8002148:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	0c19      	lsrs	r1, r3, #16
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	3302      	adds	r3, #2
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	4413      	add	r3, r2
 8002158:	b2ca      	uxtb	r2, r1
 800215a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	0e19      	lsrs	r1, r3, #24
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	3303      	adds	r3, #3
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	4413      	add	r3, r2
 800216a:	b2ca      	uxtb	r2, r1
 800216c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	3304      	adds	r3, #4
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002174:	2300      	movs	r3, #0
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	429a      	cmp	r2, r3
 8002180:	d228      	bcs.n	80021d4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f8be 	bl	8000310 <strlen>
 8002194:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	4413      	add	r3, r2
 800219c:	6979      	ldr	r1, [r7, #20]
 800219e:	4618      	mov	r0, r3
 80021a0:	f001 f9ee 	bl	8003580 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	3304      	adds	r3, #4
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	18d0      	adds	r0, r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	4619      	mov	r1, r3
 80021c0:	f00d f850 	bl	800f264 <memcpy>
      offset += length_stringsi;
 80021c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	4413      	add	r3, r2
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	3301      	adds	r3, #1
 80021d0:	61bb      	str	r3, [r7, #24]
 80021d2:	e7d1      	b.n	8002178 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80021d6:	4618      	mov	r0, r3
 80021d8:	3728      	adds	r7, #40	; 0x28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80021de:	b580      	push	{r7, lr}
 80021e0:	b08e      	sub	sp, #56	; 0x38
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80021ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	4413      	add	r3, r2
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80021f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f8:	3301      	adds	r3, #1
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	4413      	add	r3, r2
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	6a3a      	ldr	r2, [r7, #32]
 8002204:	4313      	orrs	r3, r2
 8002206:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220a:	3302      	adds	r3, #2
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	4413      	add	r3, r2
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	041b      	lsls	r3, r3, #16
 8002214:	6a3a      	ldr	r2, [r7, #32]
 8002216:	4313      	orrs	r3, r2
 8002218:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800221a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221c:	3303      	adds	r3, #3
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	4413      	add	r3, r2
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	061b      	lsls	r3, r3, #24
 8002226:	6a3a      	ldr	r2, [r7, #32]
 8002228:	4313      	orrs	r3, r2
 800222a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222e:	3304      	adds	r3, #4
 8002230:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	6a3a      	ldr	r2, [r7, #32]
 8002238:	429a      	cmp	r2, r3
 800223a:	d90a      	bls.n	8002252 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f00d f822 	bl	800f290 <realloc>
 800224c:	4602      	mov	r2, r0
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a3a      	ldr	r2, [r7, #32]
 8002256:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002258:	2300      	movs	r3, #0
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002262:	429a      	cmp	r2, r3
 8002264:	d236      	bcs.n	80022d4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800226e:	6839      	ldr	r1, [r7, #0]
 8002270:	440a      	add	r2, r1
 8002272:	7812      	ldrb	r2, [r2, #0]
 8002274:	4313      	orrs	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800227c:	3301      	adds	r3, #1
 800227e:	6839      	ldr	r1, [r7, #0]
 8002280:	440b      	add	r3, r1
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	4313      	orrs	r3, r2
 8002288:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228e:	3302      	adds	r3, #2
 8002290:	6839      	ldr	r1, [r7, #0]
 8002292:	440b      	add	r3, r1
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	041b      	lsls	r3, r3, #16
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a0:	3303      	adds	r3, #3
 80022a2:	6839      	ldr	r1, [r7, #0]
 80022a4:	440b      	add	r3, r1
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	061b      	lsls	r3, r3, #24
 80022aa:	4313      	orrs	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80022b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b6:	3304      	adds	r3, #4
 80022b8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	3208      	adds	r2, #8
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80022cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ce:	3301      	adds	r3, #1
 80022d0:	633b      	str	r3, [r7, #48]	; 0x30
 80022d2:	e7c3      	b.n	800225c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80022d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	4413      	add	r3, r2
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80022de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e0:	3301      	adds	r3, #1
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4413      	add	r3, r2
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80022f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f2:	3302      	adds	r3, #2
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	041b      	lsls	r3, r3, #16
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002304:	3303      	adds	r3, #3
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	4413      	add	r3, r2
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	061b      	lsls	r3, r3, #24
 800230e:	69fa      	ldr	r2, [r7, #28]
 8002310:	4313      	orrs	r3, r2
 8002312:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002316:	3304      	adds	r3, #4
 8002318:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	69fa      	ldr	r2, [r7, #28]
 8002320:	429a      	cmp	r2, r3
 8002322:	d90a      	bls.n	800233a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699a      	ldr	r2, [r3, #24]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4619      	mov	r1, r3
 800232e:	4610      	mov	r0, r2
 8002330:	f00c ffae 	bl	800f290 <realloc>
 8002334:	4602      	mov	r2, r0
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002340:	2300      	movs	r3, #0
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800234a:	429a      	cmp	r2, r3
 800234c:	d236      	bcs.n	80023bc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002356:	6839      	ldr	r1, [r7, #0]
 8002358:	440a      	add	r2, r1
 800235a:	7812      	ldrb	r2, [r2, #0]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002364:	3301      	adds	r3, #1
 8002366:	6839      	ldr	r1, [r7, #0]
 8002368:	440b      	add	r3, r1
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002376:	3302      	adds	r3, #2
 8002378:	6839      	ldr	r1, [r7, #0]
 800237a:	440b      	add	r3, r1
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	041b      	lsls	r3, r3, #16
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002388:	3303      	adds	r3, #3
 800238a:	6839      	ldr	r1, [r7, #0]
 800238c:	440b      	add	r3, r1
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	061b      	lsls	r3, r3, #24
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800239c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239e:	3304      	adds	r3, #4
 80023a0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699a      	ldr	r2, [r3, #24]
 80023a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	3214      	adds	r2, #20
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80023b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b6:	3301      	adds	r3, #1
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ba:	e7c3      	b.n	8002344 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80023bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	4413      	add	r3, r2
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80023c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c8:	3301      	adds	r3, #1
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80023d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023da:	3302      	adds	r3, #2
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	041b      	lsls	r3, r3, #16
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80023ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ec:	3303      	adds	r3, #3
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	4413      	add	r3, r2
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	061b      	lsls	r3, r3, #24
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80023fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fe:	3304      	adds	r3, #4
 8002400:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	429a      	cmp	r2, r3
 800240a:	d90a      	bls.n	8002422 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4619      	mov	r1, r3
 8002416:	4610      	mov	r0, r2
 8002418:	f00c ff3a 	bl	800f290 <realloc>
 800241c:	4602      	mov	r2, r0
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002428:	2300      	movs	r3, #0
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002432:	429a      	cmp	r2, r3
 8002434:	d23f      	bcs.n	80024b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	441a      	add	r2, r3
 800243c:	f107 030c 	add.w	r3, r7, #12
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f001 f8ba 	bl	80035bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244a:	3304      	adds	r3, #4
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
 8002452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4413      	add	r3, r2
 8002458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245a:	429a      	cmp	r2, r3
 800245c:	d20c      	bcs.n	8002478 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	441a      	add	r2, r3
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	3b01      	subs	r3, #1
 8002468:	6839      	ldr	r1, [r7, #0]
 800246a:	440b      	add	r3, r1
 800246c:	7812      	ldrb	r2, [r2, #0]
 800246e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	3301      	adds	r3, #1
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
 8002476:	e7ec      	b.n	8002452 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4413      	add	r3, r2
 800247e:	3b01      	subs	r3, #1
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	4413      	add	r3, r2
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248a:	3b01      	subs	r3, #1
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	441a      	add	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4413      	add	r3, r2
 800249a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	3220      	adds	r2, #32
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80024ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b0:	3301      	adds	r3, #1
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024b4:	e7ba      	b.n	800242c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80024b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80024b8:	4618      	mov	r0, r3
 80024ba:	3738      	adds	r7, #56	; 0x38
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	0800f748 	.word	0x0800f748

080024dc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	0800f65c 	.word	0x0800f65c

080024f8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	611a      	str	r2, [r3, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68d8      	ldr	r0, [r3, #12]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6891      	ldr	r1, [r2, #8]
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	4798      	blx	r3
 8002544:	4603      	mov	r3, r0
  };
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
  }
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a4b      	ldr	r2, [pc, #300]	; (80026a8 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d077      	beq.n	8002670 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a48      	ldr	r2, [pc, #288]	; (80026ac <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d06f      	beq.n	8002670 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a45      	ldr	r2, [pc, #276]	; (80026b0 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d067      	beq.n	8002670 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a42      	ldr	r2, [pc, #264]	; (80026b4 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d05f      	beq.n	8002670 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a3f      	ldr	r2, [pc, #252]	; (80026b8 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d057      	beq.n	8002670 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a3c      	ldr	r2, [pc, #240]	; (80026bc <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d04f      	beq.n	8002670 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a39      	ldr	r2, [pc, #228]	; (80026c0 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d047      	beq.n	8002670 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a36      	ldr	r2, [pc, #216]	; (80026c4 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d03f      	beq.n	8002670 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a33      	ldr	r2, [pc, #204]	; (80026c8 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d037      	beq.n	8002670 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a30      	ldr	r2, [pc, #192]	; (80026cc <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d02f      	beq.n	8002670 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a2d      	ldr	r2, [pc, #180]	; (80026d0 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d027      	beq.n	8002670 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a2a      	ldr	r2, [pc, #168]	; (80026d4 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d01f      	beq.n	8002670 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a27      	ldr	r2, [pc, #156]	; (80026d8 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d017      	beq.n	8002670 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a24      	ldr	r2, [pc, #144]	; (80026dc <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00f      	beq.n	8002670 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a21      	ldr	r2, [pc, #132]	; (80026e0 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d007      	beq.n	8002670 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1e      	ldr	r2, [pc, #120]	; (80026e4 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d10a      	bne.n	8002686 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002684:	e009      	b.n	800269a <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002696:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40020010 	.word	0x40020010
 80026ac:	40020028 	.word	0x40020028
 80026b0:	40020040 	.word	0x40020040
 80026b4:	40020058 	.word	0x40020058
 80026b8:	40020070 	.word	0x40020070
 80026bc:	40020088 	.word	0x40020088
 80026c0:	400200a0 	.word	0x400200a0
 80026c4:	400200b8 	.word	0x400200b8
 80026c8:	40020410 	.word	0x40020410
 80026cc:	40020428 	.word	0x40020428
 80026d0:	40020440 	.word	0x40020440
 80026d4:	40020458 	.word	0x40020458
 80026d8:	40020470 	.word	0x40020470
 80026dc:	40020488 	.word	0x40020488
 80026e0:	400204a0 	.word	0x400204a0
 80026e4:	400204b8 	.word	0x400204b8

080026e8 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a0a      	ldr	r2, [pc, #40]	; (800271c <_ZN13STM32HardwareC1Ev+0x34>)
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    }
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	24001970 	.word	0x24001970

08002720 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f804 	bl	8002736 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
    	HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6858      	ldr	r0, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3308      	adds	r3, #8
 8002746:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800274a:	4619      	mov	r1, r3
 800274c:	f00a fcf8 	bl	800d140 <HAL_UART_Receive_DMA>
    }
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002760:	f04f 33ff 	mov.w	r3, #4294967295
 8002764:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 4408 	ldr.w	r4, [r3, #1032]	; 0x408
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff fefb 	bl	8002568 <_ZN13STM32Hardware10getRdmaIndEv>
 8002772:	4603      	mov	r3, r0
 8002774:	429c      	cmp	r4, r3
 8002776:	bf14      	ite	ne
 8002778:	2301      	movne	r3, #1
 800277a:	2300      	moveq	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d012      	beq.n	80027a8 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002788:	1c59      	adds	r1, r3, #1
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4413      	add	r3, r2
 8002794:	7a1b      	ldrb	r3, [r3, #8]
 8002796:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800279e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
      }
      return c;
 80027a8:	68fb      	ldr	r3, [r7, #12]
    }
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd90      	pop	{r4, r7, pc}
	...

080027b4 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	d108      	bne.n	80027da <_ZN13STM32Hardware5flushEv+0x26>
 80027c8:	4b28      	ldr	r3, [pc, #160]	; (800286c <_ZN13STM32Hardware5flushEv+0xb8>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	f083 0301 	eor.w	r3, r3, #1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <_ZN13STM32Hardware5flushEv+0x26>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <_ZN13STM32Hardware5flushEv+0x28>
 80027da:	2300      	movs	r3, #0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d040      	beq.n	8002862 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80027e0:	4b22      	ldr	r3, [pc, #136]	; (800286c <_ZN13STM32Hardware5flushEv+0xb8>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d032      	beq.n	800285c <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002802:	429a      	cmp	r2, r3
 8002804:	d20a      	bcs.n	800281c <_ZN13STM32Hardware5flushEv+0x68>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800280c:	b29a      	uxth	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8002814:	b29b      	uxth	r3, r3
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	b29b      	uxth	r3, r3
 800281a:	e006      	b.n	800282a <_ZN13STM32Hardware5flushEv+0x76>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8002822:	b29b      	uxth	r3, r3
 8002824:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002828:	b29b      	uxth	r3, r3
 800282a:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6858      	ldr	r0, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8002836:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	3304      	adds	r3, #4
 8002840:	89fa      	ldrh	r2, [r7, #14]
 8002842:	4619      	mov	r1, r3
 8002844:	f00a fbfc 	bl	800d040 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 800284e:	89fb      	ldrh	r3, [r7, #14]
 8002850:	4413      	add	r3, r2
 8002852:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
        }
        mutex = false;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <_ZN13STM32Hardware5flushEv+0xb8>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
      }
    }
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	24000538 	.word	0x24000538

08002870 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
      int n = length;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002886:	bfa8      	it	ge
 8002888:	f44f 6380 	movge.w	r3, #1024	; 0x400
 800288c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002894:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	4293      	cmp	r3, r2
 800289c:	bf28      	it	cs
 800289e:	4613      	movcs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80028a8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4413      	add	r3, r2
 80028b0:	3304      	adds	r3, #4
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f00c fcd4 	bl	800f264 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	4413      	add	r3, r2
 80028c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c

      if(n != n_tail){
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d00b      	beq.n	80028f0 <_ZN13STM32Hardware5writeEPhi+0x80>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	18d1      	adds	r1, r2, r3
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	461a      	mov	r2, r3
 80028ec:	f00c fcba 	bl	800f264 <memcpy>
      }

      flush();
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f7ff ff5f 	bl	80027b4 <_ZN13STM32Hardware5flushEv>
    }
 80028f6:	bf00      	nop
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	f002 fd33 	bl	8005370 <HAL_GetTick>
 800290a:	4603      	mov	r3, r0
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe ffb4 	bl	800188c <_ZN3ros3MsgC1Ev>
 8002924:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	0800f7b0 	.word	0x0800f7b0

08002964 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002964:	b480      	push	{r7}
 8002966:	b08b      	sub	sp, #44	; 0x2c
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002978:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800297c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002982:	6838      	ldr	r0, [r7, #0]
 8002984:	4401      	add	r1, r0
 8002986:	b2d3      	uxtb	r3, r2
 8002988:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800298a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	0a02      	lsrs	r2, r0, #8
 8002998:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800299c:	0a0b      	lsrs	r3, r1, #8
 800299e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029a0:	3101      	adds	r1, #1
 80029a2:	6838      	ldr	r0, [r7, #0]
 80029a4:	4401      	add	r1, r0
 80029a6:	b2d3      	uxtb	r3, r2
 80029a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80029aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	0c02      	lsrs	r2, r0, #16
 80029b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80029bc:	0c0b      	lsrs	r3, r1, #16
 80029be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029c0:	3102      	adds	r1, #2
 80029c2:	6838      	ldr	r0, [r7, #0]
 80029c4:	4401      	add	r1, r0
 80029c6:	b2d3      	uxtb	r3, r2
 80029c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80029ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	0e02      	lsrs	r2, r0, #24
 80029d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80029dc:	0e0b      	lsrs	r3, r1, #24
 80029de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029e0:	3103      	adds	r1, #3
 80029e2:	6838      	ldr	r0, [r7, #0]
 80029e4:	4401      	add	r1, r0
 80029e6:	b2d3      	uxtb	r3, r2
 80029e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80029ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	000a      	movs	r2, r1
 80029f8:	2300      	movs	r3, #0
 80029fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029fc:	3104      	adds	r1, #4
 80029fe:	6838      	ldr	r0, [r7, #0]
 8002a00:	4401      	add	r1, r0
 8002a02:	b2d3      	uxtb	r3, r2
 8002a04:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002a06:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	0a0a      	lsrs	r2, r1, #8
 8002a14:	2300      	movs	r3, #0
 8002a16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a18:	3105      	adds	r1, #5
 8002a1a:	6838      	ldr	r0, [r7, #0]
 8002a1c:	4401      	add	r1, r0
 8002a1e:	b2d3      	uxtb	r3, r2
 8002a20:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002a22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	0c0a      	lsrs	r2, r1, #16
 8002a30:	2300      	movs	r3, #0
 8002a32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a34:	3106      	adds	r1, #6
 8002a36:	6838      	ldr	r0, [r7, #0]
 8002a38:	4401      	add	r1, r0
 8002a3a:	b2d3      	uxtb	r3, r2
 8002a3c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002a3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	0e0a      	lsrs	r2, r1, #24
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a50:	3107      	adds	r1, #7
 8002a52:	6838      	ldr	r0, [r7, #0]
 8002a54:	4401      	add	r1, r0
 8002a56:	b2d3      	uxtb	r3, r2
 8002a58:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	3308      	adds	r3, #8
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a66:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002a6a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a70:	6838      	ldr	r0, [r7, #0]
 8002a72:	4401      	add	r1, r0
 8002a74:	b2d3      	uxtb	r3, r2
 8002a76:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002a78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	0a02      	lsrs	r2, r0, #8
 8002a86:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002a8a:	0a0b      	lsrs	r3, r1, #8
 8002a8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a8e:	3101      	adds	r1, #1
 8002a90:	6838      	ldr	r0, [r7, #0]
 8002a92:	4401      	add	r1, r0
 8002a94:	b2d3      	uxtb	r3, r2
 8002a96:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002a98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	0c02      	lsrs	r2, r0, #16
 8002aa6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002aaa:	0c0b      	lsrs	r3, r1, #16
 8002aac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aae:	3102      	adds	r1, #2
 8002ab0:	6838      	ldr	r0, [r7, #0]
 8002ab2:	4401      	add	r1, r0
 8002ab4:	b2d3      	uxtb	r3, r2
 8002ab6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002ab8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	0e02      	lsrs	r2, r0, #24
 8002ac6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002aca:	0e0b      	lsrs	r3, r1, #24
 8002acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ace:	3103      	adds	r1, #3
 8002ad0:	6838      	ldr	r0, [r7, #0]
 8002ad2:	4401      	add	r1, r0
 8002ad4:	b2d3      	uxtb	r3, r2
 8002ad6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002ad8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	000a      	movs	r2, r1
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aea:	3104      	adds	r1, #4
 8002aec:	6838      	ldr	r0, [r7, #0]
 8002aee:	4401      	add	r1, r0
 8002af0:	b2d3      	uxtb	r3, r2
 8002af2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002af4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	0a0a      	lsrs	r2, r1, #8
 8002b02:	2300      	movs	r3, #0
 8002b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b06:	3105      	adds	r1, #5
 8002b08:	6838      	ldr	r0, [r7, #0]
 8002b0a:	4401      	add	r1, r0
 8002b0c:	b2d3      	uxtb	r3, r2
 8002b0e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002b10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	0c0a      	lsrs	r2, r1, #16
 8002b1e:	2300      	movs	r3, #0
 8002b20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b22:	3106      	adds	r1, #6
 8002b24:	6838      	ldr	r0, [r7, #0]
 8002b26:	4401      	add	r1, r0
 8002b28:	b2d3      	uxtb	r3, r2
 8002b2a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002b2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	0e0a      	lsrs	r2, r1, #24
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b3e:	3107      	adds	r1, #7
 8002b40:	6838      	ldr	r0, [r7, #0]
 8002b42:	4401      	add	r1, r0
 8002b44:	b2d3      	uxtb	r3, r2
 8002b46:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	3308      	adds	r3, #8
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002b54:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002b58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b5e:	6838      	ldr	r0, [r7, #0]
 8002b60:	4401      	add	r1, r0
 8002b62:	b2d3      	uxtb	r3, r2
 8002b64:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002b66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	0a02      	lsrs	r2, r0, #8
 8002b74:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002b78:	0a0b      	lsrs	r3, r1, #8
 8002b7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b7c:	3101      	adds	r1, #1
 8002b7e:	6838      	ldr	r0, [r7, #0]
 8002b80:	4401      	add	r1, r0
 8002b82:	b2d3      	uxtb	r3, r2
 8002b84:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002b86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	0c02      	lsrs	r2, r0, #16
 8002b94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002b98:	0c0b      	lsrs	r3, r1, #16
 8002b9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b9c:	3102      	adds	r1, #2
 8002b9e:	6838      	ldr	r0, [r7, #0]
 8002ba0:	4401      	add	r1, r0
 8002ba2:	b2d3      	uxtb	r3, r2
 8002ba4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002ba6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	0e02      	lsrs	r2, r0, #24
 8002bb4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002bb8:	0e0b      	lsrs	r3, r1, #24
 8002bba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bbc:	3103      	adds	r1, #3
 8002bbe:	6838      	ldr	r0, [r7, #0]
 8002bc0:	4401      	add	r1, r0
 8002bc2:	b2d3      	uxtb	r3, r2
 8002bc4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002bc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	000a      	movs	r2, r1
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd8:	3104      	adds	r1, #4
 8002bda:	6838      	ldr	r0, [r7, #0]
 8002bdc:	4401      	add	r1, r0
 8002bde:	b2d3      	uxtb	r3, r2
 8002be0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002be2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	0a0a      	lsrs	r2, r1, #8
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bf4:	3105      	adds	r1, #5
 8002bf6:	6838      	ldr	r0, [r7, #0]
 8002bf8:	4401      	add	r1, r0
 8002bfa:	b2d3      	uxtb	r3, r2
 8002bfc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002bfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	0c0a      	lsrs	r2, r1, #16
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c10:	3106      	adds	r1, #6
 8002c12:	6838      	ldr	r0, [r7, #0]
 8002c14:	4401      	add	r1, r0
 8002c16:	b2d3      	uxtb	r3, r2
 8002c18:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002c1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	0e0a      	lsrs	r2, r1, #24
 8002c28:	2300      	movs	r3, #0
 8002c2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c2c:	3107      	adds	r1, #7
 8002c2e:	6838      	ldr	r0, [r7, #0]
 8002c30:	4401      	add	r1, r0
 8002c32:	b2d3      	uxtb	r3, r2
 8002c34:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	3308      	adds	r3, #8
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002c3e:	4618      	mov	r0, r3
 8002c40:	372c      	adds	r7, #44	; 0x2c
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002c4a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002c4e:	b0eb      	sub	sp, #428	; 0x1ac
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002c56:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c6c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c70:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002c74:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c78:	4413      	add	r3, r2
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2200      	movs	r2, #0
 8002c80:	461c      	mov	r4, r3
 8002c82:	4615      	mov	r5, r2
 8002c84:	ea40 0804 	orr.w	r8, r0, r4
 8002c88:	ea41 0905 	orr.w	r9, r1, r5
 8002c8c:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c90:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c94:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c9e:	4413      	add	r3, r2
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	469a      	mov	sl, r3
 8002ca8:	4693      	mov	fp, r2
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002cb6:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002cba:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002cbe:	ea40 0402 	orr.w	r4, r0, r2
 8002cc2:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ccc:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002cd0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002cd4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002cd8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cdc:	1c9a      	adds	r2, r3, #2
 8002cde:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ce2:	4413      	add	r3, r2
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002cee:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002cfe:	464c      	mov	r4, r9
 8002d00:	0423      	lsls	r3, r4, #16
 8002d02:	4644      	mov	r4, r8
 8002d04:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002d08:	4644      	mov	r4, r8
 8002d0a:	0422      	lsls	r2, r4, #16
 8002d0c:	ea40 0402 	orr.w	r4, r0, r2
 8002d10:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002d14:	430b      	orrs	r3, r1
 8002d16:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002d1a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002d1e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d22:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002d26:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d2a:	1cda      	adds	r2, r3, #3
 8002d2c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d30:	4413      	add	r3, r2
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2200      	movs	r2, #0
 8002d38:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002d3c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002d40:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002d44:	4623      	mov	r3, r4
 8002d46:	0a1b      	lsrs	r3, r3, #8
 8002d48:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002d4c:	4623      	mov	r3, r4
 8002d4e:	061b      	lsls	r3, r3, #24
 8002d50:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002d54:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002d58:	4623      	mov	r3, r4
 8002d5a:	4303      	orrs	r3, r0
 8002d5c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d60:	462b      	mov	r3, r5
 8002d62:	430b      	orrs	r3, r1
 8002d64:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d68:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002d6c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002d70:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002d74:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d78:	1d1a      	adds	r2, r3, #4
 8002d7a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d7e:	4413      	add	r3, r2
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2200      	movs	r2, #0
 8002d86:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002d8a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002d9a:	0023      	movs	r3, r4
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	ea40 0402 	orr.w	r4, r0, r2
 8002da2:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002da6:	430b      	orrs	r3, r1
 8002da8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002dac:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002db0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002db4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002db8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dbc:	1d5a      	adds	r2, r3, #5
 8002dbe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dc2:	4413      	add	r3, r2
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002dce:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002dde:	0223      	lsls	r3, r4, #8
 8002de0:	2200      	movs	r2, #0
 8002de2:	ea40 0402 	orr.w	r4, r0, r2
 8002de6:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002dea:	430b      	orrs	r3, r1
 8002dec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002df0:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002df4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002df8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002dfc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e00:	1d9a      	adds	r2, r3, #6
 8002e02:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e06:	4413      	add	r3, r2
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002e12:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002e22:	0423      	lsls	r3, r4, #16
 8002e24:	2200      	movs	r2, #0
 8002e26:	ea40 0402 	orr.w	r4, r0, r2
 8002e2a:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e34:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002e38:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002e3c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002e40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e44:	1dda      	adds	r2, r3, #7
 8002e46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e4a:	4413      	add	r3, r2
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2200      	movs	r2, #0
 8002e52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002e56:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002e66:	0623      	lsls	r3, r4, #24
 8002e68:	2200      	movs	r2, #0
 8002e6a:	ea40 0402 	orr.w	r4, r0, r2
 8002e6e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002e72:	430b      	orrs	r3, r1
 8002e74:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002e78:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002e7c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002e80:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002e84:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002e88:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002e8c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e90:	3308      	adds	r3, #8
 8002e92:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ea2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ea6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002eaa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002eae:	4413      	add	r3, r2
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002eba:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002ebe:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	4303      	orrs	r3, r0
 8002ec6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002eca:	462b      	mov	r3, r5
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ed2:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002ed6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002eda:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ede:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ee8:	4413      	add	r3, r2
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002ef4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002f04:	464c      	mov	r4, r9
 8002f06:	0223      	lsls	r3, r4, #8
 8002f08:	4644      	mov	r4, r8
 8002f0a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f0e:	4644      	mov	r4, r8
 8002f10:	0222      	lsls	r2, r4, #8
 8002f12:	ea40 0402 	orr.w	r4, r0, r2
 8002f16:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002f1a:	430b      	orrs	r3, r1
 8002f1c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002f20:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002f24:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f28:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002f2c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f30:	1c9a      	adds	r2, r3, #2
 8002f32:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f36:	4413      	add	r3, r2
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002f52:	464c      	mov	r4, r9
 8002f54:	0423      	lsls	r3, r4, #16
 8002f56:	4644      	mov	r4, r8
 8002f58:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002f5c:	4644      	mov	r4, r8
 8002f5e:	0422      	lsls	r2, r4, #16
 8002f60:	ea40 0402 	orr.w	r4, r0, r2
 8002f64:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f6e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002f72:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f76:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002f7a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f7e:	1cda      	adds	r2, r3, #3
 8002f80:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f84:	4413      	add	r3, r2
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f90:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f94:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002f98:	4623      	mov	r3, r4
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002fa0:	4623      	mov	r3, r4
 8002fa2:	061b      	lsls	r3, r3, #24
 8002fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fa8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002fac:	4623      	mov	r3, r4
 8002fae:	4303      	orrs	r3, r0
 8002fb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fb4:	462b      	mov	r3, r5
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fbc:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002fc0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002fc4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002fc8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fcc:	1d1a      	adds	r2, r3, #4
 8002fce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fd2:	4413      	add	r3, r2
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fde:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002fee:	0023      	movs	r3, r4
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	ea40 0402 	orr.w	r4, r0, r2
 8002ff6:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002ffa:	430b      	orrs	r3, r1
 8002ffc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003000:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003004:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003008:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800300c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003010:	1d5a      	adds	r2, r3, #5
 8003012:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003016:	4413      	add	r3, r2
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2200      	movs	r2, #0
 800301e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003022:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003032:	0223      	lsls	r3, r4, #8
 8003034:	2200      	movs	r2, #0
 8003036:	ea40 0402 	orr.w	r4, r0, r2
 800303a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800303e:	430b      	orrs	r3, r1
 8003040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003044:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003048:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800304c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003050:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003054:	1d9a      	adds	r2, r3, #6
 8003056:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800305a:	4413      	add	r3, r2
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2200      	movs	r2, #0
 8003062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003066:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003076:	0423      	lsls	r3, r4, #16
 8003078:	2200      	movs	r2, #0
 800307a:	ea40 0402 	orr.w	r4, r0, r2
 800307e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003082:	430b      	orrs	r3, r1
 8003084:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003088:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800308c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003090:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003094:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003098:	1dda      	adds	r2, r3, #7
 800309a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800309e:	4413      	add	r3, r2
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2200      	movs	r2, #0
 80030a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80030ba:	0623      	lsls	r3, r4, #24
 80030bc:	2200      	movs	r2, #0
 80030be:	ea40 0402 	orr.w	r4, r0, r2
 80030c2:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80030c6:	430b      	orrs	r3, r1
 80030c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80030cc:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80030d0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 80030d4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80030d8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80030dc:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80030e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030e4:	3308      	adds	r3, #8
 80030e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80030f6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80030fa:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80030fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003102:	4413      	add	r3, r2
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2200      	movs	r2, #0
 800310a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800310e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003112:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003116:	4623      	mov	r3, r4
 8003118:	4303      	orrs	r3, r0
 800311a:	67bb      	str	r3, [r7, #120]	; 0x78
 800311c:	462b      	mov	r3, r5
 800311e:	430b      	orrs	r3, r1
 8003120:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003122:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003126:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800312a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800312e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003138:	4413      	add	r3, r2
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2200      	movs	r2, #0
 8003140:	673b      	str	r3, [r7, #112]	; 0x70
 8003142:	677a      	str	r2, [r7, #116]	; 0x74
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003150:	464c      	mov	r4, r9
 8003152:	0223      	lsls	r3, r4, #8
 8003154:	4644      	mov	r4, r8
 8003156:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800315a:	4644      	mov	r4, r8
 800315c:	0222      	lsls	r2, r4, #8
 800315e:	ea40 0402 	orr.w	r4, r0, r2
 8003162:	66bc      	str	r4, [r7, #104]	; 0x68
 8003164:	430b      	orrs	r3, r1
 8003166:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003168:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800316c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003170:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003174:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003178:	1c9a      	adds	r2, r3, #2
 800317a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800317e:	4413      	add	r3, r2
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2200      	movs	r2, #0
 8003186:	663b      	str	r3, [r7, #96]	; 0x60
 8003188:	667a      	str	r2, [r7, #100]	; 0x64
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	f04f 0300 	mov.w	r3, #0
 8003192:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003196:	464c      	mov	r4, r9
 8003198:	0423      	lsls	r3, r4, #16
 800319a:	4644      	mov	r4, r8
 800319c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80031a0:	4644      	mov	r4, r8
 80031a2:	0422      	lsls	r2, r4, #16
 80031a4:	ea40 0402 	orr.w	r4, r0, r2
 80031a8:	65bc      	str	r4, [r7, #88]	; 0x58
 80031aa:	430b      	orrs	r3, r1
 80031ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031ae:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80031b2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80031b6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80031ba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031be:	1cda      	adds	r2, r3, #3
 80031c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031c4:	4413      	add	r3, r2
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2200      	movs	r2, #0
 80031cc:	653b      	str	r3, [r7, #80]	; 0x50
 80031ce:	657a      	str	r2, [r7, #84]	; 0x54
 80031d0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80031d4:	4623      	mov	r3, r4
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031da:	4623      	mov	r3, r4
 80031dc:	061b      	lsls	r3, r3, #24
 80031de:	64bb      	str	r3, [r7, #72]	; 0x48
 80031e0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80031e4:	4623      	mov	r3, r4
 80031e6:	4303      	orrs	r3, r0
 80031e8:	643b      	str	r3, [r7, #64]	; 0x40
 80031ea:	462b      	mov	r3, r5
 80031ec:	430b      	orrs	r3, r1
 80031ee:	647b      	str	r3, [r7, #68]	; 0x44
 80031f0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80031f4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80031f8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80031fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003200:	1d1a      	adds	r2, r3, #4
 8003202:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003206:	4413      	add	r3, r2
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2200      	movs	r2, #0
 800320e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003210:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800321c:	0023      	movs	r3, r4
 800321e:	2200      	movs	r2, #0
 8003220:	ea40 0402 	orr.w	r4, r0, r2
 8003224:	633c      	str	r4, [r7, #48]	; 0x30
 8003226:	430b      	orrs	r3, r1
 8003228:	637b      	str	r3, [r7, #52]	; 0x34
 800322a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800322e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003232:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003236:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800323a:	1d5a      	adds	r2, r3, #5
 800323c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003240:	4413      	add	r3, r2
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2200      	movs	r2, #0
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
 800324a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003256:	0223      	lsls	r3, r4, #8
 8003258:	2200      	movs	r2, #0
 800325a:	ea40 0402 	orr.w	r4, r0, r2
 800325e:	623c      	str	r4, [r7, #32]
 8003260:	430b      	orrs	r3, r1
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
 8003264:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003268:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800326c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003270:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003274:	3306      	adds	r3, #6
 8003276:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800327a:	4413      	add	r3, r2
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2200      	movs	r2, #0
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	61fa      	str	r2, [r7, #28]
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	69bc      	ldr	r4, [r7, #24]
 8003290:	0423      	lsls	r3, r4, #16
 8003292:	2200      	movs	r2, #0
 8003294:	ea40 0402 	orr.w	r4, r0, r2
 8003298:	613c      	str	r4, [r7, #16]
 800329a:	430b      	orrs	r3, r1
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80032a2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80032a6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80032aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032ae:	3307      	adds	r3, #7
 80032b0:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80032b4:	4413      	add	r3, r2
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2200      	movs	r2, #0
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	60fa      	str	r2, [r7, #12]
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	68bc      	ldr	r4, [r7, #8]
 80032ca:	0623      	lsls	r3, r4, #24
 80032cc:	2200      	movs	r2, #0
 80032ce:	ea40 0402 	orr.w	r4, r0, r2
 80032d2:	603c      	str	r4, [r7, #0]
 80032d4:	430b      	orrs	r3, r1
 80032d6:	607b      	str	r3, [r7, #4]
 80032d8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80032dc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 80032e0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80032e4:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 80032e8:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80032ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032f0:	3308      	adds	r3, #8
 80032f2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80032f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 80032fa:	4618      	mov	r0, r3
 80032fc:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003300:	46bd      	mov	sp, r7
 8003302:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003306:	4770      	bx	lr

08003308 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	4b03      	ldr	r3, [pc, #12]	; (8003320 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	0800f680 	.word	0x0800f680

08003324 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800332e:	4618      	mov	r0, r3
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	0800f698 	.word	0x0800f698

08003340 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4618      	mov	r0, r3
 800334c:	f7fe fa9e 	bl	800188c <_ZN3ros3MsgC1Ev>
 8003350:	4a08      	ldr	r2, [pc, #32]	; (8003374 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3308      	adds	r3, #8
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fada 	bl	8002914 <_ZN13geometry_msgs7Vector3C1Ev>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3328      	adds	r3, #40	; 0x28
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff fad5 	bl	8002914 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	0800f798 	.word	0x0800f798

08003378 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f103 0008 	add.w	r0, r3, #8
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	4413      	add	r3, r2
 8003392:	4619      	mov	r1, r3
 8003394:	f7ff fae6 	bl	8002964 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	4413      	add	r3, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	f7ff fad9 	bl	8002964 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80033b2:	4602      	mov	r2, r0
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4413      	add	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
      return offset;
 80033ba:	68fb      	ldr	r3, [r7, #12]
    }
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f103 0008 	add.w	r0, r3, #8
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	4413      	add	r3, r2
 80033de:	4619      	mov	r1, r3
 80033e0:	f7ff fc33 	bl	8002c4a <_ZN13geometry_msgs7Vector311deserializeEPh>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4413      	add	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	4413      	add	r3, r2
 80033f8:	4619      	mov	r1, r3
 80033fa:	f7ff fc26 	bl	8002c4a <_ZN13geometry_msgs7Vector311deserializeEPh>
 80033fe:	4602      	mov	r2, r0
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4413      	add	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
     return offset;
 8003406:	68fb      	ldr	r3, [r7, #12]
    }
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	4b03      	ldr	r3, [pc, #12]	; (8003428 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	0800f6bc 	.word	0x0800f6bc

0800342c <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	4b03      	ldr	r3, [pc, #12]	; (8003444 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	0800f6d0 	.word	0x0800f6d0

08003448 <_Z12vel_callbackRKN13geometry_msgs5TwistE>:
#include <ros.h>
#include <rosserial.h>
#include "geometry_msgs/TwistWithCovariance.h"

void vel_callback(const geometry_msgs::Twist &msg)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
	linearvelocity_x = msg.linear.x;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003456:	490a      	ldr	r1, [pc, #40]	; (8003480 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 8003458:	e9c1 2300 	strd	r2, r3, [r1]
	linearvelocity_y = msg.linear.y;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003462:	4908      	ldr	r1, [pc, #32]	; (8003484 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x3c>)
 8003464:	e9c1 2300 	strd	r2, r3, [r1]
	angularvelocity = msg.angular.z;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800346e:	4906      	ldr	r1, [pc, #24]	; (8003488 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x40>)
 8003470:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	240000c0 	.word	0x240000c0
 8003484:	240000c8 	.word	0x240000c8
 8003488:	240000d0 	.word	0x240000d0

0800348c <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Twist> vel_sub("/cmd_vel", vel_callback);
ros::Publisher odom_pub("Toposition", &real_speed);
double odom_vel[3];

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003494:	4805      	ldr	r0, [pc, #20]	; (80034ac <HAL_UART_TxCpltCallback+0x20>)
 8003496:	f000 f991 	bl	80037bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 800349a:	4603      	mov	r3, r0
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff f989 	bl	80027b4 <_ZN13STM32Hardware5flushEv>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	2400053c 	.word	0x2400053c

080034b0 <Rosserial_Init>:

void Rosserial_Init(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
    nh.initNode();
 80034b4:	4806      	ldr	r0, [pc, #24]	; (80034d0 <Rosserial_Init+0x20>)
 80034b6:	f000 f98d 	bl	80037d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
    nh.advertise(odom_pub);
 80034ba:	4906      	ldr	r1, [pc, #24]	; (80034d4 <Rosserial_Init+0x24>)
 80034bc:	4804      	ldr	r0, [pc, #16]	; (80034d0 <Rosserial_Init+0x20>)
 80034be:	f000 f9b2 	bl	8003826 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
    nh.subscribe(vel_sub);
 80034c2:	4905      	ldr	r1, [pc, #20]	; (80034d8 <Rosserial_Init+0x28>)
 80034c4:	4802      	ldr	r0, [pc, #8]	; (80034d0 <Rosserial_Init+0x20>)
 80034c6:	f000 f9dc 	bl	8003882 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	2400053c 	.word	0x2400053c
 80034d4:	24001728 	.word	0x24001728
 80034d8:	240016c8 	.word	0x240016c8

080034dc <Rosserial_Spin>:

void Rosserial_Spin(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
		nh.spinOnce();
 80034e0:	4802      	ldr	r0, [pc, #8]	; (80034ec <Rosserial_Spin+0x10>)
 80034e2:	f000 f9fb 	bl	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	2400053c 	.word	0x2400053c

080034f0 <Rosserial_Checkconfigstate>:

bool Rosserial_Checkconfigstate(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
		return nh.config_state();
 80034f4:	4802      	ldr	r0, [pc, #8]	; (8003500 <Rosserial_Checkconfigstate+0x10>)
 80034f6:	f000 fc62 	bl	8003dbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE12config_stateEv>
 80034fa:	4603      	mov	r3, r0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	2400053c 	.word	0x2400053c

08003504 <Rosserial_GetHardware>:

void Rosserial_GetHardware(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
		nh.getHardware()->init();
 8003508:	4804      	ldr	r0, [pc, #16]	; (800351c <Rosserial_GetHardware+0x18>)
 800350a:	f000 f957 	bl	80037bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 800350e:	4603      	mov	r3, r0
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff f905 	bl	8002720 <_ZN13STM32Hardware4initEv>
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	2400053c 	.word	0x2400053c

08003520 <odom_store>:

void odom_store(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
		real_speed.linear.x =  odom_vel[0];
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <odom_store+0x34>)
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	490b      	ldr	r1, [pc, #44]	; (8003558 <odom_store+0x38>)
 800352c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		real_speed.linear.y = odom_vel[1];
 8003530:	4b08      	ldr	r3, [pc, #32]	; (8003554 <odom_store+0x34>)
 8003532:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003536:	4908      	ldr	r1, [pc, #32]	; (8003558 <odom_store+0x38>)
 8003538:	e9c1 2306 	strd	r2, r3, [r1, #24]
		real_speed.angular.z = odom_vel[2];
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <odom_store+0x34>)
 800353e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003542:	4905      	ldr	r1, [pc, #20]	; (8003558 <odom_store+0x38>)
 8003544:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	24001740 	.word	0x24001740
 8003558:	24001680 	.word	0x24001680

0800355c <odom_publish>:

void odom_publish(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
		odom_pub.publish(&real_speed);
 8003560:	4904      	ldr	r1, [pc, #16]	; (8003574 <odom_publish+0x18>)
 8003562:	4805      	ldr	r0, [pc, #20]	; (8003578 <odom_publish+0x1c>)
 8003564:	f7fe ffdf 	bl	8002526 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 8003568:	4804      	ldr	r0, [pc, #16]	; (800357c <odom_publish+0x20>)
 800356a:	f000 f9b7 	bl	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	24001680 	.word	0x24001680
 8003578:	24001728 	.word	0x24001728
 800357c:	2400053c 	.word	0x2400053c

08003580 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b03      	cmp	r3, #3
 8003592:	d80d      	bhi.n	80035b0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	fa22 f103 	lsr.w	r1, r2, r3
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4413      	add	r3, r2
 80035a4:	b2ca      	uxtb	r2, r1
 80035a6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	3301      	adds	r3, #1
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	e7ee      	b.n	800358e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80035b0:	bf00      	nop
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80035cc:	2300      	movs	r3, #0
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d811      	bhi.n	80035fa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6839      	ldr	r1, [r7, #0]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	440a      	add	r2, r1
 80035e0:	7812      	ldrb	r2, [r2, #0]
 80035e2:	4611      	mov	r1, r2
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	00d2      	lsls	r2, r2, #3
 80035e8:	fa01 f202 	lsl.w	r2, r1, r2
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	3301      	adds	r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	e7ea      	b.n	80035d0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
	...

08003608 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	4a04      	ldr	r2, [pc, #16]	; (8003624 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	0800f7e0 	.word	0x0800f7e0

08003628 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff ffe8 	bl	8003608 <_ZN3ros15NodeHandleBase_C1Ev>
 8003638:	4a45      	ldr	r2, [pc, #276]	; (8003750 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x128>)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3304      	adds	r3, #4
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff f850 	bl	80026e8 <_ZN13STM32HardwareC1Ev>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	f241 1318 	movw	r3, #4376	; 0x1118
 800365a:	4413      	add	r3, r2
 800365c:	4618      	mov	r0, r3
 800365e:	f7fe fc89 	bl	8001f74 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b18      	cmp	r3, #24
 800366a:	d80a      	bhi.n	8003682 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5a>
      publishers[i] = 0;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003674:	2100      	movs	r1, #0
 8003676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	3301      	adds	r3, #1
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	e7f1      	b.n	8003666 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b18      	cmp	r3, #24
 800368a:	d80b      	bhi.n	80036a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7c>
      subscribers[i] = 0;
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	2200      	movs	r2, #0
 800369a:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	3301      	adds	r3, #1
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	e7f0      	b.n	8003686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5e>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ae:	d20a      	bcs.n	80036c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9e>
      message_in[i] = 0;
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4413      	add	r3, r2
 80036b6:	f603 0328 	addw	r3, r3, #2088	; 0x828
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	3301      	adds	r3, #1
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	e7f0      	b.n	80036a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d0:	d20a      	bcs.n	80036e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xc0>
      message_out[i] = 0;
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4413      	add	r3, r2
 80036d8:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	3301      	adds	r3, #1
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	e7f0      	b.n	80036ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa2>

    req_param_resp.ints_length = 0;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ee:	461a      	mov	r2, r3
 80036f0:	2300      	movs	r3, #0
 80036f2:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    req_param_resp.ints = NULL;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036fc:	461a      	mov	r2, r3
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    req_param_resp.floats_length = 0;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800370a:	461a      	mov	r2, r3
 800370c:	2300      	movs	r3, #0
 800370e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    req_param_resp.floats = NULL;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003718:	461a      	mov	r2, r3
 800371a:	2300      	movs	r3, #0
 800371c:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
    req_param_resp.ints_length = 0;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003726:	461a      	mov	r2, r3
 8003728:	2300      	movs	r3, #0
 800372a:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    req_param_resp.ints = NULL;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003734:	461a      	mov	r2, r3
 8003736:	2300      	movs	r3, #0
 8003738:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

    spin_timeout_ = 0;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  }
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	0800f784 	.word	0x0800f784

08003754 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	4a04      	ldr	r2, [pc, #16]	; (8003770 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	0800f7c8 	.word	0x0800f7c8

08003774 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff ffe5 	bl	8003754 <_ZN3ros11Subscriber_C1Ev>
 800378a:	4a0b      	ldr	r2, [pc, #44]	; (80037b8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3310      	adds	r3, #16
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff fdd3 	bl	8003340 <_ZN13geometry_msgs5TwistC1Ev>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	659a      	str	r2, [r3, #88]	; 0x58
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	609a      	str	r2, [r3, #8]
  };
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	0800f76c 	.word	0x0800f76c

080037bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:

  Hardware* getHardware()
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3304      	adds	r3, #4
  }
 80037c8:	4618      	mov	r0, r3
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3304      	adds	r3, #4
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fe ff9d 	bl	8002720 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ec:	461a      	mov	r2, r3
 80037ee:	2300      	movs	r3, #0
 80037f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    bytes_ = 0;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037fa:	461a      	mov	r2, r3
 80037fc:	2300      	movs	r3, #0
 80037fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    index_ = 0;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003808:	461a      	mov	r2, r3
 800380a:	2300      	movs	r3, #0
 800380c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    topic_ = 0;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003816:	461a      	mov	r2, r3
 8003818:	2300      	movs	r3, #0
 800381a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
  };
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b18      	cmp	r3, #24
 8003838:	dc1c      	bgt.n	8003874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4e>
    {
      if (publishers[i] == 0) // empty slot
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d110      	bne.n	800386c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003852:	6839      	ldr	r1, [r7, #0]
 8003854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	60da      	str	r2, [r3, #12]
        return true;
 8003868:	2301      	movs	r3, #1
 800386a:	e004      	b.n	8003876 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3301      	adds	r3, #1
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	e7df      	b.n	8003834 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8003874:	2300      	movs	r3, #0
  }
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003882:	b480      	push	{r7}
 8003884:	b085      	sub	sp, #20
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b18      	cmp	r3, #24
 8003894:	dc1b      	bgt.n	80038ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f203 4322 	addw	r3, r3, #1058	; 0x422
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10e      	bne.n	80038c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f203 4322 	addw	r3, r3, #1058	; 0x422
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	605a      	str	r2, [r3, #4]
        return true;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e004      	b.n	80038d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3301      	adds	r3, #1
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	e7e0      	b.n	8003890 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 80038ce:	2300      	movs	r3, #0
  }
 80038d0:	4618      	mov	r0, r3
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3304      	adds	r3, #4
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff f808 	bl	80028fe <_ZN13STM32Hardware4timeEv>
 80038ee:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003902:	4293      	cmp	r3, r2
 8003904:	d905      	bls.n	8003912 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    if (mode_ != MODE_FIRST_FF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00e      	beq.n	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003926:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	429a      	cmp	r2, r3
 800392e:	d906      	bls.n	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003936:	461a      	mov	r2, r3
 8003938:	2300      	movs	r3, #0
 800393a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      if (spin_timeout_ > 0)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8003944:	2b00      	cmp	r3, #0
 8003946:	d014      	beq.n	8003972 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3304      	adds	r3, #4
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe ffd6 	bl	80028fe <_ZN13STM32Hardware4timeEv>
 8003952:	4602      	mov	r2, r0
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1ad2      	subs	r2, r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800395e:	429a      	cmp	r2, r3
 8003960:	bf8c      	ite	hi
 8003962:	2301      	movhi	r3, #1
 8003964:	2300      	movls	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 800396c:	f06f 0301 	mvn.w	r3, #1
 8003970:	e221      	b.n	8003db6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      int data = hardware_.read();
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3304      	adds	r3, #4
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe feee 	bl	8002758 <_ZN13STM32Hardware4readEv>
 800397c:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	f2c0 81fa 	blt.w	8003d7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x49e>
      checksum_ += data;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800398c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4413      	add	r3, r2
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800399a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039a8:	2b07      	cmp	r3, #7
 80039aa:	d12b      	bne.n	8003a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x128>
        message_in[index_++] = data;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80039be:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	b2d1      	uxtb	r1, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	4413      	add	r3, r2
 80039ca:	460a      	mov	r2, r1
 80039cc:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
        bytes_--;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039da:	3b01      	subs	r3, #1
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1a4      	bne.n	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039fa:	461a      	mov	r2, r3
 80039fc:	2308      	movs	r3, #8
 80039fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a02:	e79c      	b.n	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d130      	bne.n	8003a74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x198>
        if (data == 0xff)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2bff      	cmp	r3, #255	; 0xff
 8003a16:	d112      	bne.n	8003a3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a22:	3301      	adds	r3, #1
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3314      	adds	r3, #20
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a38:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
 8003a3c:	e77f      	b.n	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3304      	adds	r3, #4
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe ff5b 	bl	80028fe <_ZN13STM32Hardware4timeEv>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a52:	4293      	cmp	r3, r2
 8003a54:	bf8c      	ite	hi
 8003a56:	2301      	movhi	r3, #1
 8003a58:	2300      	movls	r3, #0
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f43f af6e 	beq.w	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
          return SPIN_TIMEOUT;
 8003a6e:	f06f 0301 	mvn.w	r3, #1
 8003a72:	e1a0      	b.n	8003db6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d121      	bne.n	8003ac6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ea>
        if (data == PROTOCOL_VER)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2bfe      	cmp	r3, #254	; 0xfe
 8003a86:	d10b      	bne.n	8003aa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1c4>
          mode_++;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a92:	3301      	adds	r3, #1
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a9e:	e74e      	b.n	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
          if (configured_ == false)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f47f af40 	bne.w	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f98c 	bl	8003ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 8003ac4:	e73b      	b.n	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d120      	bne.n	8003b16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23a>
        bytes_ = data;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ada:	461a      	mov	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        index_ = 0;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2300      	movs	r3, #0
 8003aec:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
        mode_++;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003af6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003afa:	3301      	adds	r3, #1
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        checksum_ = data;               /* first byte for calculating size checksum */
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8003b14:	e713      	b.n	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d118      	bne.n	8003b56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27a>
        bytes_ += data << 8;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b2a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	021b      	lsls	r3, r3, #8
 8003b32:	4413      	add	r3, r2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b48:	3301      	adds	r3, #1
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b50:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b54:	e6f3      	b.n	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d11f      	bne.n	8003ba4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c8>
        if ((checksum_ % 256) == 255)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b6a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b6e:	425a      	negs	r2, r3
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	bf58      	it	pl
 8003b76:	4253      	negpl	r3, r2
 8003b78:	2bff      	cmp	r3, #255	; 0xff
 8003b7a:	d10b      	bne.n	8003b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b8>
          mode_++;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b86:	3301      	adds	r3, #1
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b92:	e6d4      	b.n	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ba2:	e6cc      	b.n	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bae:	2b05      	cmp	r3, #5
 8003bb0:	d119      	bne.n	8003be6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30a>
        topic_ = data;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bca:	3301      	adds	r3, #1
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        checksum_ = data;               /* first byte included in checksum */
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bdc:	461a      	mov	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8003be4:	e6ab      	b.n	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bf0:	2b06      	cmp	r3, #6
 8003bf2:	d123      	bne.n	8003c3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x360>
        topic_ += data << 8;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bfa:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	021b      	lsls	r3, r3, #8
 8003c02:	4413      	add	r3, r2
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c0a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_ = MODE_MESSAGE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c14:	461a      	mov	r2, r3
 8003c16:	2307      	movs	r3, #7
 8003c18:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f47f ae89 	bne.w	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c32:	461a      	mov	r2, r3
 8003c34:	2308      	movs	r3, #8
 8003c36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c3a:	e680      	b.n	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	f47f ae79 	bne.w	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c52:	461a      	mov	r2, r3
 8003c54:	2300      	movs	r3, #0
 8003c56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if ((checksum_ % 256) == 255)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c60:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003c64:	425a      	negs	r2, r3
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	bf58      	it	pl
 8003c6c:	4253      	negpl	r3, r2
 8003c6e:	2bff      	cmp	r3, #255	; 0xff
 8003c70:	f47f ae65 	bne.w	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c7a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d116      	bne.n	8003cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d4>
            requestSyncTime();
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f8aa 	bl	8003ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f8c5 	bl	8003e18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c94:	461a      	mov	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            last_sync_receive_time = c_time;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            return SPIN_ERR;
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cae:	e082      	b.n	8003db6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
          else if (topic_ == TopicInfo::ID_TIME)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cb6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003cba:	2b0a      	cmp	r3, #10
 8003cbc:	d107      	bne.n	8003cce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f2>
            syncTime(message_in);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f603 0328 	addw	r3, r3, #2088	; 0x828
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f988 	bl	8003fdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 8003ccc:	e637      	b.n	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003cd8:	2b06      	cmp	r3, #6
 8003cda:	d111      	bne.n	8003d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
            req_param_resp.deserialize(message_in);
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	f241 1318 	movw	r3, #4376	; 0x1118
 8003ce2:	4413      	add	r3, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	f602 0228 	addw	r2, r2, #2088	; 0x828
 8003cea:	4611      	mov	r1, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fe fa76 	bl	80021de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8003cfe:	e61e      	b.n	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d06:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003d0a:	2b0b      	cmp	r3, #11
 8003d0c:	d106      	bne.n	8003d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x440>
            configured_ = false;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8003d1a:	e610      	b.n	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d22:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003d26:	3b64      	subs	r3, #100	; 0x64
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f43f ae02 	beq.w	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d40:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003d44:	3b64      	subs	r3, #100	; 0x64
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	6858      	ldr	r0, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d58:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003d5c:	3b64      	subs	r3, #100	; 0x64
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	f602 0228 	addw	r2, r2, #2088	; 0x828
 8003d74:	4611      	mov	r1, r2
 8003d76:	4798      	blx	r3
    while (true)
 8003d78:	e5e1      	b.n	800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 8003d7a:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d82:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d014      	beq.n	8003db4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d90:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d909      	bls.n	8003db4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
      requestSyncTime();
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f81b 	bl	8003ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dac:	461a      	mov	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    return SPIN_OK;
 8003db4:	2300      	movs	r3, #0
  }
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE12config_stateEv>:
  }

  //wo zi gi gia der public
public:

  bool config_state()
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  {
  	return configured_;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dcc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
  }
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003de4:	f107 030c 	add.w	r3, r7, #12
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fd fd5f 	bl	80018ac <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f107 020c 	add.w	r2, r7, #12
 8003df8:	210a      	movs	r1, #10
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	4798      	blx	r3
    rt_time = hardware_.time();
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3304      	adds	r3, #4
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fe fd7b 	bl	80028fe <_ZN13STM32Hardware4timeEv>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
  }
 8003e10:	bf00      	nop
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
  void negotiateTopics()
 8003e18:	b590      	push	{r4, r7, lr}
 8003e1a:	b08b      	sub	sp, #44	; 0x2c
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 8003e20:	f107 030c 	add.w	r3, r7, #12
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fd fe31 	bl	8001a8c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	2b18      	cmp	r3, #24
 8003e32:	dc5b      	bgt.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd4>
      if (publishers[i] != 0) // non-empty slot
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e38:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d04f      	beq.n	8003ee4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xcc>
        ti.topic_id = publishers[i]->id_;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e48:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5a:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6a:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e72:	6859      	ldr	r1, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e78:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3308      	adds	r3, #8
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4608      	mov	r0, r1
 8003e8a:	4798      	blx	r3
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e94:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e9c:	6859      	ldr	r1, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea2:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	330c      	adds	r3, #12
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4608      	mov	r0, r1
 8003eb4:	4798      	blx	r3
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ebe:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681c      	ldr	r4, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eca:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe fb3b 	bl	800254e <_ZN3ros9Publisher15getEndpointTypeEv>
 8003ed8:	4601      	mov	r1, r0
 8003eda:	f107 030c 	add.w	r3, r7, #12
 8003ede:	461a      	mov	r2, r3
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eea:	e7a0      	b.n	8003e2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003eec:	2300      	movs	r3, #0
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	2b18      	cmp	r3, #24
 8003ef4:	dc68      	bgt.n	8003fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1b0>
      if (subscribers[i] != 0) // non-empty slot
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d05b      	beq.n	8003fc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a8>
        ti.topic_id = subscribers[i]->id_;
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	6859      	ldr	r1, [r3, #4]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3308      	adds	r3, #8
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4608      	mov	r0, r1
 8003f52:	4798      	blx	r3
 8003f54:	4603      	mov	r3, r0
 8003f56:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	6859      	ldr	r1, [r3, #4]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4608      	mov	r0, r1
 8003f7c:	4798      	blx	r3
 8003f7e:	4603      	mov	r3, r0
 8003f80:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f86:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681c      	ldr	r4, [r3, #0]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3304      	adds	r3, #4
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4798      	blx	r3
 8003fb4:	4601      	mov	r1, r0
 8003fb6:	f107 030c 	add.w	r3, r7, #12
 8003fba:	461a      	mov	r2, r3
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc6:	e793      	b.n	8003ef0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd8>
    configured_ = true;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
  }
 8003fd4:	bf00      	nop
 8003fd6:	372c      	adds	r7, #44	; 0x2c
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd90      	pop	{r4, r7, pc}

08003fdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003fe6:	f107 0308 	add.w	r3, r7, #8
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd fc5e 	bl	80018ac <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fe fc82 	bl	80028fe <_ZN13STM32Hardware4timeEv>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004006:	f107 0308 	add.w	r3, r7, #8
 800400a:	6839      	ldr	r1, [r7, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f7fd fcbd 	bl	800198c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	4916      	ldr	r1, [pc, #88]	; (8004070 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8004018:	fba1 1303 	umull	r1, r3, r1, r3
 800401c:	099b      	lsrs	r3, r3, #6
 800401e:	4413      	add	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004022:	6939      	ldr	r1, [r7, #16]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4b12      	ldr	r3, [pc, #72]	; (8004070 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8004028:	fba3 0302 	umull	r0, r3, r3, r2
 800402c:	099b      	lsrs	r3, r3, #6
 800402e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004032:	fb00 f303 	mul.w	r3, r0, r3
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	4a0e      	ldr	r2, [pc, #56]	; (8004074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 800403a:	fb02 f303 	mul.w	r3, r2, r3
 800403e:	440b      	add	r3, r1
 8004040:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004042:	f107 0308 	add.w	r3, r7, #8
 8004046:	3304      	adds	r3, #4
 8004048:	4619      	mov	r1, r3
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f8aa 	bl	80041a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3304      	adds	r3, #4
 8004054:	4618      	mov	r0, r3
 8004056:	f7fe fc52 	bl	80028fe <_ZN13STM32Hardware4timeEv>
 800405a:	4602      	mov	r2, r0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004062:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
 8004066:	bf00      	nop
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	10624dd3 	.word	0x10624dd3
 8004074:	000f4240 	.word	0x000f4240

08004078 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg)
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b63      	cmp	r3, #99	; 0x63
 8004088:	dd0b      	ble.n	80040a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004090:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8004094:	f083 0301 	eor.w	r3, r3, #1
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 800409e:	2300      	movs	r3, #0
 80040a0:	e079      	b.n	8004196 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
    int l = msg->serialize(message_out + 7);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	f602 4228 	addw	r2, r2, #3112	; 0xc28
 80040ae:	3207      	adds	r2, #7
 80040b0:	4611      	mov	r1, r2
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	4798      	blx	r3
 80040b6:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	22ff      	movs	r2, #255	; 0xff
 80040bc:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[1] = PROTOCOL_VER;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	22fe      	movs	r2, #254	; 0xfe
 80040c4:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	0a1b      	lsrs	r3, r3, #8
 80040d8:	b29b      	uxth	r3, r3
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f883 2c2b 	strb.w	r2, [r3, #3115]	; 0xc2b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 2c2a 	ldrb.w	r2, [r3, #3114]	; 0xc2a
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 3c2b 	ldrb.w	r3, [r3, #3115]	; 0xc2b
 80040ee:	4413      	add	r3, r2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f883 2c2c 	strb.w	r2, [r3, #3116]	; 0xc2c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f883 2c2d 	strb.w	r2, [r3, #3117]	; 0xc2d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	b21b      	sxth	r3, r3
 800410a:	121b      	asrs	r3, r3, #8
 800410c:	b21b      	sxth	r3, r3
 800410e:	b2da      	uxtb	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f883 2c2e 	strb.w	r2, [r3, #3118]	; 0xc2e
    int chk = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800411a:	2305      	movs	r3, #5
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	3306      	adds	r3, #6
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	429a      	cmp	r2, r3
 8004126:	dc0d      	bgt.n	8004144 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	4413      	add	r3, r2
 800412e:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	4413      	add	r3, r2
 800413a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	3301      	adds	r3, #1
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	e7ec      	b.n	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	3307      	adds	r3, #7
 8004148:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	425a      	negs	r2, r3
 800414e:	b2db      	uxtb	r3, r3
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	bf58      	it	pl
 8004154:	4253      	negpl	r3, r2
 8004156:	b2da      	uxtb	r2, r3
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	1c59      	adds	r1, r3, #1
 800415c:	6179      	str	r1, [r7, #20]
 800415e:	43d2      	mvns	r2, r2
 8004160:	b2d1      	uxtb	r1, r2
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4413      	add	r3, r2
 8004166:	460a      	mov	r2, r1
 8004168:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    if (l <= OUTPUT_SIZE)
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004172:	dc0a      	bgt.n	800418a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x112>
      hardware_.write(message_out, l);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	1d18      	adds	r0, r3, #4
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4619      	mov	r1, r3
 8004182:	f7fe fb75 	bl	8002870 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	e005      	b.n	8004196 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
      logerror("Message from device dropped: message larger than buffer.");
 800418a:	4905      	ldr	r1, [pc, #20]	; (80041a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x128>)
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f849 	bl	8004224 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8004192:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8004196:	4618      	mov	r0, r3
 8004198:	3720      	adds	r7, #32
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	0800f6f4 	.word	0x0800f6f4

080041a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3304      	adds	r3, #4
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe fba3 	bl	80028fe <_ZN13STM32Hardware4timeEv>
 80041b8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4915      	ldr	r1, [pc, #84]	; (8004218 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 80041c2:	fba1 1303 	umull	r1, r3, r1, r3
 80041c6:	099b      	lsrs	r3, r3, #6
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	1e5a      	subs	r2, r3, #1
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	6859      	ldr	r1, [r3, #4]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 80041da:	fba3 0302 	umull	r0, r3, r3, r2
 80041de:	099b      	lsrs	r3, r3, #6
 80041e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041e4:	fb00 f303 	mul.w	r3, r0, r3
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	4a0c      	ldr	r2, [pc, #48]	; (800421c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	1aca      	subs	r2, r1, r3
 80041f2:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 80041f4:	4413      	add	r3, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	f8c2 3820 	str.w	r3, [r2, #2080]	; 0x820
    normalizeSecNSec(sec_offset, nsec_offset);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f603 021c 	addw	r2, r3, #2076	; 0x81c
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f7fc fa0a 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004210:	bf00      	nop
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	10624dd3 	.word	0x10624dd3
 800421c:	000f4240 	.word	0x000f4240
 8004220:	3b9aca00 	.word	0x3b9aca00

08004224 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  void logerror(const char*msg)
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
    log(rosserial_msgs::Log::ERROR, msg);
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	2103      	movs	r1, #3
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f804 	bl	8004240 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8004238:	bf00      	nop
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	460b      	mov	r3, r1
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800424e:	f107 0314 	add.w	r3, r7, #20
 8004252:	4618      	mov	r0, r3
 8004254:	f7fd fdde 	bl	8001e14 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004258:	7afb      	ldrb	r3, [r7, #11]
 800425a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f107 0214 	add.w	r2, r7, #20
 800426a:	2107      	movs	r1, #7
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	4798      	blx	r3
  }
 8004270:	bf00      	nop
 8004272:	3720      	adds	r7, #32
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <_Z41__static_initialization_and_destruction_0ii>:
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d116      	bne.n	80042b6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800428e:	4293      	cmp	r3, r2
 8004290:	d111      	bne.n	80042b6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8004292:	480b      	ldr	r0, [pc, #44]	; (80042c0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004294:	f7ff f9c8 	bl	8003628 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
geometry_msgs::Twist real_speed;
 8004298:	480a      	ldr	r0, [pc, #40]	; (80042c4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800429a:	f7ff f851 	bl	8003340 <_ZN13geometry_msgs5TwistC1Ev>
ros::Subscriber<geometry_msgs::Twist> vel_sub("/cmd_vel", vel_callback);
 800429e:	2301      	movs	r3, #1
 80042a0:	4a09      	ldr	r2, [pc, #36]	; (80042c8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80042a2:	490a      	ldr	r1, [pc, #40]	; (80042cc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80042a4:	480a      	ldr	r0, [pc, #40]	; (80042d0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80042a6:	f7ff fa65 	bl	8003774 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher odom_pub("Toposition", &real_speed);
 80042aa:	2300      	movs	r3, #0
 80042ac:	4a05      	ldr	r2, [pc, #20]	; (80042c4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80042ae:	4909      	ldr	r1, [pc, #36]	; (80042d4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80042b0:	4809      	ldr	r0, [pc, #36]	; (80042d8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80042b2:	f7fe f921 	bl	80024f8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80042b6:	bf00      	nop
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	2400053c 	.word	0x2400053c
 80042c4:	24001680 	.word	0x24001680
 80042c8:	08003449 	.word	0x08003449
 80042cc:	0800f730 	.word	0x0800f730
 80042d0:	240016c8 	.word	0x240016c8
 80042d4:	0800f73c 	.word	0x0800f73c
 80042d8:	24001728 	.word	0x24001728

080042dc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3310      	adds	r3, #16
 80042ea:	6839      	ldr	r1, [r7, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff f869 	bl	80033c4 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	3210      	adds	r2, #16
 80042fa:	4610      	mov	r0, r2
 80042fc:	4798      	blx	r3
  }
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8004312:	4618      	mov	r0, r3
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3310      	adds	r3, #16
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff f870 	bl	8003410 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004330:	4603      	mov	r3, r0
  }
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3310      	adds	r3, #16
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff f870 	bl	800342c <_ZN13geometry_msgs5Twist6getMD5Ev>
 800434c:	4603      	mov	r3, r0
  }
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
    return configured_;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004364:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
  };
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <_GLOBAL__sub_I__Z12vel_callbackRKN13geometry_msgs5TwistE>:
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
 8004378:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800437c:	2001      	movs	r0, #1
 800437e:	f7ff ff7b 	bl	8004278 <_Z41__static_initialization_and_destruction_0ii>
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <HAL_MspInit+0x30>)
 800438c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004390:	4a08      	ldr	r2, [pc, #32]	; (80043b4 <HAL_MspInit+0x30>)
 8004392:	f043 0302 	orr.w	r3, r3, #2
 8004396:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800439a:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <HAL_MspInit+0x30>)
 800439c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	607b      	str	r3, [r7, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	58024400 	.word	0x58024400

080043b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043bc:	e7fe      	b.n	80043bc <NMI_Handler+0x4>

080043be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043be:	b480      	push	{r7}
 80043c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043c2:	e7fe      	b.n	80043c2 <HardFault_Handler+0x4>

080043c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043c8:	e7fe      	b.n	80043c8 <MemManage_Handler+0x4>

080043ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043ca:	b480      	push	{r7}
 80043cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043ce:	e7fe      	b.n	80043ce <BusFault_Handler+0x4>

080043d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043d4:	e7fe      	b.n	80043d4 <UsageFault_Handler+0x4>

080043d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043d6:	b480      	push	{r7}
 80043d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043da:	bf00      	nop
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043e8:	bf00      	nop
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043f2:	b480      	push	{r7}
 80043f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043f6:	bf00      	nop
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004404:	f000 ffa0 	bl	8005348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004408:	bf00      	nop
 800440a:	bd80      	pop	{r7, pc}

0800440c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004410:	4802      	ldr	r0, [pc, #8]	; (800441c <DMA1_Stream0_IRQHandler+0x10>)
 8004412:	f002 fdd9 	bl	8006fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004416:	bf00      	nop
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	24001a04 	.word	0x24001a04

08004420 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004424:	4802      	ldr	r0, [pc, #8]	; (8004430 <DMA1_Stream1_IRQHandler+0x10>)
 8004426:	f002 fdcf 	bl	8006fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800442a:	bf00      	nop
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	24001a7c 	.word	0x24001a7c

08004434 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004438:	4802      	ldr	r0, [pc, #8]	; (8004444 <TIM2_IRQHandler+0x10>)
 800443a:	f007 fc83 	bl	800bd44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800443e:	bf00      	nop
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	2400175c 	.word	0x2400175c

08004448 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800444c:	4802      	ldr	r0, [pc, #8]	; (8004458 <TIM3_IRQHandler+0x10>)
 800444e:	f007 fc79 	bl	800bd44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004452:	bf00      	nop
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	240017a8 	.word	0x240017a8

0800445c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004460:	4802      	ldr	r0, [pc, #8]	; (800446c <TIM4_IRQHandler+0x10>)
 8004462:	f007 fc6f 	bl	800bd44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004466:	bf00      	nop
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	240017f4 	.word	0x240017f4

08004470 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004474:	4802      	ldr	r0, [pc, #8]	; (8004480 <USART1_IRQHandler+0x10>)
 8004476:	f008 feaf 	bl	800d1d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800447a:	bf00      	nop
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	24001970 	.word	0x24001970

08004484 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004488:	4802      	ldr	r0, [pc, #8]	; (8004494 <TIM5_IRQHandler+0x10>)
 800448a:	f007 fc5b 	bl	800bd44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800448e:	bf00      	nop
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	24001840 	.word	0x24001840

08004498 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 800449c:	4802      	ldr	r0, [pc, #8]	; (80044a8 <TIM23_IRQHandler+0x10>)
 800449e:	f007 fc51 	bl	800bd44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 80044a2:	bf00      	nop
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	24001924 	.word	0x24001924

080044ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  return 1;
 80044b0:	2301      	movs	r3, #1
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <_kill>:

int _kill(int pid, int sig)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80044c6:	f00a fea3 	bl	800f210 <__errno>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2216      	movs	r2, #22
 80044ce:	601a      	str	r2, [r3, #0]
  return -1;
 80044d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <_exit>:

void _exit (int status)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80044e4:	f04f 31ff 	mov.w	r1, #4294967295
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff ffe7 	bl	80044bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80044ee:	e7fe      	b.n	80044ee <_exit+0x12>

080044f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044f8:	4a14      	ldr	r2, [pc, #80]	; (800454c <_sbrk+0x5c>)
 80044fa:	4b15      	ldr	r3, [pc, #84]	; (8004550 <_sbrk+0x60>)
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004504:	4b13      	ldr	r3, [pc, #76]	; (8004554 <_sbrk+0x64>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d102      	bne.n	8004512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800450c:	4b11      	ldr	r3, [pc, #68]	; (8004554 <_sbrk+0x64>)
 800450e:	4a12      	ldr	r2, [pc, #72]	; (8004558 <_sbrk+0x68>)
 8004510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004512:	4b10      	ldr	r3, [pc, #64]	; (8004554 <_sbrk+0x64>)
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4413      	add	r3, r2
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	429a      	cmp	r2, r3
 800451e:	d207      	bcs.n	8004530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004520:	f00a fe76 	bl	800f210 <__errno>
 8004524:	4603      	mov	r3, r0
 8004526:	220c      	movs	r2, #12
 8004528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800452a:	f04f 33ff 	mov.w	r3, #4294967295
 800452e:	e009      	b.n	8004544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004530:	4b08      	ldr	r3, [pc, #32]	; (8004554 <_sbrk+0x64>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004536:	4b07      	ldr	r3, [pc, #28]	; (8004554 <_sbrk+0x64>)
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4413      	add	r3, r2
 800453e:	4a05      	ldr	r2, [pc, #20]	; (8004554 <_sbrk+0x64>)
 8004540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004542:	68fb      	ldr	r3, [r7, #12]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	24050000 	.word	0x24050000
 8004550:	00000400 	.word	0x00000400
 8004554:	24001758 	.word	0x24001758
 8004558:	24001b08 	.word	0x24001b08

0800455c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004560:	4b32      	ldr	r3, [pc, #200]	; (800462c <SystemInit+0xd0>)
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004566:	4a31      	ldr	r2, [pc, #196]	; (800462c <SystemInit+0xd0>)
 8004568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800456c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004570:	4b2f      	ldr	r3, [pc, #188]	; (8004630 <SystemInit+0xd4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	2b06      	cmp	r3, #6
 800457a:	d807      	bhi.n	800458c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800457c:	4b2c      	ldr	r3, [pc, #176]	; (8004630 <SystemInit+0xd4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f023 030f 	bic.w	r3, r3, #15
 8004584:	4a2a      	ldr	r2, [pc, #168]	; (8004630 <SystemInit+0xd4>)
 8004586:	f043 0307 	orr.w	r3, r3, #7
 800458a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800458c:	4b29      	ldr	r3, [pc, #164]	; (8004634 <SystemInit+0xd8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a28      	ldr	r2, [pc, #160]	; (8004634 <SystemInit+0xd8>)
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004598:	4b26      	ldr	r3, [pc, #152]	; (8004634 <SystemInit+0xd8>)
 800459a:	2200      	movs	r2, #0
 800459c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800459e:	4b25      	ldr	r3, [pc, #148]	; (8004634 <SystemInit+0xd8>)
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4924      	ldr	r1, [pc, #144]	; (8004634 <SystemInit+0xd8>)
 80045a4:	4b24      	ldr	r3, [pc, #144]	; (8004638 <SystemInit+0xdc>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80045aa:	4b21      	ldr	r3, [pc, #132]	; (8004630 <SystemInit+0xd4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d007      	beq.n	80045c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80045b6:	4b1e      	ldr	r3, [pc, #120]	; (8004630 <SystemInit+0xd4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 030f 	bic.w	r3, r3, #15
 80045be:	4a1c      	ldr	r2, [pc, #112]	; (8004630 <SystemInit+0xd4>)
 80045c0:	f043 0307 	orr.w	r3, r3, #7
 80045c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80045c6:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <SystemInit+0xd8>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80045cc:	4b19      	ldr	r3, [pc, #100]	; (8004634 <SystemInit+0xd8>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80045d2:	4b18      	ldr	r3, [pc, #96]	; (8004634 <SystemInit+0xd8>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80045d8:	4b16      	ldr	r3, [pc, #88]	; (8004634 <SystemInit+0xd8>)
 80045da:	4a18      	ldr	r2, [pc, #96]	; (800463c <SystemInit+0xe0>)
 80045dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80045de:	4b15      	ldr	r3, [pc, #84]	; (8004634 <SystemInit+0xd8>)
 80045e0:	4a17      	ldr	r2, [pc, #92]	; (8004640 <SystemInit+0xe4>)
 80045e2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80045e4:	4b13      	ldr	r3, [pc, #76]	; (8004634 <SystemInit+0xd8>)
 80045e6:	4a17      	ldr	r2, [pc, #92]	; (8004644 <SystemInit+0xe8>)
 80045e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80045ea:	4b12      	ldr	r3, [pc, #72]	; (8004634 <SystemInit+0xd8>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80045f0:	4b10      	ldr	r3, [pc, #64]	; (8004634 <SystemInit+0xd8>)
 80045f2:	4a14      	ldr	r2, [pc, #80]	; (8004644 <SystemInit+0xe8>)
 80045f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80045f6:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <SystemInit+0xd8>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80045fc:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <SystemInit+0xd8>)
 80045fe:	4a11      	ldr	r2, [pc, #68]	; (8004644 <SystemInit+0xe8>)
 8004600:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004602:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <SystemInit+0xd8>)
 8004604:	2200      	movs	r2, #0
 8004606:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004608:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <SystemInit+0xd8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a09      	ldr	r2, [pc, #36]	; (8004634 <SystemInit+0xd8>)
 800460e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004612:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004614:	4b07      	ldr	r3, [pc, #28]	; (8004634 <SystemInit+0xd8>)
 8004616:	2200      	movs	r2, #0
 8004618:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800461a:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <SystemInit+0xec>)
 800461c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004620:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004622:	bf00      	nop
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	e000ed00 	.word	0xe000ed00
 8004630:	52002000 	.word	0x52002000
 8004634:	58024400 	.word	0x58024400
 8004638:	eaf6ed7f 	.word	0xeaf6ed7f
 800463c:	02020200 	.word	0x02020200
 8004640:	01ff0000 	.word	0x01ff0000
 8004644:	01010280 	.word	0x01010280
 8004648:	52004000 	.word	0x52004000

0800464c <MX_TIM2_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim23;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08c      	sub	sp, #48	; 0x30
 8004650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004652:	f107 030c 	add.w	r3, r7, #12
 8004656:	2224      	movs	r2, #36	; 0x24
 8004658:	2100      	movs	r1, #0
 800465a:	4618      	mov	r0, r3
 800465c:	f00a fe10 	bl	800f280 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004660:	463b      	mov	r3, r7
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	605a      	str	r2, [r3, #4]
 8004668:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800466a:	4b21      	ldr	r3, [pc, #132]	; (80046f0 <MX_TIM2_Init+0xa4>)
 800466c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004670:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004672:	4b1f      	ldr	r3, [pc, #124]	; (80046f0 <MX_TIM2_Init+0xa4>)
 8004674:	2200      	movs	r2, #0
 8004676:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004678:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <MX_TIM2_Init+0xa4>)
 800467a:	2200      	movs	r2, #0
 800467c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800467e:	4b1c      	ldr	r3, [pc, #112]	; (80046f0 <MX_TIM2_Init+0xa4>)
 8004680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004684:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004686:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <MX_TIM2_Init+0xa4>)
 8004688:	2200      	movs	r2, #0
 800468a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800468c:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <MX_TIM2_Init+0xa4>)
 800468e:	2200      	movs	r2, #0
 8004690:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004692:	2303      	movs	r3, #3
 8004694:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004696:	2300      	movs	r3, #0
 8004698:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800469a:	2301      	movs	r3, #1
 800469c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800469e:	2300      	movs	r3, #0
 80046a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80046a6:	2300      	movs	r3, #0
 80046a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80046aa:	2301      	movs	r3, #1
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80046ae:	2300      	movs	r3, #0
 80046b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80046b6:	f107 030c 	add.w	r3, r7, #12
 80046ba:	4619      	mov	r1, r3
 80046bc:	480c      	ldr	r0, [pc, #48]	; (80046f0 <MX_TIM2_Init+0xa4>)
 80046be:	f007 fa0d 	bl	800badc <HAL_TIM_Encoder_Init>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80046c8:	f7fd f8ca 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046cc:	2300      	movs	r3, #0
 80046ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80046d4:	463b      	mov	r3, r7
 80046d6:	4619      	mov	r1, r3
 80046d8:	4805      	ldr	r0, [pc, #20]	; (80046f0 <MX_TIM2_Init+0xa4>)
 80046da:	f008 fac7 	bl	800cc6c <HAL_TIMEx_MasterConfigSynchronization>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80046e4:	f7fd f8bc 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80046e8:	bf00      	nop
 80046ea:	3730      	adds	r7, #48	; 0x30
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	2400175c 	.word	0x2400175c

080046f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08c      	sub	sp, #48	; 0x30
 80046f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80046fa:	f107 030c 	add.w	r3, r7, #12
 80046fe:	2224      	movs	r2, #36	; 0x24
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f00a fdbc 	bl	800f280 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004708:	463b      	mov	r3, r7
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	605a      	str	r2, [r3, #4]
 8004710:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004712:	4b21      	ldr	r3, [pc, #132]	; (8004798 <MX_TIM3_Init+0xa4>)
 8004714:	4a21      	ldr	r2, [pc, #132]	; (800479c <MX_TIM3_Init+0xa8>)
 8004716:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004718:	4b1f      	ldr	r3, [pc, #124]	; (8004798 <MX_TIM3_Init+0xa4>)
 800471a:	2200      	movs	r2, #0
 800471c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800471e:	4b1e      	ldr	r3, [pc, #120]	; (8004798 <MX_TIM3_Init+0xa4>)
 8004720:	2200      	movs	r2, #0
 8004722:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004724:	4b1c      	ldr	r3, [pc, #112]	; (8004798 <MX_TIM3_Init+0xa4>)
 8004726:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800472a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800472c:	4b1a      	ldr	r3, [pc, #104]	; (8004798 <MX_TIM3_Init+0xa4>)
 800472e:	2200      	movs	r2, #0
 8004730:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004732:	4b19      	ldr	r3, [pc, #100]	; (8004798 <MX_TIM3_Init+0xa4>)
 8004734:	2200      	movs	r2, #0
 8004736:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004738:	2303      	movs	r3, #3
 800473a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004740:	2301      	movs	r3, #1
 8004742:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004744:	2300      	movs	r3, #0
 8004746:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800474c:	2300      	movs	r3, #0
 800474e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004750:	2301      	movs	r3, #1
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004754:	2300      	movs	r3, #0
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800475c:	f107 030c 	add.w	r3, r7, #12
 8004760:	4619      	mov	r1, r3
 8004762:	480d      	ldr	r0, [pc, #52]	; (8004798 <MX_TIM3_Init+0xa4>)
 8004764:	f007 f9ba 	bl	800badc <HAL_TIM_Encoder_Init>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800476e:	f7fd f877 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004772:	2300      	movs	r3, #0
 8004774:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004776:	2300      	movs	r3, #0
 8004778:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800477a:	463b      	mov	r3, r7
 800477c:	4619      	mov	r1, r3
 800477e:	4806      	ldr	r0, [pc, #24]	; (8004798 <MX_TIM3_Init+0xa4>)
 8004780:	f008 fa74 	bl	800cc6c <HAL_TIMEx_MasterConfigSynchronization>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800478a:	f7fd f869 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800478e:	bf00      	nop
 8004790:	3730      	adds	r7, #48	; 0x30
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	240017a8 	.word	0x240017a8
 800479c:	40000400 	.word	0x40000400

080047a0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08c      	sub	sp, #48	; 0x30
 80047a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80047a6:	f107 030c 	add.w	r3, r7, #12
 80047aa:	2224      	movs	r2, #36	; 0x24
 80047ac:	2100      	movs	r1, #0
 80047ae:	4618      	mov	r0, r3
 80047b0:	f00a fd66 	bl	800f280 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047b4:	463b      	mov	r3, r7
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	605a      	str	r2, [r3, #4]
 80047bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80047be:	4b21      	ldr	r3, [pc, #132]	; (8004844 <MX_TIM4_Init+0xa4>)
 80047c0:	4a21      	ldr	r2, [pc, #132]	; (8004848 <MX_TIM4_Init+0xa8>)
 80047c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80047c4:	4b1f      	ldr	r3, [pc, #124]	; (8004844 <MX_TIM4_Init+0xa4>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047ca:	4b1e      	ldr	r3, [pc, #120]	; (8004844 <MX_TIM4_Init+0xa4>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80047d0:	4b1c      	ldr	r3, [pc, #112]	; (8004844 <MX_TIM4_Init+0xa4>)
 80047d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047d8:	4b1a      	ldr	r3, [pc, #104]	; (8004844 <MX_TIM4_Init+0xa4>)
 80047da:	2200      	movs	r2, #0
 80047dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047de:	4b19      	ldr	r3, [pc, #100]	; (8004844 <MX_TIM4_Init+0xa4>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80047e4:	2303      	movs	r3, #3
 80047e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80047e8:	2300      	movs	r3, #0
 80047ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80047ec:	2301      	movs	r3, #1
 80047ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80047f0:	2300      	movs	r3, #0
 80047f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80047f8:	2300      	movs	r3, #0
 80047fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80047fc:	2301      	movs	r3, #1
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004800:	2300      	movs	r3, #0
 8004802:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004808:	f107 030c 	add.w	r3, r7, #12
 800480c:	4619      	mov	r1, r3
 800480e:	480d      	ldr	r0, [pc, #52]	; (8004844 <MX_TIM4_Init+0xa4>)
 8004810:	f007 f964 	bl	800badc <HAL_TIM_Encoder_Init>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800481a:	f7fd f821 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800481e:	2300      	movs	r3, #0
 8004820:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004822:	2300      	movs	r3, #0
 8004824:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004826:	463b      	mov	r3, r7
 8004828:	4619      	mov	r1, r3
 800482a:	4806      	ldr	r0, [pc, #24]	; (8004844 <MX_TIM4_Init+0xa4>)
 800482c:	f008 fa1e 	bl	800cc6c <HAL_TIMEx_MasterConfigSynchronization>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8004836:	f7fd f813 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800483a:	bf00      	nop
 800483c:	3730      	adds	r7, #48	; 0x30
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	240017f4 	.word	0x240017f4
 8004848:	40000800 	.word	0x40000800

0800484c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08c      	sub	sp, #48	; 0x30
 8004850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004852:	f107 030c 	add.w	r3, r7, #12
 8004856:	2224      	movs	r2, #36	; 0x24
 8004858:	2100      	movs	r1, #0
 800485a:	4618      	mov	r0, r3
 800485c:	f00a fd10 	bl	800f280 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004860:	463b      	mov	r3, r7
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	605a      	str	r2, [r3, #4]
 8004868:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800486a:	4b21      	ldr	r3, [pc, #132]	; (80048f0 <MX_TIM5_Init+0xa4>)
 800486c:	4a21      	ldr	r2, [pc, #132]	; (80048f4 <MX_TIM5_Init+0xa8>)
 800486e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004870:	4b1f      	ldr	r3, [pc, #124]	; (80048f0 <MX_TIM5_Init+0xa4>)
 8004872:	2200      	movs	r2, #0
 8004874:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004876:	4b1e      	ldr	r3, [pc, #120]	; (80048f0 <MX_TIM5_Init+0xa4>)
 8004878:	2200      	movs	r2, #0
 800487a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800487c:	4b1c      	ldr	r3, [pc, #112]	; (80048f0 <MX_TIM5_Init+0xa4>)
 800487e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004882:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004884:	4b1a      	ldr	r3, [pc, #104]	; (80048f0 <MX_TIM5_Init+0xa4>)
 8004886:	2200      	movs	r2, #0
 8004888:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800488a:	4b19      	ldr	r3, [pc, #100]	; (80048f0 <MX_TIM5_Init+0xa4>)
 800488c:	2200      	movs	r2, #0
 800488e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004890:	2303      	movs	r3, #3
 8004892:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004894:	2300      	movs	r3, #0
 8004896:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004898:	2301      	movs	r3, #1
 800489a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800489c:	2300      	movs	r3, #0
 800489e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80048a4:	2300      	movs	r3, #0
 80048a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80048a8:	2301      	movs	r3, #1
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80048ac:	2300      	movs	r3, #0
 80048ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80048b4:	f107 030c 	add.w	r3, r7, #12
 80048b8:	4619      	mov	r1, r3
 80048ba:	480d      	ldr	r0, [pc, #52]	; (80048f0 <MX_TIM5_Init+0xa4>)
 80048bc:	f007 f90e 	bl	800badc <HAL_TIM_Encoder_Init>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80048c6:	f7fc ffcb 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048ca:	2300      	movs	r3, #0
 80048cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80048d2:	463b      	mov	r3, r7
 80048d4:	4619      	mov	r1, r3
 80048d6:	4806      	ldr	r0, [pc, #24]	; (80048f0 <MX_TIM5_Init+0xa4>)
 80048d8:	f008 f9c8 	bl	800cc6c <HAL_TIMEx_MasterConfigSynchronization>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80048e2:	f7fc ffbd 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80048e6:	bf00      	nop
 80048e8:	3730      	adds	r7, #48	; 0x30
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	24001840 	.word	0x24001840
 80048f4:	40000c00 	.word	0x40000c00

080048f8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08a      	sub	sp, #40	; 0x28
 80048fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048fe:	f107 031c 	add.w	r3, r7, #28
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	605a      	str	r2, [r3, #4]
 8004908:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800490a:	463b      	mov	r3, r7
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	605a      	str	r2, [r3, #4]
 8004912:	609a      	str	r2, [r3, #8]
 8004914:	60da      	str	r2, [r3, #12]
 8004916:	611a      	str	r2, [r3, #16]
 8004918:	615a      	str	r2, [r3, #20]
 800491a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800491c:	4b27      	ldr	r3, [pc, #156]	; (80049bc <MX_TIM12_Init+0xc4>)
 800491e:	4a28      	ldr	r2, [pc, #160]	; (80049c0 <MX_TIM12_Init+0xc8>)
 8004920:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8004922:	4b26      	ldr	r3, [pc, #152]	; (80049bc <MX_TIM12_Init+0xc4>)
 8004924:	2200      	movs	r2, #0
 8004926:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004928:	4b24      	ldr	r3, [pc, #144]	; (80049bc <MX_TIM12_Init+0xc4>)
 800492a:	2200      	movs	r2, #0
 800492c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 3000;
 800492e:	4b23      	ldr	r3, [pc, #140]	; (80049bc <MX_TIM12_Init+0xc4>)
 8004930:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004934:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004936:	4b21      	ldr	r3, [pc, #132]	; (80049bc <MX_TIM12_Init+0xc4>)
 8004938:	2200      	movs	r2, #0
 800493a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800493c:	4b1f      	ldr	r3, [pc, #124]	; (80049bc <MX_TIM12_Init+0xc4>)
 800493e:	2200      	movs	r2, #0
 8004940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004942:	481e      	ldr	r0, [pc, #120]	; (80049bc <MX_TIM12_Init+0xc4>)
 8004944:	f006 ff56 	bl	800b7f4 <HAL_TIM_PWM_Init>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 800494e:	f7fc ff87 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004952:	2300      	movs	r3, #0
 8004954:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004956:	2300      	movs	r3, #0
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 800495a:	f107 031c 	add.w	r3, r7, #28
 800495e:	4619      	mov	r1, r3
 8004960:	4816      	ldr	r0, [pc, #88]	; (80049bc <MX_TIM12_Init+0xc4>)
 8004962:	f008 f983 	bl	800cc6c <HAL_TIMEx_MasterConfigSynchronization>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800496c:	f7fc ff78 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004970:	2360      	movs	r3, #96	; 0x60
 8004972:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004978:	2300      	movs	r3, #0
 800497a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800497c:	2300      	movs	r3, #0
 800497e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004980:	463b      	mov	r3, r7
 8004982:	2200      	movs	r2, #0
 8004984:	4619      	mov	r1, r3
 8004986:	480d      	ldr	r0, [pc, #52]	; (80049bc <MX_TIM12_Init+0xc4>)
 8004988:	f007 fafc 	bl	800bf84 <HAL_TIM_PWM_ConfigChannel>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 8004992:	f7fc ff65 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004996:	463b      	mov	r3, r7
 8004998:	2204      	movs	r2, #4
 800499a:	4619      	mov	r1, r3
 800499c:	4807      	ldr	r0, [pc, #28]	; (80049bc <MX_TIM12_Init+0xc4>)
 800499e:	f007 faf1 	bl	800bf84 <HAL_TIM_PWM_ConfigChannel>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <MX_TIM12_Init+0xb4>
  {
    Error_Handler();
 80049a8:	f7fc ff5a 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80049ac:	4803      	ldr	r0, [pc, #12]	; (80049bc <MX_TIM12_Init+0xc4>)
 80049ae:	f000 fa79 	bl	8004ea4 <HAL_TIM_MspPostInit>

}
 80049b2:	bf00      	nop
 80049b4:	3728      	adds	r7, #40	; 0x28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	2400188c 	.word	0x2400188c
 80049c0:	40001800 	.word	0x40001800

080049c4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b098      	sub	sp, #96	; 0x60
 80049c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	605a      	str	r2, [r3, #4]
 80049d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	605a      	str	r2, [r3, #4]
 80049e0:	609a      	str	r2, [r3, #8]
 80049e2:	60da      	str	r2, [r3, #12]
 80049e4:	611a      	str	r2, [r3, #16]
 80049e6:	615a      	str	r2, [r3, #20]
 80049e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80049ea:	1d3b      	adds	r3, r7, #4
 80049ec:	2234      	movs	r2, #52	; 0x34
 80049ee:	2100      	movs	r1, #0
 80049f0:	4618      	mov	r0, r3
 80049f2:	f00a fc45 	bl	800f280 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80049f6:	4b3a      	ldr	r3, [pc, #232]	; (8004ae0 <MX_TIM15_Init+0x11c>)
 80049f8:	4a3a      	ldr	r2, [pc, #232]	; (8004ae4 <MX_TIM15_Init+0x120>)
 80049fa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80049fc:	4b38      	ldr	r3, [pc, #224]	; (8004ae0 <MX_TIM15_Init+0x11c>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a02:	4b37      	ldr	r3, [pc, #220]	; (8004ae0 <MX_TIM15_Init+0x11c>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3000;
 8004a08:	4b35      	ldr	r3, [pc, #212]	; (8004ae0 <MX_TIM15_Init+0x11c>)
 8004a0a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004a0e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a10:	4b33      	ldr	r3, [pc, #204]	; (8004ae0 <MX_TIM15_Init+0x11c>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004a16:	4b32      	ldr	r3, [pc, #200]	; (8004ae0 <MX_TIM15_Init+0x11c>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a1c:	4b30      	ldr	r3, [pc, #192]	; (8004ae0 <MX_TIM15_Init+0x11c>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004a22:	482f      	ldr	r0, [pc, #188]	; (8004ae0 <MX_TIM15_Init+0x11c>)
 8004a24:	f006 fee6 	bl	800b7f4 <HAL_TIM_PWM_Init>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8004a2e:	f7fc ff17 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a32:	2300      	movs	r3, #0
 8004a34:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004a3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4827      	ldr	r0, [pc, #156]	; (8004ae0 <MX_TIM15_Init+0x11c>)
 8004a42:	f008 f913 	bl	800cc6c <HAL_TIMEx_MasterConfigSynchronization>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8004a4c:	f7fc ff08 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a50:	2360      	movs	r3, #96	; 0x60
 8004a52:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a64:	2300      	movs	r3, #0
 8004a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a70:	2200      	movs	r2, #0
 8004a72:	4619      	mov	r1, r3
 8004a74:	481a      	ldr	r0, [pc, #104]	; (8004ae0 <MX_TIM15_Init+0x11c>)
 8004a76:	f007 fa85 	bl	800bf84 <HAL_TIM_PWM_ConfigChannel>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8004a80:	f7fc feee 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a88:	2204      	movs	r2, #4
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4814      	ldr	r0, [pc, #80]	; (8004ae0 <MX_TIM15_Init+0x11c>)
 8004a8e:	f007 fa79 	bl	800bf84 <HAL_TIM_PWM_ConfigChannel>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8004a98:	f7fc fee2 	bl	8001860 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ab4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004aba:	2300      	movs	r3, #0
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004abe:	1d3b      	adds	r3, r7, #4
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4807      	ldr	r0, [pc, #28]	; (8004ae0 <MX_TIM15_Init+0x11c>)
 8004ac4:	f008 f96e 	bl	800cda4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8004ace:	f7fc fec7 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8004ad2:	4803      	ldr	r0, [pc, #12]	; (8004ae0 <MX_TIM15_Init+0x11c>)
 8004ad4:	f000 f9e6 	bl	8004ea4 <HAL_TIM_MspPostInit>

}
 8004ad8:	bf00      	nop
 8004ada:	3760      	adds	r7, #96	; 0x60
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	240018d8 	.word	0x240018d8
 8004ae4:	40014000 	.word	0x40014000

08004ae8 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004aee:	f107 0310 	add.w	r3, r7, #16
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	605a      	str	r2, [r3, #4]
 8004af8:	609a      	str	r2, [r3, #8]
 8004afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004afc:	1d3b      	adds	r3, r7, #4
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	605a      	str	r2, [r3, #4]
 8004b04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8004b06:	4b1d      	ldr	r3, [pc, #116]	; (8004b7c <MX_TIM23_Init+0x94>)
 8004b08:	4a1d      	ldr	r2, [pc, #116]	; (8004b80 <MX_TIM23_Init+0x98>)
 8004b0a:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 13;
 8004b0c:	4b1b      	ldr	r3, [pc, #108]	; (8004b7c <MX_TIM23_Init+0x94>)
 8004b0e:	220d      	movs	r2, #13
 8004b10:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b12:	4b1a      	ldr	r3, [pc, #104]	; (8004b7c <MX_TIM23_Init+0x94>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 11999;
 8004b18:	4b18      	ldr	r3, [pc, #96]	; (8004b7c <MX_TIM23_Init+0x94>)
 8004b1a:	f642 62df 	movw	r2, #11999	; 0x2edf
 8004b1e:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b20:	4b16      	ldr	r3, [pc, #88]	; (8004b7c <MX_TIM23_Init+0x94>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b26:	4b15      	ldr	r3, [pc, #84]	; (8004b7c <MX_TIM23_Init+0x94>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8004b2c:	4813      	ldr	r0, [pc, #76]	; (8004b7c <MX_TIM23_Init+0x94>)
 8004b2e:	f006 fd83 	bl	800b638 <HAL_TIM_Base_Init>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <MX_TIM23_Init+0x54>
  {
    Error_Handler();
 8004b38:	f7fc fe92 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8004b42:	f107 0310 	add.w	r3, r7, #16
 8004b46:	4619      	mov	r1, r3
 8004b48:	480c      	ldr	r0, [pc, #48]	; (8004b7c <MX_TIM23_Init+0x94>)
 8004b4a:	f007 fb2f 	bl	800c1ac <HAL_TIM_ConfigClockSource>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <MX_TIM23_Init+0x70>
  {
    Error_Handler();
 8004b54:	f7fc fe84 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8004b60:	1d3b      	adds	r3, r7, #4
 8004b62:	4619      	mov	r1, r3
 8004b64:	4805      	ldr	r0, [pc, #20]	; (8004b7c <MX_TIM23_Init+0x94>)
 8004b66:	f008 f881 	bl	800cc6c <HAL_TIMEx_MasterConfigSynchronization>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <MX_TIM23_Init+0x8c>
  {
    Error_Handler();
 8004b70:	f7fc fe76 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8004b74:	bf00      	nop
 8004b76:	3720      	adds	r7, #32
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	24001924 	.word	0x24001924
 8004b80:	4000e000 	.word	0x4000e000

08004b84 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b090      	sub	sp, #64	; 0x40
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	605a      	str	r2, [r3, #4]
 8004b96:	609a      	str	r2, [r3, #8]
 8004b98:	60da      	str	r2, [r3, #12]
 8004b9a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba4:	d156      	bne.n	8004c54 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ba6:	4b87      	ldr	r3, [pc, #540]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004bac:	4a85      	ldr	r2, [pc, #532]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004bb6:	4b83      	ldr	r3, [pc, #524]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004bb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bc4:	4b7f      	ldr	r3, [pc, #508]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bca:	4a7e      	ldr	r2, [pc, #504]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bd4:	4b7b      	ldr	r3, [pc, #492]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004be2:	4b78      	ldr	r3, [pc, #480]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004be8:	4a76      	ldr	r2, [pc, #472]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004bea:	f043 0302 	orr.w	r3, r3, #2
 8004bee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bf2:	4b74      	ldr	r3, [pc, #464]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	623b      	str	r3, [r7, #32]
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004c00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c06:	2302      	movs	r3, #2
 8004c08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c12:	2301      	movs	r3, #1
 8004c14:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	486a      	ldr	r0, [pc, #424]	; (8004dc8 <HAL_TIM_Encoder_MspInit+0x244>)
 8004c1e:	f003 fce5 	bl	80085ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004c22:	2308      	movs	r3, #8
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c26:	2302      	movs	r3, #2
 8004c28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c32:	2301      	movs	r3, #1
 8004c34:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4863      	ldr	r0, [pc, #396]	; (8004dcc <HAL_TIM_Encoder_MspInit+0x248>)
 8004c3e:	f003 fcd5 	bl	80085ec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004c42:	2200      	movs	r2, #0
 8004c44:	2100      	movs	r1, #0
 8004c46:	201c      	movs	r0, #28
 8004c48:	f000 fc9d 	bl	8005586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004c4c:	201c      	movs	r0, #28
 8004c4e:	f000 fcb4 	bl	80055ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004c52:	e0b3      	b.n	8004dbc <HAL_TIM_Encoder_MspInit+0x238>
  else if(tim_encoderHandle->Instance==TIM3)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a5d      	ldr	r2, [pc, #372]	; (8004dd0 <HAL_TIM_Encoder_MspInit+0x24c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d136      	bne.n	8004ccc <HAL_TIM_Encoder_MspInit+0x148>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c5e:	4b59      	ldr	r3, [pc, #356]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c64:	4a57      	ldr	r2, [pc, #348]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c66:	f043 0302 	orr.w	r3, r3, #2
 8004c6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004c6e:	4b55      	ldr	r3, [pc, #340]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c7c:	4b51      	ldr	r3, [pc, #324]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c82:	4a50      	ldr	r2, [pc, #320]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c84:	f043 0302 	orr.w	r3, r3, #2
 8004c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c8c:	4b4d      	ldr	r3, [pc, #308]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	61bb      	str	r3, [r7, #24]
 8004c98:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004c9a:	2330      	movs	r3, #48	; 0x30
 8004c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004caa:	2302      	movs	r3, #2
 8004cac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4845      	ldr	r0, [pc, #276]	; (8004dcc <HAL_TIM_Encoder_MspInit+0x248>)
 8004cb6:	f003 fc99 	bl	80085ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	201d      	movs	r0, #29
 8004cc0:	f000 fc61 	bl	8005586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004cc4:	201d      	movs	r0, #29
 8004cc6:	f000 fc78 	bl	80055ba <HAL_NVIC_EnableIRQ>
}
 8004cca:	e077      	b.n	8004dbc <HAL_TIM_Encoder_MspInit+0x238>
  else if(tim_encoderHandle->Instance==TIM4)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a40      	ldr	r2, [pc, #256]	; (8004dd4 <HAL_TIM_Encoder_MspInit+0x250>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d137      	bne.n	8004d46 <HAL_TIM_Encoder_MspInit+0x1c2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004cd6:	4b3b      	ldr	r3, [pc, #236]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cdc:	4a39      	ldr	r2, [pc, #228]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004cde:	f043 0304 	orr.w	r3, r3, #4
 8004ce2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004ce6:	4b37      	ldr	r3, [pc, #220]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004ce8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cf4:	4b33      	ldr	r3, [pc, #204]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cfa:	4a32      	ldr	r2, [pc, #200]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004cfc:	f043 0308 	orr.w	r3, r3, #8
 8004d00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d04:	4b2f      	ldr	r3, [pc, #188]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	613b      	str	r3, [r7, #16]
 8004d10:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004d12:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d18:	2302      	movs	r3, #2
 8004d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d20:	2300      	movs	r3, #0
 8004d22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004d24:	2302      	movs	r3, #2
 8004d26:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	482a      	ldr	r0, [pc, #168]	; (8004dd8 <HAL_TIM_Encoder_MspInit+0x254>)
 8004d30:	f003 fc5c 	bl	80085ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004d34:	2200      	movs	r2, #0
 8004d36:	2100      	movs	r1, #0
 8004d38:	201e      	movs	r0, #30
 8004d3a:	f000 fc24 	bl	8005586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004d3e:	201e      	movs	r0, #30
 8004d40:	f000 fc3b 	bl	80055ba <HAL_NVIC_EnableIRQ>
}
 8004d44:	e03a      	b.n	8004dbc <HAL_TIM_Encoder_MspInit+0x238>
  else if(tim_encoderHandle->Instance==TIM5)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a24      	ldr	r2, [pc, #144]	; (8004ddc <HAL_TIM_Encoder_MspInit+0x258>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d135      	bne.n	8004dbc <HAL_TIM_Encoder_MspInit+0x238>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d50:	4b1c      	ldr	r3, [pc, #112]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004d52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d56:	4a1b      	ldr	r2, [pc, #108]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004d58:	f043 0308 	orr.w	r3, r3, #8
 8004d5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d60:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004d62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d6e:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d74:	4a13      	ldr	r2, [pc, #76]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004d76:	f043 0301 	orr.w	r3, r3, #1
 8004d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d7e:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <HAL_TIM_Encoder_MspInit+0x240>)
 8004d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	60bb      	str	r3, [r7, #8]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d90:	2302      	movs	r3, #2
 8004d92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d94:	2300      	movs	r3, #0
 8004d96:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004da4:	4619      	mov	r1, r3
 8004da6:	4808      	ldr	r0, [pc, #32]	; (8004dc8 <HAL_TIM_Encoder_MspInit+0x244>)
 8004da8:	f003 fc20 	bl	80085ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004dac:	2200      	movs	r2, #0
 8004dae:	2100      	movs	r1, #0
 8004db0:	2032      	movs	r0, #50	; 0x32
 8004db2:	f000 fbe8 	bl	8005586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004db6:	2032      	movs	r0, #50	; 0x32
 8004db8:	f000 fbff 	bl	80055ba <HAL_NVIC_EnableIRQ>
}
 8004dbc:	bf00      	nop
 8004dbe:	3740      	adds	r7, #64	; 0x40
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	58024400 	.word	0x58024400
 8004dc8:	58020000 	.word	0x58020000
 8004dcc:	58020400 	.word	0x58020400
 8004dd0:	40000400 	.word	0x40000400
 8004dd4:	40000800 	.word	0x40000800
 8004dd8:	58020c00 	.word	0x58020c00
 8004ddc:	40000c00 	.word	0x40000c00

08004de0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a16      	ldr	r2, [pc, #88]	; (8004e48 <HAL_TIM_PWM_MspInit+0x68>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d10f      	bne.n	8004e12 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004df2:	4b16      	ldr	r3, [pc, #88]	; (8004e4c <HAL_TIM_PWM_MspInit+0x6c>)
 8004df4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004df8:	4a14      	ldr	r2, [pc, #80]	; (8004e4c <HAL_TIM_PWM_MspInit+0x6c>)
 8004dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dfe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e02:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <HAL_TIM_PWM_MspInit+0x6c>)
 8004e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004e10:	e013      	b.n	8004e3a <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM15)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a0e      	ldr	r2, [pc, #56]	; (8004e50 <HAL_TIM_PWM_MspInit+0x70>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d10e      	bne.n	8004e3a <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004e1c:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <HAL_TIM_PWM_MspInit+0x6c>)
 8004e1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e22:	4a0a      	ldr	r2, [pc, #40]	; (8004e4c <HAL_TIM_PWM_MspInit+0x6c>)
 8004e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e28:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e2c:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <HAL_TIM_PWM_MspInit+0x6c>)
 8004e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e36:	60bb      	str	r3, [r7, #8]
 8004e38:	68bb      	ldr	r3, [r7, #8]
}
 8004e3a:	bf00      	nop
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40001800 	.word	0x40001800
 8004e4c:	58024400 	.word	0x58024400
 8004e50:	40014000 	.word	0x40014000

08004e54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM23)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a0e      	ldr	r2, [pc, #56]	; (8004e9c <HAL_TIM_Base_MspInit+0x48>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d116      	bne.n	8004e94 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* TIM23 clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 8004e66:	4b0e      	ldr	r3, [pc, #56]	; (8004ea0 <HAL_TIM_Base_MspInit+0x4c>)
 8004e68:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004e6c:	4a0c      	ldr	r2, [pc, #48]	; (8004ea0 <HAL_TIM_Base_MspInit+0x4c>)
 8004e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e72:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004e76:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <HAL_TIM_Base_MspInit+0x4c>)
 8004e78:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004e7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	68fb      	ldr	r3, [r7, #12]

    /* TIM23 interrupt Init */
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8004e84:	2200      	movs	r2, #0
 8004e86:	2100      	movs	r1, #0
 8004e88:	20a1      	movs	r0, #161	; 0xa1
 8004e8a:	f000 fb7c 	bl	8005586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8004e8e:	20a1      	movs	r0, #161	; 0xa1
 8004e90:	f000 fb93 	bl	80055ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }
}
 8004e94:	bf00      	nop
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	4000e000 	.word	0x4000e000
 8004ea0:	58024400 	.word	0x58024400

08004ea4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08a      	sub	sp, #40	; 0x28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eac:	f107 0314 	add.w	r3, r7, #20
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	605a      	str	r2, [r3, #4]
 8004eb6:	609a      	str	r2, [r3, #8]
 8004eb8:	60da      	str	r2, [r3, #12]
 8004eba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a25      	ldr	r2, [pc, #148]	; (8004f58 <HAL_TIM_MspPostInit+0xb4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d120      	bne.n	8004f08 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ec6:	4b25      	ldr	r3, [pc, #148]	; (8004f5c <HAL_TIM_MspPostInit+0xb8>)
 8004ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ecc:	4a23      	ldr	r2, [pc, #140]	; (8004f5c <HAL_TIM_MspPostInit+0xb8>)
 8004ece:	f043 0302 	orr.w	r3, r3, #2
 8004ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ed6:	4b21      	ldr	r3, [pc, #132]	; (8004f5c <HAL_TIM_MspPostInit+0xb8>)
 8004ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004ee4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eea:	2302      	movs	r3, #2
 8004eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004efa:	f107 0314 	add.w	r3, r7, #20
 8004efe:	4619      	mov	r1, r3
 8004f00:	4817      	ldr	r0, [pc, #92]	; (8004f60 <HAL_TIM_MspPostInit+0xbc>)
 8004f02:	f003 fb73 	bl	80085ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004f06:	e023      	b.n	8004f50 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM15)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a15      	ldr	r2, [pc, #84]	; (8004f64 <HAL_TIM_MspPostInit+0xc0>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d11e      	bne.n	8004f50 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f12:	4b12      	ldr	r3, [pc, #72]	; (8004f5c <HAL_TIM_MspPostInit+0xb8>)
 8004f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f18:	4a10      	ldr	r2, [pc, #64]	; (8004f5c <HAL_TIM_MspPostInit+0xb8>)
 8004f1a:	f043 0310 	orr.w	r3, r3, #16
 8004f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f22:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <HAL_TIM_MspPostInit+0xb8>)
 8004f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f28:	f003 0310 	and.w	r3, r3, #16
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004f30:	2360      	movs	r3, #96	; 0x60
 8004f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f34:	2302      	movs	r3, #2
 8004f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004f40:	2304      	movs	r3, #4
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f44:	f107 0314 	add.w	r3, r7, #20
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4807      	ldr	r0, [pc, #28]	; (8004f68 <HAL_TIM_MspPostInit+0xc4>)
 8004f4c:	f003 fb4e 	bl	80085ec <HAL_GPIO_Init>
}
 8004f50:	bf00      	nop
 8004f52:	3728      	adds	r7, #40	; 0x28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40001800 	.word	0x40001800
 8004f5c:	58024400 	.word	0x58024400
 8004f60:	58020400 	.word	0x58020400
 8004f64:	40014000 	.word	0x40014000
 8004f68:	58021000 	.word	0x58021000

08004f6c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004f70:	4b22      	ldr	r3, [pc, #136]	; (8004ffc <MX_USART1_UART_Init+0x90>)
 8004f72:	4a23      	ldr	r2, [pc, #140]	; (8005000 <MX_USART1_UART_Init+0x94>)
 8004f74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004f76:	4b21      	ldr	r3, [pc, #132]	; (8004ffc <MX_USART1_UART_Init+0x90>)
 8004f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f7e:	4b1f      	ldr	r3, [pc, #124]	; (8004ffc <MX_USART1_UART_Init+0x90>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f84:	4b1d      	ldr	r3, [pc, #116]	; (8004ffc <MX_USART1_UART_Init+0x90>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004f8a:	4b1c      	ldr	r3, [pc, #112]	; (8004ffc <MX_USART1_UART_Init+0x90>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f90:	4b1a      	ldr	r3, [pc, #104]	; (8004ffc <MX_USART1_UART_Init+0x90>)
 8004f92:	220c      	movs	r2, #12
 8004f94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f96:	4b19      	ldr	r3, [pc, #100]	; (8004ffc <MX_USART1_UART_Init+0x90>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f9c:	4b17      	ldr	r3, [pc, #92]	; (8004ffc <MX_USART1_UART_Init+0x90>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fa2:	4b16      	ldr	r3, [pc, #88]	; (8004ffc <MX_USART1_UART_Init+0x90>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004fa8:	4b14      	ldr	r3, [pc, #80]	; (8004ffc <MX_USART1_UART_Init+0x90>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fae:	4b13      	ldr	r3, [pc, #76]	; (8004ffc <MX_USART1_UART_Init+0x90>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004fb4:	4811      	ldr	r0, [pc, #68]	; (8004ffc <MX_USART1_UART_Init+0x90>)
 8004fb6:	f007 ffb3 	bl	800cf20 <HAL_UART_Init>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004fc0:	f7fc fc4e 	bl	8001860 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	480d      	ldr	r0, [pc, #52]	; (8004ffc <MX_USART1_UART_Init+0x90>)
 8004fc8:	f00a f83c 	bl	800f044 <HAL_UARTEx_SetTxFifoThreshold>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004fd2:	f7fc fc45 	bl	8001860 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	4808      	ldr	r0, [pc, #32]	; (8004ffc <MX_USART1_UART_Init+0x90>)
 8004fda:	f00a f871 	bl	800f0c0 <HAL_UARTEx_SetRxFifoThreshold>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004fe4:	f7fc fc3c 	bl	8001860 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004fe8:	4804      	ldr	r0, [pc, #16]	; (8004ffc <MX_USART1_UART_Init+0x90>)
 8004fea:	f009 fff2 	bl	800efd2 <HAL_UARTEx_DisableFifoMode>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004ff4:	f7fc fc34 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ff8:	bf00      	nop
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	24001970 	.word	0x24001970
 8005000:	40011000 	.word	0x40011000

08005004 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b0b8      	sub	sp, #224	; 0xe0
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800500c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	605a      	str	r2, [r3, #4]
 8005016:	609a      	str	r2, [r3, #8]
 8005018:	60da      	str	r2, [r3, #12]
 800501a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800501c:	f107 0310 	add.w	r3, r7, #16
 8005020:	22b8      	movs	r2, #184	; 0xb8
 8005022:	2100      	movs	r1, #0
 8005024:	4618      	mov	r0, r3
 8005026:	f00a f92b 	bl	800f280 <memset>
  if(uartHandle->Instance==USART1)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a5a      	ldr	r2, [pc, #360]	; (8005198 <HAL_UART_MspInit+0x194>)
 8005030:	4293      	cmp	r3, r2
 8005032:	f040 80ad 	bne.w	8005190 <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005036:	f04f 0201 	mov.w	r2, #1
 800503a:	f04f 0300 	mov.w	r3, #0
 800503e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8005042:	2300      	movs	r3, #0
 8005044:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005048:	f107 0310 	add.w	r3, r7, #16
 800504c:	4618      	mov	r0, r3
 800504e:	f004 fd31 	bl	8009ab4 <HAL_RCCEx_PeriphCLKConfig>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8005058:	f7fc fc02 	bl	8001860 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800505c:	4b4f      	ldr	r3, [pc, #316]	; (800519c <HAL_UART_MspInit+0x198>)
 800505e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005062:	4a4e      	ldr	r2, [pc, #312]	; (800519c <HAL_UART_MspInit+0x198>)
 8005064:	f043 0310 	orr.w	r3, r3, #16
 8005068:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800506c:	4b4b      	ldr	r3, [pc, #300]	; (800519c <HAL_UART_MspInit+0x198>)
 800506e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005072:	f003 0310 	and.w	r3, r3, #16
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800507a:	4b48      	ldr	r3, [pc, #288]	; (800519c <HAL_UART_MspInit+0x198>)
 800507c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005080:	4a46      	ldr	r2, [pc, #280]	; (800519c <HAL_UART_MspInit+0x198>)
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800508a:	4b44      	ldr	r3, [pc, #272]	; (800519c <HAL_UART_MspInit+0x198>)
 800508c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005098:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800509c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a0:	2302      	movs	r3, #2
 80050a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ac:	2300      	movs	r3, #0
 80050ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050b2:	2307      	movs	r3, #7
 80050b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80050bc:	4619      	mov	r1, r3
 80050be:	4838      	ldr	r0, [pc, #224]	; (80051a0 <HAL_UART_MspInit+0x19c>)
 80050c0:	f003 fa94 	bl	80085ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80050c4:	4b37      	ldr	r3, [pc, #220]	; (80051a4 <HAL_UART_MspInit+0x1a0>)
 80050c6:	4a38      	ldr	r2, [pc, #224]	; (80051a8 <HAL_UART_MspInit+0x1a4>)
 80050c8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80050ca:	4b36      	ldr	r3, [pc, #216]	; (80051a4 <HAL_UART_MspInit+0x1a0>)
 80050cc:	2229      	movs	r2, #41	; 0x29
 80050ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050d0:	4b34      	ldr	r3, [pc, #208]	; (80051a4 <HAL_UART_MspInit+0x1a0>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050d6:	4b33      	ldr	r3, [pc, #204]	; (80051a4 <HAL_UART_MspInit+0x1a0>)
 80050d8:	2200      	movs	r2, #0
 80050da:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050dc:	4b31      	ldr	r3, [pc, #196]	; (80051a4 <HAL_UART_MspInit+0x1a0>)
 80050de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050e4:	4b2f      	ldr	r3, [pc, #188]	; (80051a4 <HAL_UART_MspInit+0x1a0>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050ea:	4b2e      	ldr	r3, [pc, #184]	; (80051a4 <HAL_UART_MspInit+0x1a0>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80050f0:	4b2c      	ldr	r3, [pc, #176]	; (80051a4 <HAL_UART_MspInit+0x1a0>)
 80050f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050f6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80050f8:	4b2a      	ldr	r3, [pc, #168]	; (80051a4 <HAL_UART_MspInit+0x1a0>)
 80050fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050fe:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005100:	4b28      	ldr	r3, [pc, #160]	; (80051a4 <HAL_UART_MspInit+0x1a0>)
 8005102:	2200      	movs	r2, #0
 8005104:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005106:	4827      	ldr	r0, [pc, #156]	; (80051a4 <HAL_UART_MspInit+0x1a0>)
 8005108:	f000 fa80 	bl	800560c <HAL_DMA_Init>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8005112:	f7fc fba5 	bl	8001860 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a22      	ldr	r2, [pc, #136]	; (80051a4 <HAL_UART_MspInit+0x1a0>)
 800511a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800511e:	4a21      	ldr	r2, [pc, #132]	; (80051a4 <HAL_UART_MspInit+0x1a0>)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8005124:	4b21      	ldr	r3, [pc, #132]	; (80051ac <HAL_UART_MspInit+0x1a8>)
 8005126:	4a22      	ldr	r2, [pc, #136]	; (80051b0 <HAL_UART_MspInit+0x1ac>)
 8005128:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800512a:	4b20      	ldr	r3, [pc, #128]	; (80051ac <HAL_UART_MspInit+0x1a8>)
 800512c:	222a      	movs	r2, #42	; 0x2a
 800512e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005130:	4b1e      	ldr	r3, [pc, #120]	; (80051ac <HAL_UART_MspInit+0x1a8>)
 8005132:	2240      	movs	r2, #64	; 0x40
 8005134:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005136:	4b1d      	ldr	r3, [pc, #116]	; (80051ac <HAL_UART_MspInit+0x1a8>)
 8005138:	2200      	movs	r2, #0
 800513a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800513c:	4b1b      	ldr	r3, [pc, #108]	; (80051ac <HAL_UART_MspInit+0x1a8>)
 800513e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005142:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005144:	4b19      	ldr	r3, [pc, #100]	; (80051ac <HAL_UART_MspInit+0x1a8>)
 8005146:	2200      	movs	r2, #0
 8005148:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800514a:	4b18      	ldr	r3, [pc, #96]	; (80051ac <HAL_UART_MspInit+0x1a8>)
 800514c:	2200      	movs	r2, #0
 800514e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005150:	4b16      	ldr	r3, [pc, #88]	; (80051ac <HAL_UART_MspInit+0x1a8>)
 8005152:	2200      	movs	r2, #0
 8005154:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005156:	4b15      	ldr	r3, [pc, #84]	; (80051ac <HAL_UART_MspInit+0x1a8>)
 8005158:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800515c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800515e:	4b13      	ldr	r3, [pc, #76]	; (80051ac <HAL_UART_MspInit+0x1a8>)
 8005160:	2200      	movs	r2, #0
 8005162:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005164:	4811      	ldr	r0, [pc, #68]	; (80051ac <HAL_UART_MspInit+0x1a8>)
 8005166:	f000 fa51 	bl	800560c <HAL_DMA_Init>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8005170:	f7fc fb76 	bl	8001860 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a0d      	ldr	r2, [pc, #52]	; (80051ac <HAL_UART_MspInit+0x1a8>)
 8005178:	67da      	str	r2, [r3, #124]	; 0x7c
 800517a:	4a0c      	ldr	r2, [pc, #48]	; (80051ac <HAL_UART_MspInit+0x1a8>)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005180:	2200      	movs	r2, #0
 8005182:	2100      	movs	r1, #0
 8005184:	2025      	movs	r0, #37	; 0x25
 8005186:	f000 f9fe 	bl	8005586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800518a:	2025      	movs	r0, #37	; 0x25
 800518c:	f000 fa15 	bl	80055ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005190:	bf00      	nop
 8005192:	37e0      	adds	r7, #224	; 0xe0
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40011000 	.word	0x40011000
 800519c:	58024400 	.word	0x58024400
 80051a0:	58020000 	.word	0x58020000
 80051a4:	24001a04 	.word	0x24001a04
 80051a8:	40020010 	.word	0x40020010
 80051ac:	24001a7c 	.word	0x24001a7c
 80051b0:	40020028 	.word	0x40020028

080051b4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a10      	ldr	r2, [pc, #64]	; (8005204 <HAL_UART_MspDeInit+0x50>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d11a      	bne.n	80051fc <HAL_UART_MspDeInit+0x48>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80051c6:	4b10      	ldr	r3, [pc, #64]	; (8005208 <HAL_UART_MspDeInit+0x54>)
 80051c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051cc:	4a0e      	ldr	r2, [pc, #56]	; (8005208 <HAL_UART_MspDeInit+0x54>)
 80051ce:	f023 0310 	bic.w	r3, r3, #16
 80051d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80051d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051da:	480c      	ldr	r0, [pc, #48]	; (800520c <HAL_UART_MspDeInit+0x58>)
 80051dc:	f003 fbae 	bl	800893c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fd6a 	bl	8005cc0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 fd65 	bl	8005cc0 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80051f6:	2025      	movs	r0, #37	; 0x25
 80051f8:	f000 f9ed 	bl	80055d6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80051fc:	bf00      	nop
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40011000 	.word	0x40011000
 8005208:	58024400 	.word	0x58024400
 800520c:	58020000 	.word	0x58020000

08005210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005248 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005214:	f7ff f9a2 	bl	800455c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005218:	480c      	ldr	r0, [pc, #48]	; (800524c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800521a:	490d      	ldr	r1, [pc, #52]	; (8005250 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800521c:	4a0d      	ldr	r2, [pc, #52]	; (8005254 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800521e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005220:	e002      	b.n	8005228 <LoopCopyDataInit>

08005222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005226:	3304      	adds	r3, #4

08005228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800522a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800522c:	d3f9      	bcc.n	8005222 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800522e:	4a0a      	ldr	r2, [pc, #40]	; (8005258 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005230:	4c0a      	ldr	r4, [pc, #40]	; (800525c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005234:	e001      	b.n	800523a <LoopFillZerobss>

08005236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005238:	3204      	adds	r2, #4

0800523a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800523a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800523c:	d3fb      	bcc.n	8005236 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800523e:	f009 ffed 	bl	800f21c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005242:	f7fc f9d3 	bl	80015ec <main>
  bx  lr
 8005246:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005248:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800524c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005250:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8005254:	0800f8b8 	.word	0x0800f8b8
  ldr r2, =_sbss
 8005258:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 800525c:	24001b08 	.word	0x24001b08

08005260 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005260:	e7fe      	b.n	8005260 <ADC3_IRQHandler>
	...

08005264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800526a:	2003      	movs	r0, #3
 800526c:	f000 f980 	bl	8005570 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005270:	f004 fa4a 	bl	8009708 <HAL_RCC_GetSysClockFreq>
 8005274:	4602      	mov	r2, r0
 8005276:	4b15      	ldr	r3, [pc, #84]	; (80052cc <HAL_Init+0x68>)
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	0a1b      	lsrs	r3, r3, #8
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	4913      	ldr	r1, [pc, #76]	; (80052d0 <HAL_Init+0x6c>)
 8005282:	5ccb      	ldrb	r3, [r1, r3]
 8005284:	f003 031f 	and.w	r3, r3, #31
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
 800528c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800528e:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <HAL_Init+0x68>)
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	4a0e      	ldr	r2, [pc, #56]	; (80052d0 <HAL_Init+0x6c>)
 8005298:	5cd3      	ldrb	r3, [r2, r3]
 800529a:	f003 031f 	and.w	r3, r3, #31
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	fa22 f303 	lsr.w	r3, r2, r3
 80052a4:	4a0b      	ldr	r2, [pc, #44]	; (80052d4 <HAL_Init+0x70>)
 80052a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052a8:	4a0b      	ldr	r2, [pc, #44]	; (80052d8 <HAL_Init+0x74>)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80052ae:	2000      	movs	r0, #0
 80052b0:	f000 f814 	bl	80052dc <HAL_InitTick>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e002      	b.n	80052c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80052be:	f7ff f861 	bl	8004384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	58024400 	.word	0x58024400
 80052d0:	0800f864 	.word	0x0800f864
 80052d4:	24000004 	.word	0x24000004
 80052d8:	24000000 	.word	0x24000000

080052dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80052e4:	4b15      	ldr	r3, [pc, #84]	; (800533c <HAL_InitTick+0x60>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e021      	b.n	8005334 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80052f0:	4b13      	ldr	r3, [pc, #76]	; (8005340 <HAL_InitTick+0x64>)
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	4b11      	ldr	r3, [pc, #68]	; (800533c <HAL_InitTick+0x60>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	4619      	mov	r1, r3
 80052fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005302:	fbb2 f3f3 	udiv	r3, r2, r3
 8005306:	4618      	mov	r0, r3
 8005308:	f000 f973 	bl	80055f2 <HAL_SYSTICK_Config>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e00e      	b.n	8005334 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b0f      	cmp	r3, #15
 800531a:	d80a      	bhi.n	8005332 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800531c:	2200      	movs	r2, #0
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	f04f 30ff 	mov.w	r0, #4294967295
 8005324:	f000 f92f 	bl	8005586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005328:	4a06      	ldr	r2, [pc, #24]	; (8005344 <HAL_InitTick+0x68>)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	e000      	b.n	8005334 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
}
 8005334:	4618      	mov	r0, r3
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	2400000c 	.word	0x2400000c
 8005340:	24000000 	.word	0x24000000
 8005344:	24000008 	.word	0x24000008

08005348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800534c:	4b06      	ldr	r3, [pc, #24]	; (8005368 <HAL_IncTick+0x20>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	4b06      	ldr	r3, [pc, #24]	; (800536c <HAL_IncTick+0x24>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4413      	add	r3, r2
 8005358:	4a04      	ldr	r2, [pc, #16]	; (800536c <HAL_IncTick+0x24>)
 800535a:	6013      	str	r3, [r2, #0]
}
 800535c:	bf00      	nop
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	2400000c 	.word	0x2400000c
 800536c:	24001af4 	.word	0x24001af4

08005370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
  return uwTick;
 8005374:	4b03      	ldr	r3, [pc, #12]	; (8005384 <HAL_GetTick+0x14>)
 8005376:	681b      	ldr	r3, [r3, #0]
}
 8005378:	4618      	mov	r0, r3
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	24001af4 	.word	0x24001af4

08005388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005398:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <__NVIC_SetPriorityGrouping+0x40>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053a4:	4013      	ands	r3, r2
 80053a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80053b0:	4b06      	ldr	r3, [pc, #24]	; (80053cc <__NVIC_SetPriorityGrouping+0x44>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053b6:	4a04      	ldr	r2, [pc, #16]	; (80053c8 <__NVIC_SetPriorityGrouping+0x40>)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	60d3      	str	r3, [r2, #12]
}
 80053bc:	bf00      	nop
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	e000ed00 	.word	0xe000ed00
 80053cc:	05fa0000 	.word	0x05fa0000

080053d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053d4:	4b04      	ldr	r3, [pc, #16]	; (80053e8 <__NVIC_GetPriorityGrouping+0x18>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	0a1b      	lsrs	r3, r3, #8
 80053da:	f003 0307 	and.w	r3, r3, #7
}
 80053de:	4618      	mov	r0, r3
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	e000ed00 	.word	0xe000ed00

080053ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	4603      	mov	r3, r0
 80053f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	db0b      	blt.n	8005416 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053fe:	88fb      	ldrh	r3, [r7, #6]
 8005400:	f003 021f 	and.w	r2, r3, #31
 8005404:	4907      	ldr	r1, [pc, #28]	; (8005424 <__NVIC_EnableIRQ+0x38>)
 8005406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	2001      	movs	r0, #1
 800540e:	fa00 f202 	lsl.w	r2, r0, r2
 8005412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	e000e100 	.word	0xe000e100

08005428 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005436:	2b00      	cmp	r3, #0
 8005438:	db12      	blt.n	8005460 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800543a:	88fb      	ldrh	r3, [r7, #6]
 800543c:	f003 021f 	and.w	r2, r3, #31
 8005440:	490a      	ldr	r1, [pc, #40]	; (800546c <__NVIC_DisableIRQ+0x44>)
 8005442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005446:	095b      	lsrs	r3, r3, #5
 8005448:	2001      	movs	r0, #1
 800544a:	fa00 f202 	lsl.w	r2, r0, r2
 800544e:	3320      	adds	r3, #32
 8005450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005454:	f3bf 8f4f 	dsb	sy
}
 8005458:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800545a:	f3bf 8f6f 	isb	sy
}
 800545e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	e000e100 	.word	0xe000e100

08005470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	4603      	mov	r3, r0
 8005478:	6039      	str	r1, [r7, #0]
 800547a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800547c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005480:	2b00      	cmp	r3, #0
 8005482:	db0a      	blt.n	800549a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	b2da      	uxtb	r2, r3
 8005488:	490c      	ldr	r1, [pc, #48]	; (80054bc <__NVIC_SetPriority+0x4c>)
 800548a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800548e:	0112      	lsls	r2, r2, #4
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	440b      	add	r3, r1
 8005494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005498:	e00a      	b.n	80054b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	b2da      	uxtb	r2, r3
 800549e:	4908      	ldr	r1, [pc, #32]	; (80054c0 <__NVIC_SetPriority+0x50>)
 80054a0:	88fb      	ldrh	r3, [r7, #6]
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	3b04      	subs	r3, #4
 80054a8:	0112      	lsls	r2, r2, #4
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	440b      	add	r3, r1
 80054ae:	761a      	strb	r2, [r3, #24]
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	e000e100 	.word	0xe000e100
 80054c0:	e000ed00 	.word	0xe000ed00

080054c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b089      	sub	sp, #36	; 0x24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f1c3 0307 	rsb	r3, r3, #7
 80054de:	2b04      	cmp	r3, #4
 80054e0:	bf28      	it	cs
 80054e2:	2304      	movcs	r3, #4
 80054e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	3304      	adds	r3, #4
 80054ea:	2b06      	cmp	r3, #6
 80054ec:	d902      	bls.n	80054f4 <NVIC_EncodePriority+0x30>
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	3b03      	subs	r3, #3
 80054f2:	e000      	b.n	80054f6 <NVIC_EncodePriority+0x32>
 80054f4:	2300      	movs	r3, #0
 80054f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054f8:	f04f 32ff 	mov.w	r2, #4294967295
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	43da      	mvns	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	401a      	ands	r2, r3
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800550c:	f04f 31ff 	mov.w	r1, #4294967295
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	fa01 f303 	lsl.w	r3, r1, r3
 8005516:	43d9      	mvns	r1, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800551c:	4313      	orrs	r3, r2
         );
}
 800551e:	4618      	mov	r0, r3
 8005520:	3724      	adds	r7, #36	; 0x24
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3b01      	subs	r3, #1
 8005538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800553c:	d301      	bcc.n	8005542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800553e:	2301      	movs	r3, #1
 8005540:	e00f      	b.n	8005562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005542:	4a0a      	ldr	r2, [pc, #40]	; (800556c <SysTick_Config+0x40>)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3b01      	subs	r3, #1
 8005548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800554a:	210f      	movs	r1, #15
 800554c:	f04f 30ff 	mov.w	r0, #4294967295
 8005550:	f7ff ff8e 	bl	8005470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005554:	4b05      	ldr	r3, [pc, #20]	; (800556c <SysTick_Config+0x40>)
 8005556:	2200      	movs	r2, #0
 8005558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800555a:	4b04      	ldr	r3, [pc, #16]	; (800556c <SysTick_Config+0x40>)
 800555c:	2207      	movs	r2, #7
 800555e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	e000e010 	.word	0xe000e010

08005570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff ff05 	bl	8005388 <__NVIC_SetPriorityGrouping>
}
 800557e:	bf00      	nop
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b086      	sub	sp, #24
 800558a:	af00      	add	r7, sp, #0
 800558c:	4603      	mov	r3, r0
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	607a      	str	r2, [r7, #4]
 8005592:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005594:	f7ff ff1c 	bl	80053d0 <__NVIC_GetPriorityGrouping>
 8005598:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	6978      	ldr	r0, [r7, #20]
 80055a0:	f7ff ff90 	bl	80054c4 <NVIC_EncodePriority>
 80055a4:	4602      	mov	r2, r0
 80055a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80055aa:	4611      	mov	r1, r2
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff ff5f 	bl	8005470 <__NVIC_SetPriority>
}
 80055b2:	bf00      	nop
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	4603      	mov	r3, r0
 80055c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7ff ff0f 	bl	80053ec <__NVIC_EnableIRQ>
}
 80055ce:	bf00      	nop
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b082      	sub	sp, #8
 80055da:	af00      	add	r7, sp, #0
 80055dc:	4603      	mov	r3, r0
 80055de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80055e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff ff1f 	bl	8005428 <__NVIC_DisableIRQ>
}
 80055ea:	bf00      	nop
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b082      	sub	sp, #8
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff ff96 	bl	800552c <SysTick_Config>
 8005600:	4603      	mov	r3, r0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005614:	f7ff feac 	bl	8005370 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e314      	b.n	8005c4e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a66      	ldr	r2, [pc, #408]	; (80057c4 <HAL_DMA_Init+0x1b8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d04a      	beq.n	80056c4 <HAL_DMA_Init+0xb8>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a65      	ldr	r2, [pc, #404]	; (80057c8 <HAL_DMA_Init+0x1bc>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d045      	beq.n	80056c4 <HAL_DMA_Init+0xb8>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a63      	ldr	r2, [pc, #396]	; (80057cc <HAL_DMA_Init+0x1c0>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d040      	beq.n	80056c4 <HAL_DMA_Init+0xb8>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a62      	ldr	r2, [pc, #392]	; (80057d0 <HAL_DMA_Init+0x1c4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d03b      	beq.n	80056c4 <HAL_DMA_Init+0xb8>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a60      	ldr	r2, [pc, #384]	; (80057d4 <HAL_DMA_Init+0x1c8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d036      	beq.n	80056c4 <HAL_DMA_Init+0xb8>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a5f      	ldr	r2, [pc, #380]	; (80057d8 <HAL_DMA_Init+0x1cc>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d031      	beq.n	80056c4 <HAL_DMA_Init+0xb8>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a5d      	ldr	r2, [pc, #372]	; (80057dc <HAL_DMA_Init+0x1d0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d02c      	beq.n	80056c4 <HAL_DMA_Init+0xb8>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a5c      	ldr	r2, [pc, #368]	; (80057e0 <HAL_DMA_Init+0x1d4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d027      	beq.n	80056c4 <HAL_DMA_Init+0xb8>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a5a      	ldr	r2, [pc, #360]	; (80057e4 <HAL_DMA_Init+0x1d8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d022      	beq.n	80056c4 <HAL_DMA_Init+0xb8>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a59      	ldr	r2, [pc, #356]	; (80057e8 <HAL_DMA_Init+0x1dc>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d01d      	beq.n	80056c4 <HAL_DMA_Init+0xb8>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a57      	ldr	r2, [pc, #348]	; (80057ec <HAL_DMA_Init+0x1e0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d018      	beq.n	80056c4 <HAL_DMA_Init+0xb8>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a56      	ldr	r2, [pc, #344]	; (80057f0 <HAL_DMA_Init+0x1e4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d013      	beq.n	80056c4 <HAL_DMA_Init+0xb8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a54      	ldr	r2, [pc, #336]	; (80057f4 <HAL_DMA_Init+0x1e8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00e      	beq.n	80056c4 <HAL_DMA_Init+0xb8>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a53      	ldr	r2, [pc, #332]	; (80057f8 <HAL_DMA_Init+0x1ec>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d009      	beq.n	80056c4 <HAL_DMA_Init+0xb8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a51      	ldr	r2, [pc, #324]	; (80057fc <HAL_DMA_Init+0x1f0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d004      	beq.n	80056c4 <HAL_DMA_Init+0xb8>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a50      	ldr	r2, [pc, #320]	; (8005800 <HAL_DMA_Init+0x1f4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d101      	bne.n	80056c8 <HAL_DMA_Init+0xbc>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <HAL_DMA_Init+0xbe>
 80056c8:	2300      	movs	r3, #0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 813c 	beq.w	8005948 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a37      	ldr	r2, [pc, #220]	; (80057c4 <HAL_DMA_Init+0x1b8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d04a      	beq.n	8005780 <HAL_DMA_Init+0x174>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a36      	ldr	r2, [pc, #216]	; (80057c8 <HAL_DMA_Init+0x1bc>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d045      	beq.n	8005780 <HAL_DMA_Init+0x174>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a34      	ldr	r2, [pc, #208]	; (80057cc <HAL_DMA_Init+0x1c0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d040      	beq.n	8005780 <HAL_DMA_Init+0x174>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a33      	ldr	r2, [pc, #204]	; (80057d0 <HAL_DMA_Init+0x1c4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d03b      	beq.n	8005780 <HAL_DMA_Init+0x174>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a31      	ldr	r2, [pc, #196]	; (80057d4 <HAL_DMA_Init+0x1c8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d036      	beq.n	8005780 <HAL_DMA_Init+0x174>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a30      	ldr	r2, [pc, #192]	; (80057d8 <HAL_DMA_Init+0x1cc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d031      	beq.n	8005780 <HAL_DMA_Init+0x174>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a2e      	ldr	r2, [pc, #184]	; (80057dc <HAL_DMA_Init+0x1d0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d02c      	beq.n	8005780 <HAL_DMA_Init+0x174>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a2d      	ldr	r2, [pc, #180]	; (80057e0 <HAL_DMA_Init+0x1d4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d027      	beq.n	8005780 <HAL_DMA_Init+0x174>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a2b      	ldr	r2, [pc, #172]	; (80057e4 <HAL_DMA_Init+0x1d8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d022      	beq.n	8005780 <HAL_DMA_Init+0x174>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a2a      	ldr	r2, [pc, #168]	; (80057e8 <HAL_DMA_Init+0x1dc>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d01d      	beq.n	8005780 <HAL_DMA_Init+0x174>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a28      	ldr	r2, [pc, #160]	; (80057ec <HAL_DMA_Init+0x1e0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d018      	beq.n	8005780 <HAL_DMA_Init+0x174>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a27      	ldr	r2, [pc, #156]	; (80057f0 <HAL_DMA_Init+0x1e4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d013      	beq.n	8005780 <HAL_DMA_Init+0x174>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a25      	ldr	r2, [pc, #148]	; (80057f4 <HAL_DMA_Init+0x1e8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00e      	beq.n	8005780 <HAL_DMA_Init+0x174>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a24      	ldr	r2, [pc, #144]	; (80057f8 <HAL_DMA_Init+0x1ec>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d009      	beq.n	8005780 <HAL_DMA_Init+0x174>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a22      	ldr	r2, [pc, #136]	; (80057fc <HAL_DMA_Init+0x1f0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d004      	beq.n	8005780 <HAL_DMA_Init+0x174>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a21      	ldr	r2, [pc, #132]	; (8005800 <HAL_DMA_Init+0x1f4>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d108      	bne.n	8005792 <HAL_DMA_Init+0x186>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0201 	bic.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	e007      	b.n	80057a2 <HAL_DMA_Init+0x196>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0201 	bic.w	r2, r2, #1
 80057a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80057a2:	e02f      	b.n	8005804 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057a4:	f7ff fde4 	bl	8005370 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b05      	cmp	r3, #5
 80057b0:	d928      	bls.n	8005804 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2203      	movs	r2, #3
 80057bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e244      	b.n	8005c4e <HAL_DMA_Init+0x642>
 80057c4:	40020010 	.word	0x40020010
 80057c8:	40020028 	.word	0x40020028
 80057cc:	40020040 	.word	0x40020040
 80057d0:	40020058 	.word	0x40020058
 80057d4:	40020070 	.word	0x40020070
 80057d8:	40020088 	.word	0x40020088
 80057dc:	400200a0 	.word	0x400200a0
 80057e0:	400200b8 	.word	0x400200b8
 80057e4:	40020410 	.word	0x40020410
 80057e8:	40020428 	.word	0x40020428
 80057ec:	40020440 	.word	0x40020440
 80057f0:	40020458 	.word	0x40020458
 80057f4:	40020470 	.word	0x40020470
 80057f8:	40020488 	.word	0x40020488
 80057fc:	400204a0 	.word	0x400204a0
 8005800:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1c8      	bne.n	80057a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4b84      	ldr	r3, [pc, #528]	; (8005a30 <HAL_DMA_Init+0x424>)
 800581e:	4013      	ands	r3, r2
 8005820:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800582a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005836:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005842:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	4313      	orrs	r3, r2
 800584e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	2b04      	cmp	r3, #4
 8005856:	d107      	bne.n	8005868 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005860:	4313      	orrs	r3, r2
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b28      	cmp	r3, #40	; 0x28
 800586e:	d903      	bls.n	8005878 <HAL_DMA_Init+0x26c>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b2e      	cmp	r3, #46	; 0x2e
 8005876:	d91f      	bls.n	80058b8 <HAL_DMA_Init+0x2ac>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b3e      	cmp	r3, #62	; 0x3e
 800587e:	d903      	bls.n	8005888 <HAL_DMA_Init+0x27c>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2b42      	cmp	r3, #66	; 0x42
 8005886:	d917      	bls.n	80058b8 <HAL_DMA_Init+0x2ac>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b46      	cmp	r3, #70	; 0x46
 800588e:	d903      	bls.n	8005898 <HAL_DMA_Init+0x28c>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2b48      	cmp	r3, #72	; 0x48
 8005896:	d90f      	bls.n	80058b8 <HAL_DMA_Init+0x2ac>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b4e      	cmp	r3, #78	; 0x4e
 800589e:	d903      	bls.n	80058a8 <HAL_DMA_Init+0x29c>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	2b52      	cmp	r3, #82	; 0x52
 80058a6:	d907      	bls.n	80058b8 <HAL_DMA_Init+0x2ac>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b73      	cmp	r3, #115	; 0x73
 80058ae:	d905      	bls.n	80058bc <HAL_DMA_Init+0x2b0>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2b77      	cmp	r3, #119	; 0x77
 80058b6:	d801      	bhi.n	80058bc <HAL_DMA_Init+0x2b0>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <HAL_DMA_Init+0x2b2>
 80058bc:	2300      	movs	r3, #0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058c8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f023 0307 	bic.w	r3, r3, #7
 80058e0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	2b04      	cmp	r3, #4
 80058f2:	d117      	bne.n	8005924 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00e      	beq.n	8005924 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f002 fce6 	bl	80082d8 <DMA_CheckFifoParam>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d008      	beq.n	8005924 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2240      	movs	r2, #64	; 0x40
 8005916:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e194      	b.n	8005c4e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f002 fc21 	bl	8008174 <DMA_CalcBaseAndBitshift>
 8005932:	4603      	mov	r3, r0
 8005934:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593a:	f003 031f 	and.w	r3, r3, #31
 800593e:	223f      	movs	r2, #63	; 0x3f
 8005940:	409a      	lsls	r2, r3
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	609a      	str	r2, [r3, #8]
 8005946:	e0ca      	b.n	8005ade <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a39      	ldr	r2, [pc, #228]	; (8005a34 <HAL_DMA_Init+0x428>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d022      	beq.n	8005998 <HAL_DMA_Init+0x38c>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a38      	ldr	r2, [pc, #224]	; (8005a38 <HAL_DMA_Init+0x42c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d01d      	beq.n	8005998 <HAL_DMA_Init+0x38c>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a36      	ldr	r2, [pc, #216]	; (8005a3c <HAL_DMA_Init+0x430>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d018      	beq.n	8005998 <HAL_DMA_Init+0x38c>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a35      	ldr	r2, [pc, #212]	; (8005a40 <HAL_DMA_Init+0x434>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d013      	beq.n	8005998 <HAL_DMA_Init+0x38c>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a33      	ldr	r2, [pc, #204]	; (8005a44 <HAL_DMA_Init+0x438>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00e      	beq.n	8005998 <HAL_DMA_Init+0x38c>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a32      	ldr	r2, [pc, #200]	; (8005a48 <HAL_DMA_Init+0x43c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d009      	beq.n	8005998 <HAL_DMA_Init+0x38c>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a30      	ldr	r2, [pc, #192]	; (8005a4c <HAL_DMA_Init+0x440>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d004      	beq.n	8005998 <HAL_DMA_Init+0x38c>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a2f      	ldr	r2, [pc, #188]	; (8005a50 <HAL_DMA_Init+0x444>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d101      	bne.n	800599c <HAL_DMA_Init+0x390>
 8005998:	2301      	movs	r3, #1
 800599a:	e000      	b.n	800599e <HAL_DMA_Init+0x392>
 800599c:	2300      	movs	r3, #0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 8094 	beq.w	8005acc <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a22      	ldr	r2, [pc, #136]	; (8005a34 <HAL_DMA_Init+0x428>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d021      	beq.n	80059f2 <HAL_DMA_Init+0x3e6>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a21      	ldr	r2, [pc, #132]	; (8005a38 <HAL_DMA_Init+0x42c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d01c      	beq.n	80059f2 <HAL_DMA_Init+0x3e6>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a1f      	ldr	r2, [pc, #124]	; (8005a3c <HAL_DMA_Init+0x430>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d017      	beq.n	80059f2 <HAL_DMA_Init+0x3e6>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1e      	ldr	r2, [pc, #120]	; (8005a40 <HAL_DMA_Init+0x434>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d012      	beq.n	80059f2 <HAL_DMA_Init+0x3e6>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a1c      	ldr	r2, [pc, #112]	; (8005a44 <HAL_DMA_Init+0x438>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00d      	beq.n	80059f2 <HAL_DMA_Init+0x3e6>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a1b      	ldr	r2, [pc, #108]	; (8005a48 <HAL_DMA_Init+0x43c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d008      	beq.n	80059f2 <HAL_DMA_Init+0x3e6>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a19      	ldr	r2, [pc, #100]	; (8005a4c <HAL_DMA_Init+0x440>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d003      	beq.n	80059f2 <HAL_DMA_Init+0x3e6>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a18      	ldr	r2, [pc, #96]	; (8005a50 <HAL_DMA_Init+0x444>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <HAL_DMA_Init+0x448>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	2b40      	cmp	r3, #64	; 0x40
 8005a1a:	d01d      	beq.n	8005a58 <HAL_DMA_Init+0x44c>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	2b80      	cmp	r3, #128	; 0x80
 8005a22:	d102      	bne.n	8005a2a <HAL_DMA_Init+0x41e>
 8005a24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a28:	e017      	b.n	8005a5a <HAL_DMA_Init+0x44e>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	e015      	b.n	8005a5a <HAL_DMA_Init+0x44e>
 8005a2e:	bf00      	nop
 8005a30:	fe10803f 	.word	0xfe10803f
 8005a34:	58025408 	.word	0x58025408
 8005a38:	5802541c 	.word	0x5802541c
 8005a3c:	58025430 	.word	0x58025430
 8005a40:	58025444 	.word	0x58025444
 8005a44:	58025458 	.word	0x58025458
 8005a48:	5802546c 	.word	0x5802546c
 8005a4c:	58025480 	.word	0x58025480
 8005a50:	58025494 	.word	0x58025494
 8005a54:	fffe000f 	.word	0xfffe000f
 8005a58:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	68d2      	ldr	r2, [r2, #12]
 8005a5e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005a68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a88:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	4b6e      	ldr	r3, [pc, #440]	; (8005c58 <HAL_DMA_Init+0x64c>)
 8005aa0:	4413      	add	r3, r2
 8005aa2:	4a6e      	ldr	r2, [pc, #440]	; (8005c5c <HAL_DMA_Init+0x650>)
 8005aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa8:	091b      	lsrs	r3, r3, #4
 8005aaa:	009a      	lsls	r2, r3, #2
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f002 fb5f 	bl	8008174 <DMA_CalcBaseAndBitshift>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005abe:	f003 031f 	and.w	r3, r3, #31
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	409a      	lsls	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	605a      	str	r2, [r3, #4]
 8005aca:	e008      	b.n	8005ade <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2240      	movs	r2, #64	; 0x40
 8005ad0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e0b7      	b.n	8005c4e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a5f      	ldr	r2, [pc, #380]	; (8005c60 <HAL_DMA_Init+0x654>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d072      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a5d      	ldr	r2, [pc, #372]	; (8005c64 <HAL_DMA_Init+0x658>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d06d      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a5c      	ldr	r2, [pc, #368]	; (8005c68 <HAL_DMA_Init+0x65c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d068      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a5a      	ldr	r2, [pc, #360]	; (8005c6c <HAL_DMA_Init+0x660>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d063      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a59      	ldr	r2, [pc, #356]	; (8005c70 <HAL_DMA_Init+0x664>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d05e      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a57      	ldr	r2, [pc, #348]	; (8005c74 <HAL_DMA_Init+0x668>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d059      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a56      	ldr	r2, [pc, #344]	; (8005c78 <HAL_DMA_Init+0x66c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d054      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a54      	ldr	r2, [pc, #336]	; (8005c7c <HAL_DMA_Init+0x670>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d04f      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a53      	ldr	r2, [pc, #332]	; (8005c80 <HAL_DMA_Init+0x674>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d04a      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a51      	ldr	r2, [pc, #324]	; (8005c84 <HAL_DMA_Init+0x678>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d045      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a50      	ldr	r2, [pc, #320]	; (8005c88 <HAL_DMA_Init+0x67c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d040      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a4e      	ldr	r2, [pc, #312]	; (8005c8c <HAL_DMA_Init+0x680>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d03b      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a4d      	ldr	r2, [pc, #308]	; (8005c90 <HAL_DMA_Init+0x684>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d036      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a4b      	ldr	r2, [pc, #300]	; (8005c94 <HAL_DMA_Init+0x688>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d031      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a4a      	ldr	r2, [pc, #296]	; (8005c98 <HAL_DMA_Init+0x68c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d02c      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a48      	ldr	r2, [pc, #288]	; (8005c9c <HAL_DMA_Init+0x690>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d027      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a47      	ldr	r2, [pc, #284]	; (8005ca0 <HAL_DMA_Init+0x694>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d022      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a45      	ldr	r2, [pc, #276]	; (8005ca4 <HAL_DMA_Init+0x698>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d01d      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a44      	ldr	r2, [pc, #272]	; (8005ca8 <HAL_DMA_Init+0x69c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d018      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a42      	ldr	r2, [pc, #264]	; (8005cac <HAL_DMA_Init+0x6a0>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d013      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a41      	ldr	r2, [pc, #260]	; (8005cb0 <HAL_DMA_Init+0x6a4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00e      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a3f      	ldr	r2, [pc, #252]	; (8005cb4 <HAL_DMA_Init+0x6a8>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d009      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a3e      	ldr	r2, [pc, #248]	; (8005cb8 <HAL_DMA_Init+0x6ac>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d004      	beq.n	8005bce <HAL_DMA_Init+0x5c2>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a3c      	ldr	r2, [pc, #240]	; (8005cbc <HAL_DMA_Init+0x6b0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d101      	bne.n	8005bd2 <HAL_DMA_Init+0x5c6>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <HAL_DMA_Init+0x5c8>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d032      	beq.n	8005c3e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f002 fbf9 	bl	80083d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	2b80      	cmp	r3, #128	; 0x80
 8005be4:	d102      	bne.n	8005bec <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bf4:	b2d2      	uxtb	r2, r2
 8005bf6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c00:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d010      	beq.n	8005c2c <HAL_DMA_Init+0x620>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b08      	cmp	r3, #8
 8005c10:	d80c      	bhi.n	8005c2c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f002 fc76 	bl	8008504 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c28:	605a      	str	r2, [r3, #4]
 8005c2a:	e008      	b.n	8005c3e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	a7fdabf8 	.word	0xa7fdabf8
 8005c5c:	cccccccd 	.word	0xcccccccd
 8005c60:	40020010 	.word	0x40020010
 8005c64:	40020028 	.word	0x40020028
 8005c68:	40020040 	.word	0x40020040
 8005c6c:	40020058 	.word	0x40020058
 8005c70:	40020070 	.word	0x40020070
 8005c74:	40020088 	.word	0x40020088
 8005c78:	400200a0 	.word	0x400200a0
 8005c7c:	400200b8 	.word	0x400200b8
 8005c80:	40020410 	.word	0x40020410
 8005c84:	40020428 	.word	0x40020428
 8005c88:	40020440 	.word	0x40020440
 8005c8c:	40020458 	.word	0x40020458
 8005c90:	40020470 	.word	0x40020470
 8005c94:	40020488 	.word	0x40020488
 8005c98:	400204a0 	.word	0x400204a0
 8005c9c:	400204b8 	.word	0x400204b8
 8005ca0:	58025408 	.word	0x58025408
 8005ca4:	5802541c 	.word	0x5802541c
 8005ca8:	58025430 	.word	0x58025430
 8005cac:	58025444 	.word	0x58025444
 8005cb0:	58025458 	.word	0x58025458
 8005cb4:	5802546c 	.word	0x5802546c
 8005cb8:	58025480 	.word	0x58025480
 8005cbc:	58025494 	.word	0x58025494

08005cc0 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e1a8      	b.n	8006024 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a82      	ldr	r2, [pc, #520]	; (8005ee0 <HAL_DMA_DeInit+0x220>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d04a      	beq.n	8005d72 <HAL_DMA_DeInit+0xb2>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a80      	ldr	r2, [pc, #512]	; (8005ee4 <HAL_DMA_DeInit+0x224>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d045      	beq.n	8005d72 <HAL_DMA_DeInit+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a7f      	ldr	r2, [pc, #508]	; (8005ee8 <HAL_DMA_DeInit+0x228>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d040      	beq.n	8005d72 <HAL_DMA_DeInit+0xb2>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a7d      	ldr	r2, [pc, #500]	; (8005eec <HAL_DMA_DeInit+0x22c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d03b      	beq.n	8005d72 <HAL_DMA_DeInit+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a7c      	ldr	r2, [pc, #496]	; (8005ef0 <HAL_DMA_DeInit+0x230>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d036      	beq.n	8005d72 <HAL_DMA_DeInit+0xb2>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a7a      	ldr	r2, [pc, #488]	; (8005ef4 <HAL_DMA_DeInit+0x234>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d031      	beq.n	8005d72 <HAL_DMA_DeInit+0xb2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a79      	ldr	r2, [pc, #484]	; (8005ef8 <HAL_DMA_DeInit+0x238>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d02c      	beq.n	8005d72 <HAL_DMA_DeInit+0xb2>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a77      	ldr	r2, [pc, #476]	; (8005efc <HAL_DMA_DeInit+0x23c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d027      	beq.n	8005d72 <HAL_DMA_DeInit+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a76      	ldr	r2, [pc, #472]	; (8005f00 <HAL_DMA_DeInit+0x240>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d022      	beq.n	8005d72 <HAL_DMA_DeInit+0xb2>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a74      	ldr	r2, [pc, #464]	; (8005f04 <HAL_DMA_DeInit+0x244>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d01d      	beq.n	8005d72 <HAL_DMA_DeInit+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a73      	ldr	r2, [pc, #460]	; (8005f08 <HAL_DMA_DeInit+0x248>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d018      	beq.n	8005d72 <HAL_DMA_DeInit+0xb2>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a71      	ldr	r2, [pc, #452]	; (8005f0c <HAL_DMA_DeInit+0x24c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d013      	beq.n	8005d72 <HAL_DMA_DeInit+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a70      	ldr	r2, [pc, #448]	; (8005f10 <HAL_DMA_DeInit+0x250>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00e      	beq.n	8005d72 <HAL_DMA_DeInit+0xb2>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a6e      	ldr	r2, [pc, #440]	; (8005f14 <HAL_DMA_DeInit+0x254>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d009      	beq.n	8005d72 <HAL_DMA_DeInit+0xb2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a6d      	ldr	r2, [pc, #436]	; (8005f18 <HAL_DMA_DeInit+0x258>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d004      	beq.n	8005d72 <HAL_DMA_DeInit+0xb2>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a6b      	ldr	r2, [pc, #428]	; (8005f1c <HAL_DMA_DeInit+0x25c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d108      	bne.n	8005d84 <HAL_DMA_DeInit+0xc4>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0201 	bic.w	r2, r2, #1
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	e007      	b.n	8005d94 <HAL_DMA_DeInit+0xd4>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0201 	bic.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a51      	ldr	r2, [pc, #324]	; (8005ee0 <HAL_DMA_DeInit+0x220>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d04a      	beq.n	8005e34 <HAL_DMA_DeInit+0x174>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a50      	ldr	r2, [pc, #320]	; (8005ee4 <HAL_DMA_DeInit+0x224>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d045      	beq.n	8005e34 <HAL_DMA_DeInit+0x174>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a4e      	ldr	r2, [pc, #312]	; (8005ee8 <HAL_DMA_DeInit+0x228>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d040      	beq.n	8005e34 <HAL_DMA_DeInit+0x174>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a4d      	ldr	r2, [pc, #308]	; (8005eec <HAL_DMA_DeInit+0x22c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d03b      	beq.n	8005e34 <HAL_DMA_DeInit+0x174>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a4b      	ldr	r2, [pc, #300]	; (8005ef0 <HAL_DMA_DeInit+0x230>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d036      	beq.n	8005e34 <HAL_DMA_DeInit+0x174>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a4a      	ldr	r2, [pc, #296]	; (8005ef4 <HAL_DMA_DeInit+0x234>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d031      	beq.n	8005e34 <HAL_DMA_DeInit+0x174>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a48      	ldr	r2, [pc, #288]	; (8005ef8 <HAL_DMA_DeInit+0x238>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d02c      	beq.n	8005e34 <HAL_DMA_DeInit+0x174>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a47      	ldr	r2, [pc, #284]	; (8005efc <HAL_DMA_DeInit+0x23c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d027      	beq.n	8005e34 <HAL_DMA_DeInit+0x174>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a45      	ldr	r2, [pc, #276]	; (8005f00 <HAL_DMA_DeInit+0x240>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d022      	beq.n	8005e34 <HAL_DMA_DeInit+0x174>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a44      	ldr	r2, [pc, #272]	; (8005f04 <HAL_DMA_DeInit+0x244>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d01d      	beq.n	8005e34 <HAL_DMA_DeInit+0x174>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a42      	ldr	r2, [pc, #264]	; (8005f08 <HAL_DMA_DeInit+0x248>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d018      	beq.n	8005e34 <HAL_DMA_DeInit+0x174>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a41      	ldr	r2, [pc, #260]	; (8005f0c <HAL_DMA_DeInit+0x24c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d013      	beq.n	8005e34 <HAL_DMA_DeInit+0x174>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a3f      	ldr	r2, [pc, #252]	; (8005f10 <HAL_DMA_DeInit+0x250>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00e      	beq.n	8005e34 <HAL_DMA_DeInit+0x174>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a3e      	ldr	r2, [pc, #248]	; (8005f14 <HAL_DMA_DeInit+0x254>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d009      	beq.n	8005e34 <HAL_DMA_DeInit+0x174>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a3c      	ldr	r2, [pc, #240]	; (8005f18 <HAL_DMA_DeInit+0x258>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d004      	beq.n	8005e34 <HAL_DMA_DeInit+0x174>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a3b      	ldr	r2, [pc, #236]	; (8005f1c <HAL_DMA_DeInit+0x25c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d101      	bne.n	8005e38 <HAL_DMA_DeInit+0x178>
 8005e34:	2301      	movs	r3, #1
 8005e36:	e000      	b.n	8005e3a <HAL_DMA_DeInit+0x17a>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d025      	beq.n	8005e8a <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2200      	movs	r2, #0
 8005e54:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2200      	movs	r2, #0
 8005e64:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2221      	movs	r2, #33	; 0x21
 8005e6c:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f002 f980 	bl	8008174 <DMA_CalcBaseAndBitshift>
 8005e74:	4603      	mov	r3, r0
 8005e76:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e7c:	f003 031f 	and.w	r3, r3, #31
 8005e80:	223f      	movs	r2, #63	; 0x3f
 8005e82:	409a      	lsls	r2, r3
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	609a      	str	r2, [r3, #8]
 8005e88:	e081      	b.n	8005f8e <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a24      	ldr	r2, [pc, #144]	; (8005f20 <HAL_DMA_DeInit+0x260>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d022      	beq.n	8005eda <HAL_DMA_DeInit+0x21a>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a22      	ldr	r2, [pc, #136]	; (8005f24 <HAL_DMA_DeInit+0x264>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d01d      	beq.n	8005eda <HAL_DMA_DeInit+0x21a>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a21      	ldr	r2, [pc, #132]	; (8005f28 <HAL_DMA_DeInit+0x268>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d018      	beq.n	8005eda <HAL_DMA_DeInit+0x21a>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a1f      	ldr	r2, [pc, #124]	; (8005f2c <HAL_DMA_DeInit+0x26c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d013      	beq.n	8005eda <HAL_DMA_DeInit+0x21a>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a1e      	ldr	r2, [pc, #120]	; (8005f30 <HAL_DMA_DeInit+0x270>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d00e      	beq.n	8005eda <HAL_DMA_DeInit+0x21a>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a1c      	ldr	r2, [pc, #112]	; (8005f34 <HAL_DMA_DeInit+0x274>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d009      	beq.n	8005eda <HAL_DMA_DeInit+0x21a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a1b      	ldr	r2, [pc, #108]	; (8005f38 <HAL_DMA_DeInit+0x278>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d004      	beq.n	8005eda <HAL_DMA_DeInit+0x21a>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a19      	ldr	r2, [pc, #100]	; (8005f3c <HAL_DMA_DeInit+0x27c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d132      	bne.n	8005f40 <HAL_DMA_DeInit+0x280>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e031      	b.n	8005f42 <HAL_DMA_DeInit+0x282>
 8005ede:	bf00      	nop
 8005ee0:	40020010 	.word	0x40020010
 8005ee4:	40020028 	.word	0x40020028
 8005ee8:	40020040 	.word	0x40020040
 8005eec:	40020058 	.word	0x40020058
 8005ef0:	40020070 	.word	0x40020070
 8005ef4:	40020088 	.word	0x40020088
 8005ef8:	400200a0 	.word	0x400200a0
 8005efc:	400200b8 	.word	0x400200b8
 8005f00:	40020410 	.word	0x40020410
 8005f04:	40020428 	.word	0x40020428
 8005f08:	40020440 	.word	0x40020440
 8005f0c:	40020458 	.word	0x40020458
 8005f10:	40020470 	.word	0x40020470
 8005f14:	40020488 	.word	0x40020488
 8005f18:	400204a0 	.word	0x400204a0
 8005f1c:	400204b8 	.word	0x400204b8
 8005f20:	58025408 	.word	0x58025408
 8005f24:	5802541c 	.word	0x5802541c
 8005f28:	58025430 	.word	0x58025430
 8005f2c:	58025444 	.word	0x58025444
 8005f30:	58025458 	.word	0x58025458
 8005f34:	5802546c 	.word	0x5802546c
 8005f38:	58025480 	.word	0x58025480
 8005f3c:	58025494 	.word	0x58025494
 8005f40:	2300      	movs	r3, #0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d021      	beq.n	8005f8a <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2200      	movs	r2, #0
 8005f54:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2200      	movs	r2, #0
 8005f64:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f002 f900 	bl	8008174 <DMA_CalcBaseAndBitshift>
 8005f74:	4603      	mov	r3, r0
 8005f76:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f7c:	f003 031f 	and.w	r3, r3, #31
 8005f80:	2201      	movs	r2, #1
 8005f82:	409a      	lsls	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	605a      	str	r2, [r3, #4]
 8005f88:	e001      	b.n	8005f8e <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e04a      	b.n	8006024 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f002 fa1e 	bl	80083d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d008      	beq.n	8005fae <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005fac:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00f      	beq.n	8005fd6 <HAL_DMA_DeInit+0x316>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2b08      	cmp	r3, #8
 8005fbc:	d80b      	bhi.n	8005fd6 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f002 faa0 	bl	8008504 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fc8:	2200      	movs	r2, #0
 8005fca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005fd4:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e226      	b.n	8006496 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800604e:	2b01      	cmp	r3, #1
 8006050:	d101      	bne.n	8006056 <HAL_DMA_Start_IT+0x2a>
 8006052:	2302      	movs	r3, #2
 8006054:	e21f      	b.n	8006496 <HAL_DMA_Start_IT+0x46a>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b01      	cmp	r3, #1
 8006068:	f040 820a 	bne.w	8006480 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a68      	ldr	r2, [pc, #416]	; (8006220 <HAL_DMA_Start_IT+0x1f4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d04a      	beq.n	800611a <HAL_DMA_Start_IT+0xee>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a66      	ldr	r2, [pc, #408]	; (8006224 <HAL_DMA_Start_IT+0x1f8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d045      	beq.n	800611a <HAL_DMA_Start_IT+0xee>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a65      	ldr	r2, [pc, #404]	; (8006228 <HAL_DMA_Start_IT+0x1fc>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d040      	beq.n	800611a <HAL_DMA_Start_IT+0xee>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a63      	ldr	r2, [pc, #396]	; (800622c <HAL_DMA_Start_IT+0x200>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d03b      	beq.n	800611a <HAL_DMA_Start_IT+0xee>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a62      	ldr	r2, [pc, #392]	; (8006230 <HAL_DMA_Start_IT+0x204>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d036      	beq.n	800611a <HAL_DMA_Start_IT+0xee>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a60      	ldr	r2, [pc, #384]	; (8006234 <HAL_DMA_Start_IT+0x208>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d031      	beq.n	800611a <HAL_DMA_Start_IT+0xee>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a5f      	ldr	r2, [pc, #380]	; (8006238 <HAL_DMA_Start_IT+0x20c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d02c      	beq.n	800611a <HAL_DMA_Start_IT+0xee>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a5d      	ldr	r2, [pc, #372]	; (800623c <HAL_DMA_Start_IT+0x210>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d027      	beq.n	800611a <HAL_DMA_Start_IT+0xee>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a5c      	ldr	r2, [pc, #368]	; (8006240 <HAL_DMA_Start_IT+0x214>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d022      	beq.n	800611a <HAL_DMA_Start_IT+0xee>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a5a      	ldr	r2, [pc, #360]	; (8006244 <HAL_DMA_Start_IT+0x218>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d01d      	beq.n	800611a <HAL_DMA_Start_IT+0xee>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a59      	ldr	r2, [pc, #356]	; (8006248 <HAL_DMA_Start_IT+0x21c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d018      	beq.n	800611a <HAL_DMA_Start_IT+0xee>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a57      	ldr	r2, [pc, #348]	; (800624c <HAL_DMA_Start_IT+0x220>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d013      	beq.n	800611a <HAL_DMA_Start_IT+0xee>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a56      	ldr	r2, [pc, #344]	; (8006250 <HAL_DMA_Start_IT+0x224>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d00e      	beq.n	800611a <HAL_DMA_Start_IT+0xee>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a54      	ldr	r2, [pc, #336]	; (8006254 <HAL_DMA_Start_IT+0x228>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d009      	beq.n	800611a <HAL_DMA_Start_IT+0xee>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a53      	ldr	r2, [pc, #332]	; (8006258 <HAL_DMA_Start_IT+0x22c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d004      	beq.n	800611a <HAL_DMA_Start_IT+0xee>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a51      	ldr	r2, [pc, #324]	; (800625c <HAL_DMA_Start_IT+0x230>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d108      	bne.n	800612c <HAL_DMA_Start_IT+0x100>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0201 	bic.w	r2, r2, #1
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	e007      	b.n	800613c <HAL_DMA_Start_IT+0x110>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0201 	bic.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	68b9      	ldr	r1, [r7, #8]
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f001 fe6a 	bl	8007e1c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a34      	ldr	r2, [pc, #208]	; (8006220 <HAL_DMA_Start_IT+0x1f4>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d04a      	beq.n	80061e8 <HAL_DMA_Start_IT+0x1bc>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a33      	ldr	r2, [pc, #204]	; (8006224 <HAL_DMA_Start_IT+0x1f8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d045      	beq.n	80061e8 <HAL_DMA_Start_IT+0x1bc>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a31      	ldr	r2, [pc, #196]	; (8006228 <HAL_DMA_Start_IT+0x1fc>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d040      	beq.n	80061e8 <HAL_DMA_Start_IT+0x1bc>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a30      	ldr	r2, [pc, #192]	; (800622c <HAL_DMA_Start_IT+0x200>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d03b      	beq.n	80061e8 <HAL_DMA_Start_IT+0x1bc>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a2e      	ldr	r2, [pc, #184]	; (8006230 <HAL_DMA_Start_IT+0x204>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d036      	beq.n	80061e8 <HAL_DMA_Start_IT+0x1bc>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a2d      	ldr	r2, [pc, #180]	; (8006234 <HAL_DMA_Start_IT+0x208>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d031      	beq.n	80061e8 <HAL_DMA_Start_IT+0x1bc>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a2b      	ldr	r2, [pc, #172]	; (8006238 <HAL_DMA_Start_IT+0x20c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d02c      	beq.n	80061e8 <HAL_DMA_Start_IT+0x1bc>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a2a      	ldr	r2, [pc, #168]	; (800623c <HAL_DMA_Start_IT+0x210>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d027      	beq.n	80061e8 <HAL_DMA_Start_IT+0x1bc>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a28      	ldr	r2, [pc, #160]	; (8006240 <HAL_DMA_Start_IT+0x214>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d022      	beq.n	80061e8 <HAL_DMA_Start_IT+0x1bc>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a27      	ldr	r2, [pc, #156]	; (8006244 <HAL_DMA_Start_IT+0x218>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d01d      	beq.n	80061e8 <HAL_DMA_Start_IT+0x1bc>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a25      	ldr	r2, [pc, #148]	; (8006248 <HAL_DMA_Start_IT+0x21c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d018      	beq.n	80061e8 <HAL_DMA_Start_IT+0x1bc>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a24      	ldr	r2, [pc, #144]	; (800624c <HAL_DMA_Start_IT+0x220>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d013      	beq.n	80061e8 <HAL_DMA_Start_IT+0x1bc>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a22      	ldr	r2, [pc, #136]	; (8006250 <HAL_DMA_Start_IT+0x224>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d00e      	beq.n	80061e8 <HAL_DMA_Start_IT+0x1bc>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a21      	ldr	r2, [pc, #132]	; (8006254 <HAL_DMA_Start_IT+0x228>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d009      	beq.n	80061e8 <HAL_DMA_Start_IT+0x1bc>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a1f      	ldr	r2, [pc, #124]	; (8006258 <HAL_DMA_Start_IT+0x22c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d004      	beq.n	80061e8 <HAL_DMA_Start_IT+0x1bc>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a1e      	ldr	r2, [pc, #120]	; (800625c <HAL_DMA_Start_IT+0x230>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d101      	bne.n	80061ec <HAL_DMA_Start_IT+0x1c0>
 80061e8:	2301      	movs	r3, #1
 80061ea:	e000      	b.n	80061ee <HAL_DMA_Start_IT+0x1c2>
 80061ec:	2300      	movs	r3, #0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d036      	beq.n	8006260 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f023 021e 	bic.w	r2, r3, #30
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f042 0216 	orr.w	r2, r2, #22
 8006204:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	2b00      	cmp	r3, #0
 800620c:	d03e      	beq.n	800628c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f042 0208 	orr.w	r2, r2, #8
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	e035      	b.n	800628c <HAL_DMA_Start_IT+0x260>
 8006220:	40020010 	.word	0x40020010
 8006224:	40020028 	.word	0x40020028
 8006228:	40020040 	.word	0x40020040
 800622c:	40020058 	.word	0x40020058
 8006230:	40020070 	.word	0x40020070
 8006234:	40020088 	.word	0x40020088
 8006238:	400200a0 	.word	0x400200a0
 800623c:	400200b8 	.word	0x400200b8
 8006240:	40020410 	.word	0x40020410
 8006244:	40020428 	.word	0x40020428
 8006248:	40020440 	.word	0x40020440
 800624c:	40020458 	.word	0x40020458
 8006250:	40020470 	.word	0x40020470
 8006254:	40020488 	.word	0x40020488
 8006258:	400204a0 	.word	0x400204a0
 800625c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f023 020e 	bic.w	r2, r3, #14
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 020a 	orr.w	r2, r2, #10
 8006272:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006278:	2b00      	cmp	r3, #0
 800627a:	d007      	beq.n	800628c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f042 0204 	orr.w	r2, r2, #4
 800628a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a83      	ldr	r2, [pc, #524]	; (80064a0 <HAL_DMA_Start_IT+0x474>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d072      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a82      	ldr	r2, [pc, #520]	; (80064a4 <HAL_DMA_Start_IT+0x478>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d06d      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a80      	ldr	r2, [pc, #512]	; (80064a8 <HAL_DMA_Start_IT+0x47c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d068      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a7f      	ldr	r2, [pc, #508]	; (80064ac <HAL_DMA_Start_IT+0x480>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d063      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a7d      	ldr	r2, [pc, #500]	; (80064b0 <HAL_DMA_Start_IT+0x484>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d05e      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a7c      	ldr	r2, [pc, #496]	; (80064b4 <HAL_DMA_Start_IT+0x488>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d059      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a7a      	ldr	r2, [pc, #488]	; (80064b8 <HAL_DMA_Start_IT+0x48c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d054      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a79      	ldr	r2, [pc, #484]	; (80064bc <HAL_DMA_Start_IT+0x490>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d04f      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a77      	ldr	r2, [pc, #476]	; (80064c0 <HAL_DMA_Start_IT+0x494>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d04a      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a76      	ldr	r2, [pc, #472]	; (80064c4 <HAL_DMA_Start_IT+0x498>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d045      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a74      	ldr	r2, [pc, #464]	; (80064c8 <HAL_DMA_Start_IT+0x49c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d040      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a73      	ldr	r2, [pc, #460]	; (80064cc <HAL_DMA_Start_IT+0x4a0>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d03b      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a71      	ldr	r2, [pc, #452]	; (80064d0 <HAL_DMA_Start_IT+0x4a4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d036      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a70      	ldr	r2, [pc, #448]	; (80064d4 <HAL_DMA_Start_IT+0x4a8>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d031      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a6e      	ldr	r2, [pc, #440]	; (80064d8 <HAL_DMA_Start_IT+0x4ac>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d02c      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a6d      	ldr	r2, [pc, #436]	; (80064dc <HAL_DMA_Start_IT+0x4b0>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d027      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a6b      	ldr	r2, [pc, #428]	; (80064e0 <HAL_DMA_Start_IT+0x4b4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d022      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a6a      	ldr	r2, [pc, #424]	; (80064e4 <HAL_DMA_Start_IT+0x4b8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d01d      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a68      	ldr	r2, [pc, #416]	; (80064e8 <HAL_DMA_Start_IT+0x4bc>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d018      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a67      	ldr	r2, [pc, #412]	; (80064ec <HAL_DMA_Start_IT+0x4c0>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d013      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a65      	ldr	r2, [pc, #404]	; (80064f0 <HAL_DMA_Start_IT+0x4c4>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d00e      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a64      	ldr	r2, [pc, #400]	; (80064f4 <HAL_DMA_Start_IT+0x4c8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d009      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a62      	ldr	r2, [pc, #392]	; (80064f8 <HAL_DMA_Start_IT+0x4cc>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d004      	beq.n	800637c <HAL_DMA_Start_IT+0x350>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a61      	ldr	r2, [pc, #388]	; (80064fc <HAL_DMA_Start_IT+0x4d0>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d101      	bne.n	8006380 <HAL_DMA_Start_IT+0x354>
 800637c:	2301      	movs	r3, #1
 800637e:	e000      	b.n	8006382 <HAL_DMA_Start_IT+0x356>
 8006380:	2300      	movs	r3, #0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d01a      	beq.n	80063bc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d007      	beq.n	80063a4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800639e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063a2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d007      	beq.n	80063bc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063ba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a37      	ldr	r2, [pc, #220]	; (80064a0 <HAL_DMA_Start_IT+0x474>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d04a      	beq.n	800645c <HAL_DMA_Start_IT+0x430>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a36      	ldr	r2, [pc, #216]	; (80064a4 <HAL_DMA_Start_IT+0x478>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d045      	beq.n	800645c <HAL_DMA_Start_IT+0x430>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a34      	ldr	r2, [pc, #208]	; (80064a8 <HAL_DMA_Start_IT+0x47c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d040      	beq.n	800645c <HAL_DMA_Start_IT+0x430>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a33      	ldr	r2, [pc, #204]	; (80064ac <HAL_DMA_Start_IT+0x480>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d03b      	beq.n	800645c <HAL_DMA_Start_IT+0x430>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a31      	ldr	r2, [pc, #196]	; (80064b0 <HAL_DMA_Start_IT+0x484>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d036      	beq.n	800645c <HAL_DMA_Start_IT+0x430>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a30      	ldr	r2, [pc, #192]	; (80064b4 <HAL_DMA_Start_IT+0x488>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d031      	beq.n	800645c <HAL_DMA_Start_IT+0x430>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a2e      	ldr	r2, [pc, #184]	; (80064b8 <HAL_DMA_Start_IT+0x48c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d02c      	beq.n	800645c <HAL_DMA_Start_IT+0x430>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a2d      	ldr	r2, [pc, #180]	; (80064bc <HAL_DMA_Start_IT+0x490>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d027      	beq.n	800645c <HAL_DMA_Start_IT+0x430>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a2b      	ldr	r2, [pc, #172]	; (80064c0 <HAL_DMA_Start_IT+0x494>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d022      	beq.n	800645c <HAL_DMA_Start_IT+0x430>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a2a      	ldr	r2, [pc, #168]	; (80064c4 <HAL_DMA_Start_IT+0x498>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d01d      	beq.n	800645c <HAL_DMA_Start_IT+0x430>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a28      	ldr	r2, [pc, #160]	; (80064c8 <HAL_DMA_Start_IT+0x49c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d018      	beq.n	800645c <HAL_DMA_Start_IT+0x430>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a27      	ldr	r2, [pc, #156]	; (80064cc <HAL_DMA_Start_IT+0x4a0>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d013      	beq.n	800645c <HAL_DMA_Start_IT+0x430>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a25      	ldr	r2, [pc, #148]	; (80064d0 <HAL_DMA_Start_IT+0x4a4>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00e      	beq.n	800645c <HAL_DMA_Start_IT+0x430>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a24      	ldr	r2, [pc, #144]	; (80064d4 <HAL_DMA_Start_IT+0x4a8>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d009      	beq.n	800645c <HAL_DMA_Start_IT+0x430>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a22      	ldr	r2, [pc, #136]	; (80064d8 <HAL_DMA_Start_IT+0x4ac>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d004      	beq.n	800645c <HAL_DMA_Start_IT+0x430>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a21      	ldr	r2, [pc, #132]	; (80064dc <HAL_DMA_Start_IT+0x4b0>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d108      	bne.n	800646e <HAL_DMA_Start_IT+0x442>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0201 	orr.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	e012      	b.n	8006494 <HAL_DMA_Start_IT+0x468>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 0201 	orr.w	r2, r2, #1
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	e009      	b.n	8006494 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006486:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006494:	7dfb      	ldrb	r3, [r7, #23]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	40020010 	.word	0x40020010
 80064a4:	40020028 	.word	0x40020028
 80064a8:	40020040 	.word	0x40020040
 80064ac:	40020058 	.word	0x40020058
 80064b0:	40020070 	.word	0x40020070
 80064b4:	40020088 	.word	0x40020088
 80064b8:	400200a0 	.word	0x400200a0
 80064bc:	400200b8 	.word	0x400200b8
 80064c0:	40020410 	.word	0x40020410
 80064c4:	40020428 	.word	0x40020428
 80064c8:	40020440 	.word	0x40020440
 80064cc:	40020458 	.word	0x40020458
 80064d0:	40020470 	.word	0x40020470
 80064d4:	40020488 	.word	0x40020488
 80064d8:	400204a0 	.word	0x400204a0
 80064dc:	400204b8 	.word	0x400204b8
 80064e0:	58025408 	.word	0x58025408
 80064e4:	5802541c 	.word	0x5802541c
 80064e8:	58025430 	.word	0x58025430
 80064ec:	58025444 	.word	0x58025444
 80064f0:	58025458 	.word	0x58025458
 80064f4:	5802546c 	.word	0x5802546c
 80064f8:	58025480 	.word	0x58025480
 80064fc:	58025494 	.word	0x58025494

08006500 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006508:	f7fe ff32 	bl	8005370 <HAL_GetTick>
 800650c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e2dc      	b.n	8006ad2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b02      	cmp	r3, #2
 8006522:	d008      	beq.n	8006536 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2280      	movs	r2, #128	; 0x80
 8006528:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e2cd      	b.n	8006ad2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a76      	ldr	r2, [pc, #472]	; (8006714 <HAL_DMA_Abort+0x214>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d04a      	beq.n	80065d6 <HAL_DMA_Abort+0xd6>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a74      	ldr	r2, [pc, #464]	; (8006718 <HAL_DMA_Abort+0x218>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d045      	beq.n	80065d6 <HAL_DMA_Abort+0xd6>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a73      	ldr	r2, [pc, #460]	; (800671c <HAL_DMA_Abort+0x21c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d040      	beq.n	80065d6 <HAL_DMA_Abort+0xd6>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a71      	ldr	r2, [pc, #452]	; (8006720 <HAL_DMA_Abort+0x220>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d03b      	beq.n	80065d6 <HAL_DMA_Abort+0xd6>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a70      	ldr	r2, [pc, #448]	; (8006724 <HAL_DMA_Abort+0x224>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d036      	beq.n	80065d6 <HAL_DMA_Abort+0xd6>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a6e      	ldr	r2, [pc, #440]	; (8006728 <HAL_DMA_Abort+0x228>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d031      	beq.n	80065d6 <HAL_DMA_Abort+0xd6>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a6d      	ldr	r2, [pc, #436]	; (800672c <HAL_DMA_Abort+0x22c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d02c      	beq.n	80065d6 <HAL_DMA_Abort+0xd6>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a6b      	ldr	r2, [pc, #428]	; (8006730 <HAL_DMA_Abort+0x230>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d027      	beq.n	80065d6 <HAL_DMA_Abort+0xd6>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a6a      	ldr	r2, [pc, #424]	; (8006734 <HAL_DMA_Abort+0x234>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d022      	beq.n	80065d6 <HAL_DMA_Abort+0xd6>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a68      	ldr	r2, [pc, #416]	; (8006738 <HAL_DMA_Abort+0x238>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d01d      	beq.n	80065d6 <HAL_DMA_Abort+0xd6>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a67      	ldr	r2, [pc, #412]	; (800673c <HAL_DMA_Abort+0x23c>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d018      	beq.n	80065d6 <HAL_DMA_Abort+0xd6>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a65      	ldr	r2, [pc, #404]	; (8006740 <HAL_DMA_Abort+0x240>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d013      	beq.n	80065d6 <HAL_DMA_Abort+0xd6>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a64      	ldr	r2, [pc, #400]	; (8006744 <HAL_DMA_Abort+0x244>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00e      	beq.n	80065d6 <HAL_DMA_Abort+0xd6>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a62      	ldr	r2, [pc, #392]	; (8006748 <HAL_DMA_Abort+0x248>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d009      	beq.n	80065d6 <HAL_DMA_Abort+0xd6>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a61      	ldr	r2, [pc, #388]	; (800674c <HAL_DMA_Abort+0x24c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d004      	beq.n	80065d6 <HAL_DMA_Abort+0xd6>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a5f      	ldr	r2, [pc, #380]	; (8006750 <HAL_DMA_Abort+0x250>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d101      	bne.n	80065da <HAL_DMA_Abort+0xda>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e000      	b.n	80065dc <HAL_DMA_Abort+0xdc>
 80065da:	2300      	movs	r3, #0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d013      	beq.n	8006608 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 021e 	bic.w	r2, r2, #30
 80065ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	695a      	ldr	r2, [r3, #20]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	617b      	str	r3, [r7, #20]
 8006606:	e00a      	b.n	800661e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 020e 	bic.w	r2, r2, #14
 8006616:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a3c      	ldr	r2, [pc, #240]	; (8006714 <HAL_DMA_Abort+0x214>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d072      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a3a      	ldr	r2, [pc, #232]	; (8006718 <HAL_DMA_Abort+0x218>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d06d      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a39      	ldr	r2, [pc, #228]	; (800671c <HAL_DMA_Abort+0x21c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d068      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a37      	ldr	r2, [pc, #220]	; (8006720 <HAL_DMA_Abort+0x220>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d063      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a36      	ldr	r2, [pc, #216]	; (8006724 <HAL_DMA_Abort+0x224>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d05e      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a34      	ldr	r2, [pc, #208]	; (8006728 <HAL_DMA_Abort+0x228>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d059      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a33      	ldr	r2, [pc, #204]	; (800672c <HAL_DMA_Abort+0x22c>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d054      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a31      	ldr	r2, [pc, #196]	; (8006730 <HAL_DMA_Abort+0x230>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d04f      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a30      	ldr	r2, [pc, #192]	; (8006734 <HAL_DMA_Abort+0x234>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d04a      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a2e      	ldr	r2, [pc, #184]	; (8006738 <HAL_DMA_Abort+0x238>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d045      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a2d      	ldr	r2, [pc, #180]	; (800673c <HAL_DMA_Abort+0x23c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d040      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a2b      	ldr	r2, [pc, #172]	; (8006740 <HAL_DMA_Abort+0x240>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d03b      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a2a      	ldr	r2, [pc, #168]	; (8006744 <HAL_DMA_Abort+0x244>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d036      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a28      	ldr	r2, [pc, #160]	; (8006748 <HAL_DMA_Abort+0x248>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d031      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a27      	ldr	r2, [pc, #156]	; (800674c <HAL_DMA_Abort+0x24c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d02c      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a25      	ldr	r2, [pc, #148]	; (8006750 <HAL_DMA_Abort+0x250>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d027      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a24      	ldr	r2, [pc, #144]	; (8006754 <HAL_DMA_Abort+0x254>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d022      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a22      	ldr	r2, [pc, #136]	; (8006758 <HAL_DMA_Abort+0x258>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d01d      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a21      	ldr	r2, [pc, #132]	; (800675c <HAL_DMA_Abort+0x25c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d018      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1f      	ldr	r2, [pc, #124]	; (8006760 <HAL_DMA_Abort+0x260>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d013      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1e      	ldr	r2, [pc, #120]	; (8006764 <HAL_DMA_Abort+0x264>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00e      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a1c      	ldr	r2, [pc, #112]	; (8006768 <HAL_DMA_Abort+0x268>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d009      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a1b      	ldr	r2, [pc, #108]	; (800676c <HAL_DMA_Abort+0x26c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d004      	beq.n	800670e <HAL_DMA_Abort+0x20e>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a19      	ldr	r2, [pc, #100]	; (8006770 <HAL_DMA_Abort+0x270>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d132      	bne.n	8006774 <HAL_DMA_Abort+0x274>
 800670e:	2301      	movs	r3, #1
 8006710:	e031      	b.n	8006776 <HAL_DMA_Abort+0x276>
 8006712:	bf00      	nop
 8006714:	40020010 	.word	0x40020010
 8006718:	40020028 	.word	0x40020028
 800671c:	40020040 	.word	0x40020040
 8006720:	40020058 	.word	0x40020058
 8006724:	40020070 	.word	0x40020070
 8006728:	40020088 	.word	0x40020088
 800672c:	400200a0 	.word	0x400200a0
 8006730:	400200b8 	.word	0x400200b8
 8006734:	40020410 	.word	0x40020410
 8006738:	40020428 	.word	0x40020428
 800673c:	40020440 	.word	0x40020440
 8006740:	40020458 	.word	0x40020458
 8006744:	40020470 	.word	0x40020470
 8006748:	40020488 	.word	0x40020488
 800674c:	400204a0 	.word	0x400204a0
 8006750:	400204b8 	.word	0x400204b8
 8006754:	58025408 	.word	0x58025408
 8006758:	5802541c 	.word	0x5802541c
 800675c:	58025430 	.word	0x58025430
 8006760:	58025444 	.word	0x58025444
 8006764:	58025458 	.word	0x58025458
 8006768:	5802546c 	.word	0x5802546c
 800676c:	58025480 	.word	0x58025480
 8006770:	58025494 	.word	0x58025494
 8006774:	2300      	movs	r3, #0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d007      	beq.n	800678a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006784:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006788:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a6d      	ldr	r2, [pc, #436]	; (8006944 <HAL_DMA_Abort+0x444>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d04a      	beq.n	800682a <HAL_DMA_Abort+0x32a>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a6b      	ldr	r2, [pc, #428]	; (8006948 <HAL_DMA_Abort+0x448>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d045      	beq.n	800682a <HAL_DMA_Abort+0x32a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a6a      	ldr	r2, [pc, #424]	; (800694c <HAL_DMA_Abort+0x44c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d040      	beq.n	800682a <HAL_DMA_Abort+0x32a>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a68      	ldr	r2, [pc, #416]	; (8006950 <HAL_DMA_Abort+0x450>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d03b      	beq.n	800682a <HAL_DMA_Abort+0x32a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a67      	ldr	r2, [pc, #412]	; (8006954 <HAL_DMA_Abort+0x454>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d036      	beq.n	800682a <HAL_DMA_Abort+0x32a>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a65      	ldr	r2, [pc, #404]	; (8006958 <HAL_DMA_Abort+0x458>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d031      	beq.n	800682a <HAL_DMA_Abort+0x32a>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a64      	ldr	r2, [pc, #400]	; (800695c <HAL_DMA_Abort+0x45c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d02c      	beq.n	800682a <HAL_DMA_Abort+0x32a>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a62      	ldr	r2, [pc, #392]	; (8006960 <HAL_DMA_Abort+0x460>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d027      	beq.n	800682a <HAL_DMA_Abort+0x32a>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a61      	ldr	r2, [pc, #388]	; (8006964 <HAL_DMA_Abort+0x464>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d022      	beq.n	800682a <HAL_DMA_Abort+0x32a>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a5f      	ldr	r2, [pc, #380]	; (8006968 <HAL_DMA_Abort+0x468>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d01d      	beq.n	800682a <HAL_DMA_Abort+0x32a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a5e      	ldr	r2, [pc, #376]	; (800696c <HAL_DMA_Abort+0x46c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d018      	beq.n	800682a <HAL_DMA_Abort+0x32a>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a5c      	ldr	r2, [pc, #368]	; (8006970 <HAL_DMA_Abort+0x470>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d013      	beq.n	800682a <HAL_DMA_Abort+0x32a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a5b      	ldr	r2, [pc, #364]	; (8006974 <HAL_DMA_Abort+0x474>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d00e      	beq.n	800682a <HAL_DMA_Abort+0x32a>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a59      	ldr	r2, [pc, #356]	; (8006978 <HAL_DMA_Abort+0x478>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d009      	beq.n	800682a <HAL_DMA_Abort+0x32a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a58      	ldr	r2, [pc, #352]	; (800697c <HAL_DMA_Abort+0x47c>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d004      	beq.n	800682a <HAL_DMA_Abort+0x32a>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a56      	ldr	r2, [pc, #344]	; (8006980 <HAL_DMA_Abort+0x480>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d108      	bne.n	800683c <HAL_DMA_Abort+0x33c>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0201 	bic.w	r2, r2, #1
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	e007      	b.n	800684c <HAL_DMA_Abort+0x34c>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0201 	bic.w	r2, r2, #1
 800684a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800684c:	e013      	b.n	8006876 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800684e:	f7fe fd8f 	bl	8005370 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b05      	cmp	r3, #5
 800685a:	d90c      	bls.n	8006876 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2220      	movs	r2, #32
 8006860:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2203      	movs	r2, #3
 8006866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e12d      	b.n	8006ad2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e5      	bne.n	800684e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a2f      	ldr	r2, [pc, #188]	; (8006944 <HAL_DMA_Abort+0x444>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d04a      	beq.n	8006922 <HAL_DMA_Abort+0x422>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a2d      	ldr	r2, [pc, #180]	; (8006948 <HAL_DMA_Abort+0x448>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d045      	beq.n	8006922 <HAL_DMA_Abort+0x422>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a2c      	ldr	r2, [pc, #176]	; (800694c <HAL_DMA_Abort+0x44c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d040      	beq.n	8006922 <HAL_DMA_Abort+0x422>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a2a      	ldr	r2, [pc, #168]	; (8006950 <HAL_DMA_Abort+0x450>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d03b      	beq.n	8006922 <HAL_DMA_Abort+0x422>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a29      	ldr	r2, [pc, #164]	; (8006954 <HAL_DMA_Abort+0x454>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d036      	beq.n	8006922 <HAL_DMA_Abort+0x422>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a27      	ldr	r2, [pc, #156]	; (8006958 <HAL_DMA_Abort+0x458>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d031      	beq.n	8006922 <HAL_DMA_Abort+0x422>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a26      	ldr	r2, [pc, #152]	; (800695c <HAL_DMA_Abort+0x45c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d02c      	beq.n	8006922 <HAL_DMA_Abort+0x422>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a24      	ldr	r2, [pc, #144]	; (8006960 <HAL_DMA_Abort+0x460>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d027      	beq.n	8006922 <HAL_DMA_Abort+0x422>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a23      	ldr	r2, [pc, #140]	; (8006964 <HAL_DMA_Abort+0x464>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d022      	beq.n	8006922 <HAL_DMA_Abort+0x422>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a21      	ldr	r2, [pc, #132]	; (8006968 <HAL_DMA_Abort+0x468>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d01d      	beq.n	8006922 <HAL_DMA_Abort+0x422>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a20      	ldr	r2, [pc, #128]	; (800696c <HAL_DMA_Abort+0x46c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d018      	beq.n	8006922 <HAL_DMA_Abort+0x422>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a1e      	ldr	r2, [pc, #120]	; (8006970 <HAL_DMA_Abort+0x470>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d013      	beq.n	8006922 <HAL_DMA_Abort+0x422>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a1d      	ldr	r2, [pc, #116]	; (8006974 <HAL_DMA_Abort+0x474>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d00e      	beq.n	8006922 <HAL_DMA_Abort+0x422>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a1b      	ldr	r2, [pc, #108]	; (8006978 <HAL_DMA_Abort+0x478>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d009      	beq.n	8006922 <HAL_DMA_Abort+0x422>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a1a      	ldr	r2, [pc, #104]	; (800697c <HAL_DMA_Abort+0x47c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d004      	beq.n	8006922 <HAL_DMA_Abort+0x422>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a18      	ldr	r2, [pc, #96]	; (8006980 <HAL_DMA_Abort+0x480>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d101      	bne.n	8006926 <HAL_DMA_Abort+0x426>
 8006922:	2301      	movs	r3, #1
 8006924:	e000      	b.n	8006928 <HAL_DMA_Abort+0x428>
 8006926:	2300      	movs	r3, #0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d02b      	beq.n	8006984 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006930:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	223f      	movs	r2, #63	; 0x3f
 800693c:	409a      	lsls	r2, r3
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	609a      	str	r2, [r3, #8]
 8006942:	e02a      	b.n	800699a <HAL_DMA_Abort+0x49a>
 8006944:	40020010 	.word	0x40020010
 8006948:	40020028 	.word	0x40020028
 800694c:	40020040 	.word	0x40020040
 8006950:	40020058 	.word	0x40020058
 8006954:	40020070 	.word	0x40020070
 8006958:	40020088 	.word	0x40020088
 800695c:	400200a0 	.word	0x400200a0
 8006960:	400200b8 	.word	0x400200b8
 8006964:	40020410 	.word	0x40020410
 8006968:	40020428 	.word	0x40020428
 800696c:	40020440 	.word	0x40020440
 8006970:	40020458 	.word	0x40020458
 8006974:	40020470 	.word	0x40020470
 8006978:	40020488 	.word	0x40020488
 800697c:	400204a0 	.word	0x400204a0
 8006980:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006988:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800698e:	f003 031f 	and.w	r3, r3, #31
 8006992:	2201      	movs	r2, #1
 8006994:	409a      	lsls	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a4f      	ldr	r2, [pc, #316]	; (8006adc <HAL_DMA_Abort+0x5dc>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d072      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a4d      	ldr	r2, [pc, #308]	; (8006ae0 <HAL_DMA_Abort+0x5e0>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d06d      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a4c      	ldr	r2, [pc, #304]	; (8006ae4 <HAL_DMA_Abort+0x5e4>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d068      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a4a      	ldr	r2, [pc, #296]	; (8006ae8 <HAL_DMA_Abort+0x5e8>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d063      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a49      	ldr	r2, [pc, #292]	; (8006aec <HAL_DMA_Abort+0x5ec>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d05e      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a47      	ldr	r2, [pc, #284]	; (8006af0 <HAL_DMA_Abort+0x5f0>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d059      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a46      	ldr	r2, [pc, #280]	; (8006af4 <HAL_DMA_Abort+0x5f4>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d054      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a44      	ldr	r2, [pc, #272]	; (8006af8 <HAL_DMA_Abort+0x5f8>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d04f      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a43      	ldr	r2, [pc, #268]	; (8006afc <HAL_DMA_Abort+0x5fc>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d04a      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a41      	ldr	r2, [pc, #260]	; (8006b00 <HAL_DMA_Abort+0x600>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d045      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a40      	ldr	r2, [pc, #256]	; (8006b04 <HAL_DMA_Abort+0x604>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d040      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a3e      	ldr	r2, [pc, #248]	; (8006b08 <HAL_DMA_Abort+0x608>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d03b      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a3d      	ldr	r2, [pc, #244]	; (8006b0c <HAL_DMA_Abort+0x60c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d036      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a3b      	ldr	r2, [pc, #236]	; (8006b10 <HAL_DMA_Abort+0x610>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d031      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a3a      	ldr	r2, [pc, #232]	; (8006b14 <HAL_DMA_Abort+0x614>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d02c      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a38      	ldr	r2, [pc, #224]	; (8006b18 <HAL_DMA_Abort+0x618>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d027      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a37      	ldr	r2, [pc, #220]	; (8006b1c <HAL_DMA_Abort+0x61c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d022      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a35      	ldr	r2, [pc, #212]	; (8006b20 <HAL_DMA_Abort+0x620>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d01d      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a34      	ldr	r2, [pc, #208]	; (8006b24 <HAL_DMA_Abort+0x624>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d018      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a32      	ldr	r2, [pc, #200]	; (8006b28 <HAL_DMA_Abort+0x628>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d013      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a31      	ldr	r2, [pc, #196]	; (8006b2c <HAL_DMA_Abort+0x62c>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00e      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a2f      	ldr	r2, [pc, #188]	; (8006b30 <HAL_DMA_Abort+0x630>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d009      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a2e      	ldr	r2, [pc, #184]	; (8006b34 <HAL_DMA_Abort+0x634>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d004      	beq.n	8006a8a <HAL_DMA_Abort+0x58a>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a2c      	ldr	r2, [pc, #176]	; (8006b38 <HAL_DMA_Abort+0x638>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d101      	bne.n	8006a8e <HAL_DMA_Abort+0x58e>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e000      	b.n	8006a90 <HAL_DMA_Abort+0x590>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d015      	beq.n	8006ac0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a9c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00c      	beq.n	8006ac0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ab4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006abe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3718      	adds	r7, #24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	40020010 	.word	0x40020010
 8006ae0:	40020028 	.word	0x40020028
 8006ae4:	40020040 	.word	0x40020040
 8006ae8:	40020058 	.word	0x40020058
 8006aec:	40020070 	.word	0x40020070
 8006af0:	40020088 	.word	0x40020088
 8006af4:	400200a0 	.word	0x400200a0
 8006af8:	400200b8 	.word	0x400200b8
 8006afc:	40020410 	.word	0x40020410
 8006b00:	40020428 	.word	0x40020428
 8006b04:	40020440 	.word	0x40020440
 8006b08:	40020458 	.word	0x40020458
 8006b0c:	40020470 	.word	0x40020470
 8006b10:	40020488 	.word	0x40020488
 8006b14:	400204a0 	.word	0x400204a0
 8006b18:	400204b8 	.word	0x400204b8
 8006b1c:	58025408 	.word	0x58025408
 8006b20:	5802541c 	.word	0x5802541c
 8006b24:	58025430 	.word	0x58025430
 8006b28:	58025444 	.word	0x58025444
 8006b2c:	58025458 	.word	0x58025458
 8006b30:	5802546c 	.word	0x5802546c
 8006b34:	58025480 	.word	0x58025480
 8006b38:	58025494 	.word	0x58025494

08006b3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e237      	b.n	8006fbe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d004      	beq.n	8006b64 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2280      	movs	r2, #128	; 0x80
 8006b5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e22c      	b.n	8006fbe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a5c      	ldr	r2, [pc, #368]	; (8006cdc <HAL_DMA_Abort_IT+0x1a0>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d04a      	beq.n	8006c04 <HAL_DMA_Abort_IT+0xc8>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a5b      	ldr	r2, [pc, #364]	; (8006ce0 <HAL_DMA_Abort_IT+0x1a4>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d045      	beq.n	8006c04 <HAL_DMA_Abort_IT+0xc8>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a59      	ldr	r2, [pc, #356]	; (8006ce4 <HAL_DMA_Abort_IT+0x1a8>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d040      	beq.n	8006c04 <HAL_DMA_Abort_IT+0xc8>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a58      	ldr	r2, [pc, #352]	; (8006ce8 <HAL_DMA_Abort_IT+0x1ac>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d03b      	beq.n	8006c04 <HAL_DMA_Abort_IT+0xc8>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a56      	ldr	r2, [pc, #344]	; (8006cec <HAL_DMA_Abort_IT+0x1b0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d036      	beq.n	8006c04 <HAL_DMA_Abort_IT+0xc8>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a55      	ldr	r2, [pc, #340]	; (8006cf0 <HAL_DMA_Abort_IT+0x1b4>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d031      	beq.n	8006c04 <HAL_DMA_Abort_IT+0xc8>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a53      	ldr	r2, [pc, #332]	; (8006cf4 <HAL_DMA_Abort_IT+0x1b8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d02c      	beq.n	8006c04 <HAL_DMA_Abort_IT+0xc8>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a52      	ldr	r2, [pc, #328]	; (8006cf8 <HAL_DMA_Abort_IT+0x1bc>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d027      	beq.n	8006c04 <HAL_DMA_Abort_IT+0xc8>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a50      	ldr	r2, [pc, #320]	; (8006cfc <HAL_DMA_Abort_IT+0x1c0>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d022      	beq.n	8006c04 <HAL_DMA_Abort_IT+0xc8>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a4f      	ldr	r2, [pc, #316]	; (8006d00 <HAL_DMA_Abort_IT+0x1c4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d01d      	beq.n	8006c04 <HAL_DMA_Abort_IT+0xc8>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a4d      	ldr	r2, [pc, #308]	; (8006d04 <HAL_DMA_Abort_IT+0x1c8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d018      	beq.n	8006c04 <HAL_DMA_Abort_IT+0xc8>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a4c      	ldr	r2, [pc, #304]	; (8006d08 <HAL_DMA_Abort_IT+0x1cc>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d013      	beq.n	8006c04 <HAL_DMA_Abort_IT+0xc8>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a4a      	ldr	r2, [pc, #296]	; (8006d0c <HAL_DMA_Abort_IT+0x1d0>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d00e      	beq.n	8006c04 <HAL_DMA_Abort_IT+0xc8>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a49      	ldr	r2, [pc, #292]	; (8006d10 <HAL_DMA_Abort_IT+0x1d4>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d009      	beq.n	8006c04 <HAL_DMA_Abort_IT+0xc8>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a47      	ldr	r2, [pc, #284]	; (8006d14 <HAL_DMA_Abort_IT+0x1d8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d004      	beq.n	8006c04 <HAL_DMA_Abort_IT+0xc8>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a46      	ldr	r2, [pc, #280]	; (8006d18 <HAL_DMA_Abort_IT+0x1dc>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d101      	bne.n	8006c08 <HAL_DMA_Abort_IT+0xcc>
 8006c04:	2301      	movs	r3, #1
 8006c06:	e000      	b.n	8006c0a <HAL_DMA_Abort_IT+0xce>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 8086 	beq.w	8006d1c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2204      	movs	r2, #4
 8006c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a2f      	ldr	r2, [pc, #188]	; (8006cdc <HAL_DMA_Abort_IT+0x1a0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d04a      	beq.n	8006cb8 <HAL_DMA_Abort_IT+0x17c>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a2e      	ldr	r2, [pc, #184]	; (8006ce0 <HAL_DMA_Abort_IT+0x1a4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d045      	beq.n	8006cb8 <HAL_DMA_Abort_IT+0x17c>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a2c      	ldr	r2, [pc, #176]	; (8006ce4 <HAL_DMA_Abort_IT+0x1a8>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d040      	beq.n	8006cb8 <HAL_DMA_Abort_IT+0x17c>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a2b      	ldr	r2, [pc, #172]	; (8006ce8 <HAL_DMA_Abort_IT+0x1ac>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d03b      	beq.n	8006cb8 <HAL_DMA_Abort_IT+0x17c>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a29      	ldr	r2, [pc, #164]	; (8006cec <HAL_DMA_Abort_IT+0x1b0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d036      	beq.n	8006cb8 <HAL_DMA_Abort_IT+0x17c>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a28      	ldr	r2, [pc, #160]	; (8006cf0 <HAL_DMA_Abort_IT+0x1b4>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d031      	beq.n	8006cb8 <HAL_DMA_Abort_IT+0x17c>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a26      	ldr	r2, [pc, #152]	; (8006cf4 <HAL_DMA_Abort_IT+0x1b8>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d02c      	beq.n	8006cb8 <HAL_DMA_Abort_IT+0x17c>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a25      	ldr	r2, [pc, #148]	; (8006cf8 <HAL_DMA_Abort_IT+0x1bc>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d027      	beq.n	8006cb8 <HAL_DMA_Abort_IT+0x17c>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a23      	ldr	r2, [pc, #140]	; (8006cfc <HAL_DMA_Abort_IT+0x1c0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d022      	beq.n	8006cb8 <HAL_DMA_Abort_IT+0x17c>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a22      	ldr	r2, [pc, #136]	; (8006d00 <HAL_DMA_Abort_IT+0x1c4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d01d      	beq.n	8006cb8 <HAL_DMA_Abort_IT+0x17c>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a20      	ldr	r2, [pc, #128]	; (8006d04 <HAL_DMA_Abort_IT+0x1c8>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d018      	beq.n	8006cb8 <HAL_DMA_Abort_IT+0x17c>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a1f      	ldr	r2, [pc, #124]	; (8006d08 <HAL_DMA_Abort_IT+0x1cc>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d013      	beq.n	8006cb8 <HAL_DMA_Abort_IT+0x17c>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a1d      	ldr	r2, [pc, #116]	; (8006d0c <HAL_DMA_Abort_IT+0x1d0>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00e      	beq.n	8006cb8 <HAL_DMA_Abort_IT+0x17c>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a1c      	ldr	r2, [pc, #112]	; (8006d10 <HAL_DMA_Abort_IT+0x1d4>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d009      	beq.n	8006cb8 <HAL_DMA_Abort_IT+0x17c>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a1a      	ldr	r2, [pc, #104]	; (8006d14 <HAL_DMA_Abort_IT+0x1d8>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d004      	beq.n	8006cb8 <HAL_DMA_Abort_IT+0x17c>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a19      	ldr	r2, [pc, #100]	; (8006d18 <HAL_DMA_Abort_IT+0x1dc>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d108      	bne.n	8006cca <HAL_DMA_Abort_IT+0x18e>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 0201 	bic.w	r2, r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	e178      	b.n	8006fbc <HAL_DMA_Abort_IT+0x480>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0201 	bic.w	r2, r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	e16f      	b.n	8006fbc <HAL_DMA_Abort_IT+0x480>
 8006cdc:	40020010 	.word	0x40020010
 8006ce0:	40020028 	.word	0x40020028
 8006ce4:	40020040 	.word	0x40020040
 8006ce8:	40020058 	.word	0x40020058
 8006cec:	40020070 	.word	0x40020070
 8006cf0:	40020088 	.word	0x40020088
 8006cf4:	400200a0 	.word	0x400200a0
 8006cf8:	400200b8 	.word	0x400200b8
 8006cfc:	40020410 	.word	0x40020410
 8006d00:	40020428 	.word	0x40020428
 8006d04:	40020440 	.word	0x40020440
 8006d08:	40020458 	.word	0x40020458
 8006d0c:	40020470 	.word	0x40020470
 8006d10:	40020488 	.word	0x40020488
 8006d14:	400204a0 	.word	0x400204a0
 8006d18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 020e 	bic.w	r2, r2, #14
 8006d2a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a6c      	ldr	r2, [pc, #432]	; (8006ee4 <HAL_DMA_Abort_IT+0x3a8>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d04a      	beq.n	8006dcc <HAL_DMA_Abort_IT+0x290>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a6b      	ldr	r2, [pc, #428]	; (8006ee8 <HAL_DMA_Abort_IT+0x3ac>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d045      	beq.n	8006dcc <HAL_DMA_Abort_IT+0x290>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a69      	ldr	r2, [pc, #420]	; (8006eec <HAL_DMA_Abort_IT+0x3b0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d040      	beq.n	8006dcc <HAL_DMA_Abort_IT+0x290>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a68      	ldr	r2, [pc, #416]	; (8006ef0 <HAL_DMA_Abort_IT+0x3b4>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d03b      	beq.n	8006dcc <HAL_DMA_Abort_IT+0x290>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a66      	ldr	r2, [pc, #408]	; (8006ef4 <HAL_DMA_Abort_IT+0x3b8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d036      	beq.n	8006dcc <HAL_DMA_Abort_IT+0x290>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a65      	ldr	r2, [pc, #404]	; (8006ef8 <HAL_DMA_Abort_IT+0x3bc>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d031      	beq.n	8006dcc <HAL_DMA_Abort_IT+0x290>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a63      	ldr	r2, [pc, #396]	; (8006efc <HAL_DMA_Abort_IT+0x3c0>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d02c      	beq.n	8006dcc <HAL_DMA_Abort_IT+0x290>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a62      	ldr	r2, [pc, #392]	; (8006f00 <HAL_DMA_Abort_IT+0x3c4>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d027      	beq.n	8006dcc <HAL_DMA_Abort_IT+0x290>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a60      	ldr	r2, [pc, #384]	; (8006f04 <HAL_DMA_Abort_IT+0x3c8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d022      	beq.n	8006dcc <HAL_DMA_Abort_IT+0x290>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a5f      	ldr	r2, [pc, #380]	; (8006f08 <HAL_DMA_Abort_IT+0x3cc>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d01d      	beq.n	8006dcc <HAL_DMA_Abort_IT+0x290>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a5d      	ldr	r2, [pc, #372]	; (8006f0c <HAL_DMA_Abort_IT+0x3d0>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d018      	beq.n	8006dcc <HAL_DMA_Abort_IT+0x290>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a5c      	ldr	r2, [pc, #368]	; (8006f10 <HAL_DMA_Abort_IT+0x3d4>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d013      	beq.n	8006dcc <HAL_DMA_Abort_IT+0x290>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a5a      	ldr	r2, [pc, #360]	; (8006f14 <HAL_DMA_Abort_IT+0x3d8>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d00e      	beq.n	8006dcc <HAL_DMA_Abort_IT+0x290>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a59      	ldr	r2, [pc, #356]	; (8006f18 <HAL_DMA_Abort_IT+0x3dc>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d009      	beq.n	8006dcc <HAL_DMA_Abort_IT+0x290>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a57      	ldr	r2, [pc, #348]	; (8006f1c <HAL_DMA_Abort_IT+0x3e0>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d004      	beq.n	8006dcc <HAL_DMA_Abort_IT+0x290>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a56      	ldr	r2, [pc, #344]	; (8006f20 <HAL_DMA_Abort_IT+0x3e4>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d108      	bne.n	8006dde <HAL_DMA_Abort_IT+0x2a2>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0201 	bic.w	r2, r2, #1
 8006dda:	601a      	str	r2, [r3, #0]
 8006ddc:	e007      	b.n	8006dee <HAL_DMA_Abort_IT+0x2b2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0201 	bic.w	r2, r2, #1
 8006dec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a3c      	ldr	r2, [pc, #240]	; (8006ee4 <HAL_DMA_Abort_IT+0x3a8>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d072      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a3a      	ldr	r2, [pc, #232]	; (8006ee8 <HAL_DMA_Abort_IT+0x3ac>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d06d      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a39      	ldr	r2, [pc, #228]	; (8006eec <HAL_DMA_Abort_IT+0x3b0>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d068      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a37      	ldr	r2, [pc, #220]	; (8006ef0 <HAL_DMA_Abort_IT+0x3b4>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d063      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a36      	ldr	r2, [pc, #216]	; (8006ef4 <HAL_DMA_Abort_IT+0x3b8>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d05e      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a34      	ldr	r2, [pc, #208]	; (8006ef8 <HAL_DMA_Abort_IT+0x3bc>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d059      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a33      	ldr	r2, [pc, #204]	; (8006efc <HAL_DMA_Abort_IT+0x3c0>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d054      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a31      	ldr	r2, [pc, #196]	; (8006f00 <HAL_DMA_Abort_IT+0x3c4>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d04f      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a30      	ldr	r2, [pc, #192]	; (8006f04 <HAL_DMA_Abort_IT+0x3c8>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d04a      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a2e      	ldr	r2, [pc, #184]	; (8006f08 <HAL_DMA_Abort_IT+0x3cc>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d045      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a2d      	ldr	r2, [pc, #180]	; (8006f0c <HAL_DMA_Abort_IT+0x3d0>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d040      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a2b      	ldr	r2, [pc, #172]	; (8006f10 <HAL_DMA_Abort_IT+0x3d4>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d03b      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a2a      	ldr	r2, [pc, #168]	; (8006f14 <HAL_DMA_Abort_IT+0x3d8>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d036      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a28      	ldr	r2, [pc, #160]	; (8006f18 <HAL_DMA_Abort_IT+0x3dc>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d031      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a27      	ldr	r2, [pc, #156]	; (8006f1c <HAL_DMA_Abort_IT+0x3e0>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d02c      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a25      	ldr	r2, [pc, #148]	; (8006f20 <HAL_DMA_Abort_IT+0x3e4>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d027      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a24      	ldr	r2, [pc, #144]	; (8006f24 <HAL_DMA_Abort_IT+0x3e8>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d022      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a22      	ldr	r2, [pc, #136]	; (8006f28 <HAL_DMA_Abort_IT+0x3ec>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d01d      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a21      	ldr	r2, [pc, #132]	; (8006f2c <HAL_DMA_Abort_IT+0x3f0>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d018      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a1f      	ldr	r2, [pc, #124]	; (8006f30 <HAL_DMA_Abort_IT+0x3f4>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d013      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a1e      	ldr	r2, [pc, #120]	; (8006f34 <HAL_DMA_Abort_IT+0x3f8>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00e      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a1c      	ldr	r2, [pc, #112]	; (8006f38 <HAL_DMA_Abort_IT+0x3fc>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d009      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a1b      	ldr	r2, [pc, #108]	; (8006f3c <HAL_DMA_Abort_IT+0x400>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d004      	beq.n	8006ede <HAL_DMA_Abort_IT+0x3a2>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a19      	ldr	r2, [pc, #100]	; (8006f40 <HAL_DMA_Abort_IT+0x404>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d132      	bne.n	8006f44 <HAL_DMA_Abort_IT+0x408>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e031      	b.n	8006f46 <HAL_DMA_Abort_IT+0x40a>
 8006ee2:	bf00      	nop
 8006ee4:	40020010 	.word	0x40020010
 8006ee8:	40020028 	.word	0x40020028
 8006eec:	40020040 	.word	0x40020040
 8006ef0:	40020058 	.word	0x40020058
 8006ef4:	40020070 	.word	0x40020070
 8006ef8:	40020088 	.word	0x40020088
 8006efc:	400200a0 	.word	0x400200a0
 8006f00:	400200b8 	.word	0x400200b8
 8006f04:	40020410 	.word	0x40020410
 8006f08:	40020428 	.word	0x40020428
 8006f0c:	40020440 	.word	0x40020440
 8006f10:	40020458 	.word	0x40020458
 8006f14:	40020470 	.word	0x40020470
 8006f18:	40020488 	.word	0x40020488
 8006f1c:	400204a0 	.word	0x400204a0
 8006f20:	400204b8 	.word	0x400204b8
 8006f24:	58025408 	.word	0x58025408
 8006f28:	5802541c 	.word	0x5802541c
 8006f2c:	58025430 	.word	0x58025430
 8006f30:	58025444 	.word	0x58025444
 8006f34:	58025458 	.word	0x58025458
 8006f38:	5802546c 	.word	0x5802546c
 8006f3c:	58025480 	.word	0x58025480
 8006f40:	58025494 	.word	0x58025494
 8006f44:	2300      	movs	r3, #0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d028      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f58:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f5e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f64:	f003 031f 	and.w	r3, r3, #31
 8006f68:	2201      	movs	r2, #1
 8006f6a:	409a      	lsls	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f78:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00c      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f90:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f9a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop

08006fc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08a      	sub	sp, #40	; 0x28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006fd4:	4b67      	ldr	r3, [pc, #412]	; (8007174 <HAL_DMA_IRQHandler+0x1ac>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a67      	ldr	r2, [pc, #412]	; (8007178 <HAL_DMA_IRQHandler+0x1b0>)
 8006fda:	fba2 2303 	umull	r2, r3, r2, r3
 8006fde:	0a9b      	lsrs	r3, r3, #10
 8006fe0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a5f      	ldr	r2, [pc, #380]	; (800717c <HAL_DMA_IRQHandler+0x1b4>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d04a      	beq.n	800709a <HAL_DMA_IRQHandler+0xd2>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a5d      	ldr	r2, [pc, #372]	; (8007180 <HAL_DMA_IRQHandler+0x1b8>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d045      	beq.n	800709a <HAL_DMA_IRQHandler+0xd2>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a5c      	ldr	r2, [pc, #368]	; (8007184 <HAL_DMA_IRQHandler+0x1bc>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d040      	beq.n	800709a <HAL_DMA_IRQHandler+0xd2>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a5a      	ldr	r2, [pc, #360]	; (8007188 <HAL_DMA_IRQHandler+0x1c0>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d03b      	beq.n	800709a <HAL_DMA_IRQHandler+0xd2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a59      	ldr	r2, [pc, #356]	; (800718c <HAL_DMA_IRQHandler+0x1c4>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d036      	beq.n	800709a <HAL_DMA_IRQHandler+0xd2>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a57      	ldr	r2, [pc, #348]	; (8007190 <HAL_DMA_IRQHandler+0x1c8>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d031      	beq.n	800709a <HAL_DMA_IRQHandler+0xd2>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a56      	ldr	r2, [pc, #344]	; (8007194 <HAL_DMA_IRQHandler+0x1cc>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d02c      	beq.n	800709a <HAL_DMA_IRQHandler+0xd2>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a54      	ldr	r2, [pc, #336]	; (8007198 <HAL_DMA_IRQHandler+0x1d0>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d027      	beq.n	800709a <HAL_DMA_IRQHandler+0xd2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a53      	ldr	r2, [pc, #332]	; (800719c <HAL_DMA_IRQHandler+0x1d4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d022      	beq.n	800709a <HAL_DMA_IRQHandler+0xd2>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a51      	ldr	r2, [pc, #324]	; (80071a0 <HAL_DMA_IRQHandler+0x1d8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d01d      	beq.n	800709a <HAL_DMA_IRQHandler+0xd2>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a50      	ldr	r2, [pc, #320]	; (80071a4 <HAL_DMA_IRQHandler+0x1dc>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d018      	beq.n	800709a <HAL_DMA_IRQHandler+0xd2>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a4e      	ldr	r2, [pc, #312]	; (80071a8 <HAL_DMA_IRQHandler+0x1e0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d013      	beq.n	800709a <HAL_DMA_IRQHandler+0xd2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a4d      	ldr	r2, [pc, #308]	; (80071ac <HAL_DMA_IRQHandler+0x1e4>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00e      	beq.n	800709a <HAL_DMA_IRQHandler+0xd2>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a4b      	ldr	r2, [pc, #300]	; (80071b0 <HAL_DMA_IRQHandler+0x1e8>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d009      	beq.n	800709a <HAL_DMA_IRQHandler+0xd2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a4a      	ldr	r2, [pc, #296]	; (80071b4 <HAL_DMA_IRQHandler+0x1ec>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d004      	beq.n	800709a <HAL_DMA_IRQHandler+0xd2>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a48      	ldr	r2, [pc, #288]	; (80071b8 <HAL_DMA_IRQHandler+0x1f0>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d101      	bne.n	800709e <HAL_DMA_IRQHandler+0xd6>
 800709a:	2301      	movs	r3, #1
 800709c:	e000      	b.n	80070a0 <HAL_DMA_IRQHandler+0xd8>
 800709e:	2300      	movs	r3, #0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f000 842b 	beq.w	80078fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070aa:	f003 031f 	and.w	r3, r3, #31
 80070ae:	2208      	movs	r2, #8
 80070b0:	409a      	lsls	r2, r3
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	4013      	ands	r3, r2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 80a2 	beq.w	8007200 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a2e      	ldr	r2, [pc, #184]	; (800717c <HAL_DMA_IRQHandler+0x1b4>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d04a      	beq.n	800715c <HAL_DMA_IRQHandler+0x194>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a2d      	ldr	r2, [pc, #180]	; (8007180 <HAL_DMA_IRQHandler+0x1b8>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d045      	beq.n	800715c <HAL_DMA_IRQHandler+0x194>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a2b      	ldr	r2, [pc, #172]	; (8007184 <HAL_DMA_IRQHandler+0x1bc>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d040      	beq.n	800715c <HAL_DMA_IRQHandler+0x194>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a2a      	ldr	r2, [pc, #168]	; (8007188 <HAL_DMA_IRQHandler+0x1c0>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d03b      	beq.n	800715c <HAL_DMA_IRQHandler+0x194>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a28      	ldr	r2, [pc, #160]	; (800718c <HAL_DMA_IRQHandler+0x1c4>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d036      	beq.n	800715c <HAL_DMA_IRQHandler+0x194>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a27      	ldr	r2, [pc, #156]	; (8007190 <HAL_DMA_IRQHandler+0x1c8>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d031      	beq.n	800715c <HAL_DMA_IRQHandler+0x194>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a25      	ldr	r2, [pc, #148]	; (8007194 <HAL_DMA_IRQHandler+0x1cc>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d02c      	beq.n	800715c <HAL_DMA_IRQHandler+0x194>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a24      	ldr	r2, [pc, #144]	; (8007198 <HAL_DMA_IRQHandler+0x1d0>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d027      	beq.n	800715c <HAL_DMA_IRQHandler+0x194>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a22      	ldr	r2, [pc, #136]	; (800719c <HAL_DMA_IRQHandler+0x1d4>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d022      	beq.n	800715c <HAL_DMA_IRQHandler+0x194>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a21      	ldr	r2, [pc, #132]	; (80071a0 <HAL_DMA_IRQHandler+0x1d8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d01d      	beq.n	800715c <HAL_DMA_IRQHandler+0x194>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a1f      	ldr	r2, [pc, #124]	; (80071a4 <HAL_DMA_IRQHandler+0x1dc>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d018      	beq.n	800715c <HAL_DMA_IRQHandler+0x194>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a1e      	ldr	r2, [pc, #120]	; (80071a8 <HAL_DMA_IRQHandler+0x1e0>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d013      	beq.n	800715c <HAL_DMA_IRQHandler+0x194>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a1c      	ldr	r2, [pc, #112]	; (80071ac <HAL_DMA_IRQHandler+0x1e4>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00e      	beq.n	800715c <HAL_DMA_IRQHandler+0x194>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a1b      	ldr	r2, [pc, #108]	; (80071b0 <HAL_DMA_IRQHandler+0x1e8>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d009      	beq.n	800715c <HAL_DMA_IRQHandler+0x194>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a19      	ldr	r2, [pc, #100]	; (80071b4 <HAL_DMA_IRQHandler+0x1ec>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d004      	beq.n	800715c <HAL_DMA_IRQHandler+0x194>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a18      	ldr	r2, [pc, #96]	; (80071b8 <HAL_DMA_IRQHandler+0x1f0>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d12f      	bne.n	80071bc <HAL_DMA_IRQHandler+0x1f4>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0304 	and.w	r3, r3, #4
 8007166:	2b00      	cmp	r3, #0
 8007168:	bf14      	ite	ne
 800716a:	2301      	movne	r3, #1
 800716c:	2300      	moveq	r3, #0
 800716e:	b2db      	uxtb	r3, r3
 8007170:	e02e      	b.n	80071d0 <HAL_DMA_IRQHandler+0x208>
 8007172:	bf00      	nop
 8007174:	24000000 	.word	0x24000000
 8007178:	1b4e81b5 	.word	0x1b4e81b5
 800717c:	40020010 	.word	0x40020010
 8007180:	40020028 	.word	0x40020028
 8007184:	40020040 	.word	0x40020040
 8007188:	40020058 	.word	0x40020058
 800718c:	40020070 	.word	0x40020070
 8007190:	40020088 	.word	0x40020088
 8007194:	400200a0 	.word	0x400200a0
 8007198:	400200b8 	.word	0x400200b8
 800719c:	40020410 	.word	0x40020410
 80071a0:	40020428 	.word	0x40020428
 80071a4:	40020440 	.word	0x40020440
 80071a8:	40020458 	.word	0x40020458
 80071ac:	40020470 	.word	0x40020470
 80071b0:	40020488 	.word	0x40020488
 80071b4:	400204a0 	.word	0x400204a0
 80071b8:	400204b8 	.word	0x400204b8
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	bf14      	ite	ne
 80071ca:	2301      	movne	r3, #1
 80071cc:	2300      	moveq	r3, #0
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d015      	beq.n	8007200 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0204 	bic.w	r2, r2, #4
 80071e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071e8:	f003 031f 	and.w	r3, r3, #31
 80071ec:	2208      	movs	r2, #8
 80071ee:	409a      	lsls	r2, r3
 80071f0:	6a3b      	ldr	r3, [r7, #32]
 80071f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f8:	f043 0201 	orr.w	r2, r3, #1
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007204:	f003 031f 	and.w	r3, r3, #31
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	fa22 f303 	lsr.w	r3, r2, r3
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	d06e      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a69      	ldr	r2, [pc, #420]	; (80073c0 <HAL_DMA_IRQHandler+0x3f8>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d04a      	beq.n	80072b6 <HAL_DMA_IRQHandler+0x2ee>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a67      	ldr	r2, [pc, #412]	; (80073c4 <HAL_DMA_IRQHandler+0x3fc>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d045      	beq.n	80072b6 <HAL_DMA_IRQHandler+0x2ee>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a66      	ldr	r2, [pc, #408]	; (80073c8 <HAL_DMA_IRQHandler+0x400>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d040      	beq.n	80072b6 <HAL_DMA_IRQHandler+0x2ee>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a64      	ldr	r2, [pc, #400]	; (80073cc <HAL_DMA_IRQHandler+0x404>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d03b      	beq.n	80072b6 <HAL_DMA_IRQHandler+0x2ee>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a63      	ldr	r2, [pc, #396]	; (80073d0 <HAL_DMA_IRQHandler+0x408>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d036      	beq.n	80072b6 <HAL_DMA_IRQHandler+0x2ee>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a61      	ldr	r2, [pc, #388]	; (80073d4 <HAL_DMA_IRQHandler+0x40c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d031      	beq.n	80072b6 <HAL_DMA_IRQHandler+0x2ee>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a60      	ldr	r2, [pc, #384]	; (80073d8 <HAL_DMA_IRQHandler+0x410>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d02c      	beq.n	80072b6 <HAL_DMA_IRQHandler+0x2ee>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a5e      	ldr	r2, [pc, #376]	; (80073dc <HAL_DMA_IRQHandler+0x414>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d027      	beq.n	80072b6 <HAL_DMA_IRQHandler+0x2ee>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a5d      	ldr	r2, [pc, #372]	; (80073e0 <HAL_DMA_IRQHandler+0x418>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d022      	beq.n	80072b6 <HAL_DMA_IRQHandler+0x2ee>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a5b      	ldr	r2, [pc, #364]	; (80073e4 <HAL_DMA_IRQHandler+0x41c>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d01d      	beq.n	80072b6 <HAL_DMA_IRQHandler+0x2ee>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a5a      	ldr	r2, [pc, #360]	; (80073e8 <HAL_DMA_IRQHandler+0x420>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d018      	beq.n	80072b6 <HAL_DMA_IRQHandler+0x2ee>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a58      	ldr	r2, [pc, #352]	; (80073ec <HAL_DMA_IRQHandler+0x424>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d013      	beq.n	80072b6 <HAL_DMA_IRQHandler+0x2ee>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a57      	ldr	r2, [pc, #348]	; (80073f0 <HAL_DMA_IRQHandler+0x428>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00e      	beq.n	80072b6 <HAL_DMA_IRQHandler+0x2ee>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a55      	ldr	r2, [pc, #340]	; (80073f4 <HAL_DMA_IRQHandler+0x42c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d009      	beq.n	80072b6 <HAL_DMA_IRQHandler+0x2ee>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a54      	ldr	r2, [pc, #336]	; (80073f8 <HAL_DMA_IRQHandler+0x430>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d004      	beq.n	80072b6 <HAL_DMA_IRQHandler+0x2ee>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a52      	ldr	r2, [pc, #328]	; (80073fc <HAL_DMA_IRQHandler+0x434>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d10a      	bne.n	80072cc <HAL_DMA_IRQHandler+0x304>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	bf14      	ite	ne
 80072c4:	2301      	movne	r3, #1
 80072c6:	2300      	moveq	r3, #0
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	e003      	b.n	80072d4 <HAL_DMA_IRQHandler+0x30c>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2300      	movs	r3, #0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00d      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072dc:	f003 031f 	and.w	r3, r3, #31
 80072e0:	2201      	movs	r2, #1
 80072e2:	409a      	lsls	r2, r3
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ec:	f043 0202 	orr.w	r2, r3, #2
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f8:	f003 031f 	and.w	r3, r3, #31
 80072fc:	2204      	movs	r2, #4
 80072fe:	409a      	lsls	r2, r3
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	4013      	ands	r3, r2
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 808f 	beq.w	8007428 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a2c      	ldr	r2, [pc, #176]	; (80073c0 <HAL_DMA_IRQHandler+0x3f8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d04a      	beq.n	80073aa <HAL_DMA_IRQHandler+0x3e2>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a2a      	ldr	r2, [pc, #168]	; (80073c4 <HAL_DMA_IRQHandler+0x3fc>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d045      	beq.n	80073aa <HAL_DMA_IRQHandler+0x3e2>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a29      	ldr	r2, [pc, #164]	; (80073c8 <HAL_DMA_IRQHandler+0x400>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d040      	beq.n	80073aa <HAL_DMA_IRQHandler+0x3e2>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a27      	ldr	r2, [pc, #156]	; (80073cc <HAL_DMA_IRQHandler+0x404>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d03b      	beq.n	80073aa <HAL_DMA_IRQHandler+0x3e2>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a26      	ldr	r2, [pc, #152]	; (80073d0 <HAL_DMA_IRQHandler+0x408>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d036      	beq.n	80073aa <HAL_DMA_IRQHandler+0x3e2>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a24      	ldr	r2, [pc, #144]	; (80073d4 <HAL_DMA_IRQHandler+0x40c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d031      	beq.n	80073aa <HAL_DMA_IRQHandler+0x3e2>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a23      	ldr	r2, [pc, #140]	; (80073d8 <HAL_DMA_IRQHandler+0x410>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d02c      	beq.n	80073aa <HAL_DMA_IRQHandler+0x3e2>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a21      	ldr	r2, [pc, #132]	; (80073dc <HAL_DMA_IRQHandler+0x414>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d027      	beq.n	80073aa <HAL_DMA_IRQHandler+0x3e2>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a20      	ldr	r2, [pc, #128]	; (80073e0 <HAL_DMA_IRQHandler+0x418>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d022      	beq.n	80073aa <HAL_DMA_IRQHandler+0x3e2>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a1e      	ldr	r2, [pc, #120]	; (80073e4 <HAL_DMA_IRQHandler+0x41c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d01d      	beq.n	80073aa <HAL_DMA_IRQHandler+0x3e2>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1d      	ldr	r2, [pc, #116]	; (80073e8 <HAL_DMA_IRQHandler+0x420>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d018      	beq.n	80073aa <HAL_DMA_IRQHandler+0x3e2>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a1b      	ldr	r2, [pc, #108]	; (80073ec <HAL_DMA_IRQHandler+0x424>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d013      	beq.n	80073aa <HAL_DMA_IRQHandler+0x3e2>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a1a      	ldr	r2, [pc, #104]	; (80073f0 <HAL_DMA_IRQHandler+0x428>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00e      	beq.n	80073aa <HAL_DMA_IRQHandler+0x3e2>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a18      	ldr	r2, [pc, #96]	; (80073f4 <HAL_DMA_IRQHandler+0x42c>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d009      	beq.n	80073aa <HAL_DMA_IRQHandler+0x3e2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a17      	ldr	r2, [pc, #92]	; (80073f8 <HAL_DMA_IRQHandler+0x430>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d004      	beq.n	80073aa <HAL_DMA_IRQHandler+0x3e2>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a15      	ldr	r2, [pc, #84]	; (80073fc <HAL_DMA_IRQHandler+0x434>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d12a      	bne.n	8007400 <HAL_DMA_IRQHandler+0x438>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0302 	and.w	r3, r3, #2
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	bf14      	ite	ne
 80073b8:	2301      	movne	r3, #1
 80073ba:	2300      	moveq	r3, #0
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	e023      	b.n	8007408 <HAL_DMA_IRQHandler+0x440>
 80073c0:	40020010 	.word	0x40020010
 80073c4:	40020028 	.word	0x40020028
 80073c8:	40020040 	.word	0x40020040
 80073cc:	40020058 	.word	0x40020058
 80073d0:	40020070 	.word	0x40020070
 80073d4:	40020088 	.word	0x40020088
 80073d8:	400200a0 	.word	0x400200a0
 80073dc:	400200b8 	.word	0x400200b8
 80073e0:	40020410 	.word	0x40020410
 80073e4:	40020428 	.word	0x40020428
 80073e8:	40020440 	.word	0x40020440
 80073ec:	40020458 	.word	0x40020458
 80073f0:	40020470 	.word	0x40020470
 80073f4:	40020488 	.word	0x40020488
 80073f8:	400204a0 	.word	0x400204a0
 80073fc:	400204b8 	.word	0x400204b8
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2300      	movs	r3, #0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00d      	beq.n	8007428 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007410:	f003 031f 	and.w	r3, r3, #31
 8007414:	2204      	movs	r2, #4
 8007416:	409a      	lsls	r2, r3
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007420:	f043 0204 	orr.w	r2, r3, #4
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800742c:	f003 031f 	and.w	r3, r3, #31
 8007430:	2210      	movs	r2, #16
 8007432:	409a      	lsls	r2, r3
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	4013      	ands	r3, r2
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 80a6 	beq.w	800758a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a85      	ldr	r2, [pc, #532]	; (8007658 <HAL_DMA_IRQHandler+0x690>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d04a      	beq.n	80074de <HAL_DMA_IRQHandler+0x516>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a83      	ldr	r2, [pc, #524]	; (800765c <HAL_DMA_IRQHandler+0x694>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d045      	beq.n	80074de <HAL_DMA_IRQHandler+0x516>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a82      	ldr	r2, [pc, #520]	; (8007660 <HAL_DMA_IRQHandler+0x698>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d040      	beq.n	80074de <HAL_DMA_IRQHandler+0x516>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a80      	ldr	r2, [pc, #512]	; (8007664 <HAL_DMA_IRQHandler+0x69c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d03b      	beq.n	80074de <HAL_DMA_IRQHandler+0x516>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a7f      	ldr	r2, [pc, #508]	; (8007668 <HAL_DMA_IRQHandler+0x6a0>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d036      	beq.n	80074de <HAL_DMA_IRQHandler+0x516>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a7d      	ldr	r2, [pc, #500]	; (800766c <HAL_DMA_IRQHandler+0x6a4>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d031      	beq.n	80074de <HAL_DMA_IRQHandler+0x516>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a7c      	ldr	r2, [pc, #496]	; (8007670 <HAL_DMA_IRQHandler+0x6a8>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d02c      	beq.n	80074de <HAL_DMA_IRQHandler+0x516>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a7a      	ldr	r2, [pc, #488]	; (8007674 <HAL_DMA_IRQHandler+0x6ac>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d027      	beq.n	80074de <HAL_DMA_IRQHandler+0x516>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a79      	ldr	r2, [pc, #484]	; (8007678 <HAL_DMA_IRQHandler+0x6b0>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d022      	beq.n	80074de <HAL_DMA_IRQHandler+0x516>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a77      	ldr	r2, [pc, #476]	; (800767c <HAL_DMA_IRQHandler+0x6b4>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d01d      	beq.n	80074de <HAL_DMA_IRQHandler+0x516>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a76      	ldr	r2, [pc, #472]	; (8007680 <HAL_DMA_IRQHandler+0x6b8>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d018      	beq.n	80074de <HAL_DMA_IRQHandler+0x516>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a74      	ldr	r2, [pc, #464]	; (8007684 <HAL_DMA_IRQHandler+0x6bc>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d013      	beq.n	80074de <HAL_DMA_IRQHandler+0x516>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a73      	ldr	r2, [pc, #460]	; (8007688 <HAL_DMA_IRQHandler+0x6c0>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00e      	beq.n	80074de <HAL_DMA_IRQHandler+0x516>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a71      	ldr	r2, [pc, #452]	; (800768c <HAL_DMA_IRQHandler+0x6c4>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d009      	beq.n	80074de <HAL_DMA_IRQHandler+0x516>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a70      	ldr	r2, [pc, #448]	; (8007690 <HAL_DMA_IRQHandler+0x6c8>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d004      	beq.n	80074de <HAL_DMA_IRQHandler+0x516>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a6e      	ldr	r2, [pc, #440]	; (8007694 <HAL_DMA_IRQHandler+0x6cc>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d10a      	bne.n	80074f4 <HAL_DMA_IRQHandler+0x52c>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0308 	and.w	r3, r3, #8
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	bf14      	ite	ne
 80074ec:	2301      	movne	r3, #1
 80074ee:	2300      	moveq	r3, #0
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	e009      	b.n	8007508 <HAL_DMA_IRQHandler+0x540>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0304 	and.w	r3, r3, #4
 80074fe:	2b00      	cmp	r3, #0
 8007500:	bf14      	ite	ne
 8007502:	2301      	movne	r3, #1
 8007504:	2300      	moveq	r3, #0
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d03e      	beq.n	800758a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007510:	f003 031f 	and.w	r3, r3, #31
 8007514:	2210      	movs	r2, #16
 8007516:	409a      	lsls	r2, r3
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d018      	beq.n	800755c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d108      	bne.n	800754a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753c:	2b00      	cmp	r3, #0
 800753e:	d024      	beq.n	800758a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	4798      	blx	r3
 8007548:	e01f      	b.n	800758a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800754e:	2b00      	cmp	r3, #0
 8007550:	d01b      	beq.n	800758a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	4798      	blx	r3
 800755a:	e016      	b.n	800758a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007566:	2b00      	cmp	r3, #0
 8007568:	d107      	bne.n	800757a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 0208 	bic.w	r2, r2, #8
 8007578:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800758e:	f003 031f 	and.w	r3, r3, #31
 8007592:	2220      	movs	r2, #32
 8007594:	409a      	lsls	r2, r3
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	4013      	ands	r3, r2
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 8110 	beq.w	80077c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a2c      	ldr	r2, [pc, #176]	; (8007658 <HAL_DMA_IRQHandler+0x690>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d04a      	beq.n	8007640 <HAL_DMA_IRQHandler+0x678>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a2b      	ldr	r2, [pc, #172]	; (800765c <HAL_DMA_IRQHandler+0x694>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d045      	beq.n	8007640 <HAL_DMA_IRQHandler+0x678>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a29      	ldr	r2, [pc, #164]	; (8007660 <HAL_DMA_IRQHandler+0x698>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d040      	beq.n	8007640 <HAL_DMA_IRQHandler+0x678>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a28      	ldr	r2, [pc, #160]	; (8007664 <HAL_DMA_IRQHandler+0x69c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d03b      	beq.n	8007640 <HAL_DMA_IRQHandler+0x678>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a26      	ldr	r2, [pc, #152]	; (8007668 <HAL_DMA_IRQHandler+0x6a0>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d036      	beq.n	8007640 <HAL_DMA_IRQHandler+0x678>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a25      	ldr	r2, [pc, #148]	; (800766c <HAL_DMA_IRQHandler+0x6a4>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d031      	beq.n	8007640 <HAL_DMA_IRQHandler+0x678>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a23      	ldr	r2, [pc, #140]	; (8007670 <HAL_DMA_IRQHandler+0x6a8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d02c      	beq.n	8007640 <HAL_DMA_IRQHandler+0x678>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a22      	ldr	r2, [pc, #136]	; (8007674 <HAL_DMA_IRQHandler+0x6ac>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d027      	beq.n	8007640 <HAL_DMA_IRQHandler+0x678>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a20      	ldr	r2, [pc, #128]	; (8007678 <HAL_DMA_IRQHandler+0x6b0>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d022      	beq.n	8007640 <HAL_DMA_IRQHandler+0x678>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a1f      	ldr	r2, [pc, #124]	; (800767c <HAL_DMA_IRQHandler+0x6b4>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d01d      	beq.n	8007640 <HAL_DMA_IRQHandler+0x678>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a1d      	ldr	r2, [pc, #116]	; (8007680 <HAL_DMA_IRQHandler+0x6b8>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d018      	beq.n	8007640 <HAL_DMA_IRQHandler+0x678>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a1c      	ldr	r2, [pc, #112]	; (8007684 <HAL_DMA_IRQHandler+0x6bc>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d013      	beq.n	8007640 <HAL_DMA_IRQHandler+0x678>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a1a      	ldr	r2, [pc, #104]	; (8007688 <HAL_DMA_IRQHandler+0x6c0>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d00e      	beq.n	8007640 <HAL_DMA_IRQHandler+0x678>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a19      	ldr	r2, [pc, #100]	; (800768c <HAL_DMA_IRQHandler+0x6c4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d009      	beq.n	8007640 <HAL_DMA_IRQHandler+0x678>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a17      	ldr	r2, [pc, #92]	; (8007690 <HAL_DMA_IRQHandler+0x6c8>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d004      	beq.n	8007640 <HAL_DMA_IRQHandler+0x678>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a16      	ldr	r2, [pc, #88]	; (8007694 <HAL_DMA_IRQHandler+0x6cc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d12b      	bne.n	8007698 <HAL_DMA_IRQHandler+0x6d0>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0310 	and.w	r3, r3, #16
 800764a:	2b00      	cmp	r3, #0
 800764c:	bf14      	ite	ne
 800764e:	2301      	movne	r3, #1
 8007650:	2300      	moveq	r3, #0
 8007652:	b2db      	uxtb	r3, r3
 8007654:	e02a      	b.n	80076ac <HAL_DMA_IRQHandler+0x6e4>
 8007656:	bf00      	nop
 8007658:	40020010 	.word	0x40020010
 800765c:	40020028 	.word	0x40020028
 8007660:	40020040 	.word	0x40020040
 8007664:	40020058 	.word	0x40020058
 8007668:	40020070 	.word	0x40020070
 800766c:	40020088 	.word	0x40020088
 8007670:	400200a0 	.word	0x400200a0
 8007674:	400200b8 	.word	0x400200b8
 8007678:	40020410 	.word	0x40020410
 800767c:	40020428 	.word	0x40020428
 8007680:	40020440 	.word	0x40020440
 8007684:	40020458 	.word	0x40020458
 8007688:	40020470 	.word	0x40020470
 800768c:	40020488 	.word	0x40020488
 8007690:	400204a0 	.word	0x400204a0
 8007694:	400204b8 	.word	0x400204b8
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0302 	and.w	r3, r3, #2
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	bf14      	ite	ne
 80076a6:	2301      	movne	r3, #1
 80076a8:	2300      	moveq	r3, #0
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 8087 	beq.w	80077c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076b6:	f003 031f 	and.w	r3, r3, #31
 80076ba:	2220      	movs	r2, #32
 80076bc:	409a      	lsls	r2, r3
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	d139      	bne.n	8007742 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 0216 	bic.w	r2, r2, #22
 80076dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	695a      	ldr	r2, [r3, #20]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d103      	bne.n	80076fe <HAL_DMA_IRQHandler+0x736>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d007      	beq.n	800770e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f022 0208 	bic.w	r2, r2, #8
 800770c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007712:	f003 031f 	and.w	r3, r3, #31
 8007716:	223f      	movs	r2, #63	; 0x3f
 8007718:	409a      	lsls	r2, r3
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007732:	2b00      	cmp	r3, #0
 8007734:	f000 834a 	beq.w	8007dcc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	4798      	blx	r3
          }
          return;
 8007740:	e344      	b.n	8007dcc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d018      	beq.n	8007782 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d108      	bne.n	8007770 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007762:	2b00      	cmp	r3, #0
 8007764:	d02c      	beq.n	80077c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	4798      	blx	r3
 800776e:	e027      	b.n	80077c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007774:	2b00      	cmp	r3, #0
 8007776:	d023      	beq.n	80077c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	4798      	blx	r3
 8007780:	e01e      	b.n	80077c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10f      	bne.n	80077b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 0210 	bic.w	r2, r2, #16
 800779e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 8306 	beq.w	8007dd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f000 8088 	beq.w	80078e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2204      	movs	r2, #4
 80077dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a7a      	ldr	r2, [pc, #488]	; (80079d0 <HAL_DMA_IRQHandler+0xa08>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d04a      	beq.n	8007880 <HAL_DMA_IRQHandler+0x8b8>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a79      	ldr	r2, [pc, #484]	; (80079d4 <HAL_DMA_IRQHandler+0xa0c>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d045      	beq.n	8007880 <HAL_DMA_IRQHandler+0x8b8>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a77      	ldr	r2, [pc, #476]	; (80079d8 <HAL_DMA_IRQHandler+0xa10>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d040      	beq.n	8007880 <HAL_DMA_IRQHandler+0x8b8>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a76      	ldr	r2, [pc, #472]	; (80079dc <HAL_DMA_IRQHandler+0xa14>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d03b      	beq.n	8007880 <HAL_DMA_IRQHandler+0x8b8>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a74      	ldr	r2, [pc, #464]	; (80079e0 <HAL_DMA_IRQHandler+0xa18>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d036      	beq.n	8007880 <HAL_DMA_IRQHandler+0x8b8>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a73      	ldr	r2, [pc, #460]	; (80079e4 <HAL_DMA_IRQHandler+0xa1c>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d031      	beq.n	8007880 <HAL_DMA_IRQHandler+0x8b8>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a71      	ldr	r2, [pc, #452]	; (80079e8 <HAL_DMA_IRQHandler+0xa20>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d02c      	beq.n	8007880 <HAL_DMA_IRQHandler+0x8b8>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a70      	ldr	r2, [pc, #448]	; (80079ec <HAL_DMA_IRQHandler+0xa24>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d027      	beq.n	8007880 <HAL_DMA_IRQHandler+0x8b8>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a6e      	ldr	r2, [pc, #440]	; (80079f0 <HAL_DMA_IRQHandler+0xa28>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d022      	beq.n	8007880 <HAL_DMA_IRQHandler+0x8b8>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a6d      	ldr	r2, [pc, #436]	; (80079f4 <HAL_DMA_IRQHandler+0xa2c>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d01d      	beq.n	8007880 <HAL_DMA_IRQHandler+0x8b8>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a6b      	ldr	r2, [pc, #428]	; (80079f8 <HAL_DMA_IRQHandler+0xa30>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d018      	beq.n	8007880 <HAL_DMA_IRQHandler+0x8b8>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a6a      	ldr	r2, [pc, #424]	; (80079fc <HAL_DMA_IRQHandler+0xa34>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d013      	beq.n	8007880 <HAL_DMA_IRQHandler+0x8b8>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a68      	ldr	r2, [pc, #416]	; (8007a00 <HAL_DMA_IRQHandler+0xa38>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d00e      	beq.n	8007880 <HAL_DMA_IRQHandler+0x8b8>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a67      	ldr	r2, [pc, #412]	; (8007a04 <HAL_DMA_IRQHandler+0xa3c>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d009      	beq.n	8007880 <HAL_DMA_IRQHandler+0x8b8>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a65      	ldr	r2, [pc, #404]	; (8007a08 <HAL_DMA_IRQHandler+0xa40>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d004      	beq.n	8007880 <HAL_DMA_IRQHandler+0x8b8>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a64      	ldr	r2, [pc, #400]	; (8007a0c <HAL_DMA_IRQHandler+0xa44>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d108      	bne.n	8007892 <HAL_DMA_IRQHandler+0x8ca>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f022 0201 	bic.w	r2, r2, #1
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	e007      	b.n	80078a2 <HAL_DMA_IRQHandler+0x8da>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f022 0201 	bic.w	r2, r2, #1
 80078a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	3301      	adds	r3, #1
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d307      	bcc.n	80078be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1f2      	bne.n	80078a2 <HAL_DMA_IRQHandler+0x8da>
 80078bc:	e000      	b.n	80078c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80078be:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d004      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2203      	movs	r2, #3
 80078d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80078d6:	e003      	b.n	80078e0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 8272 	beq.w	8007dd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	4798      	blx	r3
 80078fa:	e26c      	b.n	8007dd6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a43      	ldr	r2, [pc, #268]	; (8007a10 <HAL_DMA_IRQHandler+0xa48>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d022      	beq.n	800794c <HAL_DMA_IRQHandler+0x984>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a42      	ldr	r2, [pc, #264]	; (8007a14 <HAL_DMA_IRQHandler+0xa4c>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d01d      	beq.n	800794c <HAL_DMA_IRQHandler+0x984>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a40      	ldr	r2, [pc, #256]	; (8007a18 <HAL_DMA_IRQHandler+0xa50>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d018      	beq.n	800794c <HAL_DMA_IRQHandler+0x984>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a3f      	ldr	r2, [pc, #252]	; (8007a1c <HAL_DMA_IRQHandler+0xa54>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d013      	beq.n	800794c <HAL_DMA_IRQHandler+0x984>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a3d      	ldr	r2, [pc, #244]	; (8007a20 <HAL_DMA_IRQHandler+0xa58>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d00e      	beq.n	800794c <HAL_DMA_IRQHandler+0x984>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a3c      	ldr	r2, [pc, #240]	; (8007a24 <HAL_DMA_IRQHandler+0xa5c>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d009      	beq.n	800794c <HAL_DMA_IRQHandler+0x984>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a3a      	ldr	r2, [pc, #232]	; (8007a28 <HAL_DMA_IRQHandler+0xa60>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d004      	beq.n	800794c <HAL_DMA_IRQHandler+0x984>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a39      	ldr	r2, [pc, #228]	; (8007a2c <HAL_DMA_IRQHandler+0xa64>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d101      	bne.n	8007950 <HAL_DMA_IRQHandler+0x988>
 800794c:	2301      	movs	r3, #1
 800794e:	e000      	b.n	8007952 <HAL_DMA_IRQHandler+0x98a>
 8007950:	2300      	movs	r3, #0
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 823f 	beq.w	8007dd6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007964:	f003 031f 	and.w	r3, r3, #31
 8007968:	2204      	movs	r2, #4
 800796a:	409a      	lsls	r2, r3
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	4013      	ands	r3, r2
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 80cd 	beq.w	8007b10 <HAL_DMA_IRQHandler+0xb48>
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f003 0304 	and.w	r3, r3, #4
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 80c7 	beq.w	8007b10 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007986:	f003 031f 	and.w	r3, r3, #31
 800798a:	2204      	movs	r2, #4
 800798c:	409a      	lsls	r2, r3
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d049      	beq.n	8007a30 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d109      	bne.n	80079ba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 8210 	beq.w	8007dd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079b8:	e20a      	b.n	8007dd0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 8206 	beq.w	8007dd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079cc:	e200      	b.n	8007dd0 <HAL_DMA_IRQHandler+0xe08>
 80079ce:	bf00      	nop
 80079d0:	40020010 	.word	0x40020010
 80079d4:	40020028 	.word	0x40020028
 80079d8:	40020040 	.word	0x40020040
 80079dc:	40020058 	.word	0x40020058
 80079e0:	40020070 	.word	0x40020070
 80079e4:	40020088 	.word	0x40020088
 80079e8:	400200a0 	.word	0x400200a0
 80079ec:	400200b8 	.word	0x400200b8
 80079f0:	40020410 	.word	0x40020410
 80079f4:	40020428 	.word	0x40020428
 80079f8:	40020440 	.word	0x40020440
 80079fc:	40020458 	.word	0x40020458
 8007a00:	40020470 	.word	0x40020470
 8007a04:	40020488 	.word	0x40020488
 8007a08:	400204a0 	.word	0x400204a0
 8007a0c:	400204b8 	.word	0x400204b8
 8007a10:	58025408 	.word	0x58025408
 8007a14:	5802541c 	.word	0x5802541c
 8007a18:	58025430 	.word	0x58025430
 8007a1c:	58025444 	.word	0x58025444
 8007a20:	58025458 	.word	0x58025458
 8007a24:	5802546c 	.word	0x5802546c
 8007a28:	58025480 	.word	0x58025480
 8007a2c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d160      	bne.n	8007afc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a7f      	ldr	r2, [pc, #508]	; (8007c3c <HAL_DMA_IRQHandler+0xc74>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d04a      	beq.n	8007ada <HAL_DMA_IRQHandler+0xb12>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a7d      	ldr	r2, [pc, #500]	; (8007c40 <HAL_DMA_IRQHandler+0xc78>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d045      	beq.n	8007ada <HAL_DMA_IRQHandler+0xb12>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a7c      	ldr	r2, [pc, #496]	; (8007c44 <HAL_DMA_IRQHandler+0xc7c>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d040      	beq.n	8007ada <HAL_DMA_IRQHandler+0xb12>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a7a      	ldr	r2, [pc, #488]	; (8007c48 <HAL_DMA_IRQHandler+0xc80>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d03b      	beq.n	8007ada <HAL_DMA_IRQHandler+0xb12>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a79      	ldr	r2, [pc, #484]	; (8007c4c <HAL_DMA_IRQHandler+0xc84>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d036      	beq.n	8007ada <HAL_DMA_IRQHandler+0xb12>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a77      	ldr	r2, [pc, #476]	; (8007c50 <HAL_DMA_IRQHandler+0xc88>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d031      	beq.n	8007ada <HAL_DMA_IRQHandler+0xb12>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a76      	ldr	r2, [pc, #472]	; (8007c54 <HAL_DMA_IRQHandler+0xc8c>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d02c      	beq.n	8007ada <HAL_DMA_IRQHandler+0xb12>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a74      	ldr	r2, [pc, #464]	; (8007c58 <HAL_DMA_IRQHandler+0xc90>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d027      	beq.n	8007ada <HAL_DMA_IRQHandler+0xb12>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a73      	ldr	r2, [pc, #460]	; (8007c5c <HAL_DMA_IRQHandler+0xc94>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d022      	beq.n	8007ada <HAL_DMA_IRQHandler+0xb12>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a71      	ldr	r2, [pc, #452]	; (8007c60 <HAL_DMA_IRQHandler+0xc98>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d01d      	beq.n	8007ada <HAL_DMA_IRQHandler+0xb12>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a70      	ldr	r2, [pc, #448]	; (8007c64 <HAL_DMA_IRQHandler+0xc9c>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d018      	beq.n	8007ada <HAL_DMA_IRQHandler+0xb12>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a6e      	ldr	r2, [pc, #440]	; (8007c68 <HAL_DMA_IRQHandler+0xca0>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d013      	beq.n	8007ada <HAL_DMA_IRQHandler+0xb12>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a6d      	ldr	r2, [pc, #436]	; (8007c6c <HAL_DMA_IRQHandler+0xca4>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d00e      	beq.n	8007ada <HAL_DMA_IRQHandler+0xb12>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a6b      	ldr	r2, [pc, #428]	; (8007c70 <HAL_DMA_IRQHandler+0xca8>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d009      	beq.n	8007ada <HAL_DMA_IRQHandler+0xb12>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a6a      	ldr	r2, [pc, #424]	; (8007c74 <HAL_DMA_IRQHandler+0xcac>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d004      	beq.n	8007ada <HAL_DMA_IRQHandler+0xb12>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a68      	ldr	r2, [pc, #416]	; (8007c78 <HAL_DMA_IRQHandler+0xcb0>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d108      	bne.n	8007aec <HAL_DMA_IRQHandler+0xb24>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0208 	bic.w	r2, r2, #8
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	e007      	b.n	8007afc <HAL_DMA_IRQHandler+0xb34>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 0204 	bic.w	r2, r2, #4
 8007afa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 8165 	beq.w	8007dd0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b0e:	e15f      	b.n	8007dd0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b14:	f003 031f 	and.w	r3, r3, #31
 8007b18:	2202      	movs	r2, #2
 8007b1a:	409a      	lsls	r2, r3
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	4013      	ands	r3, r2
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 80c5 	beq.w	8007cb0 <HAL_DMA_IRQHandler+0xce8>
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	f003 0302 	and.w	r3, r3, #2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 80bf 	beq.w	8007cb0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b36:	f003 031f 	and.w	r3, r3, #31
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	409a      	lsls	r2, r3
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d018      	beq.n	8007b7e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d109      	bne.n	8007b6a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 813a 	beq.w	8007dd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b68:	e134      	b.n	8007dd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f000 8130 	beq.w	8007dd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b7c:	e12a      	b.n	8007dd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	f003 0320 	and.w	r3, r3, #32
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f040 8089 	bne.w	8007c9c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a2b      	ldr	r2, [pc, #172]	; (8007c3c <HAL_DMA_IRQHandler+0xc74>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d04a      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xc62>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a29      	ldr	r2, [pc, #164]	; (8007c40 <HAL_DMA_IRQHandler+0xc78>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d045      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xc62>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a28      	ldr	r2, [pc, #160]	; (8007c44 <HAL_DMA_IRQHandler+0xc7c>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d040      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xc62>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a26      	ldr	r2, [pc, #152]	; (8007c48 <HAL_DMA_IRQHandler+0xc80>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d03b      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xc62>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a25      	ldr	r2, [pc, #148]	; (8007c4c <HAL_DMA_IRQHandler+0xc84>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d036      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xc62>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a23      	ldr	r2, [pc, #140]	; (8007c50 <HAL_DMA_IRQHandler+0xc88>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d031      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xc62>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a22      	ldr	r2, [pc, #136]	; (8007c54 <HAL_DMA_IRQHandler+0xc8c>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d02c      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xc62>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a20      	ldr	r2, [pc, #128]	; (8007c58 <HAL_DMA_IRQHandler+0xc90>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d027      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xc62>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a1f      	ldr	r2, [pc, #124]	; (8007c5c <HAL_DMA_IRQHandler+0xc94>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d022      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xc62>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a1d      	ldr	r2, [pc, #116]	; (8007c60 <HAL_DMA_IRQHandler+0xc98>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d01d      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xc62>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a1c      	ldr	r2, [pc, #112]	; (8007c64 <HAL_DMA_IRQHandler+0xc9c>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d018      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xc62>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a1a      	ldr	r2, [pc, #104]	; (8007c68 <HAL_DMA_IRQHandler+0xca0>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d013      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xc62>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a19      	ldr	r2, [pc, #100]	; (8007c6c <HAL_DMA_IRQHandler+0xca4>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d00e      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xc62>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a17      	ldr	r2, [pc, #92]	; (8007c70 <HAL_DMA_IRQHandler+0xca8>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d009      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xc62>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a16      	ldr	r2, [pc, #88]	; (8007c74 <HAL_DMA_IRQHandler+0xcac>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d004      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xc62>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a14      	ldr	r2, [pc, #80]	; (8007c78 <HAL_DMA_IRQHandler+0xcb0>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d128      	bne.n	8007c7c <HAL_DMA_IRQHandler+0xcb4>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f022 0214 	bic.w	r2, r2, #20
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	e027      	b.n	8007c8c <HAL_DMA_IRQHandler+0xcc4>
 8007c3c:	40020010 	.word	0x40020010
 8007c40:	40020028 	.word	0x40020028
 8007c44:	40020040 	.word	0x40020040
 8007c48:	40020058 	.word	0x40020058
 8007c4c:	40020070 	.word	0x40020070
 8007c50:	40020088 	.word	0x40020088
 8007c54:	400200a0 	.word	0x400200a0
 8007c58:	400200b8 	.word	0x400200b8
 8007c5c:	40020410 	.word	0x40020410
 8007c60:	40020428 	.word	0x40020428
 8007c64:	40020440 	.word	0x40020440
 8007c68:	40020458 	.word	0x40020458
 8007c6c:	40020470 	.word	0x40020470
 8007c70:	40020488 	.word	0x40020488
 8007c74:	400204a0 	.word	0x400204a0
 8007c78:	400204b8 	.word	0x400204b8
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f022 020a 	bic.w	r2, r2, #10
 8007c8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 8097 	beq.w	8007dd4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cae:	e091      	b.n	8007dd4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cb4:	f003 031f 	and.w	r3, r3, #31
 8007cb8:	2208      	movs	r2, #8
 8007cba:	409a      	lsls	r2, r3
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 8088 	beq.w	8007dd6 <HAL_DMA_IRQHandler+0xe0e>
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	f003 0308 	and.w	r3, r3, #8
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f000 8082 	beq.w	8007dd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a41      	ldr	r2, [pc, #260]	; (8007ddc <HAL_DMA_IRQHandler+0xe14>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d04a      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xdaa>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a3f      	ldr	r2, [pc, #252]	; (8007de0 <HAL_DMA_IRQHandler+0xe18>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d045      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xdaa>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a3e      	ldr	r2, [pc, #248]	; (8007de4 <HAL_DMA_IRQHandler+0xe1c>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d040      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xdaa>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a3c      	ldr	r2, [pc, #240]	; (8007de8 <HAL_DMA_IRQHandler+0xe20>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d03b      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xdaa>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a3b      	ldr	r2, [pc, #236]	; (8007dec <HAL_DMA_IRQHandler+0xe24>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d036      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xdaa>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a39      	ldr	r2, [pc, #228]	; (8007df0 <HAL_DMA_IRQHandler+0xe28>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d031      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xdaa>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a38      	ldr	r2, [pc, #224]	; (8007df4 <HAL_DMA_IRQHandler+0xe2c>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d02c      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xdaa>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a36      	ldr	r2, [pc, #216]	; (8007df8 <HAL_DMA_IRQHandler+0xe30>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d027      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xdaa>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a35      	ldr	r2, [pc, #212]	; (8007dfc <HAL_DMA_IRQHandler+0xe34>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d022      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xdaa>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a33      	ldr	r2, [pc, #204]	; (8007e00 <HAL_DMA_IRQHandler+0xe38>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d01d      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xdaa>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a32      	ldr	r2, [pc, #200]	; (8007e04 <HAL_DMA_IRQHandler+0xe3c>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d018      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xdaa>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a30      	ldr	r2, [pc, #192]	; (8007e08 <HAL_DMA_IRQHandler+0xe40>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d013      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xdaa>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a2f      	ldr	r2, [pc, #188]	; (8007e0c <HAL_DMA_IRQHandler+0xe44>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d00e      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xdaa>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a2d      	ldr	r2, [pc, #180]	; (8007e10 <HAL_DMA_IRQHandler+0xe48>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d009      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xdaa>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a2c      	ldr	r2, [pc, #176]	; (8007e14 <HAL_DMA_IRQHandler+0xe4c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d004      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xdaa>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a2a      	ldr	r2, [pc, #168]	; (8007e18 <HAL_DMA_IRQHandler+0xe50>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d108      	bne.n	8007d84 <HAL_DMA_IRQHandler+0xdbc>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 021c 	bic.w	r2, r2, #28
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	e007      	b.n	8007d94 <HAL_DMA_IRQHandler+0xdcc>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 020e 	bic.w	r2, r2, #14
 8007d92:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d98:	f003 031f 	and.w	r3, r3, #31
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	409a      	lsls	r2, r3
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d009      	beq.n	8007dd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	4798      	blx	r3
 8007dca:	e004      	b.n	8007dd6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007dcc:	bf00      	nop
 8007dce:	e002      	b.n	8007dd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007dd0:	bf00      	nop
 8007dd2:	e000      	b.n	8007dd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007dd4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007dd6:	3728      	adds	r7, #40	; 0x28
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	40020010 	.word	0x40020010
 8007de0:	40020028 	.word	0x40020028
 8007de4:	40020040 	.word	0x40020040
 8007de8:	40020058 	.word	0x40020058
 8007dec:	40020070 	.word	0x40020070
 8007df0:	40020088 	.word	0x40020088
 8007df4:	400200a0 	.word	0x400200a0
 8007df8:	400200b8 	.word	0x400200b8
 8007dfc:	40020410 	.word	0x40020410
 8007e00:	40020428 	.word	0x40020428
 8007e04:	40020440 	.word	0x40020440
 8007e08:	40020458 	.word	0x40020458
 8007e0c:	40020470 	.word	0x40020470
 8007e10:	40020488 	.word	0x40020488
 8007e14:	400204a0 	.word	0x400204a0
 8007e18:	400204b8 	.word	0x400204b8

08007e1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e34:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a7f      	ldr	r2, [pc, #508]	; (8008038 <DMA_SetConfig+0x21c>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d072      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a7d      	ldr	r2, [pc, #500]	; (800803c <DMA_SetConfig+0x220>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d06d      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a7c      	ldr	r2, [pc, #496]	; (8008040 <DMA_SetConfig+0x224>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d068      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a7a      	ldr	r2, [pc, #488]	; (8008044 <DMA_SetConfig+0x228>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d063      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a79      	ldr	r2, [pc, #484]	; (8008048 <DMA_SetConfig+0x22c>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d05e      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a77      	ldr	r2, [pc, #476]	; (800804c <DMA_SetConfig+0x230>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d059      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a76      	ldr	r2, [pc, #472]	; (8008050 <DMA_SetConfig+0x234>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d054      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a74      	ldr	r2, [pc, #464]	; (8008054 <DMA_SetConfig+0x238>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d04f      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a73      	ldr	r2, [pc, #460]	; (8008058 <DMA_SetConfig+0x23c>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d04a      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a71      	ldr	r2, [pc, #452]	; (800805c <DMA_SetConfig+0x240>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d045      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a70      	ldr	r2, [pc, #448]	; (8008060 <DMA_SetConfig+0x244>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d040      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a6e      	ldr	r2, [pc, #440]	; (8008064 <DMA_SetConfig+0x248>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d03b      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a6d      	ldr	r2, [pc, #436]	; (8008068 <DMA_SetConfig+0x24c>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d036      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a6b      	ldr	r2, [pc, #428]	; (800806c <DMA_SetConfig+0x250>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d031      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a6a      	ldr	r2, [pc, #424]	; (8008070 <DMA_SetConfig+0x254>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d02c      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a68      	ldr	r2, [pc, #416]	; (8008074 <DMA_SetConfig+0x258>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d027      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a67      	ldr	r2, [pc, #412]	; (8008078 <DMA_SetConfig+0x25c>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d022      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a65      	ldr	r2, [pc, #404]	; (800807c <DMA_SetConfig+0x260>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d01d      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a64      	ldr	r2, [pc, #400]	; (8008080 <DMA_SetConfig+0x264>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d018      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a62      	ldr	r2, [pc, #392]	; (8008084 <DMA_SetConfig+0x268>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d013      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a61      	ldr	r2, [pc, #388]	; (8008088 <DMA_SetConfig+0x26c>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00e      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a5f      	ldr	r2, [pc, #380]	; (800808c <DMA_SetConfig+0x270>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d009      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a5e      	ldr	r2, [pc, #376]	; (8008090 <DMA_SetConfig+0x274>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d004      	beq.n	8007f26 <DMA_SetConfig+0x10a>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a5c      	ldr	r2, [pc, #368]	; (8008094 <DMA_SetConfig+0x278>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d101      	bne.n	8007f2a <DMA_SetConfig+0x10e>
 8007f26:	2301      	movs	r3, #1
 8007f28:	e000      	b.n	8007f2c <DMA_SetConfig+0x110>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00d      	beq.n	8007f4c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007f38:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d004      	beq.n	8007f4c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007f4a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a39      	ldr	r2, [pc, #228]	; (8008038 <DMA_SetConfig+0x21c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d04a      	beq.n	8007fec <DMA_SetConfig+0x1d0>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a38      	ldr	r2, [pc, #224]	; (800803c <DMA_SetConfig+0x220>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d045      	beq.n	8007fec <DMA_SetConfig+0x1d0>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a36      	ldr	r2, [pc, #216]	; (8008040 <DMA_SetConfig+0x224>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d040      	beq.n	8007fec <DMA_SetConfig+0x1d0>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a35      	ldr	r2, [pc, #212]	; (8008044 <DMA_SetConfig+0x228>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d03b      	beq.n	8007fec <DMA_SetConfig+0x1d0>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a33      	ldr	r2, [pc, #204]	; (8008048 <DMA_SetConfig+0x22c>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d036      	beq.n	8007fec <DMA_SetConfig+0x1d0>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a32      	ldr	r2, [pc, #200]	; (800804c <DMA_SetConfig+0x230>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d031      	beq.n	8007fec <DMA_SetConfig+0x1d0>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a30      	ldr	r2, [pc, #192]	; (8008050 <DMA_SetConfig+0x234>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d02c      	beq.n	8007fec <DMA_SetConfig+0x1d0>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a2f      	ldr	r2, [pc, #188]	; (8008054 <DMA_SetConfig+0x238>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d027      	beq.n	8007fec <DMA_SetConfig+0x1d0>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a2d      	ldr	r2, [pc, #180]	; (8008058 <DMA_SetConfig+0x23c>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d022      	beq.n	8007fec <DMA_SetConfig+0x1d0>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a2c      	ldr	r2, [pc, #176]	; (800805c <DMA_SetConfig+0x240>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d01d      	beq.n	8007fec <DMA_SetConfig+0x1d0>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a2a      	ldr	r2, [pc, #168]	; (8008060 <DMA_SetConfig+0x244>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d018      	beq.n	8007fec <DMA_SetConfig+0x1d0>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a29      	ldr	r2, [pc, #164]	; (8008064 <DMA_SetConfig+0x248>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d013      	beq.n	8007fec <DMA_SetConfig+0x1d0>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a27      	ldr	r2, [pc, #156]	; (8008068 <DMA_SetConfig+0x24c>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d00e      	beq.n	8007fec <DMA_SetConfig+0x1d0>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a26      	ldr	r2, [pc, #152]	; (800806c <DMA_SetConfig+0x250>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d009      	beq.n	8007fec <DMA_SetConfig+0x1d0>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a24      	ldr	r2, [pc, #144]	; (8008070 <DMA_SetConfig+0x254>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d004      	beq.n	8007fec <DMA_SetConfig+0x1d0>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a23      	ldr	r2, [pc, #140]	; (8008074 <DMA_SetConfig+0x258>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d101      	bne.n	8007ff0 <DMA_SetConfig+0x1d4>
 8007fec:	2301      	movs	r3, #1
 8007fee:	e000      	b.n	8007ff2 <DMA_SetConfig+0x1d6>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d059      	beq.n	80080aa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ffa:	f003 031f 	and.w	r3, r3, #31
 8007ffe:	223f      	movs	r2, #63	; 0x3f
 8008000:	409a      	lsls	r2, r3
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008014:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	2b40      	cmp	r3, #64	; 0x40
 8008024:	d138      	bne.n	8008098 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008036:	e086      	b.n	8008146 <DMA_SetConfig+0x32a>
 8008038:	40020010 	.word	0x40020010
 800803c:	40020028 	.word	0x40020028
 8008040:	40020040 	.word	0x40020040
 8008044:	40020058 	.word	0x40020058
 8008048:	40020070 	.word	0x40020070
 800804c:	40020088 	.word	0x40020088
 8008050:	400200a0 	.word	0x400200a0
 8008054:	400200b8 	.word	0x400200b8
 8008058:	40020410 	.word	0x40020410
 800805c:	40020428 	.word	0x40020428
 8008060:	40020440 	.word	0x40020440
 8008064:	40020458 	.word	0x40020458
 8008068:	40020470 	.word	0x40020470
 800806c:	40020488 	.word	0x40020488
 8008070:	400204a0 	.word	0x400204a0
 8008074:	400204b8 	.word	0x400204b8
 8008078:	58025408 	.word	0x58025408
 800807c:	5802541c 	.word	0x5802541c
 8008080:	58025430 	.word	0x58025430
 8008084:	58025444 	.word	0x58025444
 8008088:	58025458 	.word	0x58025458
 800808c:	5802546c 	.word	0x5802546c
 8008090:	58025480 	.word	0x58025480
 8008094:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	60da      	str	r2, [r3, #12]
}
 80080a8:	e04d      	b.n	8008146 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a29      	ldr	r2, [pc, #164]	; (8008154 <DMA_SetConfig+0x338>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d022      	beq.n	80080fa <DMA_SetConfig+0x2de>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a27      	ldr	r2, [pc, #156]	; (8008158 <DMA_SetConfig+0x33c>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d01d      	beq.n	80080fa <DMA_SetConfig+0x2de>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a26      	ldr	r2, [pc, #152]	; (800815c <DMA_SetConfig+0x340>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d018      	beq.n	80080fa <DMA_SetConfig+0x2de>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a24      	ldr	r2, [pc, #144]	; (8008160 <DMA_SetConfig+0x344>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d013      	beq.n	80080fa <DMA_SetConfig+0x2de>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a23      	ldr	r2, [pc, #140]	; (8008164 <DMA_SetConfig+0x348>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d00e      	beq.n	80080fa <DMA_SetConfig+0x2de>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a21      	ldr	r2, [pc, #132]	; (8008168 <DMA_SetConfig+0x34c>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d009      	beq.n	80080fa <DMA_SetConfig+0x2de>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a20      	ldr	r2, [pc, #128]	; (800816c <DMA_SetConfig+0x350>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d004      	beq.n	80080fa <DMA_SetConfig+0x2de>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a1e      	ldr	r2, [pc, #120]	; (8008170 <DMA_SetConfig+0x354>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d101      	bne.n	80080fe <DMA_SetConfig+0x2e2>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e000      	b.n	8008100 <DMA_SetConfig+0x2e4>
 80080fe:	2300      	movs	r3, #0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d020      	beq.n	8008146 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008108:	f003 031f 	and.w	r3, r3, #31
 800810c:	2201      	movs	r2, #1
 800810e:	409a      	lsls	r2, r3
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	2b40      	cmp	r3, #64	; 0x40
 8008122:	d108      	bne.n	8008136 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	60da      	str	r2, [r3, #12]
}
 8008134:	e007      	b.n	8008146 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	60da      	str	r2, [r3, #12]
}
 8008146:	bf00      	nop
 8008148:	371c      	adds	r7, #28
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	58025408 	.word	0x58025408
 8008158:	5802541c 	.word	0x5802541c
 800815c:	58025430 	.word	0x58025430
 8008160:	58025444 	.word	0x58025444
 8008164:	58025458 	.word	0x58025458
 8008168:	5802546c 	.word	0x5802546c
 800816c:	58025480 	.word	0x58025480
 8008170:	58025494 	.word	0x58025494

08008174 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a42      	ldr	r2, [pc, #264]	; (800828c <DMA_CalcBaseAndBitshift+0x118>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d04a      	beq.n	800821c <DMA_CalcBaseAndBitshift+0xa8>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a41      	ldr	r2, [pc, #260]	; (8008290 <DMA_CalcBaseAndBitshift+0x11c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d045      	beq.n	800821c <DMA_CalcBaseAndBitshift+0xa8>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a3f      	ldr	r2, [pc, #252]	; (8008294 <DMA_CalcBaseAndBitshift+0x120>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d040      	beq.n	800821c <DMA_CalcBaseAndBitshift+0xa8>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a3e      	ldr	r2, [pc, #248]	; (8008298 <DMA_CalcBaseAndBitshift+0x124>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d03b      	beq.n	800821c <DMA_CalcBaseAndBitshift+0xa8>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a3c      	ldr	r2, [pc, #240]	; (800829c <DMA_CalcBaseAndBitshift+0x128>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d036      	beq.n	800821c <DMA_CalcBaseAndBitshift+0xa8>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a3b      	ldr	r2, [pc, #236]	; (80082a0 <DMA_CalcBaseAndBitshift+0x12c>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d031      	beq.n	800821c <DMA_CalcBaseAndBitshift+0xa8>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a39      	ldr	r2, [pc, #228]	; (80082a4 <DMA_CalcBaseAndBitshift+0x130>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d02c      	beq.n	800821c <DMA_CalcBaseAndBitshift+0xa8>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a38      	ldr	r2, [pc, #224]	; (80082a8 <DMA_CalcBaseAndBitshift+0x134>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d027      	beq.n	800821c <DMA_CalcBaseAndBitshift+0xa8>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a36      	ldr	r2, [pc, #216]	; (80082ac <DMA_CalcBaseAndBitshift+0x138>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d022      	beq.n	800821c <DMA_CalcBaseAndBitshift+0xa8>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a35      	ldr	r2, [pc, #212]	; (80082b0 <DMA_CalcBaseAndBitshift+0x13c>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d01d      	beq.n	800821c <DMA_CalcBaseAndBitshift+0xa8>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a33      	ldr	r2, [pc, #204]	; (80082b4 <DMA_CalcBaseAndBitshift+0x140>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d018      	beq.n	800821c <DMA_CalcBaseAndBitshift+0xa8>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a32      	ldr	r2, [pc, #200]	; (80082b8 <DMA_CalcBaseAndBitshift+0x144>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d013      	beq.n	800821c <DMA_CalcBaseAndBitshift+0xa8>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a30      	ldr	r2, [pc, #192]	; (80082bc <DMA_CalcBaseAndBitshift+0x148>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d00e      	beq.n	800821c <DMA_CalcBaseAndBitshift+0xa8>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a2f      	ldr	r2, [pc, #188]	; (80082c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d009      	beq.n	800821c <DMA_CalcBaseAndBitshift+0xa8>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a2d      	ldr	r2, [pc, #180]	; (80082c4 <DMA_CalcBaseAndBitshift+0x150>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d004      	beq.n	800821c <DMA_CalcBaseAndBitshift+0xa8>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a2c      	ldr	r2, [pc, #176]	; (80082c8 <DMA_CalcBaseAndBitshift+0x154>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d101      	bne.n	8008220 <DMA_CalcBaseAndBitshift+0xac>
 800821c:	2301      	movs	r3, #1
 800821e:	e000      	b.n	8008222 <DMA_CalcBaseAndBitshift+0xae>
 8008220:	2300      	movs	r3, #0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d024      	beq.n	8008270 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	b2db      	uxtb	r3, r3
 800822c:	3b10      	subs	r3, #16
 800822e:	4a27      	ldr	r2, [pc, #156]	; (80082cc <DMA_CalcBaseAndBitshift+0x158>)
 8008230:	fba2 2303 	umull	r2, r3, r2, r3
 8008234:	091b      	lsrs	r3, r3, #4
 8008236:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f003 0307 	and.w	r3, r3, #7
 800823e:	4a24      	ldr	r2, [pc, #144]	; (80082d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8008240:	5cd3      	ldrb	r3, [r2, r3]
 8008242:	461a      	mov	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2b03      	cmp	r3, #3
 800824c:	d908      	bls.n	8008260 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	4b1f      	ldr	r3, [pc, #124]	; (80082d4 <DMA_CalcBaseAndBitshift+0x160>)
 8008256:	4013      	ands	r3, r2
 8008258:	1d1a      	adds	r2, r3, #4
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	659a      	str	r2, [r3, #88]	; 0x58
 800825e:	e00d      	b.n	800827c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	461a      	mov	r2, r3
 8008266:	4b1b      	ldr	r3, [pc, #108]	; (80082d4 <DMA_CalcBaseAndBitshift+0x160>)
 8008268:	4013      	ands	r3, r2
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	6593      	str	r3, [r2, #88]	; 0x58
 800826e:	e005      	b.n	800827c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008280:	4618      	mov	r0, r3
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	40020010 	.word	0x40020010
 8008290:	40020028 	.word	0x40020028
 8008294:	40020040 	.word	0x40020040
 8008298:	40020058 	.word	0x40020058
 800829c:	40020070 	.word	0x40020070
 80082a0:	40020088 	.word	0x40020088
 80082a4:	400200a0 	.word	0x400200a0
 80082a8:	400200b8 	.word	0x400200b8
 80082ac:	40020410 	.word	0x40020410
 80082b0:	40020428 	.word	0x40020428
 80082b4:	40020440 	.word	0x40020440
 80082b8:	40020458 	.word	0x40020458
 80082bc:	40020470 	.word	0x40020470
 80082c0:	40020488 	.word	0x40020488
 80082c4:	400204a0 	.word	0x400204a0
 80082c8:	400204b8 	.word	0x400204b8
 80082cc:	aaaaaaab 	.word	0xaaaaaaab
 80082d0:	0800f874 	.word	0x0800f874
 80082d4:	fffffc00 	.word	0xfffffc00

080082d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d120      	bne.n	800832e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f0:	2b03      	cmp	r3, #3
 80082f2:	d858      	bhi.n	80083a6 <DMA_CheckFifoParam+0xce>
 80082f4:	a201      	add	r2, pc, #4	; (adr r2, 80082fc <DMA_CheckFifoParam+0x24>)
 80082f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fa:	bf00      	nop
 80082fc:	0800830d 	.word	0x0800830d
 8008300:	0800831f 	.word	0x0800831f
 8008304:	0800830d 	.word	0x0800830d
 8008308:	080083a7 	.word	0x080083a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d048      	beq.n	80083aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800831c:	e045      	b.n	80083aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008322:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008326:	d142      	bne.n	80083ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800832c:	e03f      	b.n	80083ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008336:	d123      	bne.n	8008380 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833c:	2b03      	cmp	r3, #3
 800833e:	d838      	bhi.n	80083b2 <DMA_CheckFifoParam+0xda>
 8008340:	a201      	add	r2, pc, #4	; (adr r2, 8008348 <DMA_CheckFifoParam+0x70>)
 8008342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008346:	bf00      	nop
 8008348:	08008359 	.word	0x08008359
 800834c:	0800835f 	.word	0x0800835f
 8008350:	08008359 	.word	0x08008359
 8008354:	08008371 	.word	0x08008371
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	73fb      	strb	r3, [r7, #15]
        break;
 800835c:	e030      	b.n	80083c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d025      	beq.n	80083b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800836e:	e022      	b.n	80083b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008374:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008378:	d11f      	bne.n	80083ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800837e:	e01c      	b.n	80083ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008384:	2b02      	cmp	r3, #2
 8008386:	d902      	bls.n	800838e <DMA_CheckFifoParam+0xb6>
 8008388:	2b03      	cmp	r3, #3
 800838a:	d003      	beq.n	8008394 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800838c:	e018      	b.n	80083c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	73fb      	strb	r3, [r7, #15]
        break;
 8008392:	e015      	b.n	80083c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00e      	beq.n	80083be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	73fb      	strb	r3, [r7, #15]
    break;
 80083a4:	e00b      	b.n	80083be <DMA_CheckFifoParam+0xe6>
        break;
 80083a6:	bf00      	nop
 80083a8:	e00a      	b.n	80083c0 <DMA_CheckFifoParam+0xe8>
        break;
 80083aa:	bf00      	nop
 80083ac:	e008      	b.n	80083c0 <DMA_CheckFifoParam+0xe8>
        break;
 80083ae:	bf00      	nop
 80083b0:	e006      	b.n	80083c0 <DMA_CheckFifoParam+0xe8>
        break;
 80083b2:	bf00      	nop
 80083b4:	e004      	b.n	80083c0 <DMA_CheckFifoParam+0xe8>
        break;
 80083b6:	bf00      	nop
 80083b8:	e002      	b.n	80083c0 <DMA_CheckFifoParam+0xe8>
        break;
 80083ba:	bf00      	nop
 80083bc:	e000      	b.n	80083c0 <DMA_CheckFifoParam+0xe8>
    break;
 80083be:	bf00      	nop
    }
  }

  return status;
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop

080083d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a38      	ldr	r2, [pc, #224]	; (80084c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d022      	beq.n	800842e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a36      	ldr	r2, [pc, #216]	; (80084c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d01d      	beq.n	800842e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a35      	ldr	r2, [pc, #212]	; (80084cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d018      	beq.n	800842e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a33      	ldr	r2, [pc, #204]	; (80084d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d013      	beq.n	800842e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a32      	ldr	r2, [pc, #200]	; (80084d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d00e      	beq.n	800842e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a30      	ldr	r2, [pc, #192]	; (80084d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d009      	beq.n	800842e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a2f      	ldr	r2, [pc, #188]	; (80084dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d004      	beq.n	800842e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a2d      	ldr	r2, [pc, #180]	; (80084e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d101      	bne.n	8008432 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800842e:	2301      	movs	r3, #1
 8008430:	e000      	b.n	8008434 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008432:	2300      	movs	r3, #0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01a      	beq.n	800846e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	b2db      	uxtb	r3, r3
 800843e:	3b08      	subs	r3, #8
 8008440:	4a28      	ldr	r2, [pc, #160]	; (80084e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008442:	fba2 2303 	umull	r2, r3, r2, r3
 8008446:	091b      	lsrs	r3, r3, #4
 8008448:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	4b26      	ldr	r3, [pc, #152]	; (80084e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800844e:	4413      	add	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	461a      	mov	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a24      	ldr	r2, [pc, #144]	; (80084ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800845c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f003 031f 	and.w	r3, r3, #31
 8008464:	2201      	movs	r2, #1
 8008466:	409a      	lsls	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800846c:	e024      	b.n	80084b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	b2db      	uxtb	r3, r3
 8008474:	3b10      	subs	r3, #16
 8008476:	4a1e      	ldr	r2, [pc, #120]	; (80084f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008478:	fba2 2303 	umull	r2, r3, r2, r3
 800847c:	091b      	lsrs	r3, r3, #4
 800847e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	4a1c      	ldr	r2, [pc, #112]	; (80084f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d806      	bhi.n	8008496 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	4a1b      	ldr	r2, [pc, #108]	; (80084f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d902      	bls.n	8008496 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	3308      	adds	r3, #8
 8008494:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	4b18      	ldr	r3, [pc, #96]	; (80084fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	461a      	mov	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a16      	ldr	r2, [pc, #88]	; (8008500 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80084a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f003 031f 	and.w	r3, r3, #31
 80084b0:	2201      	movs	r2, #1
 80084b2:	409a      	lsls	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80084b8:	bf00      	nop
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr
 80084c4:	58025408 	.word	0x58025408
 80084c8:	5802541c 	.word	0x5802541c
 80084cc:	58025430 	.word	0x58025430
 80084d0:	58025444 	.word	0x58025444
 80084d4:	58025458 	.word	0x58025458
 80084d8:	5802546c 	.word	0x5802546c
 80084dc:	58025480 	.word	0x58025480
 80084e0:	58025494 	.word	0x58025494
 80084e4:	cccccccd 	.word	0xcccccccd
 80084e8:	16009600 	.word	0x16009600
 80084ec:	58025880 	.word	0x58025880
 80084f0:	aaaaaaab 	.word	0xaaaaaaab
 80084f4:	400204b8 	.word	0x400204b8
 80084f8:	4002040f 	.word	0x4002040f
 80084fc:	10008200 	.word	0x10008200
 8008500:	40020880 	.word	0x40020880

08008504 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	b2db      	uxtb	r3, r3
 8008512:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d04a      	beq.n	80085b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2b08      	cmp	r3, #8
 800851e:	d847      	bhi.n	80085b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a25      	ldr	r2, [pc, #148]	; (80085bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d022      	beq.n	8008570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a24      	ldr	r2, [pc, #144]	; (80085c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d01d      	beq.n	8008570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a22      	ldr	r2, [pc, #136]	; (80085c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d018      	beq.n	8008570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a21      	ldr	r2, [pc, #132]	; (80085c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d013      	beq.n	8008570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a1f      	ldr	r2, [pc, #124]	; (80085cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d00e      	beq.n	8008570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a1e      	ldr	r2, [pc, #120]	; (80085d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d009      	beq.n	8008570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a1c      	ldr	r2, [pc, #112]	; (80085d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d004      	beq.n	8008570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a1b      	ldr	r2, [pc, #108]	; (80085d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d101      	bne.n	8008574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008570:	2301      	movs	r3, #1
 8008572:	e000      	b.n	8008576 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008574:	2300      	movs	r3, #0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00a      	beq.n	8008590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	4b17      	ldr	r3, [pc, #92]	; (80085dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800857e:	4413      	add	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	461a      	mov	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a15      	ldr	r2, [pc, #84]	; (80085e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800858c:	671a      	str	r2, [r3, #112]	; 0x70
 800858e:	e009      	b.n	80085a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	4b14      	ldr	r3, [pc, #80]	; (80085e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008594:	4413      	add	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	461a      	mov	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a11      	ldr	r2, [pc, #68]	; (80085e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80085a2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3b01      	subs	r3, #1
 80085a8:	2201      	movs	r2, #1
 80085aa:	409a      	lsls	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80085b0:	bf00      	nop
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	58025408 	.word	0x58025408
 80085c0:	5802541c 	.word	0x5802541c
 80085c4:	58025430 	.word	0x58025430
 80085c8:	58025444 	.word	0x58025444
 80085cc:	58025458 	.word	0x58025458
 80085d0:	5802546c 	.word	0x5802546c
 80085d4:	58025480 	.word	0x58025480
 80085d8:	58025494 	.word	0x58025494
 80085dc:	1600963f 	.word	0x1600963f
 80085e0:	58025940 	.word	0x58025940
 80085e4:	1000823f 	.word	0x1000823f
 80085e8:	40020940 	.word	0x40020940

080085ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b089      	sub	sp, #36	; 0x24
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80085f6:	2300      	movs	r3, #0
 80085f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80085fa:	4b86      	ldr	r3, [pc, #536]	; (8008814 <HAL_GPIO_Init+0x228>)
 80085fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80085fe:	e18c      	b.n	800891a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	2101      	movs	r1, #1
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	fa01 f303 	lsl.w	r3, r1, r3
 800860c:	4013      	ands	r3, r2
 800860e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	2b00      	cmp	r3, #0
 8008614:	f000 817e 	beq.w	8008914 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	f003 0303 	and.w	r3, r3, #3
 8008620:	2b01      	cmp	r3, #1
 8008622:	d005      	beq.n	8008630 <HAL_GPIO_Init+0x44>
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	f003 0303 	and.w	r3, r3, #3
 800862c:	2b02      	cmp	r3, #2
 800862e:	d130      	bne.n	8008692 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	005b      	lsls	r3, r3, #1
 800863a:	2203      	movs	r2, #3
 800863c:	fa02 f303 	lsl.w	r3, r2, r3
 8008640:	43db      	mvns	r3, r3
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	4013      	ands	r3, r2
 8008646:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	68da      	ldr	r2, [r3, #12]
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	005b      	lsls	r3, r3, #1
 8008650:	fa02 f303 	lsl.w	r3, r2, r3
 8008654:	69ba      	ldr	r2, [r7, #24]
 8008656:	4313      	orrs	r3, r2
 8008658:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	69ba      	ldr	r2, [r7, #24]
 800865e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008666:	2201      	movs	r2, #1
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	fa02 f303 	lsl.w	r3, r2, r3
 800866e:	43db      	mvns	r3, r3
 8008670:	69ba      	ldr	r2, [r7, #24]
 8008672:	4013      	ands	r3, r2
 8008674:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	091b      	lsrs	r3, r3, #4
 800867c:	f003 0201 	and.w	r2, r3, #1
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	fa02 f303 	lsl.w	r3, r2, r3
 8008686:	69ba      	ldr	r2, [r7, #24]
 8008688:	4313      	orrs	r3, r2
 800868a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f003 0303 	and.w	r3, r3, #3
 800869a:	2b03      	cmp	r3, #3
 800869c:	d017      	beq.n	80086ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	005b      	lsls	r3, r3, #1
 80086a8:	2203      	movs	r2, #3
 80086aa:	fa02 f303 	lsl.w	r3, r2, r3
 80086ae:	43db      	mvns	r3, r3
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	4013      	ands	r3, r2
 80086b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	689a      	ldr	r2, [r3, #8]
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	005b      	lsls	r3, r3, #1
 80086be:	fa02 f303 	lsl.w	r3, r2, r3
 80086c2:	69ba      	ldr	r2, [r7, #24]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	69ba      	ldr	r2, [r7, #24]
 80086cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f003 0303 	and.w	r3, r3, #3
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d123      	bne.n	8008722 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	08da      	lsrs	r2, r3, #3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	3208      	adds	r2, #8
 80086e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	f003 0307 	and.w	r3, r3, #7
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	220f      	movs	r2, #15
 80086f2:	fa02 f303 	lsl.w	r3, r2, r3
 80086f6:	43db      	mvns	r3, r3
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	4013      	ands	r3, r2
 80086fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	691a      	ldr	r2, [r3, #16]
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	f003 0307 	and.w	r3, r3, #7
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	fa02 f303 	lsl.w	r3, r2, r3
 800870e:	69ba      	ldr	r2, [r7, #24]
 8008710:	4313      	orrs	r3, r2
 8008712:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	08da      	lsrs	r2, r3, #3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3208      	adds	r2, #8
 800871c:	69b9      	ldr	r1, [r7, #24]
 800871e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	005b      	lsls	r3, r3, #1
 800872c:	2203      	movs	r2, #3
 800872e:	fa02 f303 	lsl.w	r3, r2, r3
 8008732:	43db      	mvns	r3, r3
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	4013      	ands	r3, r2
 8008738:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f003 0203 	and.w	r2, r3, #3
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	005b      	lsls	r3, r3, #1
 8008746:	fa02 f303 	lsl.w	r3, r2, r3
 800874a:	69ba      	ldr	r2, [r7, #24]
 800874c:	4313      	orrs	r3, r2
 800874e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 80d8 	beq.w	8008914 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008764:	4b2c      	ldr	r3, [pc, #176]	; (8008818 <HAL_GPIO_Init+0x22c>)
 8008766:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800876a:	4a2b      	ldr	r2, [pc, #172]	; (8008818 <HAL_GPIO_Init+0x22c>)
 800876c:	f043 0302 	orr.w	r3, r3, #2
 8008770:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008774:	4b28      	ldr	r3, [pc, #160]	; (8008818 <HAL_GPIO_Init+0x22c>)
 8008776:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800877a:	f003 0302 	and.w	r3, r3, #2
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008782:	4a26      	ldr	r2, [pc, #152]	; (800881c <HAL_GPIO_Init+0x230>)
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	089b      	lsrs	r3, r3, #2
 8008788:	3302      	adds	r3, #2
 800878a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800878e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	220f      	movs	r2, #15
 800879a:	fa02 f303 	lsl.w	r3, r2, r3
 800879e:	43db      	mvns	r3, r3
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	4013      	ands	r3, r2
 80087a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a1d      	ldr	r2, [pc, #116]	; (8008820 <HAL_GPIO_Init+0x234>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d04a      	beq.n	8008844 <HAL_GPIO_Init+0x258>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a1c      	ldr	r2, [pc, #112]	; (8008824 <HAL_GPIO_Init+0x238>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d02b      	beq.n	800880e <HAL_GPIO_Init+0x222>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a1b      	ldr	r2, [pc, #108]	; (8008828 <HAL_GPIO_Init+0x23c>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d025      	beq.n	800880a <HAL_GPIO_Init+0x21e>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a1a      	ldr	r2, [pc, #104]	; (800882c <HAL_GPIO_Init+0x240>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d01f      	beq.n	8008806 <HAL_GPIO_Init+0x21a>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a19      	ldr	r2, [pc, #100]	; (8008830 <HAL_GPIO_Init+0x244>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d019      	beq.n	8008802 <HAL_GPIO_Init+0x216>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a18      	ldr	r2, [pc, #96]	; (8008834 <HAL_GPIO_Init+0x248>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d013      	beq.n	80087fe <HAL_GPIO_Init+0x212>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a17      	ldr	r2, [pc, #92]	; (8008838 <HAL_GPIO_Init+0x24c>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d00d      	beq.n	80087fa <HAL_GPIO_Init+0x20e>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a16      	ldr	r2, [pc, #88]	; (800883c <HAL_GPIO_Init+0x250>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d007      	beq.n	80087f6 <HAL_GPIO_Init+0x20a>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a15      	ldr	r2, [pc, #84]	; (8008840 <HAL_GPIO_Init+0x254>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d101      	bne.n	80087f2 <HAL_GPIO_Init+0x206>
 80087ee:	2309      	movs	r3, #9
 80087f0:	e029      	b.n	8008846 <HAL_GPIO_Init+0x25a>
 80087f2:	230a      	movs	r3, #10
 80087f4:	e027      	b.n	8008846 <HAL_GPIO_Init+0x25a>
 80087f6:	2307      	movs	r3, #7
 80087f8:	e025      	b.n	8008846 <HAL_GPIO_Init+0x25a>
 80087fa:	2306      	movs	r3, #6
 80087fc:	e023      	b.n	8008846 <HAL_GPIO_Init+0x25a>
 80087fe:	2305      	movs	r3, #5
 8008800:	e021      	b.n	8008846 <HAL_GPIO_Init+0x25a>
 8008802:	2304      	movs	r3, #4
 8008804:	e01f      	b.n	8008846 <HAL_GPIO_Init+0x25a>
 8008806:	2303      	movs	r3, #3
 8008808:	e01d      	b.n	8008846 <HAL_GPIO_Init+0x25a>
 800880a:	2302      	movs	r3, #2
 800880c:	e01b      	b.n	8008846 <HAL_GPIO_Init+0x25a>
 800880e:	2301      	movs	r3, #1
 8008810:	e019      	b.n	8008846 <HAL_GPIO_Init+0x25a>
 8008812:	bf00      	nop
 8008814:	58000080 	.word	0x58000080
 8008818:	58024400 	.word	0x58024400
 800881c:	58000400 	.word	0x58000400
 8008820:	58020000 	.word	0x58020000
 8008824:	58020400 	.word	0x58020400
 8008828:	58020800 	.word	0x58020800
 800882c:	58020c00 	.word	0x58020c00
 8008830:	58021000 	.word	0x58021000
 8008834:	58021400 	.word	0x58021400
 8008838:	58021800 	.word	0x58021800
 800883c:	58021c00 	.word	0x58021c00
 8008840:	58022400 	.word	0x58022400
 8008844:	2300      	movs	r3, #0
 8008846:	69fa      	ldr	r2, [r7, #28]
 8008848:	f002 0203 	and.w	r2, r2, #3
 800884c:	0092      	lsls	r2, r2, #2
 800884e:	4093      	lsls	r3, r2
 8008850:	69ba      	ldr	r2, [r7, #24]
 8008852:	4313      	orrs	r3, r2
 8008854:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008856:	4938      	ldr	r1, [pc, #224]	; (8008938 <HAL_GPIO_Init+0x34c>)
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	089b      	lsrs	r3, r3, #2
 800885c:	3302      	adds	r3, #2
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	43db      	mvns	r3, r3
 8008870:	69ba      	ldr	r2, [r7, #24]
 8008872:	4013      	ands	r3, r2
 8008874:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d003      	beq.n	800888a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008882:	69ba      	ldr	r2, [r7, #24]
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	4313      	orrs	r3, r2
 8008888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800888a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	43db      	mvns	r3, r3
 800889e:	69ba      	ldr	r2, [r7, #24]
 80088a0:	4013      	ands	r3, r2
 80088a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d003      	beq.n	80088b8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80088b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	43db      	mvns	r3, r3
 80088ca:	69ba      	ldr	r2, [r7, #24]
 80088cc:	4013      	ands	r3, r2
 80088ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d003      	beq.n	80088e4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80088dc:	69ba      	ldr	r2, [r7, #24]
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	43db      	mvns	r3, r3
 80088f4:	69ba      	ldr	r2, [r7, #24]
 80088f6:	4013      	ands	r3, r2
 80088f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008902:	2b00      	cmp	r3, #0
 8008904:	d003      	beq.n	800890e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008906:	69ba      	ldr	r2, [r7, #24]
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	4313      	orrs	r3, r2
 800890c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	69ba      	ldr	r2, [r7, #24]
 8008912:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	3301      	adds	r3, #1
 8008918:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	fa22 f303 	lsr.w	r3, r2, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	f47f ae6b 	bne.w	8008600 <HAL_GPIO_Init+0x14>
  }
}
 800892a:	bf00      	nop
 800892c:	bf00      	nop
 800892e:	3724      	adds	r7, #36	; 0x24
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	58000400 	.word	0x58000400

0800893c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800893c:	b480      	push	{r7}
 800893e:	b087      	sub	sp, #28
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008946:	2300      	movs	r3, #0
 8008948:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800894a:	4b72      	ldr	r3, [pc, #456]	; (8008b14 <HAL_GPIO_DeInit+0x1d8>)
 800894c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800894e:	e0d3      	b.n	8008af8 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008950:	2201      	movs	r2, #1
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	fa02 f303 	lsl.w	r3, r2, r3
 8008958:	683a      	ldr	r2, [r7, #0]
 800895a:	4013      	ands	r3, r2
 800895c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 80c6 	beq.w	8008af2 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008966:	4a6c      	ldr	r2, [pc, #432]	; (8008b18 <HAL_GPIO_DeInit+0x1dc>)
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	089b      	lsrs	r3, r3, #2
 800896c:	3302      	adds	r3, #2
 800896e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008972:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	f003 0303 	and.w	r3, r3, #3
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	220f      	movs	r2, #15
 800897e:	fa02 f303 	lsl.w	r3, r2, r3
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	4013      	ands	r3, r2
 8008986:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a64      	ldr	r2, [pc, #400]	; (8008b1c <HAL_GPIO_DeInit+0x1e0>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d031      	beq.n	80089f4 <HAL_GPIO_DeInit+0xb8>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a63      	ldr	r2, [pc, #396]	; (8008b20 <HAL_GPIO_DeInit+0x1e4>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d02b      	beq.n	80089f0 <HAL_GPIO_DeInit+0xb4>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a62      	ldr	r2, [pc, #392]	; (8008b24 <HAL_GPIO_DeInit+0x1e8>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d025      	beq.n	80089ec <HAL_GPIO_DeInit+0xb0>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a61      	ldr	r2, [pc, #388]	; (8008b28 <HAL_GPIO_DeInit+0x1ec>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d01f      	beq.n	80089e8 <HAL_GPIO_DeInit+0xac>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a60      	ldr	r2, [pc, #384]	; (8008b2c <HAL_GPIO_DeInit+0x1f0>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d019      	beq.n	80089e4 <HAL_GPIO_DeInit+0xa8>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a5f      	ldr	r2, [pc, #380]	; (8008b30 <HAL_GPIO_DeInit+0x1f4>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d013      	beq.n	80089e0 <HAL_GPIO_DeInit+0xa4>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a5e      	ldr	r2, [pc, #376]	; (8008b34 <HAL_GPIO_DeInit+0x1f8>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d00d      	beq.n	80089dc <HAL_GPIO_DeInit+0xa0>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a5d      	ldr	r2, [pc, #372]	; (8008b38 <HAL_GPIO_DeInit+0x1fc>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d007      	beq.n	80089d8 <HAL_GPIO_DeInit+0x9c>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a5c      	ldr	r2, [pc, #368]	; (8008b3c <HAL_GPIO_DeInit+0x200>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d101      	bne.n	80089d4 <HAL_GPIO_DeInit+0x98>
 80089d0:	2309      	movs	r3, #9
 80089d2:	e010      	b.n	80089f6 <HAL_GPIO_DeInit+0xba>
 80089d4:	230a      	movs	r3, #10
 80089d6:	e00e      	b.n	80089f6 <HAL_GPIO_DeInit+0xba>
 80089d8:	2307      	movs	r3, #7
 80089da:	e00c      	b.n	80089f6 <HAL_GPIO_DeInit+0xba>
 80089dc:	2306      	movs	r3, #6
 80089de:	e00a      	b.n	80089f6 <HAL_GPIO_DeInit+0xba>
 80089e0:	2305      	movs	r3, #5
 80089e2:	e008      	b.n	80089f6 <HAL_GPIO_DeInit+0xba>
 80089e4:	2304      	movs	r3, #4
 80089e6:	e006      	b.n	80089f6 <HAL_GPIO_DeInit+0xba>
 80089e8:	2303      	movs	r3, #3
 80089ea:	e004      	b.n	80089f6 <HAL_GPIO_DeInit+0xba>
 80089ec:	2302      	movs	r3, #2
 80089ee:	e002      	b.n	80089f6 <HAL_GPIO_DeInit+0xba>
 80089f0:	2301      	movs	r3, #1
 80089f2:	e000      	b.n	80089f6 <HAL_GPIO_DeInit+0xba>
 80089f4:	2300      	movs	r3, #0
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	f002 0203 	and.w	r2, r2, #3
 80089fc:	0092      	lsls	r2, r2, #2
 80089fe:	4093      	lsls	r3, r2
 8008a00:	68ba      	ldr	r2, [r7, #8]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d136      	bne.n	8008a74 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	43db      	mvns	r3, r3
 8008a0e:	401a      	ands	r2, r3
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	43db      	mvns	r3, r3
 8008a1c:	401a      	ands	r2, r3
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a26:	685a      	ldr	r2, [r3, #4]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	43db      	mvns	r3, r3
 8008a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a30:	4013      	ands	r3, r2
 8008a32:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	43db      	mvns	r3, r3
 8008a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a42:	4013      	ands	r3, r2
 8008a44:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f003 0303 	and.w	r3, r3, #3
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	220f      	movs	r2, #15
 8008a50:	fa02 f303 	lsl.w	r3, r2, r3
 8008a54:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008a56:	4a30      	ldr	r2, [pc, #192]	; (8008b18 <HAL_GPIO_DeInit+0x1dc>)
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	089b      	lsrs	r3, r3, #2
 8008a5c:	3302      	adds	r3, #2
 8008a5e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	43da      	mvns	r2, r3
 8008a66:	482c      	ldr	r0, [pc, #176]	; (8008b18 <HAL_GPIO_DeInit+0x1dc>)
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	089b      	lsrs	r3, r3, #2
 8008a6c:	400a      	ands	r2, r1
 8008a6e:	3302      	adds	r3, #2
 8008a70:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	005b      	lsls	r3, r3, #1
 8008a7c:	2103      	movs	r1, #3
 8008a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a82:	431a      	orrs	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	08da      	lsrs	r2, r3, #3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	3208      	adds	r2, #8
 8008a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	f003 0307 	and.w	r3, r3, #7
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	220f      	movs	r2, #15
 8008a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa2:	43db      	mvns	r3, r3
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	08d2      	lsrs	r2, r2, #3
 8008aa8:	4019      	ands	r1, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	3208      	adds	r2, #8
 8008aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68da      	ldr	r2, [r3, #12]
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	005b      	lsls	r3, r3, #1
 8008aba:	2103      	movs	r1, #3
 8008abc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ac0:	43db      	mvns	r3, r3
 8008ac2:	401a      	ands	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	2101      	movs	r1, #1
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad4:	43db      	mvns	r3, r3
 8008ad6:	401a      	ands	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689a      	ldr	r2, [r3, #8]
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	005b      	lsls	r3, r3, #1
 8008ae4:	2103      	movs	r1, #3
 8008ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8008aea:	43db      	mvns	r3, r3
 8008aec:	401a      	ands	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	3301      	adds	r3, #1
 8008af6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	fa22 f303 	lsr.w	r3, r2, r3
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f47f af25 	bne.w	8008950 <HAL_GPIO_DeInit+0x14>
  }
}
 8008b06:	bf00      	nop
 8008b08:	bf00      	nop
 8008b0a:	371c      	adds	r7, #28
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	58000080 	.word	0x58000080
 8008b18:	58000400 	.word	0x58000400
 8008b1c:	58020000 	.word	0x58020000
 8008b20:	58020400 	.word	0x58020400
 8008b24:	58020800 	.word	0x58020800
 8008b28:	58020c00 	.word	0x58020c00
 8008b2c:	58021000 	.word	0x58021000
 8008b30:	58021400 	.word	0x58021400
 8008b34:	58021800 	.word	0x58021800
 8008b38:	58021c00 	.word	0x58021c00
 8008b3c:	58022400 	.word	0x58022400

08008b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	807b      	strh	r3, [r7, #2]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008b50:	787b      	ldrb	r3, [r7, #1]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b56:	887a      	ldrh	r2, [r7, #2]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008b5c:	e003      	b.n	8008b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008b5e:	887b      	ldrh	r3, [r7, #2]
 8008b60:	041a      	lsls	r2, r3, #16
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	619a      	str	r2, [r3, #24]
}
 8008b66:	bf00      	nop
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
	...

08008b74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008b7c:	4b19      	ldr	r3, [pc, #100]	; (8008be4 <HAL_PWREx_ConfigSupply+0x70>)
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	f003 0304 	and.w	r3, r3, #4
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	d00a      	beq.n	8008b9e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008b88:	4b16      	ldr	r3, [pc, #88]	; (8008be4 <HAL_PWREx_ConfigSupply+0x70>)
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	f003 0307 	and.w	r3, r3, #7
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d001      	beq.n	8008b9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e01f      	b.n	8008bda <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	e01d      	b.n	8008bda <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008b9e:	4b11      	ldr	r3, [pc, #68]	; (8008be4 <HAL_PWREx_ConfigSupply+0x70>)
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	f023 0207 	bic.w	r2, r3, #7
 8008ba6:	490f      	ldr	r1, [pc, #60]	; (8008be4 <HAL_PWREx_ConfigSupply+0x70>)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008bae:	f7fc fbdf 	bl	8005370 <HAL_GetTick>
 8008bb2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008bb4:	e009      	b.n	8008bca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008bb6:	f7fc fbdb 	bl	8005370 <HAL_GetTick>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bc4:	d901      	bls.n	8008bca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e007      	b.n	8008bda <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008bca:	4b06      	ldr	r3, [pc, #24]	; (8008be4 <HAL_PWREx_ConfigSupply+0x70>)
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bd6:	d1ee      	bne.n	8008bb6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	58024800 	.word	0x58024800

08008be8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b08c      	sub	sp, #48	; 0x30
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e3c8      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f000 8087 	beq.w	8008d16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c08:	4b88      	ldr	r3, [pc, #544]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c12:	4b86      	ldr	r3, [pc, #536]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c16:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1a:	2b10      	cmp	r3, #16
 8008c1c:	d007      	beq.n	8008c2e <HAL_RCC_OscConfig+0x46>
 8008c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c20:	2b18      	cmp	r3, #24
 8008c22:	d110      	bne.n	8008c46 <HAL_RCC_OscConfig+0x5e>
 8008c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c26:	f003 0303 	and.w	r3, r3, #3
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d10b      	bne.n	8008c46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c2e:	4b7f      	ldr	r3, [pc, #508]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d06c      	beq.n	8008d14 <HAL_RCC_OscConfig+0x12c>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d168      	bne.n	8008d14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e3a2      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c4e:	d106      	bne.n	8008c5e <HAL_RCC_OscConfig+0x76>
 8008c50:	4b76      	ldr	r3, [pc, #472]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a75      	ldr	r2, [pc, #468]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c5a:	6013      	str	r3, [r2, #0]
 8008c5c:	e02e      	b.n	8008cbc <HAL_RCC_OscConfig+0xd4>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10c      	bne.n	8008c80 <HAL_RCC_OscConfig+0x98>
 8008c66:	4b71      	ldr	r3, [pc, #452]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a70      	ldr	r2, [pc, #448]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c70:	6013      	str	r3, [r2, #0]
 8008c72:	4b6e      	ldr	r3, [pc, #440]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a6d      	ldr	r2, [pc, #436]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c7c:	6013      	str	r3, [r2, #0]
 8008c7e:	e01d      	b.n	8008cbc <HAL_RCC_OscConfig+0xd4>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c88:	d10c      	bne.n	8008ca4 <HAL_RCC_OscConfig+0xbc>
 8008c8a:	4b68      	ldr	r3, [pc, #416]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a67      	ldr	r2, [pc, #412]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c94:	6013      	str	r3, [r2, #0]
 8008c96:	4b65      	ldr	r3, [pc, #404]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a64      	ldr	r2, [pc, #400]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ca0:	6013      	str	r3, [r2, #0]
 8008ca2:	e00b      	b.n	8008cbc <HAL_RCC_OscConfig+0xd4>
 8008ca4:	4b61      	ldr	r3, [pc, #388]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a60      	ldr	r2, [pc, #384]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	4b5e      	ldr	r3, [pc, #376]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a5d      	ldr	r2, [pc, #372]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d013      	beq.n	8008cec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cc4:	f7fc fb54 	bl	8005370 <HAL_GetTick>
 8008cc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008cca:	e008      	b.n	8008cde <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ccc:	f7fc fb50 	bl	8005370 <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	2b64      	cmp	r3, #100	; 0x64
 8008cd8:	d901      	bls.n	8008cde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e356      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008cde:	4b53      	ldr	r3, [pc, #332]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d0f0      	beq.n	8008ccc <HAL_RCC_OscConfig+0xe4>
 8008cea:	e014      	b.n	8008d16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cec:	f7fc fb40 	bl	8005370 <HAL_GetTick>
 8008cf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008cf2:	e008      	b.n	8008d06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008cf4:	f7fc fb3c 	bl	8005370 <HAL_GetTick>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	2b64      	cmp	r3, #100	; 0x64
 8008d00:	d901      	bls.n	8008d06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008d02:	2303      	movs	r3, #3
 8008d04:	e342      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d06:	4b49      	ldr	r3, [pc, #292]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1f0      	bne.n	8008cf4 <HAL_RCC_OscConfig+0x10c>
 8008d12:	e000      	b.n	8008d16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 0302 	and.w	r3, r3, #2
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 808c 	beq.w	8008e3c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d24:	4b41      	ldr	r3, [pc, #260]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d2e:	4b3f      	ldr	r3, [pc, #252]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d32:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d007      	beq.n	8008d4a <HAL_RCC_OscConfig+0x162>
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	2b18      	cmp	r3, #24
 8008d3e:	d137      	bne.n	8008db0 <HAL_RCC_OscConfig+0x1c8>
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	f003 0303 	and.w	r3, r3, #3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d132      	bne.n	8008db0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d4a:	4b38      	ldr	r3, [pc, #224]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 0304 	and.w	r3, r3, #4
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d005      	beq.n	8008d62 <HAL_RCC_OscConfig+0x17a>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e314      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008d62:	4b32      	ldr	r3, [pc, #200]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f023 0219 	bic.w	r2, r3, #25
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	492f      	ldr	r1, [pc, #188]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008d70:	4313      	orrs	r3, r2
 8008d72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d74:	f7fc fafc 	bl	8005370 <HAL_GetTick>
 8008d78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d7a:	e008      	b.n	8008d8e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d7c:	f7fc faf8 	bl	8005370 <HAL_GetTick>
 8008d80:	4602      	mov	r2, r0
 8008d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d901      	bls.n	8008d8e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	e2fe      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d8e:	4b27      	ldr	r3, [pc, #156]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0304 	and.w	r3, r3, #4
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d0f0      	beq.n	8008d7c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d9a:	4b24      	ldr	r3, [pc, #144]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	061b      	lsls	r3, r3, #24
 8008da8:	4920      	ldr	r1, [pc, #128]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008dae:	e045      	b.n	8008e3c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d026      	beq.n	8008e06 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008db8:	4b1c      	ldr	r3, [pc, #112]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f023 0219 	bic.w	r2, r3, #25
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	4919      	ldr	r1, [pc, #100]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dca:	f7fc fad1 	bl	8005370 <HAL_GetTick>
 8008dce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008dd0:	e008      	b.n	8008de4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008dd2:	f7fc facd 	bl	8005370 <HAL_GetTick>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d901      	bls.n	8008de4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008de0:	2303      	movs	r3, #3
 8008de2:	e2d3      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008de4:	4b11      	ldr	r3, [pc, #68]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0304 	and.w	r3, r3, #4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d0f0      	beq.n	8008dd2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008df0:	4b0e      	ldr	r3, [pc, #56]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	061b      	lsls	r3, r3, #24
 8008dfe:	490b      	ldr	r1, [pc, #44]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008e00:	4313      	orrs	r3, r2
 8008e02:	604b      	str	r3, [r1, #4]
 8008e04:	e01a      	b.n	8008e3c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e06:	4b09      	ldr	r3, [pc, #36]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a08      	ldr	r2, [pc, #32]	; (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008e0c:	f023 0301 	bic.w	r3, r3, #1
 8008e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e12:	f7fc faad 	bl	8005370 <HAL_GetTick>
 8008e16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e18:	e00a      	b.n	8008e30 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e1a:	f7fc faa9 	bl	8005370 <HAL_GetTick>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d903      	bls.n	8008e30 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e2af      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
 8008e2c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e30:	4b96      	ldr	r3, [pc, #600]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0304 	and.w	r3, r3, #4
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1ee      	bne.n	8008e1a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0310 	and.w	r3, r3, #16
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d06a      	beq.n	8008f1e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e48:	4b90      	ldr	r3, [pc, #576]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e50:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e52:	4b8e      	ldr	r3, [pc, #568]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e56:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	2b08      	cmp	r3, #8
 8008e5c:	d007      	beq.n	8008e6e <HAL_RCC_OscConfig+0x286>
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	2b18      	cmp	r3, #24
 8008e62:	d11b      	bne.n	8008e9c <HAL_RCC_OscConfig+0x2b4>
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	f003 0303 	and.w	r3, r3, #3
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d116      	bne.n	8008e9c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e6e:	4b87      	ldr	r3, [pc, #540]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d005      	beq.n	8008e86 <HAL_RCC_OscConfig+0x29e>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	2b80      	cmp	r3, #128	; 0x80
 8008e80:	d001      	beq.n	8008e86 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e282      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e86:	4b81      	ldr	r3, [pc, #516]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	061b      	lsls	r3, r3, #24
 8008e94:	497d      	ldr	r1, [pc, #500]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008e96:	4313      	orrs	r3, r2
 8008e98:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e9a:	e040      	b.n	8008f1e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	69db      	ldr	r3, [r3, #28]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d023      	beq.n	8008eec <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008ea4:	4b79      	ldr	r3, [pc, #484]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a78      	ldr	r2, [pc, #480]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eb0:	f7fc fa5e 	bl	8005370 <HAL_GetTick>
 8008eb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008eb6:	e008      	b.n	8008eca <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008eb8:	f7fc fa5a 	bl	8005370 <HAL_GetTick>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d901      	bls.n	8008eca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e260      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008eca:	4b70      	ldr	r3, [pc, #448]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d0f0      	beq.n	8008eb8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ed6:	4b6d      	ldr	r3, [pc, #436]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	061b      	lsls	r3, r3, #24
 8008ee4:	4969      	ldr	r1, [pc, #420]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	60cb      	str	r3, [r1, #12]
 8008eea:	e018      	b.n	8008f1e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008eec:	4b67      	ldr	r3, [pc, #412]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a66      	ldr	r2, [pc, #408]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ef8:	f7fc fa3a 	bl	8005370 <HAL_GetTick>
 8008efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008efe:	e008      	b.n	8008f12 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008f00:	f7fc fa36 	bl	8005370 <HAL_GetTick>
 8008f04:	4602      	mov	r2, r0
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d901      	bls.n	8008f12 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	e23c      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f12:	4b5e      	ldr	r3, [pc, #376]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1f0      	bne.n	8008f00 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 0308 	and.w	r3, r3, #8
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d036      	beq.n	8008f98 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d019      	beq.n	8008f66 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f32:	4b56      	ldr	r3, [pc, #344]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f36:	4a55      	ldr	r2, [pc, #340]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008f38:	f043 0301 	orr.w	r3, r3, #1
 8008f3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f3e:	f7fc fa17 	bl	8005370 <HAL_GetTick>
 8008f42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f44:	e008      	b.n	8008f58 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f46:	f7fc fa13 	bl	8005370 <HAL_GetTick>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d901      	bls.n	8008f58 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e219      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f58:	4b4c      	ldr	r3, [pc, #304]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f5c:	f003 0302 	and.w	r3, r3, #2
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d0f0      	beq.n	8008f46 <HAL_RCC_OscConfig+0x35e>
 8008f64:	e018      	b.n	8008f98 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f66:	4b49      	ldr	r3, [pc, #292]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f6a:	4a48      	ldr	r2, [pc, #288]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008f6c:	f023 0301 	bic.w	r3, r3, #1
 8008f70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f72:	f7fc f9fd 	bl	8005370 <HAL_GetTick>
 8008f76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f78:	e008      	b.n	8008f8c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f7a:	f7fc f9f9 	bl	8005370 <HAL_GetTick>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	1ad3      	subs	r3, r2, r3
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d901      	bls.n	8008f8c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	e1ff      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f8c:	4b3f      	ldr	r3, [pc, #252]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f90:	f003 0302 	and.w	r3, r3, #2
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1f0      	bne.n	8008f7a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0320 	and.w	r3, r3, #32
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d036      	beq.n	8009012 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d019      	beq.n	8008fe0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008fac:	4b37      	ldr	r3, [pc, #220]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a36      	ldr	r2, [pc, #216]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008fb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008fb6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008fb8:	f7fc f9da 	bl	8005370 <HAL_GetTick>
 8008fbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008fbe:	e008      	b.n	8008fd2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fc0:	f7fc f9d6 	bl	8005370 <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d901      	bls.n	8008fd2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e1dc      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008fd2:	4b2e      	ldr	r3, [pc, #184]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d0f0      	beq.n	8008fc0 <HAL_RCC_OscConfig+0x3d8>
 8008fde:	e018      	b.n	8009012 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008fe0:	4b2a      	ldr	r3, [pc, #168]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a29      	ldr	r2, [pc, #164]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8008fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008fec:	f7fc f9c0 	bl	8005370 <HAL_GetTick>
 8008ff0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ff2:	e008      	b.n	8009006 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ff4:	f7fc f9bc 	bl	8005370 <HAL_GetTick>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d901      	bls.n	8009006 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	e1c2      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009006:	4b21      	ldr	r3, [pc, #132]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1f0      	bne.n	8008ff4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 0304 	and.w	r3, r3, #4
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 8086 	beq.w	800912c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009020:	4b1b      	ldr	r3, [pc, #108]	; (8009090 <HAL_RCC_OscConfig+0x4a8>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a1a      	ldr	r2, [pc, #104]	; (8009090 <HAL_RCC_OscConfig+0x4a8>)
 8009026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800902a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800902c:	f7fc f9a0 	bl	8005370 <HAL_GetTick>
 8009030:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009032:	e008      	b.n	8009046 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009034:	f7fc f99c 	bl	8005370 <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	2b64      	cmp	r3, #100	; 0x64
 8009040:	d901      	bls.n	8009046 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e1a2      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009046:	4b12      	ldr	r3, [pc, #72]	; (8009090 <HAL_RCC_OscConfig+0x4a8>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800904e:	2b00      	cmp	r3, #0
 8009050:	d0f0      	beq.n	8009034 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d106      	bne.n	8009068 <HAL_RCC_OscConfig+0x480>
 800905a:	4b0c      	ldr	r3, [pc, #48]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 800905c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800905e:	4a0b      	ldr	r2, [pc, #44]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8009060:	f043 0301 	orr.w	r3, r3, #1
 8009064:	6713      	str	r3, [r2, #112]	; 0x70
 8009066:	e032      	b.n	80090ce <HAL_RCC_OscConfig+0x4e6>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d111      	bne.n	8009094 <HAL_RCC_OscConfig+0x4ac>
 8009070:	4b06      	ldr	r3, [pc, #24]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8009072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009074:	4a05      	ldr	r2, [pc, #20]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8009076:	f023 0301 	bic.w	r3, r3, #1
 800907a:	6713      	str	r3, [r2, #112]	; 0x70
 800907c:	4b03      	ldr	r3, [pc, #12]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 800907e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009080:	4a02      	ldr	r2, [pc, #8]	; (800908c <HAL_RCC_OscConfig+0x4a4>)
 8009082:	f023 0304 	bic.w	r3, r3, #4
 8009086:	6713      	str	r3, [r2, #112]	; 0x70
 8009088:	e021      	b.n	80090ce <HAL_RCC_OscConfig+0x4e6>
 800908a:	bf00      	nop
 800908c:	58024400 	.word	0x58024400
 8009090:	58024800 	.word	0x58024800
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	2b05      	cmp	r3, #5
 800909a:	d10c      	bne.n	80090b6 <HAL_RCC_OscConfig+0x4ce>
 800909c:	4b83      	ldr	r3, [pc, #524]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 800909e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a0:	4a82      	ldr	r2, [pc, #520]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 80090a2:	f043 0304 	orr.w	r3, r3, #4
 80090a6:	6713      	str	r3, [r2, #112]	; 0x70
 80090a8:	4b80      	ldr	r3, [pc, #512]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 80090aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ac:	4a7f      	ldr	r2, [pc, #508]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 80090ae:	f043 0301 	orr.w	r3, r3, #1
 80090b2:	6713      	str	r3, [r2, #112]	; 0x70
 80090b4:	e00b      	b.n	80090ce <HAL_RCC_OscConfig+0x4e6>
 80090b6:	4b7d      	ldr	r3, [pc, #500]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 80090b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ba:	4a7c      	ldr	r2, [pc, #496]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 80090bc:	f023 0301 	bic.w	r3, r3, #1
 80090c0:	6713      	str	r3, [r2, #112]	; 0x70
 80090c2:	4b7a      	ldr	r3, [pc, #488]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 80090c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c6:	4a79      	ldr	r2, [pc, #484]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 80090c8:	f023 0304 	bic.w	r3, r3, #4
 80090cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d015      	beq.n	8009102 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090d6:	f7fc f94b 	bl	8005370 <HAL_GetTick>
 80090da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090dc:	e00a      	b.n	80090f4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090de:	f7fc f947 	bl	8005370 <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d901      	bls.n	80090f4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e14b      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090f4:	4b6d      	ldr	r3, [pc, #436]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 80090f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f8:	f003 0302 	and.w	r3, r3, #2
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d0ee      	beq.n	80090de <HAL_RCC_OscConfig+0x4f6>
 8009100:	e014      	b.n	800912c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009102:	f7fc f935 	bl	8005370 <HAL_GetTick>
 8009106:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009108:	e00a      	b.n	8009120 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800910a:	f7fc f931 	bl	8005370 <HAL_GetTick>
 800910e:	4602      	mov	r2, r0
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	f241 3288 	movw	r2, #5000	; 0x1388
 8009118:	4293      	cmp	r3, r2
 800911a:	d901      	bls.n	8009120 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800911c:	2303      	movs	r3, #3
 800911e:	e135      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009120:	4b62      	ldr	r3, [pc, #392]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 8009122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009124:	f003 0302 	and.w	r3, r3, #2
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1ee      	bne.n	800910a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009130:	2b00      	cmp	r3, #0
 8009132:	f000 812a 	beq.w	800938a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009136:	4b5d      	ldr	r3, [pc, #372]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800913e:	2b18      	cmp	r3, #24
 8009140:	f000 80ba 	beq.w	80092b8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009148:	2b02      	cmp	r3, #2
 800914a:	f040 8095 	bne.w	8009278 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800914e:	4b57      	ldr	r3, [pc, #348]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a56      	ldr	r2, [pc, #344]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 8009154:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800915a:	f7fc f909 	bl	8005370 <HAL_GetTick>
 800915e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009160:	e008      	b.n	8009174 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009162:	f7fc f905 	bl	8005370 <HAL_GetTick>
 8009166:	4602      	mov	r2, r0
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	2b02      	cmp	r3, #2
 800916e:	d901      	bls.n	8009174 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009170:	2303      	movs	r3, #3
 8009172:	e10b      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009174:	4b4d      	ldr	r3, [pc, #308]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1f0      	bne.n	8009162 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009180:	4b4a      	ldr	r3, [pc, #296]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 8009182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009184:	4b4a      	ldr	r3, [pc, #296]	; (80092b0 <HAL_RCC_OscConfig+0x6c8>)
 8009186:	4013      	ands	r3, r2
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009190:	0112      	lsls	r2, r2, #4
 8009192:	430a      	orrs	r2, r1
 8009194:	4945      	ldr	r1, [pc, #276]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 8009196:	4313      	orrs	r3, r2
 8009198:	628b      	str	r3, [r1, #40]	; 0x28
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919e:	3b01      	subs	r3, #1
 80091a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a8:	3b01      	subs	r3, #1
 80091aa:	025b      	lsls	r3, r3, #9
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	431a      	orrs	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b4:	3b01      	subs	r3, #1
 80091b6:	041b      	lsls	r3, r3, #16
 80091b8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091bc:	431a      	orrs	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c2:	3b01      	subs	r3, #1
 80091c4:	061b      	lsls	r3, r3, #24
 80091c6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80091ca:	4938      	ldr	r1, [pc, #224]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 80091cc:	4313      	orrs	r3, r2
 80091ce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80091d0:	4b36      	ldr	r3, [pc, #216]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 80091d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d4:	4a35      	ldr	r2, [pc, #212]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 80091d6:	f023 0301 	bic.w	r3, r3, #1
 80091da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80091dc:	4b33      	ldr	r3, [pc, #204]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 80091de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091e0:	4b34      	ldr	r3, [pc, #208]	; (80092b4 <HAL_RCC_OscConfig+0x6cc>)
 80091e2:	4013      	ands	r3, r2
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80091e8:	00d2      	lsls	r2, r2, #3
 80091ea:	4930      	ldr	r1, [pc, #192]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 80091ec:	4313      	orrs	r3, r2
 80091ee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80091f0:	4b2e      	ldr	r3, [pc, #184]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 80091f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f4:	f023 020c 	bic.w	r2, r3, #12
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fc:	492b      	ldr	r1, [pc, #172]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 80091fe:	4313      	orrs	r3, r2
 8009200:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009202:	4b2a      	ldr	r3, [pc, #168]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 8009204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009206:	f023 0202 	bic.w	r2, r3, #2
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920e:	4927      	ldr	r1, [pc, #156]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 8009210:	4313      	orrs	r3, r2
 8009212:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009214:	4b25      	ldr	r3, [pc, #148]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 8009216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009218:	4a24      	ldr	r2, [pc, #144]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 800921a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800921e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009220:	4b22      	ldr	r3, [pc, #136]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 8009222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009224:	4a21      	ldr	r2, [pc, #132]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 8009226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800922a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800922c:	4b1f      	ldr	r3, [pc, #124]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 800922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009230:	4a1e      	ldr	r2, [pc, #120]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 8009232:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009236:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009238:	4b1c      	ldr	r3, [pc, #112]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 800923a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923c:	4a1b      	ldr	r2, [pc, #108]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 800923e:	f043 0301 	orr.w	r3, r3, #1
 8009242:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009244:	4b19      	ldr	r3, [pc, #100]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a18      	ldr	r2, [pc, #96]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 800924a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800924e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009250:	f7fc f88e 	bl	8005370 <HAL_GetTick>
 8009254:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009256:	e008      	b.n	800926a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009258:	f7fc f88a 	bl	8005370 <HAL_GetTick>
 800925c:	4602      	mov	r2, r0
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	2b02      	cmp	r3, #2
 8009264:	d901      	bls.n	800926a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009266:	2303      	movs	r3, #3
 8009268:	e090      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800926a:	4b10      	ldr	r3, [pc, #64]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d0f0      	beq.n	8009258 <HAL_RCC_OscConfig+0x670>
 8009276:	e088      	b.n	800938a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009278:	4b0c      	ldr	r3, [pc, #48]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a0b      	ldr	r2, [pc, #44]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 800927e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009284:	f7fc f874 	bl	8005370 <HAL_GetTick>
 8009288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800928a:	e008      	b.n	800929e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800928c:	f7fc f870 	bl	8005370 <HAL_GetTick>
 8009290:	4602      	mov	r2, r0
 8009292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009294:	1ad3      	subs	r3, r2, r3
 8009296:	2b02      	cmp	r3, #2
 8009298:	d901      	bls.n	800929e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800929a:	2303      	movs	r3, #3
 800929c:	e076      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800929e:	4b03      	ldr	r3, [pc, #12]	; (80092ac <HAL_RCC_OscConfig+0x6c4>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1f0      	bne.n	800928c <HAL_RCC_OscConfig+0x6a4>
 80092aa:	e06e      	b.n	800938a <HAL_RCC_OscConfig+0x7a2>
 80092ac:	58024400 	.word	0x58024400
 80092b0:	fffffc0c 	.word	0xfffffc0c
 80092b4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80092b8:	4b36      	ldr	r3, [pc, #216]	; (8009394 <HAL_RCC_OscConfig+0x7ac>)
 80092ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80092be:	4b35      	ldr	r3, [pc, #212]	; (8009394 <HAL_RCC_OscConfig+0x7ac>)
 80092c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d031      	beq.n	8009330 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	f003 0203 	and.w	r2, r3, #3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d12a      	bne.n	8009330 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	091b      	lsrs	r3, r3, #4
 80092de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d122      	bne.n	8009330 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d11a      	bne.n	8009330 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	0a5b      	lsrs	r3, r3, #9
 80092fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009306:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009308:	429a      	cmp	r2, r3
 800930a:	d111      	bne.n	8009330 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	0c1b      	lsrs	r3, r3, #16
 8009310:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009318:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800931a:	429a      	cmp	r2, r3
 800931c:	d108      	bne.n	8009330 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	0e1b      	lsrs	r3, r3, #24
 8009322:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800932a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800932c:	429a      	cmp	r2, r3
 800932e:	d001      	beq.n	8009334 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	e02b      	b.n	800938c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009334:	4b17      	ldr	r3, [pc, #92]	; (8009394 <HAL_RCC_OscConfig+0x7ac>)
 8009336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009338:	08db      	lsrs	r3, r3, #3
 800933a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800933e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009344:	693a      	ldr	r2, [r7, #16]
 8009346:	429a      	cmp	r2, r3
 8009348:	d01f      	beq.n	800938a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800934a:	4b12      	ldr	r3, [pc, #72]	; (8009394 <HAL_RCC_OscConfig+0x7ac>)
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	4a11      	ldr	r2, [pc, #68]	; (8009394 <HAL_RCC_OscConfig+0x7ac>)
 8009350:	f023 0301 	bic.w	r3, r3, #1
 8009354:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009356:	f7fc f80b 	bl	8005370 <HAL_GetTick>
 800935a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800935c:	bf00      	nop
 800935e:	f7fc f807 	bl	8005370 <HAL_GetTick>
 8009362:	4602      	mov	r2, r0
 8009364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009366:	4293      	cmp	r3, r2
 8009368:	d0f9      	beq.n	800935e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800936a:	4b0a      	ldr	r3, [pc, #40]	; (8009394 <HAL_RCC_OscConfig+0x7ac>)
 800936c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800936e:	4b0a      	ldr	r3, [pc, #40]	; (8009398 <HAL_RCC_OscConfig+0x7b0>)
 8009370:	4013      	ands	r3, r2
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009376:	00d2      	lsls	r2, r2, #3
 8009378:	4906      	ldr	r1, [pc, #24]	; (8009394 <HAL_RCC_OscConfig+0x7ac>)
 800937a:	4313      	orrs	r3, r2
 800937c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800937e:	4b05      	ldr	r3, [pc, #20]	; (8009394 <HAL_RCC_OscConfig+0x7ac>)
 8009380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009382:	4a04      	ldr	r2, [pc, #16]	; (8009394 <HAL_RCC_OscConfig+0x7ac>)
 8009384:	f043 0301 	orr.w	r3, r3, #1
 8009388:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3730      	adds	r7, #48	; 0x30
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	58024400 	.word	0x58024400
 8009398:	ffff0007 	.word	0xffff0007

0800939c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e19c      	b.n	80096ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80093b0:	4b8a      	ldr	r3, [pc, #552]	; (80095dc <HAL_RCC_ClockConfig+0x240>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 030f 	and.w	r3, r3, #15
 80093b8:	683a      	ldr	r2, [r7, #0]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d910      	bls.n	80093e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093be:	4b87      	ldr	r3, [pc, #540]	; (80095dc <HAL_RCC_ClockConfig+0x240>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f023 020f 	bic.w	r2, r3, #15
 80093c6:	4985      	ldr	r1, [pc, #532]	; (80095dc <HAL_RCC_ClockConfig+0x240>)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093ce:	4b83      	ldr	r3, [pc, #524]	; (80095dc <HAL_RCC_ClockConfig+0x240>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 030f 	and.w	r3, r3, #15
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d001      	beq.n	80093e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e184      	b.n	80096ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0304 	and.w	r3, r3, #4
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d010      	beq.n	800940e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	691a      	ldr	r2, [r3, #16]
 80093f0:	4b7b      	ldr	r3, [pc, #492]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d908      	bls.n	800940e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80093fc:	4b78      	ldr	r3, [pc, #480]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	4975      	ldr	r1, [pc, #468]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 800940a:	4313      	orrs	r3, r2
 800940c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0308 	and.w	r3, r3, #8
 8009416:	2b00      	cmp	r3, #0
 8009418:	d010      	beq.n	800943c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	695a      	ldr	r2, [r3, #20]
 800941e:	4b70      	ldr	r3, [pc, #448]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 8009420:	69db      	ldr	r3, [r3, #28]
 8009422:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009426:	429a      	cmp	r2, r3
 8009428:	d908      	bls.n	800943c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800942a:	4b6d      	ldr	r3, [pc, #436]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	496a      	ldr	r1, [pc, #424]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 8009438:	4313      	orrs	r3, r2
 800943a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 0310 	and.w	r3, r3, #16
 8009444:	2b00      	cmp	r3, #0
 8009446:	d010      	beq.n	800946a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	699a      	ldr	r2, [r3, #24]
 800944c:	4b64      	ldr	r3, [pc, #400]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 800944e:	69db      	ldr	r3, [r3, #28]
 8009450:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009454:	429a      	cmp	r2, r3
 8009456:	d908      	bls.n	800946a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009458:	4b61      	ldr	r3, [pc, #388]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 800945a:	69db      	ldr	r3, [r3, #28]
 800945c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	495e      	ldr	r1, [pc, #376]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 8009466:	4313      	orrs	r3, r2
 8009468:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0320 	and.w	r3, r3, #32
 8009472:	2b00      	cmp	r3, #0
 8009474:	d010      	beq.n	8009498 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	69da      	ldr	r2, [r3, #28]
 800947a:	4b59      	ldr	r3, [pc, #356]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 800947c:	6a1b      	ldr	r3, [r3, #32]
 800947e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009482:	429a      	cmp	r2, r3
 8009484:	d908      	bls.n	8009498 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009486:	4b56      	ldr	r3, [pc, #344]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 8009488:	6a1b      	ldr	r3, [r3, #32]
 800948a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	69db      	ldr	r3, [r3, #28]
 8009492:	4953      	ldr	r1, [pc, #332]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 8009494:	4313      	orrs	r3, r2
 8009496:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 0302 	and.w	r3, r3, #2
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d010      	beq.n	80094c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	68da      	ldr	r2, [r3, #12]
 80094a8:	4b4d      	ldr	r3, [pc, #308]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	f003 030f 	and.w	r3, r3, #15
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d908      	bls.n	80094c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094b4:	4b4a      	ldr	r3, [pc, #296]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	f023 020f 	bic.w	r2, r3, #15
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	4947      	ldr	r1, [pc, #284]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 80094c2:	4313      	orrs	r3, r2
 80094c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0301 	and.w	r3, r3, #1
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d055      	beq.n	800957e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80094d2:	4b43      	ldr	r3, [pc, #268]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	4940      	ldr	r1, [pc, #256]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 80094e0:	4313      	orrs	r3, r2
 80094e2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d107      	bne.n	80094fc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094ec:	4b3c      	ldr	r3, [pc, #240]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d121      	bne.n	800953c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e0f6      	b.n	80096ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	2b03      	cmp	r3, #3
 8009502:	d107      	bne.n	8009514 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009504:	4b36      	ldr	r3, [pc, #216]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d115      	bne.n	800953c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e0ea      	b.n	80096ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d107      	bne.n	800952c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800951c:	4b30      	ldr	r3, [pc, #192]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009524:	2b00      	cmp	r3, #0
 8009526:	d109      	bne.n	800953c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e0de      	b.n	80096ea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800952c:	4b2c      	ldr	r3, [pc, #176]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0304 	and.w	r3, r3, #4
 8009534:	2b00      	cmp	r3, #0
 8009536:	d101      	bne.n	800953c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e0d6      	b.n	80096ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800953c:	4b28      	ldr	r3, [pc, #160]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	f023 0207 	bic.w	r2, r3, #7
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	4925      	ldr	r1, [pc, #148]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 800954a:	4313      	orrs	r3, r2
 800954c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800954e:	f7fb ff0f 	bl	8005370 <HAL_GetTick>
 8009552:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009554:	e00a      	b.n	800956c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009556:	f7fb ff0b 	bl	8005370 <HAL_GetTick>
 800955a:	4602      	mov	r2, r0
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	f241 3288 	movw	r2, #5000	; 0x1388
 8009564:	4293      	cmp	r3, r2
 8009566:	d901      	bls.n	800956c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009568:	2303      	movs	r3, #3
 800956a:	e0be      	b.n	80096ea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800956c:	4b1c      	ldr	r3, [pc, #112]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	00db      	lsls	r3, r3, #3
 800957a:	429a      	cmp	r2, r3
 800957c:	d1eb      	bne.n	8009556 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 0302 	and.w	r3, r3, #2
 8009586:	2b00      	cmp	r3, #0
 8009588:	d010      	beq.n	80095ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68da      	ldr	r2, [r3, #12]
 800958e:	4b14      	ldr	r3, [pc, #80]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	f003 030f 	and.w	r3, r3, #15
 8009596:	429a      	cmp	r2, r3
 8009598:	d208      	bcs.n	80095ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800959a:	4b11      	ldr	r3, [pc, #68]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	f023 020f 	bic.w	r2, r3, #15
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	490e      	ldr	r1, [pc, #56]	; (80095e0 <HAL_RCC_ClockConfig+0x244>)
 80095a8:	4313      	orrs	r3, r2
 80095aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80095ac:	4b0b      	ldr	r3, [pc, #44]	; (80095dc <HAL_RCC_ClockConfig+0x240>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 030f 	and.w	r3, r3, #15
 80095b4:	683a      	ldr	r2, [r7, #0]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d214      	bcs.n	80095e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095ba:	4b08      	ldr	r3, [pc, #32]	; (80095dc <HAL_RCC_ClockConfig+0x240>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f023 020f 	bic.w	r2, r3, #15
 80095c2:	4906      	ldr	r1, [pc, #24]	; (80095dc <HAL_RCC_ClockConfig+0x240>)
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095ca:	4b04      	ldr	r3, [pc, #16]	; (80095dc <HAL_RCC_ClockConfig+0x240>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 030f 	and.w	r3, r3, #15
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d005      	beq.n	80095e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e086      	b.n	80096ea <HAL_RCC_ClockConfig+0x34e>
 80095dc:	52002000 	.word	0x52002000
 80095e0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 0304 	and.w	r3, r3, #4
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d010      	beq.n	8009612 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	691a      	ldr	r2, [r3, #16]
 80095f4:	4b3f      	ldr	r3, [pc, #252]	; (80096f4 <HAL_RCC_ClockConfig+0x358>)
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d208      	bcs.n	8009612 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009600:	4b3c      	ldr	r3, [pc, #240]	; (80096f4 <HAL_RCC_ClockConfig+0x358>)
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	4939      	ldr	r1, [pc, #228]	; (80096f4 <HAL_RCC_ClockConfig+0x358>)
 800960e:	4313      	orrs	r3, r2
 8009610:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 0308 	and.w	r3, r3, #8
 800961a:	2b00      	cmp	r3, #0
 800961c:	d010      	beq.n	8009640 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	695a      	ldr	r2, [r3, #20]
 8009622:	4b34      	ldr	r3, [pc, #208]	; (80096f4 <HAL_RCC_ClockConfig+0x358>)
 8009624:	69db      	ldr	r3, [r3, #28]
 8009626:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800962a:	429a      	cmp	r2, r3
 800962c:	d208      	bcs.n	8009640 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800962e:	4b31      	ldr	r3, [pc, #196]	; (80096f4 <HAL_RCC_ClockConfig+0x358>)
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	492e      	ldr	r1, [pc, #184]	; (80096f4 <HAL_RCC_ClockConfig+0x358>)
 800963c:	4313      	orrs	r3, r2
 800963e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0310 	and.w	r3, r3, #16
 8009648:	2b00      	cmp	r3, #0
 800964a:	d010      	beq.n	800966e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	699a      	ldr	r2, [r3, #24]
 8009650:	4b28      	ldr	r3, [pc, #160]	; (80096f4 <HAL_RCC_ClockConfig+0x358>)
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009658:	429a      	cmp	r2, r3
 800965a:	d208      	bcs.n	800966e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800965c:	4b25      	ldr	r3, [pc, #148]	; (80096f4 <HAL_RCC_ClockConfig+0x358>)
 800965e:	69db      	ldr	r3, [r3, #28]
 8009660:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	4922      	ldr	r1, [pc, #136]	; (80096f4 <HAL_RCC_ClockConfig+0x358>)
 800966a:	4313      	orrs	r3, r2
 800966c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 0320 	and.w	r3, r3, #32
 8009676:	2b00      	cmp	r3, #0
 8009678:	d010      	beq.n	800969c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	69da      	ldr	r2, [r3, #28]
 800967e:	4b1d      	ldr	r3, [pc, #116]	; (80096f4 <HAL_RCC_ClockConfig+0x358>)
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009686:	429a      	cmp	r2, r3
 8009688:	d208      	bcs.n	800969c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800968a:	4b1a      	ldr	r3, [pc, #104]	; (80096f4 <HAL_RCC_ClockConfig+0x358>)
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	4917      	ldr	r1, [pc, #92]	; (80096f4 <HAL_RCC_ClockConfig+0x358>)
 8009698:	4313      	orrs	r3, r2
 800969a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800969c:	f000 f834 	bl	8009708 <HAL_RCC_GetSysClockFreq>
 80096a0:	4602      	mov	r2, r0
 80096a2:	4b14      	ldr	r3, [pc, #80]	; (80096f4 <HAL_RCC_ClockConfig+0x358>)
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	0a1b      	lsrs	r3, r3, #8
 80096a8:	f003 030f 	and.w	r3, r3, #15
 80096ac:	4912      	ldr	r1, [pc, #72]	; (80096f8 <HAL_RCC_ClockConfig+0x35c>)
 80096ae:	5ccb      	ldrb	r3, [r1, r3]
 80096b0:	f003 031f 	and.w	r3, r3, #31
 80096b4:	fa22 f303 	lsr.w	r3, r2, r3
 80096b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80096ba:	4b0e      	ldr	r3, [pc, #56]	; (80096f4 <HAL_RCC_ClockConfig+0x358>)
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	f003 030f 	and.w	r3, r3, #15
 80096c2:	4a0d      	ldr	r2, [pc, #52]	; (80096f8 <HAL_RCC_ClockConfig+0x35c>)
 80096c4:	5cd3      	ldrb	r3, [r2, r3]
 80096c6:	f003 031f 	and.w	r3, r3, #31
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	fa22 f303 	lsr.w	r3, r2, r3
 80096d0:	4a0a      	ldr	r2, [pc, #40]	; (80096fc <HAL_RCC_ClockConfig+0x360>)
 80096d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80096d4:	4a0a      	ldr	r2, [pc, #40]	; (8009700 <HAL_RCC_ClockConfig+0x364>)
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80096da:	4b0a      	ldr	r3, [pc, #40]	; (8009704 <HAL_RCC_ClockConfig+0x368>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fb fdfc 	bl	80052dc <HAL_InitTick>
 80096e4:	4603      	mov	r3, r0
 80096e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3718      	adds	r7, #24
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	58024400 	.word	0x58024400
 80096f8:	0800f864 	.word	0x0800f864
 80096fc:	24000004 	.word	0x24000004
 8009700:	24000000 	.word	0x24000000
 8009704:	24000008 	.word	0x24000008

08009708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009708:	b480      	push	{r7}
 800970a:	b089      	sub	sp, #36	; 0x24
 800970c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800970e:	4bb3      	ldr	r3, [pc, #716]	; (80099dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009716:	2b18      	cmp	r3, #24
 8009718:	f200 8155 	bhi.w	80099c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800971c:	a201      	add	r2, pc, #4	; (adr r2, 8009724 <HAL_RCC_GetSysClockFreq+0x1c>)
 800971e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009722:	bf00      	nop
 8009724:	08009789 	.word	0x08009789
 8009728:	080099c7 	.word	0x080099c7
 800972c:	080099c7 	.word	0x080099c7
 8009730:	080099c7 	.word	0x080099c7
 8009734:	080099c7 	.word	0x080099c7
 8009738:	080099c7 	.word	0x080099c7
 800973c:	080099c7 	.word	0x080099c7
 8009740:	080099c7 	.word	0x080099c7
 8009744:	080097af 	.word	0x080097af
 8009748:	080099c7 	.word	0x080099c7
 800974c:	080099c7 	.word	0x080099c7
 8009750:	080099c7 	.word	0x080099c7
 8009754:	080099c7 	.word	0x080099c7
 8009758:	080099c7 	.word	0x080099c7
 800975c:	080099c7 	.word	0x080099c7
 8009760:	080099c7 	.word	0x080099c7
 8009764:	080097b5 	.word	0x080097b5
 8009768:	080099c7 	.word	0x080099c7
 800976c:	080099c7 	.word	0x080099c7
 8009770:	080099c7 	.word	0x080099c7
 8009774:	080099c7 	.word	0x080099c7
 8009778:	080099c7 	.word	0x080099c7
 800977c:	080099c7 	.word	0x080099c7
 8009780:	080099c7 	.word	0x080099c7
 8009784:	080097bb 	.word	0x080097bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009788:	4b94      	ldr	r3, [pc, #592]	; (80099dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 0320 	and.w	r3, r3, #32
 8009790:	2b00      	cmp	r3, #0
 8009792:	d009      	beq.n	80097a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009794:	4b91      	ldr	r3, [pc, #580]	; (80099dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	08db      	lsrs	r3, r3, #3
 800979a:	f003 0303 	and.w	r3, r3, #3
 800979e:	4a90      	ldr	r2, [pc, #576]	; (80099e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80097a0:	fa22 f303 	lsr.w	r3, r2, r3
 80097a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80097a6:	e111      	b.n	80099cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80097a8:	4b8d      	ldr	r3, [pc, #564]	; (80099e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80097aa:	61bb      	str	r3, [r7, #24]
      break;
 80097ac:	e10e      	b.n	80099cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80097ae:	4b8d      	ldr	r3, [pc, #564]	; (80099e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80097b0:	61bb      	str	r3, [r7, #24]
      break;
 80097b2:	e10b      	b.n	80099cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80097b4:	4b8c      	ldr	r3, [pc, #560]	; (80099e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80097b6:	61bb      	str	r3, [r7, #24]
      break;
 80097b8:	e108      	b.n	80099cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097ba:	4b88      	ldr	r3, [pc, #544]	; (80099dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097be:	f003 0303 	and.w	r3, r3, #3
 80097c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80097c4:	4b85      	ldr	r3, [pc, #532]	; (80099dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c8:	091b      	lsrs	r3, r3, #4
 80097ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80097d0:	4b82      	ldr	r3, [pc, #520]	; (80099dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80097da:	4b80      	ldr	r3, [pc, #512]	; (80099dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097de:	08db      	lsrs	r3, r3, #3
 80097e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	fb02 f303 	mul.w	r3, r2, r3
 80097ea:	ee07 3a90 	vmov	s15, r3
 80097ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 80e1 	beq.w	80099c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	2b02      	cmp	r3, #2
 8009802:	f000 8083 	beq.w	800990c <HAL_RCC_GetSysClockFreq+0x204>
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2b02      	cmp	r3, #2
 800980a:	f200 80a1 	bhi.w	8009950 <HAL_RCC_GetSysClockFreq+0x248>
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d003      	beq.n	800981c <HAL_RCC_GetSysClockFreq+0x114>
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d056      	beq.n	80098c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800981a:	e099      	b.n	8009950 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800981c:	4b6f      	ldr	r3, [pc, #444]	; (80099dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 0320 	and.w	r3, r3, #32
 8009824:	2b00      	cmp	r3, #0
 8009826:	d02d      	beq.n	8009884 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009828:	4b6c      	ldr	r3, [pc, #432]	; (80099dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	08db      	lsrs	r3, r3, #3
 800982e:	f003 0303 	and.w	r3, r3, #3
 8009832:	4a6b      	ldr	r2, [pc, #428]	; (80099e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009834:	fa22 f303 	lsr.w	r3, r2, r3
 8009838:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	ee07 3a90 	vmov	s15, r3
 8009840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	ee07 3a90 	vmov	s15, r3
 800984a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800984e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009852:	4b62      	ldr	r3, [pc, #392]	; (80099dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800985a:	ee07 3a90 	vmov	s15, r3
 800985e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009862:	ed97 6a02 	vldr	s12, [r7, #8]
 8009866:	eddf 5a61 	vldr	s11, [pc, #388]	; 80099ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800986a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800986e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800987a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800987e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009882:	e087      	b.n	8009994 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	ee07 3a90 	vmov	s15, r3
 800988a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800988e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80099f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009896:	4b51      	ldr	r3, [pc, #324]	; (80099dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800989e:	ee07 3a90 	vmov	s15, r3
 80098a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80098aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80099ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80098ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80098c6:	e065      	b.n	8009994 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	ee07 3a90 	vmov	s15, r3
 80098ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80099f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80098d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098da:	4b40      	ldr	r3, [pc, #256]	; (80099dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e2:	ee07 3a90 	vmov	s15, r3
 80098e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80098ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80099ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80098f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800990a:	e043      	b.n	8009994 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	ee07 3a90 	vmov	s15, r3
 8009912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009916:	eddf 6a38 	vldr	s13, [pc, #224]	; 80099f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800991a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800991e:	4b2f      	ldr	r3, [pc, #188]	; (80099dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009926:	ee07 3a90 	vmov	s15, r3
 800992a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800992e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009932:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80099ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8009936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800993a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800993e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800994e:	e021      	b.n	8009994 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	ee07 3a90 	vmov	s15, r3
 8009956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80099f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800995e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009962:	4b1e      	ldr	r3, [pc, #120]	; (80099dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996a:	ee07 3a90 	vmov	s15, r3
 800996e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009972:	ed97 6a02 	vldr	s12, [r7, #8]
 8009976:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80099ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800997a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800997e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800998a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009992:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009994:	4b11      	ldr	r3, [pc, #68]	; (80099dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009998:	0a5b      	lsrs	r3, r3, #9
 800999a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800999e:	3301      	adds	r3, #1
 80099a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	ee07 3a90 	vmov	s15, r3
 80099a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80099ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80099b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099b8:	ee17 3a90 	vmov	r3, s15
 80099bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80099be:	e005      	b.n	80099cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80099c0:	2300      	movs	r3, #0
 80099c2:	61bb      	str	r3, [r7, #24]
      break;
 80099c4:	e002      	b.n	80099cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80099c6:	4b07      	ldr	r3, [pc, #28]	; (80099e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80099c8:	61bb      	str	r3, [r7, #24]
      break;
 80099ca:	bf00      	nop
  }

  return sysclockfreq;
 80099cc:	69bb      	ldr	r3, [r7, #24]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3724      	adds	r7, #36	; 0x24
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	58024400 	.word	0x58024400
 80099e0:	03d09000 	.word	0x03d09000
 80099e4:	003d0900 	.word	0x003d0900
 80099e8:	007a1200 	.word	0x007a1200
 80099ec:	46000000 	.word	0x46000000
 80099f0:	4c742400 	.word	0x4c742400
 80099f4:	4a742400 	.word	0x4a742400
 80099f8:	4af42400 	.word	0x4af42400

080099fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009a02:	f7ff fe81 	bl	8009708 <HAL_RCC_GetSysClockFreq>
 8009a06:	4602      	mov	r2, r0
 8009a08:	4b10      	ldr	r3, [pc, #64]	; (8009a4c <HAL_RCC_GetHCLKFreq+0x50>)
 8009a0a:	699b      	ldr	r3, [r3, #24]
 8009a0c:	0a1b      	lsrs	r3, r3, #8
 8009a0e:	f003 030f 	and.w	r3, r3, #15
 8009a12:	490f      	ldr	r1, [pc, #60]	; (8009a50 <HAL_RCC_GetHCLKFreq+0x54>)
 8009a14:	5ccb      	ldrb	r3, [r1, r3]
 8009a16:	f003 031f 	and.w	r3, r3, #31
 8009a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a1e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009a20:	4b0a      	ldr	r3, [pc, #40]	; (8009a4c <HAL_RCC_GetHCLKFreq+0x50>)
 8009a22:	699b      	ldr	r3, [r3, #24]
 8009a24:	f003 030f 	and.w	r3, r3, #15
 8009a28:	4a09      	ldr	r2, [pc, #36]	; (8009a50 <HAL_RCC_GetHCLKFreq+0x54>)
 8009a2a:	5cd3      	ldrb	r3, [r2, r3]
 8009a2c:	f003 031f 	and.w	r3, r3, #31
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	fa22 f303 	lsr.w	r3, r2, r3
 8009a36:	4a07      	ldr	r2, [pc, #28]	; (8009a54 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a38:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a3a:	4a07      	ldr	r2, [pc, #28]	; (8009a58 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009a40:	4b04      	ldr	r3, [pc, #16]	; (8009a54 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a42:	681b      	ldr	r3, [r3, #0]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	58024400 	.word	0x58024400
 8009a50:	0800f864 	.word	0x0800f864
 8009a54:	24000004 	.word	0x24000004
 8009a58:	24000000 	.word	0x24000000

08009a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009a60:	f7ff ffcc 	bl	80099fc <HAL_RCC_GetHCLKFreq>
 8009a64:	4602      	mov	r2, r0
 8009a66:	4b06      	ldr	r3, [pc, #24]	; (8009a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a68:	69db      	ldr	r3, [r3, #28]
 8009a6a:	091b      	lsrs	r3, r3, #4
 8009a6c:	f003 0307 	and.w	r3, r3, #7
 8009a70:	4904      	ldr	r1, [pc, #16]	; (8009a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a72:	5ccb      	ldrb	r3, [r1, r3]
 8009a74:	f003 031f 	and.w	r3, r3, #31
 8009a78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	58024400 	.word	0x58024400
 8009a84:	0800f864 	.word	0x0800f864

08009a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009a8c:	f7ff ffb6 	bl	80099fc <HAL_RCC_GetHCLKFreq>
 8009a90:	4602      	mov	r2, r0
 8009a92:	4b06      	ldr	r3, [pc, #24]	; (8009aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a94:	69db      	ldr	r3, [r3, #28]
 8009a96:	0a1b      	lsrs	r3, r3, #8
 8009a98:	f003 0307 	and.w	r3, r3, #7
 8009a9c:	4904      	ldr	r1, [pc, #16]	; (8009ab0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a9e:	5ccb      	ldrb	r3, [r1, r3]
 8009aa0:	f003 031f 	and.w	r3, r3, #31
 8009aa4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	58024400 	.word	0x58024400
 8009ab0:	0800f864 	.word	0x0800f864

08009ab4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ab8:	b0c6      	sub	sp, #280	; 0x118
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009ad8:	2500      	movs	r5, #0
 8009ada:	ea54 0305 	orrs.w	r3, r4, r5
 8009ade:	d049      	beq.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ae6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009aea:	d02f      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009aec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009af0:	d828      	bhi.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009af2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009af6:	d01a      	beq.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009af8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009afc:	d822      	bhi.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d003      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b06:	d007      	beq.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009b08:	e01c      	b.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b0a:	4bab      	ldr	r3, [pc, #684]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0e:	4aaa      	ldr	r2, [pc, #680]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009b16:	e01a      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b1c:	3308      	adds	r3, #8
 8009b1e:	2102      	movs	r1, #2
 8009b20:	4618      	mov	r0, r3
 8009b22:	f001 fc25 	bl	800b370 <RCCEx_PLL2_Config>
 8009b26:	4603      	mov	r3, r0
 8009b28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009b2c:	e00f      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b32:	3328      	adds	r3, #40	; 0x28
 8009b34:	2102      	movs	r1, #2
 8009b36:	4618      	mov	r0, r3
 8009b38:	f001 fccc 	bl	800b4d4 <RCCEx_PLL3_Config>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009b42:	e004      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009b4a:	e000      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d10a      	bne.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009b56:	4b98      	ldr	r3, [pc, #608]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b5a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b64:	4a94      	ldr	r2, [pc, #592]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b66:	430b      	orrs	r3, r1
 8009b68:	6513      	str	r3, [r2, #80]	; 0x50
 8009b6a:	e003      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b70:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009b80:	f04f 0900 	mov.w	r9, #0
 8009b84:	ea58 0309 	orrs.w	r3, r8, r9
 8009b88:	d047      	beq.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b90:	2b04      	cmp	r3, #4
 8009b92:	d82a      	bhi.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009b94:	a201      	add	r2, pc, #4	; (adr r2, 8009b9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9a:	bf00      	nop
 8009b9c:	08009bb1 	.word	0x08009bb1
 8009ba0:	08009bbf 	.word	0x08009bbf
 8009ba4:	08009bd5 	.word	0x08009bd5
 8009ba8:	08009bf3 	.word	0x08009bf3
 8009bac:	08009bf3 	.word	0x08009bf3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bb0:	4b81      	ldr	r3, [pc, #516]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb4:	4a80      	ldr	r2, [pc, #512]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009bbc:	e01a      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bc2:	3308      	adds	r3, #8
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f001 fbd2 	bl	800b370 <RCCEx_PLL2_Config>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009bd2:	e00f      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bd8:	3328      	adds	r3, #40	; 0x28
 8009bda:	2100      	movs	r1, #0
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f001 fc79 	bl	800b4d4 <RCCEx_PLL3_Config>
 8009be2:	4603      	mov	r3, r0
 8009be4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009be8:	e004      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009bf0:	e000      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10a      	bne.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009bfc:	4b6e      	ldr	r3, [pc, #440]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c00:	f023 0107 	bic.w	r1, r3, #7
 8009c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c0a:	4a6b      	ldr	r2, [pc, #428]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c0c:	430b      	orrs	r3, r1
 8009c0e:	6513      	str	r3, [r2, #80]	; 0x50
 8009c10:	e003      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c16:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c22:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8009c26:	f04f 0b00 	mov.w	fp, #0
 8009c2a:	ea5a 030b 	orrs.w	r3, sl, fp
 8009c2e:	d05b      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009c38:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009c3c:	d03b      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009c3e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009c42:	d834      	bhi.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009c44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c48:	d037      	beq.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009c4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c4e:	d82e      	bhi.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009c50:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c54:	d033      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009c56:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c5a:	d828      	bhi.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009c5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c60:	d01a      	beq.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c66:	d822      	bhi.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d003      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009c6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c70:	d007      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009c72:	e01c      	b.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c74:	4b50      	ldr	r3, [pc, #320]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c78:	4a4f      	ldr	r2, [pc, #316]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c80:	e01e      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c86:	3308      	adds	r3, #8
 8009c88:	2100      	movs	r1, #0
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f001 fb70 	bl	800b370 <RCCEx_PLL2_Config>
 8009c90:	4603      	mov	r3, r0
 8009c92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009c96:	e013      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c9c:	3328      	adds	r3, #40	; 0x28
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f001 fc17 	bl	800b4d4 <RCCEx_PLL3_Config>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cac:	e008      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009cb4:	e004      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009cb6:	bf00      	nop
 8009cb8:	e002      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009cba:	bf00      	nop
 8009cbc:	e000      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d10b      	bne.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009cc8:	4b3b      	ldr	r3, [pc, #236]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ccc:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009cd8:	4a37      	ldr	r2, [pc, #220]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009cda:	430b      	orrs	r3, r1
 8009cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8009cde:	e003      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ce4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009cfe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009d02:	460b      	mov	r3, r1
 8009d04:	4313      	orrs	r3, r2
 8009d06:	d05d      	beq.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d0c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009d10:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009d14:	d03b      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009d16:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009d1a:	d834      	bhi.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009d1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d20:	d037      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009d22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d26:	d82e      	bhi.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009d28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d2c:	d033      	beq.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009d2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d32:	d828      	bhi.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009d34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d38:	d01a      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009d3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d3e:	d822      	bhi.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d003      	beq.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d48:	d007      	beq.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009d4a:	e01c      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d4c:	4b1a      	ldr	r3, [pc, #104]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d50:	4a19      	ldr	r2, [pc, #100]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d58:	e01e      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d5e:	3308      	adds	r3, #8
 8009d60:	2100      	movs	r1, #0
 8009d62:	4618      	mov	r0, r3
 8009d64:	f001 fb04 	bl	800b370 <RCCEx_PLL2_Config>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009d6e:	e013      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d74:	3328      	adds	r3, #40	; 0x28
 8009d76:	2100      	movs	r1, #0
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f001 fbab 	bl	800b4d4 <RCCEx_PLL3_Config>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d84:	e008      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009d8c:	e004      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009d8e:	bf00      	nop
 8009d90:	e002      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009d92:	bf00      	nop
 8009d94:	e000      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10d      	bne.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009da0:	4b05      	ldr	r3, [pc, #20]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009da4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009db0:	4a01      	ldr	r2, [pc, #4]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009db2:	430b      	orrs	r3, r1
 8009db4:	6593      	str	r3, [r2, #88]	; 0x58
 8009db6:	e005      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009db8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009dc0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dcc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009dd0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009dda:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009dde:	460b      	mov	r3, r1
 8009de0:	4313      	orrs	r3, r2
 8009de2:	d03a      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dea:	2b30      	cmp	r3, #48	; 0x30
 8009dec:	d01f      	beq.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009dee:	2b30      	cmp	r3, #48	; 0x30
 8009df0:	d819      	bhi.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009df2:	2b20      	cmp	r3, #32
 8009df4:	d00c      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009df6:	2b20      	cmp	r3, #32
 8009df8:	d815      	bhi.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d019      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009dfe:	2b10      	cmp	r3, #16
 8009e00:	d111      	bne.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e02:	4baa      	ldr	r3, [pc, #680]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e06:	4aa9      	ldr	r2, [pc, #676]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009e0e:	e011      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e14:	3308      	adds	r3, #8
 8009e16:	2102      	movs	r1, #2
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f001 faa9 	bl	800b370 <RCCEx_PLL2_Config>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009e24:	e006      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009e2c:	e002      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009e2e:	bf00      	nop
 8009e30:	e000      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10a      	bne.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009e3c:	4b9b      	ldr	r3, [pc, #620]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e40:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e4a:	4a98      	ldr	r2, [pc, #608]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009e4c:	430b      	orrs	r3, r1
 8009e4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e50:	e003      	b.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e56:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e62:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009e66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009e70:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009e74:	460b      	mov	r3, r1
 8009e76:	4313      	orrs	r3, r2
 8009e78:	d051      	beq.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e84:	d035      	beq.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009e86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e8a:	d82e      	bhi.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009e8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e90:	d031      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009e92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e96:	d828      	bhi.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e9c:	d01a      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ea2:	d822      	bhi.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d003      	beq.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eac:	d007      	beq.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009eae:	e01c      	b.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eb0:	4b7e      	ldr	r3, [pc, #504]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb4:	4a7d      	ldr	r2, [pc, #500]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009ebc:	e01c      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ec2:	3308      	adds	r3, #8
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f001 fa52 	bl	800b370 <RCCEx_PLL2_Config>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009ed2:	e011      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ed8:	3328      	adds	r3, #40	; 0x28
 8009eda:	2100      	movs	r1, #0
 8009edc:	4618      	mov	r0, r3
 8009ede:	f001 faf9 	bl	800b4d4 <RCCEx_PLL3_Config>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009ee8:	e006      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009ef0:	e002      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009ef2:	bf00      	nop
 8009ef4:	e000      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10a      	bne.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009f00:	4b6a      	ldr	r3, [pc, #424]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f04:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f0e:	4a67      	ldr	r2, [pc, #412]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f10:	430b      	orrs	r3, r1
 8009f12:	6513      	str	r3, [r2, #80]	; 0x50
 8009f14:	e003      	b.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f1a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f26:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009f2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f2e:	2300      	movs	r3, #0
 8009f30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f34:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009f38:	460b      	mov	r3, r1
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	d053      	beq.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f48:	d033      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009f4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f4e:	d82c      	bhi.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009f50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f54:	d02f      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009f56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f5a:	d826      	bhi.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009f5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009f60:	d02b      	beq.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009f62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009f66:	d820      	bhi.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009f68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f6c:	d012      	beq.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009f6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f72:	d81a      	bhi.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d022      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f7c:	d115      	bne.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f82:	3308      	adds	r3, #8
 8009f84:	2101      	movs	r1, #1
 8009f86:	4618      	mov	r0, r3
 8009f88:	f001 f9f2 	bl	800b370 <RCCEx_PLL2_Config>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009f92:	e015      	b.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f98:	3328      	adds	r3, #40	; 0x28
 8009f9a:	2101      	movs	r1, #1
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f001 fa99 	bl	800b4d4 <RCCEx_PLL3_Config>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009fa8:	e00a      	b.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009fb0:	e006      	b.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009fb2:	bf00      	nop
 8009fb4:	e004      	b.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009fb6:	bf00      	nop
 8009fb8:	e002      	b.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009fba:	bf00      	nop
 8009fbc:	e000      	b.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10a      	bne.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009fc8:	4b38      	ldr	r3, [pc, #224]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fcc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fd6:	4a35      	ldr	r2, [pc, #212]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009fd8:	430b      	orrs	r3, r1
 8009fda:	6513      	str	r3, [r2, #80]	; 0x50
 8009fdc:	e003      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fde:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fe2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fee:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ffc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a000:	460b      	mov	r3, r1
 800a002:	4313      	orrs	r3, r2
 800a004:	d058      	beq.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a00a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a00e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a012:	d033      	beq.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a018:	d82c      	bhi.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a01a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a01e:	d02f      	beq.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a024:	d826      	bhi.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a026:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a02a:	d02b      	beq.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a02c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a030:	d820      	bhi.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a032:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a036:	d012      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a03c:	d81a      	bhi.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d022      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a042:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a046:	d115      	bne.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a04c:	3308      	adds	r3, #8
 800a04e:	2101      	movs	r1, #1
 800a050:	4618      	mov	r0, r3
 800a052:	f001 f98d 	bl	800b370 <RCCEx_PLL2_Config>
 800a056:	4603      	mov	r3, r0
 800a058:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a05c:	e015      	b.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a062:	3328      	adds	r3, #40	; 0x28
 800a064:	2101      	movs	r1, #1
 800a066:	4618      	mov	r0, r3
 800a068:	f001 fa34 	bl	800b4d4 <RCCEx_PLL3_Config>
 800a06c:	4603      	mov	r3, r0
 800a06e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a072:	e00a      	b.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a07a:	e006      	b.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a07c:	bf00      	nop
 800a07e:	e004      	b.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a080:	bf00      	nop
 800a082:	e002      	b.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a084:	bf00      	nop
 800a086:	e000      	b.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a08a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10e      	bne.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a092:	4b06      	ldr	r3, [pc, #24]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a096:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a09a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a09e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a0a2:	4a02      	ldr	r2, [pc, #8]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0a4:	430b      	orrs	r3, r1
 800a0a6:	6593      	str	r3, [r2, #88]	; 0x58
 800a0a8:	e006      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a0aa:	bf00      	nop
 800a0ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a0b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a0b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a0c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a0ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	d037      	beq.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0e2:	d00e      	beq.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a0e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0e8:	d816      	bhi.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d018      	beq.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a0ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0f2:	d111      	bne.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0f4:	4bc4      	ldr	r3, [pc, #784]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f8:	4ac3      	ldr	r2, [pc, #780]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a0fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a100:	e00f      	b.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a106:	3308      	adds	r3, #8
 800a108:	2101      	movs	r1, #1
 800a10a:	4618      	mov	r0, r3
 800a10c:	f001 f930 	bl	800b370 <RCCEx_PLL2_Config>
 800a110:	4603      	mov	r3, r0
 800a112:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a116:	e004      	b.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a11e:	e000      	b.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a120:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a122:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a126:	2b00      	cmp	r3, #0
 800a128:	d10a      	bne.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a12a:	4bb7      	ldr	r3, [pc, #732]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a12c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a12e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a138:	4ab3      	ldr	r2, [pc, #716]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a13a:	430b      	orrs	r3, r1
 800a13c:	6513      	str	r3, [r2, #80]	; 0x50
 800a13e:	e003      	b.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a140:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a144:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a150:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a154:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a158:	2300      	movs	r3, #0
 800a15a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a15e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a162:	460b      	mov	r3, r1
 800a164:	4313      	orrs	r3, r2
 800a166:	d039      	beq.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a16c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a16e:	2b03      	cmp	r3, #3
 800a170:	d81c      	bhi.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a172:	a201      	add	r2, pc, #4	; (adr r2, 800a178 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a178:	0800a1b5 	.word	0x0800a1b5
 800a17c:	0800a189 	.word	0x0800a189
 800a180:	0800a197 	.word	0x0800a197
 800a184:	0800a1b5 	.word	0x0800a1b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a188:	4b9f      	ldr	r3, [pc, #636]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18c:	4a9e      	ldr	r2, [pc, #632]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a18e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a192:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a194:	e00f      	b.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a19a:	3308      	adds	r3, #8
 800a19c:	2102      	movs	r1, #2
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f001 f8e6 	bl	800b370 <RCCEx_PLL2_Config>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a1aa:	e004      	b.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a1b2:	e000      	b.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a1b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10a      	bne.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a1be:	4b92      	ldr	r3, [pc, #584]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a1c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1c2:	f023 0103 	bic.w	r1, r3, #3
 800a1c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1cc:	4a8e      	ldr	r2, [pc, #568]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a1ce:	430b      	orrs	r3, r1
 800a1d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a1d2:	e003      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a1e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	f000 8099 	beq.w	800a330 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a1fe:	4b83      	ldr	r3, [pc, #524]	; (800a40c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a82      	ldr	r2, [pc, #520]	; (800a40c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a208:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a20a:	f7fb f8b1 	bl	8005370 <HAL_GetTick>
 800a20e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a212:	e00b      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a214:	f7fb f8ac 	bl	8005370 <HAL_GetTick>
 800a218:	4602      	mov	r2, r0
 800a21a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	2b64      	cmp	r3, #100	; 0x64
 800a222:	d903      	bls.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a224:	2303      	movs	r3, #3
 800a226:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a22a:	e005      	b.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a22c:	4b77      	ldr	r3, [pc, #476]	; (800a40c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a234:	2b00      	cmp	r3, #0
 800a236:	d0ed      	beq.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a238:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d173      	bne.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a240:	4b71      	ldr	r3, [pc, #452]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a242:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a248:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a24c:	4053      	eors	r3, r2
 800a24e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a252:	2b00      	cmp	r3, #0
 800a254:	d015      	beq.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a256:	4b6c      	ldr	r3, [pc, #432]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a25a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a25e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a262:	4b69      	ldr	r3, [pc, #420]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a266:	4a68      	ldr	r2, [pc, #416]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a26c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a26e:	4b66      	ldr	r3, [pc, #408]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a272:	4a65      	ldr	r2, [pc, #404]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a278:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a27a:	4a63      	ldr	r2, [pc, #396]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a27c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a280:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a286:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a28a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a28e:	d118      	bne.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a290:	f7fb f86e 	bl	8005370 <HAL_GetTick>
 800a294:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a298:	e00d      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a29a:	f7fb f869 	bl	8005370 <HAL_GetTick>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a2a4:	1ad2      	subs	r2, r2, r3
 800a2a6:	f241 3388 	movw	r3, #5000	; 0x1388
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d903      	bls.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800a2b4:	e005      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2b6:	4b54      	ldr	r3, [pc, #336]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ba:	f003 0302 	and.w	r3, r3, #2
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d0eb      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a2c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d129      	bne.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a2d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2da:	d10e      	bne.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a2dc:	4b4a      	ldr	r3, [pc, #296]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a2ec:	091a      	lsrs	r2, r3, #4
 800a2ee:	4b48      	ldr	r3, [pc, #288]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	4a45      	ldr	r2, [pc, #276]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2f4:	430b      	orrs	r3, r1
 800a2f6:	6113      	str	r3, [r2, #16]
 800a2f8:	e005      	b.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a2fa:	4b43      	ldr	r3, [pc, #268]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2fc:	691b      	ldr	r3, [r3, #16]
 800a2fe:	4a42      	ldr	r2, [pc, #264]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a300:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a304:	6113      	str	r3, [r2, #16]
 800a306:	4b40      	ldr	r3, [pc, #256]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a308:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a30a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a30e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a316:	4a3c      	ldr	r2, [pc, #240]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a318:	430b      	orrs	r3, r1
 800a31a:	6713      	str	r3, [r2, #112]	; 0x70
 800a31c:	e008      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a31e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a322:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800a326:	e003      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a328:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a32c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	f002 0301 	and.w	r3, r2, #1
 800a33c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a340:	2300      	movs	r3, #0
 800a342:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a346:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a34a:	460b      	mov	r3, r1
 800a34c:	4313      	orrs	r3, r2
 800a34e:	f000 808f 	beq.w	800a470 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a356:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a358:	2b28      	cmp	r3, #40	; 0x28
 800a35a:	d871      	bhi.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a35c:	a201      	add	r2, pc, #4	; (adr r2, 800a364 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a35e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a362:	bf00      	nop
 800a364:	0800a449 	.word	0x0800a449
 800a368:	0800a441 	.word	0x0800a441
 800a36c:	0800a441 	.word	0x0800a441
 800a370:	0800a441 	.word	0x0800a441
 800a374:	0800a441 	.word	0x0800a441
 800a378:	0800a441 	.word	0x0800a441
 800a37c:	0800a441 	.word	0x0800a441
 800a380:	0800a441 	.word	0x0800a441
 800a384:	0800a415 	.word	0x0800a415
 800a388:	0800a441 	.word	0x0800a441
 800a38c:	0800a441 	.word	0x0800a441
 800a390:	0800a441 	.word	0x0800a441
 800a394:	0800a441 	.word	0x0800a441
 800a398:	0800a441 	.word	0x0800a441
 800a39c:	0800a441 	.word	0x0800a441
 800a3a0:	0800a441 	.word	0x0800a441
 800a3a4:	0800a42b 	.word	0x0800a42b
 800a3a8:	0800a441 	.word	0x0800a441
 800a3ac:	0800a441 	.word	0x0800a441
 800a3b0:	0800a441 	.word	0x0800a441
 800a3b4:	0800a441 	.word	0x0800a441
 800a3b8:	0800a441 	.word	0x0800a441
 800a3bc:	0800a441 	.word	0x0800a441
 800a3c0:	0800a441 	.word	0x0800a441
 800a3c4:	0800a449 	.word	0x0800a449
 800a3c8:	0800a441 	.word	0x0800a441
 800a3cc:	0800a441 	.word	0x0800a441
 800a3d0:	0800a441 	.word	0x0800a441
 800a3d4:	0800a441 	.word	0x0800a441
 800a3d8:	0800a441 	.word	0x0800a441
 800a3dc:	0800a441 	.word	0x0800a441
 800a3e0:	0800a441 	.word	0x0800a441
 800a3e4:	0800a449 	.word	0x0800a449
 800a3e8:	0800a441 	.word	0x0800a441
 800a3ec:	0800a441 	.word	0x0800a441
 800a3f0:	0800a441 	.word	0x0800a441
 800a3f4:	0800a441 	.word	0x0800a441
 800a3f8:	0800a441 	.word	0x0800a441
 800a3fc:	0800a441 	.word	0x0800a441
 800a400:	0800a441 	.word	0x0800a441
 800a404:	0800a449 	.word	0x0800a449
 800a408:	58024400 	.word	0x58024400
 800a40c:	58024800 	.word	0x58024800
 800a410:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a418:	3308      	adds	r3, #8
 800a41a:	2101      	movs	r1, #1
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 ffa7 	bl	800b370 <RCCEx_PLL2_Config>
 800a422:	4603      	mov	r3, r0
 800a424:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a428:	e00f      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a42e:	3328      	adds	r3, #40	; 0x28
 800a430:	2101      	movs	r1, #1
 800a432:	4618      	mov	r0, r3
 800a434:	f001 f84e 	bl	800b4d4 <RCCEx_PLL3_Config>
 800a438:	4603      	mov	r3, r0
 800a43a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a43e:	e004      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a446:	e000      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a44a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10a      	bne.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a452:	4bbf      	ldr	r3, [pc, #764]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a456:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a45e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a460:	4abb      	ldr	r2, [pc, #748]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a462:	430b      	orrs	r3, r1
 800a464:	6553      	str	r3, [r2, #84]	; 0x54
 800a466:	e003      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a468:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a46c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a478:	f002 0302 	and.w	r3, r2, #2
 800a47c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a480:	2300      	movs	r3, #0
 800a482:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a486:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a48a:	460b      	mov	r3, r1
 800a48c:	4313      	orrs	r3, r2
 800a48e:	d041      	beq.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a496:	2b05      	cmp	r3, #5
 800a498:	d824      	bhi.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a49a:	a201      	add	r2, pc, #4	; (adr r2, 800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a0:	0800a4ed 	.word	0x0800a4ed
 800a4a4:	0800a4b9 	.word	0x0800a4b9
 800a4a8:	0800a4cf 	.word	0x0800a4cf
 800a4ac:	0800a4ed 	.word	0x0800a4ed
 800a4b0:	0800a4ed 	.word	0x0800a4ed
 800a4b4:	0800a4ed 	.word	0x0800a4ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4bc:	3308      	adds	r3, #8
 800a4be:	2101      	movs	r1, #1
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f000 ff55 	bl	800b370 <RCCEx_PLL2_Config>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a4cc:	e00f      	b.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a4ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4d2:	3328      	adds	r3, #40	; 0x28
 800a4d4:	2101      	movs	r1, #1
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f000 fffc 	bl	800b4d4 <RCCEx_PLL3_Config>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a4e2:	e004      	b.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a4ea:	e000      	b.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a4ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d10a      	bne.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a4f6:	4b96      	ldr	r3, [pc, #600]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a4f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4fa:	f023 0107 	bic.w	r1, r3, #7
 800a4fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a504:	4a92      	ldr	r2, [pc, #584]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a506:	430b      	orrs	r3, r1
 800a508:	6553      	str	r3, [r2, #84]	; 0x54
 800a50a:	e003      	b.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a50c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a510:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	f002 0304 	and.w	r3, r2, #4
 800a520:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a524:	2300      	movs	r3, #0
 800a526:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a52a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a52e:	460b      	mov	r3, r1
 800a530:	4313      	orrs	r3, r2
 800a532:	d044      	beq.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a53c:	2b05      	cmp	r3, #5
 800a53e:	d825      	bhi.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a540:	a201      	add	r2, pc, #4	; (adr r2, 800a548 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a546:	bf00      	nop
 800a548:	0800a595 	.word	0x0800a595
 800a54c:	0800a561 	.word	0x0800a561
 800a550:	0800a577 	.word	0x0800a577
 800a554:	0800a595 	.word	0x0800a595
 800a558:	0800a595 	.word	0x0800a595
 800a55c:	0800a595 	.word	0x0800a595
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a564:	3308      	adds	r3, #8
 800a566:	2101      	movs	r1, #1
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 ff01 	bl	800b370 <RCCEx_PLL2_Config>
 800a56e:	4603      	mov	r3, r0
 800a570:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a574:	e00f      	b.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a57a:	3328      	adds	r3, #40	; 0x28
 800a57c:	2101      	movs	r1, #1
 800a57e:	4618      	mov	r0, r3
 800a580:	f000 ffa8 	bl	800b4d4 <RCCEx_PLL3_Config>
 800a584:	4603      	mov	r3, r0
 800a586:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a58a:	e004      	b.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a592:	e000      	b.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a594:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a596:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d10b      	bne.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a59e:	4b6c      	ldr	r3, [pc, #432]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a5a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5a2:	f023 0107 	bic.w	r1, r3, #7
 800a5a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5ae:	4a68      	ldr	r2, [pc, #416]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a5b0:	430b      	orrs	r3, r1
 800a5b2:	6593      	str	r3, [r2, #88]	; 0x58
 800a5b4:	e003      	b.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a5ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a5be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	f002 0320 	and.w	r3, r2, #32
 800a5ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a5d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	d055      	beq.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5ea:	d033      	beq.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a5ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5f0:	d82c      	bhi.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a5f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5f6:	d02f      	beq.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a5f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5fc:	d826      	bhi.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a5fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a602:	d02b      	beq.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a604:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a608:	d820      	bhi.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a60a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a60e:	d012      	beq.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a614:	d81a      	bhi.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a616:	2b00      	cmp	r3, #0
 800a618:	d022      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a61a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a61e:	d115      	bne.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a624:	3308      	adds	r3, #8
 800a626:	2100      	movs	r1, #0
 800a628:	4618      	mov	r0, r3
 800a62a:	f000 fea1 	bl	800b370 <RCCEx_PLL2_Config>
 800a62e:	4603      	mov	r3, r0
 800a630:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a634:	e015      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a63a:	3328      	adds	r3, #40	; 0x28
 800a63c:	2102      	movs	r1, #2
 800a63e:	4618      	mov	r0, r3
 800a640:	f000 ff48 	bl	800b4d4 <RCCEx_PLL3_Config>
 800a644:	4603      	mov	r3, r0
 800a646:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a64a:	e00a      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a652:	e006      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a654:	bf00      	nop
 800a656:	e004      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a658:	bf00      	nop
 800a65a:	e002      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a65c:	bf00      	nop
 800a65e:	e000      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a660:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a662:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10b      	bne.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a66a:	4b39      	ldr	r3, [pc, #228]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a66c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a66e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a67a:	4a35      	ldr	r2, [pc, #212]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a67c:	430b      	orrs	r3, r1
 800a67e:	6553      	str	r3, [r2, #84]	; 0x54
 800a680:	e003      	b.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a682:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a686:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a68a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a696:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a69a:	2300      	movs	r3, #0
 800a69c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a6a0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	d058      	beq.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a6aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a6b6:	d033      	beq.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a6b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a6bc:	d82c      	bhi.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a6be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6c2:	d02f      	beq.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a6c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6c8:	d826      	bhi.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a6ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a6ce:	d02b      	beq.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a6d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a6d4:	d820      	bhi.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a6d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6da:	d012      	beq.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a6dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6e0:	d81a      	bhi.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d022      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a6e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6ea:	d115      	bne.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f0:	3308      	adds	r3, #8
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 fe3b 	bl	800b370 <RCCEx_PLL2_Config>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a700:	e015      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a706:	3328      	adds	r3, #40	; 0x28
 800a708:	2102      	movs	r1, #2
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 fee2 	bl	800b4d4 <RCCEx_PLL3_Config>
 800a710:	4603      	mov	r3, r0
 800a712:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a716:	e00a      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a71e:	e006      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a720:	bf00      	nop
 800a722:	e004      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a724:	bf00      	nop
 800a726:	e002      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a728:	bf00      	nop
 800a72a:	e000      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a72c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a72e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a732:	2b00      	cmp	r3, #0
 800a734:	d10e      	bne.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a736:	4b06      	ldr	r3, [pc, #24]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a73a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a742:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a746:	4a02      	ldr	r2, [pc, #8]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a748:	430b      	orrs	r3, r1
 800a74a:	6593      	str	r3, [r2, #88]	; 0x58
 800a74c:	e006      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a74e:	bf00      	nop
 800a750:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a754:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a758:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a764:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a768:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a76c:	2300      	movs	r3, #0
 800a76e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a772:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a776:	460b      	mov	r3, r1
 800a778:	4313      	orrs	r3, r2
 800a77a:	d055      	beq.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a780:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a784:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a788:	d033      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a78a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a78e:	d82c      	bhi.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a794:	d02f      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a79a:	d826      	bhi.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a79c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a7a0:	d02b      	beq.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a7a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a7a6:	d820      	bhi.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a7a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7ac:	d012      	beq.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a7ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7b2:	d81a      	bhi.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d022      	beq.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a7b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7bc:	d115      	bne.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7c2:	3308      	adds	r3, #8
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f000 fdd2 	bl	800b370 <RCCEx_PLL2_Config>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a7d2:	e015      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7d8:	3328      	adds	r3, #40	; 0x28
 800a7da:	2102      	movs	r1, #2
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f000 fe79 	bl	800b4d4 <RCCEx_PLL3_Config>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a7e8:	e00a      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a7f0:	e006      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a7f2:	bf00      	nop
 800a7f4:	e004      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a7f6:	bf00      	nop
 800a7f8:	e002      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a7fa:	bf00      	nop
 800a7fc:	e000      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a7fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a800:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10b      	bne.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a808:	4ba0      	ldr	r3, [pc, #640]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a80a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a80c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a818:	4a9c      	ldr	r2, [pc, #624]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a81a:	430b      	orrs	r3, r1
 800a81c:	6593      	str	r3, [r2, #88]	; 0x58
 800a81e:	e003      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a820:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a824:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a830:	f002 0308 	and.w	r3, r2, #8
 800a834:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a838:	2300      	movs	r3, #0
 800a83a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a83e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a842:	460b      	mov	r3, r1
 800a844:	4313      	orrs	r3, r2
 800a846:	d01e      	beq.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a84c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a854:	d10c      	bne.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a85a:	3328      	adds	r3, #40	; 0x28
 800a85c:	2102      	movs	r1, #2
 800a85e:	4618      	mov	r0, r3
 800a860:	f000 fe38 	bl	800b4d4 <RCCEx_PLL3_Config>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d002      	beq.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a870:	4b86      	ldr	r3, [pc, #536]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a874:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a87c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a880:	4a82      	ldr	r2, [pc, #520]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a882:	430b      	orrs	r3, r1
 800a884:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	f002 0310 	and.w	r3, r2, #16
 800a892:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a896:	2300      	movs	r3, #0
 800a898:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a89c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	d01e      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8b2:	d10c      	bne.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b8:	3328      	adds	r3, #40	; 0x28
 800a8ba:	2102      	movs	r1, #2
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f000 fe09 	bl	800b4d4 <RCCEx_PLL3_Config>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d002      	beq.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a8ce:	4b6f      	ldr	r3, [pc, #444]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a8d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a8d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8de:	4a6b      	ldr	r2, [pc, #428]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a8e0:	430b      	orrs	r3, r1
 800a8e2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a8f0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a8f6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	d03e      	beq.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a904:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a908:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a90c:	d022      	beq.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a90e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a912:	d81b      	bhi.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a914:	2b00      	cmp	r3, #0
 800a916:	d003      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a91c:	d00b      	beq.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a91e:	e015      	b.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a924:	3308      	adds	r3, #8
 800a926:	2100      	movs	r1, #0
 800a928:	4618      	mov	r0, r3
 800a92a:	f000 fd21 	bl	800b370 <RCCEx_PLL2_Config>
 800a92e:	4603      	mov	r3, r0
 800a930:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a934:	e00f      	b.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a93a:	3328      	adds	r3, #40	; 0x28
 800a93c:	2102      	movs	r1, #2
 800a93e:	4618      	mov	r0, r3
 800a940:	f000 fdc8 	bl	800b4d4 <RCCEx_PLL3_Config>
 800a944:	4603      	mov	r3, r0
 800a946:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a94a:	e004      	b.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a952:	e000      	b.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a954:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a956:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d10b      	bne.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a95e:	4b4b      	ldr	r3, [pc, #300]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a962:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a96a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a96e:	4a47      	ldr	r2, [pc, #284]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a970:	430b      	orrs	r3, r1
 800a972:	6593      	str	r3, [r2, #88]	; 0x58
 800a974:	e003      	b.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a976:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a97a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a97e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a986:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a98a:	673b      	str	r3, [r7, #112]	; 0x70
 800a98c:	2300      	movs	r3, #0
 800a98e:	677b      	str	r3, [r7, #116]	; 0x74
 800a990:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a994:	460b      	mov	r3, r1
 800a996:	4313      	orrs	r3, r2
 800a998:	d03b      	beq.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a99a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a99e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9a6:	d01f      	beq.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a9a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9ac:	d818      	bhi.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a9ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9b2:	d003      	beq.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a9b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9b8:	d007      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a9ba:	e011      	b.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9bc:	4b33      	ldr	r3, [pc, #204]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	4a32      	ldr	r2, [pc, #200]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a9c8:	e00f      	b.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ce:	3328      	adds	r3, #40	; 0x28
 800a9d0:	2101      	movs	r1, #1
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f000 fd7e 	bl	800b4d4 <RCCEx_PLL3_Config>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a9de:	e004      	b.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a9e6:	e000      	b.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a9e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d10b      	bne.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a9f2:	4b26      	ldr	r3, [pc, #152]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a9fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa02:	4a22      	ldr	r2, [pc, #136]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa04:	430b      	orrs	r3, r1
 800aa06:	6553      	str	r3, [r2, #84]	; 0x54
 800aa08:	e003      	b.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa0e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800aa12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800aa1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa20:	2300      	movs	r3, #0
 800aa22:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa24:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800aa28:	460b      	mov	r3, r1
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	d034      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800aa2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d003      	beq.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800aa38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa3c:	d007      	beq.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800aa3e:	e011      	b.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa40:	4b12      	ldr	r3, [pc, #72]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa44:	4a11      	ldr	r2, [pc, #68]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800aa4c:	e00e      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa52:	3308      	adds	r3, #8
 800aa54:	2102      	movs	r1, #2
 800aa56:	4618      	mov	r0, r3
 800aa58:	f000 fc8a 	bl	800b370 <RCCEx_PLL2_Config>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800aa62:	e003      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800aa64:	2301      	movs	r3, #1
 800aa66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10d      	bne.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aa74:	4b05      	ldr	r3, [pc, #20]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aa7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa82:	4a02      	ldr	r2, [pc, #8]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa84:	430b      	orrs	r3, r1
 800aa86:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa88:	e006      	b.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800aa8a:	bf00      	nop
 800aa8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aa98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800aaa4:	663b      	str	r3, [r7, #96]	; 0x60
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	667b      	str	r3, [r7, #100]	; 0x64
 800aaaa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800aaae:	460b      	mov	r3, r1
 800aab0:	4313      	orrs	r3, r2
 800aab2:	d00c      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab8:	3328      	adds	r3, #40	; 0x28
 800aaba:	2102      	movs	r1, #2
 800aabc:	4618      	mov	r0, r3
 800aabe:	f000 fd09 	bl	800b4d4 <RCCEx_PLL3_Config>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d002      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800aac8:	2301      	movs	r3, #1
 800aaca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800aada:	65bb      	str	r3, [r7, #88]	; 0x58
 800aadc:	2300      	movs	r3, #0
 800aade:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aae0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800aae4:	460b      	mov	r3, r1
 800aae6:	4313      	orrs	r3, r2
 800aae8:	d036      	beq.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800aaea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aaf4:	d018      	beq.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800aaf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aafa:	d811      	bhi.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800aafc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab00:	d014      	beq.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800ab02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab06:	d80b      	bhi.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d011      	beq.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800ab0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab10:	d106      	bne.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab12:	4bb7      	ldr	r3, [pc, #732]	; (800adf0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab16:	4ab6      	ldr	r2, [pc, #728]	; (800adf0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ab1e:	e008      	b.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab20:	2301      	movs	r3, #1
 800ab22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab26:	e004      	b.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ab28:	bf00      	nop
 800ab2a:	e002      	b.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ab2c:	bf00      	nop
 800ab2e:	e000      	b.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ab30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10a      	bne.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ab3a:	4bad      	ldr	r3, [pc, #692]	; (800adf0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ab42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab48:	4aa9      	ldr	r2, [pc, #676]	; (800adf0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab4a:	430b      	orrs	r3, r1
 800ab4c:	6553      	str	r3, [r2, #84]	; 0x54
 800ab4e:	e003      	b.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ab58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab60:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ab64:	653b      	str	r3, [r7, #80]	; 0x50
 800ab66:	2300      	movs	r3, #0
 800ab68:	657b      	str	r3, [r7, #84]	; 0x54
 800ab6a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ab6e:	460b      	mov	r3, r1
 800ab70:	4313      	orrs	r3, r2
 800ab72:	d009      	beq.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ab74:	4b9e      	ldr	r3, [pc, #632]	; (800adf0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ab7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab82:	4a9b      	ldr	r2, [pc, #620]	; (800adf0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab84:	430b      	orrs	r3, r1
 800ab86:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ab88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab90:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ab94:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab96:	2300      	movs	r3, #0
 800ab98:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab9a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ab9e:	460b      	mov	r3, r1
 800aba0:	4313      	orrs	r3, r2
 800aba2:	d009      	beq.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aba4:	4b92      	ldr	r3, [pc, #584]	; (800adf0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aba8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800abac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abb2:	4a8f      	ldr	r2, [pc, #572]	; (800adf0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800abb4:	430b      	orrs	r3, r1
 800abb6:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800abb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800abc4:	643b      	str	r3, [r7, #64]	; 0x40
 800abc6:	2300      	movs	r3, #0
 800abc8:	647b      	str	r3, [r7, #68]	; 0x44
 800abca:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800abce:	460b      	mov	r3, r1
 800abd0:	4313      	orrs	r3, r2
 800abd2:	d00e      	beq.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800abd4:	4b86      	ldr	r3, [pc, #536]	; (800adf0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800abd6:	691b      	ldr	r3, [r3, #16]
 800abd8:	4a85      	ldr	r2, [pc, #532]	; (800adf0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800abda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800abde:	6113      	str	r3, [r2, #16]
 800abe0:	4b83      	ldr	r3, [pc, #524]	; (800adf0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800abe2:	6919      	ldr	r1, [r3, #16]
 800abe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abe8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800abec:	4a80      	ldr	r2, [pc, #512]	; (800adf0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800abee:	430b      	orrs	r3, r1
 800abf0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800abf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfa:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800abfe:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac00:	2300      	movs	r3, #0
 800ac02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac04:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ac08:	460b      	mov	r3, r1
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	d009      	beq.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ac0e:	4b78      	ldr	r3, [pc, #480]	; (800adf0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac12:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ac16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac1c:	4a74      	ldr	r2, [pc, #464]	; (800adf0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac1e:	430b      	orrs	r3, r1
 800ac20:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ac22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ac2e:	633b      	str	r3, [r7, #48]	; 0x30
 800ac30:	2300      	movs	r3, #0
 800ac32:	637b      	str	r3, [r7, #52]	; 0x34
 800ac34:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ac38:	460b      	mov	r3, r1
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	d00a      	beq.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ac3e:	4b6c      	ldr	r3, [pc, #432]	; (800adf0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac42:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ac46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4e:	4a68      	ldr	r2, [pc, #416]	; (800adf0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac50:	430b      	orrs	r3, r1
 800ac52:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ac54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	62b9      	str	r1, [r7, #40]	; 0x28
 800ac60:	f003 0301 	and.w	r3, r3, #1
 800ac64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac66:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	d011      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac74:	3308      	adds	r3, #8
 800ac76:	2100      	movs	r1, #0
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f000 fb79 	bl	800b370 <RCCEx_PLL2_Config>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ac84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d003      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ac94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	6239      	str	r1, [r7, #32]
 800aca0:	f003 0302 	and.w	r3, r3, #2
 800aca4:	627b      	str	r3, [r7, #36]	; 0x24
 800aca6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800acaa:	460b      	mov	r3, r1
 800acac:	4313      	orrs	r3, r2
 800acae:	d011      	beq.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb4:	3308      	adds	r3, #8
 800acb6:	2101      	movs	r1, #1
 800acb8:	4618      	mov	r0, r3
 800acba:	f000 fb59 	bl	800b370 <RCCEx_PLL2_Config>
 800acbe:	4603      	mov	r3, r0
 800acc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800acc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d003      	beq.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800accc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acd0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800acd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acdc:	2100      	movs	r1, #0
 800acde:	61b9      	str	r1, [r7, #24]
 800ace0:	f003 0304 	and.w	r3, r3, #4
 800ace4:	61fb      	str	r3, [r7, #28]
 800ace6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800acea:	460b      	mov	r3, r1
 800acec:	4313      	orrs	r3, r2
 800acee:	d011      	beq.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800acf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf4:	3308      	adds	r3, #8
 800acf6:	2102      	movs	r1, #2
 800acf8:	4618      	mov	r0, r3
 800acfa:	f000 fb39 	bl	800b370 <RCCEx_PLL2_Config>
 800acfe:	4603      	mov	r3, r0
 800ad00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ad04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d003      	beq.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ad14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	6139      	str	r1, [r7, #16]
 800ad20:	f003 0308 	and.w	r3, r3, #8
 800ad24:	617b      	str	r3, [r7, #20]
 800ad26:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	d011      	beq.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad34:	3328      	adds	r3, #40	; 0x28
 800ad36:	2100      	movs	r1, #0
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f000 fbcb 	bl	800b4d4 <RCCEx_PLL3_Config>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800ad44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d003      	beq.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ad54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	60b9      	str	r1, [r7, #8]
 800ad60:	f003 0310 	and.w	r3, r3, #16
 800ad64:	60fb      	str	r3, [r7, #12]
 800ad66:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	d011      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad74:	3328      	adds	r3, #40	; 0x28
 800ad76:	2101      	movs	r1, #1
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f000 fbab 	bl	800b4d4 <RCCEx_PLL3_Config>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ad84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d003      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ad94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	6039      	str	r1, [r7, #0]
 800ada0:	f003 0320 	and.w	r3, r3, #32
 800ada4:	607b      	str	r3, [r7, #4]
 800ada6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800adaa:	460b      	mov	r3, r1
 800adac:	4313      	orrs	r3, r2
 800adae:	d011      	beq.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800adb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb4:	3328      	adds	r3, #40	; 0x28
 800adb6:	2102      	movs	r1, #2
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 fb8b 	bl	800b4d4 <RCCEx_PLL3_Config>
 800adbe:	4603      	mov	r3, r0
 800adc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800adc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d003      	beq.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800add0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800add4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800add8:	2b00      	cmp	r3, #0
 800adda:	d101      	bne.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800addc:	2300      	movs	r3, #0
 800adde:	e000      	b.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800ade8:	46bd      	mov	sp, r7
 800adea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800adee:	bf00      	nop
 800adf0:	58024400 	.word	0x58024400

0800adf4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800adf8:	f7fe fe00 	bl	80099fc <HAL_RCC_GetHCLKFreq>
 800adfc:	4602      	mov	r2, r0
 800adfe:	4b06      	ldr	r3, [pc, #24]	; (800ae18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ae00:	6a1b      	ldr	r3, [r3, #32]
 800ae02:	091b      	lsrs	r3, r3, #4
 800ae04:	f003 0307 	and.w	r3, r3, #7
 800ae08:	4904      	ldr	r1, [pc, #16]	; (800ae1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ae0a:	5ccb      	ldrb	r3, [r1, r3]
 800ae0c:	f003 031f 	and.w	r3, r3, #31
 800ae10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	58024400 	.word	0x58024400
 800ae1c:	0800f864 	.word	0x0800f864

0800ae20 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b089      	sub	sp, #36	; 0x24
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae28:	4ba1      	ldr	r3, [pc, #644]	; (800b0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae2c:	f003 0303 	and.w	r3, r3, #3
 800ae30:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ae32:	4b9f      	ldr	r3, [pc, #636]	; (800b0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae36:	0b1b      	lsrs	r3, r3, #12
 800ae38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae3c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ae3e:	4b9c      	ldr	r3, [pc, #624]	; (800b0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae42:	091b      	lsrs	r3, r3, #4
 800ae44:	f003 0301 	and.w	r3, r3, #1
 800ae48:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ae4a:	4b99      	ldr	r3, [pc, #612]	; (800b0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae4e:	08db      	lsrs	r3, r3, #3
 800ae50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae54:	693a      	ldr	r2, [r7, #16]
 800ae56:	fb02 f303 	mul.w	r3, r2, r3
 800ae5a:	ee07 3a90 	vmov	s15, r3
 800ae5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f000 8111 	beq.w	800b090 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	f000 8083 	beq.w	800af7c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	f200 80a1 	bhi.w	800afc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d003      	beq.n	800ae8c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ae84:	69bb      	ldr	r3, [r7, #24]
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d056      	beq.n	800af38 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ae8a:	e099      	b.n	800afc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae8c:	4b88      	ldr	r3, [pc, #544]	; (800b0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f003 0320 	and.w	r3, r3, #32
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d02d      	beq.n	800aef4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae98:	4b85      	ldr	r3, [pc, #532]	; (800b0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	08db      	lsrs	r3, r3, #3
 800ae9e:	f003 0303 	and.w	r3, r3, #3
 800aea2:	4a84      	ldr	r2, [pc, #528]	; (800b0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aea4:	fa22 f303 	lsr.w	r3, r2, r3
 800aea8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	ee07 3a90 	vmov	s15, r3
 800aeb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	ee07 3a90 	vmov	s15, r3
 800aeba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aec2:	4b7b      	ldr	r3, [pc, #492]	; (800b0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeca:	ee07 3a90 	vmov	s15, r3
 800aece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aed2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aed6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aeda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aef2:	e087      	b.n	800b004 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	ee07 3a90 	vmov	s15, r3
 800aefa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aefe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b0bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800af02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af06:	4b6a      	ldr	r3, [pc, #424]	; (800b0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af0e:	ee07 3a90 	vmov	s15, r3
 800af12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af16:	ed97 6a03 	vldr	s12, [r7, #12]
 800af1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af36:	e065      	b.n	800b004 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	ee07 3a90 	vmov	s15, r3
 800af3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af4a:	4b59      	ldr	r3, [pc, #356]	; (800b0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af52:	ee07 3a90 	vmov	s15, r3
 800af56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af7a:	e043      	b.n	800b004 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	ee07 3a90 	vmov	s15, r3
 800af82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b0c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800af8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af8e:	4b48      	ldr	r3, [pc, #288]	; (800b0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af96:	ee07 3a90 	vmov	s15, r3
 800af9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800afa2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afbe:	e021      	b.n	800b004 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	ee07 3a90 	vmov	s15, r3
 800afc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800afce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afd2:	4b37      	ldr	r3, [pc, #220]	; (800b0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afda:	ee07 3a90 	vmov	s15, r3
 800afde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afe2:	ed97 6a03 	vldr	s12, [r7, #12]
 800afe6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800affa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800affe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b002:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b004:	4b2a      	ldr	r3, [pc, #168]	; (800b0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b008:	0a5b      	lsrs	r3, r3, #9
 800b00a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b00e:	ee07 3a90 	vmov	s15, r3
 800b012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b016:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b01a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b01e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b02a:	ee17 2a90 	vmov	r2, s15
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b032:	4b1f      	ldr	r3, [pc, #124]	; (800b0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b036:	0c1b      	lsrs	r3, r3, #16
 800b038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b03c:	ee07 3a90 	vmov	s15, r3
 800b040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b044:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b048:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b04c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b058:	ee17 2a90 	vmov	r2, s15
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b060:	4b13      	ldr	r3, [pc, #76]	; (800b0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b064:	0e1b      	lsrs	r3, r3, #24
 800b066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b06a:	ee07 3a90 	vmov	s15, r3
 800b06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b076:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b07a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b07e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b086:	ee17 2a90 	vmov	r2, s15
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b08e:	e008      	b.n	800b0a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	609a      	str	r2, [r3, #8]
}
 800b0a2:	bf00      	nop
 800b0a4:	3724      	adds	r7, #36	; 0x24
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	58024400 	.word	0x58024400
 800b0b4:	03d09000 	.word	0x03d09000
 800b0b8:	46000000 	.word	0x46000000
 800b0bc:	4c742400 	.word	0x4c742400
 800b0c0:	4a742400 	.word	0x4a742400
 800b0c4:	4af42400 	.word	0x4af42400

0800b0c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b089      	sub	sp, #36	; 0x24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0d0:	4ba1      	ldr	r3, [pc, #644]	; (800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d4:	f003 0303 	and.w	r3, r3, #3
 800b0d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b0da:	4b9f      	ldr	r3, [pc, #636]	; (800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0de:	0d1b      	lsrs	r3, r3, #20
 800b0e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b0e6:	4b9c      	ldr	r3, [pc, #624]	; (800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ea:	0a1b      	lsrs	r3, r3, #8
 800b0ec:	f003 0301 	and.w	r3, r3, #1
 800b0f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b0f2:	4b99      	ldr	r3, [pc, #612]	; (800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0f6:	08db      	lsrs	r3, r3, #3
 800b0f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0fc:	693a      	ldr	r2, [r7, #16]
 800b0fe:	fb02 f303 	mul.w	r3, r2, r3
 800b102:	ee07 3a90 	vmov	s15, r3
 800b106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b10a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	2b00      	cmp	r3, #0
 800b112:	f000 8111 	beq.w	800b338 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	2b02      	cmp	r3, #2
 800b11a:	f000 8083 	beq.w	800b224 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	2b02      	cmp	r3, #2
 800b122:	f200 80a1 	bhi.w	800b268 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d003      	beq.n	800b134 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b12c:	69bb      	ldr	r3, [r7, #24]
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d056      	beq.n	800b1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b132:	e099      	b.n	800b268 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b134:	4b88      	ldr	r3, [pc, #544]	; (800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f003 0320 	and.w	r3, r3, #32
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d02d      	beq.n	800b19c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b140:	4b85      	ldr	r3, [pc, #532]	; (800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	08db      	lsrs	r3, r3, #3
 800b146:	f003 0303 	and.w	r3, r3, #3
 800b14a:	4a84      	ldr	r2, [pc, #528]	; (800b35c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b14c:	fa22 f303 	lsr.w	r3, r2, r3
 800b150:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	ee07 3a90 	vmov	s15, r3
 800b158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	ee07 3a90 	vmov	s15, r3
 800b162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b16a:	4b7b      	ldr	r3, [pc, #492]	; (800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b172:	ee07 3a90 	vmov	s15, r3
 800b176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b17a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b17e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b18a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b18e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b192:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b196:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b19a:	e087      	b.n	800b2ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	ee07 3a90 	vmov	s15, r3
 800b1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b364 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b1aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1ae:	4b6a      	ldr	r3, [pc, #424]	; (800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1b6:	ee07 3a90 	vmov	s15, r3
 800b1ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1be:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1de:	e065      	b.n	800b2ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	ee07 3a90 	vmov	s15, r3
 800b1e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b1ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1f2:	4b59      	ldr	r3, [pc, #356]	; (800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1fa:	ee07 3a90 	vmov	s15, r3
 800b1fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b202:	ed97 6a03 	vldr	s12, [r7, #12]
 800b206:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b20a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b20e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b21a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b21e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b222:	e043      	b.n	800b2ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	ee07 3a90 	vmov	s15, r3
 800b22a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b22e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b36c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b236:	4b48      	ldr	r3, [pc, #288]	; (800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b23a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b23e:	ee07 3a90 	vmov	s15, r3
 800b242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b246:	ed97 6a03 	vldr	s12, [r7, #12]
 800b24a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b24e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b25a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b25e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b262:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b266:	e021      	b.n	800b2ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	ee07 3a90 	vmov	s15, r3
 800b26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b272:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b27a:	4b37      	ldr	r3, [pc, #220]	; (800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b282:	ee07 3a90 	vmov	s15, r3
 800b286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b28a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b28e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b29a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b29e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b2ac:	4b2a      	ldr	r3, [pc, #168]	; (800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b0:	0a5b      	lsrs	r3, r3, #9
 800b2b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2b6:	ee07 3a90 	vmov	s15, r3
 800b2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2d2:	ee17 2a90 	vmov	r2, s15
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b2da:	4b1f      	ldr	r3, [pc, #124]	; (800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2de:	0c1b      	lsrs	r3, r3, #16
 800b2e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2e4:	ee07 3a90 	vmov	s15, r3
 800b2e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b300:	ee17 2a90 	vmov	r2, s15
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b308:	4b13      	ldr	r3, [pc, #76]	; (800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b30c:	0e1b      	lsrs	r3, r3, #24
 800b30e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b312:	ee07 3a90 	vmov	s15, r3
 800b316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b31a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b31e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b322:	edd7 6a07 	vldr	s13, [r7, #28]
 800b326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b32a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b32e:	ee17 2a90 	vmov	r2, s15
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b336:	e008      	b.n	800b34a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	609a      	str	r2, [r3, #8]
}
 800b34a:	bf00      	nop
 800b34c:	3724      	adds	r7, #36	; 0x24
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	58024400 	.word	0x58024400
 800b35c:	03d09000 	.word	0x03d09000
 800b360:	46000000 	.word	0x46000000
 800b364:	4c742400 	.word	0x4c742400
 800b368:	4a742400 	.word	0x4a742400
 800b36c:	4af42400 	.word	0x4af42400

0800b370 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b37e:	4b53      	ldr	r3, [pc, #332]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b382:	f003 0303 	and.w	r3, r3, #3
 800b386:	2b03      	cmp	r3, #3
 800b388:	d101      	bne.n	800b38e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	e099      	b.n	800b4c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b38e:	4b4f      	ldr	r3, [pc, #316]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4a4e      	ldr	r2, [pc, #312]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b394:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b39a:	f7f9 ffe9 	bl	8005370 <HAL_GetTick>
 800b39e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b3a0:	e008      	b.n	800b3b4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b3a2:	f7f9 ffe5 	bl	8005370 <HAL_GetTick>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	1ad3      	subs	r3, r2, r3
 800b3ac:	2b02      	cmp	r3, #2
 800b3ae:	d901      	bls.n	800b3b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b3b0:	2303      	movs	r3, #3
 800b3b2:	e086      	b.n	800b4c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b3b4:	4b45      	ldr	r3, [pc, #276]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1f0      	bne.n	800b3a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b3c0:	4b42      	ldr	r3, [pc, #264]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	031b      	lsls	r3, r3, #12
 800b3ce:	493f      	ldr	r1, [pc, #252]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	628b      	str	r3, [r1, #40]	; 0x28
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	025b      	lsls	r3, r3, #9
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	431a      	orrs	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	041b      	lsls	r3, r3, #16
 800b3f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b3f6:	431a      	orrs	r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	061b      	lsls	r3, r3, #24
 800b400:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b404:	4931      	ldr	r1, [pc, #196]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b406:	4313      	orrs	r3, r2
 800b408:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b40a:	4b30      	ldr	r3, [pc, #192]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	695b      	ldr	r3, [r3, #20]
 800b416:	492d      	ldr	r1, [pc, #180]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b418:	4313      	orrs	r3, r2
 800b41a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b41c:	4b2b      	ldr	r3, [pc, #172]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b420:	f023 0220 	bic.w	r2, r3, #32
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	699b      	ldr	r3, [r3, #24]
 800b428:	4928      	ldr	r1, [pc, #160]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b42a:	4313      	orrs	r3, r2
 800b42c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b42e:	4b27      	ldr	r3, [pc, #156]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b432:	4a26      	ldr	r2, [pc, #152]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b434:	f023 0310 	bic.w	r3, r3, #16
 800b438:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b43a:	4b24      	ldr	r3, [pc, #144]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b43c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b43e:	4b24      	ldr	r3, [pc, #144]	; (800b4d0 <RCCEx_PLL2_Config+0x160>)
 800b440:	4013      	ands	r3, r2
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	69d2      	ldr	r2, [r2, #28]
 800b446:	00d2      	lsls	r2, r2, #3
 800b448:	4920      	ldr	r1, [pc, #128]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b44a:	4313      	orrs	r3, r2
 800b44c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b44e:	4b1f      	ldr	r3, [pc, #124]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b452:	4a1e      	ldr	r2, [pc, #120]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b454:	f043 0310 	orr.w	r3, r3, #16
 800b458:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d106      	bne.n	800b46e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b460:	4b1a      	ldr	r3, [pc, #104]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b464:	4a19      	ldr	r2, [pc, #100]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b466:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b46a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b46c:	e00f      	b.n	800b48e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	2b01      	cmp	r3, #1
 800b472:	d106      	bne.n	800b482 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b474:	4b15      	ldr	r3, [pc, #84]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b478:	4a14      	ldr	r2, [pc, #80]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b47a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b47e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b480:	e005      	b.n	800b48e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b482:	4b12      	ldr	r3, [pc, #72]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b486:	4a11      	ldr	r2, [pc, #68]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b48c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b48e:	4b0f      	ldr	r3, [pc, #60]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a0e      	ldr	r2, [pc, #56]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b494:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b49a:	f7f9 ff69 	bl	8005370 <HAL_GetTick>
 800b49e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b4a0:	e008      	b.n	800b4b4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b4a2:	f7f9 ff65 	bl	8005370 <HAL_GetTick>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	d901      	bls.n	800b4b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	e006      	b.n	800b4c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b4b4:	4b05      	ldr	r3, [pc, #20]	; (800b4cc <RCCEx_PLL2_Config+0x15c>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d0f0      	beq.n	800b4a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3710      	adds	r7, #16
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	58024400 	.word	0x58024400
 800b4d0:	ffff0007 	.word	0xffff0007

0800b4d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b4e2:	4b53      	ldr	r3, [pc, #332]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e6:	f003 0303 	and.w	r3, r3, #3
 800b4ea:	2b03      	cmp	r3, #3
 800b4ec:	d101      	bne.n	800b4f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e099      	b.n	800b626 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b4f2:	4b4f      	ldr	r3, [pc, #316]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a4e      	ldr	r2, [pc, #312]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b4f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4fe:	f7f9 ff37 	bl	8005370 <HAL_GetTick>
 800b502:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b504:	e008      	b.n	800b518 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b506:	f7f9 ff33 	bl	8005370 <HAL_GetTick>
 800b50a:	4602      	mov	r2, r0
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	1ad3      	subs	r3, r2, r3
 800b510:	2b02      	cmp	r3, #2
 800b512:	d901      	bls.n	800b518 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b514:	2303      	movs	r3, #3
 800b516:	e086      	b.n	800b626 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b518:	4b45      	ldr	r3, [pc, #276]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b520:	2b00      	cmp	r3, #0
 800b522:	d1f0      	bne.n	800b506 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b524:	4b42      	ldr	r3, [pc, #264]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b528:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	051b      	lsls	r3, r3, #20
 800b532:	493f      	ldr	r1, [pc, #252]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b534:	4313      	orrs	r3, r2
 800b536:	628b      	str	r3, [r1, #40]	; 0x28
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	3b01      	subs	r3, #1
 800b53e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	3b01      	subs	r3, #1
 800b548:	025b      	lsls	r3, r3, #9
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	431a      	orrs	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	3b01      	subs	r3, #1
 800b554:	041b      	lsls	r3, r3, #16
 800b556:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b55a:	431a      	orrs	r2, r3
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	691b      	ldr	r3, [r3, #16]
 800b560:	3b01      	subs	r3, #1
 800b562:	061b      	lsls	r3, r3, #24
 800b564:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b568:	4931      	ldr	r1, [pc, #196]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b56a:	4313      	orrs	r3, r2
 800b56c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b56e:	4b30      	ldr	r3, [pc, #192]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b572:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	695b      	ldr	r3, [r3, #20]
 800b57a:	492d      	ldr	r1, [pc, #180]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b57c:	4313      	orrs	r3, r2
 800b57e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b580:	4b2b      	ldr	r3, [pc, #172]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b584:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	699b      	ldr	r3, [r3, #24]
 800b58c:	4928      	ldr	r1, [pc, #160]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b58e:	4313      	orrs	r3, r2
 800b590:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b592:	4b27      	ldr	r3, [pc, #156]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b596:	4a26      	ldr	r2, [pc, #152]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b59c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b59e:	4b24      	ldr	r3, [pc, #144]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b5a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5a2:	4b24      	ldr	r3, [pc, #144]	; (800b634 <RCCEx_PLL3_Config+0x160>)
 800b5a4:	4013      	ands	r3, r2
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	69d2      	ldr	r2, [r2, #28]
 800b5aa:	00d2      	lsls	r2, r2, #3
 800b5ac:	4920      	ldr	r1, [pc, #128]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b5b2:	4b1f      	ldr	r3, [pc, #124]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b6:	4a1e      	ldr	r2, [pc, #120]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b5b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d106      	bne.n	800b5d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b5c4:	4b1a      	ldr	r3, [pc, #104]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c8:	4a19      	ldr	r2, [pc, #100]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b5ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b5ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b5d0:	e00f      	b.n	800b5f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d106      	bne.n	800b5e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b5d8:	4b15      	ldr	r3, [pc, #84]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5dc:	4a14      	ldr	r2, [pc, #80]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b5de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b5e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b5e4:	e005      	b.n	800b5f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b5e6:	4b12      	ldr	r3, [pc, #72]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ea:	4a11      	ldr	r2, [pc, #68]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b5ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b5f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b5f2:	4b0f      	ldr	r3, [pc, #60]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a0e      	ldr	r2, [pc, #56]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b5f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5fe:	f7f9 feb7 	bl	8005370 <HAL_GetTick>
 800b602:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b604:	e008      	b.n	800b618 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b606:	f7f9 feb3 	bl	8005370 <HAL_GetTick>
 800b60a:	4602      	mov	r2, r0
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	2b02      	cmp	r3, #2
 800b612:	d901      	bls.n	800b618 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b614:	2303      	movs	r3, #3
 800b616:	e006      	b.n	800b626 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b618:	4b05      	ldr	r3, [pc, #20]	; (800b630 <RCCEx_PLL3_Config+0x15c>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b620:	2b00      	cmp	r3, #0
 800b622:	d0f0      	beq.n	800b606 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b624:	7bfb      	ldrb	r3, [r7, #15]
}
 800b626:	4618      	mov	r0, r3
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	58024400 	.word	0x58024400
 800b634:	ffff0007 	.word	0xffff0007

0800b638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d101      	bne.n	800b64a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b646:	2301      	movs	r3, #1
 800b648:	e049      	b.n	800b6de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b650:	b2db      	uxtb	r3, r3
 800b652:	2b00      	cmp	r3, #0
 800b654:	d106      	bne.n	800b664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f7f9 fbf8 	bl	8004e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2202      	movs	r2, #2
 800b668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	3304      	adds	r3, #4
 800b674:	4619      	mov	r1, r3
 800b676:	4610      	mov	r0, r2
 800b678:	f000 feb8 	bl	800c3ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2201      	movs	r2, #1
 800b680:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2201      	movs	r2, #1
 800b690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
	...

0800b6e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d001      	beq.n	800b700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e05e      	b.n	800b7be <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2202      	movs	r2, #2
 800b704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	68da      	ldr	r2, [r3, #12]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f042 0201 	orr.w	r2, r2, #1
 800b716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a2b      	ldr	r2, [pc, #172]	; (800b7cc <HAL_TIM_Base_Start_IT+0xe4>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d02c      	beq.n	800b77c <HAL_TIM_Base_Start_IT+0x94>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b72a:	d027      	beq.n	800b77c <HAL_TIM_Base_Start_IT+0x94>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a27      	ldr	r2, [pc, #156]	; (800b7d0 <HAL_TIM_Base_Start_IT+0xe8>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d022      	beq.n	800b77c <HAL_TIM_Base_Start_IT+0x94>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a26      	ldr	r2, [pc, #152]	; (800b7d4 <HAL_TIM_Base_Start_IT+0xec>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d01d      	beq.n	800b77c <HAL_TIM_Base_Start_IT+0x94>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a24      	ldr	r2, [pc, #144]	; (800b7d8 <HAL_TIM_Base_Start_IT+0xf0>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d018      	beq.n	800b77c <HAL_TIM_Base_Start_IT+0x94>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4a23      	ldr	r2, [pc, #140]	; (800b7dc <HAL_TIM_Base_Start_IT+0xf4>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d013      	beq.n	800b77c <HAL_TIM_Base_Start_IT+0x94>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a21      	ldr	r2, [pc, #132]	; (800b7e0 <HAL_TIM_Base_Start_IT+0xf8>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d00e      	beq.n	800b77c <HAL_TIM_Base_Start_IT+0x94>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a20      	ldr	r2, [pc, #128]	; (800b7e4 <HAL_TIM_Base_Start_IT+0xfc>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d009      	beq.n	800b77c <HAL_TIM_Base_Start_IT+0x94>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a1e      	ldr	r2, [pc, #120]	; (800b7e8 <HAL_TIM_Base_Start_IT+0x100>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d004      	beq.n	800b77c <HAL_TIM_Base_Start_IT+0x94>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a1d      	ldr	r2, [pc, #116]	; (800b7ec <HAL_TIM_Base_Start_IT+0x104>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d115      	bne.n	800b7a8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	689a      	ldr	r2, [r3, #8]
 800b782:	4b1b      	ldr	r3, [pc, #108]	; (800b7f0 <HAL_TIM_Base_Start_IT+0x108>)
 800b784:	4013      	ands	r3, r2
 800b786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2b06      	cmp	r3, #6
 800b78c:	d015      	beq.n	800b7ba <HAL_TIM_Base_Start_IT+0xd2>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b794:	d011      	beq.n	800b7ba <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f042 0201 	orr.w	r2, r2, #1
 800b7a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7a6:	e008      	b.n	800b7ba <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f042 0201 	orr.w	r2, r2, #1
 800b7b6:	601a      	str	r2, [r3, #0]
 800b7b8:	e000      	b.n	800b7bc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b7bc:	2300      	movs	r3, #0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3714      	adds	r7, #20
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop
 800b7cc:	40010000 	.word	0x40010000
 800b7d0:	40000400 	.word	0x40000400
 800b7d4:	40000800 	.word	0x40000800
 800b7d8:	40000c00 	.word	0x40000c00
 800b7dc:	40010400 	.word	0x40010400
 800b7e0:	40001800 	.word	0x40001800
 800b7e4:	40014000 	.word	0x40014000
 800b7e8:	4000e000 	.word	0x4000e000
 800b7ec:	4000e400 	.word	0x4000e400
 800b7f0:	00010007 	.word	0x00010007

0800b7f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d101      	bne.n	800b806 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	e049      	b.n	800b89a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d106      	bne.n	800b820 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7f9 fae0 	bl	8004de0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2202      	movs	r2, #2
 800b824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	3304      	adds	r3, #4
 800b830:	4619      	mov	r1, r3
 800b832:	4610      	mov	r0, r2
 800b834:	f000 fdda 	bl	800c3ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2201      	movs	r2, #1
 800b83c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2201      	movs	r2, #1
 800b884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2201      	movs	r2, #1
 800b88c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b898:	2300      	movs	r3, #0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
	...

0800b8a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d109      	bne.n	800b8c8 <HAL_TIM_PWM_Start+0x24>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	bf14      	ite	ne
 800b8c0:	2301      	movne	r3, #1
 800b8c2:	2300      	moveq	r3, #0
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	e03c      	b.n	800b942 <HAL_TIM_PWM_Start+0x9e>
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	2b04      	cmp	r3, #4
 800b8cc:	d109      	bne.n	800b8e2 <HAL_TIM_PWM_Start+0x3e>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	bf14      	ite	ne
 800b8da:	2301      	movne	r3, #1
 800b8dc:	2300      	moveq	r3, #0
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	e02f      	b.n	800b942 <HAL_TIM_PWM_Start+0x9e>
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	2b08      	cmp	r3, #8
 800b8e6:	d109      	bne.n	800b8fc <HAL_TIM_PWM_Start+0x58>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	bf14      	ite	ne
 800b8f4:	2301      	movne	r3, #1
 800b8f6:	2300      	moveq	r3, #0
 800b8f8:	b2db      	uxtb	r3, r3
 800b8fa:	e022      	b.n	800b942 <HAL_TIM_PWM_Start+0x9e>
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	2b0c      	cmp	r3, #12
 800b900:	d109      	bne.n	800b916 <HAL_TIM_PWM_Start+0x72>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	bf14      	ite	ne
 800b90e:	2301      	movne	r3, #1
 800b910:	2300      	moveq	r3, #0
 800b912:	b2db      	uxtb	r3, r3
 800b914:	e015      	b.n	800b942 <HAL_TIM_PWM_Start+0x9e>
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	2b10      	cmp	r3, #16
 800b91a:	d109      	bne.n	800b930 <HAL_TIM_PWM_Start+0x8c>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b922:	b2db      	uxtb	r3, r3
 800b924:	2b01      	cmp	r3, #1
 800b926:	bf14      	ite	ne
 800b928:	2301      	movne	r3, #1
 800b92a:	2300      	moveq	r3, #0
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	e008      	b.n	800b942 <HAL_TIM_PWM_Start+0x9e>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b936:	b2db      	uxtb	r3, r3
 800b938:	2b01      	cmp	r3, #1
 800b93a:	bf14      	ite	ne
 800b93c:	2301      	movne	r3, #1
 800b93e:	2300      	moveq	r3, #0
 800b940:	b2db      	uxtb	r3, r3
 800b942:	2b00      	cmp	r3, #0
 800b944:	d001      	beq.n	800b94a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	e0ab      	b.n	800baa2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d104      	bne.n	800b95a <HAL_TIM_PWM_Start+0xb6>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2202      	movs	r2, #2
 800b954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b958:	e023      	b.n	800b9a2 <HAL_TIM_PWM_Start+0xfe>
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	2b04      	cmp	r3, #4
 800b95e:	d104      	bne.n	800b96a <HAL_TIM_PWM_Start+0xc6>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2202      	movs	r2, #2
 800b964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b968:	e01b      	b.n	800b9a2 <HAL_TIM_PWM_Start+0xfe>
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	2b08      	cmp	r3, #8
 800b96e:	d104      	bne.n	800b97a <HAL_TIM_PWM_Start+0xd6>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2202      	movs	r2, #2
 800b974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b978:	e013      	b.n	800b9a2 <HAL_TIM_PWM_Start+0xfe>
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	2b0c      	cmp	r3, #12
 800b97e:	d104      	bne.n	800b98a <HAL_TIM_PWM_Start+0xe6>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2202      	movs	r2, #2
 800b984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b988:	e00b      	b.n	800b9a2 <HAL_TIM_PWM_Start+0xfe>
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	2b10      	cmp	r3, #16
 800b98e:	d104      	bne.n	800b99a <HAL_TIM_PWM_Start+0xf6>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2202      	movs	r2, #2
 800b994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b998:	e003      	b.n	800b9a2 <HAL_TIM_PWM_Start+0xfe>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2202      	movs	r2, #2
 800b99e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	6839      	ldr	r1, [r7, #0]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f001 f938 	bl	800cc20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a3d      	ldr	r2, [pc, #244]	; (800baac <HAL_TIM_PWM_Start+0x208>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d013      	beq.n	800b9e2 <HAL_TIM_PWM_Start+0x13e>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4a3c      	ldr	r2, [pc, #240]	; (800bab0 <HAL_TIM_PWM_Start+0x20c>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d00e      	beq.n	800b9e2 <HAL_TIM_PWM_Start+0x13e>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a3a      	ldr	r2, [pc, #232]	; (800bab4 <HAL_TIM_PWM_Start+0x210>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d009      	beq.n	800b9e2 <HAL_TIM_PWM_Start+0x13e>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a39      	ldr	r2, [pc, #228]	; (800bab8 <HAL_TIM_PWM_Start+0x214>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d004      	beq.n	800b9e2 <HAL_TIM_PWM_Start+0x13e>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a37      	ldr	r2, [pc, #220]	; (800babc <HAL_TIM_PWM_Start+0x218>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d101      	bne.n	800b9e6 <HAL_TIM_PWM_Start+0x142>
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e000      	b.n	800b9e8 <HAL_TIM_PWM_Start+0x144>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d007      	beq.n	800b9fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b9fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4a2a      	ldr	r2, [pc, #168]	; (800baac <HAL_TIM_PWM_Start+0x208>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d02c      	beq.n	800ba60 <HAL_TIM_PWM_Start+0x1bc>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba0e:	d027      	beq.n	800ba60 <HAL_TIM_PWM_Start+0x1bc>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a2a      	ldr	r2, [pc, #168]	; (800bac0 <HAL_TIM_PWM_Start+0x21c>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d022      	beq.n	800ba60 <HAL_TIM_PWM_Start+0x1bc>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4a29      	ldr	r2, [pc, #164]	; (800bac4 <HAL_TIM_PWM_Start+0x220>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d01d      	beq.n	800ba60 <HAL_TIM_PWM_Start+0x1bc>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a27      	ldr	r2, [pc, #156]	; (800bac8 <HAL_TIM_PWM_Start+0x224>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d018      	beq.n	800ba60 <HAL_TIM_PWM_Start+0x1bc>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a1f      	ldr	r2, [pc, #124]	; (800bab0 <HAL_TIM_PWM_Start+0x20c>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d013      	beq.n	800ba60 <HAL_TIM_PWM_Start+0x1bc>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a23      	ldr	r2, [pc, #140]	; (800bacc <HAL_TIM_PWM_Start+0x228>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d00e      	beq.n	800ba60 <HAL_TIM_PWM_Start+0x1bc>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a1b      	ldr	r2, [pc, #108]	; (800bab4 <HAL_TIM_PWM_Start+0x210>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d009      	beq.n	800ba60 <HAL_TIM_PWM_Start+0x1bc>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a1f      	ldr	r2, [pc, #124]	; (800bad0 <HAL_TIM_PWM_Start+0x22c>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d004      	beq.n	800ba60 <HAL_TIM_PWM_Start+0x1bc>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a1e      	ldr	r2, [pc, #120]	; (800bad4 <HAL_TIM_PWM_Start+0x230>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d115      	bne.n	800ba8c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	689a      	ldr	r2, [r3, #8]
 800ba66:	4b1c      	ldr	r3, [pc, #112]	; (800bad8 <HAL_TIM_PWM_Start+0x234>)
 800ba68:	4013      	ands	r3, r2
 800ba6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2b06      	cmp	r3, #6
 800ba70:	d015      	beq.n	800ba9e <HAL_TIM_PWM_Start+0x1fa>
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba78:	d011      	beq.n	800ba9e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f042 0201 	orr.w	r2, r2, #1
 800ba88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba8a:	e008      	b.n	800ba9e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f042 0201 	orr.w	r2, r2, #1
 800ba9a:	601a      	str	r2, [r3, #0]
 800ba9c:	e000      	b.n	800baa0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	40010000 	.word	0x40010000
 800bab0:	40010400 	.word	0x40010400
 800bab4:	40014000 	.word	0x40014000
 800bab8:	40014400 	.word	0x40014400
 800babc:	40014800 	.word	0x40014800
 800bac0:	40000400 	.word	0x40000400
 800bac4:	40000800 	.word	0x40000800
 800bac8:	40000c00 	.word	0x40000c00
 800bacc:	40001800 	.word	0x40001800
 800bad0:	4000e000 	.word	0x4000e000
 800bad4:	4000e400 	.word	0x4000e400
 800bad8:	00010007 	.word	0x00010007

0800badc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b086      	sub	sp, #24
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d101      	bne.n	800baf0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800baec:	2301      	movs	r3, #1
 800baee:	e08f      	b.n	800bc10 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d106      	bne.n	800bb0a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f7f9 f83d 	bl	8004b84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2202      	movs	r2, #2
 800bb0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6899      	ldr	r1, [r3, #8]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	4b3e      	ldr	r3, [pc, #248]	; (800bc18 <HAL_TIM_Encoder_Init+0x13c>)
 800bb1e:	400b      	ands	r3, r1
 800bb20:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	3304      	adds	r3, #4
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	4610      	mov	r0, r2
 800bb2e:	f000 fc5d 	bl	800c3ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	699b      	ldr	r3, [r3, #24]
 800bb40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	6a1b      	ldr	r3, [r3, #32]
 800bb48:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	697a      	ldr	r2, [r7, #20]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bb54:	693a      	ldr	r2, [r7, #16]
 800bb56:	4b31      	ldr	r3, [pc, #196]	; (800bc1c <HAL_TIM_Encoder_Init+0x140>)
 800bb58:	4013      	ands	r3, r2
 800bb5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	689a      	ldr	r2, [r3, #8]
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	699b      	ldr	r3, [r3, #24]
 800bb64:	021b      	lsls	r3, r3, #8
 800bb66:	4313      	orrs	r3, r2
 800bb68:	693a      	ldr	r2, [r7, #16]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bb6e:	693a      	ldr	r2, [r7, #16]
 800bb70:	4b2b      	ldr	r3, [pc, #172]	; (800bc20 <HAL_TIM_Encoder_Init+0x144>)
 800bb72:	4013      	ands	r3, r2
 800bb74:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bb76:	693a      	ldr	r2, [r7, #16]
 800bb78:	4b2a      	ldr	r3, [pc, #168]	; (800bc24 <HAL_TIM_Encoder_Init+0x148>)
 800bb7a:	4013      	ands	r3, r2
 800bb7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	68da      	ldr	r2, [r3, #12]
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	69db      	ldr	r3, [r3, #28]
 800bb86:	021b      	lsls	r3, r3, #8
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	693a      	ldr	r2, [r7, #16]
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	691b      	ldr	r3, [r3, #16]
 800bb94:	011a      	lsls	r2, r3, #4
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	6a1b      	ldr	r3, [r3, #32]
 800bb9a:	031b      	lsls	r3, r3, #12
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	693a      	ldr	r2, [r7, #16]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bbaa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bbb2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	685a      	ldr	r2, [r3, #4]
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	695b      	ldr	r3, [r3, #20]
 800bbbc:	011b      	lsls	r3, r3, #4
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	697a      	ldr	r2, [r7, #20]
 800bbcc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	693a      	ldr	r2, [r7, #16]
 800bbd4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2201      	movs	r2, #1
 800bc02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3718      	adds	r7, #24
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	fffebff8 	.word	0xfffebff8
 800bc1c:	fffffcfc 	.word	0xfffffcfc
 800bc20:	fffff3f3 	.word	0xfffff3f3
 800bc24:	ffff0f0f 	.word	0xffff0f0f

0800bc28 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b084      	sub	sp, #16
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc38:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bc40:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc48:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc50:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d110      	bne.n	800bc7a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d102      	bne.n	800bc64 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bc5e:	7b7b      	ldrb	r3, [r7, #13]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d001      	beq.n	800bc68 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	e069      	b.n	800bd3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2202      	movs	r2, #2
 800bc6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2202      	movs	r2, #2
 800bc74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc78:	e031      	b.n	800bcde <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	2b04      	cmp	r3, #4
 800bc7e:	d110      	bne.n	800bca2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc80:	7bbb      	ldrb	r3, [r7, #14]
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d102      	bne.n	800bc8c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bc86:	7b3b      	ldrb	r3, [r7, #12]
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d001      	beq.n	800bc90 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e055      	b.n	800bd3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2202      	movs	r2, #2
 800bc94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2202      	movs	r2, #2
 800bc9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bca0:	e01d      	b.n	800bcde <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bca2:	7bfb      	ldrb	r3, [r7, #15]
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d108      	bne.n	800bcba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bca8:	7bbb      	ldrb	r3, [r7, #14]
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d105      	bne.n	800bcba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bcae:	7b7b      	ldrb	r3, [r7, #13]
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d102      	bne.n	800bcba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bcb4:	7b3b      	ldrb	r3, [r7, #12]
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d001      	beq.n	800bcbe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e03e      	b.n	800bd3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2202      	movs	r2, #2
 800bcc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2202      	movs	r2, #2
 800bcca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2202      	movs	r2, #2
 800bcd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2202      	movs	r2, #2
 800bcda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d003      	beq.n	800bcec <HAL_TIM_Encoder_Start+0xc4>
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	2b04      	cmp	r3, #4
 800bce8:	d008      	beq.n	800bcfc <HAL_TIM_Encoder_Start+0xd4>
 800bcea:	e00f      	b.n	800bd0c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	2100      	movs	r1, #0
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f000 ff93 	bl	800cc20 <TIM_CCxChannelCmd>
      break;
 800bcfa:	e016      	b.n	800bd2a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2201      	movs	r2, #1
 800bd02:	2104      	movs	r1, #4
 800bd04:	4618      	mov	r0, r3
 800bd06:	f000 ff8b 	bl	800cc20 <TIM_CCxChannelCmd>
      break;
 800bd0a:	e00e      	b.n	800bd2a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2201      	movs	r2, #1
 800bd12:	2100      	movs	r1, #0
 800bd14:	4618      	mov	r0, r3
 800bd16:	f000 ff83 	bl	800cc20 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	2104      	movs	r1, #4
 800bd22:	4618      	mov	r0, r3
 800bd24:	f000 ff7c 	bl	800cc20 <TIM_CCxChannelCmd>
      break;
 800bd28:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f042 0201 	orr.w	r2, r2, #1
 800bd38:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bd3a:	2300      	movs	r3, #0
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3710      	adds	r7, #16
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	f003 0302 	and.w	r3, r3, #2
 800bd56:	2b02      	cmp	r3, #2
 800bd58:	d122      	bne.n	800bda0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	f003 0302 	and.w	r3, r3, #2
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	d11b      	bne.n	800bda0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f06f 0202 	mvn.w	r2, #2
 800bd70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	f003 0303 	and.w	r3, r3, #3
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d003      	beq.n	800bd8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 fb12 	bl	800c3b0 <HAL_TIM_IC_CaptureCallback>
 800bd8c:	e005      	b.n	800bd9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 fb04 	bl	800c39c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f000 fb15 	bl	800c3c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	f003 0304 	and.w	r3, r3, #4
 800bdaa:	2b04      	cmp	r3, #4
 800bdac:	d122      	bne.n	800bdf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	f003 0304 	and.w	r3, r3, #4
 800bdb8:	2b04      	cmp	r3, #4
 800bdba:	d11b      	bne.n	800bdf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f06f 0204 	mvn.w	r2, #4
 800bdc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2202      	movs	r2, #2
 800bdca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	699b      	ldr	r3, [r3, #24]
 800bdd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d003      	beq.n	800bde2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 fae8 	bl	800c3b0 <HAL_TIM_IC_CaptureCallback>
 800bde0:	e005      	b.n	800bdee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 fada 	bl	800c39c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 faeb 	bl	800c3c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	f003 0308 	and.w	r3, r3, #8
 800bdfe:	2b08      	cmp	r3, #8
 800be00:	d122      	bne.n	800be48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	f003 0308 	and.w	r3, r3, #8
 800be0c:	2b08      	cmp	r3, #8
 800be0e:	d11b      	bne.n	800be48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f06f 0208 	mvn.w	r2, #8
 800be18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2204      	movs	r2, #4
 800be1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	69db      	ldr	r3, [r3, #28]
 800be26:	f003 0303 	and.w	r3, r3, #3
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d003      	beq.n	800be36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 fabe 	bl	800c3b0 <HAL_TIM_IC_CaptureCallback>
 800be34:	e005      	b.n	800be42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fab0 	bl	800c39c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fac1 	bl	800c3c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2200      	movs	r2, #0
 800be46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	f003 0310 	and.w	r3, r3, #16
 800be52:	2b10      	cmp	r3, #16
 800be54:	d122      	bne.n	800be9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	f003 0310 	and.w	r3, r3, #16
 800be60:	2b10      	cmp	r3, #16
 800be62:	d11b      	bne.n	800be9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f06f 0210 	mvn.w	r2, #16
 800be6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2208      	movs	r2, #8
 800be72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	69db      	ldr	r3, [r3, #28]
 800be7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d003      	beq.n	800be8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fa94 	bl	800c3b0 <HAL_TIM_IC_CaptureCallback>
 800be88:	e005      	b.n	800be96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 fa86 	bl	800c39c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 fa97 	bl	800c3c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2200      	movs	r2, #0
 800be9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	691b      	ldr	r3, [r3, #16]
 800bea2:	f003 0301 	and.w	r3, r3, #1
 800bea6:	2b01      	cmp	r3, #1
 800bea8:	d10e      	bne.n	800bec8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	f003 0301 	and.w	r3, r3, #1
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d107      	bne.n	800bec8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f06f 0201 	mvn.w	r2, #1
 800bec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f7f5 fc2c 	bl	8001720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bed2:	2b80      	cmp	r3, #128	; 0x80
 800bed4:	d10e      	bne.n	800bef4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bee0:	2b80      	cmp	r3, #128	; 0x80
 800bee2:	d107      	bne.n	800bef4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800beec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f001 f802 	bl	800cef8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	691b      	ldr	r3, [r3, #16]
 800befa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800befe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf02:	d10e      	bne.n	800bf22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	68db      	ldr	r3, [r3, #12]
 800bf0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf0e:	2b80      	cmp	r3, #128	; 0x80
 800bf10:	d107      	bne.n	800bf22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bf1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 fff5 	bl	800cf0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	691b      	ldr	r3, [r3, #16]
 800bf28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf2c:	2b40      	cmp	r3, #64	; 0x40
 800bf2e:	d10e      	bne.n	800bf4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf3a:	2b40      	cmp	r3, #64	; 0x40
 800bf3c:	d107      	bne.n	800bf4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bf46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 fa45 	bl	800c3d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	691b      	ldr	r3, [r3, #16]
 800bf54:	f003 0320 	and.w	r3, r3, #32
 800bf58:	2b20      	cmp	r3, #32
 800bf5a:	d10e      	bne.n	800bf7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	f003 0320 	and.w	r3, r3, #32
 800bf66:	2b20      	cmp	r3, #32
 800bf68:	d107      	bne.n	800bf7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f06f 0220 	mvn.w	r2, #32
 800bf72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 ffb5 	bl	800cee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf7a:	bf00      	nop
 800bf7c:	3708      	adds	r7, #8
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
	...

0800bf84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b086      	sub	sp, #24
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d101      	bne.n	800bfa2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bf9e:	2302      	movs	r3, #2
 800bfa0:	e0ff      	b.n	800c1a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2b14      	cmp	r3, #20
 800bfae:	f200 80f0 	bhi.w	800c192 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bfb2:	a201      	add	r2, pc, #4	; (adr r2, 800bfb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bfb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb8:	0800c00d 	.word	0x0800c00d
 800bfbc:	0800c193 	.word	0x0800c193
 800bfc0:	0800c193 	.word	0x0800c193
 800bfc4:	0800c193 	.word	0x0800c193
 800bfc8:	0800c04d 	.word	0x0800c04d
 800bfcc:	0800c193 	.word	0x0800c193
 800bfd0:	0800c193 	.word	0x0800c193
 800bfd4:	0800c193 	.word	0x0800c193
 800bfd8:	0800c08f 	.word	0x0800c08f
 800bfdc:	0800c193 	.word	0x0800c193
 800bfe0:	0800c193 	.word	0x0800c193
 800bfe4:	0800c193 	.word	0x0800c193
 800bfe8:	0800c0cf 	.word	0x0800c0cf
 800bfec:	0800c193 	.word	0x0800c193
 800bff0:	0800c193 	.word	0x0800c193
 800bff4:	0800c193 	.word	0x0800c193
 800bff8:	0800c111 	.word	0x0800c111
 800bffc:	0800c193 	.word	0x0800c193
 800c000:	0800c193 	.word	0x0800c193
 800c004:	0800c193 	.word	0x0800c193
 800c008:	0800c151 	.word	0x0800c151
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	68b9      	ldr	r1, [r7, #8]
 800c012:	4618      	mov	r0, r3
 800c014:	f000 fa90 	bl	800c538 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	699a      	ldr	r2, [r3, #24]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f042 0208 	orr.w	r2, r2, #8
 800c026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	699a      	ldr	r2, [r3, #24]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f022 0204 	bic.w	r2, r2, #4
 800c036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	6999      	ldr	r1, [r3, #24]
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	691a      	ldr	r2, [r3, #16]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	430a      	orrs	r2, r1
 800c048:	619a      	str	r2, [r3, #24]
      break;
 800c04a:	e0a5      	b.n	800c198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	68b9      	ldr	r1, [r7, #8]
 800c052:	4618      	mov	r0, r3
 800c054:	f000 fb00 	bl	800c658 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	699a      	ldr	r2, [r3, #24]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	699a      	ldr	r2, [r3, #24]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	6999      	ldr	r1, [r3, #24]
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	691b      	ldr	r3, [r3, #16]
 800c082:	021a      	lsls	r2, r3, #8
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	430a      	orrs	r2, r1
 800c08a:	619a      	str	r2, [r3, #24]
      break;
 800c08c:	e084      	b.n	800c198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	68b9      	ldr	r1, [r7, #8]
 800c094:	4618      	mov	r0, r3
 800c096:	f000 fb69 	bl	800c76c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	69da      	ldr	r2, [r3, #28]
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f042 0208 	orr.w	r2, r2, #8
 800c0a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	69da      	ldr	r2, [r3, #28]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f022 0204 	bic.w	r2, r2, #4
 800c0b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	69d9      	ldr	r1, [r3, #28]
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	691a      	ldr	r2, [r3, #16]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	430a      	orrs	r2, r1
 800c0ca:	61da      	str	r2, [r3, #28]
      break;
 800c0cc:	e064      	b.n	800c198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	68b9      	ldr	r1, [r7, #8]
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f000 fbd1 	bl	800c87c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	69da      	ldr	r2, [r3, #28]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	69da      	ldr	r2, [r3, #28]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	69d9      	ldr	r1, [r3, #28]
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	021a      	lsls	r2, r3, #8
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	430a      	orrs	r2, r1
 800c10c:	61da      	str	r2, [r3, #28]
      break;
 800c10e:	e043      	b.n	800c198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	68b9      	ldr	r1, [r7, #8]
 800c116:	4618      	mov	r0, r3
 800c118:	f000 fc1a 	bl	800c950 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f042 0208 	orr.w	r2, r2, #8
 800c12a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f022 0204 	bic.w	r2, r2, #4
 800c13a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	691a      	ldr	r2, [r3, #16]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	430a      	orrs	r2, r1
 800c14c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c14e:	e023      	b.n	800c198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68b9      	ldr	r1, [r7, #8]
 800c156:	4618      	mov	r0, r3
 800c158:	f000 fc5e 	bl	800ca18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c16a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c17a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	021a      	lsls	r2, r3, #8
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	430a      	orrs	r2, r1
 800c18e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c190:	e002      	b.n	800c198 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c192:	2301      	movs	r3, #1
 800c194:	75fb      	strb	r3, [r7, #23]
      break;
 800c196:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c1a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3718      	adds	r7, #24
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop

0800c1ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d101      	bne.n	800c1c8 <HAL_TIM_ConfigClockSource+0x1c>
 800c1c4:	2302      	movs	r3, #2
 800c1c6:	e0dc      	b.n	800c382 <HAL_TIM_ConfigClockSource+0x1d6>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2202      	movs	r2, #2
 800c1d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	689b      	ldr	r3, [r3, #8]
 800c1de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c1e0:	68ba      	ldr	r2, [r7, #8]
 800c1e2:	4b6a      	ldr	r3, [pc, #424]	; (800c38c <HAL_TIM_ConfigClockSource+0x1e0>)
 800c1e4:	4013      	ands	r3, r2
 800c1e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c1ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68ba      	ldr	r2, [r7, #8]
 800c1f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a64      	ldr	r2, [pc, #400]	; (800c390 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	f000 80a9 	beq.w	800c356 <HAL_TIM_ConfigClockSource+0x1aa>
 800c204:	4a62      	ldr	r2, [pc, #392]	; (800c390 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c206:	4293      	cmp	r3, r2
 800c208:	f200 80ae 	bhi.w	800c368 <HAL_TIM_ConfigClockSource+0x1bc>
 800c20c:	4a61      	ldr	r2, [pc, #388]	; (800c394 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	f000 80a1 	beq.w	800c356 <HAL_TIM_ConfigClockSource+0x1aa>
 800c214:	4a5f      	ldr	r2, [pc, #380]	; (800c394 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c216:	4293      	cmp	r3, r2
 800c218:	f200 80a6 	bhi.w	800c368 <HAL_TIM_ConfigClockSource+0x1bc>
 800c21c:	4a5e      	ldr	r2, [pc, #376]	; (800c398 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	f000 8099 	beq.w	800c356 <HAL_TIM_ConfigClockSource+0x1aa>
 800c224:	4a5c      	ldr	r2, [pc, #368]	; (800c398 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c226:	4293      	cmp	r3, r2
 800c228:	f200 809e 	bhi.w	800c368 <HAL_TIM_ConfigClockSource+0x1bc>
 800c22c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c230:	f000 8091 	beq.w	800c356 <HAL_TIM_ConfigClockSource+0x1aa>
 800c234:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c238:	f200 8096 	bhi.w	800c368 <HAL_TIM_ConfigClockSource+0x1bc>
 800c23c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c240:	f000 8089 	beq.w	800c356 <HAL_TIM_ConfigClockSource+0x1aa>
 800c244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c248:	f200 808e 	bhi.w	800c368 <HAL_TIM_ConfigClockSource+0x1bc>
 800c24c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c250:	d03e      	beq.n	800c2d0 <HAL_TIM_ConfigClockSource+0x124>
 800c252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c256:	f200 8087 	bhi.w	800c368 <HAL_TIM_ConfigClockSource+0x1bc>
 800c25a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c25e:	f000 8086 	beq.w	800c36e <HAL_TIM_ConfigClockSource+0x1c2>
 800c262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c266:	d87f      	bhi.n	800c368 <HAL_TIM_ConfigClockSource+0x1bc>
 800c268:	2b70      	cmp	r3, #112	; 0x70
 800c26a:	d01a      	beq.n	800c2a2 <HAL_TIM_ConfigClockSource+0xf6>
 800c26c:	2b70      	cmp	r3, #112	; 0x70
 800c26e:	d87b      	bhi.n	800c368 <HAL_TIM_ConfigClockSource+0x1bc>
 800c270:	2b60      	cmp	r3, #96	; 0x60
 800c272:	d050      	beq.n	800c316 <HAL_TIM_ConfigClockSource+0x16a>
 800c274:	2b60      	cmp	r3, #96	; 0x60
 800c276:	d877      	bhi.n	800c368 <HAL_TIM_ConfigClockSource+0x1bc>
 800c278:	2b50      	cmp	r3, #80	; 0x50
 800c27a:	d03c      	beq.n	800c2f6 <HAL_TIM_ConfigClockSource+0x14a>
 800c27c:	2b50      	cmp	r3, #80	; 0x50
 800c27e:	d873      	bhi.n	800c368 <HAL_TIM_ConfigClockSource+0x1bc>
 800c280:	2b40      	cmp	r3, #64	; 0x40
 800c282:	d058      	beq.n	800c336 <HAL_TIM_ConfigClockSource+0x18a>
 800c284:	2b40      	cmp	r3, #64	; 0x40
 800c286:	d86f      	bhi.n	800c368 <HAL_TIM_ConfigClockSource+0x1bc>
 800c288:	2b30      	cmp	r3, #48	; 0x30
 800c28a:	d064      	beq.n	800c356 <HAL_TIM_ConfigClockSource+0x1aa>
 800c28c:	2b30      	cmp	r3, #48	; 0x30
 800c28e:	d86b      	bhi.n	800c368 <HAL_TIM_ConfigClockSource+0x1bc>
 800c290:	2b20      	cmp	r3, #32
 800c292:	d060      	beq.n	800c356 <HAL_TIM_ConfigClockSource+0x1aa>
 800c294:	2b20      	cmp	r3, #32
 800c296:	d867      	bhi.n	800c368 <HAL_TIM_ConfigClockSource+0x1bc>
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d05c      	beq.n	800c356 <HAL_TIM_ConfigClockSource+0x1aa>
 800c29c:	2b10      	cmp	r3, #16
 800c29e:	d05a      	beq.n	800c356 <HAL_TIM_ConfigClockSource+0x1aa>
 800c2a0:	e062      	b.n	800c368 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6818      	ldr	r0, [r3, #0]
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	6899      	ldr	r1, [r3, #8]
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	685a      	ldr	r2, [r3, #4]
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	f000 fc95 	bl	800cbe0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	689b      	ldr	r3, [r3, #8]
 800c2bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c2c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	68ba      	ldr	r2, [r7, #8]
 800c2cc:	609a      	str	r2, [r3, #8]
      break;
 800c2ce:	e04f      	b.n	800c370 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6818      	ldr	r0, [r3, #0]
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	6899      	ldr	r1, [r3, #8]
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	685a      	ldr	r2, [r3, #4]
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	f000 fc7e 	bl	800cbe0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	689a      	ldr	r2, [r3, #8]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2f2:	609a      	str	r2, [r3, #8]
      break;
 800c2f4:	e03c      	b.n	800c370 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6818      	ldr	r0, [r3, #0]
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	6859      	ldr	r1, [r3, #4]
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	68db      	ldr	r3, [r3, #12]
 800c302:	461a      	mov	r2, r3
 800c304:	f000 fbee 	bl	800cae4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2150      	movs	r1, #80	; 0x50
 800c30e:	4618      	mov	r0, r3
 800c310:	f000 fc48 	bl	800cba4 <TIM_ITRx_SetConfig>
      break;
 800c314:	e02c      	b.n	800c370 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6818      	ldr	r0, [r3, #0]
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	6859      	ldr	r1, [r3, #4]
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	461a      	mov	r2, r3
 800c324:	f000 fc0d 	bl	800cb42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	2160      	movs	r1, #96	; 0x60
 800c32e:	4618      	mov	r0, r3
 800c330:	f000 fc38 	bl	800cba4 <TIM_ITRx_SetConfig>
      break;
 800c334:	e01c      	b.n	800c370 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6818      	ldr	r0, [r3, #0]
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	6859      	ldr	r1, [r3, #4]
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	68db      	ldr	r3, [r3, #12]
 800c342:	461a      	mov	r2, r3
 800c344:	f000 fbce 	bl	800cae4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2140      	movs	r1, #64	; 0x40
 800c34e:	4618      	mov	r0, r3
 800c350:	f000 fc28 	bl	800cba4 <TIM_ITRx_SetConfig>
      break;
 800c354:	e00c      	b.n	800c370 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4619      	mov	r1, r3
 800c360:	4610      	mov	r0, r2
 800c362:	f000 fc1f 	bl	800cba4 <TIM_ITRx_SetConfig>
      break;
 800c366:	e003      	b.n	800c370 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c368:	2301      	movs	r3, #1
 800c36a:	73fb      	strb	r3, [r7, #15]
      break;
 800c36c:	e000      	b.n	800c370 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c36e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2201      	movs	r2, #1
 800c374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c380:	7bfb      	ldrb	r3, [r7, #15]
}
 800c382:	4618      	mov	r0, r3
 800c384:	3710      	adds	r7, #16
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	ffceff88 	.word	0xffceff88
 800c390:	00100040 	.word	0x00100040
 800c394:	00100030 	.word	0x00100030
 800c398:	00100020 	.word	0x00100020

0800c39c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c3a4:	bf00      	nop
 800c3a6:	370c      	adds	r7, #12
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b083      	sub	sp, #12
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c3b8:	bf00      	nop
 800c3ba:	370c      	adds	r7, #12
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c3cc:	bf00      	nop
 800c3ce:	370c      	adds	r7, #12
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c3e0:	bf00      	nop
 800c3e2:	370c      	adds	r7, #12
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b085      	sub	sp, #20
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	4a44      	ldr	r2, [pc, #272]	; (800c510 <TIM_Base_SetConfig+0x124>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d013      	beq.n	800c42c <TIM_Base_SetConfig+0x40>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c40a:	d00f      	beq.n	800c42c <TIM_Base_SetConfig+0x40>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	4a41      	ldr	r2, [pc, #260]	; (800c514 <TIM_Base_SetConfig+0x128>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d00b      	beq.n	800c42c <TIM_Base_SetConfig+0x40>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4a40      	ldr	r2, [pc, #256]	; (800c518 <TIM_Base_SetConfig+0x12c>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d007      	beq.n	800c42c <TIM_Base_SetConfig+0x40>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	4a3f      	ldr	r2, [pc, #252]	; (800c51c <TIM_Base_SetConfig+0x130>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d003      	beq.n	800c42c <TIM_Base_SetConfig+0x40>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	4a3e      	ldr	r2, [pc, #248]	; (800c520 <TIM_Base_SetConfig+0x134>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d108      	bne.n	800c43e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	4313      	orrs	r3, r2
 800c43c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	4a33      	ldr	r2, [pc, #204]	; (800c510 <TIM_Base_SetConfig+0x124>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d027      	beq.n	800c496 <TIM_Base_SetConfig+0xaa>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c44c:	d023      	beq.n	800c496 <TIM_Base_SetConfig+0xaa>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4a30      	ldr	r2, [pc, #192]	; (800c514 <TIM_Base_SetConfig+0x128>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d01f      	beq.n	800c496 <TIM_Base_SetConfig+0xaa>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4a2f      	ldr	r2, [pc, #188]	; (800c518 <TIM_Base_SetConfig+0x12c>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d01b      	beq.n	800c496 <TIM_Base_SetConfig+0xaa>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	4a2e      	ldr	r2, [pc, #184]	; (800c51c <TIM_Base_SetConfig+0x130>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d017      	beq.n	800c496 <TIM_Base_SetConfig+0xaa>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4a2d      	ldr	r2, [pc, #180]	; (800c520 <TIM_Base_SetConfig+0x134>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d013      	beq.n	800c496 <TIM_Base_SetConfig+0xaa>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4a2c      	ldr	r2, [pc, #176]	; (800c524 <TIM_Base_SetConfig+0x138>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d00f      	beq.n	800c496 <TIM_Base_SetConfig+0xaa>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4a2b      	ldr	r2, [pc, #172]	; (800c528 <TIM_Base_SetConfig+0x13c>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d00b      	beq.n	800c496 <TIM_Base_SetConfig+0xaa>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a2a      	ldr	r2, [pc, #168]	; (800c52c <TIM_Base_SetConfig+0x140>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d007      	beq.n	800c496 <TIM_Base_SetConfig+0xaa>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4a29      	ldr	r2, [pc, #164]	; (800c530 <TIM_Base_SetConfig+0x144>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d003      	beq.n	800c496 <TIM_Base_SetConfig+0xaa>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a28      	ldr	r2, [pc, #160]	; (800c534 <TIM_Base_SetConfig+0x148>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d108      	bne.n	800c4a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c49c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	68db      	ldr	r3, [r3, #12]
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	695b      	ldr	r3, [r3, #20]
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	68fa      	ldr	r2, [r7, #12]
 800c4ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	689a      	ldr	r2, [r3, #8]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	4a10      	ldr	r2, [pc, #64]	; (800c510 <TIM_Base_SetConfig+0x124>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d00f      	beq.n	800c4f4 <TIM_Base_SetConfig+0x108>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	4a12      	ldr	r2, [pc, #72]	; (800c520 <TIM_Base_SetConfig+0x134>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d00b      	beq.n	800c4f4 <TIM_Base_SetConfig+0x108>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	4a11      	ldr	r2, [pc, #68]	; (800c524 <TIM_Base_SetConfig+0x138>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d007      	beq.n	800c4f4 <TIM_Base_SetConfig+0x108>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	4a10      	ldr	r2, [pc, #64]	; (800c528 <TIM_Base_SetConfig+0x13c>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d003      	beq.n	800c4f4 <TIM_Base_SetConfig+0x108>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	4a0f      	ldr	r2, [pc, #60]	; (800c52c <TIM_Base_SetConfig+0x140>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d103      	bne.n	800c4fc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	691a      	ldr	r2, [r3, #16]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2201      	movs	r2, #1
 800c500:	615a      	str	r2, [r3, #20]
}
 800c502:	bf00      	nop
 800c504:	3714      	adds	r7, #20
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop
 800c510:	40010000 	.word	0x40010000
 800c514:	40000400 	.word	0x40000400
 800c518:	40000800 	.word	0x40000800
 800c51c:	40000c00 	.word	0x40000c00
 800c520:	40010400 	.word	0x40010400
 800c524:	40014000 	.word	0x40014000
 800c528:	40014400 	.word	0x40014400
 800c52c:	40014800 	.word	0x40014800
 800c530:	4000e000 	.word	0x4000e000
 800c534:	4000e400 	.word	0x4000e400

0800c538 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c538:	b480      	push	{r7}
 800c53a:	b087      	sub	sp, #28
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6a1b      	ldr	r3, [r3, #32]
 800c546:	f023 0201 	bic.w	r2, r3, #1
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6a1b      	ldr	r3, [r3, #32]
 800c552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	699b      	ldr	r3, [r3, #24]
 800c55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	4b37      	ldr	r3, [pc, #220]	; (800c640 <TIM_OC1_SetConfig+0x108>)
 800c564:	4013      	ands	r3, r2
 800c566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f023 0303 	bic.w	r3, r3, #3
 800c56e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	4313      	orrs	r3, r2
 800c578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	f023 0302 	bic.w	r3, r3, #2
 800c580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	697a      	ldr	r2, [r7, #20]
 800c588:	4313      	orrs	r3, r2
 800c58a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4a2d      	ldr	r2, [pc, #180]	; (800c644 <TIM_OC1_SetConfig+0x10c>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d00f      	beq.n	800c5b4 <TIM_OC1_SetConfig+0x7c>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	4a2c      	ldr	r2, [pc, #176]	; (800c648 <TIM_OC1_SetConfig+0x110>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d00b      	beq.n	800c5b4 <TIM_OC1_SetConfig+0x7c>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	4a2b      	ldr	r2, [pc, #172]	; (800c64c <TIM_OC1_SetConfig+0x114>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d007      	beq.n	800c5b4 <TIM_OC1_SetConfig+0x7c>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4a2a      	ldr	r2, [pc, #168]	; (800c650 <TIM_OC1_SetConfig+0x118>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d003      	beq.n	800c5b4 <TIM_OC1_SetConfig+0x7c>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	4a29      	ldr	r2, [pc, #164]	; (800c654 <TIM_OC1_SetConfig+0x11c>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d10c      	bne.n	800c5ce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	f023 0308 	bic.w	r3, r3, #8
 800c5ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	697a      	ldr	r2, [r7, #20]
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	f023 0304 	bic.w	r3, r3, #4
 800c5cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	4a1c      	ldr	r2, [pc, #112]	; (800c644 <TIM_OC1_SetConfig+0x10c>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d00f      	beq.n	800c5f6 <TIM_OC1_SetConfig+0xbe>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	4a1b      	ldr	r2, [pc, #108]	; (800c648 <TIM_OC1_SetConfig+0x110>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d00b      	beq.n	800c5f6 <TIM_OC1_SetConfig+0xbe>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	4a1a      	ldr	r2, [pc, #104]	; (800c64c <TIM_OC1_SetConfig+0x114>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d007      	beq.n	800c5f6 <TIM_OC1_SetConfig+0xbe>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4a19      	ldr	r2, [pc, #100]	; (800c650 <TIM_OC1_SetConfig+0x118>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d003      	beq.n	800c5f6 <TIM_OC1_SetConfig+0xbe>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	4a18      	ldr	r2, [pc, #96]	; (800c654 <TIM_OC1_SetConfig+0x11c>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d111      	bne.n	800c61a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	695b      	ldr	r3, [r3, #20]
 800c60a:	693a      	ldr	r2, [r7, #16]
 800c60c:	4313      	orrs	r3, r2
 800c60e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	699b      	ldr	r3, [r3, #24]
 800c614:	693a      	ldr	r2, [r7, #16]
 800c616:	4313      	orrs	r3, r2
 800c618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	693a      	ldr	r2, [r7, #16]
 800c61e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	68fa      	ldr	r2, [r7, #12]
 800c624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	685a      	ldr	r2, [r3, #4]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	697a      	ldr	r2, [r7, #20]
 800c632:	621a      	str	r2, [r3, #32]
}
 800c634:	bf00      	nop
 800c636:	371c      	adds	r7, #28
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr
 800c640:	fffeff8f 	.word	0xfffeff8f
 800c644:	40010000 	.word	0x40010000
 800c648:	40010400 	.word	0x40010400
 800c64c:	40014000 	.word	0x40014000
 800c650:	40014400 	.word	0x40014400
 800c654:	40014800 	.word	0x40014800

0800c658 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c658:	b480      	push	{r7}
 800c65a:	b087      	sub	sp, #28
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a1b      	ldr	r3, [r3, #32]
 800c666:	f023 0210 	bic.w	r2, r3, #16
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6a1b      	ldr	r3, [r3, #32]
 800c672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	699b      	ldr	r3, [r3, #24]
 800c67e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	4b34      	ldr	r3, [pc, #208]	; (800c754 <TIM_OC2_SetConfig+0xfc>)
 800c684:	4013      	ands	r3, r2
 800c686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c68e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	021b      	lsls	r3, r3, #8
 800c696:	68fa      	ldr	r2, [r7, #12]
 800c698:	4313      	orrs	r3, r2
 800c69a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	f023 0320 	bic.w	r3, r3, #32
 800c6a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	011b      	lsls	r3, r3, #4
 800c6aa:	697a      	ldr	r2, [r7, #20]
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	4a29      	ldr	r2, [pc, #164]	; (800c758 <TIM_OC2_SetConfig+0x100>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d003      	beq.n	800c6c0 <TIM_OC2_SetConfig+0x68>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	4a28      	ldr	r2, [pc, #160]	; (800c75c <TIM_OC2_SetConfig+0x104>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d10d      	bne.n	800c6dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	011b      	lsls	r3, r3, #4
 800c6ce:	697a      	ldr	r2, [r7, #20]
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4a1e      	ldr	r2, [pc, #120]	; (800c758 <TIM_OC2_SetConfig+0x100>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d00f      	beq.n	800c704 <TIM_OC2_SetConfig+0xac>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	4a1d      	ldr	r2, [pc, #116]	; (800c75c <TIM_OC2_SetConfig+0x104>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d00b      	beq.n	800c704 <TIM_OC2_SetConfig+0xac>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4a1c      	ldr	r2, [pc, #112]	; (800c760 <TIM_OC2_SetConfig+0x108>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d007      	beq.n	800c704 <TIM_OC2_SetConfig+0xac>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	4a1b      	ldr	r2, [pc, #108]	; (800c764 <TIM_OC2_SetConfig+0x10c>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d003      	beq.n	800c704 <TIM_OC2_SetConfig+0xac>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	4a1a      	ldr	r2, [pc, #104]	; (800c768 <TIM_OC2_SetConfig+0x110>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d113      	bne.n	800c72c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c70a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	695b      	ldr	r3, [r3, #20]
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	693a      	ldr	r2, [r7, #16]
 800c71c:	4313      	orrs	r3, r2
 800c71e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	699b      	ldr	r3, [r3, #24]
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	693a      	ldr	r2, [r7, #16]
 800c728:	4313      	orrs	r3, r2
 800c72a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	693a      	ldr	r2, [r7, #16]
 800c730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	685a      	ldr	r2, [r3, #4]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	697a      	ldr	r2, [r7, #20]
 800c744:	621a      	str	r2, [r3, #32]
}
 800c746:	bf00      	nop
 800c748:	371c      	adds	r7, #28
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	feff8fff 	.word	0xfeff8fff
 800c758:	40010000 	.word	0x40010000
 800c75c:	40010400 	.word	0x40010400
 800c760:	40014000 	.word	0x40014000
 800c764:	40014400 	.word	0x40014400
 800c768:	40014800 	.word	0x40014800

0800c76c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b087      	sub	sp, #28
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6a1b      	ldr	r3, [r3, #32]
 800c77a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6a1b      	ldr	r3, [r3, #32]
 800c786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	69db      	ldr	r3, [r3, #28]
 800c792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	4b33      	ldr	r3, [pc, #204]	; (800c864 <TIM_OC3_SetConfig+0xf8>)
 800c798:	4013      	ands	r3, r2
 800c79a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f023 0303 	bic.w	r3, r3, #3
 800c7a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c7b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	021b      	lsls	r3, r3, #8
 800c7bc:	697a      	ldr	r2, [r7, #20]
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4a28      	ldr	r2, [pc, #160]	; (800c868 <TIM_OC3_SetConfig+0xfc>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d003      	beq.n	800c7d2 <TIM_OC3_SetConfig+0x66>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	4a27      	ldr	r2, [pc, #156]	; (800c86c <TIM_OC3_SetConfig+0x100>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d10d      	bne.n	800c7ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c7d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	021b      	lsls	r3, r3, #8
 800c7e0:	697a      	ldr	r2, [r7, #20]
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c7ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4a1d      	ldr	r2, [pc, #116]	; (800c868 <TIM_OC3_SetConfig+0xfc>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d00f      	beq.n	800c816 <TIM_OC3_SetConfig+0xaa>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a1c      	ldr	r2, [pc, #112]	; (800c86c <TIM_OC3_SetConfig+0x100>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d00b      	beq.n	800c816 <TIM_OC3_SetConfig+0xaa>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4a1b      	ldr	r2, [pc, #108]	; (800c870 <TIM_OC3_SetConfig+0x104>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d007      	beq.n	800c816 <TIM_OC3_SetConfig+0xaa>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a1a      	ldr	r2, [pc, #104]	; (800c874 <TIM_OC3_SetConfig+0x108>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d003      	beq.n	800c816 <TIM_OC3_SetConfig+0xaa>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	4a19      	ldr	r2, [pc, #100]	; (800c878 <TIM_OC3_SetConfig+0x10c>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d113      	bne.n	800c83e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c81c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	695b      	ldr	r3, [r3, #20]
 800c82a:	011b      	lsls	r3, r3, #4
 800c82c:	693a      	ldr	r2, [r7, #16]
 800c82e:	4313      	orrs	r3, r2
 800c830:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	699b      	ldr	r3, [r3, #24]
 800c836:	011b      	lsls	r3, r3, #4
 800c838:	693a      	ldr	r2, [r7, #16]
 800c83a:	4313      	orrs	r3, r2
 800c83c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	693a      	ldr	r2, [r7, #16]
 800c842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	68fa      	ldr	r2, [r7, #12]
 800c848:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	685a      	ldr	r2, [r3, #4]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	697a      	ldr	r2, [r7, #20]
 800c856:	621a      	str	r2, [r3, #32]
}
 800c858:	bf00      	nop
 800c85a:	371c      	adds	r7, #28
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr
 800c864:	fffeff8f 	.word	0xfffeff8f
 800c868:	40010000 	.word	0x40010000
 800c86c:	40010400 	.word	0x40010400
 800c870:	40014000 	.word	0x40014000
 800c874:	40014400 	.word	0x40014400
 800c878:	40014800 	.word	0x40014800

0800c87c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b087      	sub	sp, #28
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6a1b      	ldr	r3, [r3, #32]
 800c88a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a1b      	ldr	r3, [r3, #32]
 800c896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	69db      	ldr	r3, [r3, #28]
 800c8a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c8a4:	68fa      	ldr	r2, [r7, #12]
 800c8a6:	4b24      	ldr	r3, [pc, #144]	; (800c938 <TIM_OC4_SetConfig+0xbc>)
 800c8a8:	4013      	ands	r3, r2
 800c8aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	021b      	lsls	r3, r3, #8
 800c8ba:	68fa      	ldr	r2, [r7, #12]
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c8c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	031b      	lsls	r3, r3, #12
 800c8ce:	693a      	ldr	r2, [r7, #16]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	4a19      	ldr	r2, [pc, #100]	; (800c93c <TIM_OC4_SetConfig+0xc0>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d00f      	beq.n	800c8fc <TIM_OC4_SetConfig+0x80>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	4a18      	ldr	r2, [pc, #96]	; (800c940 <TIM_OC4_SetConfig+0xc4>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d00b      	beq.n	800c8fc <TIM_OC4_SetConfig+0x80>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	4a17      	ldr	r2, [pc, #92]	; (800c944 <TIM_OC4_SetConfig+0xc8>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d007      	beq.n	800c8fc <TIM_OC4_SetConfig+0x80>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	4a16      	ldr	r2, [pc, #88]	; (800c948 <TIM_OC4_SetConfig+0xcc>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d003      	beq.n	800c8fc <TIM_OC4_SetConfig+0x80>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	4a15      	ldr	r2, [pc, #84]	; (800c94c <TIM_OC4_SetConfig+0xd0>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d109      	bne.n	800c910 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	695b      	ldr	r3, [r3, #20]
 800c908:	019b      	lsls	r3, r3, #6
 800c90a:	697a      	ldr	r2, [r7, #20]
 800c90c:	4313      	orrs	r3, r2
 800c90e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	697a      	ldr	r2, [r7, #20]
 800c914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	68fa      	ldr	r2, [r7, #12]
 800c91a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	685a      	ldr	r2, [r3, #4]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	693a      	ldr	r2, [r7, #16]
 800c928:	621a      	str	r2, [r3, #32]
}
 800c92a:	bf00      	nop
 800c92c:	371c      	adds	r7, #28
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop
 800c938:	feff8fff 	.word	0xfeff8fff
 800c93c:	40010000 	.word	0x40010000
 800c940:	40010400 	.word	0x40010400
 800c944:	40014000 	.word	0x40014000
 800c948:	40014400 	.word	0x40014400
 800c94c:	40014800 	.word	0x40014800

0800c950 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c950:	b480      	push	{r7}
 800c952:	b087      	sub	sp, #28
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6a1b      	ldr	r3, [r3, #32]
 800c95e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a1b      	ldr	r3, [r3, #32]
 800c96a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c978:	68fa      	ldr	r2, [r7, #12]
 800c97a:	4b21      	ldr	r3, [pc, #132]	; (800ca00 <TIM_OC5_SetConfig+0xb0>)
 800c97c:	4013      	ands	r3, r2
 800c97e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	68fa      	ldr	r2, [r7, #12]
 800c986:	4313      	orrs	r3, r2
 800c988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c990:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	041b      	lsls	r3, r3, #16
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	4313      	orrs	r3, r2
 800c99c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	4a18      	ldr	r2, [pc, #96]	; (800ca04 <TIM_OC5_SetConfig+0xb4>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d00f      	beq.n	800c9c6 <TIM_OC5_SetConfig+0x76>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	4a17      	ldr	r2, [pc, #92]	; (800ca08 <TIM_OC5_SetConfig+0xb8>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d00b      	beq.n	800c9c6 <TIM_OC5_SetConfig+0x76>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	4a16      	ldr	r2, [pc, #88]	; (800ca0c <TIM_OC5_SetConfig+0xbc>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d007      	beq.n	800c9c6 <TIM_OC5_SetConfig+0x76>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	4a15      	ldr	r2, [pc, #84]	; (800ca10 <TIM_OC5_SetConfig+0xc0>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d003      	beq.n	800c9c6 <TIM_OC5_SetConfig+0x76>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	4a14      	ldr	r2, [pc, #80]	; (800ca14 <TIM_OC5_SetConfig+0xc4>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d109      	bne.n	800c9da <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c9cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	695b      	ldr	r3, [r3, #20]
 800c9d2:	021b      	lsls	r3, r3, #8
 800c9d4:	697a      	ldr	r2, [r7, #20]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	697a      	ldr	r2, [r7, #20]
 800c9de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	68fa      	ldr	r2, [r7, #12]
 800c9e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	685a      	ldr	r2, [r3, #4]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	693a      	ldr	r2, [r7, #16]
 800c9f2:	621a      	str	r2, [r3, #32]
}
 800c9f4:	bf00      	nop
 800c9f6:	371c      	adds	r7, #28
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr
 800ca00:	fffeff8f 	.word	0xfffeff8f
 800ca04:	40010000 	.word	0x40010000
 800ca08:	40010400 	.word	0x40010400
 800ca0c:	40014000 	.word	0x40014000
 800ca10:	40014400 	.word	0x40014400
 800ca14:	40014800 	.word	0x40014800

0800ca18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b087      	sub	sp, #28
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6a1b      	ldr	r3, [r3, #32]
 800ca26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6a1b      	ldr	r3, [r3, #32]
 800ca32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ca40:	68fa      	ldr	r2, [r7, #12]
 800ca42:	4b22      	ldr	r3, [pc, #136]	; (800cacc <TIM_OC6_SetConfig+0xb4>)
 800ca44:	4013      	ands	r3, r2
 800ca46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	021b      	lsls	r3, r3, #8
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	4313      	orrs	r3, r2
 800ca52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ca5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	051b      	lsls	r3, r3, #20
 800ca62:	693a      	ldr	r2, [r7, #16]
 800ca64:	4313      	orrs	r3, r2
 800ca66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	4a19      	ldr	r2, [pc, #100]	; (800cad0 <TIM_OC6_SetConfig+0xb8>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d00f      	beq.n	800ca90 <TIM_OC6_SetConfig+0x78>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a18      	ldr	r2, [pc, #96]	; (800cad4 <TIM_OC6_SetConfig+0xbc>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d00b      	beq.n	800ca90 <TIM_OC6_SetConfig+0x78>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4a17      	ldr	r2, [pc, #92]	; (800cad8 <TIM_OC6_SetConfig+0xc0>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d007      	beq.n	800ca90 <TIM_OC6_SetConfig+0x78>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	4a16      	ldr	r2, [pc, #88]	; (800cadc <TIM_OC6_SetConfig+0xc4>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d003      	beq.n	800ca90 <TIM_OC6_SetConfig+0x78>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4a15      	ldr	r2, [pc, #84]	; (800cae0 <TIM_OC6_SetConfig+0xc8>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d109      	bne.n	800caa4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	695b      	ldr	r3, [r3, #20]
 800ca9c:	029b      	lsls	r3, r3, #10
 800ca9e:	697a      	ldr	r2, [r7, #20]
 800caa0:	4313      	orrs	r3, r2
 800caa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	697a      	ldr	r2, [r7, #20]
 800caa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	685a      	ldr	r2, [r3, #4]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	693a      	ldr	r2, [r7, #16]
 800cabc:	621a      	str	r2, [r3, #32]
}
 800cabe:	bf00      	nop
 800cac0:	371c      	adds	r7, #28
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop
 800cacc:	feff8fff 	.word	0xfeff8fff
 800cad0:	40010000 	.word	0x40010000
 800cad4:	40010400 	.word	0x40010400
 800cad8:	40014000 	.word	0x40014000
 800cadc:	40014400 	.word	0x40014400
 800cae0:	40014800 	.word	0x40014800

0800cae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b087      	sub	sp, #28
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	6a1b      	ldr	r3, [r3, #32]
 800caf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	6a1b      	ldr	r3, [r3, #32]
 800cafa:	f023 0201 	bic.w	r2, r3, #1
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	699b      	ldr	r3, [r3, #24]
 800cb06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cb0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	011b      	lsls	r3, r3, #4
 800cb14:	693a      	ldr	r2, [r7, #16]
 800cb16:	4313      	orrs	r3, r2
 800cb18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	f023 030a 	bic.w	r3, r3, #10
 800cb20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cb22:	697a      	ldr	r2, [r7, #20]
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	4313      	orrs	r3, r2
 800cb28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	693a      	ldr	r2, [r7, #16]
 800cb2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	697a      	ldr	r2, [r7, #20]
 800cb34:	621a      	str	r2, [r3, #32]
}
 800cb36:	bf00      	nop
 800cb38:	371c      	adds	r7, #28
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr

0800cb42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb42:	b480      	push	{r7}
 800cb44:	b087      	sub	sp, #28
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	60f8      	str	r0, [r7, #12]
 800cb4a:	60b9      	str	r1, [r7, #8]
 800cb4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	6a1b      	ldr	r3, [r3, #32]
 800cb52:	f023 0210 	bic.w	r2, r3, #16
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	699b      	ldr	r3, [r3, #24]
 800cb5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	6a1b      	ldr	r3, [r3, #32]
 800cb64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cb6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	031b      	lsls	r3, r3, #12
 800cb72:	697a      	ldr	r2, [r7, #20]
 800cb74:	4313      	orrs	r3, r2
 800cb76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cb7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	011b      	lsls	r3, r3, #4
 800cb84:	693a      	ldr	r2, [r7, #16]
 800cb86:	4313      	orrs	r3, r2
 800cb88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	697a      	ldr	r2, [r7, #20]
 800cb8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	693a      	ldr	r2, [r7, #16]
 800cb94:	621a      	str	r2, [r3, #32]
}
 800cb96:	bf00      	nop
 800cb98:	371c      	adds	r7, #28
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr
	...

0800cba4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b085      	sub	sp, #20
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	689b      	ldr	r3, [r3, #8]
 800cbb2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	4b09      	ldr	r3, [pc, #36]	; (800cbdc <TIM_ITRx_SetConfig+0x38>)
 800cbb8:	4013      	ands	r3, r2
 800cbba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cbbc:	683a      	ldr	r2, [r7, #0]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	f043 0307 	orr.w	r3, r3, #7
 800cbc6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	68fa      	ldr	r2, [r7, #12]
 800cbcc:	609a      	str	r2, [r3, #8]
}
 800cbce:	bf00      	nop
 800cbd0:	3714      	adds	r7, #20
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr
 800cbda:	bf00      	nop
 800cbdc:	ffcfff8f 	.word	0xffcfff8f

0800cbe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b087      	sub	sp, #28
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	607a      	str	r2, [r7, #4]
 800cbec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cbfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	021a      	lsls	r2, r3, #8
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	431a      	orrs	r2, r3
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	4313      	orrs	r3, r2
 800cc08:	697a      	ldr	r2, [r7, #20]
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	697a      	ldr	r2, [r7, #20]
 800cc12:	609a      	str	r2, [r3, #8]
}
 800cc14:	bf00      	nop
 800cc16:	371c      	adds	r7, #28
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr

0800cc20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b087      	sub	sp, #28
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	f003 031f 	and.w	r3, r3, #31
 800cc32:	2201      	movs	r2, #1
 800cc34:	fa02 f303 	lsl.w	r3, r2, r3
 800cc38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	6a1a      	ldr	r2, [r3, #32]
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	43db      	mvns	r3, r3
 800cc42:	401a      	ands	r2, r3
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	6a1a      	ldr	r2, [r3, #32]
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	f003 031f 	and.w	r3, r3, #31
 800cc52:	6879      	ldr	r1, [r7, #4]
 800cc54:	fa01 f303 	lsl.w	r3, r1, r3
 800cc58:	431a      	orrs	r2, r3
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	621a      	str	r2, [r3, #32]
}
 800cc5e:	bf00      	nop
 800cc60:	371c      	adds	r7, #28
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr
	...

0800cc6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b085      	sub	sp, #20
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d101      	bne.n	800cc84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cc80:	2302      	movs	r3, #2
 800cc82:	e077      	b.n	800cd74 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2201      	movs	r2, #1
 800cc88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2202      	movs	r2, #2
 800cc90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4a35      	ldr	r2, [pc, #212]	; (800cd80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d004      	beq.n	800ccb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4a34      	ldr	r2, [pc, #208]	; (800cd84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d108      	bne.n	800ccca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ccbe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	68fa      	ldr	r2, [r7, #12]
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	68fa      	ldr	r2, [r7, #12]
 800cce2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4a25      	ldr	r2, [pc, #148]	; (800cd80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d02c      	beq.n	800cd48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccf6:	d027      	beq.n	800cd48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	4a22      	ldr	r2, [pc, #136]	; (800cd88 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d022      	beq.n	800cd48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4a21      	ldr	r2, [pc, #132]	; (800cd8c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d01d      	beq.n	800cd48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4a1f      	ldr	r2, [pc, #124]	; (800cd90 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d018      	beq.n	800cd48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4a1a      	ldr	r2, [pc, #104]	; (800cd84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d013      	beq.n	800cd48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a1b      	ldr	r2, [pc, #108]	; (800cd94 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d00e      	beq.n	800cd48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	4a1a      	ldr	r2, [pc, #104]	; (800cd98 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d009      	beq.n	800cd48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a18      	ldr	r2, [pc, #96]	; (800cd9c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d004      	beq.n	800cd48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4a17      	ldr	r2, [pc, #92]	; (800cda0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d10c      	bne.n	800cd62 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	689b      	ldr	r3, [r3, #8]
 800cd54:	68ba      	ldr	r2, [r7, #8]
 800cd56:	4313      	orrs	r3, r2
 800cd58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	68ba      	ldr	r2, [r7, #8]
 800cd60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2201      	movs	r2, #1
 800cd66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd72:	2300      	movs	r3, #0
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3714      	adds	r7, #20
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr
 800cd80:	40010000 	.word	0x40010000
 800cd84:	40010400 	.word	0x40010400
 800cd88:	40000400 	.word	0x40000400
 800cd8c:	40000800 	.word	0x40000800
 800cd90:	40000c00 	.word	0x40000c00
 800cd94:	40001800 	.word	0x40001800
 800cd98:	40014000 	.word	0x40014000
 800cd9c:	4000e000 	.word	0x4000e000
 800cda0:	4000e400 	.word	0x4000e400

0800cda4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b085      	sub	sp, #20
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d101      	bne.n	800cdc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cdbc:	2302      	movs	r3, #2
 800cdbe:	e087      	b.n	800ced0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	68db      	ldr	r3, [r3, #12]
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	4313      	orrs	r3, r2
 800cde2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	691b      	ldr	r3, [r3, #16]
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	695b      	ldr	r3, [r3, #20]
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce26:	4313      	orrs	r3, r2
 800ce28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	699b      	ldr	r3, [r3, #24]
 800ce34:	041b      	lsls	r3, r3, #16
 800ce36:	4313      	orrs	r3, r2
 800ce38:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4a27      	ldr	r2, [pc, #156]	; (800cedc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d004      	beq.n	800ce4e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4a25      	ldr	r2, [pc, #148]	; (800cee0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d106      	bne.n	800ce5c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	69db      	ldr	r3, [r3, #28]
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a1e      	ldr	r2, [pc, #120]	; (800cedc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d004      	beq.n	800ce70 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4a1d      	ldr	r2, [pc, #116]	; (800cee0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d126      	bne.n	800cebe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce7a:	051b      	lsls	r3, r3, #20
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	6a1b      	ldr	r3, [r3, #32]
 800ce8a:	4313      	orrs	r3, r2
 800ce8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce98:	4313      	orrs	r3, r2
 800ce9a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a0e      	ldr	r2, [pc, #56]	; (800cedc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d004      	beq.n	800ceb0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4a0d      	ldr	r2, [pc, #52]	; (800cee0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d106      	bne.n	800cebe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceba:	4313      	orrs	r3, r2
 800cebc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	68fa      	ldr	r2, [r7, #12]
 800cec4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cece:	2300      	movs	r3, #0
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3714      	adds	r7, #20
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr
 800cedc:	40010000 	.word	0x40010000
 800cee0:	40010400 	.word	0x40010400

0800cee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ceec:	bf00      	nop
 800ceee:	370c      	adds	r7, #12
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cf00:	bf00      	nop
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr

0800cf0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cf14:	bf00      	nop
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d101      	bne.n	800cf32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	e042      	b.n	800cfb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d106      	bne.n	800cf4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f7f8 f85d 	bl	8005004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2224      	movs	r2, #36	; 0x24
 800cf4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f022 0201 	bic.w	r2, r2, #1
 800cf60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f000 fd1c 	bl	800d9a0 <UART_SetConfig>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d101      	bne.n	800cf72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e022      	b.n	800cfb8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d002      	beq.n	800cf80 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f001 fb7c 	bl	800e678 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	685a      	ldr	r2, [r3, #4]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cf8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	689a      	ldr	r2, [r3, #8]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cf9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f042 0201 	orr.w	r2, r2, #1
 800cfae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f001 fc03 	bl	800e7bc <UART_CheckIdleState>
 800cfb6:	4603      	mov	r3, r0
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3708      	adds	r7, #8
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d101      	bne.n	800cfd2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	e031      	b.n	800d036 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2224      	movs	r2, #36	; 0x24
 800cfd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	681a      	ldr	r2, [r3, #0]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f022 0201 	bic.w	r2, r2, #1
 800cfe8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2200      	movs	r2, #0
 800cff0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2200      	movs	r2, #0
 800cff8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2200      	movs	r2, #0
 800d000:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f7f8 f8d6 	bl	80051b4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2200      	movs	r2, #0
 800d00c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2200      	movs	r2, #0
 800d014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2200      	movs	r2, #0
 800d02a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2200      	movs	r2, #0
 800d030:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d034:	2300      	movs	r3, #0
}
 800d036:	4618      	mov	r0, r3
 800d038:	3708      	adds	r7, #8
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
	...

0800d040 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b08a      	sub	sp, #40	; 0x28
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	4613      	mov	r3, r2
 800d04c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d054:	2b20      	cmp	r3, #32
 800d056:	d167      	bne.n	800d128 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d002      	beq.n	800d064 <HAL_UART_Transmit_DMA+0x24>
 800d05e:	88fb      	ldrh	r3, [r7, #6]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d101      	bne.n	800d068 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800d064:	2301      	movs	r3, #1
 800d066:	e060      	b.n	800d12a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	68ba      	ldr	r2, [r7, #8]
 800d06c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	88fa      	ldrh	r2, [r7, #6]
 800d072:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	88fa      	ldrh	r2, [r7, #6]
 800d07a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2200      	movs	r2, #0
 800d082:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2221      	movs	r2, #33	; 0x21
 800d08a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d092:	2b00      	cmp	r3, #0
 800d094:	d028      	beq.n	800d0e8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d09a:	4a26      	ldr	r2, [pc, #152]	; (800d134 <HAL_UART_Transmit_DMA+0xf4>)
 800d09c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0a2:	4a25      	ldr	r2, [pc, #148]	; (800d138 <HAL_UART_Transmit_DMA+0xf8>)
 800d0a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0aa:	4a24      	ldr	r2, [pc, #144]	; (800d13c <HAL_UART_Transmit_DMA+0xfc>)
 800d0ac:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0be:	4619      	mov	r1, r3
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	3328      	adds	r3, #40	; 0x28
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	88fb      	ldrh	r3, [r7, #6]
 800d0ca:	f7f8 ffaf 	bl	800602c <HAL_DMA_Start_IT>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d009      	beq.n	800d0e8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2210      	movs	r2, #16
 800d0d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2220      	movs	r2, #32
 800d0e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	e020      	b.n	800d12a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2240      	movs	r2, #64	; 0x40
 800d0ee:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	3308      	adds	r3, #8
 800d0f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	e853 3f00 	ldrex	r3, [r3]
 800d0fe:	613b      	str	r3, [r7, #16]
   return(result);
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d106:	627b      	str	r3, [r7, #36]	; 0x24
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	3308      	adds	r3, #8
 800d10e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d110:	623a      	str	r2, [r7, #32]
 800d112:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d114:	69f9      	ldr	r1, [r7, #28]
 800d116:	6a3a      	ldr	r2, [r7, #32]
 800d118:	e841 2300 	strex	r3, r2, [r1]
 800d11c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1e5      	bne.n	800d0f0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800d124:	2300      	movs	r3, #0
 800d126:	e000      	b.n	800d12a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800d128:	2302      	movs	r3, #2
  }
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3728      	adds	r7, #40	; 0x28
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	0800ec7d 	.word	0x0800ec7d
 800d138:	0800ed13 	.word	0x0800ed13
 800d13c:	0800ee95 	.word	0x0800ee95

0800d140 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b08a      	sub	sp, #40	; 0x28
 800d144:	af00      	add	r7, sp, #0
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	4613      	mov	r3, r2
 800d14c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d154:	2b20      	cmp	r3, #32
 800d156:	d137      	bne.n	800d1c8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d002      	beq.n	800d164 <HAL_UART_Receive_DMA+0x24>
 800d15e:	88fb      	ldrh	r3, [r7, #6]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d101      	bne.n	800d168 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d164:	2301      	movs	r3, #1
 800d166:	e030      	b.n	800d1ca <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2200      	movs	r2, #0
 800d16c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4a18      	ldr	r2, [pc, #96]	; (800d1d4 <HAL_UART_Receive_DMA+0x94>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d01f      	beq.n	800d1b8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	685b      	ldr	r3, [r3, #4]
 800d17e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d182:	2b00      	cmp	r3, #0
 800d184:	d018      	beq.n	800d1b8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	e853 3f00 	ldrex	r3, [r3]
 800d192:	613b      	str	r3, [r7, #16]
   return(result);
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d19a:	627b      	str	r3, [r7, #36]	; 0x24
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a4:	623b      	str	r3, [r7, #32]
 800d1a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1a8:	69f9      	ldr	r1, [r7, #28]
 800d1aa:	6a3a      	ldr	r2, [r7, #32]
 800d1ac:	e841 2300 	strex	r3, r2, [r1]
 800d1b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d1b2:	69bb      	ldr	r3, [r7, #24]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d1e6      	bne.n	800d186 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d1b8:	88fb      	ldrh	r3, [r7, #6]
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	68b9      	ldr	r1, [r7, #8]
 800d1be:	68f8      	ldr	r0, [r7, #12]
 800d1c0:	f001 fc0e 	bl	800e9e0 <UART_Start_Receive_DMA>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	e000      	b.n	800d1ca <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d1c8:	2302      	movs	r3, #2
  }
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3728      	adds	r7, #40	; 0x28
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	58000c00 	.word	0x58000c00

0800d1d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b0ba      	sub	sp, #232	; 0xe8
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	69db      	ldr	r3, [r3, #28]
 800d1e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	689b      	ldr	r3, [r3, #8]
 800d1fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d1fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d202:	f640 030f 	movw	r3, #2063	; 0x80f
 800d206:	4013      	ands	r3, r2
 800d208:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d20c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d210:	2b00      	cmp	r3, #0
 800d212:	d11b      	bne.n	800d24c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d218:	f003 0320 	and.w	r3, r3, #32
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d015      	beq.n	800d24c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d224:	f003 0320 	and.w	r3, r3, #32
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d105      	bne.n	800d238 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d22c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d234:	2b00      	cmp	r3, #0
 800d236:	d009      	beq.n	800d24c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	f000 8377 	beq.w	800d930 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	4798      	blx	r3
      }
      return;
 800d24a:	e371      	b.n	800d930 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d24c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d250:	2b00      	cmp	r3, #0
 800d252:	f000 8123 	beq.w	800d49c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d256:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d25a:	4b8d      	ldr	r3, [pc, #564]	; (800d490 <HAL_UART_IRQHandler+0x2b8>)
 800d25c:	4013      	ands	r3, r2
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d106      	bne.n	800d270 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d262:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d266:	4b8b      	ldr	r3, [pc, #556]	; (800d494 <HAL_UART_IRQHandler+0x2bc>)
 800d268:	4013      	ands	r3, r2
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	f000 8116 	beq.w	800d49c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d274:	f003 0301 	and.w	r3, r3, #1
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d011      	beq.n	800d2a0 <HAL_UART_IRQHandler+0xc8>
 800d27c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d284:	2b00      	cmp	r3, #0
 800d286:	d00b      	beq.n	800d2a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	2201      	movs	r2, #1
 800d28e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d296:	f043 0201 	orr.w	r2, r3, #1
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2a4:	f003 0302 	and.w	r3, r3, #2
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d011      	beq.n	800d2d0 <HAL_UART_IRQHandler+0xf8>
 800d2ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2b0:	f003 0301 	and.w	r3, r3, #1
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d00b      	beq.n	800d2d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2202      	movs	r2, #2
 800d2be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2c6:	f043 0204 	orr.w	r2, r3, #4
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2d4:	f003 0304 	and.w	r3, r3, #4
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d011      	beq.n	800d300 <HAL_UART_IRQHandler+0x128>
 800d2dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2e0:	f003 0301 	and.w	r3, r3, #1
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d00b      	beq.n	800d300 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	2204      	movs	r2, #4
 800d2ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2f6:	f043 0202 	orr.w	r2, r3, #2
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d304:	f003 0308 	and.w	r3, r3, #8
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d017      	beq.n	800d33c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d30c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d310:	f003 0320 	and.w	r3, r3, #32
 800d314:	2b00      	cmp	r3, #0
 800d316:	d105      	bne.n	800d324 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d318:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d31c:	4b5c      	ldr	r3, [pc, #368]	; (800d490 <HAL_UART_IRQHandler+0x2b8>)
 800d31e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d320:	2b00      	cmp	r3, #0
 800d322:	d00b      	beq.n	800d33c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	2208      	movs	r2, #8
 800d32a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d332:	f043 0208 	orr.w	r2, r3, #8
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d33c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d344:	2b00      	cmp	r3, #0
 800d346:	d012      	beq.n	800d36e <HAL_UART_IRQHandler+0x196>
 800d348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d34c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d350:	2b00      	cmp	r3, #0
 800d352:	d00c      	beq.n	800d36e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d35c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d364:	f043 0220 	orr.w	r2, r3, #32
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d374:	2b00      	cmp	r3, #0
 800d376:	f000 82dd 	beq.w	800d934 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d37a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d37e:	f003 0320 	and.w	r3, r3, #32
 800d382:	2b00      	cmp	r3, #0
 800d384:	d013      	beq.n	800d3ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d38a:	f003 0320 	and.w	r3, r3, #32
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d105      	bne.n	800d39e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d007      	beq.n	800d3ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d003      	beq.n	800d3ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3c2:	2b40      	cmp	r3, #64	; 0x40
 800d3c4:	d005      	beq.n	800d3d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d3c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d3ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d054      	beq.n	800d47c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f001 fbec 	bl	800ebb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	689b      	ldr	r3, [r3, #8]
 800d3de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3e2:	2b40      	cmp	r3, #64	; 0x40
 800d3e4:	d146      	bne.n	800d474 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	3308      	adds	r3, #8
 800d3ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d3f4:	e853 3f00 	ldrex	r3, [r3]
 800d3f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d3fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d404:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	3308      	adds	r3, #8
 800d40e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d412:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d41e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d422:	e841 2300 	strex	r3, r2, [r1]
 800d426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d42a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d1d9      	bne.n	800d3e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d017      	beq.n	800d46c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d442:	4a15      	ldr	r2, [pc, #84]	; (800d498 <HAL_UART_IRQHandler+0x2c0>)
 800d444:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7f9 fb75 	bl	8006b3c <HAL_DMA_Abort_IT>
 800d452:	4603      	mov	r3, r0
 800d454:	2b00      	cmp	r3, #0
 800d456:	d019      	beq.n	800d48c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d45e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d466:	4610      	mov	r0, r2
 800d468:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d46a:	e00f      	b.n	800d48c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f7f4 f9c7 	bl	8001800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d472:	e00b      	b.n	800d48c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f7f4 f9c3 	bl	8001800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d47a:	e007      	b.n	800d48c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f7f4 f9bf 	bl	8001800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d48a:	e253      	b.n	800d934 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d48c:	bf00      	nop
    return;
 800d48e:	e251      	b.n	800d934 <HAL_UART_IRQHandler+0x75c>
 800d490:	10000001 	.word	0x10000001
 800d494:	04000120 	.word	0x04000120
 800d498:	0800ef15 	.word	0x0800ef15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	f040 81e7 	bne.w	800d874 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d4a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4aa:	f003 0310 	and.w	r3, r3, #16
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	f000 81e0 	beq.w	800d874 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d4b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4b8:	f003 0310 	and.w	r3, r3, #16
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	f000 81d9 	beq.w	800d874 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	2210      	movs	r2, #16
 800d4c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	689b      	ldr	r3, [r3, #8]
 800d4d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4d4:	2b40      	cmp	r3, #64	; 0x40
 800d4d6:	f040 8151 	bne.w	800d77c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	4a96      	ldr	r2, [pc, #600]	; (800d73c <HAL_UART_IRQHandler+0x564>)
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d068      	beq.n	800d5ba <HAL_UART_IRQHandler+0x3e2>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	4a93      	ldr	r2, [pc, #588]	; (800d740 <HAL_UART_IRQHandler+0x568>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d061      	beq.n	800d5ba <HAL_UART_IRQHandler+0x3e2>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	4a91      	ldr	r2, [pc, #580]	; (800d744 <HAL_UART_IRQHandler+0x56c>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d05a      	beq.n	800d5ba <HAL_UART_IRQHandler+0x3e2>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	4a8e      	ldr	r2, [pc, #568]	; (800d748 <HAL_UART_IRQHandler+0x570>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d053      	beq.n	800d5ba <HAL_UART_IRQHandler+0x3e2>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a8c      	ldr	r2, [pc, #560]	; (800d74c <HAL_UART_IRQHandler+0x574>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d04c      	beq.n	800d5ba <HAL_UART_IRQHandler+0x3e2>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	4a89      	ldr	r2, [pc, #548]	; (800d750 <HAL_UART_IRQHandler+0x578>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d045      	beq.n	800d5ba <HAL_UART_IRQHandler+0x3e2>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	4a87      	ldr	r2, [pc, #540]	; (800d754 <HAL_UART_IRQHandler+0x57c>)
 800d538:	4293      	cmp	r3, r2
 800d53a:	d03e      	beq.n	800d5ba <HAL_UART_IRQHandler+0x3e2>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4a84      	ldr	r2, [pc, #528]	; (800d758 <HAL_UART_IRQHandler+0x580>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d037      	beq.n	800d5ba <HAL_UART_IRQHandler+0x3e2>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	4a82      	ldr	r2, [pc, #520]	; (800d75c <HAL_UART_IRQHandler+0x584>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d030      	beq.n	800d5ba <HAL_UART_IRQHandler+0x3e2>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a7f      	ldr	r2, [pc, #508]	; (800d760 <HAL_UART_IRQHandler+0x588>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d029      	beq.n	800d5ba <HAL_UART_IRQHandler+0x3e2>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4a7d      	ldr	r2, [pc, #500]	; (800d764 <HAL_UART_IRQHandler+0x58c>)
 800d570:	4293      	cmp	r3, r2
 800d572:	d022      	beq.n	800d5ba <HAL_UART_IRQHandler+0x3e2>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4a7a      	ldr	r2, [pc, #488]	; (800d768 <HAL_UART_IRQHandler+0x590>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d01b      	beq.n	800d5ba <HAL_UART_IRQHandler+0x3e2>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a78      	ldr	r2, [pc, #480]	; (800d76c <HAL_UART_IRQHandler+0x594>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d014      	beq.n	800d5ba <HAL_UART_IRQHandler+0x3e2>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4a75      	ldr	r2, [pc, #468]	; (800d770 <HAL_UART_IRQHandler+0x598>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d00d      	beq.n	800d5ba <HAL_UART_IRQHandler+0x3e2>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	4a73      	ldr	r2, [pc, #460]	; (800d774 <HAL_UART_IRQHandler+0x59c>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d006      	beq.n	800d5ba <HAL_UART_IRQHandler+0x3e2>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4a70      	ldr	r2, [pc, #448]	; (800d778 <HAL_UART_IRQHandler+0x5a0>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d106      	bne.n	800d5c8 <HAL_UART_IRQHandler+0x3f0>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	e005      	b.n	800d5d4 <HAL_UART_IRQHandler+0x3fc>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d5d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	f000 81ab 	beq.w	800d938 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d5e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	f080 81a3 	bcs.w	800d938 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d5f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d602:	69db      	ldr	r3, [r3, #28]
 800d604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d608:	f000 8087 	beq.w	800d71a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d614:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d618:	e853 3f00 	ldrex	r3, [r3]
 800d61c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d620:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d628:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	461a      	mov	r2, r3
 800d632:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d636:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d63a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d63e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d642:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d646:	e841 2300 	strex	r3, r2, [r1]
 800d64a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d64e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d652:	2b00      	cmp	r3, #0
 800d654:	d1da      	bne.n	800d60c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	3308      	adds	r3, #8
 800d65c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d65e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d660:	e853 3f00 	ldrex	r3, [r3]
 800d664:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d666:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d668:	f023 0301 	bic.w	r3, r3, #1
 800d66c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	3308      	adds	r3, #8
 800d676:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d67a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d67e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d680:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d682:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d686:	e841 2300 	strex	r3, r2, [r1]
 800d68a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d68c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d1e1      	bne.n	800d656 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	3308      	adds	r3, #8
 800d698:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d69a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d69c:	e853 3f00 	ldrex	r3, [r3]
 800d6a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d6a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	3308      	adds	r3, #8
 800d6b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d6b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d6b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d6bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d6be:	e841 2300 	strex	r3, r2, [r1]
 800d6c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d6c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d1e3      	bne.n	800d692 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2220      	movs	r2, #32
 800d6ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6e0:	e853 3f00 	ldrex	r3, [r3]
 800d6e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d6e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6e8:	f023 0310 	bic.w	r3, r3, #16
 800d6ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d6fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800d6fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d702:	e841 2300 	strex	r3, r2, [r1]
 800d706:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d1e4      	bne.n	800d6d8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d714:	4618      	mov	r0, r3
 800d716:	f7f8 fef3 	bl	8006500 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2202      	movs	r2, #2
 800d71e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d72c:	b29b      	uxth	r3, r3
 800d72e:	1ad3      	subs	r3, r2, r3
 800d730:	b29b      	uxth	r3, r3
 800d732:	4619      	mov	r1, r3
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f000 f927 	bl	800d988 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d73a:	e0fd      	b.n	800d938 <HAL_UART_IRQHandler+0x760>
 800d73c:	40020010 	.word	0x40020010
 800d740:	40020028 	.word	0x40020028
 800d744:	40020040 	.word	0x40020040
 800d748:	40020058 	.word	0x40020058
 800d74c:	40020070 	.word	0x40020070
 800d750:	40020088 	.word	0x40020088
 800d754:	400200a0 	.word	0x400200a0
 800d758:	400200b8 	.word	0x400200b8
 800d75c:	40020410 	.word	0x40020410
 800d760:	40020428 	.word	0x40020428
 800d764:	40020440 	.word	0x40020440
 800d768:	40020458 	.word	0x40020458
 800d76c:	40020470 	.word	0x40020470
 800d770:	40020488 	.word	0x40020488
 800d774:	400204a0 	.word	0x400204a0
 800d778:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d788:	b29b      	uxth	r3, r3
 800d78a:	1ad3      	subs	r3, r2, r3
 800d78c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d796:	b29b      	uxth	r3, r3
 800d798:	2b00      	cmp	r3, #0
 800d79a:	f000 80cf 	beq.w	800d93c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d79e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	f000 80ca 	beq.w	800d93c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b0:	e853 3f00 	ldrex	r3, [r3]
 800d7b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d7bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d7ca:	647b      	str	r3, [r7, #68]	; 0x44
 800d7cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d7d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d7d2:	e841 2300 	strex	r3, r2, [r1]
 800d7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d1e4      	bne.n	800d7a8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	3308      	adds	r3, #8
 800d7e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e8:	e853 3f00 	ldrex	r3, [r3]
 800d7ec:	623b      	str	r3, [r7, #32]
   return(result);
 800d7ee:	6a3a      	ldr	r2, [r7, #32]
 800d7f0:	4b55      	ldr	r3, [pc, #340]	; (800d948 <HAL_UART_IRQHandler+0x770>)
 800d7f2:	4013      	ands	r3, r2
 800d7f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	3308      	adds	r3, #8
 800d7fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d802:	633a      	str	r2, [r7, #48]	; 0x30
 800d804:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d806:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d80a:	e841 2300 	strex	r3, r2, [r1]
 800d80e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d812:	2b00      	cmp	r3, #0
 800d814:	d1e3      	bne.n	800d7de <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2220      	movs	r2, #32
 800d81a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2200      	movs	r2, #0
 800d822:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2200      	movs	r2, #0
 800d828:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	e853 3f00 	ldrex	r3, [r3]
 800d836:	60fb      	str	r3, [r7, #12]
   return(result);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f023 0310 	bic.w	r3, r3, #16
 800d83e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	461a      	mov	r2, r3
 800d848:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d84c:	61fb      	str	r3, [r7, #28]
 800d84e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d850:	69b9      	ldr	r1, [r7, #24]
 800d852:	69fa      	ldr	r2, [r7, #28]
 800d854:	e841 2300 	strex	r3, r2, [r1]
 800d858:	617b      	str	r3, [r7, #20]
   return(result);
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d1e4      	bne.n	800d82a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2202      	movs	r2, #2
 800d864:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d866:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d86a:	4619      	mov	r1, r3
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f000 f88b 	bl	800d988 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d872:	e063      	b.n	800d93c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d00e      	beq.n	800d89e <HAL_UART_IRQHandler+0x6c6>
 800d880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d008      	beq.n	800d89e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d894:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f001 fb7d 	bl	800ef96 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d89c:	e051      	b.n	800d942 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d89e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d014      	beq.n	800d8d4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d8aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d105      	bne.n	800d8c2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d8b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d008      	beq.n	800d8d4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d03a      	beq.n	800d940 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	4798      	blx	r3
    }
    return;
 800d8d2:	e035      	b.n	800d940 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d8d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d009      	beq.n	800d8f4 <HAL_UART_IRQHandler+0x71c>
 800d8e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d003      	beq.n	800d8f4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f001 fb27 	bl	800ef40 <UART_EndTransmit_IT>
    return;
 800d8f2:	e026      	b.n	800d942 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d8f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d009      	beq.n	800d914 <HAL_UART_IRQHandler+0x73c>
 800d900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d904:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d003      	beq.n	800d914 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f001 fb56 	bl	800efbe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d912:	e016      	b.n	800d942 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d918:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d010      	beq.n	800d942 <HAL_UART_IRQHandler+0x76a>
 800d920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d924:	2b00      	cmp	r3, #0
 800d926:	da0c      	bge.n	800d942 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f001 fb3e 	bl	800efaa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d92e:	e008      	b.n	800d942 <HAL_UART_IRQHandler+0x76a>
      return;
 800d930:	bf00      	nop
 800d932:	e006      	b.n	800d942 <HAL_UART_IRQHandler+0x76a>
    return;
 800d934:	bf00      	nop
 800d936:	e004      	b.n	800d942 <HAL_UART_IRQHandler+0x76a>
      return;
 800d938:	bf00      	nop
 800d93a:	e002      	b.n	800d942 <HAL_UART_IRQHandler+0x76a>
      return;
 800d93c:	bf00      	nop
 800d93e:	e000      	b.n	800d942 <HAL_UART_IRQHandler+0x76a>
    return;
 800d940:	bf00      	nop
  }
}
 800d942:	37e8      	adds	r7, #232	; 0xe8
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	effffffe 	.word	0xeffffffe

0800d94c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b083      	sub	sp, #12
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d954:	bf00      	nop
 800d956:	370c      	adds	r7, #12
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr

0800d960 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d960:	b480      	push	{r7}
 800d962:	b083      	sub	sp, #12
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d968:	bf00      	nop
 800d96a:	370c      	adds	r7, #12
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr

0800d974 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d974:	b480      	push	{r7}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d97c:	bf00      	nop
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	460b      	mov	r3, r1
 800d992:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d994:	bf00      	nop
 800d996:	370c      	adds	r7, #12
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr

0800d9a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d9a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d9a4:	b092      	sub	sp, #72	; 0x48
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	689a      	ldr	r2, [r3, #8]
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	691b      	ldr	r3, [r3, #16]
 800d9b8:	431a      	orrs	r2, r3
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	695b      	ldr	r3, [r3, #20]
 800d9be:	431a      	orrs	r2, r3
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	69db      	ldr	r3, [r3, #28]
 800d9c4:	4313      	orrs	r3, r2
 800d9c6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	4bbe      	ldr	r3, [pc, #760]	; (800dcc8 <UART_SetConfig+0x328>)
 800d9d0:	4013      	ands	r3, r2
 800d9d2:	697a      	ldr	r2, [r7, #20]
 800d9d4:	6812      	ldr	r2, [r2, #0]
 800d9d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9d8:	430b      	orrs	r3, r1
 800d9da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	68da      	ldr	r2, [r3, #12]
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	430a      	orrs	r2, r1
 800d9f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	699b      	ldr	r3, [r3, #24]
 800d9f6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4ab3      	ldr	r2, [pc, #716]	; (800dccc <UART_SetConfig+0x32c>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d004      	beq.n	800da0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	6a1b      	ldr	r3, [r3, #32]
 800da06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da08:	4313      	orrs	r3, r2
 800da0a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	689a      	ldr	r2, [r3, #8]
 800da12:	4baf      	ldr	r3, [pc, #700]	; (800dcd0 <UART_SetConfig+0x330>)
 800da14:	4013      	ands	r3, r2
 800da16:	697a      	ldr	r2, [r7, #20]
 800da18:	6812      	ldr	r2, [r2, #0]
 800da1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da1c:	430b      	orrs	r3, r1
 800da1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da26:	f023 010f 	bic.w	r1, r3, #15
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	430a      	orrs	r2, r1
 800da34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4aa6      	ldr	r2, [pc, #664]	; (800dcd4 <UART_SetConfig+0x334>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d177      	bne.n	800db30 <UART_SetConfig+0x190>
 800da40:	4ba5      	ldr	r3, [pc, #660]	; (800dcd8 <UART_SetConfig+0x338>)
 800da42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da48:	2b28      	cmp	r3, #40	; 0x28
 800da4a:	d86d      	bhi.n	800db28 <UART_SetConfig+0x188>
 800da4c:	a201      	add	r2, pc, #4	; (adr r2, 800da54 <UART_SetConfig+0xb4>)
 800da4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da52:	bf00      	nop
 800da54:	0800daf9 	.word	0x0800daf9
 800da58:	0800db29 	.word	0x0800db29
 800da5c:	0800db29 	.word	0x0800db29
 800da60:	0800db29 	.word	0x0800db29
 800da64:	0800db29 	.word	0x0800db29
 800da68:	0800db29 	.word	0x0800db29
 800da6c:	0800db29 	.word	0x0800db29
 800da70:	0800db29 	.word	0x0800db29
 800da74:	0800db01 	.word	0x0800db01
 800da78:	0800db29 	.word	0x0800db29
 800da7c:	0800db29 	.word	0x0800db29
 800da80:	0800db29 	.word	0x0800db29
 800da84:	0800db29 	.word	0x0800db29
 800da88:	0800db29 	.word	0x0800db29
 800da8c:	0800db29 	.word	0x0800db29
 800da90:	0800db29 	.word	0x0800db29
 800da94:	0800db09 	.word	0x0800db09
 800da98:	0800db29 	.word	0x0800db29
 800da9c:	0800db29 	.word	0x0800db29
 800daa0:	0800db29 	.word	0x0800db29
 800daa4:	0800db29 	.word	0x0800db29
 800daa8:	0800db29 	.word	0x0800db29
 800daac:	0800db29 	.word	0x0800db29
 800dab0:	0800db29 	.word	0x0800db29
 800dab4:	0800db11 	.word	0x0800db11
 800dab8:	0800db29 	.word	0x0800db29
 800dabc:	0800db29 	.word	0x0800db29
 800dac0:	0800db29 	.word	0x0800db29
 800dac4:	0800db29 	.word	0x0800db29
 800dac8:	0800db29 	.word	0x0800db29
 800dacc:	0800db29 	.word	0x0800db29
 800dad0:	0800db29 	.word	0x0800db29
 800dad4:	0800db19 	.word	0x0800db19
 800dad8:	0800db29 	.word	0x0800db29
 800dadc:	0800db29 	.word	0x0800db29
 800dae0:	0800db29 	.word	0x0800db29
 800dae4:	0800db29 	.word	0x0800db29
 800dae8:	0800db29 	.word	0x0800db29
 800daec:	0800db29 	.word	0x0800db29
 800daf0:	0800db29 	.word	0x0800db29
 800daf4:	0800db21 	.word	0x0800db21
 800daf8:	2301      	movs	r3, #1
 800dafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dafe:	e326      	b.n	800e14e <UART_SetConfig+0x7ae>
 800db00:	2304      	movs	r3, #4
 800db02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db06:	e322      	b.n	800e14e <UART_SetConfig+0x7ae>
 800db08:	2308      	movs	r3, #8
 800db0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db0e:	e31e      	b.n	800e14e <UART_SetConfig+0x7ae>
 800db10:	2310      	movs	r3, #16
 800db12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db16:	e31a      	b.n	800e14e <UART_SetConfig+0x7ae>
 800db18:	2320      	movs	r3, #32
 800db1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db1e:	e316      	b.n	800e14e <UART_SetConfig+0x7ae>
 800db20:	2340      	movs	r3, #64	; 0x40
 800db22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db26:	e312      	b.n	800e14e <UART_SetConfig+0x7ae>
 800db28:	2380      	movs	r3, #128	; 0x80
 800db2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db2e:	e30e      	b.n	800e14e <UART_SetConfig+0x7ae>
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a69      	ldr	r2, [pc, #420]	; (800dcdc <UART_SetConfig+0x33c>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d130      	bne.n	800db9c <UART_SetConfig+0x1fc>
 800db3a:	4b67      	ldr	r3, [pc, #412]	; (800dcd8 <UART_SetConfig+0x338>)
 800db3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db3e:	f003 0307 	and.w	r3, r3, #7
 800db42:	2b05      	cmp	r3, #5
 800db44:	d826      	bhi.n	800db94 <UART_SetConfig+0x1f4>
 800db46:	a201      	add	r2, pc, #4	; (adr r2, 800db4c <UART_SetConfig+0x1ac>)
 800db48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db4c:	0800db65 	.word	0x0800db65
 800db50:	0800db6d 	.word	0x0800db6d
 800db54:	0800db75 	.word	0x0800db75
 800db58:	0800db7d 	.word	0x0800db7d
 800db5c:	0800db85 	.word	0x0800db85
 800db60:	0800db8d 	.word	0x0800db8d
 800db64:	2300      	movs	r3, #0
 800db66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db6a:	e2f0      	b.n	800e14e <UART_SetConfig+0x7ae>
 800db6c:	2304      	movs	r3, #4
 800db6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db72:	e2ec      	b.n	800e14e <UART_SetConfig+0x7ae>
 800db74:	2308      	movs	r3, #8
 800db76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db7a:	e2e8      	b.n	800e14e <UART_SetConfig+0x7ae>
 800db7c:	2310      	movs	r3, #16
 800db7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db82:	e2e4      	b.n	800e14e <UART_SetConfig+0x7ae>
 800db84:	2320      	movs	r3, #32
 800db86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db8a:	e2e0      	b.n	800e14e <UART_SetConfig+0x7ae>
 800db8c:	2340      	movs	r3, #64	; 0x40
 800db8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db92:	e2dc      	b.n	800e14e <UART_SetConfig+0x7ae>
 800db94:	2380      	movs	r3, #128	; 0x80
 800db96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db9a:	e2d8      	b.n	800e14e <UART_SetConfig+0x7ae>
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4a4f      	ldr	r2, [pc, #316]	; (800dce0 <UART_SetConfig+0x340>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d130      	bne.n	800dc08 <UART_SetConfig+0x268>
 800dba6:	4b4c      	ldr	r3, [pc, #304]	; (800dcd8 <UART_SetConfig+0x338>)
 800dba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbaa:	f003 0307 	and.w	r3, r3, #7
 800dbae:	2b05      	cmp	r3, #5
 800dbb0:	d826      	bhi.n	800dc00 <UART_SetConfig+0x260>
 800dbb2:	a201      	add	r2, pc, #4	; (adr r2, 800dbb8 <UART_SetConfig+0x218>)
 800dbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbb8:	0800dbd1 	.word	0x0800dbd1
 800dbbc:	0800dbd9 	.word	0x0800dbd9
 800dbc0:	0800dbe1 	.word	0x0800dbe1
 800dbc4:	0800dbe9 	.word	0x0800dbe9
 800dbc8:	0800dbf1 	.word	0x0800dbf1
 800dbcc:	0800dbf9 	.word	0x0800dbf9
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbd6:	e2ba      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dbd8:	2304      	movs	r3, #4
 800dbda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbde:	e2b6      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dbe0:	2308      	movs	r3, #8
 800dbe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbe6:	e2b2      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dbe8:	2310      	movs	r3, #16
 800dbea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbee:	e2ae      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dbf0:	2320      	movs	r3, #32
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf6:	e2aa      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dbf8:	2340      	movs	r3, #64	; 0x40
 800dbfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbfe:	e2a6      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dc00:	2380      	movs	r3, #128	; 0x80
 800dc02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc06:	e2a2      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	4a35      	ldr	r2, [pc, #212]	; (800dce4 <UART_SetConfig+0x344>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d130      	bne.n	800dc74 <UART_SetConfig+0x2d4>
 800dc12:	4b31      	ldr	r3, [pc, #196]	; (800dcd8 <UART_SetConfig+0x338>)
 800dc14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc16:	f003 0307 	and.w	r3, r3, #7
 800dc1a:	2b05      	cmp	r3, #5
 800dc1c:	d826      	bhi.n	800dc6c <UART_SetConfig+0x2cc>
 800dc1e:	a201      	add	r2, pc, #4	; (adr r2, 800dc24 <UART_SetConfig+0x284>)
 800dc20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc24:	0800dc3d 	.word	0x0800dc3d
 800dc28:	0800dc45 	.word	0x0800dc45
 800dc2c:	0800dc4d 	.word	0x0800dc4d
 800dc30:	0800dc55 	.word	0x0800dc55
 800dc34:	0800dc5d 	.word	0x0800dc5d
 800dc38:	0800dc65 	.word	0x0800dc65
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc42:	e284      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dc44:	2304      	movs	r3, #4
 800dc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc4a:	e280      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dc4c:	2308      	movs	r3, #8
 800dc4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc52:	e27c      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dc54:	2310      	movs	r3, #16
 800dc56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc5a:	e278      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dc5c:	2320      	movs	r3, #32
 800dc5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc62:	e274      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dc64:	2340      	movs	r3, #64	; 0x40
 800dc66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc6a:	e270      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dc6c:	2380      	movs	r3, #128	; 0x80
 800dc6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc72:	e26c      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a1b      	ldr	r2, [pc, #108]	; (800dce8 <UART_SetConfig+0x348>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d142      	bne.n	800dd04 <UART_SetConfig+0x364>
 800dc7e:	4b16      	ldr	r3, [pc, #88]	; (800dcd8 <UART_SetConfig+0x338>)
 800dc80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc82:	f003 0307 	and.w	r3, r3, #7
 800dc86:	2b05      	cmp	r3, #5
 800dc88:	d838      	bhi.n	800dcfc <UART_SetConfig+0x35c>
 800dc8a:	a201      	add	r2, pc, #4	; (adr r2, 800dc90 <UART_SetConfig+0x2f0>)
 800dc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc90:	0800dca9 	.word	0x0800dca9
 800dc94:	0800dcb1 	.word	0x0800dcb1
 800dc98:	0800dcb9 	.word	0x0800dcb9
 800dc9c:	0800dcc1 	.word	0x0800dcc1
 800dca0:	0800dced 	.word	0x0800dced
 800dca4:	0800dcf5 	.word	0x0800dcf5
 800dca8:	2300      	movs	r3, #0
 800dcaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcae:	e24e      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dcb0:	2304      	movs	r3, #4
 800dcb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcb6:	e24a      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dcb8:	2308      	movs	r3, #8
 800dcba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcbe:	e246      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dcc0:	2310      	movs	r3, #16
 800dcc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcc6:	e242      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dcc8:	cfff69f3 	.word	0xcfff69f3
 800dccc:	58000c00 	.word	0x58000c00
 800dcd0:	11fff4ff 	.word	0x11fff4ff
 800dcd4:	40011000 	.word	0x40011000
 800dcd8:	58024400 	.word	0x58024400
 800dcdc:	40004400 	.word	0x40004400
 800dce0:	40004800 	.word	0x40004800
 800dce4:	40004c00 	.word	0x40004c00
 800dce8:	40005000 	.word	0x40005000
 800dcec:	2320      	movs	r3, #32
 800dcee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcf2:	e22c      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dcf4:	2340      	movs	r3, #64	; 0x40
 800dcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcfa:	e228      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dcfc:	2380      	movs	r3, #128	; 0x80
 800dcfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd02:	e224      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4ab1      	ldr	r2, [pc, #708]	; (800dfd0 <UART_SetConfig+0x630>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d176      	bne.n	800ddfc <UART_SetConfig+0x45c>
 800dd0e:	4bb1      	ldr	r3, [pc, #708]	; (800dfd4 <UART_SetConfig+0x634>)
 800dd10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd16:	2b28      	cmp	r3, #40	; 0x28
 800dd18:	d86c      	bhi.n	800ddf4 <UART_SetConfig+0x454>
 800dd1a:	a201      	add	r2, pc, #4	; (adr r2, 800dd20 <UART_SetConfig+0x380>)
 800dd1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd20:	0800ddc5 	.word	0x0800ddc5
 800dd24:	0800ddf5 	.word	0x0800ddf5
 800dd28:	0800ddf5 	.word	0x0800ddf5
 800dd2c:	0800ddf5 	.word	0x0800ddf5
 800dd30:	0800ddf5 	.word	0x0800ddf5
 800dd34:	0800ddf5 	.word	0x0800ddf5
 800dd38:	0800ddf5 	.word	0x0800ddf5
 800dd3c:	0800ddf5 	.word	0x0800ddf5
 800dd40:	0800ddcd 	.word	0x0800ddcd
 800dd44:	0800ddf5 	.word	0x0800ddf5
 800dd48:	0800ddf5 	.word	0x0800ddf5
 800dd4c:	0800ddf5 	.word	0x0800ddf5
 800dd50:	0800ddf5 	.word	0x0800ddf5
 800dd54:	0800ddf5 	.word	0x0800ddf5
 800dd58:	0800ddf5 	.word	0x0800ddf5
 800dd5c:	0800ddf5 	.word	0x0800ddf5
 800dd60:	0800ddd5 	.word	0x0800ddd5
 800dd64:	0800ddf5 	.word	0x0800ddf5
 800dd68:	0800ddf5 	.word	0x0800ddf5
 800dd6c:	0800ddf5 	.word	0x0800ddf5
 800dd70:	0800ddf5 	.word	0x0800ddf5
 800dd74:	0800ddf5 	.word	0x0800ddf5
 800dd78:	0800ddf5 	.word	0x0800ddf5
 800dd7c:	0800ddf5 	.word	0x0800ddf5
 800dd80:	0800dddd 	.word	0x0800dddd
 800dd84:	0800ddf5 	.word	0x0800ddf5
 800dd88:	0800ddf5 	.word	0x0800ddf5
 800dd8c:	0800ddf5 	.word	0x0800ddf5
 800dd90:	0800ddf5 	.word	0x0800ddf5
 800dd94:	0800ddf5 	.word	0x0800ddf5
 800dd98:	0800ddf5 	.word	0x0800ddf5
 800dd9c:	0800ddf5 	.word	0x0800ddf5
 800dda0:	0800dde5 	.word	0x0800dde5
 800dda4:	0800ddf5 	.word	0x0800ddf5
 800dda8:	0800ddf5 	.word	0x0800ddf5
 800ddac:	0800ddf5 	.word	0x0800ddf5
 800ddb0:	0800ddf5 	.word	0x0800ddf5
 800ddb4:	0800ddf5 	.word	0x0800ddf5
 800ddb8:	0800ddf5 	.word	0x0800ddf5
 800ddbc:	0800ddf5 	.word	0x0800ddf5
 800ddc0:	0800dded 	.word	0x0800dded
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddca:	e1c0      	b.n	800e14e <UART_SetConfig+0x7ae>
 800ddcc:	2304      	movs	r3, #4
 800ddce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddd2:	e1bc      	b.n	800e14e <UART_SetConfig+0x7ae>
 800ddd4:	2308      	movs	r3, #8
 800ddd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddda:	e1b8      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dddc:	2310      	movs	r3, #16
 800ddde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dde2:	e1b4      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dde4:	2320      	movs	r3, #32
 800dde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddea:	e1b0      	b.n	800e14e <UART_SetConfig+0x7ae>
 800ddec:	2340      	movs	r3, #64	; 0x40
 800ddee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddf2:	e1ac      	b.n	800e14e <UART_SetConfig+0x7ae>
 800ddf4:	2380      	movs	r3, #128	; 0x80
 800ddf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddfa:	e1a8      	b.n	800e14e <UART_SetConfig+0x7ae>
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4a75      	ldr	r2, [pc, #468]	; (800dfd8 <UART_SetConfig+0x638>)
 800de02:	4293      	cmp	r3, r2
 800de04:	d130      	bne.n	800de68 <UART_SetConfig+0x4c8>
 800de06:	4b73      	ldr	r3, [pc, #460]	; (800dfd4 <UART_SetConfig+0x634>)
 800de08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de0a:	f003 0307 	and.w	r3, r3, #7
 800de0e:	2b05      	cmp	r3, #5
 800de10:	d826      	bhi.n	800de60 <UART_SetConfig+0x4c0>
 800de12:	a201      	add	r2, pc, #4	; (adr r2, 800de18 <UART_SetConfig+0x478>)
 800de14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de18:	0800de31 	.word	0x0800de31
 800de1c:	0800de39 	.word	0x0800de39
 800de20:	0800de41 	.word	0x0800de41
 800de24:	0800de49 	.word	0x0800de49
 800de28:	0800de51 	.word	0x0800de51
 800de2c:	0800de59 	.word	0x0800de59
 800de30:	2300      	movs	r3, #0
 800de32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de36:	e18a      	b.n	800e14e <UART_SetConfig+0x7ae>
 800de38:	2304      	movs	r3, #4
 800de3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de3e:	e186      	b.n	800e14e <UART_SetConfig+0x7ae>
 800de40:	2308      	movs	r3, #8
 800de42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de46:	e182      	b.n	800e14e <UART_SetConfig+0x7ae>
 800de48:	2310      	movs	r3, #16
 800de4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4e:	e17e      	b.n	800e14e <UART_SetConfig+0x7ae>
 800de50:	2320      	movs	r3, #32
 800de52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de56:	e17a      	b.n	800e14e <UART_SetConfig+0x7ae>
 800de58:	2340      	movs	r3, #64	; 0x40
 800de5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de5e:	e176      	b.n	800e14e <UART_SetConfig+0x7ae>
 800de60:	2380      	movs	r3, #128	; 0x80
 800de62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de66:	e172      	b.n	800e14e <UART_SetConfig+0x7ae>
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a5b      	ldr	r2, [pc, #364]	; (800dfdc <UART_SetConfig+0x63c>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d130      	bne.n	800ded4 <UART_SetConfig+0x534>
 800de72:	4b58      	ldr	r3, [pc, #352]	; (800dfd4 <UART_SetConfig+0x634>)
 800de74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de76:	f003 0307 	and.w	r3, r3, #7
 800de7a:	2b05      	cmp	r3, #5
 800de7c:	d826      	bhi.n	800decc <UART_SetConfig+0x52c>
 800de7e:	a201      	add	r2, pc, #4	; (adr r2, 800de84 <UART_SetConfig+0x4e4>)
 800de80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de84:	0800de9d 	.word	0x0800de9d
 800de88:	0800dea5 	.word	0x0800dea5
 800de8c:	0800dead 	.word	0x0800dead
 800de90:	0800deb5 	.word	0x0800deb5
 800de94:	0800debd 	.word	0x0800debd
 800de98:	0800dec5 	.word	0x0800dec5
 800de9c:	2300      	movs	r3, #0
 800de9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dea2:	e154      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dea4:	2304      	movs	r3, #4
 800dea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deaa:	e150      	b.n	800e14e <UART_SetConfig+0x7ae>
 800deac:	2308      	movs	r3, #8
 800deae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deb2:	e14c      	b.n	800e14e <UART_SetConfig+0x7ae>
 800deb4:	2310      	movs	r3, #16
 800deb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deba:	e148      	b.n	800e14e <UART_SetConfig+0x7ae>
 800debc:	2320      	movs	r3, #32
 800debe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dec2:	e144      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dec4:	2340      	movs	r3, #64	; 0x40
 800dec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deca:	e140      	b.n	800e14e <UART_SetConfig+0x7ae>
 800decc:	2380      	movs	r3, #128	; 0x80
 800dece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ded2:	e13c      	b.n	800e14e <UART_SetConfig+0x7ae>
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4a41      	ldr	r2, [pc, #260]	; (800dfe0 <UART_SetConfig+0x640>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	f040 8082 	bne.w	800dfe4 <UART_SetConfig+0x644>
 800dee0:	4b3c      	ldr	r3, [pc, #240]	; (800dfd4 <UART_SetConfig+0x634>)
 800dee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dee4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dee8:	2b28      	cmp	r3, #40	; 0x28
 800deea:	d86d      	bhi.n	800dfc8 <UART_SetConfig+0x628>
 800deec:	a201      	add	r2, pc, #4	; (adr r2, 800def4 <UART_SetConfig+0x554>)
 800deee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def2:	bf00      	nop
 800def4:	0800df99 	.word	0x0800df99
 800def8:	0800dfc9 	.word	0x0800dfc9
 800defc:	0800dfc9 	.word	0x0800dfc9
 800df00:	0800dfc9 	.word	0x0800dfc9
 800df04:	0800dfc9 	.word	0x0800dfc9
 800df08:	0800dfc9 	.word	0x0800dfc9
 800df0c:	0800dfc9 	.word	0x0800dfc9
 800df10:	0800dfc9 	.word	0x0800dfc9
 800df14:	0800dfa1 	.word	0x0800dfa1
 800df18:	0800dfc9 	.word	0x0800dfc9
 800df1c:	0800dfc9 	.word	0x0800dfc9
 800df20:	0800dfc9 	.word	0x0800dfc9
 800df24:	0800dfc9 	.word	0x0800dfc9
 800df28:	0800dfc9 	.word	0x0800dfc9
 800df2c:	0800dfc9 	.word	0x0800dfc9
 800df30:	0800dfc9 	.word	0x0800dfc9
 800df34:	0800dfa9 	.word	0x0800dfa9
 800df38:	0800dfc9 	.word	0x0800dfc9
 800df3c:	0800dfc9 	.word	0x0800dfc9
 800df40:	0800dfc9 	.word	0x0800dfc9
 800df44:	0800dfc9 	.word	0x0800dfc9
 800df48:	0800dfc9 	.word	0x0800dfc9
 800df4c:	0800dfc9 	.word	0x0800dfc9
 800df50:	0800dfc9 	.word	0x0800dfc9
 800df54:	0800dfb1 	.word	0x0800dfb1
 800df58:	0800dfc9 	.word	0x0800dfc9
 800df5c:	0800dfc9 	.word	0x0800dfc9
 800df60:	0800dfc9 	.word	0x0800dfc9
 800df64:	0800dfc9 	.word	0x0800dfc9
 800df68:	0800dfc9 	.word	0x0800dfc9
 800df6c:	0800dfc9 	.word	0x0800dfc9
 800df70:	0800dfc9 	.word	0x0800dfc9
 800df74:	0800dfb9 	.word	0x0800dfb9
 800df78:	0800dfc9 	.word	0x0800dfc9
 800df7c:	0800dfc9 	.word	0x0800dfc9
 800df80:	0800dfc9 	.word	0x0800dfc9
 800df84:	0800dfc9 	.word	0x0800dfc9
 800df88:	0800dfc9 	.word	0x0800dfc9
 800df8c:	0800dfc9 	.word	0x0800dfc9
 800df90:	0800dfc9 	.word	0x0800dfc9
 800df94:	0800dfc1 	.word	0x0800dfc1
 800df98:	2301      	movs	r3, #1
 800df9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df9e:	e0d6      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dfa0:	2304      	movs	r3, #4
 800dfa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfa6:	e0d2      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dfa8:	2308      	movs	r3, #8
 800dfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfae:	e0ce      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dfb0:	2310      	movs	r3, #16
 800dfb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfb6:	e0ca      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dfb8:	2320      	movs	r3, #32
 800dfba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfbe:	e0c6      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dfc0:	2340      	movs	r3, #64	; 0x40
 800dfc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfc6:	e0c2      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dfc8:	2380      	movs	r3, #128	; 0x80
 800dfca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfce:	e0be      	b.n	800e14e <UART_SetConfig+0x7ae>
 800dfd0:	40011400 	.word	0x40011400
 800dfd4:	58024400 	.word	0x58024400
 800dfd8:	40007800 	.word	0x40007800
 800dfdc:	40007c00 	.word	0x40007c00
 800dfe0:	40011800 	.word	0x40011800
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4aad      	ldr	r2, [pc, #692]	; (800e2a0 <UART_SetConfig+0x900>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d176      	bne.n	800e0dc <UART_SetConfig+0x73c>
 800dfee:	4bad      	ldr	r3, [pc, #692]	; (800e2a4 <UART_SetConfig+0x904>)
 800dff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dff6:	2b28      	cmp	r3, #40	; 0x28
 800dff8:	d86c      	bhi.n	800e0d4 <UART_SetConfig+0x734>
 800dffa:	a201      	add	r2, pc, #4	; (adr r2, 800e000 <UART_SetConfig+0x660>)
 800dffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e000:	0800e0a5 	.word	0x0800e0a5
 800e004:	0800e0d5 	.word	0x0800e0d5
 800e008:	0800e0d5 	.word	0x0800e0d5
 800e00c:	0800e0d5 	.word	0x0800e0d5
 800e010:	0800e0d5 	.word	0x0800e0d5
 800e014:	0800e0d5 	.word	0x0800e0d5
 800e018:	0800e0d5 	.word	0x0800e0d5
 800e01c:	0800e0d5 	.word	0x0800e0d5
 800e020:	0800e0ad 	.word	0x0800e0ad
 800e024:	0800e0d5 	.word	0x0800e0d5
 800e028:	0800e0d5 	.word	0x0800e0d5
 800e02c:	0800e0d5 	.word	0x0800e0d5
 800e030:	0800e0d5 	.word	0x0800e0d5
 800e034:	0800e0d5 	.word	0x0800e0d5
 800e038:	0800e0d5 	.word	0x0800e0d5
 800e03c:	0800e0d5 	.word	0x0800e0d5
 800e040:	0800e0b5 	.word	0x0800e0b5
 800e044:	0800e0d5 	.word	0x0800e0d5
 800e048:	0800e0d5 	.word	0x0800e0d5
 800e04c:	0800e0d5 	.word	0x0800e0d5
 800e050:	0800e0d5 	.word	0x0800e0d5
 800e054:	0800e0d5 	.word	0x0800e0d5
 800e058:	0800e0d5 	.word	0x0800e0d5
 800e05c:	0800e0d5 	.word	0x0800e0d5
 800e060:	0800e0bd 	.word	0x0800e0bd
 800e064:	0800e0d5 	.word	0x0800e0d5
 800e068:	0800e0d5 	.word	0x0800e0d5
 800e06c:	0800e0d5 	.word	0x0800e0d5
 800e070:	0800e0d5 	.word	0x0800e0d5
 800e074:	0800e0d5 	.word	0x0800e0d5
 800e078:	0800e0d5 	.word	0x0800e0d5
 800e07c:	0800e0d5 	.word	0x0800e0d5
 800e080:	0800e0c5 	.word	0x0800e0c5
 800e084:	0800e0d5 	.word	0x0800e0d5
 800e088:	0800e0d5 	.word	0x0800e0d5
 800e08c:	0800e0d5 	.word	0x0800e0d5
 800e090:	0800e0d5 	.word	0x0800e0d5
 800e094:	0800e0d5 	.word	0x0800e0d5
 800e098:	0800e0d5 	.word	0x0800e0d5
 800e09c:	0800e0d5 	.word	0x0800e0d5
 800e0a0:	0800e0cd 	.word	0x0800e0cd
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0aa:	e050      	b.n	800e14e <UART_SetConfig+0x7ae>
 800e0ac:	2304      	movs	r3, #4
 800e0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0b2:	e04c      	b.n	800e14e <UART_SetConfig+0x7ae>
 800e0b4:	2308      	movs	r3, #8
 800e0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ba:	e048      	b.n	800e14e <UART_SetConfig+0x7ae>
 800e0bc:	2310      	movs	r3, #16
 800e0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0c2:	e044      	b.n	800e14e <UART_SetConfig+0x7ae>
 800e0c4:	2320      	movs	r3, #32
 800e0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ca:	e040      	b.n	800e14e <UART_SetConfig+0x7ae>
 800e0cc:	2340      	movs	r3, #64	; 0x40
 800e0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0d2:	e03c      	b.n	800e14e <UART_SetConfig+0x7ae>
 800e0d4:	2380      	movs	r3, #128	; 0x80
 800e0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0da:	e038      	b.n	800e14e <UART_SetConfig+0x7ae>
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4a71      	ldr	r2, [pc, #452]	; (800e2a8 <UART_SetConfig+0x908>)
 800e0e2:	4293      	cmp	r3, r2
 800e0e4:	d130      	bne.n	800e148 <UART_SetConfig+0x7a8>
 800e0e6:	4b6f      	ldr	r3, [pc, #444]	; (800e2a4 <UART_SetConfig+0x904>)
 800e0e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0ea:	f003 0307 	and.w	r3, r3, #7
 800e0ee:	2b05      	cmp	r3, #5
 800e0f0:	d826      	bhi.n	800e140 <UART_SetConfig+0x7a0>
 800e0f2:	a201      	add	r2, pc, #4	; (adr r2, 800e0f8 <UART_SetConfig+0x758>)
 800e0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f8:	0800e111 	.word	0x0800e111
 800e0fc:	0800e119 	.word	0x0800e119
 800e100:	0800e121 	.word	0x0800e121
 800e104:	0800e129 	.word	0x0800e129
 800e108:	0800e131 	.word	0x0800e131
 800e10c:	0800e139 	.word	0x0800e139
 800e110:	2302      	movs	r3, #2
 800e112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e116:	e01a      	b.n	800e14e <UART_SetConfig+0x7ae>
 800e118:	2304      	movs	r3, #4
 800e11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e11e:	e016      	b.n	800e14e <UART_SetConfig+0x7ae>
 800e120:	2308      	movs	r3, #8
 800e122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e126:	e012      	b.n	800e14e <UART_SetConfig+0x7ae>
 800e128:	2310      	movs	r3, #16
 800e12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e12e:	e00e      	b.n	800e14e <UART_SetConfig+0x7ae>
 800e130:	2320      	movs	r3, #32
 800e132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e136:	e00a      	b.n	800e14e <UART_SetConfig+0x7ae>
 800e138:	2340      	movs	r3, #64	; 0x40
 800e13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e13e:	e006      	b.n	800e14e <UART_SetConfig+0x7ae>
 800e140:	2380      	movs	r3, #128	; 0x80
 800e142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e146:	e002      	b.n	800e14e <UART_SetConfig+0x7ae>
 800e148:	2380      	movs	r3, #128	; 0x80
 800e14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4a55      	ldr	r2, [pc, #340]	; (800e2a8 <UART_SetConfig+0x908>)
 800e154:	4293      	cmp	r3, r2
 800e156:	f040 80f8 	bne.w	800e34a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e15a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e15e:	2b20      	cmp	r3, #32
 800e160:	dc46      	bgt.n	800e1f0 <UART_SetConfig+0x850>
 800e162:	2b02      	cmp	r3, #2
 800e164:	db75      	blt.n	800e252 <UART_SetConfig+0x8b2>
 800e166:	3b02      	subs	r3, #2
 800e168:	2b1e      	cmp	r3, #30
 800e16a:	d872      	bhi.n	800e252 <UART_SetConfig+0x8b2>
 800e16c:	a201      	add	r2, pc, #4	; (adr r2, 800e174 <UART_SetConfig+0x7d4>)
 800e16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e172:	bf00      	nop
 800e174:	0800e1f7 	.word	0x0800e1f7
 800e178:	0800e253 	.word	0x0800e253
 800e17c:	0800e1ff 	.word	0x0800e1ff
 800e180:	0800e253 	.word	0x0800e253
 800e184:	0800e253 	.word	0x0800e253
 800e188:	0800e253 	.word	0x0800e253
 800e18c:	0800e20f 	.word	0x0800e20f
 800e190:	0800e253 	.word	0x0800e253
 800e194:	0800e253 	.word	0x0800e253
 800e198:	0800e253 	.word	0x0800e253
 800e19c:	0800e253 	.word	0x0800e253
 800e1a0:	0800e253 	.word	0x0800e253
 800e1a4:	0800e253 	.word	0x0800e253
 800e1a8:	0800e253 	.word	0x0800e253
 800e1ac:	0800e21f 	.word	0x0800e21f
 800e1b0:	0800e253 	.word	0x0800e253
 800e1b4:	0800e253 	.word	0x0800e253
 800e1b8:	0800e253 	.word	0x0800e253
 800e1bc:	0800e253 	.word	0x0800e253
 800e1c0:	0800e253 	.word	0x0800e253
 800e1c4:	0800e253 	.word	0x0800e253
 800e1c8:	0800e253 	.word	0x0800e253
 800e1cc:	0800e253 	.word	0x0800e253
 800e1d0:	0800e253 	.word	0x0800e253
 800e1d4:	0800e253 	.word	0x0800e253
 800e1d8:	0800e253 	.word	0x0800e253
 800e1dc:	0800e253 	.word	0x0800e253
 800e1e0:	0800e253 	.word	0x0800e253
 800e1e4:	0800e253 	.word	0x0800e253
 800e1e8:	0800e253 	.word	0x0800e253
 800e1ec:	0800e245 	.word	0x0800e245
 800e1f0:	2b40      	cmp	r3, #64	; 0x40
 800e1f2:	d02a      	beq.n	800e24a <UART_SetConfig+0x8aa>
 800e1f4:	e02d      	b.n	800e252 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e1f6:	f7fc fdfd 	bl	800adf4 <HAL_RCCEx_GetD3PCLK1Freq>
 800e1fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1fc:	e02f      	b.n	800e25e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e202:	4618      	mov	r0, r3
 800e204:	f7fc fe0c 	bl	800ae20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e20c:	e027      	b.n	800e25e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e20e:	f107 0318 	add.w	r3, r7, #24
 800e212:	4618      	mov	r0, r3
 800e214:	f7fc ff58 	bl	800b0c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e21c:	e01f      	b.n	800e25e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e21e:	4b21      	ldr	r3, [pc, #132]	; (800e2a4 <UART_SetConfig+0x904>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f003 0320 	and.w	r3, r3, #32
 800e226:	2b00      	cmp	r3, #0
 800e228:	d009      	beq.n	800e23e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e22a:	4b1e      	ldr	r3, [pc, #120]	; (800e2a4 <UART_SetConfig+0x904>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	08db      	lsrs	r3, r3, #3
 800e230:	f003 0303 	and.w	r3, r3, #3
 800e234:	4a1d      	ldr	r2, [pc, #116]	; (800e2ac <UART_SetConfig+0x90c>)
 800e236:	fa22 f303 	lsr.w	r3, r2, r3
 800e23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e23c:	e00f      	b.n	800e25e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e23e:	4b1b      	ldr	r3, [pc, #108]	; (800e2ac <UART_SetConfig+0x90c>)
 800e240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e242:	e00c      	b.n	800e25e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e244:	4b1a      	ldr	r3, [pc, #104]	; (800e2b0 <UART_SetConfig+0x910>)
 800e246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e248:	e009      	b.n	800e25e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e24a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e250:	e005      	b.n	800e25e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e252:	2300      	movs	r3, #0
 800e254:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e256:	2301      	movs	r3, #1
 800e258:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e25c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e25e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e260:	2b00      	cmp	r3, #0
 800e262:	f000 81ee 	beq.w	800e642 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e26a:	4a12      	ldr	r2, [pc, #72]	; (800e2b4 <UART_SetConfig+0x914>)
 800e26c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e270:	461a      	mov	r2, r3
 800e272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e274:	fbb3 f3f2 	udiv	r3, r3, r2
 800e278:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	685a      	ldr	r2, [r3, #4]
 800e27e:	4613      	mov	r3, r2
 800e280:	005b      	lsls	r3, r3, #1
 800e282:	4413      	add	r3, r2
 800e284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e286:	429a      	cmp	r2, r3
 800e288:	d305      	bcc.n	800e296 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e292:	429a      	cmp	r2, r3
 800e294:	d910      	bls.n	800e2b8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e296:	2301      	movs	r3, #1
 800e298:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e29c:	e1d1      	b.n	800e642 <UART_SetConfig+0xca2>
 800e29e:	bf00      	nop
 800e2a0:	40011c00 	.word	0x40011c00
 800e2a4:	58024400 	.word	0x58024400
 800e2a8:	58000c00 	.word	0x58000c00
 800e2ac:	03d09000 	.word	0x03d09000
 800e2b0:	003d0900 	.word	0x003d0900
 800e2b4:	0800f87c 	.word	0x0800f87c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	60bb      	str	r3, [r7, #8]
 800e2be:	60fa      	str	r2, [r7, #12]
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c4:	4ac0      	ldr	r2, [pc, #768]	; (800e5c8 <UART_SetConfig+0xc28>)
 800e2c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	603b      	str	r3, [r7, #0]
 800e2d0:	607a      	str	r2, [r7, #4]
 800e2d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e2da:	f7f2 f821 	bl	8000320 <__aeabi_uldivmod>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	460b      	mov	r3, r1
 800e2e2:	4610      	mov	r0, r2
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	f04f 0200 	mov.w	r2, #0
 800e2ea:	f04f 0300 	mov.w	r3, #0
 800e2ee:	020b      	lsls	r3, r1, #8
 800e2f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e2f4:	0202      	lsls	r2, r0, #8
 800e2f6:	6979      	ldr	r1, [r7, #20]
 800e2f8:	6849      	ldr	r1, [r1, #4]
 800e2fa:	0849      	lsrs	r1, r1, #1
 800e2fc:	2000      	movs	r0, #0
 800e2fe:	460c      	mov	r4, r1
 800e300:	4605      	mov	r5, r0
 800e302:	eb12 0804 	adds.w	r8, r2, r4
 800e306:	eb43 0905 	adc.w	r9, r3, r5
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	685b      	ldr	r3, [r3, #4]
 800e30e:	2200      	movs	r2, #0
 800e310:	469a      	mov	sl, r3
 800e312:	4693      	mov	fp, r2
 800e314:	4652      	mov	r2, sl
 800e316:	465b      	mov	r3, fp
 800e318:	4640      	mov	r0, r8
 800e31a:	4649      	mov	r1, r9
 800e31c:	f7f2 f800 	bl	8000320 <__aeabi_uldivmod>
 800e320:	4602      	mov	r2, r0
 800e322:	460b      	mov	r3, r1
 800e324:	4613      	mov	r3, r2
 800e326:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e32e:	d308      	bcc.n	800e342 <UART_SetConfig+0x9a2>
 800e330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e336:	d204      	bcs.n	800e342 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e33e:	60da      	str	r2, [r3, #12]
 800e340:	e17f      	b.n	800e642 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e342:	2301      	movs	r3, #1
 800e344:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e348:	e17b      	b.n	800e642 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	69db      	ldr	r3, [r3, #28]
 800e34e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e352:	f040 80bd 	bne.w	800e4d0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e356:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e35a:	2b20      	cmp	r3, #32
 800e35c:	dc48      	bgt.n	800e3f0 <UART_SetConfig+0xa50>
 800e35e:	2b00      	cmp	r3, #0
 800e360:	db7b      	blt.n	800e45a <UART_SetConfig+0xaba>
 800e362:	2b20      	cmp	r3, #32
 800e364:	d879      	bhi.n	800e45a <UART_SetConfig+0xaba>
 800e366:	a201      	add	r2, pc, #4	; (adr r2, 800e36c <UART_SetConfig+0x9cc>)
 800e368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e36c:	0800e3f7 	.word	0x0800e3f7
 800e370:	0800e3ff 	.word	0x0800e3ff
 800e374:	0800e45b 	.word	0x0800e45b
 800e378:	0800e45b 	.word	0x0800e45b
 800e37c:	0800e407 	.word	0x0800e407
 800e380:	0800e45b 	.word	0x0800e45b
 800e384:	0800e45b 	.word	0x0800e45b
 800e388:	0800e45b 	.word	0x0800e45b
 800e38c:	0800e417 	.word	0x0800e417
 800e390:	0800e45b 	.word	0x0800e45b
 800e394:	0800e45b 	.word	0x0800e45b
 800e398:	0800e45b 	.word	0x0800e45b
 800e39c:	0800e45b 	.word	0x0800e45b
 800e3a0:	0800e45b 	.word	0x0800e45b
 800e3a4:	0800e45b 	.word	0x0800e45b
 800e3a8:	0800e45b 	.word	0x0800e45b
 800e3ac:	0800e427 	.word	0x0800e427
 800e3b0:	0800e45b 	.word	0x0800e45b
 800e3b4:	0800e45b 	.word	0x0800e45b
 800e3b8:	0800e45b 	.word	0x0800e45b
 800e3bc:	0800e45b 	.word	0x0800e45b
 800e3c0:	0800e45b 	.word	0x0800e45b
 800e3c4:	0800e45b 	.word	0x0800e45b
 800e3c8:	0800e45b 	.word	0x0800e45b
 800e3cc:	0800e45b 	.word	0x0800e45b
 800e3d0:	0800e45b 	.word	0x0800e45b
 800e3d4:	0800e45b 	.word	0x0800e45b
 800e3d8:	0800e45b 	.word	0x0800e45b
 800e3dc:	0800e45b 	.word	0x0800e45b
 800e3e0:	0800e45b 	.word	0x0800e45b
 800e3e4:	0800e45b 	.word	0x0800e45b
 800e3e8:	0800e45b 	.word	0x0800e45b
 800e3ec:	0800e44d 	.word	0x0800e44d
 800e3f0:	2b40      	cmp	r3, #64	; 0x40
 800e3f2:	d02e      	beq.n	800e452 <UART_SetConfig+0xab2>
 800e3f4:	e031      	b.n	800e45a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3f6:	f7fb fb31 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 800e3fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3fc:	e033      	b.n	800e466 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e3fe:	f7fb fb43 	bl	8009a88 <HAL_RCC_GetPCLK2Freq>
 800e402:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e404:	e02f      	b.n	800e466 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7fc fd08 	bl	800ae20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e414:	e027      	b.n	800e466 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e416:	f107 0318 	add.w	r3, r7, #24
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7fc fe54 	bl	800b0c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e420:	69fb      	ldr	r3, [r7, #28]
 800e422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e424:	e01f      	b.n	800e466 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e426:	4b69      	ldr	r3, [pc, #420]	; (800e5cc <UART_SetConfig+0xc2c>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f003 0320 	and.w	r3, r3, #32
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d009      	beq.n	800e446 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e432:	4b66      	ldr	r3, [pc, #408]	; (800e5cc <UART_SetConfig+0xc2c>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	08db      	lsrs	r3, r3, #3
 800e438:	f003 0303 	and.w	r3, r3, #3
 800e43c:	4a64      	ldr	r2, [pc, #400]	; (800e5d0 <UART_SetConfig+0xc30>)
 800e43e:	fa22 f303 	lsr.w	r3, r2, r3
 800e442:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e444:	e00f      	b.n	800e466 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e446:	4b62      	ldr	r3, [pc, #392]	; (800e5d0 <UART_SetConfig+0xc30>)
 800e448:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e44a:	e00c      	b.n	800e466 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e44c:	4b61      	ldr	r3, [pc, #388]	; (800e5d4 <UART_SetConfig+0xc34>)
 800e44e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e450:	e009      	b.n	800e466 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e458:	e005      	b.n	800e466 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e45a:	2300      	movs	r3, #0
 800e45c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e45e:	2301      	movs	r3, #1
 800e460:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e464:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e468:	2b00      	cmp	r3, #0
 800e46a:	f000 80ea 	beq.w	800e642 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e472:	4a55      	ldr	r2, [pc, #340]	; (800e5c8 <UART_SetConfig+0xc28>)
 800e474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e478:	461a      	mov	r2, r3
 800e47a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e47c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e480:	005a      	lsls	r2, r3, #1
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	085b      	lsrs	r3, r3, #1
 800e488:	441a      	add	r2, r3
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e492:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e496:	2b0f      	cmp	r3, #15
 800e498:	d916      	bls.n	800e4c8 <UART_SetConfig+0xb28>
 800e49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4a0:	d212      	bcs.n	800e4c8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	f023 030f 	bic.w	r3, r3, #15
 800e4aa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ae:	085b      	lsrs	r3, r3, #1
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	f003 0307 	and.w	r3, r3, #7
 800e4b6:	b29a      	uxth	r2, r3
 800e4b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e4c4:	60da      	str	r2, [r3, #12]
 800e4c6:	e0bc      	b.n	800e642 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e4ce:	e0b8      	b.n	800e642 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e4d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e4d4:	2b20      	cmp	r3, #32
 800e4d6:	dc4b      	bgt.n	800e570 <UART_SetConfig+0xbd0>
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f2c0 8087 	blt.w	800e5ec <UART_SetConfig+0xc4c>
 800e4de:	2b20      	cmp	r3, #32
 800e4e0:	f200 8084 	bhi.w	800e5ec <UART_SetConfig+0xc4c>
 800e4e4:	a201      	add	r2, pc, #4	; (adr r2, 800e4ec <UART_SetConfig+0xb4c>)
 800e4e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4ea:	bf00      	nop
 800e4ec:	0800e577 	.word	0x0800e577
 800e4f0:	0800e57f 	.word	0x0800e57f
 800e4f4:	0800e5ed 	.word	0x0800e5ed
 800e4f8:	0800e5ed 	.word	0x0800e5ed
 800e4fc:	0800e587 	.word	0x0800e587
 800e500:	0800e5ed 	.word	0x0800e5ed
 800e504:	0800e5ed 	.word	0x0800e5ed
 800e508:	0800e5ed 	.word	0x0800e5ed
 800e50c:	0800e597 	.word	0x0800e597
 800e510:	0800e5ed 	.word	0x0800e5ed
 800e514:	0800e5ed 	.word	0x0800e5ed
 800e518:	0800e5ed 	.word	0x0800e5ed
 800e51c:	0800e5ed 	.word	0x0800e5ed
 800e520:	0800e5ed 	.word	0x0800e5ed
 800e524:	0800e5ed 	.word	0x0800e5ed
 800e528:	0800e5ed 	.word	0x0800e5ed
 800e52c:	0800e5a7 	.word	0x0800e5a7
 800e530:	0800e5ed 	.word	0x0800e5ed
 800e534:	0800e5ed 	.word	0x0800e5ed
 800e538:	0800e5ed 	.word	0x0800e5ed
 800e53c:	0800e5ed 	.word	0x0800e5ed
 800e540:	0800e5ed 	.word	0x0800e5ed
 800e544:	0800e5ed 	.word	0x0800e5ed
 800e548:	0800e5ed 	.word	0x0800e5ed
 800e54c:	0800e5ed 	.word	0x0800e5ed
 800e550:	0800e5ed 	.word	0x0800e5ed
 800e554:	0800e5ed 	.word	0x0800e5ed
 800e558:	0800e5ed 	.word	0x0800e5ed
 800e55c:	0800e5ed 	.word	0x0800e5ed
 800e560:	0800e5ed 	.word	0x0800e5ed
 800e564:	0800e5ed 	.word	0x0800e5ed
 800e568:	0800e5ed 	.word	0x0800e5ed
 800e56c:	0800e5df 	.word	0x0800e5df
 800e570:	2b40      	cmp	r3, #64	; 0x40
 800e572:	d037      	beq.n	800e5e4 <UART_SetConfig+0xc44>
 800e574:	e03a      	b.n	800e5ec <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e576:	f7fb fa71 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 800e57a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e57c:	e03c      	b.n	800e5f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e57e:	f7fb fa83 	bl	8009a88 <HAL_RCC_GetPCLK2Freq>
 800e582:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e584:	e038      	b.n	800e5f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7fc fc48 	bl	800ae20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e594:	e030      	b.n	800e5f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e596:	f107 0318 	add.w	r3, r7, #24
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7fc fd94 	bl	800b0c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5a4:	e028      	b.n	800e5f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e5a6:	4b09      	ldr	r3, [pc, #36]	; (800e5cc <UART_SetConfig+0xc2c>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	f003 0320 	and.w	r3, r3, #32
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d012      	beq.n	800e5d8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e5b2:	4b06      	ldr	r3, [pc, #24]	; (800e5cc <UART_SetConfig+0xc2c>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	08db      	lsrs	r3, r3, #3
 800e5b8:	f003 0303 	and.w	r3, r3, #3
 800e5bc:	4a04      	ldr	r2, [pc, #16]	; (800e5d0 <UART_SetConfig+0xc30>)
 800e5be:	fa22 f303 	lsr.w	r3, r2, r3
 800e5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e5c4:	e018      	b.n	800e5f8 <UART_SetConfig+0xc58>
 800e5c6:	bf00      	nop
 800e5c8:	0800f87c 	.word	0x0800f87c
 800e5cc:	58024400 	.word	0x58024400
 800e5d0:	03d09000 	.word	0x03d09000
 800e5d4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e5d8:	4b24      	ldr	r3, [pc, #144]	; (800e66c <UART_SetConfig+0xccc>)
 800e5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5dc:	e00c      	b.n	800e5f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e5de:	4b24      	ldr	r3, [pc, #144]	; (800e670 <UART_SetConfig+0xcd0>)
 800e5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5e2:	e009      	b.n	800e5f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5ea:	e005      	b.n	800e5f8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e5f6:	bf00      	nop
    }

    if (pclk != 0U)
 800e5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d021      	beq.n	800e642 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e602:	4a1c      	ldr	r2, [pc, #112]	; (800e674 <UART_SetConfig+0xcd4>)
 800e604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e608:	461a      	mov	r2, r3
 800e60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e60c:	fbb3 f2f2 	udiv	r2, r3, r2
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	085b      	lsrs	r3, r3, #1
 800e616:	441a      	add	r2, r3
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	685b      	ldr	r3, [r3, #4]
 800e61c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e620:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e624:	2b0f      	cmp	r3, #15
 800e626:	d909      	bls.n	800e63c <UART_SetConfig+0xc9c>
 800e628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e62a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e62e:	d205      	bcs.n	800e63c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e632:	b29a      	uxth	r2, r3
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	60da      	str	r2, [r3, #12]
 800e63a:	e002      	b.n	800e642 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e63c:	2301      	movs	r3, #1
 800e63e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	2201      	movs	r2, #1
 800e646:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	2201      	movs	r2, #1
 800e64e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	2200      	movs	r2, #0
 800e656:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	2200      	movs	r2, #0
 800e65c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e65e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e662:	4618      	mov	r0, r3
 800e664:	3748      	adds	r7, #72	; 0x48
 800e666:	46bd      	mov	sp, r7
 800e668:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e66c:	03d09000 	.word	0x03d09000
 800e670:	003d0900 	.word	0x003d0900
 800e674:	0800f87c 	.word	0x0800f87c

0800e678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e678:	b480      	push	{r7}
 800e67a:	b083      	sub	sp, #12
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e684:	f003 0301 	and.w	r3, r3, #1
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d00a      	beq.n	800e6a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	430a      	orrs	r2, r1
 800e6a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6a6:	f003 0302 	and.w	r3, r3, #2
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d00a      	beq.n	800e6c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	685b      	ldr	r3, [r3, #4]
 800e6b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	430a      	orrs	r2, r1
 800e6c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6c8:	f003 0304 	and.w	r3, r3, #4
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d00a      	beq.n	800e6e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	430a      	orrs	r2, r1
 800e6e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ea:	f003 0308 	and.w	r3, r3, #8
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d00a      	beq.n	800e708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	430a      	orrs	r2, r1
 800e706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e70c:	f003 0310 	and.w	r3, r3, #16
 800e710:	2b00      	cmp	r3, #0
 800e712:	d00a      	beq.n	800e72a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	689b      	ldr	r3, [r3, #8]
 800e71a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	430a      	orrs	r2, r1
 800e728:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e72e:	f003 0320 	and.w	r3, r3, #32
 800e732:	2b00      	cmp	r3, #0
 800e734:	d00a      	beq.n	800e74c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	689b      	ldr	r3, [r3, #8]
 800e73c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	430a      	orrs	r2, r1
 800e74a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e754:	2b00      	cmp	r3, #0
 800e756:	d01a      	beq.n	800e78e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	430a      	orrs	r2, r1
 800e76c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e776:	d10a      	bne.n	800e78e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	430a      	orrs	r2, r1
 800e78c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e796:	2b00      	cmp	r3, #0
 800e798:	d00a      	beq.n	800e7b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	430a      	orrs	r2, r1
 800e7ae:	605a      	str	r2, [r3, #4]
  }
}
 800e7b0:	bf00      	nop
 800e7b2:	370c      	adds	r7, #12
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr

0800e7bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b098      	sub	sp, #96	; 0x60
 800e7c0:	af02      	add	r7, sp, #8
 800e7c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e7cc:	f7f6 fdd0 	bl	8005370 <HAL_GetTick>
 800e7d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f003 0308 	and.w	r3, r3, #8
 800e7dc:	2b08      	cmp	r3, #8
 800e7de:	d12f      	bne.n	800e840 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e7e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f000 f88e 	bl	800e910 <UART_WaitOnFlagUntilTimeout>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d022      	beq.n	800e840 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e802:	e853 3f00 	ldrex	r3, [r3]
 800e806:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e80a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e80e:	653b      	str	r3, [r7, #80]	; 0x50
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	461a      	mov	r2, r3
 800e816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e818:	647b      	str	r3, [r7, #68]	; 0x44
 800e81a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e81c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e81e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e820:	e841 2300 	strex	r3, r2, [r1]
 800e824:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d1e6      	bne.n	800e7fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2220      	movs	r2, #32
 800e830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2200      	movs	r2, #0
 800e838:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e83c:	2303      	movs	r3, #3
 800e83e:	e063      	b.n	800e908 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f003 0304 	and.w	r3, r3, #4
 800e84a:	2b04      	cmp	r3, #4
 800e84c:	d149      	bne.n	800e8e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e84e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e852:	9300      	str	r3, [sp, #0]
 800e854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e856:	2200      	movs	r2, #0
 800e858:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f000 f857 	bl	800e910 <UART_WaitOnFlagUntilTimeout>
 800e862:	4603      	mov	r3, r0
 800e864:	2b00      	cmp	r3, #0
 800e866:	d03c      	beq.n	800e8e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e870:	e853 3f00 	ldrex	r3, [r3]
 800e874:	623b      	str	r3, [r7, #32]
   return(result);
 800e876:	6a3b      	ldr	r3, [r7, #32]
 800e878:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e87c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	461a      	mov	r2, r3
 800e884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e886:	633b      	str	r3, [r7, #48]	; 0x30
 800e888:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e88a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e88c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e88e:	e841 2300 	strex	r3, r2, [r1]
 800e892:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e896:	2b00      	cmp	r3, #0
 800e898:	d1e6      	bne.n	800e868 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	3308      	adds	r3, #8
 800e8a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	e853 3f00 	ldrex	r3, [r3]
 800e8a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	f023 0301 	bic.w	r3, r3, #1
 800e8b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	3308      	adds	r3, #8
 800e8b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8ba:	61fa      	str	r2, [r7, #28]
 800e8bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8be:	69b9      	ldr	r1, [r7, #24]
 800e8c0:	69fa      	ldr	r2, [r7, #28]
 800e8c2:	e841 2300 	strex	r3, r2, [r1]
 800e8c6:	617b      	str	r3, [r7, #20]
   return(result);
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d1e5      	bne.n	800e89a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2220      	movs	r2, #32
 800e8d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e8de:	2303      	movs	r3, #3
 800e8e0:	e012      	b.n	800e908 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2220      	movs	r2, #32
 800e8e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2220      	movs	r2, #32
 800e8ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2200      	movs	r2, #0
 800e902:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e906:	2300      	movs	r3, #0
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3758      	adds	r7, #88	; 0x58
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}

0800e910 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
 800e916:	60f8      	str	r0, [r7, #12]
 800e918:	60b9      	str	r1, [r7, #8]
 800e91a:	603b      	str	r3, [r7, #0]
 800e91c:	4613      	mov	r3, r2
 800e91e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e920:	e049      	b.n	800e9b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e922:	69bb      	ldr	r3, [r7, #24]
 800e924:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e928:	d045      	beq.n	800e9b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e92a:	f7f6 fd21 	bl	8005370 <HAL_GetTick>
 800e92e:	4602      	mov	r2, r0
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	1ad3      	subs	r3, r2, r3
 800e934:	69ba      	ldr	r2, [r7, #24]
 800e936:	429a      	cmp	r2, r3
 800e938:	d302      	bcc.n	800e940 <UART_WaitOnFlagUntilTimeout+0x30>
 800e93a:	69bb      	ldr	r3, [r7, #24]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d101      	bne.n	800e944 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e940:	2303      	movs	r3, #3
 800e942:	e048      	b.n	800e9d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f003 0304 	and.w	r3, r3, #4
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d031      	beq.n	800e9b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	69db      	ldr	r3, [r3, #28]
 800e958:	f003 0308 	and.w	r3, r3, #8
 800e95c:	2b08      	cmp	r3, #8
 800e95e:	d110      	bne.n	800e982 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	2208      	movs	r2, #8
 800e966:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e968:	68f8      	ldr	r0, [r7, #12]
 800e96a:	f000 f921 	bl	800ebb0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2208      	movs	r2, #8
 800e972:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	2200      	movs	r2, #0
 800e97a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800e97e:	2301      	movs	r3, #1
 800e980:	e029      	b.n	800e9d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	69db      	ldr	r3, [r3, #28]
 800e988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e98c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e990:	d111      	bne.n	800e9b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e99a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e99c:	68f8      	ldr	r0, [r7, #12]
 800e99e:	f000 f907 	bl	800ebb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	2220      	movs	r2, #32
 800e9a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e9b2:	2303      	movs	r3, #3
 800e9b4:	e00f      	b.n	800e9d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	69da      	ldr	r2, [r3, #28]
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	4013      	ands	r3, r2
 800e9c0:	68ba      	ldr	r2, [r7, #8]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	bf0c      	ite	eq
 800e9c6:	2301      	moveq	r3, #1
 800e9c8:	2300      	movne	r3, #0
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	79fb      	ldrb	r3, [r7, #7]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d0a6      	beq.n	800e922 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e9d4:	2300      	movs	r3, #0
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3710      	adds	r7, #16
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}
	...

0800e9e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b096      	sub	sp, #88	; 0x58
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	60f8      	str	r0, [r7, #12]
 800e9e8:	60b9      	str	r1, [r7, #8]
 800e9ea:	4613      	mov	r3, r2
 800e9ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	68ba      	ldr	r2, [r7, #8]
 800e9f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	88fa      	ldrh	r2, [r7, #6]
 800e9f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2222      	movs	r2, #34	; 0x22
 800ea08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d02d      	beq.n	800ea72 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea1c:	4a40      	ldr	r2, [pc, #256]	; (800eb20 <UART_Start_Receive_DMA+0x140>)
 800ea1e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea26:	4a3f      	ldr	r2, [pc, #252]	; (800eb24 <UART_Start_Receive_DMA+0x144>)
 800ea28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea30:	4a3d      	ldr	r2, [pc, #244]	; (800eb28 <UART_Start_Receive_DMA+0x148>)
 800ea32:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	3324      	adds	r3, #36	; 0x24
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea50:	461a      	mov	r2, r3
 800ea52:	88fb      	ldrh	r3, [r7, #6]
 800ea54:	f7f7 faea 	bl	800602c <HAL_DMA_Start_IT>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d009      	beq.n	800ea72 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	2210      	movs	r2, #16
 800ea62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2220      	movs	r2, #32
 800ea6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800ea6e:	2301      	movs	r3, #1
 800ea70:	e051      	b.n	800eb16 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	691b      	ldr	r3, [r3, #16]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d018      	beq.n	800eaac <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea82:	e853 3f00 	ldrex	r3, [r3]
 800ea86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea8e:	657b      	str	r3, [r7, #84]	; 0x54
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	461a      	mov	r2, r3
 800ea96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea98:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea9a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eaa0:	e841 2300 	strex	r3, r2, [r1]
 800eaa4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800eaa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d1e6      	bne.n	800ea7a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	3308      	adds	r3, #8
 800eab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab6:	e853 3f00 	ldrex	r3, [r3]
 800eaba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eabe:	f043 0301 	orr.w	r3, r3, #1
 800eac2:	653b      	str	r3, [r7, #80]	; 0x50
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	3308      	adds	r3, #8
 800eaca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eacc:	637a      	str	r2, [r7, #52]	; 0x34
 800eace:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ead0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ead2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ead4:	e841 2300 	strex	r3, r2, [r1]
 800ead8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d1e5      	bne.n	800eaac <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	3308      	adds	r3, #8
 800eae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	e853 3f00 	ldrex	r3, [r3]
 800eaee:	613b      	str	r3, [r7, #16]
   return(result);
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	3308      	adds	r3, #8
 800eafe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eb00:	623a      	str	r2, [r7, #32]
 800eb02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb04:	69f9      	ldr	r1, [r7, #28]
 800eb06:	6a3a      	ldr	r2, [r7, #32]
 800eb08:	e841 2300 	strex	r3, r2, [r1]
 800eb0c:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb0e:	69bb      	ldr	r3, [r7, #24]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d1e5      	bne.n	800eae0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800eb14:	2300      	movs	r3, #0
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3758      	adds	r7, #88	; 0x58
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	0800ed2f 	.word	0x0800ed2f
 800eb24:	0800ee57 	.word	0x0800ee57
 800eb28:	0800ee95 	.word	0x0800ee95

0800eb2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b08f      	sub	sp, #60	; 0x3c
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb3a:	6a3b      	ldr	r3, [r7, #32]
 800eb3c:	e853 3f00 	ldrex	r3, [r3]
 800eb40:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb42:	69fb      	ldr	r3, [r7, #28]
 800eb44:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800eb48:	637b      	str	r3, [r7, #52]	; 0x34
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	461a      	mov	r2, r3
 800eb50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb54:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb5a:	e841 2300 	strex	r3, r2, [r1]
 800eb5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d1e6      	bne.n	800eb34 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	3308      	adds	r3, #8
 800eb6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	e853 3f00 	ldrex	r3, [r3]
 800eb74:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800eb7c:	633b      	str	r3, [r7, #48]	; 0x30
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	3308      	adds	r3, #8
 800eb84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb86:	61ba      	str	r2, [r7, #24]
 800eb88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb8a:	6979      	ldr	r1, [r7, #20]
 800eb8c:	69ba      	ldr	r2, [r7, #24]
 800eb8e:	e841 2300 	strex	r3, r2, [r1]
 800eb92:	613b      	str	r3, [r7, #16]
   return(result);
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d1e5      	bne.n	800eb66 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2220      	movs	r2, #32
 800eb9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800eba2:	bf00      	nop
 800eba4:	373c      	adds	r7, #60	; 0x3c
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr
	...

0800ebb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b095      	sub	sp, #84	; 0x54
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebc0:	e853 3f00 	ldrex	r3, [r3]
 800ebc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ebc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ebcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebd6:	643b      	str	r3, [r7, #64]	; 0x40
 800ebd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ebdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ebde:	e841 2300 	strex	r3, r2, [r1]
 800ebe2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ebe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d1e6      	bne.n	800ebb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	3308      	adds	r3, #8
 800ebf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf2:	6a3b      	ldr	r3, [r7, #32]
 800ebf4:	e853 3f00 	ldrex	r3, [r3]
 800ebf8:	61fb      	str	r3, [r7, #28]
   return(result);
 800ebfa:	69fa      	ldr	r2, [r7, #28]
 800ebfc:	4b1e      	ldr	r3, [pc, #120]	; (800ec78 <UART_EndRxTransfer+0xc8>)
 800ebfe:	4013      	ands	r3, r2
 800ec00:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	3308      	adds	r3, #8
 800ec08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ec0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec12:	e841 2300 	strex	r3, r2, [r1]
 800ec16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d1e5      	bne.n	800ebea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec22:	2b01      	cmp	r3, #1
 800ec24:	d118      	bne.n	800ec58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	e853 3f00 	ldrex	r3, [r3]
 800ec32:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	f023 0310 	bic.w	r3, r3, #16
 800ec3a:	647b      	str	r3, [r7, #68]	; 0x44
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	461a      	mov	r2, r3
 800ec42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec44:	61bb      	str	r3, [r7, #24]
 800ec46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec48:	6979      	ldr	r1, [r7, #20]
 800ec4a:	69ba      	ldr	r2, [r7, #24]
 800ec4c:	e841 2300 	strex	r3, r2, [r1]
 800ec50:	613b      	str	r3, [r7, #16]
   return(result);
 800ec52:	693b      	ldr	r3, [r7, #16]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d1e6      	bne.n	800ec26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2220      	movs	r2, #32
 800ec5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2200      	movs	r2, #0
 800ec64:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ec6c:	bf00      	nop
 800ec6e:	3754      	adds	r7, #84	; 0x54
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr
 800ec78:	effffffe 	.word	0xeffffffe

0800ec7c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b090      	sub	sp, #64	; 0x40
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec88:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	69db      	ldr	r3, [r3, #28]
 800ec8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec92:	d037      	beq.n	800ed04 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800ec94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec96:	2200      	movs	r2, #0
 800ec98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ec9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	3308      	adds	r3, #8
 800eca2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca6:	e853 3f00 	ldrex	r3, [r3]
 800ecaa:	623b      	str	r3, [r7, #32]
   return(result);
 800ecac:	6a3b      	ldr	r3, [r7, #32]
 800ecae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ecb2:	63bb      	str	r3, [r7, #56]	; 0x38
 800ecb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	3308      	adds	r3, #8
 800ecba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecbc:	633a      	str	r2, [r7, #48]	; 0x30
 800ecbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ecc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecc4:	e841 2300 	strex	r3, r2, [r1]
 800ecc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ecca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d1e5      	bne.n	800ec9c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ecd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	e853 3f00 	ldrex	r3, [r3]
 800ecdc:	60fb      	str	r3, [r7, #12]
   return(result);
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ece4:	637b      	str	r3, [r7, #52]	; 0x34
 800ece6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	461a      	mov	r2, r3
 800ecec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecee:	61fb      	str	r3, [r7, #28]
 800ecf0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecf2:	69b9      	ldr	r1, [r7, #24]
 800ecf4:	69fa      	ldr	r2, [r7, #28]
 800ecf6:	e841 2300 	strex	r3, r2, [r1]
 800ecfa:	617b      	str	r3, [r7, #20]
   return(result);
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d1e6      	bne.n	800ecd0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ed02:	e002      	b.n	800ed0a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800ed04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ed06:	f7f4 fbc1 	bl	800348c <HAL_UART_TxCpltCallback>
}
 800ed0a:	bf00      	nop
 800ed0c:	3740      	adds	r7, #64	; 0x40
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}

0800ed12 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ed12:	b580      	push	{r7, lr}
 800ed14:	b084      	sub	sp, #16
 800ed16:	af00      	add	r7, sp, #0
 800ed18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed1e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ed20:	68f8      	ldr	r0, [r7, #12]
 800ed22:	f7fe fe13 	bl	800d94c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed26:	bf00      	nop
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}

0800ed2e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ed2e:	b580      	push	{r7, lr}
 800ed30:	b09c      	sub	sp, #112	; 0x70
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed3a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	69db      	ldr	r3, [r3, #28]
 800ed40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed44:	d071      	beq.n	800ee2a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ed46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed48:	2200      	movs	r2, #0
 800ed4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ed4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed56:	e853 3f00 	ldrex	r3, [r3]
 800ed5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ed5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ed62:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	461a      	mov	r2, r3
 800ed6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed6c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ed6e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ed72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed74:	e841 2300 	strex	r3, r2, [r1]
 800ed78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ed7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d1e6      	bne.n	800ed4e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	3308      	adds	r3, #8
 800ed86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed8a:	e853 3f00 	ldrex	r3, [r3]
 800ed8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ed90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed92:	f023 0301 	bic.w	r3, r3, #1
 800ed96:	667b      	str	r3, [r7, #100]	; 0x64
 800ed98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	3308      	adds	r3, #8
 800ed9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800eda0:	647a      	str	r2, [r7, #68]	; 0x44
 800eda2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eda4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eda6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eda8:	e841 2300 	strex	r3, r2, [r1]
 800edac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800edae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d1e5      	bne.n	800ed80 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800edb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	3308      	adds	r3, #8
 800edba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edbe:	e853 3f00 	ldrex	r3, [r3]
 800edc2:	623b      	str	r3, [r7, #32]
   return(result);
 800edc4:	6a3b      	ldr	r3, [r7, #32]
 800edc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800edca:	663b      	str	r3, [r7, #96]	; 0x60
 800edcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	3308      	adds	r3, #8
 800edd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800edd4:	633a      	str	r2, [r7, #48]	; 0x30
 800edd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800edda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eddc:	e841 2300 	strex	r3, r2, [r1]
 800ede0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ede2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d1e5      	bne.n	800edb4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ede8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edea:	2220      	movs	r2, #32
 800edec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	d118      	bne.n	800ee2a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800edf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	e853 3f00 	ldrex	r3, [r3]
 800ee04:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	f023 0310 	bic.w	r3, r3, #16
 800ee0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	461a      	mov	r2, r3
 800ee14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee16:	61fb      	str	r3, [r7, #28]
 800ee18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee1a:	69b9      	ldr	r1, [r7, #24]
 800ee1c:	69fa      	ldr	r2, [r7, #28]
 800ee1e:	e841 2300 	strex	r3, r2, [r1]
 800ee22:	617b      	str	r3, [r7, #20]
   return(result);
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d1e6      	bne.n	800edf8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ee2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	d107      	bne.n	800ee48 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ee38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee3e:	4619      	mov	r1, r3
 800ee40:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ee42:	f7fe fda1 	bl	800d988 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ee46:	e002      	b.n	800ee4e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800ee48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ee4a:	f7fe fd89 	bl	800d960 <HAL_UART_RxCpltCallback>
}
 800ee4e:	bf00      	nop
 800ee50:	3770      	adds	r7, #112	; 0x70
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}

0800ee56 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ee56:	b580      	push	{r7, lr}
 800ee58:	b084      	sub	sp, #16
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee62:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	2201      	movs	r2, #1
 800ee68:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee6e:	2b01      	cmp	r3, #1
 800ee70:	d109      	bne.n	800ee86 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee78:	085b      	lsrs	r3, r3, #1
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	68f8      	ldr	r0, [r7, #12]
 800ee80:	f7fe fd82 	bl	800d988 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ee84:	e002      	b.n	800ee8c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	f7fe fd74 	bl	800d974 <HAL_UART_RxHalfCpltCallback>
}
 800ee8c:	bf00      	nop
 800ee8e:	3710      	adds	r7, #16
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}

0800ee94 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b086      	sub	sp, #24
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eea0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eea8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eeb0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	689b      	ldr	r3, [r3, #8]
 800eeb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eebc:	2b80      	cmp	r3, #128	; 0x80
 800eebe:	d109      	bne.n	800eed4 <UART_DMAError+0x40>
 800eec0:	693b      	ldr	r3, [r7, #16]
 800eec2:	2b21      	cmp	r3, #33	; 0x21
 800eec4:	d106      	bne.n	800eed4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	2200      	movs	r2, #0
 800eeca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800eece:	6978      	ldr	r0, [r7, #20]
 800eed0:	f7ff fe2c 	bl	800eb2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	689b      	ldr	r3, [r3, #8]
 800eeda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eede:	2b40      	cmp	r3, #64	; 0x40
 800eee0:	d109      	bne.n	800eef6 <UART_DMAError+0x62>
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2b22      	cmp	r3, #34	; 0x22
 800eee6:	d106      	bne.n	800eef6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	2200      	movs	r2, #0
 800eeec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800eef0:	6978      	ldr	r0, [r7, #20]
 800eef2:	f7ff fe5d 	bl	800ebb0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eefc:	f043 0210 	orr.w	r2, r3, #16
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ef06:	6978      	ldr	r0, [r7, #20]
 800ef08:	f7f2 fc7a 	bl	8001800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef0c:	bf00      	nop
 800ef0e:	3718      	adds	r7, #24
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b084      	sub	sp, #16
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2200      	movs	r2, #0
 800ef26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ef32:	68f8      	ldr	r0, [r7, #12]
 800ef34:	f7f2 fc64 	bl	8001800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef38:	bf00      	nop
 800ef3a:	3710      	adds	r7, #16
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b088      	sub	sp, #32
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	e853 3f00 	ldrex	r3, [r3]
 800ef54:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef5c:	61fb      	str	r3, [r7, #28]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	461a      	mov	r2, r3
 800ef64:	69fb      	ldr	r3, [r7, #28]
 800ef66:	61bb      	str	r3, [r7, #24]
 800ef68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef6a:	6979      	ldr	r1, [r7, #20]
 800ef6c:	69ba      	ldr	r2, [r7, #24]
 800ef6e:	e841 2300 	strex	r3, r2, [r1]
 800ef72:	613b      	str	r3, [r7, #16]
   return(result);
 800ef74:	693b      	ldr	r3, [r7, #16]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d1e6      	bne.n	800ef48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2220      	movs	r2, #32
 800ef7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2200      	movs	r2, #0
 800ef86:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f7f4 fa7f 	bl	800348c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef8e:	bf00      	nop
 800ef90:	3720      	adds	r7, #32
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}

0800ef96 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ef96:	b480      	push	{r7}
 800ef98:	b083      	sub	sp, #12
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ef9e:	bf00      	nop
 800efa0:	370c      	adds	r7, #12
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr

0800efaa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800efaa:	b480      	push	{r7}
 800efac:	b083      	sub	sp, #12
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800efb2:	bf00      	nop
 800efb4:	370c      	adds	r7, #12
 800efb6:	46bd      	mov	sp, r7
 800efb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbc:	4770      	bx	lr

0800efbe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800efbe:	b480      	push	{r7}
 800efc0:	b083      	sub	sp, #12
 800efc2:	af00      	add	r7, sp, #0
 800efc4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800efc6:	bf00      	nop
 800efc8:	370c      	adds	r7, #12
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr

0800efd2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800efd2:	b480      	push	{r7}
 800efd4:	b085      	sub	sp, #20
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800efe0:	2b01      	cmp	r3, #1
 800efe2:	d101      	bne.n	800efe8 <HAL_UARTEx_DisableFifoMode+0x16>
 800efe4:	2302      	movs	r3, #2
 800efe6:	e027      	b.n	800f038 <HAL_UARTEx_DisableFifoMode+0x66>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2201      	movs	r2, #1
 800efec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2224      	movs	r2, #36	; 0x24
 800eff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	681a      	ldr	r2, [r3, #0]
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	f022 0201 	bic.w	r2, r2, #1
 800f00e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f016:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2200      	movs	r2, #0
 800f01c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	68fa      	ldr	r2, [r7, #12]
 800f024:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2220      	movs	r2, #32
 800f02a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2200      	movs	r2, #0
 800f032:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f036:	2300      	movs	r3, #0
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3714      	adds	r7, #20
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr

0800f044 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f054:	2b01      	cmp	r3, #1
 800f056:	d101      	bne.n	800f05c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f058:	2302      	movs	r3, #2
 800f05a:	e02d      	b.n	800f0b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2201      	movs	r2, #1
 800f060:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2224      	movs	r2, #36	; 0x24
 800f068:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f022 0201 	bic.w	r2, r2, #1
 800f082:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	683a      	ldr	r2, [r7, #0]
 800f094:	430a      	orrs	r2, r1
 800f096:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f000 f84f 	bl	800f13c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	68fa      	ldr	r2, [r7, #12]
 800f0a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2220      	movs	r2, #32
 800f0aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f0b6:	2300      	movs	r3, #0
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3710      	adds	r7, #16
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}

0800f0c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b084      	sub	sp, #16
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f0d0:	2b01      	cmp	r3, #1
 800f0d2:	d101      	bne.n	800f0d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f0d4:	2302      	movs	r3, #2
 800f0d6:	e02d      	b.n	800f134 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2201      	movs	r2, #1
 800f0dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2224      	movs	r2, #36	; 0x24
 800f0e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	681a      	ldr	r2, [r3, #0]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f022 0201 	bic.w	r2, r2, #1
 800f0fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	689b      	ldr	r3, [r3, #8]
 800f106:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	683a      	ldr	r2, [r7, #0]
 800f110:	430a      	orrs	r2, r1
 800f112:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f000 f811 	bl	800f13c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2220      	movs	r2, #32
 800f126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2200      	movs	r2, #0
 800f12e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f132:	2300      	movs	r3, #0
}
 800f134:	4618      	mov	r0, r3
 800f136:	3710      	adds	r7, #16
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b085      	sub	sp, #20
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d108      	bne.n	800f15e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2201      	movs	r2, #1
 800f150:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2201      	movs	r2, #1
 800f158:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f15c:	e031      	b.n	800f1c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f15e:	2310      	movs	r3, #16
 800f160:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f162:	2310      	movs	r3, #16
 800f164:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	689b      	ldr	r3, [r3, #8]
 800f16c:	0e5b      	lsrs	r3, r3, #25
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	f003 0307 	and.w	r3, r3, #7
 800f174:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	689b      	ldr	r3, [r3, #8]
 800f17c:	0f5b      	lsrs	r3, r3, #29
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	f003 0307 	and.w	r3, r3, #7
 800f184:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f186:	7bbb      	ldrb	r3, [r7, #14]
 800f188:	7b3a      	ldrb	r2, [r7, #12]
 800f18a:	4911      	ldr	r1, [pc, #68]	; (800f1d0 <UARTEx_SetNbDataToProcess+0x94>)
 800f18c:	5c8a      	ldrb	r2, [r1, r2]
 800f18e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f192:	7b3a      	ldrb	r2, [r7, #12]
 800f194:	490f      	ldr	r1, [pc, #60]	; (800f1d4 <UARTEx_SetNbDataToProcess+0x98>)
 800f196:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f198:	fb93 f3f2 	sdiv	r3, r3, r2
 800f19c:	b29a      	uxth	r2, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f1a4:	7bfb      	ldrb	r3, [r7, #15]
 800f1a6:	7b7a      	ldrb	r2, [r7, #13]
 800f1a8:	4909      	ldr	r1, [pc, #36]	; (800f1d0 <UARTEx_SetNbDataToProcess+0x94>)
 800f1aa:	5c8a      	ldrb	r2, [r1, r2]
 800f1ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f1b0:	7b7a      	ldrb	r2, [r7, #13]
 800f1b2:	4908      	ldr	r1, [pc, #32]	; (800f1d4 <UARTEx_SetNbDataToProcess+0x98>)
 800f1b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f1b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800f1ba:	b29a      	uxth	r2, r3
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f1c2:	bf00      	nop
 800f1c4:	3714      	adds	r7, #20
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr
 800f1ce:	bf00      	nop
 800f1d0:	0800f894 	.word	0x0800f894
 800f1d4:	0800f89c 	.word	0x0800f89c

0800f1d8 <__cxa_pure_virtual>:
 800f1d8:	b508      	push	{r3, lr}
 800f1da:	f000 f80d 	bl	800f1f8 <_ZSt9terminatev>

0800f1de <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f1de:	b508      	push	{r3, lr}
 800f1e0:	4780      	blx	r0
 800f1e2:	f000 f80e 	bl	800f202 <abort>
	...

0800f1e8 <_ZSt13get_terminatev>:
 800f1e8:	4b02      	ldr	r3, [pc, #8]	; (800f1f4 <_ZSt13get_terminatev+0xc>)
 800f1ea:	6818      	ldr	r0, [r3, #0]
 800f1ec:	f3bf 8f5b 	dmb	ish
 800f1f0:	4770      	bx	lr
 800f1f2:	bf00      	nop
 800f1f4:	24000010 	.word	0x24000010

0800f1f8 <_ZSt9terminatev>:
 800f1f8:	b508      	push	{r3, lr}
 800f1fa:	f7ff fff5 	bl	800f1e8 <_ZSt13get_terminatev>
 800f1fe:	f7ff ffee 	bl	800f1de <_ZN10__cxxabiv111__terminateEPFvvE>

0800f202 <abort>:
 800f202:	b508      	push	{r3, lr}
 800f204:	2006      	movs	r0, #6
 800f206:	f000 f873 	bl	800f2f0 <raise>
 800f20a:	2001      	movs	r0, #1
 800f20c:	f7f5 f966 	bl	80044dc <_exit>

0800f210 <__errno>:
 800f210:	4b01      	ldr	r3, [pc, #4]	; (800f218 <__errno+0x8>)
 800f212:	6818      	ldr	r0, [r3, #0]
 800f214:	4770      	bx	lr
 800f216:	bf00      	nop
 800f218:	24000014 	.word	0x24000014

0800f21c <__libc_init_array>:
 800f21c:	b570      	push	{r4, r5, r6, lr}
 800f21e:	4d0d      	ldr	r5, [pc, #52]	; (800f254 <__libc_init_array+0x38>)
 800f220:	4c0d      	ldr	r4, [pc, #52]	; (800f258 <__libc_init_array+0x3c>)
 800f222:	1b64      	subs	r4, r4, r5
 800f224:	10a4      	asrs	r4, r4, #2
 800f226:	2600      	movs	r6, #0
 800f228:	42a6      	cmp	r6, r4
 800f22a:	d109      	bne.n	800f240 <__libc_init_array+0x24>
 800f22c:	4d0b      	ldr	r5, [pc, #44]	; (800f25c <__libc_init_array+0x40>)
 800f22e:	4c0c      	ldr	r4, [pc, #48]	; (800f260 <__libc_init_array+0x44>)
 800f230:	f000 f9b0 	bl	800f594 <_init>
 800f234:	1b64      	subs	r4, r4, r5
 800f236:	10a4      	asrs	r4, r4, #2
 800f238:	2600      	movs	r6, #0
 800f23a:	42a6      	cmp	r6, r4
 800f23c:	d105      	bne.n	800f24a <__libc_init_array+0x2e>
 800f23e:	bd70      	pop	{r4, r5, r6, pc}
 800f240:	f855 3b04 	ldr.w	r3, [r5], #4
 800f244:	4798      	blx	r3
 800f246:	3601      	adds	r6, #1
 800f248:	e7ee      	b.n	800f228 <__libc_init_array+0xc>
 800f24a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f24e:	4798      	blx	r3
 800f250:	3601      	adds	r6, #1
 800f252:	e7f2      	b.n	800f23a <__libc_init_array+0x1e>
 800f254:	0800f8ac 	.word	0x0800f8ac
 800f258:	0800f8ac 	.word	0x0800f8ac
 800f25c:	0800f8ac 	.word	0x0800f8ac
 800f260:	0800f8b4 	.word	0x0800f8b4

0800f264 <memcpy>:
 800f264:	440a      	add	r2, r1
 800f266:	4291      	cmp	r1, r2
 800f268:	f100 33ff 	add.w	r3, r0, #4294967295
 800f26c:	d100      	bne.n	800f270 <memcpy+0xc>
 800f26e:	4770      	bx	lr
 800f270:	b510      	push	{r4, lr}
 800f272:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f27a:	4291      	cmp	r1, r2
 800f27c:	d1f9      	bne.n	800f272 <memcpy+0xe>
 800f27e:	bd10      	pop	{r4, pc}

0800f280 <memset>:
 800f280:	4402      	add	r2, r0
 800f282:	4603      	mov	r3, r0
 800f284:	4293      	cmp	r3, r2
 800f286:	d100      	bne.n	800f28a <memset+0xa>
 800f288:	4770      	bx	lr
 800f28a:	f803 1b01 	strb.w	r1, [r3], #1
 800f28e:	e7f9      	b.n	800f284 <memset+0x4>

0800f290 <realloc>:
 800f290:	4b02      	ldr	r3, [pc, #8]	; (800f29c <realloc+0xc>)
 800f292:	460a      	mov	r2, r1
 800f294:	4601      	mov	r1, r0
 800f296:	6818      	ldr	r0, [r3, #0]
 800f298:	f000 b8da 	b.w	800f450 <_realloc_r>
 800f29c:	24000014 	.word	0x24000014

0800f2a0 <_raise_r>:
 800f2a0:	291f      	cmp	r1, #31
 800f2a2:	b538      	push	{r3, r4, r5, lr}
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	460d      	mov	r5, r1
 800f2a8:	d904      	bls.n	800f2b4 <_raise_r+0x14>
 800f2aa:	2316      	movs	r3, #22
 800f2ac:	6003      	str	r3, [r0, #0]
 800f2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b2:	bd38      	pop	{r3, r4, r5, pc}
 800f2b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f2b6:	b112      	cbz	r2, 800f2be <_raise_r+0x1e>
 800f2b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f2bc:	b94b      	cbnz	r3, 800f2d2 <_raise_r+0x32>
 800f2be:	4620      	mov	r0, r4
 800f2c0:	f000 f830 	bl	800f324 <_getpid_r>
 800f2c4:	462a      	mov	r2, r5
 800f2c6:	4601      	mov	r1, r0
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2ce:	f000 b817 	b.w	800f300 <_kill_r>
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	d00a      	beq.n	800f2ec <_raise_r+0x4c>
 800f2d6:	1c59      	adds	r1, r3, #1
 800f2d8:	d103      	bne.n	800f2e2 <_raise_r+0x42>
 800f2da:	2316      	movs	r3, #22
 800f2dc:	6003      	str	r3, [r0, #0]
 800f2de:	2001      	movs	r0, #1
 800f2e0:	e7e7      	b.n	800f2b2 <_raise_r+0x12>
 800f2e2:	2400      	movs	r4, #0
 800f2e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f2e8:	4628      	mov	r0, r5
 800f2ea:	4798      	blx	r3
 800f2ec:	2000      	movs	r0, #0
 800f2ee:	e7e0      	b.n	800f2b2 <_raise_r+0x12>

0800f2f0 <raise>:
 800f2f0:	4b02      	ldr	r3, [pc, #8]	; (800f2fc <raise+0xc>)
 800f2f2:	4601      	mov	r1, r0
 800f2f4:	6818      	ldr	r0, [r3, #0]
 800f2f6:	f7ff bfd3 	b.w	800f2a0 <_raise_r>
 800f2fa:	bf00      	nop
 800f2fc:	24000014 	.word	0x24000014

0800f300 <_kill_r>:
 800f300:	b538      	push	{r3, r4, r5, lr}
 800f302:	4d07      	ldr	r5, [pc, #28]	; (800f320 <_kill_r+0x20>)
 800f304:	2300      	movs	r3, #0
 800f306:	4604      	mov	r4, r0
 800f308:	4608      	mov	r0, r1
 800f30a:	4611      	mov	r1, r2
 800f30c:	602b      	str	r3, [r5, #0]
 800f30e:	f7f5 f8d5 	bl	80044bc <_kill>
 800f312:	1c43      	adds	r3, r0, #1
 800f314:	d102      	bne.n	800f31c <_kill_r+0x1c>
 800f316:	682b      	ldr	r3, [r5, #0]
 800f318:	b103      	cbz	r3, 800f31c <_kill_r+0x1c>
 800f31a:	6023      	str	r3, [r4, #0]
 800f31c:	bd38      	pop	{r3, r4, r5, pc}
 800f31e:	bf00      	nop
 800f320:	24001b00 	.word	0x24001b00

0800f324 <_getpid_r>:
 800f324:	f7f5 b8c2 	b.w	80044ac <_getpid>

0800f328 <sbrk_aligned>:
 800f328:	b570      	push	{r4, r5, r6, lr}
 800f32a:	4e0e      	ldr	r6, [pc, #56]	; (800f364 <sbrk_aligned+0x3c>)
 800f32c:	460c      	mov	r4, r1
 800f32e:	6831      	ldr	r1, [r6, #0]
 800f330:	4605      	mov	r5, r0
 800f332:	b911      	cbnz	r1, 800f33a <sbrk_aligned+0x12>
 800f334:	f000 f8bc 	bl	800f4b0 <_sbrk_r>
 800f338:	6030      	str	r0, [r6, #0]
 800f33a:	4621      	mov	r1, r4
 800f33c:	4628      	mov	r0, r5
 800f33e:	f000 f8b7 	bl	800f4b0 <_sbrk_r>
 800f342:	1c43      	adds	r3, r0, #1
 800f344:	d00a      	beq.n	800f35c <sbrk_aligned+0x34>
 800f346:	1cc4      	adds	r4, r0, #3
 800f348:	f024 0403 	bic.w	r4, r4, #3
 800f34c:	42a0      	cmp	r0, r4
 800f34e:	d007      	beq.n	800f360 <sbrk_aligned+0x38>
 800f350:	1a21      	subs	r1, r4, r0
 800f352:	4628      	mov	r0, r5
 800f354:	f000 f8ac 	bl	800f4b0 <_sbrk_r>
 800f358:	3001      	adds	r0, #1
 800f35a:	d101      	bne.n	800f360 <sbrk_aligned+0x38>
 800f35c:	f04f 34ff 	mov.w	r4, #4294967295
 800f360:	4620      	mov	r0, r4
 800f362:	bd70      	pop	{r4, r5, r6, pc}
 800f364:	24001afc 	.word	0x24001afc

0800f368 <_malloc_r>:
 800f368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f36c:	1ccd      	adds	r5, r1, #3
 800f36e:	f025 0503 	bic.w	r5, r5, #3
 800f372:	3508      	adds	r5, #8
 800f374:	2d0c      	cmp	r5, #12
 800f376:	bf38      	it	cc
 800f378:	250c      	movcc	r5, #12
 800f37a:	2d00      	cmp	r5, #0
 800f37c:	4607      	mov	r7, r0
 800f37e:	db01      	blt.n	800f384 <_malloc_r+0x1c>
 800f380:	42a9      	cmp	r1, r5
 800f382:	d905      	bls.n	800f390 <_malloc_r+0x28>
 800f384:	230c      	movs	r3, #12
 800f386:	603b      	str	r3, [r7, #0]
 800f388:	2600      	movs	r6, #0
 800f38a:	4630      	mov	r0, r6
 800f38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f390:	4e2e      	ldr	r6, [pc, #184]	; (800f44c <_malloc_r+0xe4>)
 800f392:	f000 f89d 	bl	800f4d0 <__malloc_lock>
 800f396:	6833      	ldr	r3, [r6, #0]
 800f398:	461c      	mov	r4, r3
 800f39a:	bb34      	cbnz	r4, 800f3ea <_malloc_r+0x82>
 800f39c:	4629      	mov	r1, r5
 800f39e:	4638      	mov	r0, r7
 800f3a0:	f7ff ffc2 	bl	800f328 <sbrk_aligned>
 800f3a4:	1c43      	adds	r3, r0, #1
 800f3a6:	4604      	mov	r4, r0
 800f3a8:	d14d      	bne.n	800f446 <_malloc_r+0xde>
 800f3aa:	6834      	ldr	r4, [r6, #0]
 800f3ac:	4626      	mov	r6, r4
 800f3ae:	2e00      	cmp	r6, #0
 800f3b0:	d140      	bne.n	800f434 <_malloc_r+0xcc>
 800f3b2:	6823      	ldr	r3, [r4, #0]
 800f3b4:	4631      	mov	r1, r6
 800f3b6:	4638      	mov	r0, r7
 800f3b8:	eb04 0803 	add.w	r8, r4, r3
 800f3bc:	f000 f878 	bl	800f4b0 <_sbrk_r>
 800f3c0:	4580      	cmp	r8, r0
 800f3c2:	d13a      	bne.n	800f43a <_malloc_r+0xd2>
 800f3c4:	6821      	ldr	r1, [r4, #0]
 800f3c6:	3503      	adds	r5, #3
 800f3c8:	1a6d      	subs	r5, r5, r1
 800f3ca:	f025 0503 	bic.w	r5, r5, #3
 800f3ce:	3508      	adds	r5, #8
 800f3d0:	2d0c      	cmp	r5, #12
 800f3d2:	bf38      	it	cc
 800f3d4:	250c      	movcc	r5, #12
 800f3d6:	4629      	mov	r1, r5
 800f3d8:	4638      	mov	r0, r7
 800f3da:	f7ff ffa5 	bl	800f328 <sbrk_aligned>
 800f3de:	3001      	adds	r0, #1
 800f3e0:	d02b      	beq.n	800f43a <_malloc_r+0xd2>
 800f3e2:	6823      	ldr	r3, [r4, #0]
 800f3e4:	442b      	add	r3, r5
 800f3e6:	6023      	str	r3, [r4, #0]
 800f3e8:	e00e      	b.n	800f408 <_malloc_r+0xa0>
 800f3ea:	6822      	ldr	r2, [r4, #0]
 800f3ec:	1b52      	subs	r2, r2, r5
 800f3ee:	d41e      	bmi.n	800f42e <_malloc_r+0xc6>
 800f3f0:	2a0b      	cmp	r2, #11
 800f3f2:	d916      	bls.n	800f422 <_malloc_r+0xba>
 800f3f4:	1961      	adds	r1, r4, r5
 800f3f6:	42a3      	cmp	r3, r4
 800f3f8:	6025      	str	r5, [r4, #0]
 800f3fa:	bf18      	it	ne
 800f3fc:	6059      	strne	r1, [r3, #4]
 800f3fe:	6863      	ldr	r3, [r4, #4]
 800f400:	bf08      	it	eq
 800f402:	6031      	streq	r1, [r6, #0]
 800f404:	5162      	str	r2, [r4, r5]
 800f406:	604b      	str	r3, [r1, #4]
 800f408:	4638      	mov	r0, r7
 800f40a:	f104 060b 	add.w	r6, r4, #11
 800f40e:	f000 f865 	bl	800f4dc <__malloc_unlock>
 800f412:	f026 0607 	bic.w	r6, r6, #7
 800f416:	1d23      	adds	r3, r4, #4
 800f418:	1af2      	subs	r2, r6, r3
 800f41a:	d0b6      	beq.n	800f38a <_malloc_r+0x22>
 800f41c:	1b9b      	subs	r3, r3, r6
 800f41e:	50a3      	str	r3, [r4, r2]
 800f420:	e7b3      	b.n	800f38a <_malloc_r+0x22>
 800f422:	6862      	ldr	r2, [r4, #4]
 800f424:	42a3      	cmp	r3, r4
 800f426:	bf0c      	ite	eq
 800f428:	6032      	streq	r2, [r6, #0]
 800f42a:	605a      	strne	r2, [r3, #4]
 800f42c:	e7ec      	b.n	800f408 <_malloc_r+0xa0>
 800f42e:	4623      	mov	r3, r4
 800f430:	6864      	ldr	r4, [r4, #4]
 800f432:	e7b2      	b.n	800f39a <_malloc_r+0x32>
 800f434:	4634      	mov	r4, r6
 800f436:	6876      	ldr	r6, [r6, #4]
 800f438:	e7b9      	b.n	800f3ae <_malloc_r+0x46>
 800f43a:	230c      	movs	r3, #12
 800f43c:	603b      	str	r3, [r7, #0]
 800f43e:	4638      	mov	r0, r7
 800f440:	f000 f84c 	bl	800f4dc <__malloc_unlock>
 800f444:	e7a1      	b.n	800f38a <_malloc_r+0x22>
 800f446:	6025      	str	r5, [r4, #0]
 800f448:	e7de      	b.n	800f408 <_malloc_r+0xa0>
 800f44a:	bf00      	nop
 800f44c:	24001af8 	.word	0x24001af8

0800f450 <_realloc_r>:
 800f450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f454:	4680      	mov	r8, r0
 800f456:	4614      	mov	r4, r2
 800f458:	460e      	mov	r6, r1
 800f45a:	b921      	cbnz	r1, 800f466 <_realloc_r+0x16>
 800f45c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f460:	4611      	mov	r1, r2
 800f462:	f7ff bf81 	b.w	800f368 <_malloc_r>
 800f466:	b92a      	cbnz	r2, 800f474 <_realloc_r+0x24>
 800f468:	f000 f83e 	bl	800f4e8 <_free_r>
 800f46c:	4625      	mov	r5, r4
 800f46e:	4628      	mov	r0, r5
 800f470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f474:	f000 f884 	bl	800f580 <_malloc_usable_size_r>
 800f478:	4284      	cmp	r4, r0
 800f47a:	4607      	mov	r7, r0
 800f47c:	d802      	bhi.n	800f484 <_realloc_r+0x34>
 800f47e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f482:	d812      	bhi.n	800f4aa <_realloc_r+0x5a>
 800f484:	4621      	mov	r1, r4
 800f486:	4640      	mov	r0, r8
 800f488:	f7ff ff6e 	bl	800f368 <_malloc_r>
 800f48c:	4605      	mov	r5, r0
 800f48e:	2800      	cmp	r0, #0
 800f490:	d0ed      	beq.n	800f46e <_realloc_r+0x1e>
 800f492:	42bc      	cmp	r4, r7
 800f494:	4622      	mov	r2, r4
 800f496:	4631      	mov	r1, r6
 800f498:	bf28      	it	cs
 800f49a:	463a      	movcs	r2, r7
 800f49c:	f7ff fee2 	bl	800f264 <memcpy>
 800f4a0:	4631      	mov	r1, r6
 800f4a2:	4640      	mov	r0, r8
 800f4a4:	f000 f820 	bl	800f4e8 <_free_r>
 800f4a8:	e7e1      	b.n	800f46e <_realloc_r+0x1e>
 800f4aa:	4635      	mov	r5, r6
 800f4ac:	e7df      	b.n	800f46e <_realloc_r+0x1e>
	...

0800f4b0 <_sbrk_r>:
 800f4b0:	b538      	push	{r3, r4, r5, lr}
 800f4b2:	4d06      	ldr	r5, [pc, #24]	; (800f4cc <_sbrk_r+0x1c>)
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	4604      	mov	r4, r0
 800f4b8:	4608      	mov	r0, r1
 800f4ba:	602b      	str	r3, [r5, #0]
 800f4bc:	f7f5 f818 	bl	80044f0 <_sbrk>
 800f4c0:	1c43      	adds	r3, r0, #1
 800f4c2:	d102      	bne.n	800f4ca <_sbrk_r+0x1a>
 800f4c4:	682b      	ldr	r3, [r5, #0]
 800f4c6:	b103      	cbz	r3, 800f4ca <_sbrk_r+0x1a>
 800f4c8:	6023      	str	r3, [r4, #0]
 800f4ca:	bd38      	pop	{r3, r4, r5, pc}
 800f4cc:	24001b00 	.word	0x24001b00

0800f4d0 <__malloc_lock>:
 800f4d0:	4801      	ldr	r0, [pc, #4]	; (800f4d8 <__malloc_lock+0x8>)
 800f4d2:	f000 b85d 	b.w	800f590 <__retarget_lock_acquire_recursive>
 800f4d6:	bf00      	nop
 800f4d8:	24001b04 	.word	0x24001b04

0800f4dc <__malloc_unlock>:
 800f4dc:	4801      	ldr	r0, [pc, #4]	; (800f4e4 <__malloc_unlock+0x8>)
 800f4de:	f000 b858 	b.w	800f592 <__retarget_lock_release_recursive>
 800f4e2:	bf00      	nop
 800f4e4:	24001b04 	.word	0x24001b04

0800f4e8 <_free_r>:
 800f4e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4ea:	2900      	cmp	r1, #0
 800f4ec:	d044      	beq.n	800f578 <_free_r+0x90>
 800f4ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4f2:	9001      	str	r0, [sp, #4]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	f1a1 0404 	sub.w	r4, r1, #4
 800f4fa:	bfb8      	it	lt
 800f4fc:	18e4      	addlt	r4, r4, r3
 800f4fe:	f7ff ffe7 	bl	800f4d0 <__malloc_lock>
 800f502:	4a1e      	ldr	r2, [pc, #120]	; (800f57c <_free_r+0x94>)
 800f504:	9801      	ldr	r0, [sp, #4]
 800f506:	6813      	ldr	r3, [r2, #0]
 800f508:	b933      	cbnz	r3, 800f518 <_free_r+0x30>
 800f50a:	6063      	str	r3, [r4, #4]
 800f50c:	6014      	str	r4, [r2, #0]
 800f50e:	b003      	add	sp, #12
 800f510:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f514:	f7ff bfe2 	b.w	800f4dc <__malloc_unlock>
 800f518:	42a3      	cmp	r3, r4
 800f51a:	d908      	bls.n	800f52e <_free_r+0x46>
 800f51c:	6825      	ldr	r5, [r4, #0]
 800f51e:	1961      	adds	r1, r4, r5
 800f520:	428b      	cmp	r3, r1
 800f522:	bf01      	itttt	eq
 800f524:	6819      	ldreq	r1, [r3, #0]
 800f526:	685b      	ldreq	r3, [r3, #4]
 800f528:	1949      	addeq	r1, r1, r5
 800f52a:	6021      	streq	r1, [r4, #0]
 800f52c:	e7ed      	b.n	800f50a <_free_r+0x22>
 800f52e:	461a      	mov	r2, r3
 800f530:	685b      	ldr	r3, [r3, #4]
 800f532:	b10b      	cbz	r3, 800f538 <_free_r+0x50>
 800f534:	42a3      	cmp	r3, r4
 800f536:	d9fa      	bls.n	800f52e <_free_r+0x46>
 800f538:	6811      	ldr	r1, [r2, #0]
 800f53a:	1855      	adds	r5, r2, r1
 800f53c:	42a5      	cmp	r5, r4
 800f53e:	d10b      	bne.n	800f558 <_free_r+0x70>
 800f540:	6824      	ldr	r4, [r4, #0]
 800f542:	4421      	add	r1, r4
 800f544:	1854      	adds	r4, r2, r1
 800f546:	42a3      	cmp	r3, r4
 800f548:	6011      	str	r1, [r2, #0]
 800f54a:	d1e0      	bne.n	800f50e <_free_r+0x26>
 800f54c:	681c      	ldr	r4, [r3, #0]
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	6053      	str	r3, [r2, #4]
 800f552:	4421      	add	r1, r4
 800f554:	6011      	str	r1, [r2, #0]
 800f556:	e7da      	b.n	800f50e <_free_r+0x26>
 800f558:	d902      	bls.n	800f560 <_free_r+0x78>
 800f55a:	230c      	movs	r3, #12
 800f55c:	6003      	str	r3, [r0, #0]
 800f55e:	e7d6      	b.n	800f50e <_free_r+0x26>
 800f560:	6825      	ldr	r5, [r4, #0]
 800f562:	1961      	adds	r1, r4, r5
 800f564:	428b      	cmp	r3, r1
 800f566:	bf04      	itt	eq
 800f568:	6819      	ldreq	r1, [r3, #0]
 800f56a:	685b      	ldreq	r3, [r3, #4]
 800f56c:	6063      	str	r3, [r4, #4]
 800f56e:	bf04      	itt	eq
 800f570:	1949      	addeq	r1, r1, r5
 800f572:	6021      	streq	r1, [r4, #0]
 800f574:	6054      	str	r4, [r2, #4]
 800f576:	e7ca      	b.n	800f50e <_free_r+0x26>
 800f578:	b003      	add	sp, #12
 800f57a:	bd30      	pop	{r4, r5, pc}
 800f57c:	24001af8 	.word	0x24001af8

0800f580 <_malloc_usable_size_r>:
 800f580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f584:	1f18      	subs	r0, r3, #4
 800f586:	2b00      	cmp	r3, #0
 800f588:	bfbc      	itt	lt
 800f58a:	580b      	ldrlt	r3, [r1, r0]
 800f58c:	18c0      	addlt	r0, r0, r3
 800f58e:	4770      	bx	lr

0800f590 <__retarget_lock_acquire_recursive>:
 800f590:	4770      	bx	lr

0800f592 <__retarget_lock_release_recursive>:
 800f592:	4770      	bx	lr

0800f594 <_init>:
 800f594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f596:	bf00      	nop
 800f598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f59a:	bc08      	pop	{r3}
 800f59c:	469e      	mov	lr, r3
 800f59e:	4770      	bx	lr

0800f5a0 <_fini>:
 800f5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5a2:	bf00      	nop
 800f5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5a6:	bc08      	pop	{r3}
 800f5a8:	469e      	mov	lr, r3
 800f5aa:	4770      	bx	lr
